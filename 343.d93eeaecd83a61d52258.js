/*! For license information please see 343.d93eeaecd83a61d52258.js.LICENSE.txt */
"use strict";(self.webpackChunklala_land_frontend=self.webpackChunklala_land_frontend||[]).push([[343],{"./node_modules/.pnpm/@emotion+is-prop-valid@0.8.8/node_modules/@emotion/is-prop-valid/dist/is-prop-valid.browser.esm.js":(e,t,o)=>{o.d(t,{A:()=>n});var r=/^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|inert|itemProp|itemScope|itemType|itemID|itemRef|on|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/;const n=(a={},function(e){return void 0===a[e]&&(a[e]=(t=e,r.test(t)||111===t.charCodeAt(0)&&110===t.charCodeAt(1)&&t.charCodeAt(2)<91)),a[e];var t});var a},"./node_modules/.pnpm/@mui+icons-material@5.16.4_@mui+material@5.16.4_@emotion+react@11.13.0_@types+react@18.3.3_re_nbdaqwfqqipzti35upcsmwmgry/node_modules/@mui/icons-material/FiberManualRecord.js":(e,t,o)=>{var r=o("./node_modules/.pnpm/@babel+runtime@7.24.8/node_modules/@babel/runtime/helpers/interopRequireDefault.js");Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n=r(o("./node_modules/.pnpm/@mui+icons-material@5.16.4_@mui+material@5.16.4_@emotion+react@11.13.0_@types+react@18.3.3_re_nbdaqwfqqipzti35upcsmwmgry/node_modules/@mui/icons-material/utils/createSvgIcon.js")),a=o("./node_modules/.pnpm/react@18.3.1/node_modules/react/jsx-runtime.js");t.default=(0,n.default)((0,a.jsx)("circle",{cx:"12",cy:"12",r:"8"}),"FiberManualRecord")},"./node_modules/.pnpm/@mui+icons-material@5.16.4_@mui+material@5.16.4_@emotion+react@11.13.0_@types+react@18.3.3_re_nbdaqwfqqipzti35upcsmwmgry/node_modules/@mui/icons-material/NavigateBefore.js":(e,t,o)=>{var r=o("./node_modules/.pnpm/@babel+runtime@7.24.8/node_modules/@babel/runtime/helpers/interopRequireDefault.js");Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n=r(o("./node_modules/.pnpm/@mui+icons-material@5.16.4_@mui+material@5.16.4_@emotion+react@11.13.0_@types+react@18.3.3_re_nbdaqwfqqipzti35upcsmwmgry/node_modules/@mui/icons-material/utils/createSvgIcon.js")),a=o("./node_modules/.pnpm/react@18.3.1/node_modules/react/jsx-runtime.js");t.default=(0,n.default)((0,a.jsx)("path",{d:"M15.41 7.41 14 6l-6 6 6 6 1.41-1.41L10.83 12z"}),"NavigateBefore")},"./node_modules/.pnpm/@mui+icons-material@5.16.4_@mui+material@5.16.4_@emotion+react@11.13.0_@types+react@18.3.3_re_nbdaqwfqqipzti35upcsmwmgry/node_modules/@mui/icons-material/NavigateNext.js":(e,t,o)=>{var r=o("./node_modules/.pnpm/@babel+runtime@7.24.8/node_modules/@babel/runtime/helpers/interopRequireDefault.js");Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n=r(o("./node_modules/.pnpm/@mui+icons-material@5.16.4_@mui+material@5.16.4_@emotion+react@11.13.0_@types+react@18.3.3_re_nbdaqwfqqipzti35upcsmwmgry/node_modules/@mui/icons-material/utils/createSvgIcon.js")),a=o("./node_modules/.pnpm/react@18.3.1/node_modules/react/jsx-runtime.js");t.default=(0,n.default)((0,a.jsx)("path",{d:"M10 6 8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"}),"NavigateNext")},"./node_modules/.pnpm/@mui+material@5.16.4_@emotion+react@11.13.0_@types+react@18.3.3_react@18.3.1__@emotion+styled_brxipnv4yvqheosgxcawdxdyay/node_modules/@mui/material/index.js":(e,t,o)=>{o.r(t),o.d(t,{Accordion:()=>Ut,AccordionActions:()=>Kt,AccordionDetails:()=>to,AccordionSummary:()=>co,Alert:()=>Ro,AlertTitle:()=>Do,AppBar:()=>Fo.A,Autocomplete:()=>fa,Avatar:()=>wa,AvatarGroup:()=>Ma,Backdrop:()=>Ia.A,Badge:()=>Ba,BottomNavigation:()=>Wa,BottomNavigationAction:()=>Xa,Box:()=>Ya.A,Breadcrumbs:()=>ci,Button:()=>ui.A,ButtonBase:()=>oo.A,ButtonGroup:()=>Ai,ButtonGroupButtonContext:()=>yi.A,ButtonGroupContext:()=>gi.A,Card:()=>ki,CardActionArea:()=>$i,CardActions:()=>Bi,CardContent:()=>Wi,CardHeader:()=>Ki,CardMedia:()=>ns,Checkbox:()=>as.A,Chip:()=>zn,CircularProgress:()=>As,ClickAwayListener:()=>Ss,Collapse:()=>Mt,Container:()=>Vs,CssBaseline:()=>qs.Ay,Dialog:()=>al,DialogActions:()=>ul,DialogContent:()=>gl,DialogContentText:()=>Sl,DialogTitle:()=>kl,Divider:()=>$l,Drawer:()=>Zl,Experimental_CssVarsProvider:()=>it,Fab:()=>oc,Fade:()=>Ks.A,FilledInput:()=>Ic,FormControl:()=>Ec,FormControlLabel:()=>Jc,FormGroup:()=>ru,FormHelperText:()=>cu,FormLabel:()=>vu,FormLabelRoot:()=>mu,GlobalStyles:()=>vc.A,Grid:()=>ku,Grow:()=>ed.A,Hidden:()=>hd,Icon:()=>wd,IconButton:()=>fo.A,ImageList:()=>Id,ImageListItem:()=>Ed,ImageListItemBar:()=>Ud,Input:()=>Kd,InputAdornment:()=>op,InputBase:()=>_c,InputLabel:()=>sp,LinearProgress:()=>kp,Link:()=>Op,List:()=>Ep.A,ListItem:()=>Qp,ListItemAvatar:()=>nm,ListItemButton:()=>sm,ListItemIcon:()=>dm,ListItemSecondaryAction:()=>Xp,ListItemText:()=>vm,ListSubheader:()=>jn,Menu:()=>hm.A,MenuItem:()=>ym.A,MenuList:()=>xm.A,MobileStepper:()=>Mm,Modal:()=>Ys.A,ModalManager:()=>Im.P,NativeSelect:()=>Hm,NoSsr:()=>Um,OutlinedInput:()=>tf,Pagination:()=>Cf,PaginationItem:()=>bf,Paper:()=>It.A,Popover:()=>kf.Ay,PopoverPaper:()=>kf.IJ,PopoverRoot:()=>kf.yt,Popper:()=>_n,Portal:()=>fn.A,Radio:()=>Hf,RadioGroup:()=>Yf,Rating:()=>fv,ScopedCssBaseline:()=>bv,Select:()=>Nv,Skeleton:()=>Zv,Slide:()=>zl,Slider:()=>kh,SliderMark:()=>wh,SliderMarkLabel:()=>Sh,SliderRail:()=>yh,SliderRoot:()=>gh,SliderThumb:()=>xh,SliderTrack:()=>bh,SliderValueLabel:()=>Ah,Snackbar:()=>zh,SnackbarContent:()=>Th,SpeedDial:()=>Qh,SpeedDialAction:()=>yg,SpeedDialIcon:()=>_g,Stack:()=>qc,Step:()=>Bg,StepButton:()=>sy,StepConnector:()=>my,StepContent:()=>by,StepContext:()=>$g,StepIcon:()=>Gg,StepLabel:()=>oy,Stepper:()=>_y,StepperContext:()=>Mg,StyledEngineProvider:()=>me.A,SvgIcon:()=>Dg.A,SwipeableDrawer:()=>Fy,Switch:()=>Yy,THEME_ID:()=>_.A,Tab:()=>eb,TabScrollButton:()=>Ix,Table:()=>sb,TableBody:()=>vb,TableCell:()=>Ab,TableContainer:()=>kb,TableFooter:()=>Tb,TableHead:()=>Db,TablePagination:()=>ax,TableRow:()=>px,TableSortLabel:()=>bx,Tabs:()=>Hx,TextField:()=>Kx,TextareaAutosize:()=>uc,ThemeProvider:()=>pe.A,ToggleButton:()=>aA,ToggleButtonGroup:()=>uA,Toolbar:()=>Fb.A,Tooltip:()=>dg,Typography:()=>Oo,Unstable_Grid2:()=>Yu,Unstable_TrapFocus:()=>hA.A,Zoom:()=>Vh,accordionActionsClasses:()=>Gt,accordionClasses:()=>Wt,accordionDetailsClasses:()=>Jt,accordionSummaryClasses:()=>no,adaptV4Theme:()=>$,alertClasses:()=>mo,alertTitleClasses:()=>Bo,alpha:()=>W,appBarClasses:()=>Wo.A,autocompleteClasses:()=>Kn,avatarClasses:()=>ga,avatarGroupClasses:()=>Ca,backdropClasses:()=>ja.A,badgeClasses:()=>Ta,bottomNavigationActionClasses:()=>Ha,bottomNavigationClasses:()=>za,boxClasses:()=>Ka.A,breadcrumbsClasses:()=>ri,buttonBaseClasses:()=>pi.A,buttonClasses:()=>di.A,buttonGroupClasses:()=>hi,capitalize:()=>pt.capitalize,cardActionAreaClasses:()=>Pi,cardActionsClasses:()=>Li,cardClasses:()=>Si,cardContentClasses:()=>zi,cardHeaderClasses:()=>Hi,cardMediaClasses:()=>Ji,checkboxClasses:()=>is.A,chipClasses:()=>Ln,circularProgressClasses:()=>ls,collapseClasses:()=>St,colors:()=>r,containerClasses:()=>Us,createChainedFunction:()=>pt.createChainedFunction,createFilterOptions:()=>Yo,createMuiTheme:()=>G.D,createStyles:()=>Z,createSvgIcon:()=>pt.createSvgIcon,createTheme:()=>G.A,css:()=>q.AH,darkScrollbar:()=>Xs,darken:()=>V,debounce:()=>pt.debounce,decomposeColor:()=>E,deprecatedPropType:()=>pt.deprecatedPropType,dialogActionsClasses:()=>sl,dialogClasses:()=>Js,dialogContentClasses:()=>pl,dialogContentTextClasses:()=>xl,dialogTitleClasses:()=>fl,dividerClasses:()=>Rl.A,drawerClasses:()=>Fl,duration:()=>re.p0,easing:()=>re.cz,emphasize:()=>U,experimentalStyled:()=>de.Ay,experimental_extendTheme:()=>Ze,experimental_sx:()=>dt,fabClasses:()=>Ql,filledInputClasses:()=>Gn,formControlClasses:()=>Tc,formControlLabelClasses:()=>Xc,formGroupClasses:()=>eu,formHelperTextClasses:()=>au,formLabelClasses:()=>du,generateUtilityClass:()=>At.Ay,generateUtilityClasses:()=>xt.A,getAccordionActionsUtilityClass:()=>qt,getAccordionDetailsUtilityClass:()=>Zt,getAccordionSummaryUtilityClass:()=>ro,getAccordionUtilityClass:()=>Ft,getAlertTitleUtilityClass:()=>Eo,getAlertUtilityClass:()=>po,getAppBarUtilityClass:()=>Wo.F,getAutocompleteUtilityClass:()=>Yn,getAvatarGroupUtilityClass:()=>Sa,getAvatarUtilityClass:()=>ha,getBackdropUtilityClass:()=>ja.R,getBadgeUtilityClass:()=>$a,getBottomNavigationActionUtilityClass:()=>Va,getBottomNavigationUtilityClass:()=>Na,getBreadcrumbsUtilityClass:()=>oi,getButtonBaseUtilityClass:()=>pi.W,getButtonGroupUtilityClass:()=>vi,getButtonUtilityClass:()=>di.B,getCardActionAreaUtilityClass:()=>Ri,getCardActionsUtilityClass:()=>Ti,getCardContentUtilityClass:()=>Ni,getCardHeaderUtilityClass:()=>Vi,getCardMediaUtilityClass:()=>Zi,getCardUtilityClass:()=>wi,getCheckboxUtilityClass:()=>is.w,getChipUtilityClass:()=>Tn,getCircularProgressUtilityClass:()=>ss,getCollapseUtilityClass:()=>wt,getContainerUtilityClass:()=>Hs,getContrastRatio:()=>F,getDialogActionsUtilityClass:()=>il,getDialogContentTextUtilityClass:()=>bl,getDialogContentUtilityClass:()=>dl,getDialogTitleUtilityClass:()=>ml,getDialogUtilityClass:()=>Zs,getDividerUtilityClass:()=>Rl.K,getDrawerUtilityClass:()=>Dl,getFabUtilityClass:()=>Jl,getFilledInputUtilityClass:()=>qn,getFormControlLabelUtilityClasses:()=>Gc,getFormControlUtilityClasses:()=>$c,getFormGroupUtilityClass:()=>Qc,getFormHelperTextUtilityClasses:()=>nu,getFormLabelUtilityClasses:()=>uu,getGrid2UtilityClass:()=>Ku,getGridUtilityClass:()=>gu,getIconButtonUtilityClass:()=>Sd.G,getIconUtilityClass:()=>gd,getImageListItemBarUtilityClass:()=>Bd,getImageListItemUtilityClass:()=>jd,getImageListUtilityClass:()=>Cd,getInitColorSchemeScript:()=>ct,getInputAdornmentUtilityClass:()=>Zd,getInputBaseUtilityClass:()=>Dn,getInputLabelUtilityClasses:()=>rp,getInputUtilityClass:()=>Wn,getLinearProgressUtilityClass:()=>lp,getLinkUtilityClass:()=>Pp,getListItemAvatarUtilityClass:()=>em,getListItemButtonUtilityClass:()=>Fp,getListItemIconUtilityClass:()=>lm.f,getListItemSecondaryActionClassesUtilityClass:()=>Vp,getListItemTextUtilityClass:()=>pm.b,getListItemUtilityClass:()=>zp,getListSubheaderUtilityClass:()=>kn,getListUtilityClass:()=>Bp.H,getLuminance:()=>D,getMenuItemUtilityClass:()=>bm.Z,getMenuUtilityClass:()=>gm.e,getMobileStepperUtilityClass:()=>wm,getModalUtilityClass:()=>jm.M,getNativeSelectUtilityClasses:()=>$m,getOffsetLeft:()=>kf.fB,getOffsetTop:()=>kf.Dy,getOutlinedInputUtilityClass:()=>Hn,getOverlayAlpha:()=>We.A,getPaginationItemUtilityClass:()=>sf,getPaginationUtilityClass:()=>of,getPaperUtilityClass:()=>_f.j,getPopoverUtilityClass:()=>Rf.K,getPopperUtilityClass:()=>vn,getRadioGroupUtilityClass:()=>Uf,getRadioUtilityClass:()=>Nf,getRatingUtilityClass:()=>Qf,getScopedCssBaselineUtilityClass:()=>vv,getSelectUtilityClasses:()=>Av,getSkeletonUtilityClass:()=>zv,getSliderUtilityClass:()=>mh,getSnackbarContentUtilityClass:()=>Rh,getSnackbarUtilityClass:()=>Lh,getSpeedDialActionUtilityClass:()=>pg,getSpeedDialIconUtilityClass:()=>xg,getSpeedDialUtilityClass:()=>Hh,getStepButtonUtilityClass:()=>ry,getStepConnectorUtilityClass:()=>ly,getStepContentUtilityClass:()=>fy,getStepIconUtilityClass:()=>Fg,getStepLabelUtilityClass:()=>Xg,getStepUtilityClass:()=>Tg,getStepperUtilityClass:()=>xy,getSvgIconUtilityClass:()=>ky.E,getSwitchUtilityClass:()=>Wy,getTabScrollButtonUtilityClass:()=>kx,getTabUtilityClass:()=>Ky,getTableBodyUtilityClass:()=>cb,getTableCellUtilityClass:()=>hb,getTableContainerUtilityClass:()=>wb,getTableFooterUtilityClass:()=>Rb,getTableHeadUtilityClass:()=>Lb,getTablePaginationUtilityClass:()=>qb,getTableRowUtilityClass:()=>ix,getTableSortLabelUtilityClass:()=>fx,getTableUtilityClass:()=>ob,getTabsUtilityClass:()=>jx,getTextFieldUtilityClass:()=>Ux,getToggleButtonGroupUtilityClass:()=>iA,getToggleButtonUtilityClass:()=>Zx,getToolbarUtilityClass:()=>dA.U,getTooltipUtilityClass:()=>tg,getTouchRippleUtilityClass:()=>mi.O,getTypographyUtilityClass:()=>Mo,grid2Classes:()=>Qu,gridClasses:()=>xu,hexToRgb:()=>O,hslToRgb:()=>z,iconButtonClasses:()=>Sd.A,iconClasses:()=>yd,imageListClasses:()=>_d,imageListItemBarClasses:()=>Nd,imageListItemClasses:()=>$d,inputAdornmentClasses:()=>Jd,inputBaseClasses:()=>Fn,inputClasses:()=>Vn,inputLabelClasses:()=>np,isMuiElement:()=>pt.isMuiElement,keyframes:()=>q.i7,lighten:()=>H,linearProgressClasses:()=>cp,linkClasses:()=>Mp,listClasses:()=>Bp.A,listItemAvatarClasses:()=>tm,listItemButtonClasses:()=>Wp,listItemClasses:()=>Dp,listItemIconClasses:()=>lm.A,listItemSecondaryActionClasses:()=>Hp,listItemTextClasses:()=>pm.A,listSubheaderClasses:()=>Rn,makeStyles:()=>fe,menuClasses:()=>gm.A,menuItemClasses:()=>bm.A,mobileStepperClasses:()=>Sm,modalClasses:()=>jm.A,nativeSelectClasses:()=>Tm,outlinedInputClasses:()=>Un,ownerDocument:()=>pt.ownerDocument,ownerWindow:()=>pt.ownerWindow,paginationClasses:()=>rf,paginationItemClasses:()=>lf,paperClasses:()=>_f.A,popoverClasses:()=>Rf.A,private_createMixins:()=>ut.A,private_createTypography:()=>Je.A,private_excludeVariablesFromRoot:()=>Qe,radioClasses:()=>zf,radioGroupClasses:()=>qf,ratingClasses:()=>ev,recomposeColor:()=>B,requirePropFactory:()=>pt.requirePropFactory,responsiveFontSizes:()=>oe,rgbToHex:()=>N,scopedCssBaselineClasses:()=>hv,selectClasses:()=>wv,setRef:()=>pt.setRef,shouldSkipGeneratingVar:()=>Fe,skeletonClasses:()=>Dv,sliderClasses:()=>fh,snackbarClasses:()=>Oh,snackbarContentClasses:()=>Ph,speedDialActionClasses:()=>mg,speedDialClasses:()=>Uh,speedDialIconClasses:()=>Ag,stackClasses:()=>kg,stepButtonClasses:()=>ny,stepClasses:()=>Lg,stepConnectorClasses:()=>cy,stepContentClasses:()=>vy,stepIconClasses:()=>Wg,stepLabelClasses:()=>Yg,stepperClasses:()=>Ay,styled:()=>de.Ay,svgIconClasses:()=>ky.A,switchClasses:()=>Vy,tabClasses:()=>Zy,tabScrollButtonClasses:()=>Rx,tableBodyClasses:()=>ub,tableCellClasses:()=>gb,tableClasses:()=>rb,tableContainerClasses:()=>Sb,tableFooterClasses:()=>Pb,tableHeadClasses:()=>Ob,tablePaginationClasses:()=>Gb,tableRowClasses:()=>sx,tableSortLabelClasses:()=>vx,tabsClasses:()=>$x,textFieldClasses:()=>qx,toggleButtonClasses:()=>Jx,toggleButtonGroupClasses:()=>sA,toolbarClasses:()=>dA.A,tooltipClasses:()=>og,touchRippleClasses:()=>mi.A,typographyClasses:()=>Io,unstable_ClassNameGenerator:()=>pt.unstable_ClassNameGenerator,unstable_composeClasses:()=>ft.A,unstable_createMuiStrictModeTheme:()=>Y,unstable_getUnit:()=>Q,unstable_toUnitless:()=>ee,unstable_useEnhancedEffect:()=>pt.unstable_useEnhancedEffect,unstable_useId:()=>pt.unstable_useId,unsupportedProp:()=>pt.unsupportedProp,useAutocomplete:()=>Qo,useColorScheme:()=>st,useControlled:()=>pt.useControlled,useEventCallback:()=>pt.useEventCallback,useForkRef:()=>pt.useForkRef,useFormControl:()=>mc.A,useIsFocusVisible:()=>pt.useIsFocusVisible,useMediaQuery:()=>ad,usePagination:()=>af,useRadioGroup:()=>Bf,useScrollTrigger:()=>vA,useStepContext:()=>jg,useStepperContext:()=>Pg,useTheme:()=>ne.A,useThemeProps:()=>ue,withStyles:()=>ve,withTheme:()=>he});var r={};o.r(r),o.d(r,{amber:()=>y,blue:()=>u.A,blueGrey:()=>S,brown:()=>A,common:()=>n.A,cyan:()=>p,deepOrange:()=>x,deepPurple:()=>l,green:()=>f.A,grey:()=>w.A,indigo:()=>c,lightBlue:()=>d.A,lightGreen:()=>v,lime:()=>h,orange:()=>b.A,pink:()=>i,purple:()=>s.A,red:()=>a.A,teal:()=>m,yellow:()=>g});var n=o("./node_modules/.pnpm/@mui+material@5.16.4_@emotion+react@11.13.0_@types+react@18.3.3_react@18.3.1__@emotion+styled_brxipnv4yvqheosgxcawdxdyay/node_modules/@mui/material/colors/common.js"),a=o("./node_modules/.pnpm/@mui+material@5.16.4_@emotion+react@11.13.0_@types+react@18.3.3_react@18.3.1__@emotion+styled_brxipnv4yvqheosgxcawdxdyay/node_modules/@mui/material/colors/red.js");const i={50:"#fce4ec",100:"#f8bbd0",200:"#f48fb1",300:"#f06292",400:"#ec407a",500:"#e91e63",600:"#d81b60",700:"#c2185b",800:"#ad1457",900:"#880e4f",A100:"#ff80ab",A200:"#ff4081",A400:"#f50057",A700:"#c51162"};var s=o("./node_modules/.pnpm/@mui+material@5.16.4_@emotion+react@11.13.0_@types+react@18.3.3_react@18.3.1__@emotion+styled_brxipnv4yvqheosgxcawdxdyay/node_modules/@mui/material/colors/purple.js");const l={50:"#ede7f6",100:"#d1c4e9",200:"#b39ddb",300:"#9575cd",400:"#7e57c2",500:"#673ab7",600:"#5e35b1",700:"#512da8",800:"#4527a0",900:"#311b92",A100:"#b388ff",A200:"#7c4dff",A400:"#651fff",A700:"#6200ea"},c={50:"#e8eaf6",100:"#c5cae9",200:"#9fa8da",300:"#7986cb",400:"#5c6bc0",500:"#3f51b5",600:"#3949ab",700:"#303f9f",800:"#283593",900:"#1a237e",A100:"#8c9eff",A200:"#536dfe",A400:"#3d5afe",A700:"#304ffe"};var u=o("./node_modules/.pnpm/@mui+material@5.16.4_@emotion+react@11.13.0_@types+react@18.3.3_react@18.3.1__@emotion+styled_brxipnv4yvqheosgxcawdxdyay/node_modules/@mui/material/colors/blue.js"),d=o("./node_modules/.pnpm/@mui+material@5.16.4_@emotion+react@11.13.0_@types+react@18.3.3_react@18.3.1__@emotion+styled_brxipnv4yvqheosgxcawdxdyay/node_modules/@mui/material/colors/lightBlue.js");const p={50:"#e0f7fa",100:"#b2ebf2",200:"#80deea",300:"#4dd0e1",400:"#26c6da",500:"#00bcd4",600:"#00acc1",700:"#0097a7",800:"#00838f",900:"#006064",A100:"#84ffff",A200:"#18ffff",A400:"#00e5ff",A700:"#00b8d4"},m={50:"#e0f2f1",100:"#b2dfdb",200:"#80cbc4",300:"#4db6ac",400:"#26a69a",500:"#009688",600:"#00897b",700:"#00796b",800:"#00695c",900:"#004d40",A100:"#a7ffeb",A200:"#64ffda",A400:"#1de9b6",A700:"#00bfa5"};var f=o("./node_modules/.pnpm/@mui+material@5.16.4_@emotion+react@11.13.0_@types+react@18.3.3_react@18.3.1__@emotion+styled_brxipnv4yvqheosgxcawdxdyay/node_modules/@mui/material/colors/green.js");const v={50:"#f1f8e9",100:"#dcedc8",200:"#c5e1a5",300:"#aed581",400:"#9ccc65",500:"#8bc34a",600:"#7cb342",700:"#689f38",800:"#558b2f",900:"#33691e",A100:"#ccff90",A200:"#b2ff59",A400:"#76ff03",A700:"#64dd17"},h={50:"#f9fbe7",100:"#f0f4c3",200:"#e6ee9c",300:"#dce775",400:"#d4e157",500:"#cddc39",600:"#c0ca33",700:"#afb42b",800:"#9e9d24",900:"#827717",A100:"#f4ff81",A200:"#eeff41",A400:"#c6ff00",A700:"#aeea00"},g={50:"#fffde7",100:"#fff9c4",200:"#fff59d",300:"#fff176",400:"#ffee58",500:"#ffeb3b",600:"#fdd835",700:"#fbc02d",800:"#f9a825",900:"#f57f17",A100:"#ffff8d",A200:"#ffff00",A400:"#ffea00",A700:"#ffd600"},y={50:"#fff8e1",100:"#ffecb3",200:"#ffe082",300:"#ffd54f",400:"#ffca28",500:"#ffc107",600:"#ffb300",700:"#ffa000",800:"#ff8f00",900:"#ff6f00",A100:"#ffe57f",A200:"#ffd740",A400:"#ffc400",A700:"#ffab00"};var b=o("./node_modules/.pnpm/@mui+material@5.16.4_@emotion+react@11.13.0_@types+react@18.3.3_react@18.3.1__@emotion+styled_brxipnv4yvqheosgxcawdxdyay/node_modules/@mui/material/colors/orange.js");const x={50:"#fbe9e7",100:"#ffccbc",200:"#ffab91",300:"#ff8a65",400:"#ff7043",500:"#ff5722",600:"#f4511e",700:"#e64a19",800:"#d84315",900:"#bf360c",A100:"#ff9e80",A200:"#ff6e40",A400:"#ff3d00",A700:"#dd2c00"},A={50:"#efebe9",100:"#d7ccc8",200:"#bcaaa4",300:"#a1887f",400:"#8d6e63",500:"#795548",600:"#6d4c41",700:"#5d4037",800:"#4e342e",900:"#3e2723",A100:"#d7ccc8",A200:"#bcaaa4",A400:"#8d6e63",A700:"#5d4037"};var w=o("./node_modules/.pnpm/@mui+material@5.16.4_@emotion+react@11.13.0_@types+react@18.3.3_react@18.3.1__@emotion+styled_brxipnv4yvqheosgxcawdxdyay/node_modules/@mui/material/colors/grey.js");const S={50:"#eceff1",100:"#cfd8dc",200:"#b0bec5",300:"#90a4ae",400:"#78909c",500:"#607d8b",600:"#546e7a",700:"#455a64",800:"#37474f",900:"#263238",A100:"#cfd8dc",A200:"#b0bec5",A400:"#78909c",A700:"#455a64"};var C=o("./node_modules/.pnpm/@mui+utils@5.16.4_@types+react@18.3.3_react@18.3.1/node_modules/@mui/utils/esm/formatMuiErrorMessage/formatMuiErrorMessage.js"),_=o("./node_modules/.pnpm/@mui+material@5.16.4_@emotion+react@11.13.0_@types+react@18.3.3_react@18.3.1__@emotion+styled_brxipnv4yvqheosgxcawdxdyay/node_modules/@mui/material/styles/identifier.js"),k=o("./node_modules/.pnpm/@babel+runtime@7.24.8/node_modules/@babel/runtime/helpers/esm/extends.js"),R=o("./node_modules/.pnpm/@babel+runtime@7.24.8/node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js"),P=o("./node_modules/.pnpm/@mui+system@5.16.4_@emotion+react@11.13.0_@types+react@18.3.3_react@18.3.1__@emotion+styled@1_6pxsshf4op6ciexesjgj77xooe/node_modules/@mui/system/esm/createTheme/createSpacing.js"),M=o("./node_modules/.pnpm/@mui+system@5.16.4_@emotion+react@11.13.0_@types+react@18.3.3_react@18.3.1__@emotion+styled@1_6pxsshf4op6ciexesjgj77xooe/node_modules/@mui/system/esm/createTheme/createBreakpoints.js");const I=["defaultProps","mixins","overrides","palette","props","styleOverrides"],j=["type","mode"];function $(e){const{defaultProps:t={},mixins:o={},overrides:r={},palette:n={},props:a={},styleOverrides:i={}}=e,s=(0,R.A)(e,I),l=(0,k.A)({},s,{components:{}});Object.keys(t).forEach((e=>{const o=l.components[e]||{};o.defaultProps=t[e],l.components[e]=o})),Object.keys(a).forEach((e=>{const t=l.components[e]||{};t.defaultProps=a[e],l.components[e]=t})),Object.keys(i).forEach((e=>{const t=l.components[e]||{};t.styleOverrides=i[e],l.components[e]=t})),Object.keys(r).forEach((e=>{const t=l.components[e]||{};t.styleOverrides=r[e],l.components[e]=t})),l.spacing=(0,P.A)(e.spacing);const c=(0,M.A)(e.breakpoints||{}),u=l.spacing;l.mixins=(0,k.A)({gutters:(e={})=>(0,k.A)({paddingLeft:u(2),paddingRight:u(2)},e,{[c.up("sm")]:(0,k.A)({paddingLeft:u(3),paddingRight:u(3)},e[c.up("sm")])})},o);const{type:d,mode:p}=n,m=(0,R.A)(n,j),f=p||d||"light";return l.palette=(0,k.A)({text:{hint:"dark"===f?"rgba(255, 255, 255, 0.5)":"rgba(0, 0, 0, 0.38)"},mode:f,type:f},m),l}var T=o("./node_modules/.pnpm/@mui+utils@5.16.4_@types+react@18.3.3_react@18.3.1/node_modules/@mui/utils/esm/clamp/clamp.js");function L(e,t=0,o=1){return(0,T.A)(e,t,o)}function O(e){e=e.slice(1);const t=new RegExp(`.{1,${e.length>=6?2:1}}`,"g");let o=e.match(t);return o&&1===o[0].length&&(o=o.map((e=>e+e))),o?`rgb${4===o.length?"a":""}(${o.map(((e,t)=>t<3?parseInt(e,16):Math.round(parseInt(e,16)/255*1e3)/1e3)).join(", ")})`:""}function E(e){if(e.type)return e;if("#"===e.charAt(0))return E(O(e));const t=e.indexOf("("),o=e.substring(0,t);if(-1===["rgb","rgba","hsl","hsla","color"].indexOf(o))throw new Error((0,C.A)(9,e));let r,n=e.substring(t+1,e.length-1);if("color"===o){if(n=n.split(" "),r=n.shift(),4===n.length&&"/"===n[3].charAt(0)&&(n[3]=n[3].slice(1)),-1===["srgb","display-p3","a98-rgb","prophoto-rgb","rec-2020"].indexOf(r))throw new Error((0,C.A)(10,r))}else n=n.split(",");return n=n.map((e=>parseFloat(e))),{type:o,values:n,colorSpace:r}}function B(e){const{type:t,colorSpace:o}=e;let{values:r}=e;return-1!==t.indexOf("rgb")?r=r.map(((e,t)=>t<3?parseInt(e,10):e)):-1!==t.indexOf("hsl")&&(r[1]=`${r[1]}%`,r[2]=`${r[2]}%`),r=-1!==t.indexOf("color")?`${o} ${r.join(" ")}`:`${r.join(", ")}`,`${t}(${r})`}function N(e){if(0===e.indexOf("#"))return e;const{values:t}=E(e);return`#${t.map(((e,t)=>function(e){const t=e.toString(16);return 1===t.length?`0${t}`:t}(3===t?Math.round(255*e):e))).join("")}`}function z(e){e=E(e);const{values:t}=e,o=t[0],r=t[1]/100,n=t[2]/100,a=r*Math.min(n,1-n),i=(e,t=(e+o/30)%12)=>n-a*Math.max(Math.min(t-3,9-t,1),-1);let s="rgb";const l=[Math.round(255*i(0)),Math.round(255*i(8)),Math.round(255*i(4))];return"hsla"===e.type&&(s+="a",l.push(t[3])),B({type:s,values:l})}function D(e){let t="hsl"===(e=E(e)).type||"hsla"===e.type?E(z(e)).values:e.values;return t=t.map((t=>("color"!==e.type&&(t/=255),t<=.03928?t/12.92:((t+.055)/1.055)**2.4))),Number((.2126*t[0]+.7152*t[1]+.0722*t[2]).toFixed(3))}function F(e,t){const o=D(e),r=D(t);return(Math.max(o,r)+.05)/(Math.min(o,r)+.05)}function W(e,t){return e=E(e),t=L(t),"rgb"!==e.type&&"hsl"!==e.type||(e.type+="a"),"color"===e.type?e.values[3]=`/${t}`:e.values[3]=t,B(e)}function V(e,t){if(e=E(e),t=L(t),-1!==e.type.indexOf("hsl"))e.values[2]*=1-t;else if(-1!==e.type.indexOf("rgb")||-1!==e.type.indexOf("color"))for(let o=0;o<3;o+=1)e.values[o]*=1-t;return B(e)}function H(e,t){if(e=E(e),t=L(t),-1!==e.type.indexOf("hsl"))e.values[2]+=(100-e.values[2])*t;else if(-1!==e.type.indexOf("rgb"))for(let o=0;o<3;o+=1)e.values[o]+=(255-e.values[o])*t;else if(-1!==e.type.indexOf("color"))for(let o=0;o<3;o+=1)e.values[o]+=(1-e.values[o])*t;return B(e)}function U(e,t=.15){return D(e)>.5?V(e,t):H(e,t)}var q=o("./node_modules/.pnpm/@emotion+react@11.13.0_@types+react@18.3.3_react@18.3.1/node_modules/@emotion/react/dist/emotion-react.browser.esm.js"),G=o("./node_modules/.pnpm/@mui+material@5.16.4_@emotion+react@11.13.0_@types+react@18.3.3_react@18.3.1__@emotion+styled_brxipnv4yvqheosgxcawdxdyay/node_modules/@mui/material/styles/createTheme.js"),X=o("./node_modules/.pnpm/@mui+utils@5.16.4_@types+react@18.3.3_react@18.3.1/node_modules/@mui/utils/esm/deepmerge/deepmerge.js");function Y(e,...t){return(0,G.A)((0,X.A)({unstable_strictMode:!0},e),...t)}let K=!1;function Z(e){return K||(console.warn(["MUI: createStyles from @mui/material/styles is deprecated.","Please use @mui/styles/createStyles"].join("\n")),K=!0),e}function J(e){return String(parseFloat(e)).length===String(e).length}function Q(e){return String(e).match(/[\d.\-+]*\s*(.*)/)[1]||""}function ee(e){return parseFloat(e)}function te({lineHeight:e,pixels:t,htmlFontSize:o}){return t/(e*o)}function oe(e,t={}){const{breakpoints:o=["sm","md","lg"],disableAlign:r=!1,factor:n=2,variants:a=["h1","h2","h3","h4","h5","h6","subtitle1","subtitle2","body1","body2","caption","button","overline"]}=t,i=(0,k.A)({},e);i.typography=(0,k.A)({},i.typography);const s=i.typography,l=(c=s.htmlFontSize,(e,t)=>{const o=Q(e);if(o===t)return e;let r=ee(e);"px"!==o&&("em"===o||"rem"===o)&&(r=ee(e)*ee(c));let n=r;if("px"!==t)if("em"===t)n=r/ee(c);else{if("rem"!==t)return e;n=r/ee(c)}return parseFloat(n.toFixed(5))+t});var c;const u=o.map((e=>i.breakpoints.values[e]));return a.forEach((e=>{const t=s[e];if(!t)return;const o=parseFloat(l(t.fontSize,"rem"));if(o<=1)return;const a=o,i=1+(a-1)/n;let{lineHeight:c}=t;if(!J(c)&&!r)throw new Error((0,C.A)(6));J(c)||(c=parseFloat(l(c,"rem"))/parseFloat(o));let d=null;r||(d=e=>function({size:e,grid:t}){const o=e-e%t,r=o+t;return e-o<r-e?o:r}({size:e,grid:te({pixels:4,lineHeight:c,htmlFontSize:s.htmlFontSize})})),s[e]=(0,k.A)({},t,function({cssProperty:e,min:t,max:o,unit:r="rem",breakpoints:n=[600,900,1200],transform:a=null}){const i={[e]:`${t}${r}`},s=(o-t)/n[n.length-1];return n.forEach((o=>{let n=t+s*o;null!==a&&(n=a(n)),i[`@media (min-width:${o}px)`]={[e]:`${Math.round(1e4*n)/1e4}${r}`}})),i}({cssProperty:"fontSize",min:i,max:a,unit:"rem",breakpoints:u,transform:d}))})),i}var re=o("./node_modules/.pnpm/@mui+material@5.16.4_@emotion+react@11.13.0_@types+react@18.3.3_react@18.3.1__@emotion+styled_brxipnv4yvqheosgxcawdxdyay/node_modules/@mui/material/styles/createTransitions.js"),ne=o("./node_modules/.pnpm/@mui+material@5.16.4_@emotion+react@11.13.0_@types+react@18.3.3_react@18.3.1__@emotion+styled_brxipnv4yvqheosgxcawdxdyay/node_modules/@mui/material/styles/useTheme.js"),ae=o("./node_modules/.pnpm/@mui+utils@5.16.4_@types+react@18.3.3_react@18.3.1/node_modules/@mui/utils/esm/resolveProps/resolveProps.js");function ie(e){const{theme:t,name:o,props:r}=e;return t&&t.components&&t.components[o]&&t.components[o].defaultProps?(0,ae.A)(t.components[o].defaultProps,r):r}var se=o("./node_modules/.pnpm/@mui+system@5.16.4_@emotion+react@11.13.0_@types+react@18.3.3_react@18.3.1__@emotion+styled@1_6pxsshf4op6ciexesjgj77xooe/node_modules/@mui/system/esm/useTheme.js");function le({props:e,name:t,defaultTheme:o,themeId:r}){let n=(0,se.A)(o);return r&&(n=n[r]||n),ie({theme:n,name:t,props:e})}var ce=o("./node_modules/.pnpm/@mui+material@5.16.4_@emotion+react@11.13.0_@types+react@18.3.3_react@18.3.1__@emotion+styled_brxipnv4yvqheosgxcawdxdyay/node_modules/@mui/material/styles/defaultTheme.js");function ue({props:e,name:t}){return le({props:e,name:t,defaultTheme:ce.A,themeId:_.A})}var de=o("./node_modules/.pnpm/@mui+material@5.16.4_@emotion+react@11.13.0_@types+react@18.3.3_react@18.3.1__@emotion+styled_brxipnv4yvqheosgxcawdxdyay/node_modules/@mui/material/styles/styled.js"),pe=o("./node_modules/.pnpm/@mui+material@5.16.4_@emotion+react@11.13.0_@types+react@18.3.3_react@18.3.1__@emotion+styled_brxipnv4yvqheosgxcawdxdyay/node_modules/@mui/material/styles/ThemeProvider.js"),me=o("./node_modules/.pnpm/@mui+styled-engine@5.16.4_@emotion+react@11.13.0_@types+react@18.3.3_react@18.3.1__@emotion+s_fxygcpf7zqzkokazitjbbkulbe/node_modules/@mui/styled-engine/StyledEngineProvider/StyledEngineProvider.js");function fe(){throw new Error((0,C.A)(14))}function ve(){throw new Error((0,C.A)(15))}function he(){throw new Error((0,C.A)(16))}var ge=o("./node_modules/.pnpm/react@18.3.1/node_modules/react/index.js"),ye=o.t(ge,2),be=o("./node_modules/.pnpm/@mui+styled-engine@5.16.4_@emotion+react@11.13.0_@types+react@18.3.3_react@18.3.1__@emotion+s_fxygcpf7zqzkokazitjbbkulbe/node_modules/@mui/styled-engine/GlobalStyles/GlobalStyles.js"),xe=o("./node_modules/.pnpm/@mui+private-theming@5.16.4_@types+react@18.3.3_react@18.3.1/node_modules/@mui/private-theming/useTheme/useTheme.js"),Ae=o("./node_modules/.pnpm/@mui+system@5.16.4_@emotion+react@11.13.0_@types+react@18.3.3_react@18.3.1__@emotion+styled@1_6pxsshf4op6ciexesjgj77xooe/node_modules/@mui/system/esm/ThemeProvider/ThemeProvider.js"),we=o("./node_modules/.pnpm/react@18.3.1/node_modules/react/jsx-runtime.js");const Se="mode",Ce="color-scheme",_e="data-color-scheme";function ke(e){if("undefined"!=typeof window&&"system"===e)return window.matchMedia("(prefers-color-scheme: dark)").matches?"dark":"light"}function Re(e,t){return"light"===e.mode||"system"===e.mode&&"light"===e.systemMode?t("light"):"dark"===e.mode||"system"===e.mode&&"dark"===e.systemMode?t("dark"):void 0}function Pe(e,t){if("undefined"==typeof window)return;let o;try{o=localStorage.getItem(e)||void 0,o||localStorage.setItem(e,t)}catch(e){}return o||t}const Me=["colorSchemes","components","generateCssVars","cssVarPrefix"];var Ie=o("./node_modules/.pnpm/@mui+system@5.16.4_@emotion+react@11.13.0_@types+react@18.3.3_react@18.3.1__@emotion+styled@1_6pxsshf4op6ciexesjgj77xooe/node_modules/@mui/system/esm/styleFunctionSx/styleFunctionSx.js");function je(e=""){function t(...o){if(!o.length)return"";const r=o[0];return"string"!=typeof r||r.match(/(#|\(|\)|(-?(\d*\.)?\d+)(px|em|%|ex|ch|rem|vw|vh|vmin|vmax|cm|mm|in|pt|pc))|^(-?(\d*\.)?\d+)$|(\d+ \d+ \d+)/)?`, ${r}`:`, var(--${e?`${e}-`:""}${r}${t(...o.slice(1))})`}return(o,...r)=>`var(--${e?`${e}-`:""}${o}${t(...r)})`}function $e(e){return $e="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},$e(e)}function Te(e){var t=function(e){if("object"!=$e(e)||!e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var o=t.call(e,"string");if("object"!=$e(o))return o;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==$e(t)?t:t+""}const Le=(e,t,o,r=[])=>{let n=e;t.forEach(((e,a)=>{a===t.length-1?Array.isArray(n)?n[Number(e)]=o:n&&"object"==typeof n&&(n[e]=o):n&&"object"==typeof n&&(n[e]||(n[e]=r.includes(e)?[]:{}),n=n[e])}))},Oe=(e,t)=>"number"==typeof t?["lineHeight","fontWeight","opacity","zIndex"].some((t=>e.includes(t)))||e[e.length-1].toLowerCase().indexOf("opacity")>=0?t:`${t}px`:t;function Ee(e,t){const{prefix:o,shouldSkipGeneratingVar:r}=t||{},n={},a={},i={};return s=(e,t,s)=>{if(!("string"!=typeof t&&"number"!=typeof t||r&&r(e,t))){const r=`--${o?`${o}-`:""}${e.join("-")}`;Object.assign(n,{[r]:Oe(e,t)}),Le(a,e,`var(${r})`,s),Le(i,e,`var(${r}, ${t})`,s)}},l=e=>"vars"===e[0],function e(t,o=[],r=[]){Object.entries(t).forEach((([t,n])=>{(!l||l&&!l([...o,t]))&&null!=n&&("object"==typeof n&&Object.keys(n).length>0?e(n,[...o,t],Array.isArray(n)?[...r,t]:r):s([...o,t],n,r))}))}(e),{css:n,vars:a,varsWithDefaults:i};var s,l}const Be=["colorSchemes","components","defaultColorScheme"],Ne=function(e,t){const{colorSchemes:o={},defaultColorScheme:r="light"}=e,n=(0,R.A)(e,Be),{vars:a,css:i,varsWithDefaults:s}=Ee(n,t);let l=s;const c={},{[r]:u}=o,d=(0,R.A)(o,[r].map(Te));if(Object.entries(d||{}).forEach((([e,o])=>{const{vars:r,css:n,varsWithDefaults:a}=Ee(o,t);l=(0,X.A)(l,a),c[e]={css:n,vars:r}})),u){const{css:e,vars:o,varsWithDefaults:n}=Ee(u,t);l=(0,X.A)(l,n),c[r]={css:e,vars:o}}return{vars:l,generateCssVars:e=>{var o;if(!e){var r;const o=(0,k.A)({},i);return{css:o,vars:a,selector:(null==t||null==(r=t.getSelector)?void 0:r.call(t,e,o))||":root"}}const n=(0,k.A)({},c[e].css);return{css:n,vars:c[e].vars,selector:(null==t||null==(o=t.getSelector)?void 0:o.call(t,e,n))||":root"}}}};var ze=o("./node_modules/.pnpm/@mui+system@5.16.4_@emotion+react@11.13.0_@types+react@18.3.3_react@18.3.1__@emotion+styled@1_6pxsshf4op6ciexesjgj77xooe/node_modules/@mui/system/esm/styleFunctionSx/defaultSxConfig.js"),De=o("./node_modules/.pnpm/@mui+system@5.16.4_@emotion+react@11.13.0_@types+react@18.3.3_react@18.3.1__@emotion+styled@1_6pxsshf4op6ciexesjgj77xooe/node_modules/@mui/system/colorManipulator.js");function Fe(e){var t;return!!e[0].match(/(cssVarPrefix|typography|mixins|breakpoints|direction|transitions)/)||!!e[0].match(/sxConfig$/)||"palette"===e[0]&&!(null==(t=e[1])||!t.match(/(mode|contrastThreshold|tonalOffset)/))}var We=o("./node_modules/.pnpm/@mui+material@5.16.4_@emotion+react@11.13.0_@types+react@18.3.3_react@18.3.1__@emotion+styled_brxipnv4yvqheosgxcawdxdyay/node_modules/@mui/material/styles/getOverlayAlpha.js");const Ve=["colorSchemes","cssVarPrefix","shouldSkipGeneratingVar"],He=["palette"],Ue=[...Array(25)].map(((e,t)=>{if(0===t)return;const o=(0,We.A)(t);return`linear-gradient(rgba(255 255 255 / ${o}), rgba(255 255 255 / ${o}))`}));function qe(e,t,o){!e[t]&&o&&(e[t]=o)}function Ge(e){return e&&e.startsWith("hsl")?(0,De.YL)(e):e}function Xe(e,t){`${t}Channel`in e||(e[`${t}Channel`]=(0,De.Me)(Ge(e[t]),`MUI: Can't create \`palette.${t}Channel\` because \`palette.${t}\` is not one of these formats: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color().\nTo suppress this warning, you need to explicitly provide the \`palette.${t}Channel\` as a string (in rgb format, for example "12 12 12") or undefined if you want to remove the channel token.`))}const Ye=e=>{try{return e()}catch(e){}},Ke=(e="mui")=>je(e);function Ze(e={},...t){var o,r,n,a,i,s;const{colorSchemes:l={},cssVarPrefix:c="mui",shouldSkipGeneratingVar:u=Fe}=e,d=(0,R.A)(e,Ve),p=Ke(c),m=(0,G.A)((0,k.A)({},d,l.light&&{palette:null==(o=l.light)?void 0:o.palette})),{palette:f}=m,v=(0,R.A)(m,He),{palette:h}=(0,G.A)({palette:(0,k.A)({mode:"dark"},null==(r=l.dark)?void 0:r.palette)});let g=(0,k.A)({},v,{cssVarPrefix:c,getCssVar:p,colorSchemes:(0,k.A)({},l,{light:(0,k.A)({},l.light,{palette:f,opacity:(0,k.A)({inputPlaceholder:.42,inputUnderline:.42,switchTrackDisabled:.12,switchTrack:.38},null==(n=l.light)?void 0:n.opacity),overlays:(null==(a=l.light)?void 0:a.overlays)||[]}),dark:(0,k.A)({},l.dark,{palette:h,opacity:(0,k.A)({inputPlaceholder:.5,inputUnderline:.7,switchTrackDisabled:.2,switchTrack:.3},null==(i=l.dark)?void 0:i.opacity),overlays:(null==(s=l.dark)?void 0:s.overlays)||Ue})})});Object.keys(g.colorSchemes).forEach((e=>{const t=g.colorSchemes[e].palette,o=e=>{const o=e.split("-"),r=o[1],n=o[2];return p(e,t[r][n])};var r;if("light"===e?(qe(t.common,"background","#fff"),qe(t.common,"onBackground","#000")):(qe(t.common,"background","#000"),qe(t.common,"onBackground","#fff")),r=t,["Alert","AppBar","Avatar","Button","Chip","FilledInput","LinearProgress","Skeleton","Slider","SnackbarContent","SpeedDialAction","StepConnector","StepContent","Switch","TableCell","Tooltip"].forEach((e=>{r[e]||(r[e]={})})),"light"===e){qe(t.Alert,"errorColor",(0,De.Nd)(t.error.light,.6)),qe(t.Alert,"infoColor",(0,De.Nd)(t.info.light,.6)),qe(t.Alert,"successColor",(0,De.Nd)(t.success.light,.6)),qe(t.Alert,"warningColor",(0,De.Nd)(t.warning.light,.6)),qe(t.Alert,"errorFilledBg",o("palette-error-main")),qe(t.Alert,"infoFilledBg",o("palette-info-main")),qe(t.Alert,"successFilledBg",o("palette-success-main")),qe(t.Alert,"warningFilledBg",o("palette-warning-main")),qe(t.Alert,"errorFilledColor",Ye((()=>f.getContrastText(t.error.main)))),qe(t.Alert,"infoFilledColor",Ye((()=>f.getContrastText(t.info.main)))),qe(t.Alert,"successFilledColor",Ye((()=>f.getContrastText(t.success.main)))),qe(t.Alert,"warningFilledColor",Ye((()=>f.getContrastText(t.warning.main)))),qe(t.Alert,"errorStandardBg",(0,De.j4)(t.error.light,.9)),qe(t.Alert,"infoStandardBg",(0,De.j4)(t.info.light,.9)),qe(t.Alert,"successStandardBg",(0,De.j4)(t.success.light,.9)),qe(t.Alert,"warningStandardBg",(0,De.j4)(t.warning.light,.9)),qe(t.Alert,"errorIconColor",o("palette-error-main")),qe(t.Alert,"infoIconColor",o("palette-info-main")),qe(t.Alert,"successIconColor",o("palette-success-main")),qe(t.Alert,"warningIconColor",o("palette-warning-main")),qe(t.AppBar,"defaultBg",o("palette-grey-100")),qe(t.Avatar,"defaultBg",o("palette-grey-400")),qe(t.Button,"inheritContainedBg",o("palette-grey-300")),qe(t.Button,"inheritContainedHoverBg",o("palette-grey-A100")),qe(t.Chip,"defaultBorder",o("palette-grey-400")),qe(t.Chip,"defaultAvatarColor",o("palette-grey-700")),qe(t.Chip,"defaultIconColor",o("palette-grey-700")),qe(t.FilledInput,"bg","rgba(0, 0, 0, 0.06)"),qe(t.FilledInput,"hoverBg","rgba(0, 0, 0, 0.09)"),qe(t.FilledInput,"disabledBg","rgba(0, 0, 0, 0.12)"),qe(t.LinearProgress,"primaryBg",(0,De.j4)(t.primary.main,.62)),qe(t.LinearProgress,"secondaryBg",(0,De.j4)(t.secondary.main,.62)),qe(t.LinearProgress,"errorBg",(0,De.j4)(t.error.main,.62)),qe(t.LinearProgress,"infoBg",(0,De.j4)(t.info.main,.62)),qe(t.LinearProgress,"successBg",(0,De.j4)(t.success.main,.62)),qe(t.LinearProgress,"warningBg",(0,De.j4)(t.warning.main,.62)),qe(t.Skeleton,"bg",`rgba(${o("palette-text-primaryChannel")} / 0.11)`),qe(t.Slider,"primaryTrack",(0,De.j4)(t.primary.main,.62)),qe(t.Slider,"secondaryTrack",(0,De.j4)(t.secondary.main,.62)),qe(t.Slider,"errorTrack",(0,De.j4)(t.error.main,.62)),qe(t.Slider,"infoTrack",(0,De.j4)(t.info.main,.62)),qe(t.Slider,"successTrack",(0,De.j4)(t.success.main,.62)),qe(t.Slider,"warningTrack",(0,De.j4)(t.warning.main,.62));const e=(0,De.Y9)(t.background.default,.8);qe(t.SnackbarContent,"bg",e),qe(t.SnackbarContent,"color",Ye((()=>f.getContrastText(e)))),qe(t.SpeedDialAction,"fabHoverBg",(0,De.Y9)(t.background.paper,.15)),qe(t.StepConnector,"border",o("palette-grey-400")),qe(t.StepContent,"border",o("palette-grey-400")),qe(t.Switch,"defaultColor",o("palette-common-white")),qe(t.Switch,"defaultDisabledColor",o("palette-grey-100")),qe(t.Switch,"primaryDisabledColor",(0,De.j4)(t.primary.main,.62)),qe(t.Switch,"secondaryDisabledColor",(0,De.j4)(t.secondary.main,.62)),qe(t.Switch,"errorDisabledColor",(0,De.j4)(t.error.main,.62)),qe(t.Switch,"infoDisabledColor",(0,De.j4)(t.info.main,.62)),qe(t.Switch,"successDisabledColor",(0,De.j4)(t.success.main,.62)),qe(t.Switch,"warningDisabledColor",(0,De.j4)(t.warning.main,.62)),qe(t.TableCell,"border",(0,De.j4)((0,De.Cg)(t.divider,1),.88)),qe(t.Tooltip,"bg",(0,De.Cg)(t.grey[700],.92))}else{qe(t.Alert,"errorColor",(0,De.j4)(t.error.light,.6)),qe(t.Alert,"infoColor",(0,De.j4)(t.info.light,.6)),qe(t.Alert,"successColor",(0,De.j4)(t.success.light,.6)),qe(t.Alert,"warningColor",(0,De.j4)(t.warning.light,.6)),qe(t.Alert,"errorFilledBg",o("palette-error-dark")),qe(t.Alert,"infoFilledBg",o("palette-info-dark")),qe(t.Alert,"successFilledBg",o("palette-success-dark")),qe(t.Alert,"warningFilledBg",o("palette-warning-dark")),qe(t.Alert,"errorFilledColor",Ye((()=>h.getContrastText(t.error.dark)))),qe(t.Alert,"infoFilledColor",Ye((()=>h.getContrastText(t.info.dark)))),qe(t.Alert,"successFilledColor",Ye((()=>h.getContrastText(t.success.dark)))),qe(t.Alert,"warningFilledColor",Ye((()=>h.getContrastText(t.warning.dark)))),qe(t.Alert,"errorStandardBg",(0,De.Nd)(t.error.light,.9)),qe(t.Alert,"infoStandardBg",(0,De.Nd)(t.info.light,.9)),qe(t.Alert,"successStandardBg",(0,De.Nd)(t.success.light,.9)),qe(t.Alert,"warningStandardBg",(0,De.Nd)(t.warning.light,.9)),qe(t.Alert,"errorIconColor",o("palette-error-main")),qe(t.Alert,"infoIconColor",o("palette-info-main")),qe(t.Alert,"successIconColor",o("palette-success-main")),qe(t.Alert,"warningIconColor",o("palette-warning-main")),qe(t.AppBar,"defaultBg",o("palette-grey-900")),qe(t.AppBar,"darkBg",o("palette-background-paper")),qe(t.AppBar,"darkColor",o("palette-text-primary")),qe(t.Avatar,"defaultBg",o("palette-grey-600")),qe(t.Button,"inheritContainedBg",o("palette-grey-800")),qe(t.Button,"inheritContainedHoverBg",o("palette-grey-700")),qe(t.Chip,"defaultBorder",o("palette-grey-700")),qe(t.Chip,"defaultAvatarColor",o("palette-grey-300")),qe(t.Chip,"defaultIconColor",o("palette-grey-300")),qe(t.FilledInput,"bg","rgba(255, 255, 255, 0.09)"),qe(t.FilledInput,"hoverBg","rgba(255, 255, 255, 0.13)"),qe(t.FilledInput,"disabledBg","rgba(255, 255, 255, 0.12)"),qe(t.LinearProgress,"primaryBg",(0,De.Nd)(t.primary.main,.5)),qe(t.LinearProgress,"secondaryBg",(0,De.Nd)(t.secondary.main,.5)),qe(t.LinearProgress,"errorBg",(0,De.Nd)(t.error.main,.5)),qe(t.LinearProgress,"infoBg",(0,De.Nd)(t.info.main,.5)),qe(t.LinearProgress,"successBg",(0,De.Nd)(t.success.main,.5)),qe(t.LinearProgress,"warningBg",(0,De.Nd)(t.warning.main,.5)),qe(t.Skeleton,"bg",`rgba(${o("palette-text-primaryChannel")} / 0.13)`),qe(t.Slider,"primaryTrack",(0,De.Nd)(t.primary.main,.5)),qe(t.Slider,"secondaryTrack",(0,De.Nd)(t.secondary.main,.5)),qe(t.Slider,"errorTrack",(0,De.Nd)(t.error.main,.5)),qe(t.Slider,"infoTrack",(0,De.Nd)(t.info.main,.5)),qe(t.Slider,"successTrack",(0,De.Nd)(t.success.main,.5)),qe(t.Slider,"warningTrack",(0,De.Nd)(t.warning.main,.5));const e=(0,De.Y9)(t.background.default,.98);qe(t.SnackbarContent,"bg",e),qe(t.SnackbarContent,"color",Ye((()=>h.getContrastText(e)))),qe(t.SpeedDialAction,"fabHoverBg",(0,De.Y9)(t.background.paper,.15)),qe(t.StepConnector,"border",o("palette-grey-600")),qe(t.StepContent,"border",o("palette-grey-600")),qe(t.Switch,"defaultColor",o("palette-grey-300")),qe(t.Switch,"defaultDisabledColor",o("palette-grey-600")),qe(t.Switch,"primaryDisabledColor",(0,De.Nd)(t.primary.main,.55)),qe(t.Switch,"secondaryDisabledColor",(0,De.Nd)(t.secondary.main,.55)),qe(t.Switch,"errorDisabledColor",(0,De.Nd)(t.error.main,.55)),qe(t.Switch,"infoDisabledColor",(0,De.Nd)(t.info.main,.55)),qe(t.Switch,"successDisabledColor",(0,De.Nd)(t.success.main,.55)),qe(t.Switch,"warningDisabledColor",(0,De.Nd)(t.warning.main,.55)),qe(t.TableCell,"border",(0,De.Nd)((0,De.Cg)(t.divider,1),.68)),qe(t.Tooltip,"bg",(0,De.Cg)(t.grey[700],.92))}Xe(t.background,"default"),Xe(t.background,"paper"),Xe(t.common,"background"),Xe(t.common,"onBackground"),Xe(t,"divider"),Object.keys(t).forEach((e=>{const o=t[e];o&&"object"==typeof o&&(o.main&&qe(t[e],"mainChannel",(0,De.Me)(Ge(o.main))),o.light&&qe(t[e],"lightChannel",(0,De.Me)(Ge(o.light))),o.dark&&qe(t[e],"darkChannel",(0,De.Me)(Ge(o.dark))),o.contrastText&&qe(t[e],"contrastTextChannel",(0,De.Me)(Ge(o.contrastText))),"text"===e&&(Xe(t[e],"primary"),Xe(t[e],"secondary")),"action"===e&&(o.active&&Xe(t[e],"active"),o.selected&&Xe(t[e],"selected")))}))})),g=t.reduce(((e,t)=>(0,X.A)(e,t)),g);const y={prefix:c,shouldSkipGeneratingVar:u},{vars:b,generateCssVars:x}=Ne(g,y);return g.vars=b,g.generateCssVars=x,g.shouldSkipGeneratingVar=u,g.unstable_sxConfig=(0,k.A)({},ze.A,null==d?void 0:d.unstable_sxConfig),g.unstable_sx=function(e){return(0,Ie.A)({sx:e,theme:this})},g}var Je=o("./node_modules/.pnpm/@mui+material@5.16.4_@emotion+react@11.13.0_@types+react@18.3.3_react@18.3.1__@emotion+styled_brxipnv4yvqheosgxcawdxdyay/node_modules/@mui/material/styles/createTypography.js");const Qe=e=>[...[...Array(24)].map(((t,o)=>`--${e?`${e}-`:""}overlays-${o+1}`)),`--${e?`${e}-`:""}palette-AppBar-darkBg`,`--${e?`${e}-`:""}palette-AppBar-darkColor`],et="data-mui-color-scheme",tt="mui-color-scheme",ot="light",rt="dark",nt="mui-mode",at=Ze(),{CssVarsProvider:it,useColorScheme:st,getInitColorSchemeScript:lt}=function(e){const{themeId:t,theme:o={},attribute:r=_e,modeStorageKey:n=Se,colorSchemeStorageKey:a=Ce,defaultMode:i="light",defaultColorScheme:s,disableTransitionOnChange:l=!1,resolveTheme:c,excludeVariablesFromRoot:u}=e;(!o.colorSchemes||"string"==typeof s&&!o.colorSchemes[s]||"object"==typeof s&&!o.colorSchemes[null==s?void 0:s.light]||"object"==typeof s&&!o.colorSchemes[null==s?void 0:s.dark])&&console.error(`MUI: \`${s}\` does not exist in \`theme.colorSchemes\`.`);const d=ge.createContext(void 0),p="string"==typeof s?s:s.light,m="string"==typeof s?s:s.dark;return{CssVarsProvider:function(e){const{children:p,theme:m=o,modeStorageKey:f=n,colorSchemeStorageKey:v=a,attribute:h=r,defaultMode:g=i,defaultColorScheme:y=s,disableTransitionOnChange:b=l,storageWindow:x=("undefined"==typeof window?void 0:window),documentNode:A=("undefined"==typeof document?void 0:document),colorSchemeNode:w=("undefined"==typeof document?void 0:document.documentElement),colorSchemeSelector:S=":root",disableNestedContext:C=!1,disableStyleSheetGeneration:_=!1}=e,P=ge.useRef(!1),M=(0,xe.A)(),I=ge.useContext(d),j=!!I&&!C,$=m[t],T=$||m,{colorSchemes:L={},components:O={},generateCssVars:E=()=>({vars:{},css:{}}),cssVarPrefix:B}=T,N=(0,R.A)(T,Me),z=Object.keys(L),D="string"==typeof y?y:y.light,F="string"==typeof y?y:y.dark,{mode:W,setMode:V,systemMode:H,lightColorScheme:U,darkColorScheme:q,colorScheme:G,setColorScheme:Y}=function(e){const{defaultMode:t="light",defaultLightColorScheme:o,defaultDarkColorScheme:r,supportedColorSchemes:n=[],modeStorageKey:a=Se,colorSchemeStorageKey:i=Ce,storageWindow:s=("undefined"==typeof window?void 0:window)}=e,l=n.join(","),[c,u]=ge.useState((()=>{const e=Pe(a,t),n=Pe(`${i}-light`,o),s=Pe(`${i}-dark`,r);return{mode:e,systemMode:ke(e),lightColorScheme:n,darkColorScheme:s}})),d=function(e){return Re(e,(t=>"light"===t?e.lightColorScheme:"dark"===t?e.darkColorScheme:void 0))}(c),p=ge.useCallback((e=>{u((o=>{if(e===o.mode)return o;const r=null!=e?e:t;try{localStorage.setItem(a,r)}catch(e){}return(0,k.A)({},o,{mode:r,systemMode:ke(r)})}))}),[a,t]),m=ge.useCallback((e=>{e?"string"==typeof e?e&&!l.includes(e)?console.error(`\`${e}\` does not exist in \`theme.colorSchemes\`.`):u((t=>{const o=(0,k.A)({},t);return Re(t,(t=>{try{localStorage.setItem(`${i}-${t}`,e)}catch(e){}"light"===t&&(o.lightColorScheme=e),"dark"===t&&(o.darkColorScheme=e)})),o})):u((t=>{const n=(0,k.A)({},t),a=null===e.light?o:e.light,s=null===e.dark?r:e.dark;if(a)if(l.includes(a)){n.lightColorScheme=a;try{localStorage.setItem(`${i}-light`,a)}catch(e){}}else console.error(`\`${a}\` does not exist in \`theme.colorSchemes\`.`);if(s)if(l.includes(s)){n.darkColorScheme=s;try{localStorage.setItem(`${i}-dark`,s)}catch(e){}}else console.error(`\`${s}\` does not exist in \`theme.colorSchemes\`.`);return n})):u((e=>{try{localStorage.setItem(`${i}-light`,o),localStorage.setItem(`${i}-dark`,r)}catch(e){}return(0,k.A)({},e,{lightColorScheme:o,darkColorScheme:r})}))}),[l,i,o,r]),f=ge.useCallback((e=>{"system"===c.mode&&u((t=>{const o=null!=e&&e.matches?"dark":"light";return t.systemMode===o?t:(0,k.A)({},t,{systemMode:o})}))}),[c.mode]),v=ge.useRef(f);return v.current=f,ge.useEffect((()=>{const e=(...e)=>v.current(...e),t=window.matchMedia("(prefers-color-scheme: dark)");return t.addListener(e),e(t),()=>{t.removeListener(e)}}),[]),ge.useEffect((()=>{if(s){const e=e=>{const o=e.newValue;"string"!=typeof e.key||!e.key.startsWith(i)||o&&!l.match(o)||(e.key.endsWith("light")&&m({light:o}),e.key.endsWith("dark")&&m({dark:o})),e.key!==a||o&&!["light","dark","system"].includes(o)||p(o||t)};return s.addEventListener("storage",e),()=>{s.removeEventListener("storage",e)}}}),[m,p,a,i,l,t,s]),(0,k.A)({},c,{colorScheme:d,setMode:p,setColorScheme:m})}({supportedColorSchemes:z,defaultLightColorScheme:D,defaultDarkColorScheme:F,modeStorageKey:f,colorSchemeStorageKey:v,defaultMode:g,storageWindow:x});let K=W,Z=G;j&&(K=I.mode,Z=I.colorScheme);const J=Z||("dark"===(K||("system"===g?i:g))?F:D),{css:Q,vars:ee}=E(),te=(0,k.A)({},N,{components:O,colorSchemes:L,cssVarPrefix:B,vars:ee,getColorSchemeSelector:e=>`[${h}="${e}"] &`}),oe={},re={};Object.entries(L).forEach((([e,t])=>{const{css:o,vars:r}=E(e);if(te.vars=(0,X.A)(te.vars,r),e===J&&(Object.keys(t).forEach((e=>{t[e]&&"object"==typeof t[e]?te[e]=(0,k.A)({},te[e],t[e]):te[e]=t[e]})),te.palette&&(te.palette.colorScheme=e)),e===("string"==typeof y?y:"dark"===g?y.dark:y.light)){if(u){const t={};u(B).forEach((e=>{t[e]=o[e],delete o[e]})),oe[`[${h}="${e}"]`]=t}oe[`${S}, [${h}="${e}"]`]=o}else re[`${":root"===S?"":S}[${h}="${e}"]`]=o})),te.vars=(0,X.A)(te.vars,ee),ge.useEffect((()=>{Z&&w&&w.setAttribute(h,Z)}),[Z,h,w]),ge.useEffect((()=>{let e;if(b&&P.current&&A){const t=A.createElement("style");t.appendChild(A.createTextNode("*{-webkit-transition:none!important;-moz-transition:none!important;-o-transition:none!important;-ms-transition:none!important;transition:none!important}")),A.head.appendChild(t),window.getComputedStyle(A.body),e=setTimeout((()=>{A.head.removeChild(t)}),1)}return()=>{clearTimeout(e)}}),[Z,b,A]),ge.useEffect((()=>(P.current=!0,()=>{P.current=!1})),[]);const ne=ge.useMemo((()=>({allColorSchemes:z,colorScheme:Z,darkColorScheme:q,lightColorScheme:U,mode:K,setColorScheme:Y,setMode:V,systemMode:H})),[z,Z,q,U,K,Y,V,H]);let ae=!0;(_||j&&(null==M?void 0:M.cssVarPrefix)===B)&&(ae=!1);const ie=(0,we.jsxs)(ge.Fragment,{children:[ae&&(0,we.jsxs)(ge.Fragment,{children:[(0,we.jsx)(be.A,{styles:{[S]:Q}}),(0,we.jsx)(be.A,{styles:oe}),(0,we.jsx)(be.A,{styles:re})]}),(0,we.jsx)(Ae.A,{themeId:$?t:void 0,theme:c?c(te):te,children:p})]});return j?ie:(0,we.jsx)(d.Provider,{value:ne,children:ie})},useColorScheme:()=>{const e=ge.useContext(d);if(!e)throw new Error((0,C.A)(19));return e},getInitColorSchemeScript:e=>function(e){const{defaultMode:t="light",defaultLightColorScheme:o="light",defaultDarkColorScheme:r="dark",modeStorageKey:n=Se,colorSchemeStorageKey:a=Ce,attribute:i=_e,colorSchemeNode:s="document.documentElement",nonce:l}=e||{};return(0,we.jsx)("script",{suppressHydrationWarning:!0,nonce:"undefined"==typeof window?l:"",dangerouslySetInnerHTML:{__html:`(function() {\ntry {\n  var mode = localStorage.getItem('${n}') || '${t}';\n  var colorScheme = '';\n  if (mode === 'system') {\n    // handle system mode\n    var mql = window.matchMedia('(prefers-color-scheme: dark)');\n    if (mql.matches) {\n      colorScheme = localStorage.getItem('${a}-dark') || '${r}';\n    } else {\n      colorScheme = localStorage.getItem('${a}-light') || '${o}';\n    }\n  }\n  if (mode === 'light') {\n    colorScheme = localStorage.getItem('${a}-light') || '${o}';\n  }\n  if (mode === 'dark') {\n    colorScheme = localStorage.getItem('${a}-dark') || '${r}';\n  }\n  if (colorScheme) {\n    ${s}.setAttribute('${i}', colorScheme);\n  }\n} catch(e){}})();`}},"mui-color-scheme-init")}((0,k.A)({attribute:r,colorSchemeStorageKey:a,defaultMode:i,defaultLightColorScheme:p,defaultDarkColorScheme:m,modeStorageKey:n},e))}}({themeId:_.A,theme:at,attribute:et,colorSchemeStorageKey:tt,modeStorageKey:nt,defaultColorScheme:{light:ot,dark:rt},resolveTheme:e=>{const t=(0,k.A)({},e,{typography:(0,Je.A)(e.palette,e.typography)});return t.unstable_sx=function(e){return(0,Ie.A)({sx:e,theme:this})},t},excludeVariablesFromRoot:Qe}),ct=lt;var ut=o("./node_modules/.pnpm/@mui+material@5.16.4_@emotion+react@11.13.0_@types+react@18.3.3_react@18.3.1__@emotion+styled_brxipnv4yvqheosgxcawdxdyay/node_modules/@mui/material/styles/createMixins.js");function dt(){throw new Error((0,C.A)(20))}var pt=o("./node_modules/.pnpm/@mui+material@5.16.4_@emotion+react@11.13.0_@types+react@18.3.3_react@18.3.1__@emotion+styled_brxipnv4yvqheosgxcawdxdyay/node_modules/@mui/material/utils/index.js"),mt=(o("./node_modules/.pnpm/react-is@18.3.1/node_modules/react-is/index.js"),o("./node_modules/.pnpm/clsx@2.1.1/node_modules/clsx/dist/clsx.mjs")),ft=o("./node_modules/.pnpm/@mui+utils@5.16.4_@types+react@18.3.3_react@18.3.1/node_modules/@mui/utils/esm/composeClasses/composeClasses.js"),vt=o("./node_modules/.pnpm/@mui+material@5.16.4_@emotion+react@11.13.0_@types+react@18.3.3_react@18.3.1__@emotion+styled_brxipnv4yvqheosgxcawdxdyay/node_modules/@mui/material/DefaultPropsProvider/DefaultPropsProvider.js"),ht=o("./node_modules/.pnpm/react-transition-group@4.4.5_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/react-transition-group/esm/Transition.js"),gt=o("./node_modules/.pnpm/@mui+utils@5.16.4_@types+react@18.3.3_react@18.3.1/node_modules/@mui/utils/esm/useTimeout/useTimeout.js"),yt=o("./node_modules/.pnpm/@mui+material@5.16.4_@emotion+react@11.13.0_@types+react@18.3.3_react@18.3.1__@emotion+styled_brxipnv4yvqheosgxcawdxdyay/node_modules/@mui/material/transitions/utils.js"),bt=o("./node_modules/.pnpm/@mui+material@5.16.4_@emotion+react@11.13.0_@types+react@18.3.3_react@18.3.1__@emotion+styled_brxipnv4yvqheosgxcawdxdyay/node_modules/@mui/material/utils/useForkRef.js"),xt=o("./node_modules/.pnpm/@mui+utils@5.16.4_@types+react@18.3.3_react@18.3.1/node_modules/@mui/utils/esm/generateUtilityClasses/generateUtilityClasses.js"),At=o("./node_modules/.pnpm/@mui+utils@5.16.4_@types+react@18.3.3_react@18.3.1/node_modules/@mui/utils/esm/generateUtilityClass/generateUtilityClass.js");function wt(e){return(0,At.Ay)("MuiCollapse",e)}const St=(0,xt.A)("MuiCollapse",["root","horizontal","vertical","entered","hidden","wrapper","wrapperInner"]),Ct=["addEndListener","children","className","collapsedSize","component","easing","in","onEnter","onEntered","onEntering","onExit","onExited","onExiting","orientation","style","timeout","TransitionComponent"],_t=(0,de.Ay)("div",{name:"MuiCollapse",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:o}=e;return[t.root,t[o.orientation],"entered"===o.state&&t.entered,"exited"===o.state&&!o.in&&"0px"===o.collapsedSize&&t.hidden]}})((({theme:e,ownerState:t})=>(0,k.A)({height:0,overflow:"hidden",transition:e.transitions.create("height")},"horizontal"===t.orientation&&{height:"auto",width:0,transition:e.transitions.create("width")},"entered"===t.state&&(0,k.A)({height:"auto",overflow:"visible"},"horizontal"===t.orientation&&{width:"auto"}),"exited"===t.state&&!t.in&&"0px"===t.collapsedSize&&{visibility:"hidden"}))),kt=(0,de.Ay)("div",{name:"MuiCollapse",slot:"Wrapper",overridesResolver:(e,t)=>t.wrapper})((({ownerState:e})=>(0,k.A)({display:"flex",width:"100%"},"horizontal"===e.orientation&&{width:"auto",height:"100%"}))),Rt=(0,de.Ay)("div",{name:"MuiCollapse",slot:"WrapperInner",overridesResolver:(e,t)=>t.wrapperInner})((({ownerState:e})=>(0,k.A)({width:"100%"},"horizontal"===e.orientation&&{width:"auto",height:"100%"}))),Pt=ge.forwardRef((function(e,t){const o=(0,vt.b)({props:e,name:"MuiCollapse"}),{addEndListener:r,children:n,className:a,collapsedSize:i="0px",component:s,easing:l,in:c,onEnter:u,onEntered:d,onEntering:p,onExit:m,onExited:f,onExiting:v,orientation:h="vertical",style:g,timeout:y=re.p0.standard,TransitionComponent:b=ht.Ay}=o,x=(0,R.A)(o,Ct),A=(0,k.A)({},o,{orientation:h,collapsedSize:i}),w=(e=>{const{orientation:t,classes:o}=e,r={root:["root",`${t}`],entered:["entered"],hidden:["hidden"],wrapper:["wrapper",`${t}`],wrapperInner:["wrapperInner",`${t}`]};return(0,ft.A)(r,wt,o)})(A),S=(0,ne.A)(),C=(0,gt.A)(),_=ge.useRef(null),P=ge.useRef(),M="number"==typeof i?`${i}px`:i,I="horizontal"===h,j=I?"width":"height",$=ge.useRef(null),T=(0,bt.A)(t,$),L=e=>t=>{if(e){const o=$.current;void 0===t?e(o):e(o,t)}},O=()=>_.current?_.current[I?"clientWidth":"clientHeight"]:0,E=L(((e,t)=>{_.current&&I&&(_.current.style.position="absolute"),e.style[j]=M,u&&u(e,t)})),B=L(((e,t)=>{const o=O();_.current&&I&&(_.current.style.position="");const{duration:r,easing:n}=(0,yt.c)({style:g,timeout:y,easing:l},{mode:"enter"});if("auto"===y){const t=S.transitions.getAutoHeightDuration(o);e.style.transitionDuration=`${t}ms`,P.current=t}else e.style.transitionDuration="string"==typeof r?r:`${r}ms`;e.style[j]=`${o}px`,e.style.transitionTimingFunction=n,p&&p(e,t)})),N=L(((e,t)=>{e.style[j]="auto",d&&d(e,t)})),z=L((e=>{e.style[j]=`${O()}px`,m&&m(e)})),D=L(f),F=L((e=>{const t=O(),{duration:o,easing:r}=(0,yt.c)({style:g,timeout:y,easing:l},{mode:"exit"});if("auto"===y){const o=S.transitions.getAutoHeightDuration(t);e.style.transitionDuration=`${o}ms`,P.current=o}else e.style.transitionDuration="string"==typeof o?o:`${o}ms`;e.style[j]=M,e.style.transitionTimingFunction=r,v&&v(e)}));return(0,we.jsx)(b,(0,k.A)({in:c,onEnter:E,onEntered:N,onEntering:B,onExit:z,onExited:D,onExiting:F,addEndListener:e=>{"auto"===y&&C.start(P.current||0,e),r&&r($.current,e)},nodeRef:$,timeout:"auto"===y?null:y},x,{children:(e,t)=>(0,we.jsx)(_t,(0,k.A)({as:s,className:(0,mt.A)(w.root,a,{entered:w.entered,exited:!c&&"0px"===M&&w.hidden}[e]),style:(0,k.A)({[I?"minWidth":"minHeight"]:M},g),ref:T},t,{ownerState:(0,k.A)({},A,{state:e}),children:(0,we.jsx)(kt,{ownerState:(0,k.A)({},A,{state:e}),className:w.wrapper,ref:_,children:(0,we.jsx)(Rt,{ownerState:(0,k.A)({},A,{state:e}),className:w.wrapperInner,children:n})})}))}))}));Pt.muiSupportAuto=!0;const Mt=Pt;var It=o("./node_modules/.pnpm/@mui+material@5.16.4_@emotion+react@11.13.0_@types+react@18.3.3_react@18.3.1__@emotion+styled_brxipnv4yvqheosgxcawdxdyay/node_modules/@mui/material/Paper/Paper.js");const jt=ge.createContext({});var $t=o("./node_modules/.pnpm/@mui+material@5.16.4_@emotion+react@11.13.0_@types+react@18.3.3_react@18.3.1__@emotion+styled_brxipnv4yvqheosgxcawdxdyay/node_modules/@mui/material/utils/useControlled.js"),Tt=o("./node_modules/.pnpm/@mui+utils@5.16.4_@types+react@18.3.3_react@18.3.1/node_modules/@mui/utils/esm/useForkRef/useForkRef.js"),Lt=o("./node_modules/.pnpm/@mui+utils@5.16.4_@types+react@18.3.3_react@18.3.1/node_modules/@mui/utils/esm/appendOwnerState/appendOwnerState.js"),Ot=o("./node_modules/.pnpm/@mui+utils@5.16.4_@types+react@18.3.3_react@18.3.1/node_modules/@mui/utils/esm/resolveComponentProps/resolveComponentProps.js"),Et=o("./node_modules/.pnpm/@mui+utils@5.16.4_@types+react@18.3.3_react@18.3.1/node_modules/@mui/utils/esm/mergeSlotProps/mergeSlotProps.js");const Bt=["className","elementType","ownerState","externalForwardedProps","getSlotOwnerState","internalForwardedProps"],Nt=["component","slots","slotProps"],zt=["component"];function Dt(e,t){const{className:o,elementType:r,ownerState:n,externalForwardedProps:a,getSlotOwnerState:i,internalForwardedProps:s}=t,l=(0,R.A)(t,Bt),{component:c,slots:u={[e]:void 0},slotProps:d={[e]:void 0}}=a,p=(0,R.A)(a,Nt),m=u[e]||r,f=(0,Ot.A)(d[e],n),v=(0,Et.A)((0,k.A)({className:o},l,{externalForwardedProps:"root"===e?p:void 0,externalSlotProps:f})),{props:{component:h},internalRef:g}=v,y=(0,R.A)(v.props,zt),b=(0,Tt.A)(g,null==f?void 0:f.ref,t.ref),x=i?i(y):{},A=(0,k.A)({},n,x),w="root"===e?h||c:h,S=(0,Lt.A)(m,(0,k.A)({},"root"===e&&!c&&!u[e]&&s,"root"!==e&&!u[e]&&s,y,w&&{as:w},{ref:b}),A);return Object.keys(x).forEach((e=>{delete S[e]})),[m,S]}function Ft(e){return(0,At.Ay)("MuiAccordion",e)}const Wt=(0,xt.A)("MuiAccordion",["root","rounded","expanded","disabled","gutters","region"]),Vt=["children","className","defaultExpanded","disabled","disableGutters","expanded","onChange","square","slots","slotProps","TransitionComponent","TransitionProps"],Ht=(0,de.Ay)(It.A,{name:"MuiAccordion",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:o}=e;return[{[`& .${Wt.region}`]:t.region},t.root,!o.square&&t.rounded,!o.disableGutters&&t.gutters]}})((({theme:e})=>{const t={duration:e.transitions.duration.shortest};return{position:"relative",transition:e.transitions.create(["margin"],t),overflowAnchor:"none","&::before":{position:"absolute",left:0,top:-1,right:0,height:1,content:'""',opacity:1,backgroundColor:(e.vars||e).palette.divider,transition:e.transitions.create(["opacity","background-color"],t)},"&:first-of-type":{"&::before":{display:"none"}},[`&.${Wt.expanded}`]:{"&::before":{opacity:0},"&:first-of-type":{marginTop:0},"&:last-of-type":{marginBottom:0},"& + &":{"&::before":{display:"none"}}},[`&.${Wt.disabled}`]:{backgroundColor:(e.vars||e).palette.action.disabledBackground}}}),(({theme:e})=>({variants:[{props:e=>!e.square,style:{borderRadius:0,"&:first-of-type":{borderTopLeftRadius:(e.vars||e).shape.borderRadius,borderTopRightRadius:(e.vars||e).shape.borderRadius},"&:last-of-type":{borderBottomLeftRadius:(e.vars||e).shape.borderRadius,borderBottomRightRadius:(e.vars||e).shape.borderRadius,"@supports (-ms-ime-align: auto)":{borderBottomLeftRadius:0,borderBottomRightRadius:0}}}},{props:e=>!e.disableGutters,style:{[`&.${Wt.expanded}`]:{margin:"16px 0"}}}]}))),Ut=ge.forwardRef((function(e,t){const o=(0,vt.b)({props:e,name:"MuiAccordion"}),{children:r,className:n,defaultExpanded:a=!1,disabled:i=!1,disableGutters:s=!1,expanded:l,onChange:c,square:u=!1,slots:d={},slotProps:p={},TransitionComponent:m,TransitionProps:f}=o,v=(0,R.A)(o,Vt),[h,g]=(0,$t.A)({controlled:l,default:a,name:"Accordion",state:"expanded"}),y=ge.useCallback((e=>{g(!h),c&&c(e,!h)}),[h,c,g]),[b,...x]=ge.Children.toArray(r),A=ge.useMemo((()=>({expanded:h,disabled:i,disableGutters:s,toggle:y})),[h,i,s,y]),w=(0,k.A)({},o,{square:u,disabled:i,disableGutters:s,expanded:h}),S=(e=>{const{classes:t,square:o,expanded:r,disabled:n,disableGutters:a}=e,i={root:["root",!o&&"rounded",r&&"expanded",n&&"disabled",!a&&"gutters"],region:["region"]};return(0,ft.A)(i,Ft,t)})(w),C=(0,k.A)({transition:m},d),_=(0,k.A)({transition:f},p),[P,M]=Dt("transition",{elementType:Mt,externalForwardedProps:{slots:C,slotProps:_},ownerState:w});return(0,we.jsxs)(Ht,(0,k.A)({className:(0,mt.A)(S.root,n),ref:t,ownerState:w,square:u},v,{children:[(0,we.jsx)(jt.Provider,{value:A,children:b}),(0,we.jsx)(P,(0,k.A)({in:h,timeout:"auto"},M,{children:(0,we.jsx)("div",{"aria-labelledby":b.props.id,id:b.props["aria-controls"],role:"region",className:S.region,children:x})}))]}))}));function qt(e){return(0,At.Ay)("MuiAccordionActions",e)}const Gt=(0,xt.A)("MuiAccordionActions",["root","spacing"]),Xt=["className","disableSpacing"],Yt=(0,de.Ay)("div",{name:"MuiAccordionActions",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:o}=e;return[t.root,!o.disableSpacing&&t.spacing]}})({display:"flex",alignItems:"center",padding:8,justifyContent:"flex-end",variants:[{props:e=>!e.disableSpacing,style:{"& > :not(style) ~ :not(style)":{marginLeft:8}}}]}),Kt=ge.forwardRef((function(e,t){const o=(0,vt.b)({props:e,name:"MuiAccordionActions"}),{className:r,disableSpacing:n=!1}=o,a=(0,R.A)(o,Xt),i=(0,k.A)({},o,{disableSpacing:n}),s=(e=>{const{classes:t,disableSpacing:o}=e,r={root:["root",!o&&"spacing"]};return(0,ft.A)(r,qt,t)})(i);return(0,we.jsx)(Yt,(0,k.A)({className:(0,mt.A)(s.root,r),ref:t,ownerState:i},a))}));function Zt(e){return(0,At.Ay)("MuiAccordionDetails",e)}const Jt=(0,xt.A)("MuiAccordionDetails",["root"]),Qt=["className"],eo=(0,de.Ay)("div",{name:"MuiAccordionDetails",slot:"Root",overridesResolver:(e,t)=>t.root})((({theme:e})=>({padding:e.spacing(1,2,2)}))),to=ge.forwardRef((function(e,t){const o=(0,vt.b)({props:e,name:"MuiAccordionDetails"}),{className:r}=o,n=(0,R.A)(o,Qt),a=o,i=(e=>{const{classes:t}=e;return(0,ft.A)({root:["root"]},Zt,t)})(a);return(0,we.jsx)(eo,(0,k.A)({className:(0,mt.A)(i.root,r),ref:t,ownerState:a},n))}));var oo=o("./node_modules/.pnpm/@mui+material@5.16.4_@emotion+react@11.13.0_@types+react@18.3.3_react@18.3.1__@emotion+styled_brxipnv4yvqheosgxcawdxdyay/node_modules/@mui/material/ButtonBase/ButtonBase.js");function ro(e){return(0,At.Ay)("MuiAccordionSummary",e)}const no=(0,xt.A)("MuiAccordionSummary",["root","expanded","focusVisible","disabled","gutters","contentGutters","content","expandIconWrapper"]),ao=["children","className","expandIcon","focusVisibleClassName","onClick"],io=(0,de.Ay)(oo.A,{name:"MuiAccordionSummary",slot:"Root",overridesResolver:(e,t)=>t.root})((({theme:e})=>{const t={duration:e.transitions.duration.shortest};return{display:"flex",minHeight:48,padding:e.spacing(0,2),transition:e.transitions.create(["min-height","background-color"],t),[`&.${no.focusVisible}`]:{backgroundColor:(e.vars||e).palette.action.focus},[`&.${no.disabled}`]:{opacity:(e.vars||e).palette.action.disabledOpacity},[`&:hover:not(.${no.disabled})`]:{cursor:"pointer"},variants:[{props:e=>!e.disableGutters,style:{[`&.${no.expanded}`]:{minHeight:64}}}]}})),so=(0,de.Ay)("div",{name:"MuiAccordionSummary",slot:"Content",overridesResolver:(e,t)=>t.content})((({theme:e})=>({display:"flex",flexGrow:1,margin:"12px 0",variants:[{props:e=>!e.disableGutters,style:{transition:e.transitions.create(["margin"],{duration:e.transitions.duration.shortest}),[`&.${no.expanded}`]:{margin:"20px 0"}}}]}))),lo=(0,de.Ay)("div",{name:"MuiAccordionSummary",slot:"ExpandIconWrapper",overridesResolver:(e,t)=>t.expandIconWrapper})((({theme:e})=>({display:"flex",color:(e.vars||e).palette.action.active,transform:"rotate(0deg)",transition:e.transitions.create("transform",{duration:e.transitions.duration.shortest}),[`&.${no.expanded}`]:{transform:"rotate(180deg)"}}))),co=ge.forwardRef((function(e,t){const o=(0,vt.b)({props:e,name:"MuiAccordionSummary"}),{children:r,className:n,expandIcon:a,focusVisibleClassName:i,onClick:s}=o,l=(0,R.A)(o,ao),{disabled:c=!1,disableGutters:u,expanded:d,toggle:p}=ge.useContext(jt),m=(0,k.A)({},o,{expanded:d,disabled:c,disableGutters:u}),f=(e=>{const{classes:t,expanded:o,disabled:r,disableGutters:n}=e,a={root:["root",o&&"expanded",r&&"disabled",!n&&"gutters"],focusVisible:["focusVisible"],content:["content",o&&"expanded",!n&&"contentGutters"],expandIconWrapper:["expandIconWrapper",o&&"expanded"]};return(0,ft.A)(a,ro,t)})(m);return(0,we.jsxs)(io,(0,k.A)({focusRipple:!1,disableRipple:!0,disabled:c,component:"div","aria-expanded":d,className:(0,mt.A)(f.root,n),focusVisibleClassName:(0,mt.A)(f.focusVisible,i),onClick:e=>{p&&p(e),s&&s(e)},ref:t,ownerState:m},l,{children:[(0,we.jsx)(so,{className:f.content,ownerState:m,children:r}),a&&(0,we.jsx)(lo,{className:f.expandIconWrapper,ownerState:m,children:a})]}))}));var uo=o("./node_modules/.pnpm/@mui+material@5.16.4_@emotion+react@11.13.0_@types+react@18.3.3_react@18.3.1__@emotion+styled_brxipnv4yvqheosgxcawdxdyay/node_modules/@mui/material/utils/capitalize.js");function po(e){return(0,At.Ay)("MuiAlert",e)}const mo=(0,xt.A)("MuiAlert",["root","action","icon","message","filled","colorSuccess","colorInfo","colorWarning","colorError","filledSuccess","filledInfo","filledWarning","filledError","outlined","outlinedSuccess","outlinedInfo","outlinedWarning","outlinedError","standard","standardSuccess","standardInfo","standardWarning","standardError"]);var fo=o("./node_modules/.pnpm/@mui+material@5.16.4_@emotion+react@11.13.0_@types+react@18.3.3_react@18.3.1__@emotion+styled_brxipnv4yvqheosgxcawdxdyay/node_modules/@mui/material/IconButton/IconButton.js"),vo=o("./node_modules/.pnpm/@mui+material@5.16.4_@emotion+react@11.13.0_@types+react@18.3.3_react@18.3.1__@emotion+styled_brxipnv4yvqheosgxcawdxdyay/node_modules/@mui/material/utils/createSvgIcon.js");const ho=(0,vo.A)((0,we.jsx)("path",{d:"M20,12A8,8 0 0,1 12,20A8,8 0 0,1 4,12A8,8 0 0,1 12,4C12.76,4 13.5,4.11 14.2, 4.31L15.77,2.74C14.61,2.26 13.34,2 12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0, 0 22,12M7.91,10.08L6.5,11.5L11,16L21,6L19.59,4.58L11,13.17L7.91,10.08Z"}),"SuccessOutlined"),go=(0,vo.A)((0,we.jsx)("path",{d:"M12 5.99L19.53 19H4.47L12 5.99M12 2L1 21h22L12 2zm1 14h-2v2h2v-2zm0-6h-2v4h2v-4z"}),"ReportProblemOutlined"),yo=(0,vo.A)((0,we.jsx)("path",{d:"M11 15h2v2h-2zm0-8h2v6h-2zm.99-5C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z"}),"ErrorOutline"),bo=(0,vo.A)((0,we.jsx)("path",{d:"M11,9H13V7H11M12,20C7.59,20 4,16.41 4,12C4,7.59 7.59,4 12,4C16.41,4 20,7.59 20, 12C20,16.41 16.41,20 12,20M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10, 10 0 0,0 12,2M11,17H13V11H11V17Z"}),"InfoOutlined"),xo=(0,vo.A)((0,we.jsx)("path",{d:"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"}),"Close"),Ao=["action","children","className","closeText","color","components","componentsProps","icon","iconMapping","onClose","role","severity","slotProps","slots","variant"],wo=(0,de.Ay)(It.A,{name:"MuiAlert",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:o}=e;return[t.root,t[o.variant],t[`${o.variant}${(0,uo.A)(o.color||o.severity)}`]]}})((({theme:e})=>{const t="light"===e.palette.mode?De.e$:De.a,o="light"===e.palette.mode?De.a:De.e$;return(0,k.A)({},e.typography.body2,{backgroundColor:"transparent",display:"flex",padding:"6px 16px",variants:[...Object.entries(e.palette).filter((([,e])=>e.main&&e.light)).map((([r])=>({props:{colorSeverity:r,variant:"standard"},style:{color:e.vars?e.vars.palette.Alert[`${r}Color`]:t(e.palette[r].light,.6),backgroundColor:e.vars?e.vars.palette.Alert[`${r}StandardBg`]:o(e.palette[r].light,.9),[`& .${mo.icon}`]:e.vars?{color:e.vars.palette.Alert[`${r}IconColor`]}:{color:e.palette[r].main}}}))),...Object.entries(e.palette).filter((([,e])=>e.main&&e.light)).map((([o])=>({props:{colorSeverity:o,variant:"outlined"},style:{color:e.vars?e.vars.palette.Alert[`${o}Color`]:t(e.palette[o].light,.6),border:`1px solid ${(e.vars||e).palette[o].light}`,[`& .${mo.icon}`]:e.vars?{color:e.vars.palette.Alert[`${o}IconColor`]}:{color:e.palette[o].main}}}))),...Object.entries(e.palette).filter((([,e])=>e.main&&e.dark)).map((([t])=>({props:{colorSeverity:t,variant:"filled"},style:(0,k.A)({fontWeight:e.typography.fontWeightMedium},e.vars?{color:e.vars.palette.Alert[`${t}FilledColor`],backgroundColor:e.vars.palette.Alert[`${t}FilledBg`]}:{backgroundColor:"dark"===e.palette.mode?e.palette[t].dark:e.palette[t].main,color:e.palette.getContrastText(e.palette[t].main)})})))]})})),So=(0,de.Ay)("div",{name:"MuiAlert",slot:"Icon",overridesResolver:(e,t)=>t.icon})({marginRight:12,padding:"7px 0",display:"flex",fontSize:22,opacity:.9}),Co=(0,de.Ay)("div",{name:"MuiAlert",slot:"Message",overridesResolver:(e,t)=>t.message})({padding:"8px 0",minWidth:0,overflow:"auto"}),_o=(0,de.Ay)("div",{name:"MuiAlert",slot:"Action",overridesResolver:(e,t)=>t.action})({display:"flex",alignItems:"flex-start",padding:"4px 0 0 16px",marginLeft:"auto",marginRight:-8}),ko={success:(0,we.jsx)(ho,{fontSize:"inherit"}),warning:(0,we.jsx)(go,{fontSize:"inherit"}),error:(0,we.jsx)(yo,{fontSize:"inherit"}),info:(0,we.jsx)(bo,{fontSize:"inherit"})},Ro=ge.forwardRef((function(e,t){const o=(0,vt.b)({props:e,name:"MuiAlert"}),{action:r,children:n,className:a,closeText:i="Close",color:s,components:l={},componentsProps:c={},icon:u,iconMapping:d=ko,onClose:p,role:m="alert",severity:f="success",slotProps:v={},slots:h={},variant:g="standard"}=o,y=(0,R.A)(o,Ao),b=(0,k.A)({},o,{color:s,severity:f,variant:g,colorSeverity:s||f}),x=(e=>{const{variant:t,color:o,severity:r,classes:n}=e,a={root:["root",`color${(0,uo.A)(o||r)}`,`${t}${(0,uo.A)(o||r)}`,`${t}`],icon:["icon"],message:["message"],action:["action"]};return(0,ft.A)(a,po,n)})(b),A={slots:(0,k.A)({closeButton:l.CloseButton,closeIcon:l.CloseIcon},h),slotProps:(0,k.A)({},c,v)},[w,S]=Dt("closeButton",{elementType:fo.A,externalForwardedProps:A,ownerState:b}),[C,_]=Dt("closeIcon",{elementType:xo,externalForwardedProps:A,ownerState:b});return(0,we.jsxs)(wo,(0,k.A)({role:m,elevation:0,ownerState:b,className:(0,mt.A)(x.root,a),ref:t},y,{children:[!1!==u?(0,we.jsx)(So,{ownerState:b,className:x.icon,children:u||d[f]||ko[f]}):null,(0,we.jsx)(Co,{ownerState:b,className:x.message,children:n}),null!=r?(0,we.jsx)(_o,{ownerState:b,className:x.action,children:r}):null,null==r&&p?(0,we.jsx)(_o,{ownerState:b,className:x.action,children:(0,we.jsx)(w,(0,k.A)({size:"small","aria-label":i,title:i,color:"inherit",onClick:p},S,{children:(0,we.jsx)(C,(0,k.A)({fontSize:"small"},_))}))}):null]}))}));var Po=o("./node_modules/.pnpm/@mui+system@5.16.4_@emotion+react@11.13.0_@types+react@18.3.3_react@18.3.1__@emotion+styled@1_6pxsshf4op6ciexesjgj77xooe/node_modules/@mui/system/esm/styleFunctionSx/extendSxProp.js");function Mo(e){return(0,At.Ay)("MuiTypography",e)}const Io=(0,xt.A)("MuiTypography",["root","h1","h2","h3","h4","h5","h6","subtitle1","subtitle2","body1","body2","inherit","button","caption","overline","alignLeft","alignRight","alignCenter","alignJustify","noWrap","gutterBottom","paragraph"]),jo=["align","className","component","gutterBottom","noWrap","paragraph","variant","variantMapping"],$o=(0,de.Ay)("span",{name:"MuiTypography",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:o}=e;return[t.root,o.variant&&t[o.variant],"inherit"!==o.align&&t[`align${(0,uo.A)(o.align)}`],o.noWrap&&t.noWrap,o.gutterBottom&&t.gutterBottom,o.paragraph&&t.paragraph]}})((({theme:e,ownerState:t})=>(0,k.A)({margin:0},"inherit"===t.variant&&{font:"inherit"},"inherit"!==t.variant&&e.typography[t.variant],"inherit"!==t.align&&{textAlign:t.align},t.noWrap&&{overflow:"hidden",textOverflow:"ellipsis",whiteSpace:"nowrap"},t.gutterBottom&&{marginBottom:"0.35em"},t.paragraph&&{marginBottom:16}))),To={h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",h6:"h6",subtitle1:"h6",subtitle2:"h6",body1:"p",body2:"p",inherit:"p"},Lo={primary:"primary.main",textPrimary:"text.primary",secondary:"secondary.main",textSecondary:"text.secondary",error:"error.main"},Oo=ge.forwardRef((function(e,t){const o=(0,vt.b)({props:e,name:"MuiTypography"}),r=(e=>Lo[e]||e)(o.color),n=(0,Po.A)((0,k.A)({},o,{color:r})),{align:a="inherit",className:i,component:s,gutterBottom:l=!1,noWrap:c=!1,paragraph:u=!1,variant:d="body1",variantMapping:p=To}=n,m=(0,R.A)(n,jo),f=(0,k.A)({},n,{align:a,color:r,className:i,component:s,gutterBottom:l,noWrap:c,paragraph:u,variant:d,variantMapping:p}),v=s||(u?"p":p[d]||To[d])||"span",h=(e=>{const{align:t,gutterBottom:o,noWrap:r,paragraph:n,variant:a,classes:i}=e,s={root:["root",a,"inherit"!==e.align&&`align${(0,uo.A)(t)}`,o&&"gutterBottom",r&&"noWrap",n&&"paragraph"]};return(0,ft.A)(s,Mo,i)})(f);return(0,we.jsx)($o,(0,k.A)({as:v,ref:t,ownerState:f,className:(0,mt.A)(h.root,i)},m))}));function Eo(e){return(0,At.Ay)("MuiAlertTitle",e)}const Bo=(0,xt.A)("MuiAlertTitle",["root"]),No=["className"],zo=(0,de.Ay)(Oo,{name:"MuiAlertTitle",slot:"Root",overridesResolver:(e,t)=>t.root})((({theme:e})=>({fontWeight:e.typography.fontWeightMedium,marginTop:-2}))),Do=ge.forwardRef((function(e,t){const o=(0,vt.b)({props:e,name:"MuiAlertTitle"}),{className:r}=o,n=(0,R.A)(o,No),a=o,i=(e=>{const{classes:t}=e;return(0,ft.A)({root:["root"]},Eo,t)})(a);return(0,we.jsx)(zo,(0,k.A)({gutterBottom:!0,component:"div",ownerState:a,ref:t,className:(0,mt.A)(i.root,r)},n))}));var Fo=o("./node_modules/.pnpm/@mui+material@5.16.4_@emotion+react@11.13.0_@types+react@18.3.3_react@18.3.1__@emotion+styled_brxipnv4yvqheosgxcawdxdyay/node_modules/@mui/material/AppBar/AppBar.js"),Wo=o("./node_modules/.pnpm/@mui+material@5.16.4_@emotion+react@11.13.0_@types+react@18.3.3_react@18.3.1__@emotion+styled_brxipnv4yvqheosgxcawdxdyay/node_modules/@mui/material/AppBar/appBarClasses.js"),Vo=o("./node_modules/.pnpm/@mui+utils@5.16.4_@types+react@18.3.3_react@18.3.1/node_modules/@mui/utils/esm/useId/useId.js"),Ho=o("./node_modules/.pnpm/@mui+utils@5.16.4_@types+react@18.3.3_react@18.3.1/node_modules/@mui/utils/esm/useControlled/useControlled.js");const Uo=e=>{const t=ge.useRef({});return ge.useEffect((()=>{t.current=e})),t.current};var qo=o("./node_modules/.pnpm/@mui+utils@5.16.4_@types+react@18.3.3_react@18.3.1/node_modules/@mui/utils/esm/useEventCallback/useEventCallback.js"),Go=o("./node_modules/.pnpm/@mui+utils@5.16.4_@types+react@18.3.3_react@18.3.1/node_modules/@mui/utils/esm/setRef/setRef.js");function Xo(e){return void 0!==e.normalize?e.normalize("NFD").replace(/[\u0300-\u036f]/g,""):e}function Yo(e={}){const{ignoreAccents:t=!0,ignoreCase:o=!0,limit:r,matchFrom:n="any",stringify:a,trim:i=!1}=e;return(e,{inputValue:s,getOptionLabel:l})=>{let c=i?s.trim():s;o&&(c=c.toLowerCase()),t&&(c=Xo(c));const u=c?e.filter((e=>{let r=(a||l)(e);return o&&(r=r.toLowerCase()),t&&(r=Xo(r)),"start"===n?0===r.indexOf(c):r.indexOf(c)>-1})):e;return"number"==typeof r?u.slice(0,r):u}}function Ko(e,t){for(let o=0;o<e.length;o+=1)if(t(e[o]))return o;return-1}const Zo=Yo(),Jo=e=>{var t;return null!==e.current&&(null==(t=e.current.parentElement)?void 0:t.contains(document.activeElement))},Qo=function(e){const{unstable_isActiveElementInListbox:t=Jo,unstable_classNamePrefix:o="Mui",autoComplete:r=!1,autoHighlight:n=!1,autoSelect:a=!1,blurOnSelect:i=!1,clearOnBlur:s=!e.freeSolo,clearOnEscape:l=!1,componentName:c="useAutocomplete",defaultValue:u=(e.multiple?[]:null),disableClearable:d=!1,disableCloseOnSelect:p=!1,disabled:m,disabledItemsFocusable:f=!1,disableListWrap:v=!1,filterOptions:h=Zo,filterSelectedOptions:g=!1,freeSolo:y=!1,getOptionDisabled:b,getOptionKey:x,getOptionLabel:A=e=>{var t;return null!=(t=e.label)?t:e},groupBy:w,handleHomeEndKeys:S=!e.freeSolo,id:C,includeInputInList:_=!1,inputValue:R,isOptionEqualToValue:P=(e,t)=>e===t,multiple:M=!1,onChange:I,onClose:j,onHighlightChange:$,onInputChange:T,onOpen:L,open:O,openOnFocus:E=!1,options:B,readOnly:N=!1,selectOnFocus:z=!e.freeSolo,value:D}=e,F=(0,Vo.A)(C);let W=A;W=e=>{const t=A(e);return"string"!=typeof t?String(t):t};const V=ge.useRef(!1),H=ge.useRef(!0),U=ge.useRef(null),q=ge.useRef(null),[G,X]=ge.useState(null),[Y,K]=ge.useState(-1),Z=n?0:-1,J=ge.useRef(Z),[Q,ee]=(0,Ho.A)({controlled:D,default:u,name:c}),[te,oe]=(0,Ho.A)({controlled:R,default:"",name:c,state:"inputValue"}),[re,ne]=ge.useState(!1),ae=ge.useCallback(((e,t)=>{if(!(M?Q.length<t.length:null!==t)&&!s)return;let o;if(M)o="";else if(null==t)o="";else{const e=W(t);o="string"==typeof e?e:""}te!==o&&(oe(o),T&&T(e,o,"reset"))}),[W,te,M,T,oe,s,Q]),[ie,se]=(0,Ho.A)({controlled:O,default:!1,name:c,state:"open"}),[le,ce]=ge.useState(!0),ue=!M&&null!=Q&&te===W(Q),de=ie&&!N,pe=de?h(B.filter((e=>!g||!(M?Q:[Q]).some((t=>null!==t&&P(e,t))))),{inputValue:ue&&le?"":te,getOptionLabel:W}):[],me=Uo({filteredOptions:pe,value:Q,inputValue:te});ge.useEffect((()=>{const e=Q!==me.value;re&&!e||y&&!e||ae(null,Q)}),[Q,ae,re,me.value,y]);const fe=ie&&pe.length>0&&!N,ve=(0,qo.A)((e=>{-1===e?U.current.focus():G.querySelector(`[data-tag-index="${e}"]`).focus()}));ge.useEffect((()=>{M&&Y>Q.length-1&&(K(-1),ve(-1))}),[Q,M,Y,ve]);const he=(0,qo.A)((({event:e,index:t,reason:r="auto"})=>{if(J.current=t,-1===t?U.current.removeAttribute("aria-activedescendant"):U.current.setAttribute("aria-activedescendant",`${F}-option-${t}`),$&&$(e,-1===t?null:pe[t],r),!q.current)return;const n=q.current.querySelector(`[role="option"].${o}-focused`);n&&(n.classList.remove(`${o}-focused`),n.classList.remove(`${o}-focusVisible`));let a=q.current;if("listbox"!==q.current.getAttribute("role")&&(a=q.current.parentElement.querySelector('[role="listbox"]')),!a)return;if(-1===t)return void(a.scrollTop=0);const i=q.current.querySelector(`[data-option-index="${t}"]`);if(i&&(i.classList.add(`${o}-focused`),"keyboard"===r&&i.classList.add(`${o}-focusVisible`),a.scrollHeight>a.clientHeight&&"mouse"!==r&&"touch"!==r)){const e=i,t=a.clientHeight+a.scrollTop,o=e.offsetTop+e.offsetHeight;o>t?a.scrollTop=o-a.clientHeight:e.offsetTop-e.offsetHeight*(w?1.3:0)<a.scrollTop&&(a.scrollTop=e.offsetTop-e.offsetHeight*(w?1.3:0))}})),ye=(0,qo.A)((({event:e,diff:t,direction:o="next",reason:n="auto"})=>{if(!de)return;const a=function(e,t){if(!q.current||e<0||e>=pe.length)return-1;let o=e;for(;;){const r=q.current.querySelector(`[data-option-index="${o}"]`),n=!f&&(!r||r.disabled||"true"===r.getAttribute("aria-disabled"));if(r&&r.hasAttribute("tabindex")&&!n)return o;if(o="next"===t?(o+1)%pe.length:(o-1+pe.length)%pe.length,o===e)return-1}}((()=>{const e=pe.length-1;if("reset"===t)return Z;if("start"===t)return 0;if("end"===t)return e;const o=J.current+t;return o<0?-1===o&&_?-1:v&&-1!==J.current||Math.abs(t)>1?0:e:o>e?o===e+1&&_?-1:v||Math.abs(t)>1?e:0:o})(),o);if(he({index:a,reason:n,event:e}),r&&"reset"!==t)if(-1===a)U.current.value=te;else{const e=W(pe[a]);U.current.value=e,0===e.toLowerCase().indexOf(te.toLowerCase())&&te.length>0&&U.current.setSelectionRange(te.length,e.length)}})),be=ge.useCallback((()=>{if(!de)return;const e=(()=>{if(-1!==J.current&&me.filteredOptions&&me.filteredOptions.length!==pe.length&&me.inputValue===te&&(M?Q.length===me.value.length&&me.value.every(((e,t)=>W(Q[t])===W(e))):(e=me.value,t=Q,(e?W(e):"")===(t?W(t):"")))){const e=me.filteredOptions[J.current];if(e)return Ko(pe,(t=>W(t)===W(e)))}var e,t;return-1})();if(-1!==e)return void(J.current=e);const t=M?Q[0]:Q;if(0!==pe.length&&null!=t){if(q.current)if(null==t)J.current>=pe.length-1?he({index:pe.length-1}):he({index:J.current});else{const e=pe[J.current];if(M&&e&&-1!==Ko(Q,(t=>P(e,t))))return;const o=Ko(pe,(e=>P(e,t)));-1===o?ye({diff:"reset"}):he({index:o})}}else ye({diff:"reset"})}),[pe.length,!M&&Q,g,ye,he,de,te,M]),xe=(0,qo.A)((e=>{(0,Go.A)(q,e),e&&be()}));ge.useEffect((()=>{be()}),[be]);const Ae=e=>{ie||(se(!0),ce(!0),L&&L(e))},we=(e,t)=>{ie&&(se(!1),j&&j(e,t))},Se=(e,t,o,r)=>{if(M){if(Q.length===t.length&&Q.every(((e,o)=>e===t[o])))return}else if(Q===t)return;I&&I(e,t,o,r),ee(t)},Ce=ge.useRef(!1),_e=(e,t,o="selectOption",r="options")=>{let n=o,a=t;if(M){a=Array.isArray(Q)?Q.slice():[];const e=Ko(a,(e=>P(t,e)));-1===e?a.push(t):"freeSolo"!==r&&(a.splice(e,1),n="removeOption")}ae(e,a),Se(e,a,n,{option:t}),p||e&&(e.ctrlKey||e.metaKey)||we(e,n),(!0===i||"touch"===i&&Ce.current||"mouse"===i&&!Ce.current)&&U.current.blur()},ke=(e,t)=>{if(!M)return;""===te&&we(e,"toggleInput");let o=Y;-1===Y?""===te&&"previous"===t&&(o=Q.length-1):(o+="next"===t?1:-1,o<0&&(o=0),o===Q.length&&(o=-1)),o=function(e,t){if(-1===e)return-1;let o=e;for(;;){if("next"===t&&o===Q.length||"previous"===t&&-1===o)return-1;const e=G.querySelector(`[data-tag-index="${o}"]`);if(e&&e.hasAttribute("tabindex")&&!e.disabled&&"true"!==e.getAttribute("aria-disabled"))return o;o+="next"===t?1:-1}}(o,t),K(o),ve(o)},Re=e=>{V.current=!0,oe(""),T&&T(e,"","clear"),Se(e,M?[]:null,"clear")},Pe=e=>t=>{if(e.onKeyDown&&e.onKeyDown(t),!t.defaultMuiPrevented&&(-1!==Y&&-1===["ArrowLeft","ArrowRight"].indexOf(t.key)&&(K(-1),ve(-1)),229!==t.which))switch(t.key){case"Home":de&&S&&(t.preventDefault(),ye({diff:"start",direction:"next",reason:"keyboard",event:t}));break;case"End":de&&S&&(t.preventDefault(),ye({diff:"end",direction:"previous",reason:"keyboard",event:t}));break;case"PageUp":t.preventDefault(),ye({diff:-5,direction:"previous",reason:"keyboard",event:t}),Ae(t);break;case"PageDown":t.preventDefault(),ye({diff:5,direction:"next",reason:"keyboard",event:t}),Ae(t);break;case"ArrowDown":t.preventDefault(),ye({diff:1,direction:"next",reason:"keyboard",event:t}),Ae(t);break;case"ArrowUp":t.preventDefault(),ye({diff:-1,direction:"previous",reason:"keyboard",event:t}),Ae(t);break;case"ArrowLeft":ke(t,"previous");break;case"ArrowRight":ke(t,"next");break;case"Enter":if(-1!==J.current&&de){const e=pe[J.current],o=!!b&&b(e);if(t.preventDefault(),o)return;_e(t,e,"selectOption"),r&&U.current.setSelectionRange(U.current.value.length,U.current.value.length)}else y&&""!==te&&!1===ue&&(M&&t.preventDefault(),_e(t,te,"createOption","freeSolo"));break;case"Escape":de?(t.preventDefault(),t.stopPropagation(),we(t,"escape")):l&&(""!==te||M&&Q.length>0)&&(t.preventDefault(),t.stopPropagation(),Re(t));break;case"Backspace":if(M&&!N&&""===te&&Q.length>0){const e=-1===Y?Q.length-1:Y,o=Q.slice();o.splice(e,1),Se(t,o,"removeOption",{option:Q[e]})}break;case"Delete":if(M&&!N&&""===te&&Q.length>0&&-1!==Y){const e=Y,o=Q.slice();o.splice(e,1),Se(t,o,"removeOption",{option:Q[e]})}}},Me=e=>{ne(!0),E&&!V.current&&Ae(e)},Ie=e=>{t(q)?U.current.focus():(ne(!1),H.current=!0,V.current=!1,a&&-1!==J.current&&de?_e(e,pe[J.current],"blur"):a&&y&&""!==te?_e(e,te,"blur","freeSolo"):s&&ae(e,Q),we(e,"blur"))},je=e=>{const t=e.target.value;te!==t&&(oe(t),ce(!1),T&&T(e,t,"input")),""===t?d||M||Se(e,null,"clear"):Ae(e)},$e=e=>{const t=Number(e.currentTarget.getAttribute("data-option-index"));J.current!==t&&he({event:e,index:t,reason:"mouse"})},Te=e=>{he({event:e,index:Number(e.currentTarget.getAttribute("data-option-index")),reason:"touch"}),Ce.current=!0},Le=e=>{const t=Number(e.currentTarget.getAttribute("data-option-index"));_e(e,pe[t],"selectOption"),Ce.current=!1},Oe=e=>t=>{const o=Q.slice();o.splice(e,1),Se(t,o,"removeOption",{option:Q[e]})},Ee=e=>{ie?we(e,"toggleInput"):Ae(e)},Be=e=>{e.currentTarget.contains(e.target)&&e.target.getAttribute("id")!==F&&e.preventDefault()},Ne=e=>{e.currentTarget.contains(e.target)&&(U.current.focus(),z&&H.current&&U.current.selectionEnd-U.current.selectionStart==0&&U.current.select(),H.current=!1)},ze=e=>{m||""!==te&&ie||Ee(e)};let De=y&&te.length>0;De=De||(M?Q.length>0:null!==Q);let Fe=pe;return w&&(new Map,Fe=pe.reduce(((e,t,o)=>{const r=w(t);return e.length>0&&e[e.length-1].group===r?e[e.length-1].options.push(t):e.push({key:o,index:o,group:r,options:[t]}),e}),[])),m&&re&&Ie(),{getRootProps:(e={})=>(0,k.A)({"aria-owns":fe?`${F}-listbox`:null},e,{onKeyDown:Pe(e),onMouseDown:Be,onClick:Ne}),getInputLabelProps:()=>({id:`${F}-label`,htmlFor:F}),getInputProps:()=>({id:F,value:te,onBlur:Ie,onFocus:Me,onChange:je,onMouseDown:ze,"aria-activedescendant":de?"":null,"aria-autocomplete":r?"both":"list","aria-controls":fe?`${F}-listbox`:void 0,"aria-expanded":fe,autoComplete:"off",ref:U,autoCapitalize:"none",spellCheck:"false",role:"combobox",disabled:m}),getClearProps:()=>({tabIndex:-1,type:"button",onClick:Re}),getPopupIndicatorProps:()=>({tabIndex:-1,type:"button",onClick:Ee}),getTagProps:({index:e})=>(0,k.A)({key:e,"data-tag-index":e,tabIndex:-1},!N&&{onDelete:Oe(e)}),getListboxProps:()=>({role:"listbox",id:`${F}-listbox`,"aria-labelledby":`${F}-label`,ref:xe,onMouseDown:e=>{e.preventDefault()}}),getOptionProps:({index:e,option:t})=>{var o;const r=(M?Q:[Q]).some((e=>null!=e&&P(t,e))),n=!!b&&b(t);return{key:null!=(o=null==x?void 0:x(t))?o:W(t),tabIndex:-1,role:"option",id:`${F}-option-${e}`,onMouseMove:$e,onClick:Le,onTouchStart:Te,"data-option-index":e,"aria-disabled":n,"aria-selected":r}},id:F,inputValue:te,value:Q,dirty:De,expanded:de&&G,popupOpen:de,focused:re||-1!==Y,anchorEl:G,setAnchorEl:X,focusedTag:Y,groupedOptions:Fe}};var er=o("./node_modules/.pnpm/@mui+system@5.16.4_@emotion+react@11.13.0_@types+react@18.3.3_react@18.3.1__@emotion+styled@1_6pxsshf4op6ciexesjgj77xooe/node_modules/@mui/system/useThemeWithoutDefault.js"),tr=o("./node_modules/.pnpm/@mui+utils@5.16.4_@types+react@18.3.3_react@18.3.1/node_modules/@mui/utils/esm/useEnhancedEffect/useEnhancedEffect.js"),or=o("./node_modules/.pnpm/@mui+utils@5.16.4_@types+react@18.3.3_react@18.3.1/node_modules/@mui/utils/esm/ownerDocument/ownerDocument.js");function rr(e){if(null==e)return window;if("[object Window]"!==e.toString()){var t=e.ownerDocument;return t&&t.defaultView||window}return e}function nr(e){return e instanceof rr(e).Element||e instanceof Element}function ar(e){return e instanceof rr(e).HTMLElement||e instanceof HTMLElement}function ir(e){return"undefined"!=typeof ShadowRoot&&(e instanceof rr(e).ShadowRoot||e instanceof ShadowRoot)}var sr=Math.max,lr=Math.min,cr=Math.round;function ur(){var e=navigator.userAgentData;return null!=e&&e.brands&&Array.isArray(e.brands)?e.brands.map((function(e){return e.brand+"/"+e.version})).join(" "):navigator.userAgent}function dr(){return!/^((?!chrome|android).)*safari/i.test(ur())}function pr(e,t,o){void 0===t&&(t=!1),void 0===o&&(o=!1);var r=e.getBoundingClientRect(),n=1,a=1;t&&ar(e)&&(n=e.offsetWidth>0&&cr(r.width)/e.offsetWidth||1,a=e.offsetHeight>0&&cr(r.height)/e.offsetHeight||1);var i=(nr(e)?rr(e):window).visualViewport,s=!dr()&&o,l=(r.left+(s&&i?i.offsetLeft:0))/n,c=(r.top+(s&&i?i.offsetTop:0))/a,u=r.width/n,d=r.height/a;return{width:u,height:d,top:c,right:l+u,bottom:c+d,left:l,x:l,y:c}}function mr(e){var t=rr(e);return{scrollLeft:t.pageXOffset,scrollTop:t.pageYOffset}}function fr(e){return e?(e.nodeName||"").toLowerCase():null}function vr(e){return((nr(e)?e.ownerDocument:e.document)||window.document).documentElement}function hr(e){return pr(vr(e)).left+mr(e).scrollLeft}function gr(e){return rr(e).getComputedStyle(e)}function yr(e){var t=gr(e),o=t.overflow,r=t.overflowX,n=t.overflowY;return/auto|scroll|overlay|hidden/.test(o+n+r)}function br(e,t,o){void 0===o&&(o=!1);var r,n,a=ar(t),i=ar(t)&&function(e){var t=e.getBoundingClientRect(),o=cr(t.width)/e.offsetWidth||1,r=cr(t.height)/e.offsetHeight||1;return 1!==o||1!==r}(t),s=vr(t),l=pr(e,i,o),c={scrollLeft:0,scrollTop:0},u={x:0,y:0};return(a||!a&&!o)&&(("body"!==fr(t)||yr(s))&&(c=(r=t)!==rr(r)&&ar(r)?{scrollLeft:(n=r).scrollLeft,scrollTop:n.scrollTop}:mr(r)),ar(t)?((u=pr(t,!0)).x+=t.clientLeft,u.y+=t.clientTop):s&&(u.x=hr(s))),{x:l.left+c.scrollLeft-u.x,y:l.top+c.scrollTop-u.y,width:l.width,height:l.height}}function xr(e){var t=pr(e),o=e.offsetWidth,r=e.offsetHeight;return Math.abs(t.width-o)<=1&&(o=t.width),Math.abs(t.height-r)<=1&&(r=t.height),{x:e.offsetLeft,y:e.offsetTop,width:o,height:r}}function Ar(e){return"html"===fr(e)?e:e.assignedSlot||e.parentNode||(ir(e)?e.host:null)||vr(e)}function wr(e){return["html","body","#document"].indexOf(fr(e))>=0?e.ownerDocument.body:ar(e)&&yr(e)?e:wr(Ar(e))}function Sr(e,t){var o;void 0===t&&(t=[]);var r=wr(e),n=r===(null==(o=e.ownerDocument)?void 0:o.body),a=rr(r),i=n?[a].concat(a.visualViewport||[],yr(r)?r:[]):r,s=t.concat(i);return n?s:s.concat(Sr(Ar(i)))}function Cr(e){return["table","td","th"].indexOf(fr(e))>=0}function _r(e){return ar(e)&&"fixed"!==gr(e).position?e.offsetParent:null}function kr(e){for(var t=rr(e),o=_r(e);o&&Cr(o)&&"static"===gr(o).position;)o=_r(o);return o&&("html"===fr(o)||"body"===fr(o)&&"static"===gr(o).position)?t:o||function(e){var t=/firefox/i.test(ur());if(/Trident/i.test(ur())&&ar(e)&&"fixed"===gr(e).position)return null;var o=Ar(e);for(ir(o)&&(o=o.host);ar(o)&&["html","body"].indexOf(fr(o))<0;){var r=gr(o);if("none"!==r.transform||"none"!==r.perspective||"paint"===r.contain||-1!==["transform","perspective"].indexOf(r.willChange)||t&&"filter"===r.willChange||t&&r.filter&&"none"!==r.filter)return o;o=o.parentNode}return null}(e)||t}var Rr="top",Pr="bottom",Mr="right",Ir="left",jr="auto",$r=[Rr,Pr,Mr,Ir],Tr="start",Lr="end",Or="viewport",Er="popper",Br=$r.reduce((function(e,t){return e.concat([t+"-"+Tr,t+"-"+Lr])}),[]),Nr=[].concat($r,[jr]).reduce((function(e,t){return e.concat([t,t+"-"+Tr,t+"-"+Lr])}),[]),zr=["beforeRead","read","afterRead","beforeMain","main","afterMain","beforeWrite","write","afterWrite"];function Dr(e){var t=new Map,o=new Set,r=[];function n(e){o.add(e.name),[].concat(e.requires||[],e.requiresIfExists||[]).forEach((function(e){if(!o.has(e)){var r=t.get(e);r&&n(r)}})),r.push(e)}return e.forEach((function(e){t.set(e.name,e)})),e.forEach((function(e){o.has(e.name)||n(e)})),r}var Fr={placement:"bottom",modifiers:[],strategy:"absolute"};function Wr(){for(var e=arguments.length,t=new Array(e),o=0;o<e;o++)t[o]=arguments[o];return!t.some((function(e){return!(e&&"function"==typeof e.getBoundingClientRect)}))}function Vr(e){void 0===e&&(e={});var t=e,o=t.defaultModifiers,r=void 0===o?[]:o,n=t.defaultOptions,a=void 0===n?Fr:n;return function(e,t,o){void 0===o&&(o=a);var n,i,s={placement:"bottom",orderedModifiers:[],options:Object.assign({},Fr,a),modifiersData:{},elements:{reference:e,popper:t},attributes:{},styles:{}},l=[],c=!1,u={state:s,setOptions:function(o){var n="function"==typeof o?o(s.options):o;d(),s.options=Object.assign({},a,s.options,n),s.scrollParents={reference:nr(e)?Sr(e):e.contextElement?Sr(e.contextElement):[],popper:Sr(t)};var i,c,p=function(e){var t=Dr(e);return zr.reduce((function(e,o){return e.concat(t.filter((function(e){return e.phase===o})))}),[])}((i=[].concat(r,s.options.modifiers),c=i.reduce((function(e,t){var o=e[t.name];return e[t.name]=o?Object.assign({},o,t,{options:Object.assign({},o.options,t.options),data:Object.assign({},o.data,t.data)}):t,e}),{}),Object.keys(c).map((function(e){return c[e]}))));return s.orderedModifiers=p.filter((function(e){return e.enabled})),s.orderedModifiers.forEach((function(e){var t=e.name,o=e.options,r=void 0===o?{}:o,n=e.effect;if("function"==typeof n){var a=n({state:s,name:t,instance:u,options:r});l.push(a||function(){})}})),u.update()},forceUpdate:function(){if(!c){var e=s.elements,t=e.reference,o=e.popper;if(Wr(t,o)){s.rects={reference:br(t,kr(o),"fixed"===s.options.strategy),popper:xr(o)},s.reset=!1,s.placement=s.options.placement,s.orderedModifiers.forEach((function(e){return s.modifiersData[e.name]=Object.assign({},e.data)}));for(var r=0;r<s.orderedModifiers.length;r++)if(!0!==s.reset){var n=s.orderedModifiers[r],a=n.fn,i=n.options,l=void 0===i?{}:i,d=n.name;"function"==typeof a&&(s=a({state:s,options:l,name:d,instance:u})||s)}else s.reset=!1,r=-1}}},update:(n=function(){return new Promise((function(e){u.forceUpdate(),e(s)}))},function(){return i||(i=new Promise((function(e){Promise.resolve().then((function(){i=void 0,e(n())}))}))),i}),destroy:function(){d(),c=!0}};if(!Wr(e,t))return u;function d(){l.forEach((function(e){return e()})),l=[]}return u.setOptions(o).then((function(e){!c&&o.onFirstUpdate&&o.onFirstUpdate(e)})),u}}var Hr={passive:!0};function Ur(e){return e.split("-")[0]}function qr(e){return e.split("-")[1]}function Gr(e){return["top","bottom"].indexOf(e)>=0?"x":"y"}function Xr(e){var t,o=e.reference,r=e.element,n=e.placement,a=n?Ur(n):null,i=n?qr(n):null,s=o.x+o.width/2-r.width/2,l=o.y+o.height/2-r.height/2;switch(a){case Rr:t={x:s,y:o.y-r.height};break;case Pr:t={x:s,y:o.y+o.height};break;case Mr:t={x:o.x+o.width,y:l};break;case Ir:t={x:o.x-r.width,y:l};break;default:t={x:o.x,y:o.y}}var c=a?Gr(a):null;if(null!=c){var u="y"===c?"height":"width";switch(i){case Tr:t[c]=t[c]-(o[u]/2-r[u]/2);break;case Lr:t[c]=t[c]+(o[u]/2-r[u]/2)}}return t}var Yr={top:"auto",right:"auto",bottom:"auto",left:"auto"};function Kr(e){var t,o=e.popper,r=e.popperRect,n=e.placement,a=e.variation,i=e.offsets,s=e.position,l=e.gpuAcceleration,c=e.adaptive,u=e.roundOffsets,d=e.isFixed,p=i.x,m=void 0===p?0:p,f=i.y,v=void 0===f?0:f,h="function"==typeof u?u({x:m,y:v}):{x:m,y:v};m=h.x,v=h.y;var g=i.hasOwnProperty("x"),y=i.hasOwnProperty("y"),b=Ir,x=Rr,A=window;if(c){var w=kr(o),S="clientHeight",C="clientWidth";w===rr(o)&&"static"!==gr(w=vr(o)).position&&"absolute"===s&&(S="scrollHeight",C="scrollWidth"),(n===Rr||(n===Ir||n===Mr)&&a===Lr)&&(x=Pr,v-=(d&&w===A&&A.visualViewport?A.visualViewport.height:w[S])-r.height,v*=l?1:-1),n!==Ir&&(n!==Rr&&n!==Pr||a!==Lr)||(b=Mr,m-=(d&&w===A&&A.visualViewport?A.visualViewport.width:w[C])-r.width,m*=l?1:-1)}var _,k=Object.assign({position:s},c&&Yr),R=!0===u?function(e,t){var o=e.x,r=e.y,n=t.devicePixelRatio||1;return{x:cr(o*n)/n||0,y:cr(r*n)/n||0}}({x:m,y:v},rr(o)):{x:m,y:v};return m=R.x,v=R.y,l?Object.assign({},k,((_={})[x]=y?"0":"",_[b]=g?"0":"",_.transform=(A.devicePixelRatio||1)<=1?"translate("+m+"px, "+v+"px)":"translate3d("+m+"px, "+v+"px, 0)",_)):Object.assign({},k,((t={})[x]=y?v+"px":"",t[b]=g?m+"px":"",t.transform="",t))}const Zr={name:"applyStyles",enabled:!0,phase:"write",fn:function(e){var t=e.state;Object.keys(t.elements).forEach((function(e){var o=t.styles[e]||{},r=t.attributes[e]||{},n=t.elements[e];ar(n)&&fr(n)&&(Object.assign(n.style,o),Object.keys(r).forEach((function(e){var t=r[e];!1===t?n.removeAttribute(e):n.setAttribute(e,!0===t?"":t)})))}))},effect:function(e){var t=e.state,o={popper:{position:t.options.strategy,left:"0",top:"0",margin:"0"},arrow:{position:"absolute"},reference:{}};return Object.assign(t.elements.popper.style,o.popper),t.styles=o,t.elements.arrow&&Object.assign(t.elements.arrow.style,o.arrow),function(){Object.keys(t.elements).forEach((function(e){var r=t.elements[e],n=t.attributes[e]||{},a=Object.keys(t.styles.hasOwnProperty(e)?t.styles[e]:o[e]).reduce((function(e,t){return e[t]="",e}),{});ar(r)&&fr(r)&&(Object.assign(r.style,a),Object.keys(n).forEach((function(e){r.removeAttribute(e)})))}))}},requires:["computeStyles"]};var Jr={left:"right",right:"left",bottom:"top",top:"bottom"};function Qr(e){return e.replace(/left|right|bottom|top/g,(function(e){return Jr[e]}))}var en={start:"end",end:"start"};function tn(e){return e.replace(/start|end/g,(function(e){return en[e]}))}function on(e,t){var o=t.getRootNode&&t.getRootNode();if(e.contains(t))return!0;if(o&&ir(o)){var r=t;do{if(r&&e.isSameNode(r))return!0;r=r.parentNode||r.host}while(r)}return!1}function rn(e){return Object.assign({},e,{left:e.x,top:e.y,right:e.x+e.width,bottom:e.y+e.height})}function nn(e,t,o){return t===Or?rn(function(e,t){var o=rr(e),r=vr(e),n=o.visualViewport,a=r.clientWidth,i=r.clientHeight,s=0,l=0;if(n){a=n.width,i=n.height;var c=dr();(c||!c&&"fixed"===t)&&(s=n.offsetLeft,l=n.offsetTop)}return{width:a,height:i,x:s+hr(e),y:l}}(e,o)):nr(t)?function(e,t){var o=pr(e,!1,"fixed"===t);return o.top=o.top+e.clientTop,o.left=o.left+e.clientLeft,o.bottom=o.top+e.clientHeight,o.right=o.left+e.clientWidth,o.width=e.clientWidth,o.height=e.clientHeight,o.x=o.left,o.y=o.top,o}(t,o):rn(function(e){var t,o=vr(e),r=mr(e),n=null==(t=e.ownerDocument)?void 0:t.body,a=sr(o.scrollWidth,o.clientWidth,n?n.scrollWidth:0,n?n.clientWidth:0),i=sr(o.scrollHeight,o.clientHeight,n?n.scrollHeight:0,n?n.clientHeight:0),s=-r.scrollLeft+hr(e),l=-r.scrollTop;return"rtl"===gr(n||o).direction&&(s+=sr(o.clientWidth,n?n.clientWidth:0)-a),{width:a,height:i,x:s,y:l}}(vr(e)))}function an(e){return Object.assign({},{top:0,right:0,bottom:0,left:0},e)}function sn(e,t){return t.reduce((function(t,o){return t[o]=e,t}),{})}function ln(e,t){void 0===t&&(t={});var o=t,r=o.placement,n=void 0===r?e.placement:r,a=o.strategy,i=void 0===a?e.strategy:a,s=o.boundary,l=void 0===s?"clippingParents":s,c=o.rootBoundary,u=void 0===c?Or:c,d=o.elementContext,p=void 0===d?Er:d,m=o.altBoundary,f=void 0!==m&&m,v=o.padding,h=void 0===v?0:v,g=an("number"!=typeof h?h:sn(h,$r)),y=p===Er?"reference":Er,b=e.rects.popper,x=e.elements[f?y:p],A=function(e,t,o,r){var n="clippingParents"===t?function(e){var t=Sr(Ar(e)),o=["absolute","fixed"].indexOf(gr(e).position)>=0&&ar(e)?kr(e):e;return nr(o)?t.filter((function(e){return nr(e)&&on(e,o)&&"body"!==fr(e)})):[]}(e):[].concat(t),a=[].concat(n,[o]),i=a[0],s=a.reduce((function(t,o){var n=nn(e,o,r);return t.top=sr(n.top,t.top),t.right=lr(n.right,t.right),t.bottom=lr(n.bottom,t.bottom),t.left=sr(n.left,t.left),t}),nn(e,i,r));return s.width=s.right-s.left,s.height=s.bottom-s.top,s.x=s.left,s.y=s.top,s}(nr(x)?x:x.contextElement||vr(e.elements.popper),l,u,i),w=pr(e.elements.reference),S=Xr({reference:w,element:b,strategy:"absolute",placement:n}),C=rn(Object.assign({},b,S)),_=p===Er?C:w,k={top:A.top-_.top+g.top,bottom:_.bottom-A.bottom+g.bottom,left:A.left-_.left+g.left,right:_.right-A.right+g.right},R=e.modifiersData.offset;if(p===Er&&R){var P=R[n];Object.keys(k).forEach((function(e){var t=[Mr,Pr].indexOf(e)>=0?1:-1,o=[Rr,Pr].indexOf(e)>=0?"y":"x";k[e]+=P[o]*t}))}return k}function cn(e,t,o){return sr(e,lr(t,o))}function un(e,t,o){return void 0===o&&(o={x:0,y:0}),{top:e.top-t.height-o.y,right:e.right-t.width+o.x,bottom:e.bottom-t.height+o.y,left:e.left-t.width-o.x}}function dn(e){return[Rr,Mr,Pr,Ir].some((function(t){return e[t]>=0}))}var pn=Vr({defaultModifiers:[{name:"eventListeners",enabled:!0,phase:"write",fn:function(){},effect:function(e){var t=e.state,o=e.instance,r=e.options,n=r.scroll,a=void 0===n||n,i=r.resize,s=void 0===i||i,l=rr(t.elements.popper),c=[].concat(t.scrollParents.reference,t.scrollParents.popper);return a&&c.forEach((function(e){e.addEventListener("scroll",o.update,Hr)})),s&&l.addEventListener("resize",o.update,Hr),function(){a&&c.forEach((function(e){e.removeEventListener("scroll",o.update,Hr)})),s&&l.removeEventListener("resize",o.update,Hr)}},data:{}},{name:"popperOffsets",enabled:!0,phase:"read",fn:function(e){var t=e.state,o=e.name;t.modifiersData[o]=Xr({reference:t.rects.reference,element:t.rects.popper,strategy:"absolute",placement:t.placement})},data:{}},{name:"computeStyles",enabled:!0,phase:"beforeWrite",fn:function(e){var t=e.state,o=e.options,r=o.gpuAcceleration,n=void 0===r||r,a=o.adaptive,i=void 0===a||a,s=o.roundOffsets,l=void 0===s||s,c={placement:Ur(t.placement),variation:qr(t.placement),popper:t.elements.popper,popperRect:t.rects.popper,gpuAcceleration:n,isFixed:"fixed"===t.options.strategy};null!=t.modifiersData.popperOffsets&&(t.styles.popper=Object.assign({},t.styles.popper,Kr(Object.assign({},c,{offsets:t.modifiersData.popperOffsets,position:t.options.strategy,adaptive:i,roundOffsets:l})))),null!=t.modifiersData.arrow&&(t.styles.arrow=Object.assign({},t.styles.arrow,Kr(Object.assign({},c,{offsets:t.modifiersData.arrow,position:"absolute",adaptive:!1,roundOffsets:l})))),t.attributes.popper=Object.assign({},t.attributes.popper,{"data-popper-placement":t.placement})},data:{}},Zr,{name:"offset",enabled:!0,phase:"main",requires:["popperOffsets"],fn:function(e){var t=e.state,o=e.options,r=e.name,n=o.offset,a=void 0===n?[0,0]:n,i=Nr.reduce((function(e,o){return e[o]=function(e,t,o){var r=Ur(e),n=[Ir,Rr].indexOf(r)>=0?-1:1,a="function"==typeof o?o(Object.assign({},t,{placement:e})):o,i=a[0],s=a[1];return i=i||0,s=(s||0)*n,[Ir,Mr].indexOf(r)>=0?{x:s,y:i}:{x:i,y:s}}(o,t.rects,a),e}),{}),s=i[t.placement],l=s.x,c=s.y;null!=t.modifiersData.popperOffsets&&(t.modifiersData.popperOffsets.x+=l,t.modifiersData.popperOffsets.y+=c),t.modifiersData[r]=i}},{name:"flip",enabled:!0,phase:"main",fn:function(e){var t=e.state,o=e.options,r=e.name;if(!t.modifiersData[r]._skip){for(var n=o.mainAxis,a=void 0===n||n,i=o.altAxis,s=void 0===i||i,l=o.fallbackPlacements,c=o.padding,u=o.boundary,d=o.rootBoundary,p=o.altBoundary,m=o.flipVariations,f=void 0===m||m,v=o.allowedAutoPlacements,h=t.options.placement,g=Ur(h),y=l||(g!==h&&f?function(e){if(Ur(e)===jr)return[];var t=Qr(e);return[tn(e),t,tn(t)]}(h):[Qr(h)]),b=[h].concat(y).reduce((function(e,o){return e.concat(Ur(o)===jr?function(e,t){void 0===t&&(t={});var o=t,r=o.placement,n=o.boundary,a=o.rootBoundary,i=o.padding,s=o.flipVariations,l=o.allowedAutoPlacements,c=void 0===l?Nr:l,u=qr(r),d=u?s?Br:Br.filter((function(e){return qr(e)===u})):$r,p=d.filter((function(e){return c.indexOf(e)>=0}));0===p.length&&(p=d);var m=p.reduce((function(t,o){return t[o]=ln(e,{placement:o,boundary:n,rootBoundary:a,padding:i})[Ur(o)],t}),{});return Object.keys(m).sort((function(e,t){return m[e]-m[t]}))}(t,{placement:o,boundary:u,rootBoundary:d,padding:c,flipVariations:f,allowedAutoPlacements:v}):o)}),[]),x=t.rects.reference,A=t.rects.popper,w=new Map,S=!0,C=b[0],_=0;_<b.length;_++){var k=b[_],R=Ur(k),P=qr(k)===Tr,M=[Rr,Pr].indexOf(R)>=0,I=M?"width":"height",j=ln(t,{placement:k,boundary:u,rootBoundary:d,altBoundary:p,padding:c}),$=M?P?Mr:Ir:P?Pr:Rr;x[I]>A[I]&&($=Qr($));var T=Qr($),L=[];if(a&&L.push(j[R]<=0),s&&L.push(j[$]<=0,j[T]<=0),L.every((function(e){return e}))){C=k,S=!1;break}w.set(k,L)}if(S)for(var O=function(e){var t=b.find((function(t){var o=w.get(t);if(o)return o.slice(0,e).every((function(e){return e}))}));if(t)return C=t,"break"},E=f?3:1;E>0&&"break"!==O(E);E--);t.placement!==C&&(t.modifiersData[r]._skip=!0,t.placement=C,t.reset=!0)}},requiresIfExists:["offset"],data:{_skip:!1}},{name:"preventOverflow",enabled:!0,phase:"main",fn:function(e){var t=e.state,o=e.options,r=e.name,n=o.mainAxis,a=void 0===n||n,i=o.altAxis,s=void 0!==i&&i,l=o.boundary,c=o.rootBoundary,u=o.altBoundary,d=o.padding,p=o.tether,m=void 0===p||p,f=o.tetherOffset,v=void 0===f?0:f,h=ln(t,{boundary:l,rootBoundary:c,padding:d,altBoundary:u}),g=Ur(t.placement),y=qr(t.placement),b=!y,x=Gr(g),A="x"===x?"y":"x",w=t.modifiersData.popperOffsets,S=t.rects.reference,C=t.rects.popper,_="function"==typeof v?v(Object.assign({},t.rects,{placement:t.placement})):v,k="number"==typeof _?{mainAxis:_,altAxis:_}:Object.assign({mainAxis:0,altAxis:0},_),R=t.modifiersData.offset?t.modifiersData.offset[t.placement]:null,P={x:0,y:0};if(w){if(a){var M,I="y"===x?Rr:Ir,j="y"===x?Pr:Mr,$="y"===x?"height":"width",T=w[x],L=T+h[I],O=T-h[j],E=m?-C[$]/2:0,B=y===Tr?S[$]:C[$],N=y===Tr?-C[$]:-S[$],z=t.elements.arrow,D=m&&z?xr(z):{width:0,height:0},F=t.modifiersData["arrow#persistent"]?t.modifiersData["arrow#persistent"].padding:{top:0,right:0,bottom:0,left:0},W=F[I],V=F[j],H=cn(0,S[$],D[$]),U=b?S[$]/2-E-H-W-k.mainAxis:B-H-W-k.mainAxis,q=b?-S[$]/2+E+H+V+k.mainAxis:N+H+V+k.mainAxis,G=t.elements.arrow&&kr(t.elements.arrow),X=G?"y"===x?G.clientTop||0:G.clientLeft||0:0,Y=null!=(M=null==R?void 0:R[x])?M:0,K=T+q-Y,Z=cn(m?lr(L,T+U-Y-X):L,T,m?sr(O,K):O);w[x]=Z,P[x]=Z-T}if(s){var J,Q="x"===x?Rr:Ir,ee="x"===x?Pr:Mr,te=w[A],oe="y"===A?"height":"width",re=te+h[Q],ne=te-h[ee],ae=-1!==[Rr,Ir].indexOf(g),ie=null!=(J=null==R?void 0:R[A])?J:0,se=ae?re:te-S[oe]-C[oe]-ie+k.altAxis,le=ae?te+S[oe]+C[oe]-ie-k.altAxis:ne,ce=m&&ae?function(e,t,o){var r=cn(e,t,o);return r>o?o:r}(se,te,le):cn(m?se:re,te,m?le:ne);w[A]=ce,P[A]=ce-te}t.modifiersData[r]=P}},requiresIfExists:["offset"]},{name:"arrow",enabled:!0,phase:"main",fn:function(e){var t,o=e.state,r=e.name,n=e.options,a=o.elements.arrow,i=o.modifiersData.popperOffsets,s=Ur(o.placement),l=Gr(s),c=[Ir,Mr].indexOf(s)>=0?"height":"width";if(a&&i){var u=function(e,t){return an("number"!=typeof(e="function"==typeof e?e(Object.assign({},t.rects,{placement:t.placement})):e)?e:sn(e,$r))}(n.padding,o),d=xr(a),p="y"===l?Rr:Ir,m="y"===l?Pr:Mr,f=o.rects.reference[c]+o.rects.reference[l]-i[l]-o.rects.popper[c],v=i[l]-o.rects.reference[l],h=kr(a),g=h?"y"===l?h.clientHeight||0:h.clientWidth||0:0,y=f/2-v/2,b=u[p],x=g-d[c]-u[m],A=g/2-d[c]/2+y,w=cn(b,A,x),S=l;o.modifiersData[r]=((t={})[S]=w,t.centerOffset=w-A,t)}},effect:function(e){var t=e.state,o=e.options.element,r=void 0===o?"[data-popper-arrow]":o;null!=r&&("string"!=typeof r||(r=t.elements.popper.querySelector(r)))&&on(t.elements.popper,r)&&(t.elements.arrow=r)},requires:["popperOffsets"],requiresIfExists:["preventOverflow"]},{name:"hide",enabled:!0,phase:"main",requiresIfExists:["preventOverflow"],fn:function(e){var t=e.state,o=e.name,r=t.rects.reference,n=t.rects.popper,a=t.modifiersData.preventOverflow,i=ln(t,{elementContext:"reference"}),s=ln(t,{altBoundary:!0}),l=un(i,r),c=un(s,n,a),u=dn(l),d=dn(c);t.modifiersData[o]={referenceClippingOffsets:l,popperEscapeOffsets:c,isReferenceHidden:u,hasPopperEscaped:d},t.attributes.popper=Object.assign({},t.attributes.popper,{"data-popper-reference-hidden":u,"data-popper-escaped":d})}}]}),mn=o("./node_modules/.pnpm/@mui+utils@5.16.4_@types+react@18.3.3_react@18.3.1/node_modules/@mui/utils/esm/useSlotProps/useSlotProps.js"),fn=o("./node_modules/.pnpm/@mui+material@5.16.4_@emotion+react@11.13.0_@types+react@18.3.3_react@18.3.1__@emotion+styled_brxipnv4yvqheosgxcawdxdyay/node_modules/@mui/material/Portal/Portal.js");function vn(e){return(0,At.Ay)("MuiPopper",e)}(0,xt.A)("MuiPopper",["root"]);const hn=["anchorEl","children","direction","disablePortal","modifiers","open","placement","popperOptions","popperRef","slotProps","slots","TransitionProps","ownerState"],gn=["anchorEl","children","container","direction","disablePortal","keepMounted","modifiers","open","placement","popperOptions","popperRef","style","transition","slotProps","slots"];function yn(e){return"function"==typeof e?e():e}const bn={},xn=ge.forwardRef((function(e,t){var o;const{anchorEl:r,children:n,direction:a,disablePortal:i,modifiers:s,open:l,placement:c,popperOptions:u,popperRef:d,slotProps:p={},slots:m={},TransitionProps:f}=e,v=(0,R.A)(e,hn),h=ge.useRef(null),g=(0,Tt.A)(h,t),y=ge.useRef(null),b=(0,Tt.A)(y,d),x=ge.useRef(b);(0,tr.A)((()=>{x.current=b}),[b]),ge.useImperativeHandle(d,(()=>y.current),[]);const A=function(e,t){if("ltr"===t)return e;switch(e){case"bottom-end":return"bottom-start";case"bottom-start":return"bottom-end";case"top-end":return"top-start";case"top-start":return"top-end";default:return e}}(c,a),[w,S]=ge.useState(A),[C,_]=ge.useState(yn(r));ge.useEffect((()=>{y.current&&y.current.forceUpdate()})),ge.useEffect((()=>{r&&_(yn(r))}),[r]),(0,tr.A)((()=>{if(!C||!l)return;let e=[{name:"preventOverflow",options:{altBoundary:i}},{name:"flip",options:{altBoundary:i}},{name:"onUpdate",enabled:!0,phase:"afterWrite",fn:({state:e})=>{S(e.placement)}}];null!=s&&(e=e.concat(s)),u&&null!=u.modifiers&&(e=e.concat(u.modifiers));const t=pn(C,h.current,(0,k.A)({placement:A},u,{modifiers:e}));return x.current(t),()=>{t.destroy(),x.current(null)}}),[C,i,s,l,u,A]);const P={placement:w};null!==f&&(P.TransitionProps=f);const M=(e=>{const{classes:t}=e;return(0,ft.A)({root:["root"]},vn,t)})(e),I=null!=(o=m.root)?o:"div",j=(0,mn.A)({elementType:I,externalSlotProps:p.root,externalForwardedProps:v,additionalProps:{role:"tooltip",ref:g},ownerState:e,className:M.root});return(0,we.jsx)(I,(0,k.A)({},j,{children:"function"==typeof n?n(P):n}))})),An=ge.forwardRef((function(e,t){const{anchorEl:o,children:r,container:n,direction:a="ltr",disablePortal:i=!1,keepMounted:s=!1,modifiers:l,open:c,placement:u="bottom",popperOptions:d=bn,popperRef:p,style:m,transition:f=!1,slotProps:v={},slots:h={}}=e,g=(0,R.A)(e,gn),[y,b]=ge.useState(!0);if(!s&&!c&&(!f||y))return null;let x;if(n)x=n;else if(o){const e=yn(o);x=e&&void 0!==e.nodeType?(0,or.A)(e).body:(0,or.A)(null).body}const A=c||!s||f&&!y?void 0:"none",w=f?{in:c,onEnter:()=>{b(!1)},onExited:()=>{b(!0)}}:void 0;return(0,we.jsx)(fn.A,{disablePortal:i,container:x,children:(0,we.jsx)(xn,(0,k.A)({anchorEl:o,direction:a,disablePortal:i,modifiers:l,ref:t,open:f?!y:c,placement:u,popperOptions:d,popperRef:p,slotProps:v,slots:h},g,{style:(0,k.A)({position:"fixed",top:0,left:0,display:A},m),TransitionProps:w,children:r}))})})),wn=An,Sn=["anchorEl","component","components","componentsProps","container","disablePortal","keepMounted","modifiers","open","placement","popperOptions","popperRef","transition","slots","slotProps"],Cn=(0,de.Ay)(wn,{name:"MuiPopper",slot:"Root",overridesResolver:(e,t)=>t.root})({}),_n=ge.forwardRef((function(e,t){var o;const r=(0,er.A)(),n=(0,vt.b)({props:e,name:"MuiPopper"}),{anchorEl:a,component:i,components:s,componentsProps:l,container:c,disablePortal:u,keepMounted:d,modifiers:p,open:m,placement:f,popperOptions:v,popperRef:h,transition:g,slots:y,slotProps:b}=n,x=(0,R.A)(n,Sn),A=null!=(o=null==y?void 0:y.root)?o:null==s?void 0:s.Root,w=(0,k.A)({anchorEl:a,container:c,disablePortal:u,keepMounted:d,modifiers:p,open:m,placement:f,popperOptions:v,popperRef:h,transition:g},x);return(0,we.jsx)(Cn,(0,k.A)({as:i,direction:null==r?void 0:r.direction,slots:{root:A},slotProps:null!=b?b:l},w,{ref:t}))}));function kn(e){return(0,At.Ay)("MuiListSubheader",e)}const Rn=(0,xt.A)("MuiListSubheader",["root","colorPrimary","colorInherit","gutters","inset","sticky"]),Pn=["className","color","component","disableGutters","disableSticky","inset"],Mn=(0,de.Ay)("li",{name:"MuiListSubheader",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:o}=e;return[t.root,"default"!==o.color&&t[`color${(0,uo.A)(o.color)}`],!o.disableGutters&&t.gutters,o.inset&&t.inset,!o.disableSticky&&t.sticky]}})((({theme:e,ownerState:t})=>(0,k.A)({boxSizing:"border-box",lineHeight:"48px",listStyle:"none",color:(e.vars||e).palette.text.secondary,fontFamily:e.typography.fontFamily,fontWeight:e.typography.fontWeightMedium,fontSize:e.typography.pxToRem(14)},"primary"===t.color&&{color:(e.vars||e).palette.primary.main},"inherit"===t.color&&{color:"inherit"},!t.disableGutters&&{paddingLeft:16,paddingRight:16},t.inset&&{paddingLeft:72},!t.disableSticky&&{position:"sticky",top:0,zIndex:1,backgroundColor:(e.vars||e).palette.background.paper}))),In=ge.forwardRef((function(e,t){const o=(0,vt.b)({props:e,name:"MuiListSubheader"}),{className:r,color:n="default",component:a="li",disableGutters:i=!1,disableSticky:s=!1,inset:l=!1}=o,c=(0,R.A)(o,Pn),u=(0,k.A)({},o,{color:n,component:a,disableGutters:i,disableSticky:s,inset:l}),d=(e=>{const{classes:t,color:o,disableGutters:r,inset:n,disableSticky:a}=e,i={root:["root","default"!==o&&`color${(0,uo.A)(o)}`,!r&&"gutters",n&&"inset",!a&&"sticky"]};return(0,ft.A)(i,kn,t)})(u);return(0,we.jsx)(Mn,(0,k.A)({as:a,className:(0,mt.A)(d.root,r),ref:t,ownerState:u},c))}));In.muiSkipListHighlight=!0;const jn=In,$n=(0,vo.A)((0,we.jsx)("path",{d:"M12 2C6.47 2 2 6.47 2 12s4.47 10 10 10 10-4.47 10-10S17.53 2 12 2zm5 13.59L15.59 17 12 13.41 8.41 17 7 15.59 10.59 12 7 8.41 8.41 7 12 10.59 15.59 7 17 8.41 13.41 12 17 15.59z"}),"Cancel");function Tn(e){return(0,At.Ay)("MuiChip",e)}const Ln=(0,xt.A)("MuiChip",["root","sizeSmall","sizeMedium","colorError","colorInfo","colorPrimary","colorSecondary","colorSuccess","colorWarning","disabled","clickable","clickableColorPrimary","clickableColorSecondary","deletable","deletableColorPrimary","deletableColorSecondary","outlined","filled","outlinedPrimary","outlinedSecondary","filledPrimary","filledSecondary","avatar","avatarSmall","avatarMedium","avatarColorPrimary","avatarColorSecondary","icon","iconSmall","iconMedium","iconColorPrimary","iconColorSecondary","label","labelSmall","labelMedium","deleteIcon","deleteIconSmall","deleteIconMedium","deleteIconColorPrimary","deleteIconColorSecondary","deleteIconOutlinedColorPrimary","deleteIconOutlinedColorSecondary","deleteIconFilledColorPrimary","deleteIconFilledColorSecondary","focusVisible"]),On=["avatar","className","clickable","color","component","deleteIcon","disabled","icon","label","onClick","onDelete","onKeyDown","onKeyUp","size","variant","tabIndex","skipFocusWhenDisabled"],En=(0,de.Ay)("div",{name:"MuiChip",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:o}=e,{color:r,iconColor:n,clickable:a,onDelete:i,size:s,variant:l}=o;return[{[`& .${Ln.avatar}`]:t.avatar},{[`& .${Ln.avatar}`]:t[`avatar${(0,uo.A)(s)}`]},{[`& .${Ln.avatar}`]:t[`avatarColor${(0,uo.A)(r)}`]},{[`& .${Ln.icon}`]:t.icon},{[`& .${Ln.icon}`]:t[`icon${(0,uo.A)(s)}`]},{[`& .${Ln.icon}`]:t[`iconColor${(0,uo.A)(n)}`]},{[`& .${Ln.deleteIcon}`]:t.deleteIcon},{[`& .${Ln.deleteIcon}`]:t[`deleteIcon${(0,uo.A)(s)}`]},{[`& .${Ln.deleteIcon}`]:t[`deleteIconColor${(0,uo.A)(r)}`]},{[`& .${Ln.deleteIcon}`]:t[`deleteIcon${(0,uo.A)(l)}Color${(0,uo.A)(r)}`]},t.root,t[`size${(0,uo.A)(s)}`],t[`color${(0,uo.A)(r)}`],a&&t.clickable,a&&"default"!==r&&t[`clickableColor${(0,uo.A)(r)})`],i&&t.deletable,i&&"default"!==r&&t[`deletableColor${(0,uo.A)(r)}`],t[l],t[`${l}${(0,uo.A)(r)}`]]}})((({theme:e,ownerState:t})=>{const o="light"===e.palette.mode?e.palette.grey[700]:e.palette.grey[300];return(0,k.A)({maxWidth:"100%",fontFamily:e.typography.fontFamily,fontSize:e.typography.pxToRem(13),display:"inline-flex",alignItems:"center",justifyContent:"center",height:32,color:(e.vars||e).palette.text.primary,backgroundColor:(e.vars||e).palette.action.selected,borderRadius:16,whiteSpace:"nowrap",transition:e.transitions.create(["background-color","box-shadow"]),cursor:"unset",outline:0,textDecoration:"none",border:0,padding:0,verticalAlign:"middle",boxSizing:"border-box",[`&.${Ln.disabled}`]:{opacity:(e.vars||e).palette.action.disabledOpacity,pointerEvents:"none"},[`& .${Ln.avatar}`]:{marginLeft:5,marginRight:-6,width:24,height:24,color:e.vars?e.vars.palette.Chip.defaultAvatarColor:o,fontSize:e.typography.pxToRem(12)},[`& .${Ln.avatarColorPrimary}`]:{color:(e.vars||e).palette.primary.contrastText,backgroundColor:(e.vars||e).palette.primary.dark},[`& .${Ln.avatarColorSecondary}`]:{color:(e.vars||e).palette.secondary.contrastText,backgroundColor:(e.vars||e).palette.secondary.dark},[`& .${Ln.avatarSmall}`]:{marginLeft:4,marginRight:-4,width:18,height:18,fontSize:e.typography.pxToRem(10)},[`& .${Ln.icon}`]:(0,k.A)({marginLeft:5,marginRight:-6},"small"===t.size&&{fontSize:18,marginLeft:4,marginRight:-4},t.iconColor===t.color&&(0,k.A)({color:e.vars?e.vars.palette.Chip.defaultIconColor:o},"default"!==t.color&&{color:"inherit"})),[`& .${Ln.deleteIcon}`]:(0,k.A)({WebkitTapHighlightColor:"transparent",color:e.vars?`rgba(${e.vars.palette.text.primaryChannel} / 0.26)`:(0,De.X4)(e.palette.text.primary,.26),fontSize:22,cursor:"pointer",margin:"0 5px 0 -6px","&:hover":{color:e.vars?`rgba(${e.vars.palette.text.primaryChannel} / 0.4)`:(0,De.X4)(e.palette.text.primary,.4)}},"small"===t.size&&{fontSize:16,marginRight:4,marginLeft:-4},"default"!==t.color&&{color:e.vars?`rgba(${e.vars.palette[t.color].contrastTextChannel} / 0.7)`:(0,De.X4)(e.palette[t.color].contrastText,.7),"&:hover, &:active":{color:(e.vars||e).palette[t.color].contrastText}})},"small"===t.size&&{height:24},"default"!==t.color&&{backgroundColor:(e.vars||e).palette[t.color].main,color:(e.vars||e).palette[t.color].contrastText},t.onDelete&&{[`&.${Ln.focusVisible}`]:{backgroundColor:e.vars?`rgba(${e.vars.palette.action.selectedChannel} / calc(${e.vars.palette.action.selectedOpacity} + ${e.vars.palette.action.focusOpacity}))`:(0,De.X4)(e.palette.action.selected,e.palette.action.selectedOpacity+e.palette.action.focusOpacity)}},t.onDelete&&"default"!==t.color&&{[`&.${Ln.focusVisible}`]:{backgroundColor:(e.vars||e).palette[t.color].dark}})}),(({theme:e,ownerState:t})=>(0,k.A)({},t.clickable&&{userSelect:"none",WebkitTapHighlightColor:"transparent",cursor:"pointer","&:hover":{backgroundColor:e.vars?`rgba(${e.vars.palette.action.selectedChannel} / calc(${e.vars.palette.action.selectedOpacity} + ${e.vars.palette.action.hoverOpacity}))`:(0,De.X4)(e.palette.action.selected,e.palette.action.selectedOpacity+e.palette.action.hoverOpacity)},[`&.${Ln.focusVisible}`]:{backgroundColor:e.vars?`rgba(${e.vars.palette.action.selectedChannel} / calc(${e.vars.palette.action.selectedOpacity} + ${e.vars.palette.action.focusOpacity}))`:(0,De.X4)(e.palette.action.selected,e.palette.action.selectedOpacity+e.palette.action.focusOpacity)},"&:active":{boxShadow:(e.vars||e).shadows[1]}},t.clickable&&"default"!==t.color&&{[`&:hover, &.${Ln.focusVisible}`]:{backgroundColor:(e.vars||e).palette[t.color].dark}})),(({theme:e,ownerState:t})=>(0,k.A)({},"outlined"===t.variant&&{backgroundColor:"transparent",border:e.vars?`1px solid ${e.vars.palette.Chip.defaultBorder}`:`1px solid ${"light"===e.palette.mode?e.palette.grey[400]:e.palette.grey[700]}`,[`&.${Ln.clickable}:hover`]:{backgroundColor:(e.vars||e).palette.action.hover},[`&.${Ln.focusVisible}`]:{backgroundColor:(e.vars||e).palette.action.focus},[`& .${Ln.avatar}`]:{marginLeft:4},[`& .${Ln.avatarSmall}`]:{marginLeft:2},[`& .${Ln.icon}`]:{marginLeft:4},[`& .${Ln.iconSmall}`]:{marginLeft:2},[`& .${Ln.deleteIcon}`]:{marginRight:5},[`& .${Ln.deleteIconSmall}`]:{marginRight:3}},"outlined"===t.variant&&"default"!==t.color&&{color:(e.vars||e).palette[t.color].main,border:`1px solid ${e.vars?`rgba(${e.vars.palette[t.color].mainChannel} / 0.7)`:(0,De.X4)(e.palette[t.color].main,.7)}`,[`&.${Ln.clickable}:hover`]:{backgroundColor:e.vars?`rgba(${e.vars.palette[t.color].mainChannel} / ${e.vars.palette.action.hoverOpacity})`:(0,De.X4)(e.palette[t.color].main,e.palette.action.hoverOpacity)},[`&.${Ln.focusVisible}`]:{backgroundColor:e.vars?`rgba(${e.vars.palette[t.color].mainChannel} / ${e.vars.palette.action.focusOpacity})`:(0,De.X4)(e.palette[t.color].main,e.palette.action.focusOpacity)},[`& .${Ln.deleteIcon}`]:{color:e.vars?`rgba(${e.vars.palette[t.color].mainChannel} / 0.7)`:(0,De.X4)(e.palette[t.color].main,.7),"&:hover, &:active":{color:(e.vars||e).palette[t.color].main}}}))),Bn=(0,de.Ay)("span",{name:"MuiChip",slot:"Label",overridesResolver:(e,t)=>{const{ownerState:o}=e,{size:r}=o;return[t.label,t[`label${(0,uo.A)(r)}`]]}})((({ownerState:e})=>(0,k.A)({overflow:"hidden",textOverflow:"ellipsis",paddingLeft:12,paddingRight:12,whiteSpace:"nowrap"},"outlined"===e.variant&&{paddingLeft:11,paddingRight:11},"small"===e.size&&{paddingLeft:8,paddingRight:8},"small"===e.size&&"outlined"===e.variant&&{paddingLeft:7,paddingRight:7})));function Nn(e){return"Backspace"===e.key||"Delete"===e.key}const zn=ge.forwardRef((function(e,t){const o=(0,vt.b)({props:e,name:"MuiChip"}),{avatar:r,className:n,clickable:a,color:i="default",component:s,deleteIcon:l,disabled:c=!1,icon:u,label:d,onClick:p,onDelete:m,onKeyDown:f,onKeyUp:v,size:h="medium",variant:g="filled",tabIndex:y,skipFocusWhenDisabled:b=!1}=o,x=(0,R.A)(o,On),A=ge.useRef(null),w=(0,bt.A)(A,t),S=e=>{e.stopPropagation(),m&&m(e)},C=!(!1===a||!p)||a,_=C||m?oo.A:s||"div",P=(0,k.A)({},o,{component:_,disabled:c,size:h,color:i,iconColor:ge.isValidElement(u)&&u.props.color||i,onDelete:!!m,clickable:C,variant:g}),M=(e=>{const{classes:t,disabled:o,size:r,color:n,iconColor:a,onDelete:i,clickable:s,variant:l}=e,c={root:["root",l,o&&"disabled",`size${(0,uo.A)(r)}`,`color${(0,uo.A)(n)}`,s&&"clickable",s&&`clickableColor${(0,uo.A)(n)}`,i&&"deletable",i&&`deletableColor${(0,uo.A)(n)}`,`${l}${(0,uo.A)(n)}`],label:["label",`label${(0,uo.A)(r)}`],avatar:["avatar",`avatar${(0,uo.A)(r)}`,`avatarColor${(0,uo.A)(n)}`],icon:["icon",`icon${(0,uo.A)(r)}`,`iconColor${(0,uo.A)(a)}`],deleteIcon:["deleteIcon",`deleteIcon${(0,uo.A)(r)}`,`deleteIconColor${(0,uo.A)(n)}`,`deleteIcon${(0,uo.A)(l)}Color${(0,uo.A)(n)}`]};return(0,ft.A)(c,Tn,t)})(P),I=_===oo.A?(0,k.A)({component:s||"div",focusVisibleClassName:M.focusVisible},m&&{disableRipple:!0}):{};let j=null;m&&(j=l&&ge.isValidElement(l)?ge.cloneElement(l,{className:(0,mt.A)(l.props.className,M.deleteIcon),onClick:S}):(0,we.jsx)($n,{className:(0,mt.A)(M.deleteIcon),onClick:S}));let $=null;r&&ge.isValidElement(r)&&($=ge.cloneElement(r,{className:(0,mt.A)(M.avatar,r.props.className)}));let T=null;return u&&ge.isValidElement(u)&&(T=ge.cloneElement(u,{className:(0,mt.A)(M.icon,u.props.className)})),(0,we.jsxs)(En,(0,k.A)({as:_,className:(0,mt.A)(M.root,n),disabled:!(!C||!c)||void 0,onClick:p,onKeyDown:e=>{e.currentTarget===e.target&&Nn(e)&&e.preventDefault(),f&&f(e)},onKeyUp:e=>{e.currentTarget===e.target&&(m&&Nn(e)?m(e):"Escape"===e.key&&A.current&&A.current.blur()),v&&v(e)},ref:w,tabIndex:b&&c?-1:y,ownerState:P},I,x,{children:[$||T,(0,we.jsx)(Bn,{className:(0,mt.A)(M.label),ownerState:P,children:d}),j]}))}));function Dn(e){return(0,At.Ay)("MuiInputBase",e)}const Fn=(0,xt.A)("MuiInputBase",["root","formControl","focused","disabled","adornedStart","adornedEnd","error","sizeSmall","multiline","colorSecondary","fullWidth","hiddenLabel","readOnly","input","inputSizeSmall","inputMultiline","inputTypeSearch","inputAdornedStart","inputAdornedEnd","inputHiddenLabel"]);function Wn(e){return(0,At.Ay)("MuiInput",e)}const Vn=(0,k.A)({},Fn,(0,xt.A)("MuiInput",["root","underline","input"]));function Hn(e){return(0,At.Ay)("MuiOutlinedInput",e)}const Un=(0,k.A)({},Fn,(0,xt.A)("MuiOutlinedInput",["root","notchedOutline","input"]));function qn(e){return(0,At.Ay)("MuiFilledInput",e)}const Gn=(0,k.A)({},Fn,(0,xt.A)("MuiFilledInput",["root","underline","input"])),Xn=(0,vo.A)((0,we.jsx)("path",{d:"M7 10l5 5 5-5z"}),"ArrowDropDown");function Yn(e){return(0,At.Ay)("MuiAutocomplete",e)}const Kn=(0,xt.A)("MuiAutocomplete",["root","expanded","fullWidth","focused","focusVisible","tag","tagSizeSmall","tagSizeMedium","hasPopupIcon","hasClearIcon","inputRoot","input","inputFocused","endAdornment","clearIndicator","popupIndicator","popupIndicatorOpen","popper","popperDisablePortal","paper","listbox","loading","noOptions","option","groupLabel","groupUl"]);var Zn,Jn;const Qn=["autoComplete","autoHighlight","autoSelect","blurOnSelect","ChipProps","className","clearIcon","clearOnBlur","clearOnEscape","clearText","closeText","componentsProps","defaultValue","disableClearable","disableCloseOnSelect","disabled","disabledItemsFocusable","disableListWrap","disablePortal","filterOptions","filterSelectedOptions","forcePopupIcon","freeSolo","fullWidth","getLimitTagsText","getOptionDisabled","getOptionKey","getOptionLabel","isOptionEqualToValue","groupBy","handleHomeEndKeys","id","includeInputInList","inputValue","limitTags","ListboxComponent","ListboxProps","loading","loadingText","multiple","noOptionsText","onChange","onClose","onHighlightChange","onInputChange","onOpen","open","openOnFocus","openText","options","PaperComponent","PopperComponent","popupIcon","readOnly","renderGroup","renderInput","renderOption","renderTags","selectOnFocus","size","slotProps","value"],ea=["ref"],ta=["key"],oa=["key"],ra=(0,de.Ay)("div",{name:"MuiAutocomplete",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:o}=e,{fullWidth:r,hasClearIcon:n,hasPopupIcon:a,inputFocused:i,size:s}=o;return[{[`& .${Kn.tag}`]:t.tag},{[`& .${Kn.tag}`]:t[`tagSize${(0,uo.A)(s)}`]},{[`& .${Kn.inputRoot}`]:t.inputRoot},{[`& .${Kn.input}`]:t.input},{[`& .${Kn.input}`]:i&&t.inputFocused},t.root,r&&t.fullWidth,a&&t.hasPopupIcon,n&&t.hasClearIcon]}})({[`&.${Kn.focused} .${Kn.clearIndicator}`]:{visibility:"visible"},"@media (pointer: fine)":{[`&:hover .${Kn.clearIndicator}`]:{visibility:"visible"}},[`& .${Kn.tag}`]:{margin:3,maxWidth:"calc(100% - 6px)"},[`& .${Kn.inputRoot}`]:{[`.${Kn.hasPopupIcon}&, .${Kn.hasClearIcon}&`]:{paddingRight:30},[`.${Kn.hasPopupIcon}.${Kn.hasClearIcon}&`]:{paddingRight:56},[`& .${Kn.input}`]:{width:0,minWidth:30}},[`& .${Vn.root}`]:{paddingBottom:1,"& .MuiInput-input":{padding:"4px 4px 4px 0px"}},[`& .${Vn.root}.${Fn.sizeSmall}`]:{[`& .${Vn.input}`]:{padding:"2px 4px 3px 0"}},[`& .${Un.root}`]:{padding:9,[`.${Kn.hasPopupIcon}&, .${Kn.hasClearIcon}&`]:{paddingRight:39},[`.${Kn.hasPopupIcon}.${Kn.hasClearIcon}&`]:{paddingRight:65},[`& .${Kn.input}`]:{padding:"7.5px 4px 7.5px 5px"},[`& .${Kn.endAdornment}`]:{right:9}},[`& .${Un.root}.${Fn.sizeSmall}`]:{paddingTop:6,paddingBottom:6,paddingLeft:6,[`& .${Kn.input}`]:{padding:"2.5px 4px 2.5px 8px"}},[`& .${Gn.root}`]:{paddingTop:19,paddingLeft:8,[`.${Kn.hasPopupIcon}&, .${Kn.hasClearIcon}&`]:{paddingRight:39},[`.${Kn.hasPopupIcon}.${Kn.hasClearIcon}&`]:{paddingRight:65},[`& .${Gn.input}`]:{padding:"7px 4px"},[`& .${Kn.endAdornment}`]:{right:9}},[`& .${Gn.root}.${Fn.sizeSmall}`]:{paddingBottom:1,[`& .${Gn.input}`]:{padding:"2.5px 4px"}},[`& .${Fn.hiddenLabel}`]:{paddingTop:8},[`& .${Gn.root}.${Fn.hiddenLabel}`]:{paddingTop:0,paddingBottom:0,[`& .${Kn.input}`]:{paddingTop:16,paddingBottom:17}},[`& .${Gn.root}.${Fn.hiddenLabel}.${Fn.sizeSmall}`]:{[`& .${Kn.input}`]:{paddingTop:8,paddingBottom:9}},[`& .${Kn.input}`]:{flexGrow:1,textOverflow:"ellipsis",opacity:0},variants:[{props:{fullWidth:!0},style:{width:"100%"}},{props:{size:"small"},style:{[`& .${Kn.tag}`]:{margin:2,maxWidth:"calc(100% - 4px)"}}},{props:{inputFocused:!0},style:{[`& .${Kn.input}`]:{opacity:1}}},{props:{multiple:!0},style:{[`& .${Kn.inputRoot}`]:{flexWrap:"wrap"}}}]}),na=(0,de.Ay)("div",{name:"MuiAutocomplete",slot:"EndAdornment",overridesResolver:(e,t)=>t.endAdornment})({position:"absolute",right:0,top:"50%",transform:"translate(0, -50%)"}),aa=(0,de.Ay)(fo.A,{name:"MuiAutocomplete",slot:"ClearIndicator",overridesResolver:(e,t)=>t.clearIndicator})({marginRight:-2,padding:4,visibility:"hidden"}),ia=(0,de.Ay)(fo.A,{name:"MuiAutocomplete",slot:"PopupIndicator",overridesResolver:({ownerState:e},t)=>(0,k.A)({},t.popupIndicator,e.popupOpen&&t.popupIndicatorOpen)})({padding:2,marginRight:-2,variants:[{props:{popupOpen:!0},style:{transform:"rotate(180deg)"}}]}),sa=(0,de.Ay)(_n,{name:"MuiAutocomplete",slot:"Popper",overridesResolver:(e,t)=>{const{ownerState:o}=e;return[{[`& .${Kn.option}`]:t.option},t.popper,o.disablePortal&&t.popperDisablePortal]}})((({theme:e})=>({zIndex:(e.vars||e).zIndex.modal,variants:[{props:{disablePortal:!0},style:{position:"absolute"}}]}))),la=(0,de.Ay)(It.A,{name:"MuiAutocomplete",slot:"Paper",overridesResolver:(e,t)=>t.paper})((({theme:e})=>(0,k.A)({},e.typography.body1,{overflow:"auto"}))),ca=(0,de.Ay)("div",{name:"MuiAutocomplete",slot:"Loading",overridesResolver:(e,t)=>t.loading})((({theme:e})=>({color:(e.vars||e).palette.text.secondary,padding:"14px 16px"}))),ua=(0,de.Ay)("div",{name:"MuiAutocomplete",slot:"NoOptions",overridesResolver:(e,t)=>t.noOptions})((({theme:e})=>({color:(e.vars||e).palette.text.secondary,padding:"14px 16px"}))),da=(0,de.Ay)("div",{name:"MuiAutocomplete",slot:"Listbox",overridesResolver:(e,t)=>t.listbox})((({theme:e})=>({listStyle:"none",margin:0,padding:"8px 0",maxHeight:"40vh",overflow:"auto",position:"relative",[`& .${Kn.option}`]:{minHeight:48,display:"flex",overflow:"hidden",justifyContent:"flex-start",alignItems:"center",cursor:"pointer",paddingTop:6,boxSizing:"border-box",outline:"0",WebkitTapHighlightColor:"transparent",paddingBottom:6,paddingLeft:16,paddingRight:16,[e.breakpoints.up("sm")]:{minHeight:"auto"},[`&.${Kn.focused}`]:{backgroundColor:(e.vars||e).palette.action.hover,"@media (hover: none)":{backgroundColor:"transparent"}},'&[aria-disabled="true"]':{opacity:(e.vars||e).palette.action.disabledOpacity,pointerEvents:"none"},[`&.${Kn.focusVisible}`]:{backgroundColor:(e.vars||e).palette.action.focus},'&[aria-selected="true"]':{backgroundColor:e.vars?`rgba(${e.vars.palette.primary.mainChannel} / ${e.vars.palette.action.selectedOpacity})`:(0,De.X4)(e.palette.primary.main,e.palette.action.selectedOpacity),[`&.${Kn.focused}`]:{backgroundColor:e.vars?`rgba(${e.vars.palette.primary.mainChannel} / calc(${e.vars.palette.action.selectedOpacity} + ${e.vars.palette.action.hoverOpacity}))`:(0,De.X4)(e.palette.primary.main,e.palette.action.selectedOpacity+e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:(e.vars||e).palette.action.selected}},[`&.${Kn.focusVisible}`]:{backgroundColor:e.vars?`rgba(${e.vars.palette.primary.mainChannel} / calc(${e.vars.palette.action.selectedOpacity} + ${e.vars.palette.action.focusOpacity}))`:(0,De.X4)(e.palette.primary.main,e.palette.action.selectedOpacity+e.palette.action.focusOpacity)}}}}))),pa=(0,de.Ay)(jn,{name:"MuiAutocomplete",slot:"GroupLabel",overridesResolver:(e,t)=>t.groupLabel})((({theme:e})=>({backgroundColor:(e.vars||e).palette.background.paper,top:-8}))),ma=(0,de.Ay)("ul",{name:"MuiAutocomplete",slot:"GroupUl",overridesResolver:(e,t)=>t.groupUl})({padding:0,[`& .${Kn.option}`]:{paddingLeft:24}}),fa=ge.forwardRef((function(e,t){var o,r,n,a;const i=(0,vt.b)({props:e,name:"MuiAutocomplete"}),{autoComplete:s=!1,autoHighlight:l=!1,autoSelect:c=!1,blurOnSelect:u=!1,ChipProps:d,className:p,clearIcon:m=Zn||(Zn=(0,we.jsx)(xo,{fontSize:"small"})),clearOnBlur:f=!i.freeSolo,clearOnEscape:v=!1,clearText:h="Clear",closeText:g="Close",componentsProps:y={},defaultValue:b=(i.multiple?[]:null),disableClearable:x=!1,disableCloseOnSelect:A=!1,disabled:w=!1,disabledItemsFocusable:S=!1,disableListWrap:C=!1,disablePortal:_=!1,filterSelectedOptions:P=!1,forcePopupIcon:M="auto",freeSolo:I=!1,fullWidth:j=!1,getLimitTagsText:$=e=>`+${e}`,getOptionLabel:T,groupBy:L,handleHomeEndKeys:O=!i.freeSolo,includeInputInList:E=!1,limitTags:B=-1,ListboxComponent:N="ul",ListboxProps:z,loading:D=!1,loadingText:F="Loading…",multiple:W=!1,noOptionsText:V="No options",openOnFocus:H=!1,openText:U="Open",PaperComponent:q=It.A,PopperComponent:G=_n,popupIcon:X=Jn||(Jn=(0,we.jsx)(Xn,{})),readOnly:Y=!1,renderGroup:K,renderInput:Z,renderOption:J,renderTags:Q,selectOnFocus:ee=!i.freeSolo,size:te="medium",slotProps:oe={}}=i,re=(0,R.A)(i,Qn),{getRootProps:ne,getInputProps:ae,getInputLabelProps:ie,getPopupIndicatorProps:se,getClearProps:le,getTagProps:ce,getListboxProps:ue,getOptionProps:de,value:pe,dirty:me,expanded:fe,id:ve,popupOpen:he,focused:ye,focusedTag:be,anchorEl:xe,setAnchorEl:Ae,inputValue:Se,groupedOptions:Ce}=Qo((0,k.A)({},i,{componentName:"Autocomplete"})),_e=!x&&!w&&me&&!Y,ke=(!I||!0===M)&&!1!==M,{onMouseDown:Re}=ae(),{ref:Pe}=null!=z?z:{},Me=ue(),{ref:Ie}=Me,je=(0,R.A)(Me,ea),$e=(0,bt.A)(Ie,Pe),Te=T||(e=>{var t;return null!=(t=e.label)?t:e}),Le=(0,k.A)({},i,{disablePortal:_,expanded:fe,focused:ye,fullWidth:j,getOptionLabel:Te,hasClearIcon:_e,hasPopupIcon:ke,inputFocused:-1===be,popupOpen:he,size:te}),Oe=(e=>{const{classes:t,disablePortal:o,expanded:r,focused:n,fullWidth:a,hasClearIcon:i,hasPopupIcon:s,inputFocused:l,popupOpen:c,size:u}=e,d={root:["root",r&&"expanded",n&&"focused",a&&"fullWidth",i&&"hasClearIcon",s&&"hasPopupIcon"],inputRoot:["inputRoot"],input:["input",l&&"inputFocused"],tag:["tag",`tagSize${(0,uo.A)(u)}`],endAdornment:["endAdornment"],clearIndicator:["clearIndicator"],popupIndicator:["popupIndicator",c&&"popupIndicatorOpen"],popper:["popper",o&&"popperDisablePortal"],paper:["paper"],listbox:["listbox"],loading:["loading"],noOptions:["noOptions"],option:["option"],groupLabel:["groupLabel"],groupUl:["groupUl"]};return(0,ft.A)(d,Yn,t)})(Le);let Ee;if(W&&pe.length>0){const e=e=>(0,k.A)({className:Oe.tag,disabled:w},ce(e));Ee=Q?Q(pe,e,Le):pe.map(((t,o)=>{const r=e({index:o}),{key:n}=r,a=(0,R.A)(r,ta);return(0,we.jsx)(zn,(0,k.A)({label:Te(t),size:te},a,d),n)}))}if(B>-1&&Array.isArray(Ee)){const e=Ee.length-B;!ye&&e>0&&(Ee=Ee.splice(0,B),Ee.push((0,we.jsx)("span",{className:Oe.tag,children:$(e)},Ee.length)))}const Be=K||(e=>(0,we.jsxs)("li",{children:[(0,we.jsx)(pa,{className:Oe.groupLabel,ownerState:Le,component:"div",children:e.group}),(0,we.jsx)(ma,{className:Oe.groupUl,ownerState:Le,children:e.children})]},e.key)),Ne=J||((e,t)=>{const{key:o}=e,r=(0,R.A)(e,oa);return(0,we.jsx)("li",(0,k.A)({},r,{children:Te(t)}),o)}),ze=(e,t)=>{const o=de({option:e,index:t});return Ne((0,k.A)({},o,{className:Oe.option}),e,{selected:o["aria-selected"],index:t,inputValue:Se},Le)},De=null!=(o=oe.clearIndicator)?o:y.clearIndicator,Fe=null!=(r=oe.paper)?r:y.paper,We=null!=(n=oe.popper)?n:y.popper,Ve=null!=(a=oe.popupIndicator)?a:y.popupIndicator,He=e=>(0,we.jsx)(sa,(0,k.A)({as:G,disablePortal:_,style:{width:xe?xe.clientWidth:null},ownerState:Le,role:"presentation",anchorEl:xe,open:he},We,{className:(0,mt.A)(Oe.popper,null==We?void 0:We.className),children:(0,we.jsx)(la,(0,k.A)({ownerState:Le,as:q},Fe,{className:(0,mt.A)(Oe.paper,null==Fe?void 0:Fe.className),children:e}))}));let Ue=null;return Ce.length>0?Ue=He((0,we.jsx)(da,(0,k.A)({as:N,className:Oe.listbox,ownerState:Le},je,z,{ref:$e,children:Ce.map(((e,t)=>L?Be({key:e.key,group:e.group,children:e.options.map(((t,o)=>ze(t,e.index+o)))}):ze(e,t)))}))):D&&0===Ce.length?Ue=He((0,we.jsx)(ca,{className:Oe.loading,ownerState:Le,children:F})):0!==Ce.length||I||D||(Ue=He((0,we.jsx)(ua,{className:Oe.noOptions,ownerState:Le,role:"presentation",onMouseDown:e=>{e.preventDefault()},children:V}))),(0,we.jsxs)(ge.Fragment,{children:[(0,we.jsx)(ra,(0,k.A)({ref:t,className:(0,mt.A)(Oe.root,p),ownerState:Le},ne(re),{children:Z({id:ve,disabled:w,fullWidth:!0,size:"small"===te?"small":void 0,InputLabelProps:ie(),InputProps:(0,k.A)({ref:Ae,className:Oe.inputRoot,startAdornment:Ee,onClick:e=>{e.target===e.currentTarget&&Re(e)}},(_e||ke)&&{endAdornment:(0,we.jsxs)(na,{className:Oe.endAdornment,ownerState:Le,children:[_e?(0,we.jsx)(aa,(0,k.A)({},le(),{"aria-label":h,title:h,ownerState:Le},De,{className:(0,mt.A)(Oe.clearIndicator,null==De?void 0:De.className),children:m})):null,ke?(0,we.jsx)(ia,(0,k.A)({},se(),{disabled:w,"aria-label":he?g:U,title:he?g:U,ownerState:Le},Ve,{className:(0,mt.A)(Oe.popupIndicator,null==Ve?void 0:Ve.className),children:X})):null]})}),inputProps:(0,k.A)({className:Oe.input,disabled:w,readOnly:Y},ae())})})),xe?Ue:null]})})),va=(0,vo.A)((0,we.jsx)("path",{d:"M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z"}),"Person");function ha(e){return(0,At.Ay)("MuiAvatar",e)}const ga=(0,xt.A)("MuiAvatar",["root","colorDefault","circular","rounded","square","img","fallback"]),ya=["alt","children","className","component","slots","slotProps","imgProps","sizes","src","srcSet","variant"],ba=(0,de.Ay)("div",{name:"MuiAvatar",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:o}=e;return[t.root,t[o.variant],o.colorDefault&&t.colorDefault]}})((({theme:e})=>({position:"relative",display:"flex",alignItems:"center",justifyContent:"center",flexShrink:0,width:40,height:40,fontFamily:e.typography.fontFamily,fontSize:e.typography.pxToRem(20),lineHeight:1,borderRadius:"50%",overflow:"hidden",userSelect:"none",variants:[{props:{variant:"rounded"},style:{borderRadius:(e.vars||e).shape.borderRadius}},{props:{variant:"square"},style:{borderRadius:0}},{props:{colorDefault:!0},style:(0,k.A)({color:(e.vars||e).palette.background.default},e.vars?{backgroundColor:e.vars.palette.Avatar.defaultBg}:(0,k.A)({backgroundColor:e.palette.grey[400]},e.applyStyles("dark",{backgroundColor:e.palette.grey[600]})))}]}))),xa=(0,de.Ay)("img",{name:"MuiAvatar",slot:"Img",overridesResolver:(e,t)=>t.img})({width:"100%",height:"100%",textAlign:"center",objectFit:"cover",color:"transparent",textIndent:1e4}),Aa=(0,de.Ay)(va,{name:"MuiAvatar",slot:"Fallback",overridesResolver:(e,t)=>t.fallback})({width:"75%",height:"75%"}),wa=ge.forwardRef((function(e,t){const o=(0,vt.b)({props:e,name:"MuiAvatar"}),{alt:r,children:n,className:a,component:i="div",slots:s={},slotProps:l={},imgProps:c,sizes:u,src:d,srcSet:p,variant:m="circular"}=o,f=(0,R.A)(o,ya);let v=null;const h=function({crossOrigin:e,referrerPolicy:t,src:o,srcSet:r}){const[n,a]=ge.useState(!1);return ge.useEffect((()=>{if(!o&&!r)return;a(!1);let n=!0;const i=new Image;return i.onload=()=>{n&&a("loaded")},i.onerror=()=>{n&&a("error")},i.crossOrigin=e,i.referrerPolicy=t,i.src=o,r&&(i.srcset=r),()=>{n=!1}}),[e,t,o,r]),n}((0,k.A)({},c,{src:d,srcSet:p})),g=d||p,y=g&&"error"!==h,b=(0,k.A)({},o,{colorDefault:!y,component:i,variant:m}),x=(e=>{const{classes:t,variant:o,colorDefault:r}=e,n={root:["root",o,r&&"colorDefault"],img:["img"],fallback:["fallback"]};return(0,ft.A)(n,ha,t)})(b),[A,w]=Dt("img",{className:x.img,elementType:xa,externalForwardedProps:{slots:s,slotProps:{img:(0,k.A)({},c,l.img)}},additionalProps:{alt:r,src:d,srcSet:p,sizes:u},ownerState:b});return v=y?(0,we.jsx)(A,(0,k.A)({},w)):n||0===n?n:g&&r?r[0]:(0,we.jsx)(Aa,{ownerState:b,className:x.fallback}),(0,we.jsx)(ba,(0,k.A)({as:i,ownerState:b,className:(0,mt.A)(x.root,a),ref:t},f,{children:v}))}));function Sa(e){return(0,At.Ay)("MuiAvatarGroup",e)}const Ca=(0,xt.A)("MuiAvatarGroup",["root","avatar"]),_a=["children","className","component","componentsProps","max","renderSurplus","slotProps","spacing","total","variant"],ka={small:-16,medium:null},Ra=(0,de.Ay)("div",{name:"MuiAvatarGroup",slot:"Root",overridesResolver:(e,t)=>(0,k.A)({[`& .${Ca.avatar}`]:t.avatar},t.root)})((({theme:e,ownerState:t})=>{const o=t.spacing&&void 0!==ka[t.spacing]?ka[t.spacing]:-t.spacing;return{[`& .${ga.root}`]:{border:`2px solid ${(e.vars||e).palette.background.default}`,boxSizing:"content-box",marginLeft:null!=o?o:-8,"&:last-child":{marginLeft:0}},display:"flex",flexDirection:"row-reverse"}})),Pa=ge.forwardRef((function(e,t){var o;const r=(0,vt.b)({props:e,name:"MuiAvatarGroup"}),{children:n,className:a,component:i="div",componentsProps:s={},max:l=5,renderSurplus:c,slotProps:u={},spacing:d="medium",total:p,variant:m="circular"}=r,f=(0,R.A)(r,_a);let v=l<2?2:l;const h=(0,k.A)({},r,{max:l,spacing:d,component:i,variant:m}),g=(e=>{const{classes:t}=e;return(0,ft.A)({root:["root"],avatar:["avatar"]},Sa,t)})(h),y=ge.Children.toArray(n).filter((e=>ge.isValidElement(e))),b=p||y.length;b===v&&(v+=1),v=Math.min(b+1,v);const x=Math.min(y.length,v-1),A=Math.max(b-v,b-x,0),w=c?c(A):`+${A}`,S=null!=(o=u.additionalAvatar)?o:s.additionalAvatar;return(0,we.jsxs)(Ra,(0,k.A)({as:i,ownerState:h,className:(0,mt.A)(g.root,a),ref:t},f,{children:[A?(0,we.jsx)(wa,(0,k.A)({variant:m},S,{className:(0,mt.A)(g.avatar,null==S?void 0:S.className),children:w})):null,y.slice(0,x).reverse().map((e=>ge.cloneElement(e,{className:(0,mt.A)(e.props.className,g.avatar),variant:e.props.variant||m})))]}))})),Ma=Pa;var Ia=o("./node_modules/.pnpm/@mui+material@5.16.4_@emotion+react@11.13.0_@types+react@18.3.3_react@18.3.1__@emotion+styled_brxipnv4yvqheosgxcawdxdyay/node_modules/@mui/material/Backdrop/Backdrop.js"),ja=o("./node_modules/.pnpm/@mui+material@5.16.4_@emotion+react@11.13.0_@types+react@18.3.3_react@18.3.1__@emotion+styled_brxipnv4yvqheosgxcawdxdyay/node_modules/@mui/material/Backdrop/backdropClasses.js");function $a(e){return(0,At.Ay)("MuiBadge",e)}const Ta=(0,xt.A)("MuiBadge",["root","badge","dot","standard","anchorOriginTopRight","anchorOriginBottomRight","anchorOriginTopLeft","anchorOriginBottomLeft","invisible","colorError","colorInfo","colorPrimary","colorSecondary","colorSuccess","colorWarning","overlapRectangular","overlapCircular","anchorOriginTopLeftCircular","anchorOriginTopLeftRectangular","anchorOriginTopRightCircular","anchorOriginTopRightRectangular","anchorOriginBottomLeftCircular","anchorOriginBottomLeftRectangular","anchorOriginBottomRightCircular","anchorOriginBottomRightRectangular"]),La=["anchorOrigin","className","classes","component","components","componentsProps","children","overlap","color","invisible","max","badgeContent","slots","slotProps","showZero","variant"],Oa=(0,de.Ay)("span",{name:"MuiBadge",slot:"Root",overridesResolver:(e,t)=>t.root})({position:"relative",display:"inline-flex",verticalAlign:"middle",flexShrink:0}),Ea=(0,de.Ay)("span",{name:"MuiBadge",slot:"Badge",overridesResolver:(e,t)=>{const{ownerState:o}=e;return[t.badge,t[o.variant],t[`anchorOrigin${(0,uo.A)(o.anchorOrigin.vertical)}${(0,uo.A)(o.anchorOrigin.horizontal)}${(0,uo.A)(o.overlap)}`],"default"!==o.color&&t[`color${(0,uo.A)(o.color)}`],o.invisible&&t.invisible]}})((({theme:e})=>{var t;return{display:"flex",flexDirection:"row",flexWrap:"wrap",justifyContent:"center",alignContent:"center",alignItems:"center",position:"absolute",boxSizing:"border-box",fontFamily:e.typography.fontFamily,fontWeight:e.typography.fontWeightMedium,fontSize:e.typography.pxToRem(12),minWidth:20,lineHeight:1,padding:"0 6px",height:20,borderRadius:10,zIndex:1,transition:e.transitions.create("transform",{easing:e.transitions.easing.easeInOut,duration:e.transitions.duration.enteringScreen}),variants:[...Object.keys((null!=(t=e.vars)?t:e).palette).filter((t=>{var o,r;return(null!=(o=e.vars)?o:e).palette[t].main&&(null!=(r=e.vars)?r:e).palette[t].contrastText})).map((t=>({props:{color:t},style:{backgroundColor:(e.vars||e).palette[t].main,color:(e.vars||e).palette[t].contrastText}}))),{props:{variant:"dot"},style:{borderRadius:4,height:8,minWidth:8,padding:0}},{props:({ownerState:e})=>"top"===e.anchorOrigin.vertical&&"right"===e.anchorOrigin.horizontal&&"rectangular"===e.overlap,style:{top:0,right:0,transform:"scale(1) translate(50%, -50%)",transformOrigin:"100% 0%",[`&.${Ta.invisible}`]:{transform:"scale(0) translate(50%, -50%)"}}},{props:({ownerState:e})=>"bottom"===e.anchorOrigin.vertical&&"right"===e.anchorOrigin.horizontal&&"rectangular"===e.overlap,style:{bottom:0,right:0,transform:"scale(1) translate(50%, 50%)",transformOrigin:"100% 100%",[`&.${Ta.invisible}`]:{transform:"scale(0) translate(50%, 50%)"}}},{props:({ownerState:e})=>"top"===e.anchorOrigin.vertical&&"left"===e.anchorOrigin.horizontal&&"rectangular"===e.overlap,style:{top:0,left:0,transform:"scale(1) translate(-50%, -50%)",transformOrigin:"0% 0%",[`&.${Ta.invisible}`]:{transform:"scale(0) translate(-50%, -50%)"}}},{props:({ownerState:e})=>"bottom"===e.anchorOrigin.vertical&&"left"===e.anchorOrigin.horizontal&&"rectangular"===e.overlap,style:{bottom:0,left:0,transform:"scale(1) translate(-50%, 50%)",transformOrigin:"0% 100%",[`&.${Ta.invisible}`]:{transform:"scale(0) translate(-50%, 50%)"}}},{props:({ownerState:e})=>"top"===e.anchorOrigin.vertical&&"right"===e.anchorOrigin.horizontal&&"circular"===e.overlap,style:{top:"14%",right:"14%",transform:"scale(1) translate(50%, -50%)",transformOrigin:"100% 0%",[`&.${Ta.invisible}`]:{transform:"scale(0) translate(50%, -50%)"}}},{props:({ownerState:e})=>"bottom"===e.anchorOrigin.vertical&&"right"===e.anchorOrigin.horizontal&&"circular"===e.overlap,style:{bottom:"14%",right:"14%",transform:"scale(1) translate(50%, 50%)",transformOrigin:"100% 100%",[`&.${Ta.invisible}`]:{transform:"scale(0) translate(50%, 50%)"}}},{props:({ownerState:e})=>"top"===e.anchorOrigin.vertical&&"left"===e.anchorOrigin.horizontal&&"circular"===e.overlap,style:{top:"14%",left:"14%",transform:"scale(1) translate(-50%, -50%)",transformOrigin:"0% 0%",[`&.${Ta.invisible}`]:{transform:"scale(0) translate(-50%, -50%)"}}},{props:({ownerState:e})=>"bottom"===e.anchorOrigin.vertical&&"left"===e.anchorOrigin.horizontal&&"circular"===e.overlap,style:{bottom:"14%",left:"14%",transform:"scale(1) translate(-50%, 50%)",transformOrigin:"0% 100%",[`&.${Ta.invisible}`]:{transform:"scale(0) translate(-50%, 50%)"}}},{props:{invisible:!0},style:{transition:e.transitions.create("transform",{easing:e.transitions.easing.easeInOut,duration:e.transitions.duration.leavingScreen})}}]}})),Ba=ge.forwardRef((function(e,t){var o,r,n,a,i,s;const l=(0,vt.b)({props:e,name:"MuiBadge"}),{anchorOrigin:c={vertical:"top",horizontal:"right"},className:u,component:d,components:p={},componentsProps:m={},children:f,overlap:v="rectangular",color:h="default",invisible:g=!1,max:y=99,badgeContent:b,slots:x,slotProps:A,showZero:w=!1,variant:S="standard"}=l,C=(0,R.A)(l,La),{badgeContent:_,invisible:P,max:M,displayValue:I}=function(e){const{badgeContent:t,invisible:o=!1,max:r=99,showZero:n=!1}=e,a=Uo({badgeContent:t,max:r});let i=o;!1!==o||0!==t||n||(i=!0);const{badgeContent:s,max:l=r}=i?a:e;return{badgeContent:s,invisible:i,max:l,displayValue:s&&Number(s)>l?`${l}+`:s}}({max:y,invisible:g,badgeContent:b,showZero:w}),j=Uo({anchorOrigin:c,color:h,overlap:v,variant:S,badgeContent:b}),$=P||null==_&&"dot"!==S,{color:T=h,overlap:L=v,anchorOrigin:O=c,variant:E=S}=$?j:l,B="dot"!==E?I:void 0,N=(0,k.A)({},l,{badgeContent:_,invisible:$,max:M,displayValue:B,showZero:w,anchorOrigin:O,color:T,overlap:L,variant:E}),z=(e=>{const{color:t,anchorOrigin:o,invisible:r,overlap:n,variant:a,classes:i={}}=e,s={root:["root"],badge:["badge",a,r&&"invisible",`anchorOrigin${(0,uo.A)(o.vertical)}${(0,uo.A)(o.horizontal)}`,`anchorOrigin${(0,uo.A)(o.vertical)}${(0,uo.A)(o.horizontal)}${(0,uo.A)(n)}`,`overlap${(0,uo.A)(n)}`,"default"!==t&&`color${(0,uo.A)(t)}`]};return(0,ft.A)(s,$a,i)})(N),D=null!=(o=null!=(r=null==x?void 0:x.root)?r:p.Root)?o:Oa,F=null!=(n=null!=(a=null==x?void 0:x.badge)?a:p.Badge)?n:Ea,W=null!=(i=null==A?void 0:A.root)?i:m.root,V=null!=(s=null==A?void 0:A.badge)?s:m.badge,H=(0,mn.A)({elementType:D,externalSlotProps:W,externalForwardedProps:C,additionalProps:{ref:t,as:d},ownerState:N,className:(0,mt.A)(null==W?void 0:W.className,z.root,u)}),U=(0,mn.A)({elementType:F,externalSlotProps:V,ownerState:N,className:(0,mt.A)(z.badge,null==V?void 0:V.className)});return(0,we.jsxs)(D,(0,k.A)({},H,{children:[f,(0,we.jsx)(F,(0,k.A)({},U,{children:B}))]}))}));function Na(e){return(0,At.Ay)("MuiBottomNavigation",e)}const za=(0,xt.A)("MuiBottomNavigation",["root"]),Da=["children","className","component","onChange","showLabels","value"],Fa=(0,de.Ay)("div",{name:"MuiBottomNavigation",slot:"Root",overridesResolver:(e,t)=>t.root})((({theme:e})=>({display:"flex",justifyContent:"center",height:56,backgroundColor:(e.vars||e).palette.background.paper}))),Wa=ge.forwardRef((function(e,t){const o=(0,vt.b)({props:e,name:"MuiBottomNavigation"}),{children:r,className:n,component:a="div",onChange:i,showLabels:s=!1,value:l}=o,c=(0,R.A)(o,Da),u=(0,k.A)({},o,{component:a,showLabels:s}),d=(e=>{const{classes:t}=e;return(0,ft.A)({root:["root"]},Na,t)})(u);return(0,we.jsx)(Fa,(0,k.A)({as:a,className:(0,mt.A)(d.root,n),ref:t,ownerState:u},c,{children:ge.Children.map(r,((e,t)=>{if(!ge.isValidElement(e))return null;const o=void 0===e.props.value?t:e.props.value;return ge.cloneElement(e,{selected:o===l,showLabel:void 0!==e.props.showLabel?e.props.showLabel:s,value:o,onChange:i})}))}))}));function Va(e){return(0,At.Ay)("MuiBottomNavigationAction",e)}const Ha=(0,xt.A)("MuiBottomNavigationAction",["root","iconOnly","selected","label"]),Ua=["className","icon","label","onChange","onClick","selected","showLabel","value"],qa=(0,de.Ay)(oo.A,{name:"MuiBottomNavigationAction",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:o}=e;return[t.root,!o.showLabel&&!o.selected&&t.iconOnly]}})((({theme:e,ownerState:t})=>(0,k.A)({transition:e.transitions.create(["color","padding-top"],{duration:e.transitions.duration.short}),padding:"0px 12px",minWidth:80,maxWidth:168,color:(e.vars||e).palette.text.secondary,flexDirection:"column",flex:"1"},!t.showLabel&&!t.selected&&{paddingTop:14},!t.showLabel&&!t.selected&&!t.label&&{paddingTop:0},{[`&.${Ha.selected}`]:{color:(e.vars||e).palette.primary.main}}))),Ga=(0,de.Ay)("span",{name:"MuiBottomNavigationAction",slot:"Label",overridesResolver:(e,t)=>t.label})((({theme:e,ownerState:t})=>(0,k.A)({fontFamily:e.typography.fontFamily,fontSize:e.typography.pxToRem(12),opacity:1,transition:"font-size 0.2s, opacity 0.2s",transitionDelay:"0.1s"},!t.showLabel&&!t.selected&&{opacity:0,transitionDelay:"0s"},{[`&.${Ha.selected}`]:{fontSize:e.typography.pxToRem(14)}}))),Xa=ge.forwardRef((function(e,t){const o=(0,vt.b)({props:e,name:"MuiBottomNavigationAction"}),{className:r,icon:n,label:a,onChange:i,onClick:s,value:l}=o,c=(0,R.A)(o,Ua),u=o,d=(e=>{const{classes:t,showLabel:o,selected:r}=e,n={root:["root",!o&&!r&&"iconOnly",r&&"selected"],label:["label",!o&&!r&&"iconOnly",r&&"selected"]};return(0,ft.A)(n,Va,t)})(u);return(0,we.jsxs)(qa,(0,k.A)({ref:t,className:(0,mt.A)(d.root,r),focusRipple:!0,onClick:e=>{i&&i(e,l),s&&s(e)},ownerState:u},c,{children:[n,(0,we.jsx)(Ga,{className:d.label,ownerState:u,children:a})]}))}));var Ya=o("./node_modules/.pnpm/@mui+material@5.16.4_@emotion+react@11.13.0_@types+react@18.3.3_react@18.3.1__@emotion+styled_brxipnv4yvqheosgxcawdxdyay/node_modules/@mui/material/Box/Box.js"),Ka=o("./node_modules/.pnpm/@mui+material@5.16.4_@emotion+react@11.13.0_@types+react@18.3.3_react@18.3.1__@emotion+styled_brxipnv4yvqheosgxcawdxdyay/node_modules/@mui/material/Box/boxClasses.js");const Za=(0,vo.A)((0,we.jsx)("path",{d:"M6 10c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm12 0c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm-6 0c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z"}),"MoreHoriz"),Ja=["slots","slotProps"],Qa=(0,de.Ay)(oo.A)((({theme:e})=>(0,k.A)({display:"flex",marginLeft:`calc(${e.spacing(1)} * 0.5)`,marginRight:`calc(${e.spacing(1)} * 0.5)`},"light"===e.palette.mode?{backgroundColor:e.palette.grey[100],color:e.palette.grey[700]}:{backgroundColor:e.palette.grey[700],color:e.palette.grey[100]},{borderRadius:2,"&:hover, &:focus":(0,k.A)({},"light"===e.palette.mode?{backgroundColor:e.palette.grey[200]}:{backgroundColor:e.palette.grey[600]}),"&:active":(0,k.A)({boxShadow:e.shadows[0]},"light"===e.palette.mode?{backgroundColor:(0,De.tL)(e.palette.grey[200],.12)}:{backgroundColor:(0,De.tL)(e.palette.grey[600],.12)})}))),ei=(0,de.Ay)(Za)({width:24,height:16}),ti=function(e){const{slots:t={},slotProps:o={}}=e,r=(0,R.A)(e,Ja),n=e;return(0,we.jsx)("li",{children:(0,we.jsx)(Qa,(0,k.A)({focusRipple:!0},r,{ownerState:n,children:(0,we.jsx)(ei,(0,k.A)({as:t.CollapsedIcon,ownerState:n},o.collapsedIcon))}))})};function oi(e){return(0,At.Ay)("MuiBreadcrumbs",e)}const ri=(0,xt.A)("MuiBreadcrumbs",["root","ol","li","separator"]),ni=["children","className","component","slots","slotProps","expandText","itemsAfterCollapse","itemsBeforeCollapse","maxItems","separator"],ai=(0,de.Ay)(Oo,{name:"MuiBreadcrumbs",slot:"Root",overridesResolver:(e,t)=>[{[`& .${ri.li}`]:t.li},t.root]})({}),ii=(0,de.Ay)("ol",{name:"MuiBreadcrumbs",slot:"Ol",overridesResolver:(e,t)=>t.ol})({display:"flex",flexWrap:"wrap",alignItems:"center",padding:0,margin:0,listStyle:"none"}),si=(0,de.Ay)("li",{name:"MuiBreadcrumbs",slot:"Separator",overridesResolver:(e,t)=>t.separator})({display:"flex",userSelect:"none",marginLeft:8,marginRight:8});function li(e,t,o,r){return e.reduce(((n,a,i)=>(i<e.length-1?n=n.concat(a,(0,we.jsx)(si,{"aria-hidden":!0,className:t,ownerState:r,children:o},`separator-${i}`)):n.push(a),n)),[])}const ci=ge.forwardRef((function(e,t){const o=(0,vt.b)({props:e,name:"MuiBreadcrumbs"}),{children:r,className:n,component:a="nav",slots:i={},slotProps:s={},expandText:l="Show path",itemsAfterCollapse:c=1,itemsBeforeCollapse:u=1,maxItems:d=8,separator:p="/"}=o,m=(0,R.A)(o,ni),[f,v]=ge.useState(!1),h=(0,k.A)({},o,{component:a,expanded:f,expandText:l,itemsAfterCollapse:c,itemsBeforeCollapse:u,maxItems:d,separator:p}),g=(e=>{const{classes:t}=e;return(0,ft.A)({root:["root"],li:["li"],ol:["ol"],separator:["separator"]},oi,t)})(h),y=(0,mn.A)({elementType:i.CollapsedIcon,externalSlotProps:s.collapsedIcon,ownerState:h}),b=ge.useRef(null),x=ge.Children.toArray(r).filter((e=>ge.isValidElement(e))).map(((e,t)=>(0,we.jsx)("li",{className:g.li,children:e},`child-${t}`)));return(0,we.jsx)(ai,(0,k.A)({ref:t,component:a,color:"text.secondary",className:(0,mt.A)(g.root,n),ownerState:h},m,{children:(0,we.jsx)(ii,{className:g.ol,ref:b,ownerState:h,children:li(f||d&&x.length<=d?x:(e=>u+c>=e.length?e:[...e.slice(0,u),(0,we.jsx)(ti,{"aria-label":l,slots:{CollapsedIcon:i.CollapsedIcon},slotProps:{collapsedIcon:y},onClick:()=>{v(!0);const e=b.current.querySelector("a[href],button,[tabindex]");e&&e.focus()}},"ellipsis"),...e.slice(e.length-c,e.length)])(x),g.separator,p,h)})}))}));var ui=o("./node_modules/.pnpm/@mui+material@5.16.4_@emotion+react@11.13.0_@types+react@18.3.3_react@18.3.1__@emotion+styled_brxipnv4yvqheosgxcawdxdyay/node_modules/@mui/material/Button/Button.js"),di=o("./node_modules/.pnpm/@mui+material@5.16.4_@emotion+react@11.13.0_@types+react@18.3.3_react@18.3.1__@emotion+styled_brxipnv4yvqheosgxcawdxdyay/node_modules/@mui/material/Button/buttonClasses.js"),pi=o("./node_modules/.pnpm/@mui+material@5.16.4_@emotion+react@11.13.0_@types+react@18.3.3_react@18.3.1__@emotion+styled_brxipnv4yvqheosgxcawdxdyay/node_modules/@mui/material/ButtonBase/buttonBaseClasses.js"),mi=o("./node_modules/.pnpm/@mui+material@5.16.4_@emotion+react@11.13.0_@types+react@18.3.3_react@18.3.1__@emotion+styled_brxipnv4yvqheosgxcawdxdyay/node_modules/@mui/material/ButtonBase/touchRippleClasses.js");function fi(e){return ge.Children.toArray(e).filter((e=>ge.isValidElement(e)))}function vi(e){return(0,At.Ay)("MuiButtonGroup",e)}const hi=(0,xt.A)("MuiButtonGroup",["root","contained","outlined","text","disableElevation","disabled","firstButton","fullWidth","vertical","grouped","groupedHorizontal","groupedVertical","groupedText","groupedTextHorizontal","groupedTextVertical","groupedTextPrimary","groupedTextSecondary","groupedOutlined","groupedOutlinedHorizontal","groupedOutlinedVertical","groupedOutlinedPrimary","groupedOutlinedSecondary","groupedContained","groupedContainedHorizontal","groupedContainedVertical","groupedContainedPrimary","groupedContainedSecondary","lastButton","middleButton"]);var gi=o("./node_modules/.pnpm/@mui+material@5.16.4_@emotion+react@11.13.0_@types+react@18.3.3_react@18.3.1__@emotion+styled_brxipnv4yvqheosgxcawdxdyay/node_modules/@mui/material/ButtonGroup/ButtonGroupContext.js"),yi=o("./node_modules/.pnpm/@mui+material@5.16.4_@emotion+react@11.13.0_@types+react@18.3.3_react@18.3.1__@emotion+styled_brxipnv4yvqheosgxcawdxdyay/node_modules/@mui/material/ButtonGroup/ButtonGroupButtonContext.js");const bi=["children","className","color","component","disabled","disableElevation","disableFocusRipple","disableRipple","fullWidth","orientation","size","variant"],xi=(0,de.Ay)("div",{name:"MuiButtonGroup",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:o}=e;return[{[`& .${hi.grouped}`]:t.grouped},{[`& .${hi.grouped}`]:t[`grouped${(0,uo.A)(o.orientation)}`]},{[`& .${hi.grouped}`]:t[`grouped${(0,uo.A)(o.variant)}`]},{[`& .${hi.grouped}`]:t[`grouped${(0,uo.A)(o.variant)}${(0,uo.A)(o.orientation)}`]},{[`& .${hi.grouped}`]:t[`grouped${(0,uo.A)(o.variant)}${(0,uo.A)(o.color)}`]},{[`& .${hi.firstButton}`]:t.firstButton},{[`& .${hi.lastButton}`]:t.lastButton},{[`& .${hi.middleButton}`]:t.middleButton},t.root,t[o.variant],!0===o.disableElevation&&t.disableElevation,o.fullWidth&&t.fullWidth,"vertical"===o.orientation&&t.vertical]}})((({theme:e,ownerState:t})=>(0,k.A)({display:"inline-flex",borderRadius:(e.vars||e).shape.borderRadius},"contained"===t.variant&&{boxShadow:(e.vars||e).shadows[2]},t.disableElevation&&{boxShadow:"none"},t.fullWidth&&{width:"100%"},"vertical"===t.orientation&&{flexDirection:"column"},{[`& .${hi.grouped}`]:(0,k.A)({minWidth:40,"&:hover":(0,k.A)({},"contained"===t.variant&&{boxShadow:"none"})},"contained"===t.variant&&{boxShadow:"none"}),[`& .${hi.firstButton},& .${hi.middleButton}`]:(0,k.A)({},"horizontal"===t.orientation&&{borderTopRightRadius:0,borderBottomRightRadius:0},"vertical"===t.orientation&&{borderBottomRightRadius:0,borderBottomLeftRadius:0},"text"===t.variant&&"horizontal"===t.orientation&&{borderRight:e.vars?`1px solid rgba(${e.vars.palette.common.onBackgroundChannel} / 0.23)`:"1px solid "+("light"===e.palette.mode?"rgba(0, 0, 0, 0.23)":"rgba(255, 255, 255, 0.23)"),[`&.${hi.disabled}`]:{borderRight:`1px solid ${(e.vars||e).palette.action.disabled}`}},"text"===t.variant&&"vertical"===t.orientation&&{borderBottom:e.vars?`1px solid rgba(${e.vars.palette.common.onBackgroundChannel} / 0.23)`:"1px solid "+("light"===e.palette.mode?"rgba(0, 0, 0, 0.23)":"rgba(255, 255, 255, 0.23)"),[`&.${hi.disabled}`]:{borderBottom:`1px solid ${(e.vars||e).palette.action.disabled}`}},"text"===t.variant&&"inherit"!==t.color&&{borderColor:e.vars?`rgba(${e.vars.palette[t.color].mainChannel} / 0.5)`:(0,De.X4)(e.palette[t.color].main,.5)},"outlined"===t.variant&&"horizontal"===t.orientation&&{borderRightColor:"transparent"},"outlined"===t.variant&&"vertical"===t.orientation&&{borderBottomColor:"transparent"},"contained"===t.variant&&"horizontal"===t.orientation&&{borderRight:`1px solid ${(e.vars||e).palette.grey[400]}`,[`&.${hi.disabled}`]:{borderRight:`1px solid ${(e.vars||e).palette.action.disabled}`}},"contained"===t.variant&&"vertical"===t.orientation&&{borderBottom:`1px solid ${(e.vars||e).palette.grey[400]}`,[`&.${hi.disabled}`]:{borderBottom:`1px solid ${(e.vars||e).palette.action.disabled}`}},"contained"===t.variant&&"inherit"!==t.color&&{borderColor:(e.vars||e).palette[t.color].dark},{"&:hover":(0,k.A)({},"outlined"===t.variant&&"horizontal"===t.orientation&&{borderRightColor:"currentColor"},"outlined"===t.variant&&"vertical"===t.orientation&&{borderBottomColor:"currentColor"})}),[`& .${hi.lastButton},& .${hi.middleButton}`]:(0,k.A)({},"horizontal"===t.orientation&&{borderTopLeftRadius:0,borderBottomLeftRadius:0},"vertical"===t.orientation&&{borderTopRightRadius:0,borderTopLeftRadius:0},"outlined"===t.variant&&"horizontal"===t.orientation&&{marginLeft:-1},"outlined"===t.variant&&"vertical"===t.orientation&&{marginTop:-1})}))),Ai=ge.forwardRef((function(e,t){const o=(0,vt.b)({props:e,name:"MuiButtonGroup"}),{children:r,className:n,color:a="primary",component:i="div",disabled:s=!1,disableElevation:l=!1,disableFocusRipple:c=!1,disableRipple:u=!1,fullWidth:d=!1,orientation:p="horizontal",size:m="medium",variant:f="outlined"}=o,v=(0,R.A)(o,bi),h=(0,k.A)({},o,{color:a,component:i,disabled:s,disableElevation:l,disableFocusRipple:c,disableRipple:u,fullWidth:d,orientation:p,size:m,variant:f}),g=(e=>{const{classes:t,color:o,disabled:r,disableElevation:n,fullWidth:a,orientation:i,variant:s}=e,l={root:["root",s,"vertical"===i&&"vertical",a&&"fullWidth",n&&"disableElevation"],grouped:["grouped",`grouped${(0,uo.A)(i)}`,`grouped${(0,uo.A)(s)}`,`grouped${(0,uo.A)(s)}${(0,uo.A)(i)}`,`grouped${(0,uo.A)(s)}${(0,uo.A)(o)}`,r&&"disabled"],firstButton:["firstButton"],lastButton:["lastButton"],middleButton:["middleButton"]};return(0,ft.A)(l,vi,t)})(h),y=ge.useMemo((()=>({className:g.grouped,color:a,disabled:s,disableElevation:l,disableFocusRipple:c,disableRipple:u,fullWidth:d,size:m,variant:f})),[a,s,l,c,u,d,m,f,g.grouped]),b=fi(r),x=b.length,A=e=>{const t=0===e,o=e===x-1;return t&&o?"":t?g.firstButton:o?g.lastButton:g.middleButton};return(0,we.jsx)(xi,(0,k.A)({as:i,role:"group",className:(0,mt.A)(g.root,n),ref:t,ownerState:h},v,{children:(0,we.jsx)(gi.A.Provider,{value:y,children:b.map(((e,t)=>(0,we.jsx)(yi.A.Provider,{value:A(t),children:e},t)))})}))}));function wi(e){return(0,At.Ay)("MuiCard",e)}const Si=(0,xt.A)("MuiCard",["root"]),Ci=["className","raised"],_i=(0,de.Ay)(It.A,{name:"MuiCard",slot:"Root",overridesResolver:(e,t)=>t.root})((()=>({overflow:"hidden"}))),ki=ge.forwardRef((function(e,t){const o=(0,vt.b)({props:e,name:"MuiCard"}),{className:r,raised:n=!1}=o,a=(0,R.A)(o,Ci),i=(0,k.A)({},o,{raised:n}),s=(e=>{const{classes:t}=e;return(0,ft.A)({root:["root"]},wi,t)})(i);return(0,we.jsx)(_i,(0,k.A)({className:(0,mt.A)(s.root,r),elevation:n?8:void 0,ref:t,ownerState:i},a))}));function Ri(e){return(0,At.Ay)("MuiCardActionArea",e)}const Pi=(0,xt.A)("MuiCardActionArea",["root","focusVisible","focusHighlight"]),Mi=["children","className","focusVisibleClassName"],Ii=(0,de.Ay)(oo.A,{name:"MuiCardActionArea",slot:"Root",overridesResolver:(e,t)=>t.root})((({theme:e})=>({display:"block",textAlign:"inherit",borderRadius:"inherit",width:"100%",[`&:hover .${Pi.focusHighlight}`]:{opacity:(e.vars||e).palette.action.hoverOpacity,"@media (hover: none)":{opacity:0}},[`&.${Pi.focusVisible} .${Pi.focusHighlight}`]:{opacity:(e.vars||e).palette.action.focusOpacity}}))),ji=(0,de.Ay)("span",{name:"MuiCardActionArea",slot:"FocusHighlight",overridesResolver:(e,t)=>t.focusHighlight})((({theme:e})=>({overflow:"hidden",pointerEvents:"none",position:"absolute",top:0,right:0,bottom:0,left:0,borderRadius:"inherit",opacity:0,backgroundColor:"currentcolor",transition:e.transitions.create("opacity",{duration:e.transitions.duration.short})}))),$i=ge.forwardRef((function(e,t){const o=(0,vt.b)({props:e,name:"MuiCardActionArea"}),{children:r,className:n,focusVisibleClassName:a}=o,i=(0,R.A)(o,Mi),s=o,l=(e=>{const{classes:t}=e;return(0,ft.A)({root:["root"],focusHighlight:["focusHighlight"]},Ri,t)})(s);return(0,we.jsxs)(Ii,(0,k.A)({className:(0,mt.A)(l.root,n),focusVisibleClassName:(0,mt.A)(a,l.focusVisible),ref:t,ownerState:s},i,{children:[r,(0,we.jsx)(ji,{className:l.focusHighlight,ownerState:s})]}))}));function Ti(e){return(0,At.Ay)("MuiCardActions",e)}const Li=(0,xt.A)("MuiCardActions",["root","spacing"]),Oi=["disableSpacing","className"],Ei=(0,de.Ay)("div",{name:"MuiCardActions",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:o}=e;return[t.root,!o.disableSpacing&&t.spacing]}})((({ownerState:e})=>(0,k.A)({display:"flex",alignItems:"center",padding:8},!e.disableSpacing&&{"& > :not(style) ~ :not(style)":{marginLeft:8}}))),Bi=ge.forwardRef((function(e,t){const o=(0,vt.b)({props:e,name:"MuiCardActions"}),{disableSpacing:r=!1,className:n}=o,a=(0,R.A)(o,Oi),i=(0,k.A)({},o,{disableSpacing:r}),s=(e=>{const{classes:t,disableSpacing:o}=e,r={root:["root",!o&&"spacing"]};return(0,ft.A)(r,Ti,t)})(i);return(0,we.jsx)(Ei,(0,k.A)({className:(0,mt.A)(s.root,n),ownerState:i,ref:t},a))}));function Ni(e){return(0,At.Ay)("MuiCardContent",e)}const zi=(0,xt.A)("MuiCardContent",["root"]),Di=["className","component"],Fi=(0,de.Ay)("div",{name:"MuiCardContent",slot:"Root",overridesResolver:(e,t)=>t.root})((()=>({padding:16,"&:last-child":{paddingBottom:24}}))),Wi=ge.forwardRef((function(e,t){const o=(0,vt.b)({props:e,name:"MuiCardContent"}),{className:r,component:n="div"}=o,a=(0,R.A)(o,Di),i=(0,k.A)({},o,{component:n}),s=(e=>{const{classes:t}=e;return(0,ft.A)({root:["root"]},Ni,t)})(i);return(0,we.jsx)(Fi,(0,k.A)({as:n,className:(0,mt.A)(s.root,r),ownerState:i,ref:t},a))}));function Vi(e){return(0,At.Ay)("MuiCardHeader",e)}const Hi=(0,xt.A)("MuiCardHeader",["root","avatar","action","content","title","subheader"]),Ui=["action","avatar","className","component","disableTypography","subheader","subheaderTypographyProps","title","titleTypographyProps"],qi=(0,de.Ay)("div",{name:"MuiCardHeader",slot:"Root",overridesResolver:(e,t)=>(0,k.A)({[`& .${Hi.title}`]:t.title,[`& .${Hi.subheader}`]:t.subheader},t.root)})({display:"flex",alignItems:"center",padding:16}),Gi=(0,de.Ay)("div",{name:"MuiCardHeader",slot:"Avatar",overridesResolver:(e,t)=>t.avatar})({display:"flex",flex:"0 0 auto",marginRight:16}),Xi=(0,de.Ay)("div",{name:"MuiCardHeader",slot:"Action",overridesResolver:(e,t)=>t.action})({flex:"0 0 auto",alignSelf:"flex-start",marginTop:-4,marginRight:-8,marginBottom:-4}),Yi=(0,de.Ay)("div",{name:"MuiCardHeader",slot:"Content",overridesResolver:(e,t)=>t.content})({flex:"1 1 auto"}),Ki=ge.forwardRef((function(e,t){const o=(0,vt.b)({props:e,name:"MuiCardHeader"}),{action:r,avatar:n,className:a,component:i="div",disableTypography:s=!1,subheader:l,subheaderTypographyProps:c,title:u,titleTypographyProps:d}=o,p=(0,R.A)(o,Ui),m=(0,k.A)({},o,{component:i,disableTypography:s}),f=(e=>{const{classes:t}=e;return(0,ft.A)({root:["root"],avatar:["avatar"],action:["action"],content:["content"],title:["title"],subheader:["subheader"]},Vi,t)})(m);let v=u;null==v||v.type===Oo||s||(v=(0,we.jsx)(Oo,(0,k.A)({variant:n?"body2":"h5",className:f.title,component:"span",display:"block"},d,{children:v})));let h=l;return null==h||h.type===Oo||s||(h=(0,we.jsx)(Oo,(0,k.A)({variant:n?"body2":"body1",className:f.subheader,color:"text.secondary",component:"span",display:"block"},c,{children:h}))),(0,we.jsxs)(qi,(0,k.A)({className:(0,mt.A)(f.root,a),as:i,ref:t,ownerState:m},p,{children:[n&&(0,we.jsx)(Gi,{className:f.avatar,ownerState:m,children:n}),(0,we.jsxs)(Yi,{className:f.content,ownerState:m,children:[v,h]}),r&&(0,we.jsx)(Xi,{className:f.action,ownerState:m,children:r})]}))}));function Zi(e){return(0,At.Ay)("MuiCardMedia",e)}const Ji=(0,xt.A)("MuiCardMedia",["root","media","img"]),Qi=["children","className","component","image","src","style"],es=(0,de.Ay)("div",{name:"MuiCardMedia",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:o}=e,{isMediaComponent:r,isImageComponent:n}=o;return[t.root,r&&t.media,n&&t.img]}})((({ownerState:e})=>(0,k.A)({display:"block",backgroundSize:"cover",backgroundRepeat:"no-repeat",backgroundPosition:"center"},e.isMediaComponent&&{width:"100%"},e.isImageComponent&&{objectFit:"cover"}))),ts=["video","audio","picture","iframe","img"],os=["picture","img"],rs=ge.forwardRef((function(e,t){const o=(0,vt.b)({props:e,name:"MuiCardMedia"}),{children:r,className:n,component:a="div",image:i,src:s,style:l}=o,c=(0,R.A)(o,Qi),u=-1!==ts.indexOf(a),d=!u&&i?(0,k.A)({backgroundImage:`url("${i}")`},l):l,p=(0,k.A)({},o,{component:a,isMediaComponent:u,isImageComponent:-1!==os.indexOf(a)}),m=(e=>{const{classes:t,isMediaComponent:o,isImageComponent:r}=e,n={root:["root",o&&"media",r&&"img"]};return(0,ft.A)(n,Zi,t)})(p);return(0,we.jsx)(es,(0,k.A)({className:(0,mt.A)(m.root,n),as:a,role:!u&&i?"img":void 0,ref:t,style:d,ownerState:p,src:u?i||s:void 0},c,{children:r}))})),ns=rs;var as=o("./node_modules/.pnpm/@mui+material@5.16.4_@emotion+react@11.13.0_@types+react@18.3.3_react@18.3.1__@emotion+styled_brxipnv4yvqheosgxcawdxdyay/node_modules/@mui/material/Checkbox/Checkbox.js"),is=o("./node_modules/.pnpm/@mui+material@5.16.4_@emotion+react@11.13.0_@types+react@18.3.3_react@18.3.1__@emotion+styled_brxipnv4yvqheosgxcawdxdyay/node_modules/@mui/material/Checkbox/checkboxClasses.js");function ss(e){return(0,At.Ay)("MuiCircularProgress",e)}const ls=(0,xt.A)("MuiCircularProgress",["root","determinate","indeterminate","colorPrimary","colorSecondary","svg","circle","circleDeterminate","circleIndeterminate","circleDisableShrink"]),cs=["className","color","disableShrink","size","style","thickness","value","variant"];let us,ds,ps,ms,fs=e=>e;const vs=(0,q.i7)(us||(us=fs`
  0% {
    transform: rotate(0deg);
  }

  100% {
    transform: rotate(360deg);
  }
`)),hs=(0,q.i7)(ds||(ds=fs`
  0% {
    stroke-dasharray: 1px, 200px;
    stroke-dashoffset: 0;
  }

  50% {
    stroke-dasharray: 100px, 200px;
    stroke-dashoffset: -15px;
  }

  100% {
    stroke-dasharray: 100px, 200px;
    stroke-dashoffset: -125px;
  }
`)),gs=(0,de.Ay)("span",{name:"MuiCircularProgress",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:o}=e;return[t.root,t[o.variant],t[`color${(0,uo.A)(o.color)}`]]}})((({ownerState:e,theme:t})=>(0,k.A)({display:"inline-block"},"determinate"===e.variant&&{transition:t.transitions.create("transform")},"inherit"!==e.color&&{color:(t.vars||t).palette[e.color].main})),(({ownerState:e})=>"indeterminate"===e.variant&&(0,q.AH)(ps||(ps=fs`
      animation: ${0} 1.4s linear infinite;
    `),vs))),ys=(0,de.Ay)("svg",{name:"MuiCircularProgress",slot:"Svg",overridesResolver:(e,t)=>t.svg})({display:"block"}),bs=(0,de.Ay)("circle",{name:"MuiCircularProgress",slot:"Circle",overridesResolver:(e,t)=>{const{ownerState:o}=e;return[t.circle,t[`circle${(0,uo.A)(o.variant)}`],o.disableShrink&&t.circleDisableShrink]}})((({ownerState:e,theme:t})=>(0,k.A)({stroke:"currentColor"},"determinate"===e.variant&&{transition:t.transitions.create("stroke-dashoffset")},"indeterminate"===e.variant&&{strokeDasharray:"80px, 200px",strokeDashoffset:0})),(({ownerState:e})=>"indeterminate"===e.variant&&!e.disableShrink&&(0,q.AH)(ms||(ms=fs`
      animation: ${0} 1.4s ease-in-out infinite;
    `),hs))),xs=ge.forwardRef((function(e,t){const o=(0,vt.b)({props:e,name:"MuiCircularProgress"}),{className:r,color:n="primary",disableShrink:a=!1,size:i=40,style:s,thickness:l=3.6,value:c=0,variant:u="indeterminate"}=o,d=(0,R.A)(o,cs),p=(0,k.A)({},o,{color:n,disableShrink:a,size:i,thickness:l,value:c,variant:u}),m=(e=>{const{classes:t,variant:o,color:r,disableShrink:n}=e,a={root:["root",o,`color${(0,uo.A)(r)}`],svg:["svg"],circle:["circle",`circle${(0,uo.A)(o)}`,n&&"circleDisableShrink"]};return(0,ft.A)(a,ss,t)})(p),f={},v={},h={};if("determinate"===u){const e=2*Math.PI*((44-l)/2);f.strokeDasharray=e.toFixed(3),h["aria-valuenow"]=Math.round(c),f.strokeDashoffset=`${((100-c)/100*e).toFixed(3)}px`,v.transform="rotate(-90deg)"}return(0,we.jsx)(gs,(0,k.A)({className:(0,mt.A)(m.root,r),style:(0,k.A)({width:i,height:i},v,s),ownerState:p,ref:t,role:"progressbar"},h,d,{children:(0,we.jsx)(ys,{className:m.svg,ownerState:p,viewBox:"22 22 44 44",children:(0,we.jsx)(bs,{className:m.circle,style:f,ownerState:p,cx:44,cy:44,r:(44-l)/2,fill:"none",strokeWidth:l})})}))})),As=xs;function ws(e){return e.substring(2).toLowerCase()}function Ss(e){const{children:t,disableReactTree:o=!1,mouseEvent:r="onClick",onClickAway:n,touchEvent:a="onTouchEnd"}=e,i=ge.useRef(!1),s=ge.useRef(null),l=ge.useRef(!1),c=ge.useRef(!1);ge.useEffect((()=>(setTimeout((()=>{l.current=!0}),0),()=>{l.current=!1})),[]);const u=(0,Tt.A)(t.ref,s),d=(0,qo.A)((e=>{const t=c.current;c.current=!1;const r=(0,or.A)(s.current);if(!l.current||!s.current||"clientX"in e&&function(e,t){return t.documentElement.clientWidth<e.clientX||t.documentElement.clientHeight<e.clientY}(e,r))return;if(i.current)return void(i.current=!1);let a;a=e.composedPath?e.composedPath().indexOf(s.current)>-1:!r.documentElement.contains(e.target)||s.current.contains(e.target),a||!o&&t||n(e)})),p=e=>o=>{c.current=!0;const r=t.props[e];r&&r(o)},m={ref:u};return!1!==a&&(m[a]=p(a)),ge.useEffect((()=>{if(!1!==a){const e=ws(a),t=(0,or.A)(s.current),o=()=>{i.current=!0};return t.addEventListener(e,d),t.addEventListener("touchmove",o),()=>{t.removeEventListener(e,d),t.removeEventListener("touchmove",o)}}}),[d,a]),!1!==r&&(m[r]=p(r)),ge.useEffect((()=>{if(!1!==r){const e=ws(r),t=(0,or.A)(s.current);return t.addEventListener(e,d),()=>{t.removeEventListener(e,d)}}}),[d,r]),(0,we.jsx)(ge.Fragment,{children:ge.cloneElement(t,m)})}var Cs=o("./node_modules/.pnpm/@mui+utils@5.16.4_@types+react@18.3.3_react@18.3.1/node_modules/@mui/utils/esm/capitalize/capitalize.js"),_s=o("./node_modules/.pnpm/@mui+styled-engine@5.16.4_@emotion+react@11.13.0_@types+react@18.3.3_react@18.3.1__@emotion+s_fxygcpf7zqzkokazitjbbkulbe/node_modules/@mui/styled-engine/index.js"),ks=o("./node_modules/.pnpm/@mui+system@5.16.4_@emotion+react@11.13.0_@types+react@18.3.3_react@18.3.1__@emotion+styled@1_6pxsshf4op6ciexesjgj77xooe/node_modules/@mui/system/esm/createTheme/createTheme.js");const Rs=["ownerState"],Ps=["variants"],Ms=["name","slot","skipVariantsResolver","skipSx","overridesResolver"];function Is(e){return"ownerState"!==e&&"theme"!==e&&"sx"!==e&&"as"!==e}const js=(0,ks.A)(),$s=e=>e?e.charAt(0).toLowerCase()+e.slice(1):e;function Ts({defaultTheme:e,theme:t,themeId:o}){return r=t,0===Object.keys(r).length?e:t[o]||t;var r}function Ls(e){return e?(t,o)=>o[e]:null}function Os(e,t){let{ownerState:o}=t,r=(0,R.A)(t,Rs);const n="function"==typeof e?e((0,k.A)({ownerState:o},r)):e;if(Array.isArray(n))return n.flatMap((e=>Os(e,(0,k.A)({ownerState:o},r))));if(n&&"object"==typeof n&&Array.isArray(n.variants)){const{variants:e=[]}=n;let t=(0,R.A)(n,Ps);return e.forEach((e=>{let n=!0;"function"==typeof e.props?n=e.props((0,k.A)({ownerState:o},r,o)):Object.keys(e.props).forEach((t=>{(null==o?void 0:o[t])!==e.props[t]&&r[t]!==e.props[t]&&(n=!1)})),n&&(Array.isArray(t)||(t=[t]),t.push("function"==typeof e.style?e.style((0,k.A)({ownerState:o},r,o)):e.style))})),t}return n}const Es=function(e={}){const{themeId:t,defaultTheme:o=js,rootShouldForwardProp:r=Is,slotShouldForwardProp:n=Is}=e,a=e=>(0,Ie.A)((0,k.A)({},e,{theme:Ts((0,k.A)({},e,{defaultTheme:o,themeId:t}))}));return a.__mui_systemSx=!0,(e,i={})=>{(0,_s.internal_processStyles)(e,(e=>e.filter((e=>!(null!=e&&e.__mui_systemSx)))));const{name:s,slot:l,skipVariantsResolver:c,skipSx:u,overridesResolver:d=Ls($s(l))}=i,p=(0,R.A)(i,Ms),m=void 0!==c?c:l&&"Root"!==l&&"root"!==l||!1,f=u||!1;let v=Is;"Root"===l||"root"===l?v=r:l?v=n:function(e){return"string"==typeof e&&e.charCodeAt(0)>96}(e)&&(v=void 0);const h=(0,_s.default)(e,(0,k.A)({shouldForwardProp:v,label:void 0},p)),g=e=>"function"==typeof e&&e.__emotion_real!==e||(0,X.Q)(e)?r=>Os(e,(0,k.A)({},r,{theme:Ts({theme:r.theme,defaultTheme:o,themeId:t})})):e,y=(r,...n)=>{let i=g(r);const l=n?n.map(g):[];s&&d&&l.push((e=>{const r=Ts((0,k.A)({},e,{defaultTheme:o,themeId:t}));if(!r.components||!r.components[s]||!r.components[s].styleOverrides)return null;const n=r.components[s].styleOverrides,a={};return Object.entries(n).forEach((([t,o])=>{a[t]=Os(o,(0,k.A)({},e,{theme:r}))})),d(e,a)})),s&&!m&&l.push((e=>{var r;const n=Ts((0,k.A)({},e,{defaultTheme:o,themeId:t}));return Os({variants:null==n||null==(r=n.components)||null==(r=r[s])?void 0:r.variants},(0,k.A)({},e,{theme:n}))})),f||l.push(a);const c=l.length-n.length;if(Array.isArray(r)&&c>0){const e=new Array(c).fill("");i=[...r,...e],i.raw=[...r.raw,...e]}const u=h(i,...l);return e.muiName&&(u.muiName=e.muiName),u};return h.withConfig&&(y.withConfig=h.withConfig),y}}(),Bs=Es,Ns=["className","component","disableGutters","fixed","maxWidth","classes"],zs=(0,ks.A)(),Ds=Bs("div",{name:"MuiContainer",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:o}=e;return[t.root,t[`maxWidth${(0,Cs.A)(String(o.maxWidth))}`],o.fixed&&t.fixed,o.disableGutters&&t.disableGutters]}}),Fs=e=>le({props:e,name:"MuiContainer",defaultTheme:zs}),Ws=function(e={}){const{createStyledComponent:t=Ds,useThemeProps:o=Fs,componentName:r="MuiContainer"}=e,n=t((({theme:e,ownerState:t})=>(0,k.A)({width:"100%",marginLeft:"auto",boxSizing:"border-box",marginRight:"auto",display:"block"},!t.disableGutters&&{paddingLeft:e.spacing(2),paddingRight:e.spacing(2),[e.breakpoints.up("sm")]:{paddingLeft:e.spacing(3),paddingRight:e.spacing(3)}})),(({theme:e,ownerState:t})=>t.fixed&&Object.keys(e.breakpoints.values).reduce(((t,o)=>{const r=o,n=e.breakpoints.values[r];return 0!==n&&(t[e.breakpoints.up(r)]={maxWidth:`${n}${e.breakpoints.unit}`}),t}),{})),(({theme:e,ownerState:t})=>(0,k.A)({},"xs"===t.maxWidth&&{[e.breakpoints.up("xs")]:{maxWidth:Math.max(e.breakpoints.values.xs,444)}},t.maxWidth&&"xs"!==t.maxWidth&&{[e.breakpoints.up(t.maxWidth)]:{maxWidth:`${e.breakpoints.values[t.maxWidth]}${e.breakpoints.unit}`}}))),a=ge.forwardRef((function(e,t){const a=o(e),{className:i,component:s="div",disableGutters:l=!1,fixed:c=!1,maxWidth:u="lg"}=a,d=(0,R.A)(a,Ns),p=(0,k.A)({},a,{component:s,disableGutters:l,fixed:c,maxWidth:u}),m=((e,t)=>{const{classes:o,fixed:r,disableGutters:n,maxWidth:a}=e,i={root:["root",a&&`maxWidth${(0,Cs.A)(String(a))}`,r&&"fixed",n&&"disableGutters"]};return(0,ft.A)(i,(e=>(0,At.Ay)(t,e)),o)})(p,r);return(0,we.jsx)(n,(0,k.A)({as:s,ownerState:p,className:(0,mt.A)(m.root,i),ref:t},d))}));return a}({createStyledComponent:(0,de.Ay)("div",{name:"MuiContainer",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:o}=e;return[t.root,t[`maxWidth${(0,uo.A)(String(o.maxWidth))}`],o.fixed&&t.fixed,o.disableGutters&&t.disableGutters]}}),useThemeProps:e=>(0,vt.b)({props:e,name:"MuiContainer"})}),Vs=Ws;function Hs(e){return(0,At.Ay)("MuiContainer",e)}const Us=(0,xt.A)("MuiContainer",["root","disableGutters","fixed","maxWidthXs","maxWidthSm","maxWidthMd","maxWidthLg","maxWidthXl"]);var qs=o("./node_modules/.pnpm/@mui+material@5.16.4_@emotion+react@11.13.0_@types+react@18.3.3_react@18.3.1__@emotion+styled_brxipnv4yvqheosgxcawdxdyay/node_modules/@mui/material/CssBaseline/CssBaseline.js");const Gs={track:"#2b2b2b",thumb:"#6b6b6b",active:"#959595"};function Xs(e=Gs){return{scrollbarColor:`${e.thumb} ${e.track}`,"&::-webkit-scrollbar, & *::-webkit-scrollbar":{backgroundColor:e.track},"&::-webkit-scrollbar-thumb, & *::-webkit-scrollbar-thumb":{borderRadius:8,backgroundColor:e.thumb,minHeight:24,border:`3px solid ${e.track}`},"&::-webkit-scrollbar-thumb:focus, & *::-webkit-scrollbar-thumb:focus":{backgroundColor:e.active},"&::-webkit-scrollbar-thumb:active, & *::-webkit-scrollbar-thumb:active":{backgroundColor:e.active},"&::-webkit-scrollbar-thumb:hover, & *::-webkit-scrollbar-thumb:hover":{backgroundColor:e.active},"&::-webkit-scrollbar-corner, & *::-webkit-scrollbar-corner":{backgroundColor:e.track}}}var Ys=o("./node_modules/.pnpm/@mui+material@5.16.4_@emotion+react@11.13.0_@types+react@18.3.3_react@18.3.1__@emotion+styled_brxipnv4yvqheosgxcawdxdyay/node_modules/@mui/material/Modal/Modal.js"),Ks=o("./node_modules/.pnpm/@mui+material@5.16.4_@emotion+react@11.13.0_@types+react@18.3.3_react@18.3.1__@emotion+styled_brxipnv4yvqheosgxcawdxdyay/node_modules/@mui/material/Fade/Fade.js");function Zs(e){return(0,At.Ay)("MuiDialog",e)}const Js=(0,xt.A)("MuiDialog",["root","scrollPaper","scrollBody","container","paper","paperScrollPaper","paperScrollBody","paperWidthFalse","paperWidthXs","paperWidthSm","paperWidthMd","paperWidthLg","paperWidthXl","paperFullWidth","paperFullScreen"]),Qs=ge.createContext({}),el=["aria-describedby","aria-labelledby","BackdropComponent","BackdropProps","children","className","disableEscapeKeyDown","fullScreen","fullWidth","maxWidth","onBackdropClick","onClick","onClose","open","PaperComponent","PaperProps","scroll","TransitionComponent","transitionDuration","TransitionProps"],tl=(0,de.Ay)(Ia.A,{name:"MuiDialog",slot:"Backdrop",overrides:(e,t)=>t.backdrop})({zIndex:-1}),ol=(0,de.Ay)(Ys.A,{name:"MuiDialog",slot:"Root",overridesResolver:(e,t)=>t.root})({"@media print":{position:"absolute !important"}}),rl=(0,de.Ay)("div",{name:"MuiDialog",slot:"Container",overridesResolver:(e,t)=>{const{ownerState:o}=e;return[t.container,t[`scroll${(0,uo.A)(o.scroll)}`]]}})((({ownerState:e})=>(0,k.A)({height:"100%","@media print":{height:"auto"},outline:0},"paper"===e.scroll&&{display:"flex",justifyContent:"center",alignItems:"center"},"body"===e.scroll&&{overflowY:"auto",overflowX:"hidden",textAlign:"center","&::after":{content:'""',display:"inline-block",verticalAlign:"middle",height:"100%",width:"0"}}))),nl=(0,de.Ay)(It.A,{name:"MuiDialog",slot:"Paper",overridesResolver:(e,t)=>{const{ownerState:o}=e;return[t.paper,t[`scrollPaper${(0,uo.A)(o.scroll)}`],t[`paperWidth${(0,uo.A)(String(o.maxWidth))}`],o.fullWidth&&t.paperFullWidth,o.fullScreen&&t.paperFullScreen]}})((({theme:e,ownerState:t})=>(0,k.A)({margin:32,position:"relative",overflowY:"auto","@media print":{overflowY:"visible",boxShadow:"none"}},"paper"===t.scroll&&{display:"flex",flexDirection:"column",maxHeight:"calc(100% - 64px)"},"body"===t.scroll&&{display:"inline-block",verticalAlign:"middle",textAlign:"left"},!t.maxWidth&&{maxWidth:"calc(100% - 64px)"},"xs"===t.maxWidth&&{maxWidth:"px"===e.breakpoints.unit?Math.max(e.breakpoints.values.xs,444):`max(${e.breakpoints.values.xs}${e.breakpoints.unit}, 444px)`,[`&.${Js.paperScrollBody}`]:{[e.breakpoints.down(Math.max(e.breakpoints.values.xs,444)+64)]:{maxWidth:"calc(100% - 64px)"}}},t.maxWidth&&"xs"!==t.maxWidth&&{maxWidth:`${e.breakpoints.values[t.maxWidth]}${e.breakpoints.unit}`,[`&.${Js.paperScrollBody}`]:{[e.breakpoints.down(e.breakpoints.values[t.maxWidth]+64)]:{maxWidth:"calc(100% - 64px)"}}},t.fullWidth&&{width:"calc(100% - 64px)"},t.fullScreen&&{margin:0,width:"100%",maxWidth:"100%",height:"100%",maxHeight:"none",borderRadius:0,[`&.${Js.paperScrollBody}`]:{margin:0,maxWidth:"100%"}}))),al=ge.forwardRef((function(e,t){const o=(0,vt.b)({props:e,name:"MuiDialog"}),r=(0,ne.A)(),n={enter:r.transitions.duration.enteringScreen,exit:r.transitions.duration.leavingScreen},{"aria-describedby":a,"aria-labelledby":i,BackdropComponent:s,BackdropProps:l,children:c,className:u,disableEscapeKeyDown:d=!1,fullScreen:p=!1,fullWidth:m=!1,maxWidth:f="sm",onBackdropClick:v,onClick:h,onClose:g,open:y,PaperComponent:b=It.A,PaperProps:x={},scroll:A="paper",TransitionComponent:w=Ks.A,transitionDuration:S=n,TransitionProps:C}=o,_=(0,R.A)(o,el),P=(0,k.A)({},o,{disableEscapeKeyDown:d,fullScreen:p,fullWidth:m,maxWidth:f,scroll:A}),M=(e=>{const{classes:t,scroll:o,maxWidth:r,fullWidth:n,fullScreen:a}=e,i={root:["root"],container:["container",`scroll${(0,uo.A)(o)}`],paper:["paper",`paperScroll${(0,uo.A)(o)}`,`paperWidth${(0,uo.A)(String(r))}`,n&&"paperFullWidth",a&&"paperFullScreen"]};return(0,ft.A)(i,Zs,t)})(P),I=ge.useRef(),j=(0,Vo.A)(i),$=ge.useMemo((()=>({titleId:j})),[j]);return(0,we.jsx)(ol,(0,k.A)({className:(0,mt.A)(M.root,u),closeAfterTransition:!0,components:{Backdrop:tl},componentsProps:{backdrop:(0,k.A)({transitionDuration:S,as:s},l)},disableEscapeKeyDown:d,onClose:g,open:y,ref:t,onClick:e=>{h&&h(e),I.current&&(I.current=null,v&&v(e),g&&g(e,"backdropClick"))},ownerState:P},_,{children:(0,we.jsx)(w,(0,k.A)({appear:!0,in:y,timeout:S,role:"presentation"},C,{children:(0,we.jsx)(rl,{className:(0,mt.A)(M.container),onMouseDown:e=>{I.current=e.target===e.currentTarget},ownerState:P,children:(0,we.jsx)(nl,(0,k.A)({as:b,elevation:24,role:"dialog","aria-describedby":a,"aria-labelledby":j},x,{className:(0,mt.A)(M.paper,x.className),ownerState:P,children:(0,we.jsx)(Qs.Provider,{value:$,children:c})}))})}))}))}));function il(e){return(0,At.Ay)("MuiDialogActions",e)}const sl=(0,xt.A)("MuiDialogActions",["root","spacing"]),ll=["className","disableSpacing"],cl=(0,de.Ay)("div",{name:"MuiDialogActions",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:o}=e;return[t.root,!o.disableSpacing&&t.spacing]}})((({ownerState:e})=>(0,k.A)({display:"flex",alignItems:"center",padding:8,justifyContent:"flex-end",flex:"0 0 auto"},!e.disableSpacing&&{"& > :not(style) ~ :not(style)":{marginLeft:8}}))),ul=ge.forwardRef((function(e,t){const o=(0,vt.b)({props:e,name:"MuiDialogActions"}),{className:r,disableSpacing:n=!1}=o,a=(0,R.A)(o,ll),i=(0,k.A)({},o,{disableSpacing:n}),s=(e=>{const{classes:t,disableSpacing:o}=e,r={root:["root",!o&&"spacing"]};return(0,ft.A)(r,il,t)})(i);return(0,we.jsx)(cl,(0,k.A)({className:(0,mt.A)(s.root,r),ownerState:i,ref:t},a))}));function dl(e){return(0,At.Ay)("MuiDialogContent",e)}const pl=(0,xt.A)("MuiDialogContent",["root","dividers"]);function ml(e){return(0,At.Ay)("MuiDialogTitle",e)}const fl=(0,xt.A)("MuiDialogTitle",["root"]),vl=["className","dividers"],hl=(0,de.Ay)("div",{name:"MuiDialogContent",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:o}=e;return[t.root,o.dividers&&t.dividers]}})((({theme:e,ownerState:t})=>(0,k.A)({flex:"1 1 auto",WebkitOverflowScrolling:"touch",overflowY:"auto",padding:"20px 24px"},t.dividers?{padding:"16px 24px",borderTop:`1px solid ${(e.vars||e).palette.divider}`,borderBottom:`1px solid ${(e.vars||e).palette.divider}`}:{[`.${fl.root} + &`]:{paddingTop:0}}))),gl=ge.forwardRef((function(e,t){const o=(0,vt.b)({props:e,name:"MuiDialogContent"}),{className:r,dividers:n=!1}=o,a=(0,R.A)(o,vl),i=(0,k.A)({},o,{dividers:n}),s=(e=>{const{classes:t,dividers:o}=e,r={root:["root",o&&"dividers"]};return(0,ft.A)(r,dl,t)})(i);return(0,we.jsx)(hl,(0,k.A)({className:(0,mt.A)(s.root,r),ownerState:i,ref:t},a))}));var yl=o("./node_modules/.pnpm/@mui+material@5.16.4_@emotion+react@11.13.0_@types+react@18.3.3_react@18.3.1__@emotion+styled_brxipnv4yvqheosgxcawdxdyay/node_modules/@mui/material/styles/rootShouldForwardProp.js");function bl(e){return(0,At.Ay)("MuiDialogContentText",e)}const xl=(0,xt.A)("MuiDialogContentText",["root"]),Al=["children","className"],wl=(0,de.Ay)(Oo,{shouldForwardProp:e=>(0,yl.A)(e)||"classes"===e,name:"MuiDialogContentText",slot:"Root",overridesResolver:(e,t)=>t.root})({}),Sl=ge.forwardRef((function(e,t){const o=(0,vt.b)({props:e,name:"MuiDialogContentText"}),{className:r}=o,n=(0,R.A)(o,Al),a=(e=>{const{classes:t}=e,o=(0,ft.A)({root:["root"]},bl,t);return(0,k.A)({},t,o)})(n);return(0,we.jsx)(wl,(0,k.A)({component:"p",variant:"body1",color:"text.secondary",ref:t,ownerState:n,className:(0,mt.A)(a.root,r)},o,{classes:a}))})),Cl=["className","id"],_l=(0,de.Ay)(Oo,{name:"MuiDialogTitle",slot:"Root",overridesResolver:(e,t)=>t.root})({padding:"16px 24px",flex:"0 0 auto"}),kl=ge.forwardRef((function(e,t){const o=(0,vt.b)({props:e,name:"MuiDialogTitle"}),{className:r,id:n}=o,a=(0,R.A)(o,Cl),i=o,s=(e=>{const{classes:t}=e;return(0,ft.A)({root:["root"]},ml,t)})(i),{titleId:l=n}=ge.useContext(Qs);return(0,we.jsx)(_l,(0,k.A)({component:"h2",className:(0,mt.A)(s.root,r),ownerState:i,ref:t,variant:"h6",id:null!=n?n:l},a))}));var Rl=o("./node_modules/.pnpm/@mui+material@5.16.4_@emotion+react@11.13.0_@types+react@18.3.3_react@18.3.1__@emotion+styled_brxipnv4yvqheosgxcawdxdyay/node_modules/@mui/material/Divider/dividerClasses.js");const Pl=["absolute","children","className","component","flexItem","light","orientation","role","textAlign","variant"],Ml=(0,de.Ay)("div",{name:"MuiDivider",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:o}=e;return[t.root,o.absolute&&t.absolute,t[o.variant],o.light&&t.light,"vertical"===o.orientation&&t.vertical,o.flexItem&&t.flexItem,o.children&&t.withChildren,o.children&&"vertical"===o.orientation&&t.withChildrenVertical,"right"===o.textAlign&&"vertical"!==o.orientation&&t.textAlignRight,"left"===o.textAlign&&"vertical"!==o.orientation&&t.textAlignLeft]}})((({theme:e,ownerState:t})=>(0,k.A)({margin:0,flexShrink:0,borderWidth:0,borderStyle:"solid",borderColor:(e.vars||e).palette.divider,borderBottomWidth:"thin"},t.absolute&&{position:"absolute",bottom:0,left:0,width:"100%"},t.light&&{borderColor:e.vars?`rgba(${e.vars.palette.dividerChannel} / 0.08)`:(0,De.X4)(e.palette.divider,.08)},"inset"===t.variant&&{marginLeft:72},"middle"===t.variant&&"horizontal"===t.orientation&&{marginLeft:e.spacing(2),marginRight:e.spacing(2)},"middle"===t.variant&&"vertical"===t.orientation&&{marginTop:e.spacing(1),marginBottom:e.spacing(1)},"vertical"===t.orientation&&{height:"100%",borderBottomWidth:0,borderRightWidth:"thin"},t.flexItem&&{alignSelf:"stretch",height:"auto"})),(({ownerState:e})=>(0,k.A)({},e.children&&{display:"flex",whiteSpace:"nowrap",textAlign:"center",border:0,"&::before, &::after":{content:'""',alignSelf:"center"}})),(({theme:e,ownerState:t})=>(0,k.A)({},t.children&&"vertical"!==t.orientation&&{"&::before, &::after":{width:"100%",borderTop:`thin solid ${(e.vars||e).palette.divider}`}})),(({theme:e,ownerState:t})=>(0,k.A)({},t.children&&"vertical"===t.orientation&&{flexDirection:"column","&::before, &::after":{height:"100%",borderLeft:`thin solid ${(e.vars||e).palette.divider}`}})),(({ownerState:e})=>(0,k.A)({},"right"===e.textAlign&&"vertical"!==e.orientation&&{"&::before":{width:"90%"},"&::after":{width:"10%"}},"left"===e.textAlign&&"vertical"!==e.orientation&&{"&::before":{width:"10%"},"&::after":{width:"90%"}}))),Il=(0,de.Ay)("span",{name:"MuiDivider",slot:"Wrapper",overridesResolver:(e,t)=>{const{ownerState:o}=e;return[t.wrapper,"vertical"===o.orientation&&t.wrapperVertical]}})((({theme:e,ownerState:t})=>(0,k.A)({display:"inline-block",paddingLeft:`calc(${e.spacing(1)} * 1.2)`,paddingRight:`calc(${e.spacing(1)} * 1.2)`},"vertical"===t.orientation&&{paddingTop:`calc(${e.spacing(1)} * 1.2)`,paddingBottom:`calc(${e.spacing(1)} * 1.2)`}))),jl=ge.forwardRef((function(e,t){const o=(0,vt.b)({props:e,name:"MuiDivider"}),{absolute:r=!1,children:n,className:a,component:i=(n?"div":"hr"),flexItem:s=!1,light:l=!1,orientation:c="horizontal",role:u=("hr"!==i?"separator":void 0),textAlign:d="center",variant:p="fullWidth"}=o,m=(0,R.A)(o,Pl),f=(0,k.A)({},o,{absolute:r,component:i,flexItem:s,light:l,orientation:c,role:u,textAlign:d,variant:p}),v=(e=>{const{absolute:t,children:o,classes:r,flexItem:n,light:a,orientation:i,textAlign:s,variant:l}=e,c={root:["root",t&&"absolute",l,a&&"light","vertical"===i&&"vertical",n&&"flexItem",o&&"withChildren",o&&"vertical"===i&&"withChildrenVertical","right"===s&&"vertical"!==i&&"textAlignRight","left"===s&&"vertical"!==i&&"textAlignLeft"],wrapper:["wrapper","vertical"===i&&"wrapperVertical"]};return(0,ft.A)(c,Rl.K,r)})(f);return(0,we.jsx)(Ml,(0,k.A)({as:i,className:(0,mt.A)(v.root,a),role:u,ref:t,ownerState:f},m,{children:n?(0,we.jsx)(Il,{className:v.wrapper,ownerState:f,children:n}):null}))}));jl.muiSkipListHighlight=!0;const $l=jl;var Tl=o("./node_modules/.pnpm/@mui+system@5.16.4_@emotion+react@11.13.0_@types+react@18.3.3_react@18.3.1__@emotion+styled@1_6pxsshf4op6ciexesjgj77xooe/node_modules/@mui/system/esm/RtlProvider/index.js"),Ll=o("./node_modules/.pnpm/@mui+material@5.16.4_@emotion+react@11.13.0_@types+react@18.3.3_react@18.3.1__@emotion+styled_brxipnv4yvqheosgxcawdxdyay/node_modules/@mui/material/utils/debounce.js"),Ol=o("./node_modules/.pnpm/@mui+material@5.16.4_@emotion+react@11.13.0_@types+react@18.3.3_react@18.3.1__@emotion+styled_brxipnv4yvqheosgxcawdxdyay/node_modules/@mui/material/utils/ownerWindow.js");const El=["addEndListener","appear","children","container","direction","easing","in","onEnter","onEntered","onEntering","onExit","onExited","onExiting","style","timeout","TransitionComponent"];function Bl(e,t,o){var r;const n=function(e,t,o){const r=t.getBoundingClientRect(),n=o&&o.getBoundingClientRect(),a=(0,Ol.A)(t);let i;if(t.fakeTransform)i=t.fakeTransform;else{const e=a.getComputedStyle(t);i=e.getPropertyValue("-webkit-transform")||e.getPropertyValue("transform")}let s=0,l=0;if(i&&"none"!==i&&"string"==typeof i){const e=i.split("(")[1].split(")")[0].split(",");s=parseInt(e[4],10),l=parseInt(e[5],10)}return"left"===e?n?`translateX(${n.right+s-r.left}px)`:`translateX(${a.innerWidth+s-r.left}px)`:"right"===e?n?`translateX(-${r.right-n.left-s}px)`:`translateX(-${r.left+r.width-s}px)`:"up"===e?n?`translateY(${n.bottom+l-r.top}px)`:`translateY(${a.innerHeight+l-r.top}px)`:n?`translateY(-${r.top-n.top+r.height-l}px)`:`translateY(-${r.top+r.height-l}px)`}(e,t,"function"==typeof(r=o)?r():r);n&&(t.style.webkitTransform=n,t.style.transform=n)}const Nl=ge.forwardRef((function(e,t){const o=(0,ne.A)(),r={enter:o.transitions.easing.easeOut,exit:o.transitions.easing.sharp},n={enter:o.transitions.duration.enteringScreen,exit:o.transitions.duration.leavingScreen},{addEndListener:a,appear:i=!0,children:s,container:l,direction:c="down",easing:u=r,in:d,onEnter:p,onEntered:m,onEntering:f,onExit:v,onExited:h,onExiting:g,style:y,timeout:b=n,TransitionComponent:x=ht.Ay}=e,A=(0,R.A)(e,El),w=ge.useRef(null),S=(0,bt.A)(s.ref,w,t),C=e=>t=>{e&&(void 0===t?e(w.current):e(w.current,t))},_=C(((e,t)=>{Bl(c,e,l),(0,yt.q)(e),p&&p(e,t)})),P=C(((e,t)=>{const r=(0,yt.c)({timeout:b,style:y,easing:u},{mode:"enter"});e.style.webkitTransition=o.transitions.create("-webkit-transform",(0,k.A)({},r)),e.style.transition=o.transitions.create("transform",(0,k.A)({},r)),e.style.webkitTransform="none",e.style.transform="none",f&&f(e,t)})),M=C(m),I=C(g),j=C((e=>{const t=(0,yt.c)({timeout:b,style:y,easing:u},{mode:"exit"});e.style.webkitTransition=o.transitions.create("-webkit-transform",t),e.style.transition=o.transitions.create("transform",t),Bl(c,e,l),v&&v(e)})),$=C((e=>{e.style.webkitTransition="",e.style.transition="",h&&h(e)})),T=ge.useCallback((()=>{w.current&&Bl(c,w.current,l)}),[c,l]);return ge.useEffect((()=>{if(d||"down"===c||"right"===c)return;const e=(0,Ll.A)((()=>{w.current&&Bl(c,w.current,l)})),t=(0,Ol.A)(w.current);return t.addEventListener("resize",e),()=>{e.clear(),t.removeEventListener("resize",e)}}),[c,d,l]),ge.useEffect((()=>{d||T()}),[d,T]),(0,we.jsx)(x,(0,k.A)({nodeRef:w,onEnter:_,onEntered:M,onEntering:P,onExit:j,onExited:$,onExiting:I,addEndListener:e=>{a&&a(w.current,e)},appear:i,in:d,timeout:b},A,{children:(e,t)=>ge.cloneElement(s,(0,k.A)({ref:S,style:(0,k.A)({visibility:"exited"!==e||d?void 0:"hidden"},y,s.props.style)},t))}))})),zl=Nl;function Dl(e){return(0,At.Ay)("MuiDrawer",e)}const Fl=(0,xt.A)("MuiDrawer",["root","docked","paper","paperAnchorLeft","paperAnchorRight","paperAnchorTop","paperAnchorBottom","paperAnchorDockedLeft","paperAnchorDockedRight","paperAnchorDockedTop","paperAnchorDockedBottom","modal"]),Wl=["BackdropProps"],Vl=["anchor","BackdropProps","children","className","elevation","hideBackdrop","ModalProps","onClose","open","PaperProps","SlideProps","TransitionComponent","transitionDuration","variant"],Hl=(e,t)=>{const{ownerState:o}=e;return[t.root,("permanent"===o.variant||"persistent"===o.variant)&&t.docked,t.modal]},Ul=(0,de.Ay)(Ys.A,{name:"MuiDrawer",slot:"Root",overridesResolver:Hl})((({theme:e})=>({zIndex:(e.vars||e).zIndex.drawer}))),ql=(0,de.Ay)("div",{shouldForwardProp:yl.A,name:"MuiDrawer",slot:"Docked",skipVariantsResolver:!1,overridesResolver:Hl})({flex:"0 0 auto"}),Gl=(0,de.Ay)(It.A,{name:"MuiDrawer",slot:"Paper",overridesResolver:(e,t)=>{const{ownerState:o}=e;return[t.paper,t[`paperAnchor${(0,uo.A)(o.anchor)}`],"temporary"!==o.variant&&t[`paperAnchorDocked${(0,uo.A)(o.anchor)}`]]}})((({theme:e,ownerState:t})=>(0,k.A)({overflowY:"auto",display:"flex",flexDirection:"column",height:"100%",flex:"1 0 auto",zIndex:(e.vars||e).zIndex.drawer,WebkitOverflowScrolling:"touch",position:"fixed",top:0,outline:0},"left"===t.anchor&&{left:0},"top"===t.anchor&&{top:0,left:0,right:0,height:"auto",maxHeight:"100%"},"right"===t.anchor&&{right:0},"bottom"===t.anchor&&{top:"auto",left:0,bottom:0,right:0,height:"auto",maxHeight:"100%"},"left"===t.anchor&&"temporary"!==t.variant&&{borderRight:`1px solid ${(e.vars||e).palette.divider}`},"top"===t.anchor&&"temporary"!==t.variant&&{borderBottom:`1px solid ${(e.vars||e).palette.divider}`},"right"===t.anchor&&"temporary"!==t.variant&&{borderLeft:`1px solid ${(e.vars||e).palette.divider}`},"bottom"===t.anchor&&"temporary"!==t.variant&&{borderTop:`1px solid ${(e.vars||e).palette.divider}`}))),Xl={left:"right",right:"left",top:"down",bottom:"up"};function Yl(e){return-1!==["left","right"].indexOf(e)}function Kl({direction:e},t){return"rtl"===e&&Yl(t)?Xl[t]:t}const Zl=ge.forwardRef((function(e,t){const o=(0,vt.b)({props:e,name:"MuiDrawer"}),r=(0,ne.A)(),n=(0,Tl.I)(),a={enter:r.transitions.duration.enteringScreen,exit:r.transitions.duration.leavingScreen},{anchor:i="left",BackdropProps:s,children:l,className:c,elevation:u=16,hideBackdrop:d=!1,ModalProps:{BackdropProps:p}={},onClose:m,open:f=!1,PaperProps:v={},SlideProps:h,TransitionComponent:g=zl,transitionDuration:y=a,variant:b="temporary"}=o,x=(0,R.A)(o.ModalProps,Wl),A=(0,R.A)(o,Vl),w=ge.useRef(!1);ge.useEffect((()=>{w.current=!0}),[]);const S=Kl({direction:n?"rtl":"ltr"},i),C=i,_=(0,k.A)({},o,{anchor:C,elevation:u,open:f,variant:b},A),P=(e=>{const{classes:t,anchor:o,variant:r}=e,n={root:["root"],docked:[("permanent"===r||"persistent"===r)&&"docked"],modal:["modal"],paper:["paper",`paperAnchor${(0,uo.A)(o)}`,"temporary"!==r&&`paperAnchorDocked${(0,uo.A)(o)}`]};return(0,ft.A)(n,Dl,t)})(_),M=(0,we.jsx)(Gl,(0,k.A)({elevation:"temporary"===b?u:0,square:!0},v,{className:(0,mt.A)(P.paper,v.className),ownerState:_,children:l}));if("permanent"===b)return(0,we.jsx)(ql,(0,k.A)({className:(0,mt.A)(P.root,P.docked,c),ownerState:_,ref:t},A,{children:M}));const I=(0,we.jsx)(g,(0,k.A)({in:f,direction:Xl[S],timeout:y,appear:w.current},h,{children:M}));return"persistent"===b?(0,we.jsx)(ql,(0,k.A)({className:(0,mt.A)(P.root,P.docked,c),ownerState:_,ref:t},A,{children:I})):(0,we.jsx)(Ul,(0,k.A)({BackdropProps:(0,k.A)({},s,p,{transitionDuration:y}),className:(0,mt.A)(P.root,P.modal,c),open:f,ownerState:_,onClose:m,hideBackdrop:d,ref:t},A,x,{children:I}))}));function Jl(e){return(0,At.Ay)("MuiFab",e)}const Ql=(0,xt.A)("MuiFab",["root","primary","secondary","extended","circular","focusVisible","disabled","colorInherit","sizeSmall","sizeMedium","sizeLarge","info","error","warning","success"]),ec=["children","className","color","component","disabled","disableFocusRipple","focusVisibleClassName","size","variant"],tc=(0,de.Ay)(oo.A,{name:"MuiFab",slot:"Root",shouldForwardProp:e=>(0,yl.A)(e)||"classes"===e,overridesResolver:(e,t)=>{const{ownerState:o}=e;return[t.root,t[o.variant],t[`size${(0,uo.A)(o.size)}`],"inherit"===o.color&&t.colorInherit,t[(0,uo.A)(o.size)],t[o.color]]}})((({theme:e,ownerState:t})=>{var o,r;return(0,k.A)({},e.typography.button,{minHeight:36,transition:e.transitions.create(["background-color","box-shadow","border-color"],{duration:e.transitions.duration.short}),borderRadius:"50%",padding:0,minWidth:0,width:56,height:56,zIndex:(e.vars||e).zIndex.fab,boxShadow:(e.vars||e).shadows[6],"&:active":{boxShadow:(e.vars||e).shadows[12]},color:e.vars?e.vars.palette.text.primary:null==(o=(r=e.palette).getContrastText)?void 0:o.call(r,e.palette.grey[300]),backgroundColor:(e.vars||e).palette.grey[300],"&:hover":{backgroundColor:(e.vars||e).palette.grey.A100,"@media (hover: none)":{backgroundColor:(e.vars||e).palette.grey[300]},textDecoration:"none"},[`&.${Ql.focusVisible}`]:{boxShadow:(e.vars||e).shadows[6]}},"small"===t.size&&{width:40,height:40},"medium"===t.size&&{width:48,height:48},"extended"===t.variant&&{borderRadius:24,padding:"0 16px",width:"auto",minHeight:"auto",minWidth:48,height:48},"extended"===t.variant&&"small"===t.size&&{width:"auto",padding:"0 8px",borderRadius:17,minWidth:34,height:34},"extended"===t.variant&&"medium"===t.size&&{width:"auto",padding:"0 16px",borderRadius:20,minWidth:40,height:40},"inherit"===t.color&&{color:"inherit"})}),(({theme:e,ownerState:t})=>(0,k.A)({},"inherit"!==t.color&&"default"!==t.color&&null!=(e.vars||e).palette[t.color]&&{color:(e.vars||e).palette[t.color].contrastText,backgroundColor:(e.vars||e).palette[t.color].main,"&:hover":{backgroundColor:(e.vars||e).palette[t.color].dark,"@media (hover: none)":{backgroundColor:(e.vars||e).palette[t.color].main}}})),(({theme:e})=>({[`&.${Ql.disabled}`]:{color:(e.vars||e).palette.action.disabled,boxShadow:(e.vars||e).shadows[0],backgroundColor:(e.vars||e).palette.action.disabledBackground}}))),oc=ge.forwardRef((function(e,t){const o=(0,vt.b)({props:e,name:"MuiFab"}),{children:r,className:n,color:a="default",component:i="button",disabled:s=!1,disableFocusRipple:l=!1,focusVisibleClassName:c,size:u="large",variant:d="circular"}=o,p=(0,R.A)(o,ec),m=(0,k.A)({},o,{color:a,component:i,disabled:s,disableFocusRipple:l,size:u,variant:d}),f=(e=>{const{color:t,variant:o,classes:r,size:n}=e,a={root:["root",o,`size${(0,uo.A)(n)}`,"inherit"===t?"colorInherit":t]},i=(0,ft.A)(a,Jl,r);return(0,k.A)({},r,i)})(m);return(0,we.jsx)(tc,(0,k.A)({className:(0,mt.A)(f.root,n),component:i,disabled:s,focusRipple:!l,focusVisibleClassName:(0,mt.A)(f.focusVisible,c),ownerState:m,ref:t},p,{classes:f,children:r}))}));var rc=o("./node_modules/.pnpm/@mui+utils@5.16.4_@types+react@18.3.3_react@18.3.1/node_modules/@mui/utils/esm/isHostComponent/isHostComponent.js"),nc=o("./node_modules/.pnpm/@mui+utils@5.16.4_@types+react@18.3.3_react@18.3.1/node_modules/@mui/utils/esm/ownerWindow/ownerWindow.js"),ac=o("./node_modules/.pnpm/@mui+utils@5.16.4_@types+react@18.3.3_react@18.3.1/node_modules/@mui/utils/esm/debounce/debounce.js");const ic=["onChange","maxRows","minRows","style","value"];function sc(e){return parseInt(e,10)||0}const lc={visibility:"hidden",position:"absolute",overflow:"hidden",height:0,top:0,left:0,transform:"translateZ(0)"},cc=ge.forwardRef((function(e,t){const{onChange:o,maxRows:r,minRows:n=1,style:a,value:i}=e,s=(0,R.A)(e,ic),{current:l}=ge.useRef(null!=i),c=ge.useRef(null),u=(0,Tt.A)(t,c),d=ge.useRef(null),p=ge.useRef(null),m=ge.useCallback((()=>{const t=c.current,o=(0,nc.A)(t).getComputedStyle(t);if("0px"===o.width)return{outerHeightStyle:0,overflowing:!1};const a=p.current;a.style.width=o.width,a.value=t.value||e.placeholder||"x","\n"===a.value.slice(-1)&&(a.value+=" ");const i=o.boxSizing,s=sc(o.paddingBottom)+sc(o.paddingTop),l=sc(o.borderBottomWidth)+sc(o.borderTopWidth),u=a.scrollHeight;a.value="x";const d=a.scrollHeight;let m=u;return n&&(m=Math.max(Number(n)*d,m)),r&&(m=Math.min(Number(r)*d,m)),m=Math.max(m,d),{outerHeightStyle:m+("border-box"===i?s+l:0),overflowing:Math.abs(m-u)<=1}}),[r,n,e.placeholder]),f=ge.useCallback((()=>{const e=m();if(null==(t=e)||0===Object.keys(t).length||0===t.outerHeightStyle&&!t.overflowing)return;var t;const o=e.outerHeightStyle,r=c.current;d.current!==o&&(d.current=o,r.style.height=`${o}px`),r.style.overflow=e.overflowing?"hidden":""}),[m]);return(0,tr.A)((()=>{const e=()=>{f()};const t=(0,ac.A)(e),o=c.current,r=(0,nc.A)(o);let n;return r.addEventListener("resize",t),"undefined"!=typeof ResizeObserver&&(n=new ResizeObserver(e),n.observe(o)),()=>{t.clear(),cancelAnimationFrame(undefined),r.removeEventListener("resize",t),n&&n.disconnect()}}),[m,f]),(0,tr.A)((()=>{f()})),(0,we.jsxs)(ge.Fragment,{children:[(0,we.jsx)("textarea",(0,k.A)({value:i,onChange:e=>{l||f(),o&&o(e)},ref:u,rows:n,style:a},s)),(0,we.jsx)("textarea",{"aria-hidden":!0,className:e.className,readOnly:!0,ref:p,tabIndex:-1,style:(0,k.A)({},lc,a,{paddingTop:0,paddingBottom:0})})]})})),uc=cc;function dc({props:e,states:t,muiFormControl:o}){return t.reduce(((t,r)=>(t[r]=e[r],o&&void 0===e[r]&&(t[r]=o[r]),t)),{})}var pc=o("./node_modules/.pnpm/@mui+material@5.16.4_@emotion+react@11.13.0_@types+react@18.3.3_react@18.3.1__@emotion+styled_brxipnv4yvqheosgxcawdxdyay/node_modules/@mui/material/FormControl/FormControlContext.js"),mc=o("./node_modules/.pnpm/@mui+material@5.16.4_@emotion+react@11.13.0_@types+react@18.3.3_react@18.3.1__@emotion+styled_brxipnv4yvqheosgxcawdxdyay/node_modules/@mui/material/FormControl/useFormControl.js"),fc=o("./node_modules/.pnpm/@mui+material@5.16.4_@emotion+react@11.13.0_@types+react@18.3.3_react@18.3.1__@emotion+styled_brxipnv4yvqheosgxcawdxdyay/node_modules/@mui/material/utils/useEnhancedEffect.js"),vc=o("./node_modules/.pnpm/@mui+material@5.16.4_@emotion+react@11.13.0_@types+react@18.3.3_react@18.3.1__@emotion+styled_brxipnv4yvqheosgxcawdxdyay/node_modules/@mui/material/GlobalStyles/GlobalStyles.js");function hc(e){return null!=e&&!(Array.isArray(e)&&0===e.length)}function gc(e,t=!1){return e&&(hc(e.value)&&""!==e.value||t&&hc(e.defaultValue)&&""!==e.defaultValue)}const yc=["aria-describedby","autoComplete","autoFocus","className","color","components","componentsProps","defaultValue","disabled","disableInjectingGlobalStyles","endAdornment","error","fullWidth","id","inputComponent","inputProps","inputRef","margin","maxRows","minRows","multiline","name","onBlur","onChange","onClick","onFocus","onKeyDown","onKeyUp","placeholder","readOnly","renderSuffix","rows","size","slotProps","slots","startAdornment","type","value"],bc=(e,t)=>{const{ownerState:o}=e;return[t.root,o.formControl&&t.formControl,o.startAdornment&&t.adornedStart,o.endAdornment&&t.adornedEnd,o.error&&t.error,"small"===o.size&&t.sizeSmall,o.multiline&&t.multiline,o.color&&t[`color${(0,uo.A)(o.color)}`],o.fullWidth&&t.fullWidth,o.hiddenLabel&&t.hiddenLabel]},xc=(e,t)=>{const{ownerState:o}=e;return[t.input,"small"===o.size&&t.inputSizeSmall,o.multiline&&t.inputMultiline,"search"===o.type&&t.inputTypeSearch,o.startAdornment&&t.inputAdornedStart,o.endAdornment&&t.inputAdornedEnd,o.hiddenLabel&&t.inputHiddenLabel]},Ac=(0,de.Ay)("div",{name:"MuiInputBase",slot:"Root",overridesResolver:bc})((({theme:e,ownerState:t})=>(0,k.A)({},e.typography.body1,{color:(e.vars||e).palette.text.primary,lineHeight:"1.4375em",boxSizing:"border-box",position:"relative",cursor:"text",display:"inline-flex",alignItems:"center",[`&.${Fn.disabled}`]:{color:(e.vars||e).palette.text.disabled,cursor:"default"}},t.multiline&&(0,k.A)({padding:"4px 0 5px"},"small"===t.size&&{paddingTop:1}),t.fullWidth&&{width:"100%"}))),wc=(0,de.Ay)("input",{name:"MuiInputBase",slot:"Input",overridesResolver:xc})((({theme:e,ownerState:t})=>{const o="light"===e.palette.mode,r=(0,k.A)({color:"currentColor"},e.vars?{opacity:e.vars.opacity.inputPlaceholder}:{opacity:o?.42:.5},{transition:e.transitions.create("opacity",{duration:e.transitions.duration.shorter})}),n={opacity:"0 !important"},a=e.vars?{opacity:e.vars.opacity.inputPlaceholder}:{opacity:o?.42:.5};return(0,k.A)({font:"inherit",letterSpacing:"inherit",color:"currentColor",padding:"4px 0 5px",border:0,boxSizing:"content-box",background:"none",height:"1.4375em",margin:0,WebkitTapHighlightColor:"transparent",display:"block",minWidth:0,width:"100%",animationName:"mui-auto-fill-cancel",animationDuration:"10ms","&::-webkit-input-placeholder":r,"&::-moz-placeholder":r,"&:-ms-input-placeholder":r,"&::-ms-input-placeholder":r,"&:focus":{outline:0},"&:invalid":{boxShadow:"none"},"&::-webkit-search-decoration":{WebkitAppearance:"none"},[`label[data-shrink=false] + .${Fn.formControl} &`]:{"&::-webkit-input-placeholder":n,"&::-moz-placeholder":n,"&:-ms-input-placeholder":n,"&::-ms-input-placeholder":n,"&:focus::-webkit-input-placeholder":a,"&:focus::-moz-placeholder":a,"&:focus:-ms-input-placeholder":a,"&:focus::-ms-input-placeholder":a},[`&.${Fn.disabled}`]:{opacity:1,WebkitTextFillColor:(e.vars||e).palette.text.disabled},"&:-webkit-autofill":{animationDuration:"5000s",animationName:"mui-auto-fill"}},"small"===t.size&&{paddingTop:1},t.multiline&&{height:"auto",resize:"none",padding:0,paddingTop:0},"search"===t.type&&{MozAppearance:"textfield"})})),Sc=(0,we.jsx)(vc.A,{styles:{"@keyframes mui-auto-fill":{from:{display:"block"}},"@keyframes mui-auto-fill-cancel":{from:{display:"block"}}}}),Cc=ge.forwardRef((function(e,t){var o;const r=(0,vt.b)({props:e,name:"MuiInputBase"}),{"aria-describedby":n,autoComplete:a,autoFocus:i,className:s,components:l={},componentsProps:c={},defaultValue:u,disabled:d,disableInjectingGlobalStyles:p,endAdornment:m,fullWidth:f=!1,id:v,inputComponent:h="input",inputProps:g={},inputRef:y,maxRows:b,minRows:x,multiline:A=!1,name:w,onBlur:S,onChange:_,onClick:P,onFocus:M,onKeyDown:I,onKeyUp:j,placeholder:$,readOnly:T,renderSuffix:L,rows:O,slotProps:E={},slots:B={},startAdornment:N,type:z="text",value:D}=r,F=(0,R.A)(r,yc),W=null!=g.value?g.value:D,{current:V}=ge.useRef(null!=W),H=ge.useRef(),U=ge.useCallback((e=>{}),[]),q=(0,bt.A)(H,y,g.ref,U),[G,X]=ge.useState(!1),Y=(0,mc.A)(),K=dc({props:r,muiFormControl:Y,states:["color","disabled","error","hiddenLabel","size","required","filled"]});K.focused=Y?Y.focused:G,ge.useEffect((()=>{!Y&&d&&G&&(X(!1),S&&S())}),[Y,d,G,S]);const Z=Y&&Y.onFilled,J=Y&&Y.onEmpty,Q=ge.useCallback((e=>{gc(e)?Z&&Z():J&&J()}),[Z,J]);(0,fc.A)((()=>{V&&Q({value:W})}),[W,Q,V]),ge.useEffect((()=>{Q(H.current)}),[]);let ee=h,te=g;A&&"input"===ee&&(te=O?(0,k.A)({type:void 0,minRows:O,maxRows:O},te):(0,k.A)({type:void 0,maxRows:b,minRows:x},te),ee=uc),ge.useEffect((()=>{Y&&Y.setAdornedStart(Boolean(N))}),[Y,N]);const oe=(0,k.A)({},r,{color:K.color||"primary",disabled:K.disabled,endAdornment:m,error:K.error,focused:K.focused,formControl:Y,fullWidth:f,hiddenLabel:K.hiddenLabel,multiline:A,size:K.size,startAdornment:N,type:z}),re=(e=>{const{classes:t,color:o,disabled:r,error:n,endAdornment:a,focused:i,formControl:s,fullWidth:l,hiddenLabel:c,multiline:u,readOnly:d,size:p,startAdornment:m,type:f}=e,v={root:["root",`color${(0,uo.A)(o)}`,r&&"disabled",n&&"error",l&&"fullWidth",i&&"focused",s&&"formControl",p&&"medium"!==p&&`size${(0,uo.A)(p)}`,u&&"multiline",m&&"adornedStart",a&&"adornedEnd",c&&"hiddenLabel",d&&"readOnly"],input:["input",r&&"disabled","search"===f&&"inputTypeSearch",u&&"inputMultiline","small"===p&&"inputSizeSmall",c&&"inputHiddenLabel",m&&"inputAdornedStart",a&&"inputAdornedEnd",d&&"readOnly"]};return(0,ft.A)(v,Dn,t)})(oe),ne=B.root||l.Root||Ac,ae=E.root||c.root||{},ie=B.input||l.Input||wc;return te=(0,k.A)({},te,null!=(o=E.input)?o:c.input),(0,we.jsxs)(ge.Fragment,{children:[!p&&Sc,(0,we.jsxs)(ne,(0,k.A)({},ae,!(0,rc.A)(ne)&&{ownerState:(0,k.A)({},oe,ae.ownerState)},{ref:t,onClick:e=>{H.current&&e.currentTarget===e.target&&H.current.focus(),P&&P(e)}},F,{className:(0,mt.A)(re.root,ae.className,s,T&&"MuiInputBase-readOnly"),children:[N,(0,we.jsx)(pc.A.Provider,{value:null,children:(0,we.jsx)(ie,(0,k.A)({ownerState:oe,"aria-invalid":K.error,"aria-describedby":n,autoComplete:a,autoFocus:i,defaultValue:u,disabled:K.disabled,id:v,onAnimationStart:e=>{Q("mui-auto-fill-cancel"===e.animationName?H.current:{value:"x"})},name:w,placeholder:$,readOnly:T,required:K.required,rows:O,value:W,onKeyDown:I,onKeyUp:j,type:z},te,!(0,rc.A)(ie)&&{as:ee,ownerState:(0,k.A)({},oe,te.ownerState)},{ref:q,className:(0,mt.A)(re.input,te.className,T&&"MuiInputBase-readOnly"),onBlur:e=>{S&&S(e),g.onBlur&&g.onBlur(e),Y&&Y.onBlur?Y.onBlur(e):X(!1)},onChange:(e,...t)=>{if(!V){const t=e.target||H.current;if(null==t)throw new Error((0,C.A)(1));Q({value:t.value})}g.onChange&&g.onChange(e,...t),_&&_(e,...t)},onFocus:e=>{K.disabled?e.stopPropagation():(M&&M(e),g.onFocus&&g.onFocus(e),Y&&Y.onFocus?Y.onFocus(e):X(!0))}}))}),m,L?L((0,k.A)({},K,{startAdornment:N})):null]}))]})})),_c=Cc,kc=["disableUnderline","components","componentsProps","fullWidth","hiddenLabel","inputComponent","multiline","slotProps","slots","type"],Rc=(0,de.Ay)(Ac,{shouldForwardProp:e=>(0,yl.A)(e)||"classes"===e,name:"MuiFilledInput",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:o}=e;return[...bc(e,t),!o.disableUnderline&&t.underline]}})((({theme:e,ownerState:t})=>{var o;const r="light"===e.palette.mode,n=r?"rgba(0, 0, 0, 0.42)":"rgba(255, 255, 255, 0.7)",a=r?"rgba(0, 0, 0, 0.06)":"rgba(255, 255, 255, 0.09)",i=r?"rgba(0, 0, 0, 0.09)":"rgba(255, 255, 255, 0.13)",s=r?"rgba(0, 0, 0, 0.12)":"rgba(255, 255, 255, 0.12)";return(0,k.A)({position:"relative",backgroundColor:e.vars?e.vars.palette.FilledInput.bg:a,borderTopLeftRadius:(e.vars||e).shape.borderRadius,borderTopRightRadius:(e.vars||e).shape.borderRadius,transition:e.transitions.create("background-color",{duration:e.transitions.duration.shorter,easing:e.transitions.easing.easeOut}),"&:hover":{backgroundColor:e.vars?e.vars.palette.FilledInput.hoverBg:i,"@media (hover: none)":{backgroundColor:e.vars?e.vars.palette.FilledInput.bg:a}},[`&.${Gn.focused}`]:{backgroundColor:e.vars?e.vars.palette.FilledInput.bg:a},[`&.${Gn.disabled}`]:{backgroundColor:e.vars?e.vars.palette.FilledInput.disabledBg:s}},!t.disableUnderline&&{"&::after":{borderBottom:`2px solid ${null==(o=(e.vars||e).palette[t.color||"primary"])?void 0:o.main}`,left:0,bottom:0,content:'""',position:"absolute",right:0,transform:"scaleX(0)",transition:e.transitions.create("transform",{duration:e.transitions.duration.shorter,easing:e.transitions.easing.easeOut}),pointerEvents:"none"},[`&.${Gn.focused}:after`]:{transform:"scaleX(1) translateX(0)"},[`&.${Gn.error}`]:{"&::before, &::after":{borderBottomColor:(e.vars||e).palette.error.main}},"&::before":{borderBottom:`1px solid ${e.vars?`rgba(${e.vars.palette.common.onBackgroundChannel} / ${e.vars.opacity.inputUnderline})`:n}`,left:0,bottom:0,content:'"\\00a0"',position:"absolute",right:0,transition:e.transitions.create("border-bottom-color",{duration:e.transitions.duration.shorter}),pointerEvents:"none"},[`&:hover:not(.${Gn.disabled}, .${Gn.error}):before`]:{borderBottom:`1px solid ${(e.vars||e).palette.text.primary}`},[`&.${Gn.disabled}:before`]:{borderBottomStyle:"dotted"}},t.startAdornment&&{paddingLeft:12},t.endAdornment&&{paddingRight:12},t.multiline&&(0,k.A)({padding:"25px 12px 8px"},"small"===t.size&&{paddingTop:21,paddingBottom:4},t.hiddenLabel&&{paddingTop:16,paddingBottom:17},t.hiddenLabel&&"small"===t.size&&{paddingTop:8,paddingBottom:9}))})),Pc=(0,de.Ay)(wc,{name:"MuiFilledInput",slot:"Input",overridesResolver:xc})((({theme:e,ownerState:t})=>(0,k.A)({paddingTop:25,paddingRight:12,paddingBottom:8,paddingLeft:12},!e.vars&&{"&:-webkit-autofill":{WebkitBoxShadow:"light"===e.palette.mode?null:"0 0 0 100px #266798 inset",WebkitTextFillColor:"light"===e.palette.mode?null:"#fff",caretColor:"light"===e.palette.mode?null:"#fff",borderTopLeftRadius:"inherit",borderTopRightRadius:"inherit"}},e.vars&&{"&:-webkit-autofill":{borderTopLeftRadius:"inherit",borderTopRightRadius:"inherit"},[e.getColorSchemeSelector("dark")]:{"&:-webkit-autofill":{WebkitBoxShadow:"0 0 0 100px #266798 inset",WebkitTextFillColor:"#fff",caretColor:"#fff"}}},"small"===t.size&&{paddingTop:21,paddingBottom:4},t.hiddenLabel&&{paddingTop:16,paddingBottom:17},t.startAdornment&&{paddingLeft:0},t.endAdornment&&{paddingRight:0},t.hiddenLabel&&"small"===t.size&&{paddingTop:8,paddingBottom:9},t.multiline&&{paddingTop:0,paddingBottom:0,paddingLeft:0,paddingRight:0}))),Mc=ge.forwardRef((function(e,t){var o,r,n,a;const i=(0,vt.b)({props:e,name:"MuiFilledInput"}),{components:s={},componentsProps:l,fullWidth:c=!1,inputComponent:u="input",multiline:d=!1,slotProps:p,slots:m={},type:f="text"}=i,v=(0,R.A)(i,kc),h=(0,k.A)({},i,{fullWidth:c,inputComponent:u,multiline:d,type:f}),g=(e=>{const{classes:t,disableUnderline:o}=e,r={root:["root",!o&&"underline"],input:["input"]},n=(0,ft.A)(r,qn,t);return(0,k.A)({},t,n)})(i),y={root:{ownerState:h},input:{ownerState:h}},b=(null!=p?p:l)?(0,X.A)(y,null!=p?p:l):y,x=null!=(o=null!=(r=m.root)?r:s.Root)?o:Rc,A=null!=(n=null!=(a=m.input)?a:s.Input)?n:Pc;return(0,we.jsx)(_c,(0,k.A)({slots:{root:x,input:A},componentsProps:b,fullWidth:c,inputComponent:u,multiline:d,ref:t,type:f},v,{classes:g}))}));Mc.muiName="Input";const Ic=Mc;var jc=o("./node_modules/.pnpm/@mui+material@5.16.4_@emotion+react@11.13.0_@types+react@18.3.3_react@18.3.1__@emotion+styled_brxipnv4yvqheosgxcawdxdyay/node_modules/@mui/material/utils/isMuiElement.js");function $c(e){return(0,At.Ay)("MuiFormControl",e)}const Tc=(0,xt.A)("MuiFormControl",["root","marginNone","marginNormal","marginDense","fullWidth","disabled"]),Lc=["children","className","color","component","disabled","error","focused","fullWidth","hiddenLabel","margin","required","size","variant"],Oc=(0,de.Ay)("div",{name:"MuiFormControl",slot:"Root",overridesResolver:({ownerState:e},t)=>(0,k.A)({},t.root,t[`margin${(0,uo.A)(e.margin)}`],e.fullWidth&&t.fullWidth)})((({ownerState:e})=>(0,k.A)({display:"inline-flex",flexDirection:"column",position:"relative",minWidth:0,padding:0,margin:0,border:0,verticalAlign:"top"},"normal"===e.margin&&{marginTop:16,marginBottom:8},"dense"===e.margin&&{marginTop:8,marginBottom:4},e.fullWidth&&{width:"100%"}))),Ec=ge.forwardRef((function(e,t){const o=(0,vt.b)({props:e,name:"MuiFormControl"}),{children:r,className:n,color:a="primary",component:i="div",disabled:s=!1,error:l=!1,focused:c,fullWidth:u=!1,hiddenLabel:d=!1,margin:p="none",required:m=!1,size:f="medium",variant:v="outlined"}=o,h=(0,R.A)(o,Lc),g=(0,k.A)({},o,{color:a,component:i,disabled:s,error:l,fullWidth:u,hiddenLabel:d,margin:p,required:m,size:f,variant:v}),y=(e=>{const{classes:t,margin:o,fullWidth:r}=e,n={root:["root","none"!==o&&`margin${(0,uo.A)(o)}`,r&&"fullWidth"]};return(0,ft.A)(n,$c,t)})(g),[b,x]=ge.useState((()=>{let e=!1;return r&&ge.Children.forEach(r,(t=>{if(!(0,jc.A)(t,["Input","Select"]))return;const o=(0,jc.A)(t,["Select"])?t.props.input:t;o&&o.props.startAdornment&&(e=!0)})),e})),[A,w]=ge.useState((()=>{let e=!1;return r&&ge.Children.forEach(r,(t=>{(0,jc.A)(t,["Input","Select"])&&(gc(t.props,!0)||gc(t.props.inputProps,!0))&&(e=!0)})),e})),[S,C]=ge.useState(!1);s&&S&&C(!1);const _=void 0===c||s?S:c;let P;const M=ge.useMemo((()=>({adornedStart:b,setAdornedStart:x,color:a,disabled:s,error:l,filled:A,focused:_,fullWidth:u,hiddenLabel:d,size:f,onBlur:()=>{C(!1)},onEmpty:()=>{w(!1)},onFilled:()=>{w(!0)},onFocus:()=>{C(!0)},registerEffect:P,required:m,variant:v})),[b,a,s,l,A,_,u,d,P,m,f,v]);return(0,we.jsx)(pc.A.Provider,{value:M,children:(0,we.jsx)(Oc,(0,k.A)({as:i,ownerState:g,className:(0,mt.A)(y.root,n),ref:t},h,{children:r}))})}));var Bc=o("./node_modules/.pnpm/@mui+system@5.16.4_@emotion+react@11.13.0_@types+react@18.3.3_react@18.3.1__@emotion+styled@1_6pxsshf4op6ciexesjgj77xooe/node_modules/@mui/system/esm/breakpoints.js"),Nc=o("./node_modules/.pnpm/@mui+system@5.16.4_@emotion+react@11.13.0_@types+react@18.3.3_react@18.3.1__@emotion+styled@1_6pxsshf4op6ciexesjgj77xooe/node_modules/@mui/system/esm/spacing.js");const zc=["component","direction","spacing","divider","children","className","useFlexGap"],Dc=(0,ks.A)(),Fc=Bs("div",{name:"MuiStack",slot:"Root",overridesResolver:(e,t)=>t.root});function Wc(e){return le({props:e,name:"MuiStack",defaultTheme:Dc})}function Vc(e,t){const o=ge.Children.toArray(e).filter(Boolean);return o.reduce(((e,r,n)=>(e.push(r),n<o.length-1&&e.push(ge.cloneElement(t,{key:`separator-${n}`})),e)),[])}const Hc=({ownerState:e,theme:t})=>{let o=(0,k.A)({display:"flex",flexDirection:"column"},(0,Bc.NI)({theme:t},(0,Bc.kW)({values:e.direction,breakpoints:t.breakpoints.values}),(e=>({flexDirection:e}))));if(e.spacing){const r=(0,Nc.LX)(t),n=Object.keys(t.breakpoints.values).reduce(((t,o)=>(("object"==typeof e.spacing&&null!=e.spacing[o]||"object"==typeof e.direction&&null!=e.direction[o])&&(t[o]=!0),t)),{}),a=(0,Bc.kW)({values:e.direction,base:n}),i=(0,Bc.kW)({values:e.spacing,base:n});"object"==typeof a&&Object.keys(a).forEach(((e,t,o)=>{if(!a[e]){const r=t>0?a[o[t-1]]:"column";a[e]=r}}));const s=(t,o)=>{return e.useFlexGap?{gap:(0,Nc._W)(r,t)}:{"& > :not(style):not(style)":{margin:0},"& > :not(style) ~ :not(style)":{[`margin${n=o?a[o]:e.direction,{row:"Left","row-reverse":"Right",column:"Top","column-reverse":"Bottom"}[n]}`]:(0,Nc._W)(r,t)}};var n};o=(0,X.A)(o,(0,Bc.NI)({theme:t},i,s))}return o=(0,Bc.iZ)(t.breakpoints,o),o},Uc=function(e={}){const{createStyledComponent:t=Fc,useThemeProps:o=Wc,componentName:r="MuiStack"}=e,n=t(Hc),a=ge.forwardRef((function(e,t){const a=o(e),i=(0,Po.A)(a),{component:s="div",direction:l="column",spacing:c=0,divider:u,children:d,className:p,useFlexGap:m=!1}=i,f=(0,R.A)(i,zc),v={direction:l,spacing:c,useFlexGap:m},h=(0,ft.A)({root:["root"]},(e=>(0,At.Ay)(r,e)),{});return(0,we.jsx)(n,(0,k.A)({as:s,ownerState:v,ref:t,className:(0,mt.A)(h.root,p)},f,{children:u?Vc(d,u):d}))}));return a}({createStyledComponent:(0,de.Ay)("div",{name:"MuiStack",slot:"Root",overridesResolver:(e,t)=>t.root}),useThemeProps:e=>(0,vt.b)({props:e,name:"MuiStack"})}),qc=Uc;function Gc(e){return(0,At.Ay)("MuiFormControlLabel",e)}const Xc=(0,xt.A)("MuiFormControlLabel",["root","labelPlacementStart","labelPlacementTop","labelPlacementBottom","disabled","label","error","required","asterisk"]),Yc=["checked","className","componentsProps","control","disabled","disableTypography","inputRef","label","labelPlacement","name","onChange","required","slotProps","value"],Kc=(0,de.Ay)("label",{name:"MuiFormControlLabel",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:o}=e;return[{[`& .${Xc.label}`]:t.label},t.root,t[`labelPlacement${(0,uo.A)(o.labelPlacement)}`]]}})((({theme:e,ownerState:t})=>(0,k.A)({display:"inline-flex",alignItems:"center",cursor:"pointer",verticalAlign:"middle",WebkitTapHighlightColor:"transparent",marginLeft:-11,marginRight:16,[`&.${Xc.disabled}`]:{cursor:"default"}},"start"===t.labelPlacement&&{flexDirection:"row-reverse",marginLeft:16,marginRight:-11},"top"===t.labelPlacement&&{flexDirection:"column-reverse",marginLeft:16},"bottom"===t.labelPlacement&&{flexDirection:"column",marginLeft:16},{[`& .${Xc.label}`]:{[`&.${Xc.disabled}`]:{color:(e.vars||e).palette.text.disabled}}}))),Zc=(0,de.Ay)("span",{name:"MuiFormControlLabel",slot:"Asterisk",overridesResolver:(e,t)=>t.asterisk})((({theme:e})=>({[`&.${Xc.error}`]:{color:(e.vars||e).palette.error.main}}))),Jc=ge.forwardRef((function(e,t){var o,r;const n=(0,vt.b)({props:e,name:"MuiFormControlLabel"}),{className:a,componentsProps:i={},control:s,disabled:l,disableTypography:c,label:u,labelPlacement:d="end",required:p,slotProps:m={}}=n,f=(0,R.A)(n,Yc),v=(0,mc.A)(),h=null!=(o=null!=l?l:s.props.disabled)?o:null==v?void 0:v.disabled,g=null!=p?p:s.props.required,y={disabled:h,required:g};["checked","name","onChange","value","inputRef"].forEach((e=>{void 0===s.props[e]&&void 0!==n[e]&&(y[e]=n[e])}));const b=dc({props:n,muiFormControl:v,states:["error"]}),x=(0,k.A)({},n,{disabled:h,labelPlacement:d,required:g,error:b.error}),A=(e=>{const{classes:t,disabled:o,labelPlacement:r,error:n,required:a}=e,i={root:["root",o&&"disabled",`labelPlacement${(0,uo.A)(r)}`,n&&"error",a&&"required"],label:["label",o&&"disabled"],asterisk:["asterisk",n&&"error"]};return(0,ft.A)(i,Gc,t)})(x),w=null!=(r=m.typography)?r:i.typography;let S=u;return null==S||S.type===Oo||c||(S=(0,we.jsx)(Oo,(0,k.A)({component:"span"},w,{className:(0,mt.A)(A.label,null==w?void 0:w.className),children:S}))),(0,we.jsxs)(Kc,(0,k.A)({className:(0,mt.A)(A.root,a),ownerState:x,ref:t},f,{children:[ge.cloneElement(s,y),g?(0,we.jsxs)(qc,{display:"block",children:[S,(0,we.jsxs)(Zc,{ownerState:x,"aria-hidden":!0,className:A.asterisk,children:[" ","*"]})]}):S]}))}));function Qc(e){return(0,At.Ay)("MuiFormGroup",e)}const eu=(0,xt.A)("MuiFormGroup",["root","row","error"]),tu=["className","row"],ou=(0,de.Ay)("div",{name:"MuiFormGroup",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:o}=e;return[t.root,o.row&&t.row]}})((({ownerState:e})=>(0,k.A)({display:"flex",flexDirection:"column",flexWrap:"wrap"},e.row&&{flexDirection:"row"}))),ru=ge.forwardRef((function(e,t){const o=(0,vt.b)({props:e,name:"MuiFormGroup"}),{className:r,row:n=!1}=o,a=(0,R.A)(o,tu),i=dc({props:o,muiFormControl:(0,mc.A)(),states:["error"]}),s=(0,k.A)({},o,{row:n,error:i.error}),l=(e=>{const{classes:t,row:o,error:r}=e,n={root:["root",o&&"row",r&&"error"]};return(0,ft.A)(n,Qc,t)})(s);return(0,we.jsx)(ou,(0,k.A)({className:(0,mt.A)(l.root,r),ownerState:s,ref:t},a))}));function nu(e){return(0,At.Ay)("MuiFormHelperText",e)}const au=(0,xt.A)("MuiFormHelperText",["root","error","disabled","sizeSmall","sizeMedium","contained","focused","filled","required"]);var iu;const su=["children","className","component","disabled","error","filled","focused","margin","required","variant"],lu=(0,de.Ay)("p",{name:"MuiFormHelperText",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:o}=e;return[t.root,o.size&&t[`size${(0,uo.A)(o.size)}`],o.contained&&t.contained,o.filled&&t.filled]}})((({theme:e,ownerState:t})=>(0,k.A)({color:(e.vars||e).palette.text.secondary},e.typography.caption,{textAlign:"left",marginTop:3,marginRight:0,marginBottom:0,marginLeft:0,[`&.${au.disabled}`]:{color:(e.vars||e).palette.text.disabled},[`&.${au.error}`]:{color:(e.vars||e).palette.error.main}},"small"===t.size&&{marginTop:4},t.contained&&{marginLeft:14,marginRight:14}))),cu=ge.forwardRef((function(e,t){const o=(0,vt.b)({props:e,name:"MuiFormHelperText"}),{children:r,className:n,component:a="p"}=o,i=(0,R.A)(o,su),s=dc({props:o,muiFormControl:(0,mc.A)(),states:["variant","size","disabled","error","filled","focused","required"]}),l=(0,k.A)({},o,{component:a,contained:"filled"===s.variant||"outlined"===s.variant,variant:s.variant,size:s.size,disabled:s.disabled,error:s.error,filled:s.filled,focused:s.focused,required:s.required}),c=(e=>{const{classes:t,contained:o,size:r,disabled:n,error:a,filled:i,focused:s,required:l}=e,c={root:["root",n&&"disabled",a&&"error",r&&`size${(0,uo.A)(r)}`,o&&"contained",s&&"focused",i&&"filled",l&&"required"]};return(0,ft.A)(c,nu,t)})(l);return(0,we.jsx)(lu,(0,k.A)({as:a,ownerState:l,className:(0,mt.A)(c.root,n),ref:t},i,{children:" "===r?iu||(iu=(0,we.jsx)("span",{className:"notranslate",children:"​"})):r}))}));function uu(e){return(0,At.Ay)("MuiFormLabel",e)}const du=(0,xt.A)("MuiFormLabel",["root","colorSecondary","focused","disabled","error","filled","required","asterisk"]),pu=["children","className","color","component","disabled","error","filled","focused","required"],mu=(0,de.Ay)("label",{name:"MuiFormLabel",slot:"Root",overridesResolver:({ownerState:e},t)=>(0,k.A)({},t.root,"secondary"===e.color&&t.colorSecondary,e.filled&&t.filled)})((({theme:e,ownerState:t})=>(0,k.A)({color:(e.vars||e).palette.text.secondary},e.typography.body1,{lineHeight:"1.4375em",padding:0,position:"relative",[`&.${du.focused}`]:{color:(e.vars||e).palette[t.color].main},[`&.${du.disabled}`]:{color:(e.vars||e).palette.text.disabled},[`&.${du.error}`]:{color:(e.vars||e).palette.error.main}}))),fu=(0,de.Ay)("span",{name:"MuiFormLabel",slot:"Asterisk",overridesResolver:(e,t)=>t.asterisk})((({theme:e})=>({[`&.${du.error}`]:{color:(e.vars||e).palette.error.main}}))),vu=ge.forwardRef((function(e,t){const o=(0,vt.b)({props:e,name:"MuiFormLabel"}),{children:r,className:n,component:a="label"}=o,i=(0,R.A)(o,pu),s=dc({props:o,muiFormControl:(0,mc.A)(),states:["color","required","focused","disabled","error","filled"]}),l=(0,k.A)({},o,{color:s.color||"primary",component:a,disabled:s.disabled,error:s.error,filled:s.filled,focused:s.focused,required:s.required}),c=(e=>{const{classes:t,color:o,focused:r,disabled:n,error:a,filled:i,required:s}=e,l={root:["root",`color${(0,uo.A)(o)}`,n&&"disabled",a&&"error",i&&"filled",r&&"focused",s&&"required"],asterisk:["asterisk",a&&"error"]};return(0,ft.A)(l,uu,t)})(l);return(0,we.jsxs)(mu,(0,k.A)({as:a,ownerState:l,className:(0,mt.A)(c.root,n),ref:t},i,{children:[r,s.required&&(0,we.jsxs)(fu,{ownerState:l,"aria-hidden":!0,className:c.asterisk,children:[" ","*"]})]}))})),hu=ge.createContext();function gu(e){return(0,At.Ay)("MuiGrid",e)}const yu=["auto",!0,1,2,3,4,5,6,7,8,9,10,11,12],bu=(0,xt.A)("MuiGrid",["root","container","item","zeroMinWidth",...[0,1,2,3,4,5,6,7,8,9,10].map((e=>`spacing-xs-${e}`)),...["column-reverse","column","row-reverse","row"].map((e=>`direction-xs-${e}`)),...["nowrap","wrap-reverse","wrap"].map((e=>`wrap-xs-${e}`)),...yu.map((e=>`grid-xs-${e}`)),...yu.map((e=>`grid-sm-${e}`)),...yu.map((e=>`grid-md-${e}`)),...yu.map((e=>`grid-lg-${e}`)),...yu.map((e=>`grid-xl-${e}`))]),xu=bu,Au=["className","columns","columnSpacing","component","container","direction","item","rowSpacing","spacing","wrap","zeroMinWidth"];function wu(e){const t=parseFloat(e);return`${t}${String(e).replace(String(t),"")||"px"}`}function Su({breakpoints:e,values:t}){let o="";Object.keys(t).forEach((e=>{""===o&&0!==t[e]&&(o=e)}));const r=Object.keys(e).sort(((t,o)=>e[t]-e[o]));return r.slice(0,r.indexOf(o))}const Cu=(0,de.Ay)("div",{name:"MuiGrid",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:o}=e,{container:r,direction:n,item:a,spacing:i,wrap:s,zeroMinWidth:l,breakpoints:c}=o;let u=[];r&&(u=function(e,t,o={}){if(!e||e<=0)return[];if("string"==typeof e&&!Number.isNaN(Number(e))||"number"==typeof e)return[o[`spacing-xs-${String(e)}`]];const r=[];return t.forEach((t=>{const n=e[t];Number(n)>0&&r.push(o[`spacing-${t}-${String(n)}`])})),r}(i,c,t));const d=[];return c.forEach((e=>{const r=o[e];r&&d.push(t[`grid-${e}-${String(r)}`])})),[t.root,r&&t.container,a&&t.item,l&&t.zeroMinWidth,...u,"row"!==n&&t[`direction-xs-${String(n)}`],"wrap"!==s&&t[`wrap-xs-${String(s)}`],...d]}})((({ownerState:e})=>(0,k.A)({boxSizing:"border-box"},e.container&&{display:"flex",flexWrap:"wrap",width:"100%"},e.item&&{margin:0},e.zeroMinWidth&&{minWidth:0},"wrap"!==e.wrap&&{flexWrap:e.wrap})),(function({theme:e,ownerState:t}){const o=(0,Bc.kW)({values:t.direction,breakpoints:e.breakpoints.values});return(0,Bc.NI)({theme:e},o,(e=>{const t={flexDirection:e};return 0===e.indexOf("column")&&(t[`& > .${xu.item}`]={maxWidth:"none"}),t}))}),(function({theme:e,ownerState:t}){const{container:o,rowSpacing:r}=t;let n={};if(o&&0!==r){const t=(0,Bc.kW)({values:r,breakpoints:e.breakpoints.values});let o;"object"==typeof t&&(o=Su({breakpoints:e.breakpoints.values,values:t})),n=(0,Bc.NI)({theme:e},t,((t,r)=>{var n;const a=e.spacing(t);return"0px"!==a?{marginTop:`-${wu(a)}`,[`& > .${xu.item}`]:{paddingTop:wu(a)}}:null!=(n=o)&&n.includes(r)?{}:{marginTop:0,[`& > .${xu.item}`]:{paddingTop:0}}}))}return n}),(function({theme:e,ownerState:t}){const{container:o,columnSpacing:r}=t;let n={};if(o&&0!==r){const t=(0,Bc.kW)({values:r,breakpoints:e.breakpoints.values});let o;"object"==typeof t&&(o=Su({breakpoints:e.breakpoints.values,values:t})),n=(0,Bc.NI)({theme:e},t,((t,r)=>{var n;const a=e.spacing(t);return"0px"!==a?{width:`calc(100% + ${wu(a)})`,marginLeft:`-${wu(a)}`,[`& > .${xu.item}`]:{paddingLeft:wu(a)}}:null!=(n=o)&&n.includes(r)?{}:{width:"100%",marginLeft:0,[`& > .${xu.item}`]:{paddingLeft:0}}}))}return n}),(function({theme:e,ownerState:t}){let o;return e.breakpoints.keys.reduce(((r,n)=>{let a={};if(t[n]&&(o=t[n]),!o)return r;if(!0===o)a={flexBasis:0,flexGrow:1,maxWidth:"100%"};else if("auto"===o)a={flexBasis:"auto",flexGrow:0,flexShrink:0,maxWidth:"none",width:"auto"};else{const i=(0,Bc.kW)({values:t.columns,breakpoints:e.breakpoints.values}),s="object"==typeof i?i[n]:i;if(null==s)return r;const l=Math.round(o/s*1e8)/1e6+"%";let c={};if(t.container&&t.item&&0!==t.columnSpacing){const o=e.spacing(t.columnSpacing);if("0px"!==o){const e=`calc(${l} + ${wu(o)})`;c={flexBasis:e,maxWidth:e}}}a=(0,k.A)({flexBasis:l,flexGrow:0,maxWidth:l},c)}return 0===e.breakpoints.values[n]?Object.assign(r,a):r[e.breakpoints.up(n)]=a,r}),{})})),_u=ge.forwardRef((function(e,t){const o=(0,vt.b)({props:e,name:"MuiGrid"}),{breakpoints:r}=(0,ne.A)(),n=(0,Po.A)(o),{className:a,columns:i,columnSpacing:s,component:l="div",container:c=!1,direction:u="row",item:d=!1,rowSpacing:p,spacing:m=0,wrap:f="wrap",zeroMinWidth:v=!1}=n,h=(0,R.A)(n,Au),g=p||m,y=s||m,b=ge.useContext(hu),x=c?i||12:b,A={},w=(0,k.A)({},h);r.keys.forEach((e=>{null!=h[e]&&(A[e]=h[e],delete w[e])}));const S=(0,k.A)({},n,{columns:x,container:c,direction:u,item:d,rowSpacing:g,columnSpacing:y,wrap:f,zeroMinWidth:v,spacing:m},A,{breakpoints:r.keys}),C=(e=>{const{classes:t,container:o,direction:r,item:n,spacing:a,wrap:i,zeroMinWidth:s,breakpoints:l}=e;let c=[];o&&(c=function(e,t){if(!e||e<=0)return[];if("string"==typeof e&&!Number.isNaN(Number(e))||"number"==typeof e)return[`spacing-xs-${String(e)}`];const o=[];return t.forEach((t=>{const r=e[t];if(Number(r)>0){const e=`spacing-${t}-${String(r)}`;o.push(e)}})),o}(a,l));const u=[];l.forEach((t=>{const o=e[t];o&&u.push(`grid-${t}-${String(o)}`)}));const d={root:["root",o&&"container",n&&"item",s&&"zeroMinWidth",...c,"row"!==r&&`direction-xs-${String(r)}`,"wrap"!==i&&`wrap-xs-${String(i)}`,...u]};return(0,ft.A)(d,gu,t)})(S);return(0,we.jsx)(hu.Provider,{value:x,children:(0,we.jsx)(Cu,(0,k.A)({ownerState:S,className:(0,mt.A)(C.root,a),as:l,ref:t},w))})})),ku=_u;var Ru=o("./node_modules/.pnpm/@mui+utils@5.16.4_@types+react@18.3.3_react@18.3.1/node_modules/@mui/utils/esm/isMuiElement/isMuiElement.js");const Pu=(e,t,o)=>{const r=e.keys[0];var n,a;Array.isArray(t)?t.forEach(((t,r)=>{o(((t,o)=>{r<=e.keys.length-1&&(0===r?Object.assign(t,o):t[e.up(e.keys[r])]=o)}),t)})):t&&"object"==typeof t?(Object.keys(t).length>e.keys.length?e.keys:(n=e.keys,a=Object.keys(t),n.filter((e=>a.includes(e))))).forEach((n=>{if(-1!==e.keys.indexOf(n)){const a=t[n];void 0!==a&&o(((t,o)=>{r===n?Object.assign(t,o):t[e.up(n)]=o}),a)}})):"number"!=typeof t&&"string"!=typeof t||o(((e,t)=>{Object.assign(e,t)}),t)};function Mu(e){return e?`Level${e}`:""}function Iu(e){return e.unstable_level>0&&e.container}function ju(e){return function(t){return`var(--Grid-${t}Spacing${Mu(e.unstable_level)})`}}function $u(e){return function(t){return 0===e.unstable_level?`var(--Grid-${t}Spacing)`:`var(--Grid-${t}Spacing${Mu(e.unstable_level-1)})`}}function Tu(e){return 0===e.unstable_level?"var(--Grid-columns)":`var(--Grid-columns${Mu(e.unstable_level-1)})`}const Lu=({theme:e,ownerState:t})=>{const o=ju(t),r={};return Pu(e.breakpoints,t.gridSize,((e,n)=>{let a={};!0===n&&(a={flexBasis:0,flexGrow:1,maxWidth:"100%"}),"auto"===n&&(a={flexBasis:"auto",flexGrow:0,flexShrink:0,maxWidth:"none",width:"auto"}),"number"==typeof n&&(a={flexGrow:0,flexBasis:"auto",width:`calc(100% * ${n} / ${Tu(t)}${Iu(t)?` + ${o("column")}`:""})`}),e(r,a)})),r},Ou=({theme:e,ownerState:t})=>{const o={};return Pu(e.breakpoints,t.gridOffset,((e,r)=>{let n={};"auto"===r&&(n={marginLeft:"auto"}),"number"==typeof r&&(n={marginLeft:0===r?"0px":`calc(100% * ${r} / ${Tu(t)})`}),e(o,n)})),o},Eu=({theme:e,ownerState:t})=>{if(!t.container)return{};const o=Iu(t)?{[`--Grid-columns${Mu(t.unstable_level)}`]:Tu(t)}:{"--Grid-columns":12};return Pu(e.breakpoints,t.columns,((e,r)=>{e(o,{[`--Grid-columns${Mu(t.unstable_level)}`]:r})})),o},Bu=({theme:e,ownerState:t})=>{if(!t.container)return{};const o=$u(t),r=Iu(t)?{[`--Grid-rowSpacing${Mu(t.unstable_level)}`]:o("row")}:{};return Pu(e.breakpoints,t.rowSpacing,((o,n)=>{var a;o(r,{[`--Grid-rowSpacing${Mu(t.unstable_level)}`]:"string"==typeof n?n:null==(a=e.spacing)?void 0:a.call(e,n)})})),r},Nu=({theme:e,ownerState:t})=>{if(!t.container)return{};const o=$u(t),r=Iu(t)?{[`--Grid-columnSpacing${Mu(t.unstable_level)}`]:o("column")}:{};return Pu(e.breakpoints,t.columnSpacing,((o,n)=>{var a;o(r,{[`--Grid-columnSpacing${Mu(t.unstable_level)}`]:"string"==typeof n?n:null==(a=e.spacing)?void 0:a.call(e,n)})})),r},zu=({theme:e,ownerState:t})=>{if(!t.container)return{};const o={};return Pu(e.breakpoints,t.direction,((e,t)=>{e(o,{flexDirection:t})})),o},Du=({ownerState:e})=>{const t=ju(e),o=$u(e);return(0,k.A)({minWidth:0,boxSizing:"border-box"},e.container&&(0,k.A)({display:"flex",flexWrap:"wrap"},e.wrap&&"wrap"!==e.wrap&&{flexWrap:e.wrap},{margin:`calc(${t("row")} / -2) calc(${t("column")} / -2)`},e.disableEqualOverflow&&{margin:`calc(${t("row")} * -1) 0px 0px calc(${t("column")} * -1)`}),(!e.container||Iu(e))&&(0,k.A)({padding:`calc(${o("row")} / 2) calc(${o("column")} / 2)`},(e.disableEqualOverflow||e.parentDisableEqualOverflow)&&{padding:`${o("row")} 0px 0px ${o("column")}`}))},Fu=e=>{const t=[];return Object.entries(e).forEach((([e,o])=>{!1!==o&&void 0!==o&&t.push(`grid-${e}-${String(o)}`)})),t},Wu=(e,t="xs")=>{function o(e){return void 0!==e&&("string"==typeof e&&!Number.isNaN(Number(e))||"number"==typeof e&&e>0)}if(o(e))return[`spacing-${t}-${String(e)}`];if("object"==typeof e&&!Array.isArray(e)){const t=[];return Object.entries(e).forEach((([e,r])=>{o(r)&&t.push(`spacing-${e}-${String(r)}`)})),t}return[]},Vu=e=>void 0===e?[]:"object"==typeof e?Object.entries(e).map((([e,t])=>`direction-${e}-${t}`)):[`direction-xs-${String(e)}`],Hu=["className","children","columns","container","component","direction","wrap","spacing","rowSpacing","columnSpacing","disableEqualOverflow","unstable_level"],Uu=(0,ks.A)(),qu=Bs("div",{name:"MuiGrid",slot:"Root",overridesResolver:(e,t)=>t.root});function Gu(e){return le({props:e,name:"MuiGrid",defaultTheme:Uu})}const Xu=function(e={}){const{createStyledComponent:t=qu,useThemeProps:o=Gu,componentName:r="MuiGrid"}=e,n=ge.createContext(void 0),a=t(Eu,Nu,Bu,Lu,zu,Du,Ou),i=ge.forwardRef((function(e,t){var i,s,l,c,u,d,p,m;const f=(0,se.A)(),v=o(e),h=(0,Po.A)(v),g=ge.useContext(n),{className:y,children:b,columns:x=12,container:A=!1,component:w="div",direction:S="row",wrap:C="wrap",spacing:_=0,rowSpacing:P=_,columnSpacing:M=_,disableEqualOverflow:I,unstable_level:j=0}=h,$=(0,R.A)(h,Hu);let T=I;j&&void 0!==I&&(T=e.disableEqualOverflow);const L={},O={},E={};Object.entries($).forEach((([e,t])=>{void 0!==f.breakpoints.values[e]?L[e]=t:void 0!==f.breakpoints.values[e.replace("Offset","")]?O[e.replace("Offset","")]=t:E[e]=t}));const B=null!=(i=e.columns)?i:j?void 0:x,N=null!=(s=e.spacing)?s:j?void 0:_,z=null!=(l=null!=(c=e.rowSpacing)?c:e.spacing)?l:j?void 0:P,D=null!=(u=null!=(d=e.columnSpacing)?d:e.spacing)?u:j?void 0:M,F=(0,k.A)({},h,{level:j,columns:B,container:A,direction:S,wrap:C,spacing:N,rowSpacing:z,columnSpacing:D,gridSize:L,gridOffset:O,disableEqualOverflow:null!=(p=null!=(m=T)?m:g)&&p,parentDisableEqualOverflow:g}),W=((e,t)=>{const{container:o,direction:n,spacing:a,wrap:i,gridSize:s}=e,l={root:["root",o&&"container","wrap"!==i&&`wrap-xs-${String(i)}`,...Vu(n),...Fu(s),...o?Wu(a,t.breakpoints.keys[0]):[]]};return(0,ft.A)(l,(e=>(0,At.Ay)(r,e)),{})})(F,f);let V=(0,we.jsx)(a,(0,k.A)({ref:t,as:w,ownerState:F,className:(0,mt.A)(W.root,y)},E,{children:ge.Children.map(b,(e=>{var t;return ge.isValidElement(e)&&(0,Ru.A)(e,["Grid"])?ge.cloneElement(e,{unstable_level:null!=(t=e.props.unstable_level)?t:j+1}):e}))}));return void 0!==T&&T!==(null!=g&&g)&&(V=(0,we.jsx)(n.Provider,{value:T,children:V})),V}));return i.muiName="Grid",i}({createStyledComponent:(0,de.Ay)("div",{name:"MuiGrid2",slot:"Root",overridesResolver:(e,t)=>t.root}),componentName:"MuiGrid2",useThemeProps:e=>(0,vt.b)({props:e,name:"MuiGrid2"})}),Yu=Xu;function Ku(e){return(0,At.Ay)("MuiGrid2",e)}const Zu=["auto",!0,1,2,3,4,5,6,7,8,9,10,11,12],Ju=(0,xt.A)("MuiGrid2",["root","container","item","zeroMinWidth",...[0,1,2,3,4,5,6,7,8,9,10].map((e=>`spacing-xs-${e}`)),...["column-reverse","column","row-reverse","row"].map((e=>`direction-xs-${e}`)),...["nowrap","wrap-reverse","wrap"].map((e=>`wrap-xs-${e}`)),...Zu.map((e=>`grid-xs-${e}`)),...Zu.map((e=>`grid-sm-${e}`)),...Zu.map((e=>`grid-md-${e}`)),...Zu.map((e=>`grid-lg-${e}`)),...Zu.map((e=>`grid-xl-${e}`))]),Qu=Ju;var ed=o("./node_modules/.pnpm/@mui+material@5.16.4_@emotion+react@11.13.0_@types+react@18.3.3_react@18.3.1__@emotion+styled_brxipnv4yvqheosgxcawdxdyay/node_modules/@mui/material/Grow/Grow.js"),td=o("./node_modules/.pnpm/@mui+system@5.16.4_@emotion+react@11.13.0_@types+react@18.3.3_react@18.3.1__@emotion+styled@1_6pxsshf4op6ciexesjgj77xooe/node_modules/@mui/system/esm/useThemeWithoutDefault.js");function od(e,t,o,r,n){const[a,i]=ge.useState((()=>n&&o?o(e).matches:r?r(e).matches:t));return(0,tr.A)((()=>{let t=!0;if(!o)return;const r=o(e),n=()=>{t&&i(r.matches)};return n(),r.addListener(n),()=>{t=!1,r.removeListener(n)}}),[e,o]),a}const rd=ye.useSyncExternalStore;function nd(e,t,o,r,n){const a=ge.useCallback((()=>t),[t]),i=ge.useMemo((()=>{if(n&&o)return()=>o(e).matches;if(null!==r){const{matches:t}=r(e);return()=>t}return a}),[a,e,r,n,o]),[s,l]=ge.useMemo((()=>{if(null===o)return[a,()=>()=>{}];const t=o(e);return[()=>t.matches,e=>(t.addListener(e),()=>{t.removeListener(e)})]}),[a,o,e]);return rd(l,s,i)}function ad(e,t={}){const o=(0,td.A)(),r="undefined"!=typeof window&&void 0!==window.matchMedia,{defaultMatches:n=!1,matchMedia:a=(r?window.matchMedia:null),ssrMatchMedia:i=null,noSsr:s=!1}=ie({name:"MuiUseMediaQuery",props:t,theme:o});let l="function"==typeof e?e(o):e;return l=l.replace(/^@media( ?)/m,""),(void 0!==rd?nd:od)(l,n,a,i,s)}const id=["initialWidth","width"],sd=["xs","sm","md","lg","xl"],ld=(e,t,o=!0)=>o?sd.indexOf(e)<=sd.indexOf(t):sd.indexOf(e)<sd.indexOf(t),cd=(e,t,o=!1)=>o?sd.indexOf(t)<=sd.indexOf(e):sd.indexOf(t)<sd.indexOf(e),ud=((e={})=>t=>{const{withTheme:o=!1,noSSR:r=!1,initialWidth:n}=e;return function(e){const a=(0,ne.A)(),i=e.theme||a,s=ie({theme:i,name:"MuiWithWidth",props:e}),{initialWidth:l,width:c}=s,u=(0,R.A)(s,id),[d,p]=ge.useState(!1);(0,fc.A)((()=>{p(!0)}),[]);const m=i.breakpoints.keys.slice().reverse().reduce(((e,t)=>{const o=ad(i.breakpoints.up(t));return!e&&o?t:e}),null),f=(0,k.A)({width:c||(d||r?m:void 0)||l||n},o?{theme:i}:{},u);return void 0===f.width?null:(0,we.jsx)(t,(0,k.A)({},f))}})()((function(e){const{children:t,only:o,width:r}=e,n=(0,ne.A)();let a=!0;if(o)if(Array.isArray(o)){for(let e=0;e<o.length;e+=1)if(r===o[e]){a=!1;break}}else o&&r===o&&(a=!1);if(a)for(let t=0;t<n.breakpoints.keys.length;t+=1){const o=n.breakpoints.keys[t],i=e[`${o}Up`],s=e[`${o}Down`];if(i&&ld(o,r)||s&&cd(o,r)){a=!1;break}}return a?(0,we.jsx)(ge.Fragment,{children:t}):null}));function dd(e){return(0,At.Ay)("PrivateHiddenCss",e)}(0,xt.A)("PrivateHiddenCss",["root","xlDown","xlUp","onlyXl","lgDown","lgUp","onlyLg","mdDown","mdUp","onlyMd","smDown","smUp","onlySm","xsDown","xsUp","onlyXs"]);const pd=["children","className","only"],md=(0,de.Ay)("div",{name:"PrivateHiddenCss",slot:"Root"})((({theme:e,ownerState:t})=>{const o={display:"none"};return(0,k.A)({},t.breakpoints.map((({breakpoint:t,dir:r})=>"only"===r?{[e.breakpoints.only(t)]:o}:"up"===r?{[e.breakpoints.up(t)]:o}:{[e.breakpoints.down(t)]:o})).reduce(((e,t)=>(Object.keys(t).forEach((o=>{e[o]=t[o]})),e)),{}))})),fd=function(e){const{children:t,className:o,only:r}=e,n=(0,R.A)(e,pd),a=(0,ne.A)(),i=[];for(let e=0;e<a.breakpoints.keys.length;e+=1){const t=a.breakpoints.keys[e],o=n[`${t}Up`],r=n[`${t}Down`];o&&i.push({breakpoint:t,dir:"up"}),r&&i.push({breakpoint:t,dir:"down"})}r&&(Array.isArray(r)?r:[r]).forEach((e=>{i.push({breakpoint:e,dir:"only"})}));const s=(0,k.A)({},e,{breakpoints:i}),l=(e=>{const{classes:t,breakpoints:o}=e,r={root:["root",...o.map((({breakpoint:e,dir:t})=>"only"===t?`${t}${(0,uo.A)(e)}`:`${e}${(0,uo.A)(t)}`))]};return(0,ft.A)(r,dd,t)})(s);return(0,we.jsx)(md,{className:(0,mt.A)(l.root,o),ownerState:s,children:t})},vd=["implementation","lgDown","lgUp","mdDown","mdUp","smDown","smUp","xlDown","xlUp","xsDown","xsUp"],hd=function(e){const{implementation:t="js",lgDown:o=!1,lgUp:r=!1,mdDown:n=!1,mdUp:a=!1,smDown:i=!1,smUp:s=!1,xlDown:l=!1,xlUp:c=!1,xsDown:u=!1,xsUp:d=!1}=e,p=(0,R.A)(e,vd);return"js"===t?(0,we.jsx)(ud,(0,k.A)({lgDown:o,lgUp:r,mdDown:n,mdUp:a,smDown:i,smUp:s,xlDown:l,xlUp:c,xsDown:u,xsUp:d},p)):(0,we.jsx)(fd,(0,k.A)({lgDown:o,lgUp:r,mdDown:n,mdUp:a,smDown:i,smUp:s,xlDown:l,xlUp:c,xsDown:u,xsUp:d},p))};function gd(e){return(0,At.Ay)("MuiIcon",e)}const yd=(0,xt.A)("MuiIcon",["root","colorPrimary","colorSecondary","colorAction","colorError","colorDisabled","fontSizeInherit","fontSizeSmall","fontSizeMedium","fontSizeLarge"]),bd=["baseClassName","className","color","component","fontSize"],xd=(0,de.Ay)("span",{name:"MuiIcon",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:o}=e;return[t.root,"inherit"!==o.color&&t[`color${(0,uo.A)(o.color)}`],t[`fontSize${(0,uo.A)(o.fontSize)}`]]}})((({theme:e,ownerState:t})=>({userSelect:"none",width:"1em",height:"1em",overflow:"hidden",display:"inline-block",textAlign:"center",flexShrink:0,fontSize:{inherit:"inherit",small:e.typography.pxToRem(20),medium:e.typography.pxToRem(24),large:e.typography.pxToRem(36)}[t.fontSize],color:{primary:(e.vars||e).palette.primary.main,secondary:(e.vars||e).palette.secondary.main,info:(e.vars||e).palette.info.main,success:(e.vars||e).palette.success.main,warning:(e.vars||e).palette.warning.main,action:(e.vars||e).palette.action.active,error:(e.vars||e).palette.error.main,disabled:(e.vars||e).palette.action.disabled,inherit:void 0}[t.color]}))),Ad=ge.forwardRef((function(e,t){const o=(0,vt.b)({props:e,name:"MuiIcon"}),{baseClassName:r="material-icons",className:n,color:a="inherit",component:i="span",fontSize:s="medium"}=o,l=(0,R.A)(o,bd),c=(0,k.A)({},o,{baseClassName:r,color:a,component:i,fontSize:s}),u=(e=>{const{color:t,fontSize:o,classes:r}=e,n={root:["root","inherit"!==t&&`color${(0,uo.A)(t)}`,`fontSize${(0,uo.A)(o)}`]};return(0,ft.A)(n,gd,r)})(c);return(0,we.jsx)(xd,(0,k.A)({as:i,className:(0,mt.A)(r,"notranslate",u.root,n),ownerState:c,"aria-hidden":!0,ref:t},l))}));Ad.muiName="Icon";const wd=Ad;var Sd=o("./node_modules/.pnpm/@mui+material@5.16.4_@emotion+react@11.13.0_@types+react@18.3.3_react@18.3.1__@emotion+styled_brxipnv4yvqheosgxcawdxdyay/node_modules/@mui/material/IconButton/iconButtonClasses.js");function Cd(e){return(0,At.Ay)("MuiImageList",e)}const _d=(0,xt.A)("MuiImageList",["root","masonry","quilted","standard","woven"]),kd=ge.createContext({}),Rd=["children","className","cols","component","rowHeight","gap","style","variant"],Pd=(0,de.Ay)("ul",{name:"MuiImageList",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:o}=e;return[t.root,t[o.variant]]}})((({ownerState:e})=>(0,k.A)({display:"grid",overflowY:"auto",listStyle:"none",padding:0,WebkitOverflowScrolling:"touch"},"masonry"===e.variant&&{display:"block"}))),Md=ge.forwardRef((function(e,t){const o=(0,vt.b)({props:e,name:"MuiImageList"}),{children:r,className:n,cols:a=2,component:i="ul",rowHeight:s="auto",gap:l=4,style:c,variant:u="standard"}=o,d=(0,R.A)(o,Rd),p=ge.useMemo((()=>({rowHeight:s,gap:l,variant:u})),[s,l,u]);ge.useEffect((()=>{}),[]);const m="masonry"===u?(0,k.A)({columnCount:a,columnGap:l},c):(0,k.A)({gridTemplateColumns:`repeat(${a}, 1fr)`,gap:l},c),f=(0,k.A)({},o,{component:i,gap:l,rowHeight:s,variant:u}),v=(e=>{const{classes:t,variant:o}=e,r={root:["root",o]};return(0,ft.A)(r,Cd,t)})(f);return(0,we.jsx)(Pd,(0,k.A)({as:i,className:(0,mt.A)(v.root,v[u],n),ref:t,style:m,ownerState:f},d,{children:(0,we.jsx)(kd.Provider,{value:p,children:r})}))})),Id=Md;function jd(e){return(0,At.Ay)("MuiImageListItem",e)}const $d=(0,xt.A)("MuiImageListItem",["root","img","standard","woven","masonry","quilted"]),Td=["children","className","cols","component","rows","style"],Ld=(0,de.Ay)("li",{name:"MuiImageListItem",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:o}=e;return[{[`& .${$d.img}`]:t.img},t.root,t[o.variant]]}})((({ownerState:e})=>(0,k.A)({display:"block",position:"relative"},"standard"===e.variant&&{display:"flex",flexDirection:"column"},"woven"===e.variant&&{height:"100%",alignSelf:"center","&:nth-of-type(even)":{height:"70%"}},{[`& .${$d.img}`]:(0,k.A)({objectFit:"cover",width:"100%",height:"100%",display:"block"},"standard"===e.variant&&{height:"auto",flexGrow:1})}))),Od=ge.forwardRef((function(e,t){const o=(0,vt.b)({props:e,name:"MuiImageListItem"}),{children:r,className:n,cols:a=1,component:i="li",rows:s=1,style:l}=o,c=(0,R.A)(o,Td),{rowHeight:u="auto",gap:d,variant:p}=ge.useContext(kd);let m="auto";"woven"===p?m=void 0:"auto"!==u&&(m=u*s+d*(s-1));const f=(0,k.A)({},o,{cols:a,component:i,gap:d,rowHeight:u,rows:s,variant:p}),v=(e=>{const{classes:t,variant:o}=e,r={root:["root",o],img:["img"]};return(0,ft.A)(r,jd,t)})(f);return(0,we.jsx)(Ld,(0,k.A)({as:i,className:(0,mt.A)(v.root,v[p],n),ref:t,style:(0,k.A)({height:m,gridColumnEnd:"masonry"!==p?`span ${a}`:void 0,gridRowEnd:"masonry"!==p?`span ${s}`:void 0,marginBottom:"masonry"===p?d:void 0,breakInside:"masonry"===p?"avoid":void 0},l),ownerState:f},c,{children:ge.Children.map(r,(e=>ge.isValidElement(e)?"img"===e.type||(0,jc.A)(e,["Image"])?ge.cloneElement(e,{className:(0,mt.A)(v.img,e.props.className)}):e:null))}))})),Ed=Od;function Bd(e){return(0,At.Ay)("MuiImageListItemBar",e)}const Nd=(0,xt.A)("MuiImageListItemBar",["root","positionBottom","positionTop","positionBelow","titleWrap","titleWrapBottom","titleWrapTop","titleWrapBelow","titleWrapActionPosLeft","titleWrapActionPosRight","title","subtitle","actionIcon","actionIconActionPosLeft","actionIconActionPosRight"]),zd=["actionIcon","actionPosition","className","subtitle","title","position"],Dd=(0,de.Ay)("div",{name:"MuiImageListItemBar",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:o}=e;return[t.root,t[`position${(0,uo.A)(o.position)}`]]}})((({theme:e,ownerState:t})=>(0,k.A)({position:"absolute",left:0,right:0,background:"rgba(0, 0, 0, 0.5)",display:"flex",alignItems:"center",fontFamily:e.typography.fontFamily},"bottom"===t.position&&{bottom:0},"top"===t.position&&{top:0},"below"===t.position&&{position:"relative",background:"transparent",alignItems:"normal"}))),Fd=(0,de.Ay)("div",{name:"MuiImageListItemBar",slot:"TitleWrap",overridesResolver:(e,t)=>{const{ownerState:o}=e;return[t.titleWrap,t[`titleWrap${(0,uo.A)(o.position)}`],o.actionIcon&&t[`titleWrapActionPos${(0,uo.A)(o.actionPosition)}`]]}})((({theme:e,ownerState:t})=>(0,k.A)({flexGrow:1,padding:"12px 16px",color:(e.vars||e).palette.common.white,overflow:"hidden"},"below"===t.position&&{padding:"6px 0 12px",color:"inherit"},t.actionIcon&&"left"===t.actionPosition&&{paddingLeft:0},t.actionIcon&&"right"===t.actionPosition&&{paddingRight:0}))),Wd=(0,de.Ay)("div",{name:"MuiImageListItemBar",slot:"Title",overridesResolver:(e,t)=>t.title})((({theme:e})=>({fontSize:e.typography.pxToRem(16),lineHeight:"24px",textOverflow:"ellipsis",overflow:"hidden",whiteSpace:"nowrap"}))),Vd=(0,de.Ay)("div",{name:"MuiImageListItemBar",slot:"Subtitle",overridesResolver:(e,t)=>t.subtitle})((({theme:e})=>({fontSize:e.typography.pxToRem(12),lineHeight:1,textOverflow:"ellipsis",overflow:"hidden",whiteSpace:"nowrap"}))),Hd=(0,de.Ay)("div",{name:"MuiImageListItemBar",slot:"ActionIcon",overridesResolver:(e,t)=>{const{ownerState:o}=e;return[t.actionIcon,t[`actionIconActionPos${(0,uo.A)(o.actionPosition)}`]]}})((({ownerState:e})=>(0,k.A)({},"left"===e.actionPosition&&{order:-1}))),Ud=ge.forwardRef((function(e,t){const o=(0,vt.b)({props:e,name:"MuiImageListItemBar"}),{actionIcon:r,actionPosition:n="right",className:a,subtitle:i,title:s,position:l="bottom"}=o,c=(0,R.A)(o,zd),u=(0,k.A)({},o,{position:l,actionPosition:n}),d=(e=>{const{classes:t,position:o,actionIcon:r,actionPosition:n}=e,a={root:["root",`position${(0,uo.A)(o)}`],titleWrap:["titleWrap",`titleWrap${(0,uo.A)(o)}`,r&&`titleWrapActionPos${(0,uo.A)(n)}`],title:["title"],subtitle:["subtitle"],actionIcon:["actionIcon",`actionIconActionPos${(0,uo.A)(n)}`]};return(0,ft.A)(a,Bd,t)})(u);return(0,we.jsxs)(Dd,(0,k.A)({ownerState:u,className:(0,mt.A)(d.root,a),ref:t},c,{children:[(0,we.jsxs)(Fd,{ownerState:u,className:d.titleWrap,children:[(0,we.jsx)(Wd,{className:d.title,children:s}),i?(0,we.jsx)(Vd,{className:d.subtitle,children:i}):null]}),r?(0,we.jsx)(Hd,{ownerState:u,className:d.actionIcon,children:r}):null]}))})),qd=["disableUnderline","components","componentsProps","fullWidth","inputComponent","multiline","slotProps","slots","type"],Gd=(0,de.Ay)(Ac,{shouldForwardProp:e=>(0,yl.A)(e)||"classes"===e,name:"MuiInput",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:o}=e;return[...bc(e,t),!o.disableUnderline&&t.underline]}})((({theme:e,ownerState:t})=>{let o="light"===e.palette.mode?"rgba(0, 0, 0, 0.42)":"rgba(255, 255, 255, 0.7)";return e.vars&&(o=`rgba(${e.vars.palette.common.onBackgroundChannel} / ${e.vars.opacity.inputUnderline})`),(0,k.A)({position:"relative"},t.formControl&&{"label + &":{marginTop:16}},!t.disableUnderline&&{"&::after":{borderBottom:`2px solid ${(e.vars||e).palette[t.color].main}`,left:0,bottom:0,content:'""',position:"absolute",right:0,transform:"scaleX(0)",transition:e.transitions.create("transform",{duration:e.transitions.duration.shorter,easing:e.transitions.easing.easeOut}),pointerEvents:"none"},[`&.${Vn.focused}:after`]:{transform:"scaleX(1) translateX(0)"},[`&.${Vn.error}`]:{"&::before, &::after":{borderBottomColor:(e.vars||e).palette.error.main}},"&::before":{borderBottom:`1px solid ${o}`,left:0,bottom:0,content:'"\\00a0"',position:"absolute",right:0,transition:e.transitions.create("border-bottom-color",{duration:e.transitions.duration.shorter}),pointerEvents:"none"},[`&:hover:not(.${Vn.disabled}, .${Vn.error}):before`]:{borderBottom:`2px solid ${(e.vars||e).palette.text.primary}`,"@media (hover: none)":{borderBottom:`1px solid ${o}`}},[`&.${Vn.disabled}:before`]:{borderBottomStyle:"dotted"}})})),Xd=(0,de.Ay)(wc,{name:"MuiInput",slot:"Input",overridesResolver:xc})({}),Yd=ge.forwardRef((function(e,t){var o,r,n,a;const i=(0,vt.b)({props:e,name:"MuiInput"}),{disableUnderline:s,components:l={},componentsProps:c,fullWidth:u=!1,inputComponent:d="input",multiline:p=!1,slotProps:m,slots:f={},type:v="text"}=i,h=(0,R.A)(i,qd),g=(e=>{const{classes:t,disableUnderline:o}=e,r={root:["root",!o&&"underline"],input:["input"]},n=(0,ft.A)(r,Wn,t);return(0,k.A)({},t,n)})(i),y={root:{ownerState:{disableUnderline:s}}},b=(null!=m?m:c)?(0,X.A)(null!=m?m:c,y):y,x=null!=(o=null!=(r=f.root)?r:l.Root)?o:Gd,A=null!=(n=null!=(a=f.input)?a:l.Input)?n:Xd;return(0,we.jsx)(_c,(0,k.A)({slots:{root:x,input:A},slotProps:b,fullWidth:u,inputComponent:d,multiline:p,ref:t,type:v},h,{classes:g}))}));Yd.muiName="Input";const Kd=Yd;function Zd(e){return(0,At.Ay)("MuiInputAdornment",e)}const Jd=(0,xt.A)("MuiInputAdornment",["root","filled","standard","outlined","positionStart","positionEnd","disablePointerEvents","hiddenLabel","sizeSmall"]);var Qd;const ep=["children","className","component","disablePointerEvents","disableTypography","position","variant"],tp=(0,de.Ay)("div",{name:"MuiInputAdornment",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:o}=e;return[t.root,t[`position${(0,uo.A)(o.position)}`],!0===o.disablePointerEvents&&t.disablePointerEvents,t[o.variant]]}})((({theme:e,ownerState:t})=>(0,k.A)({display:"flex",height:"0.01em",maxHeight:"2em",alignItems:"center",whiteSpace:"nowrap",color:(e.vars||e).palette.action.active},"filled"===t.variant&&{[`&.${Jd.positionStart}&:not(.${Jd.hiddenLabel})`]:{marginTop:16}},"start"===t.position&&{marginRight:8},"end"===t.position&&{marginLeft:8},!0===t.disablePointerEvents&&{pointerEvents:"none"}))),op=ge.forwardRef((function(e,t){const o=(0,vt.b)({props:e,name:"MuiInputAdornment"}),{children:r,className:n,component:a="div",disablePointerEvents:i=!1,disableTypography:s=!1,position:l,variant:c}=o,u=(0,R.A)(o,ep),d=(0,mc.A)()||{};let p=c;c&&d.variant,d&&!p&&(p=d.variant);const m=(0,k.A)({},o,{hiddenLabel:d.hiddenLabel,size:d.size,disablePointerEvents:i,position:l,variant:p}),f=(e=>{const{classes:t,disablePointerEvents:o,hiddenLabel:r,position:n,size:a,variant:i}=e,s={root:["root",o&&"disablePointerEvents",n&&`position${(0,uo.A)(n)}`,i,r&&"hiddenLabel",a&&`size${(0,uo.A)(a)}`]};return(0,ft.A)(s,Zd,t)})(m);return(0,we.jsx)(pc.A.Provider,{value:null,children:(0,we.jsx)(tp,(0,k.A)({as:a,ownerState:m,className:(0,mt.A)(f.root,n),ref:t},u,{children:"string"!=typeof r||s?(0,we.jsxs)(ge.Fragment,{children:["start"===l?Qd||(Qd=(0,we.jsx)("span",{className:"notranslate",children:"​"})):null,r]}):(0,we.jsx)(Oo,{color:"text.secondary",children:r})}))})}));function rp(e){return(0,At.Ay)("MuiInputLabel",e)}const np=(0,xt.A)("MuiInputLabel",["root","focused","disabled","error","required","asterisk","formControl","sizeSmall","shrink","animated","standard","filled","outlined"]),ap=["disableAnimation","margin","shrink","variant","className"],ip=(0,de.Ay)(vu,{shouldForwardProp:e=>(0,yl.A)(e)||"classes"===e,name:"MuiInputLabel",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:o}=e;return[{[`& .${du.asterisk}`]:t.asterisk},t.root,o.formControl&&t.formControl,"small"===o.size&&t.sizeSmall,o.shrink&&t.shrink,!o.disableAnimation&&t.animated,o.focused&&t.focused,t[o.variant]]}})((({theme:e,ownerState:t})=>(0,k.A)({display:"block",transformOrigin:"top left",whiteSpace:"nowrap",overflow:"hidden",textOverflow:"ellipsis",maxWidth:"100%"},t.formControl&&{position:"absolute",left:0,top:0,transform:"translate(0, 20px) scale(1)"},"small"===t.size&&{transform:"translate(0, 17px) scale(1)"},t.shrink&&{transform:"translate(0, -1.5px) scale(0.75)",transformOrigin:"top left",maxWidth:"133%"},!t.disableAnimation&&{transition:e.transitions.create(["color","transform","max-width"],{duration:e.transitions.duration.shorter,easing:e.transitions.easing.easeOut})},"filled"===t.variant&&(0,k.A)({zIndex:1,pointerEvents:"none",transform:"translate(12px, 16px) scale(1)",maxWidth:"calc(100% - 24px)"},"small"===t.size&&{transform:"translate(12px, 13px) scale(1)"},t.shrink&&(0,k.A)({userSelect:"none",pointerEvents:"auto",transform:"translate(12px, 7px) scale(0.75)",maxWidth:"calc(133% - 24px)"},"small"===t.size&&{transform:"translate(12px, 4px) scale(0.75)"})),"outlined"===t.variant&&(0,k.A)({zIndex:1,pointerEvents:"none",transform:"translate(14px, 16px) scale(1)",maxWidth:"calc(100% - 24px)"},"small"===t.size&&{transform:"translate(14px, 9px) scale(1)"},t.shrink&&{userSelect:"none",pointerEvents:"auto",maxWidth:"calc(133% - 32px)",transform:"translate(14px, -9px) scale(0.75)"})))),sp=ge.forwardRef((function(e,t){const o=(0,vt.b)({name:"MuiInputLabel",props:e}),{disableAnimation:r=!1,shrink:n,className:a}=o,i=(0,R.A)(o,ap),s=(0,mc.A)();let l=n;void 0===l&&s&&(l=s.filled||s.focused||s.adornedStart);const c=dc({props:o,muiFormControl:s,states:["size","variant","required","focused"]}),u=(0,k.A)({},o,{disableAnimation:r,formControl:s,shrink:l,size:c.size,variant:c.variant,required:c.required,focused:c.focused}),d=(e=>{const{classes:t,formControl:o,size:r,shrink:n,disableAnimation:a,variant:i,required:s}=e,l={root:["root",o&&"formControl",!a&&"animated",n&&"shrink",r&&"normal"!==r&&`size${(0,uo.A)(r)}`,i],asterisk:[s&&"asterisk"]},c=(0,ft.A)(l,rp,t);return(0,k.A)({},t,c)})(u);return(0,we.jsx)(ip,(0,k.A)({"data-shrink":l,ownerState:u,ref:t,className:(0,mt.A)(d.root,a)},i,{classes:d}))}));function lp(e){return(0,At.Ay)("MuiLinearProgress",e)}const cp=(0,xt.A)("MuiLinearProgress",["root","colorPrimary","colorSecondary","determinate","indeterminate","buffer","query","dashed","dashedColorPrimary","dashedColorSecondary","bar","barColorPrimary","barColorSecondary","bar1Indeterminate","bar1Determinate","bar1Buffer","bar2Indeterminate","bar2Buffer"]),up=["className","color","value","valueBuffer","variant"];let dp,pp,mp,fp,vp,hp,gp=e=>e;const yp=(0,q.i7)(dp||(dp=gp`
  0% {
    left: -35%;
    right: 100%;
  }

  60% {
    left: 100%;
    right: -90%;
  }

  100% {
    left: 100%;
    right: -90%;
  }
`)),bp=(0,q.i7)(pp||(pp=gp`
  0% {
    left: -200%;
    right: 100%;
  }

  60% {
    left: 107%;
    right: -8%;
  }

  100% {
    left: 107%;
    right: -8%;
  }
`)),xp=(0,q.i7)(mp||(mp=gp`
  0% {
    opacity: 1;
    background-position: 0 -23px;
  }

  60% {
    opacity: 0;
    background-position: 0 -23px;
  }

  100% {
    opacity: 1;
    background-position: -200px -23px;
  }
`)),Ap=(e,t)=>"inherit"===t?"currentColor":e.vars?e.vars.palette.LinearProgress[`${t}Bg`]:"light"===e.palette.mode?(0,De.a)(e.palette[t].main,.62):(0,De.e$)(e.palette[t].main,.5),wp=(0,de.Ay)("span",{name:"MuiLinearProgress",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:o}=e;return[t.root,t[`color${(0,uo.A)(o.color)}`],t[o.variant]]}})((({ownerState:e,theme:t})=>(0,k.A)({position:"relative",overflow:"hidden",display:"block",height:4,zIndex:0,"@media print":{colorAdjust:"exact"},backgroundColor:Ap(t,e.color)},"inherit"===e.color&&"buffer"!==e.variant&&{backgroundColor:"none","&::before":{content:'""',position:"absolute",left:0,top:0,right:0,bottom:0,backgroundColor:"currentColor",opacity:.3}},"buffer"===e.variant&&{backgroundColor:"transparent"},"query"===e.variant&&{transform:"rotate(180deg)"}))),Sp=(0,de.Ay)("span",{name:"MuiLinearProgress",slot:"Dashed",overridesResolver:(e,t)=>{const{ownerState:o}=e;return[t.dashed,t[`dashedColor${(0,uo.A)(o.color)}`]]}})((({ownerState:e,theme:t})=>{const o=Ap(t,e.color);return(0,k.A)({position:"absolute",marginTop:0,height:"100%",width:"100%"},"inherit"===e.color&&{opacity:.3},{backgroundImage:`radial-gradient(${o} 0%, ${o} 16%, transparent 42%)`,backgroundSize:"10px 10px",backgroundPosition:"0 -23px"})}),(0,q.AH)(fp||(fp=gp`
    animation: ${0} 3s infinite linear;
  `),xp)),Cp=(0,de.Ay)("span",{name:"MuiLinearProgress",slot:"Bar1",overridesResolver:(e,t)=>{const{ownerState:o}=e;return[t.bar,t[`barColor${(0,uo.A)(o.color)}`],("indeterminate"===o.variant||"query"===o.variant)&&t.bar1Indeterminate,"determinate"===o.variant&&t.bar1Determinate,"buffer"===o.variant&&t.bar1Buffer]}})((({ownerState:e,theme:t})=>(0,k.A)({width:"100%",position:"absolute",left:0,bottom:0,top:0,transition:"transform 0.2s linear",transformOrigin:"left",backgroundColor:"inherit"===e.color?"currentColor":(t.vars||t).palette[e.color].main},"determinate"===e.variant&&{transition:"transform .4s linear"},"buffer"===e.variant&&{zIndex:1,transition:"transform .4s linear"})),(({ownerState:e})=>("indeterminate"===e.variant||"query"===e.variant)&&(0,q.AH)(vp||(vp=gp`
      width: auto;
      animation: ${0} 2.1s cubic-bezier(0.65, 0.815, 0.735, 0.395) infinite;
    `),yp))),_p=(0,de.Ay)("span",{name:"MuiLinearProgress",slot:"Bar2",overridesResolver:(e,t)=>{const{ownerState:o}=e;return[t.bar,t[`barColor${(0,uo.A)(o.color)}`],("indeterminate"===o.variant||"query"===o.variant)&&t.bar2Indeterminate,"buffer"===o.variant&&t.bar2Buffer]}})((({ownerState:e,theme:t})=>(0,k.A)({width:"100%",position:"absolute",left:0,bottom:0,top:0,transition:"transform 0.2s linear",transformOrigin:"left"},"buffer"!==e.variant&&{backgroundColor:"inherit"===e.color?"currentColor":(t.vars||t).palette[e.color].main},"inherit"===e.color&&{opacity:.3},"buffer"===e.variant&&{backgroundColor:Ap(t,e.color),transition:"transform .4s linear"})),(({ownerState:e})=>("indeterminate"===e.variant||"query"===e.variant)&&(0,q.AH)(hp||(hp=gp`
      width: auto;
      animation: ${0} 2.1s cubic-bezier(0.165, 0.84, 0.44, 1) 1.15s infinite;
    `),bp))),kp=ge.forwardRef((function(e,t){const o=(0,vt.b)({props:e,name:"MuiLinearProgress"}),{className:r,color:n="primary",value:a,valueBuffer:i,variant:s="indeterminate"}=o,l=(0,R.A)(o,up),c=(0,k.A)({},o,{color:n,variant:s}),u=(e=>{const{classes:t,variant:o,color:r}=e,n={root:["root",`color${(0,uo.A)(r)}`,o],dashed:["dashed",`dashedColor${(0,uo.A)(r)}`],bar1:["bar",`barColor${(0,uo.A)(r)}`,("indeterminate"===o||"query"===o)&&"bar1Indeterminate","determinate"===o&&"bar1Determinate","buffer"===o&&"bar1Buffer"],bar2:["bar","buffer"!==o&&`barColor${(0,uo.A)(r)}`,"buffer"===o&&`color${(0,uo.A)(r)}`,("indeterminate"===o||"query"===o)&&"bar2Indeterminate","buffer"===o&&"bar2Buffer"]};return(0,ft.A)(n,lp,t)})(c),d=(0,Tl.I)(),p={},m={bar1:{},bar2:{}};if(("determinate"===s||"buffer"===s)&&void 0!==a){p["aria-valuenow"]=Math.round(a),p["aria-valuemin"]=0,p["aria-valuemax"]=100;let e=a-100;d&&(e=-e),m.bar1.transform=`translateX(${e}%)`}if("buffer"===s&&void 0!==i){let e=(i||0)-100;d&&(e=-e),m.bar2.transform=`translateX(${e}%)`}return(0,we.jsxs)(wp,(0,k.A)({className:(0,mt.A)(u.root,r),ownerState:c,role:"progressbar"},p,{ref:t},l,{children:["buffer"===s?(0,we.jsx)(Sp,{className:u.dashed,ownerState:c}):null,(0,we.jsx)(Cp,{className:u.bar1,ownerState:c,style:m.bar1}),"determinate"===s?null:(0,we.jsx)(_p,{className:u.bar2,ownerState:c,style:m.bar2})]}))}));var Rp=o("./node_modules/.pnpm/@mui+material@5.16.4_@emotion+react@11.13.0_@types+react@18.3.3_react@18.3.1__@emotion+styled_brxipnv4yvqheosgxcawdxdyay/node_modules/@mui/material/utils/useIsFocusVisible.js");function Pp(e){return(0,At.Ay)("MuiLink",e)}const Mp=(0,xt.A)("MuiLink",["root","underlineNone","underlineHover","underlineAlways","button","focusVisible"]);var Ip=o("./node_modules/.pnpm/@mui+system@5.16.4_@emotion+react@11.13.0_@types+react@18.3.3_react@18.3.1__@emotion+styled@1_6pxsshf4op6ciexesjgj77xooe/node_modules/@mui/system/esm/style.js");const jp={primary:"primary.main",textPrimary:"text.primary",secondary:"secondary.main",textSecondary:"text.secondary",error:"error.main"},$p=({theme:e,ownerState:t})=>{const o=(e=>jp[e]||e)(t.color),r=(0,Ip.Yn)(e,`palette.${o}`,!1)||t.color,n=(0,Ip.Yn)(e,`palette.${o}Channel`);return"vars"in e&&n?`rgba(${n} / 0.4)`:(0,De.X4)(r,.4)},Tp=["className","color","component","onBlur","onFocus","TypographyClasses","underline","variant","sx"],Lp=(0,de.Ay)(Oo,{name:"MuiLink",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:o}=e;return[t.root,t[`underline${(0,uo.A)(o.underline)}`],"button"===o.component&&t.button]}})((({theme:e,ownerState:t})=>(0,k.A)({},"none"===t.underline&&{textDecoration:"none"},"hover"===t.underline&&{textDecoration:"none","&:hover":{textDecoration:"underline"}},"always"===t.underline&&(0,k.A)({textDecoration:"underline"},"inherit"!==t.color&&{textDecorationColor:$p({theme:e,ownerState:t})},{"&:hover":{textDecorationColor:"inherit"}}),"button"===t.component&&{position:"relative",WebkitTapHighlightColor:"transparent",backgroundColor:"transparent",outline:0,border:0,margin:0,borderRadius:0,padding:0,cursor:"pointer",userSelect:"none",verticalAlign:"middle",MozAppearance:"none",WebkitAppearance:"none","&::-moz-focus-inner":{borderStyle:"none"},[`&.${Mp.focusVisible}`]:{outline:"auto"}}))),Op=ge.forwardRef((function(e,t){const o=(0,vt.b)({props:e,name:"MuiLink"}),{className:r,color:n="primary",component:a="a",onBlur:i,onFocus:s,TypographyClasses:l,underline:c="always",variant:u="inherit",sx:d}=o,p=(0,R.A)(o,Tp),{isFocusVisibleRef:m,onBlur:f,onFocus:v,ref:h}=(0,Rp.A)(),[g,y]=ge.useState(!1),b=(0,bt.A)(t,h),x=(0,k.A)({},o,{color:n,component:a,focusVisible:g,underline:c,variant:u}),A=(e=>{const{classes:t,component:o,focusVisible:r,underline:n}=e,a={root:["root",`underline${(0,uo.A)(n)}`,"button"===o&&"button",r&&"focusVisible"]};return(0,ft.A)(a,Pp,t)})(x);return(0,we.jsx)(Lp,(0,k.A)({color:n,className:(0,mt.A)(A.root,r),classes:l,component:a,onBlur:e=>{f(e),!1===m.current&&y(!1),i&&i(e)},onFocus:e=>{v(e),!0===m.current&&y(!0),s&&s(e)},ref:b,ownerState:x,variant:u,sx:[...Object.keys(jp).includes(n)?[]:[{color:n}],...Array.isArray(d)?d:[d]]},p))}));var Ep=o("./node_modules/.pnpm/@mui+material@5.16.4_@emotion+react@11.13.0_@types+react@18.3.3_react@18.3.1__@emotion+styled_brxipnv4yvqheosgxcawdxdyay/node_modules/@mui/material/List/List.js"),Bp=o("./node_modules/.pnpm/@mui+material@5.16.4_@emotion+react@11.13.0_@types+react@18.3.3_react@18.3.1__@emotion+styled_brxipnv4yvqheosgxcawdxdyay/node_modules/@mui/material/List/listClasses.js"),Np=o("./node_modules/.pnpm/@mui+material@5.16.4_@emotion+react@11.13.0_@types+react@18.3.3_react@18.3.1__@emotion+styled_brxipnv4yvqheosgxcawdxdyay/node_modules/@mui/material/List/ListContext.js");function zp(e){return(0,At.Ay)("MuiListItem",e)}const Dp=(0,xt.A)("MuiListItem",["root","container","focusVisible","dense","alignItemsFlexStart","disabled","divider","gutters","padding","button","secondaryAction","selected"]);function Fp(e){return(0,At.Ay)("MuiListItemButton",e)}const Wp=(0,xt.A)("MuiListItemButton",["root","focusVisible","dense","alignItemsFlexStart","disabled","divider","gutters","selected"]);function Vp(e){return(0,At.Ay)("MuiListItemSecondaryAction",e)}const Hp=(0,xt.A)("MuiListItemSecondaryAction",["root","disableGutters"]),Up=["className"],qp=(0,de.Ay)("div",{name:"MuiListItemSecondaryAction",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:o}=e;return[t.root,o.disableGutters&&t.disableGutters]}})((({ownerState:e})=>(0,k.A)({position:"absolute",right:16,top:"50%",transform:"translateY(-50%)"},e.disableGutters&&{right:0}))),Gp=ge.forwardRef((function(e,t){const o=(0,vt.b)({props:e,name:"MuiListItemSecondaryAction"}),{className:r}=o,n=(0,R.A)(o,Up),a=ge.useContext(Np.A),i=(0,k.A)({},o,{disableGutters:a.disableGutters}),s=(e=>{const{disableGutters:t,classes:o}=e,r={root:["root",t&&"disableGutters"]};return(0,ft.A)(r,Vp,o)})(i);return(0,we.jsx)(qp,(0,k.A)({className:(0,mt.A)(s.root,r),ownerState:i,ref:t},n))}));Gp.muiName="ListItemSecondaryAction";const Xp=Gp,Yp=["className"],Kp=["alignItems","autoFocus","button","children","className","component","components","componentsProps","ContainerComponent","ContainerProps","dense","disabled","disableGutters","disablePadding","divider","focusVisibleClassName","secondaryAction","selected","slotProps","slots"],Zp=(0,de.Ay)("div",{name:"MuiListItem",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:o}=e;return[t.root,o.dense&&t.dense,"flex-start"===o.alignItems&&t.alignItemsFlexStart,o.divider&&t.divider,!o.disableGutters&&t.gutters,!o.disablePadding&&t.padding,o.button&&t.button,o.hasSecondaryAction&&t.secondaryAction]}})((({theme:e,ownerState:t})=>(0,k.A)({display:"flex",justifyContent:"flex-start",alignItems:"center",position:"relative",textDecoration:"none",width:"100%",boxSizing:"border-box",textAlign:"left"},!t.disablePadding&&(0,k.A)({paddingTop:8,paddingBottom:8},t.dense&&{paddingTop:4,paddingBottom:4},!t.disableGutters&&{paddingLeft:16,paddingRight:16},!!t.secondaryAction&&{paddingRight:48}),!!t.secondaryAction&&{[`& > .${Wp.root}`]:{paddingRight:48}},{[`&.${Dp.focusVisible}`]:{backgroundColor:(e.vars||e).palette.action.focus},[`&.${Dp.selected}`]:{backgroundColor:e.vars?`rgba(${e.vars.palette.primary.mainChannel} / ${e.vars.palette.action.selectedOpacity})`:(0,De.X4)(e.palette.primary.main,e.palette.action.selectedOpacity),[`&.${Dp.focusVisible}`]:{backgroundColor:e.vars?`rgba(${e.vars.palette.primary.mainChannel} / calc(${e.vars.palette.action.selectedOpacity} + ${e.vars.palette.action.focusOpacity}))`:(0,De.X4)(e.palette.primary.main,e.palette.action.selectedOpacity+e.palette.action.focusOpacity)}},[`&.${Dp.disabled}`]:{opacity:(e.vars||e).palette.action.disabledOpacity}},"flex-start"===t.alignItems&&{alignItems:"flex-start"},t.divider&&{borderBottom:`1px solid ${(e.vars||e).palette.divider}`,backgroundClip:"padding-box"},t.button&&{transition:e.transitions.create("background-color",{duration:e.transitions.duration.shortest}),"&:hover":{textDecoration:"none",backgroundColor:(e.vars||e).palette.action.hover,"@media (hover: none)":{backgroundColor:"transparent"}},[`&.${Dp.selected}:hover`]:{backgroundColor:e.vars?`rgba(${e.vars.palette.primary.mainChannel} / calc(${e.vars.palette.action.selectedOpacity} + ${e.vars.palette.action.hoverOpacity}))`:(0,De.X4)(e.palette.primary.main,e.palette.action.selectedOpacity+e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:e.vars?`rgba(${e.vars.palette.primary.mainChannel} / ${e.vars.palette.action.selectedOpacity})`:(0,De.X4)(e.palette.primary.main,e.palette.action.selectedOpacity)}}},t.hasSecondaryAction&&{paddingRight:48}))),Jp=(0,de.Ay)("li",{name:"MuiListItem",slot:"Container",overridesResolver:(e,t)=>t.container})({position:"relative"}),Qp=ge.forwardRef((function(e,t){const o=(0,vt.b)({props:e,name:"MuiListItem"}),{alignItems:r="center",autoFocus:n=!1,button:a=!1,children:i,className:s,component:l,components:c={},componentsProps:u={},ContainerComponent:d="li",ContainerProps:{className:p}={},dense:m=!1,disabled:f=!1,disableGutters:v=!1,disablePadding:h=!1,divider:g=!1,focusVisibleClassName:y,secondaryAction:b,selected:x=!1,slotProps:A={},slots:w={}}=o,S=(0,R.A)(o.ContainerProps,Yp),C=(0,R.A)(o,Kp),_=ge.useContext(Np.A),P=ge.useMemo((()=>({dense:m||_.dense||!1,alignItems:r,disableGutters:v})),[r,_.dense,m,v]),M=ge.useRef(null);(0,fc.A)((()=>{n&&M.current&&M.current.focus()}),[n]);const I=ge.Children.toArray(i),j=I.length&&(0,jc.A)(I[I.length-1],["ListItemSecondaryAction"]),$=(0,k.A)({},o,{alignItems:r,autoFocus:n,button:a,dense:P.dense,disabled:f,disableGutters:v,disablePadding:h,divider:g,hasSecondaryAction:j,selected:x}),T=(e=>{const{alignItems:t,button:o,classes:r,dense:n,disabled:a,disableGutters:i,disablePadding:s,divider:l,hasSecondaryAction:c,selected:u}=e,d={root:["root",n&&"dense",!i&&"gutters",!s&&"padding",l&&"divider",a&&"disabled",o&&"button","flex-start"===t&&"alignItemsFlexStart",c&&"secondaryAction",u&&"selected"],container:["container"]};return(0,ft.A)(d,zp,r)})($),L=(0,bt.A)(M,t),O=w.root||c.Root||Zp,E=A.root||u.root||{},B=(0,k.A)({className:(0,mt.A)(T.root,E.className,s),disabled:f},C);let N=l||"li";return a&&(B.component=l||"div",B.focusVisibleClassName=(0,mt.A)(Dp.focusVisible,y),N=oo.A),j?(N=B.component||l?N:"div","li"===d&&("li"===N?N="div":"li"===B.component&&(B.component="div")),(0,we.jsx)(Np.A.Provider,{value:P,children:(0,we.jsxs)(Jp,(0,k.A)({as:d,className:(0,mt.A)(T.container,p),ref:L,ownerState:$},S,{children:[(0,we.jsx)(O,(0,k.A)({},E,!(0,rc.A)(O)&&{as:N,ownerState:(0,k.A)({},$,E.ownerState)},B,{children:I})),I.pop()]}))})):(0,we.jsx)(Np.A.Provider,{value:P,children:(0,we.jsxs)(O,(0,k.A)({},E,{as:N,ref:L},!(0,rc.A)(O)&&{ownerState:(0,k.A)({},$,E.ownerState)},B,{children:[I,b&&(0,we.jsx)(Xp,{children:b})]}))})}));function em(e){return(0,At.Ay)("MuiListItemAvatar",e)}const tm=(0,xt.A)("MuiListItemAvatar",["root","alignItemsFlexStart"]),om=["className"],rm=(0,de.Ay)("div",{name:"MuiListItemAvatar",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:o}=e;return[t.root,"flex-start"===o.alignItems&&t.alignItemsFlexStart]}})((({ownerState:e})=>(0,k.A)({minWidth:56,flexShrink:0},"flex-start"===e.alignItems&&{marginTop:8}))),nm=ge.forwardRef((function(e,t){const o=(0,vt.b)({props:e,name:"MuiListItemAvatar"}),{className:r}=o,n=(0,R.A)(o,om),a=ge.useContext(Np.A),i=(0,k.A)({},o,{alignItems:a.alignItems}),s=(e=>{const{alignItems:t,classes:o}=e,r={root:["root","flex-start"===t&&"alignItemsFlexStart"]};return(0,ft.A)(r,em,o)})(i);return(0,we.jsx)(rm,(0,k.A)({className:(0,mt.A)(s.root,r),ownerState:i,ref:t},n))})),am=["alignItems","autoFocus","component","children","dense","disableGutters","divider","focusVisibleClassName","selected","className"],im=(0,de.Ay)(oo.A,{shouldForwardProp:e=>(0,yl.A)(e)||"classes"===e,name:"MuiListItemButton",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:o}=e;return[t.root,o.dense&&t.dense,"flex-start"===o.alignItems&&t.alignItemsFlexStart,o.divider&&t.divider,!o.disableGutters&&t.gutters]}})((({theme:e,ownerState:t})=>(0,k.A)({display:"flex",flexGrow:1,justifyContent:"flex-start",alignItems:"center",position:"relative",textDecoration:"none",minWidth:0,boxSizing:"border-box",textAlign:"left",paddingTop:8,paddingBottom:8,transition:e.transitions.create("background-color",{duration:e.transitions.duration.shortest}),"&:hover":{textDecoration:"none",backgroundColor:(e.vars||e).palette.action.hover,"@media (hover: none)":{backgroundColor:"transparent"}},[`&.${Wp.selected}`]:{backgroundColor:e.vars?`rgba(${e.vars.palette.primary.mainChannel} / ${e.vars.palette.action.selectedOpacity})`:(0,De.X4)(e.palette.primary.main,e.palette.action.selectedOpacity),[`&.${Wp.focusVisible}`]:{backgroundColor:e.vars?`rgba(${e.vars.palette.primary.mainChannel} / calc(${e.vars.palette.action.selectedOpacity} + ${e.vars.palette.action.focusOpacity}))`:(0,De.X4)(e.palette.primary.main,e.palette.action.selectedOpacity+e.palette.action.focusOpacity)}},[`&.${Wp.selected}:hover`]:{backgroundColor:e.vars?`rgba(${e.vars.palette.primary.mainChannel} / calc(${e.vars.palette.action.selectedOpacity} + ${e.vars.palette.action.hoverOpacity}))`:(0,De.X4)(e.palette.primary.main,e.palette.action.selectedOpacity+e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:e.vars?`rgba(${e.vars.palette.primary.mainChannel} / ${e.vars.palette.action.selectedOpacity})`:(0,De.X4)(e.palette.primary.main,e.palette.action.selectedOpacity)}},[`&.${Wp.focusVisible}`]:{backgroundColor:(e.vars||e).palette.action.focus},[`&.${Wp.disabled}`]:{opacity:(e.vars||e).palette.action.disabledOpacity}},t.divider&&{borderBottom:`1px solid ${(e.vars||e).palette.divider}`,backgroundClip:"padding-box"},"flex-start"===t.alignItems&&{alignItems:"flex-start"},!t.disableGutters&&{paddingLeft:16,paddingRight:16},t.dense&&{paddingTop:4,paddingBottom:4}))),sm=ge.forwardRef((function(e,t){const o=(0,vt.b)({props:e,name:"MuiListItemButton"}),{alignItems:r="center",autoFocus:n=!1,component:a="div",children:i,dense:s=!1,disableGutters:l=!1,divider:c=!1,focusVisibleClassName:u,selected:d=!1,className:p}=o,m=(0,R.A)(o,am),f=ge.useContext(Np.A),v=ge.useMemo((()=>({dense:s||f.dense||!1,alignItems:r,disableGutters:l})),[r,f.dense,s,l]),h=ge.useRef(null);(0,fc.A)((()=>{n&&h.current&&h.current.focus()}),[n]);const g=(0,k.A)({},o,{alignItems:r,dense:v.dense,disableGutters:l,divider:c,selected:d}),y=(e=>{const{alignItems:t,classes:o,dense:r,disabled:n,disableGutters:a,divider:i,selected:s}=e,l={root:["root",r&&"dense",!a&&"gutters",i&&"divider",n&&"disabled","flex-start"===t&&"alignItemsFlexStart",s&&"selected"]},c=(0,ft.A)(l,Fp,o);return(0,k.A)({},o,c)})(g),b=(0,bt.A)(h,t);return(0,we.jsx)(Np.A.Provider,{value:v,children:(0,we.jsx)(im,(0,k.A)({ref:b,href:m.href||m.to,component:(m.href||m.to)&&"div"===a?"button":a,focusVisibleClassName:(0,mt.A)(y.focusVisible,u),ownerState:g,className:(0,mt.A)(y.root,p)},m,{classes:y,children:i}))})}));var lm=o("./node_modules/.pnpm/@mui+material@5.16.4_@emotion+react@11.13.0_@types+react@18.3.3_react@18.3.1__@emotion+styled_brxipnv4yvqheosgxcawdxdyay/node_modules/@mui/material/ListItemIcon/listItemIconClasses.js");const cm=["className"],um=(0,de.Ay)("div",{name:"MuiListItemIcon",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:o}=e;return[t.root,"flex-start"===o.alignItems&&t.alignItemsFlexStart]}})((({theme:e,ownerState:t})=>(0,k.A)({minWidth:56,color:(e.vars||e).palette.action.active,flexShrink:0,display:"inline-flex"},"flex-start"===t.alignItems&&{marginTop:8}))),dm=ge.forwardRef((function(e,t){const o=(0,vt.b)({props:e,name:"MuiListItemIcon"}),{className:r}=o,n=(0,R.A)(o,cm),a=ge.useContext(Np.A),i=(0,k.A)({},o,{alignItems:a.alignItems}),s=(e=>{const{alignItems:t,classes:o}=e,r={root:["root","flex-start"===t&&"alignItemsFlexStart"]};return(0,ft.A)(r,lm.f,o)})(i);return(0,we.jsx)(um,(0,k.A)({className:(0,mt.A)(s.root,r),ownerState:i,ref:t},n))}));var pm=o("./node_modules/.pnpm/@mui+material@5.16.4_@emotion+react@11.13.0_@types+react@18.3.3_react@18.3.1__@emotion+styled_brxipnv4yvqheosgxcawdxdyay/node_modules/@mui/material/ListItemText/listItemTextClasses.js");const mm=["children","className","disableTypography","inset","primary","primaryTypographyProps","secondary","secondaryTypographyProps"],fm=(0,de.Ay)("div",{name:"MuiListItemText",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:o}=e;return[{[`& .${pm.A.primary}`]:t.primary},{[`& .${pm.A.secondary}`]:t.secondary},t.root,o.inset&&t.inset,o.primary&&o.secondary&&t.multiline,o.dense&&t.dense]}})((({ownerState:e})=>(0,k.A)({flex:"1 1 auto",minWidth:0,marginTop:4,marginBottom:4},e.primary&&e.secondary&&{marginTop:6,marginBottom:6},e.inset&&{paddingLeft:56}))),vm=ge.forwardRef((function(e,t){const o=(0,vt.b)({props:e,name:"MuiListItemText"}),{children:r,className:n,disableTypography:a=!1,inset:i=!1,primary:s,primaryTypographyProps:l,secondary:c,secondaryTypographyProps:u}=o,d=(0,R.A)(o,mm),{dense:p}=ge.useContext(Np.A);let m=null!=s?s:r,f=c;const v=(0,k.A)({},o,{disableTypography:a,inset:i,primary:!!m,secondary:!!f,dense:p}),h=(e=>{const{classes:t,inset:o,primary:r,secondary:n,dense:a}=e,i={root:["root",o&&"inset",a&&"dense",r&&n&&"multiline"],primary:["primary"],secondary:["secondary"]};return(0,ft.A)(i,pm.b,t)})(v);return null==m||m.type===Oo||a||(m=(0,we.jsx)(Oo,(0,k.A)({variant:p?"body2":"body1",className:h.primary,component:null!=l&&l.variant?void 0:"span",display:"block"},l,{children:m}))),null==f||f.type===Oo||a||(f=(0,we.jsx)(Oo,(0,k.A)({variant:"body2",className:h.secondary,color:"text.secondary",display:"block"},u,{children:f}))),(0,we.jsxs)(fm,(0,k.A)({className:(0,mt.A)(h.root,n),ownerState:v,ref:t},d,{children:[m,f]}))}));var hm=o("./node_modules/.pnpm/@mui+material@5.16.4_@emotion+react@11.13.0_@types+react@18.3.3_react@18.3.1__@emotion+styled_brxipnv4yvqheosgxcawdxdyay/node_modules/@mui/material/Menu/Menu.js"),gm=o("./node_modules/.pnpm/@mui+material@5.16.4_@emotion+react@11.13.0_@types+react@18.3.3_react@18.3.1__@emotion+styled_brxipnv4yvqheosgxcawdxdyay/node_modules/@mui/material/Menu/menuClasses.js"),ym=o("./node_modules/.pnpm/@mui+material@5.16.4_@emotion+react@11.13.0_@types+react@18.3.3_react@18.3.1__@emotion+styled_brxipnv4yvqheosgxcawdxdyay/node_modules/@mui/material/MenuItem/MenuItem.js"),bm=o("./node_modules/.pnpm/@mui+material@5.16.4_@emotion+react@11.13.0_@types+react@18.3.3_react@18.3.1__@emotion+styled_brxipnv4yvqheosgxcawdxdyay/node_modules/@mui/material/MenuItem/menuItemClasses.js"),xm=o("./node_modules/.pnpm/@mui+material@5.16.4_@emotion+react@11.13.0_@types+react@18.3.3_react@18.3.1__@emotion+styled_brxipnv4yvqheosgxcawdxdyay/node_modules/@mui/material/MenuList/MenuList.js"),Am=o("./node_modules/.pnpm/@mui+material@5.16.4_@emotion+react@11.13.0_@types+react@18.3.3_react@18.3.1__@emotion+styled_brxipnv4yvqheosgxcawdxdyay/node_modules/@mui/material/styles/slotShouldForwardProp.js");function wm(e){return(0,At.Ay)("MuiMobileStepper",e)}const Sm=(0,xt.A)("MuiMobileStepper",["root","positionBottom","positionTop","positionStatic","dots","dot","dotActive","progress"]),Cm=["activeStep","backButton","className","LinearProgressProps","nextButton","position","steps","variant"],_m=(0,de.Ay)(It.A,{name:"MuiMobileStepper",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:o}=e;return[t.root,t[`position${(0,uo.A)(o.position)}`]]}})((({theme:e,ownerState:t})=>(0,k.A)({display:"flex",flexDirection:"row",justifyContent:"space-between",alignItems:"center",background:(e.vars||e).palette.background.default,padding:8},"bottom"===t.position&&{position:"fixed",bottom:0,left:0,right:0,zIndex:(e.vars||e).zIndex.mobileStepper},"top"===t.position&&{position:"fixed",top:0,left:0,right:0,zIndex:(e.vars||e).zIndex.mobileStepper}))),km=(0,de.Ay)("div",{name:"MuiMobileStepper",slot:"Dots",overridesResolver:(e,t)=>t.dots})((({ownerState:e})=>(0,k.A)({},"dots"===e.variant&&{display:"flex",flexDirection:"row"}))),Rm=(0,de.Ay)("div",{name:"MuiMobileStepper",slot:"Dot",shouldForwardProp:e=>(0,Am.A)(e)&&"dotActive"!==e,overridesResolver:(e,t)=>{const{dotActive:o}=e;return[t.dot,o&&t.dotActive]}})((({theme:e,ownerState:t,dotActive:o})=>(0,k.A)({},"dots"===t.variant&&(0,k.A)({transition:e.transitions.create("background-color",{duration:e.transitions.duration.shortest}),backgroundColor:(e.vars||e).palette.action.disabled,borderRadius:"50%",width:8,height:8,margin:"0 2px"},o&&{backgroundColor:(e.vars||e).palette.primary.main})))),Pm=(0,de.Ay)(kp,{name:"MuiMobileStepper",slot:"Progress",overridesResolver:(e,t)=>t.progress})((({ownerState:e})=>(0,k.A)({},"progress"===e.variant&&{width:"50%"}))),Mm=ge.forwardRef((function(e,t){const o=(0,vt.b)({props:e,name:"MuiMobileStepper"}),{activeStep:r=0,backButton:n,className:a,LinearProgressProps:i,nextButton:s,position:l="bottom",steps:c,variant:u="dots"}=o,d=(0,R.A)(o,Cm),p=(0,k.A)({},o,{activeStep:r,position:l,variant:u});let m;"progress"===u&&(m=1===c?100:Math.ceil(r/(c-1)*100));const f=(e=>{const{classes:t,position:o}=e,r={root:["root",`position${(0,uo.A)(o)}`],dots:["dots"],dot:["dot"],dotActive:["dotActive"],progress:["progress"]};return(0,ft.A)(r,wm,t)})(p);return(0,we.jsxs)(_m,(0,k.A)({square:!0,elevation:0,className:(0,mt.A)(f.root,a),ref:t,ownerState:p},d,{children:[n,"text"===u&&(0,we.jsxs)(ge.Fragment,{children:[r+1," / ",c]}),"dots"===u&&(0,we.jsx)(km,{ownerState:p,className:f.dots,children:[...new Array(c)].map(((e,t)=>(0,we.jsx)(Rm,{className:(0,mt.A)(f.dot,t===r&&f.dotActive),ownerState:p,dotActive:t===r},t)))}),"progress"===u&&(0,we.jsx)(Pm,(0,k.A)({ownerState:p,className:f.progress,variant:"determinate",value:m},i)),s]}))}));var Im=o("./node_modules/.pnpm/@mui+material@5.16.4_@emotion+react@11.13.0_@types+react@18.3.3_react@18.3.1__@emotion+styled_brxipnv4yvqheosgxcawdxdyay/node_modules/@mui/material/Modal/ModalManager.js"),jm=o("./node_modules/.pnpm/@mui+material@5.16.4_@emotion+react@11.13.0_@types+react@18.3.3_react@18.3.1__@emotion+styled_brxipnv4yvqheosgxcawdxdyay/node_modules/@mui/material/Modal/modalClasses.js");function $m(e){return(0,At.Ay)("MuiNativeSelect",e)}const Tm=(0,xt.A)("MuiNativeSelect",["root","select","multiple","filled","outlined","standard","disabled","icon","iconOpen","iconFilled","iconOutlined","iconStandard","nativeInput","error"]),Lm=["className","disabled","error","IconComponent","inputRef","variant"],Om=({ownerState:e,theme:t})=>(0,k.A)({MozAppearance:"none",WebkitAppearance:"none",userSelect:"none",borderRadius:0,cursor:"pointer","&:focus":(0,k.A)({},t.vars?{backgroundColor:`rgba(${t.vars.palette.common.onBackgroundChannel} / 0.05)`}:{backgroundColor:"light"===t.palette.mode?"rgba(0, 0, 0, 0.05)":"rgba(255, 255, 255, 0.05)"},{borderRadius:0}),"&::-ms-expand":{display:"none"},[`&.${Tm.disabled}`]:{cursor:"default"},"&[multiple]":{height:"auto"},"&:not([multiple]) option, &:not([multiple]) optgroup":{backgroundColor:(t.vars||t).palette.background.paper},"&&&":{paddingRight:24,minWidth:16}},"filled"===e.variant&&{"&&&":{paddingRight:32}},"outlined"===e.variant&&{borderRadius:(t.vars||t).shape.borderRadius,"&:focus":{borderRadius:(t.vars||t).shape.borderRadius},"&&&":{paddingRight:32}}),Em=(0,de.Ay)("select",{name:"MuiNativeSelect",slot:"Select",shouldForwardProp:yl.A,overridesResolver:(e,t)=>{const{ownerState:o}=e;return[t.select,t[o.variant],o.error&&t.error,{[`&.${Tm.multiple}`]:t.multiple}]}})(Om),Bm=({ownerState:e,theme:t})=>(0,k.A)({position:"absolute",right:0,top:"calc(50% - .5em)",pointerEvents:"none",color:(t.vars||t).palette.action.active,[`&.${Tm.disabled}`]:{color:(t.vars||t).palette.action.disabled}},e.open&&{transform:"rotate(180deg)"},"filled"===e.variant&&{right:7},"outlined"===e.variant&&{right:7}),Nm=(0,de.Ay)("svg",{name:"MuiNativeSelect",slot:"Icon",overridesResolver:(e,t)=>{const{ownerState:o}=e;return[t.icon,o.variant&&t[`icon${(0,uo.A)(o.variant)}`],o.open&&t.iconOpen]}})(Bm),zm=ge.forwardRef((function(e,t){const{className:o,disabled:r,error:n,IconComponent:a,inputRef:i,variant:s="standard"}=e,l=(0,R.A)(e,Lm),c=(0,k.A)({},e,{disabled:r,variant:s,error:n}),u=(e=>{const{classes:t,variant:o,disabled:r,multiple:n,open:a,error:i}=e,s={select:["select",o,r&&"disabled",n&&"multiple",i&&"error"],icon:["icon",`icon${(0,uo.A)(o)}`,a&&"iconOpen",r&&"disabled"]};return(0,ft.A)(s,$m,t)})(c);return(0,we.jsxs)(ge.Fragment,{children:[(0,we.jsx)(Em,(0,k.A)({ownerState:c,className:(0,mt.A)(u.select,o),disabled:r,ref:i||t},l)),e.multiple?null:(0,we.jsx)(Nm,{as:a,ownerState:c,className:u.icon})]})})),Dm=["className","children","classes","IconComponent","input","inputProps","variant"],Fm=["root"],Wm=(0,we.jsx)(Kd,{}),Vm=ge.forwardRef((function(e,t){const o=(0,vt.b)({name:"MuiNativeSelect",props:e}),{className:r,children:n,classes:a={},IconComponent:i=Xn,input:s=Wm,inputProps:l}=o,c=(0,R.A)(o,Dm),u=dc({props:o,muiFormControl:(0,mc.A)(),states:["variant"]}),d=(e=>{const{classes:t}=e;return(0,ft.A)({root:["root"]},$m,t)})((0,k.A)({},o,{classes:a})),p=(0,R.A)(a,Fm);return(0,we.jsx)(ge.Fragment,{children:ge.cloneElement(s,(0,k.A)({inputComponent:zm,inputProps:(0,k.A)({children:n,classes:p,IconComponent:i,variant:u.variant,type:void 0},l,s?s.props.inputProps:{}),ref:t},c,{className:(0,mt.A)(d.root,s.props.className,r)}))})}));Vm.muiName="Select";const Hm=Vm,Um=function(e){const{children:t,defer:o=!1,fallback:r=null}=e,[n,a]=ge.useState(!1);return(0,tr.A)((()=>{o||a(!0)}),[o]),ge.useEffect((()=>{o&&a(!0)}),[o]),(0,we.jsx)(ge.Fragment,{children:n?t:r})};var qm;const Gm=["children","classes","className","label","notched"],Xm=(0,de.Ay)("fieldset",{shouldForwardProp:yl.A})({textAlign:"left",position:"absolute",bottom:0,right:0,top:-5,left:0,margin:0,padding:"0 8px",pointerEvents:"none",borderRadius:"inherit",borderStyle:"solid",borderWidth:1,overflow:"hidden",minWidth:"0%"}),Ym=(0,de.Ay)("legend",{shouldForwardProp:yl.A})((({ownerState:e,theme:t})=>(0,k.A)({float:"unset",width:"auto",overflow:"hidden"},!e.withLabel&&{padding:0,lineHeight:"11px",transition:t.transitions.create("width",{duration:150,easing:t.transitions.easing.easeOut})},e.withLabel&&(0,k.A)({display:"block",padding:0,height:11,fontSize:"0.75em",visibility:"hidden",maxWidth:.01,transition:t.transitions.create("max-width",{duration:50,easing:t.transitions.easing.easeOut}),whiteSpace:"nowrap","& > span":{paddingLeft:5,paddingRight:5,display:"inline-block",opacity:0,visibility:"visible"}},e.notched&&{maxWidth:"100%",transition:t.transitions.create("max-width",{duration:100,easing:t.transitions.easing.easeOut,delay:50})})))),Km=["components","fullWidth","inputComponent","label","multiline","notched","slots","type"],Zm=(0,de.Ay)(Ac,{shouldForwardProp:e=>(0,yl.A)(e)||"classes"===e,name:"MuiOutlinedInput",slot:"Root",overridesResolver:bc})((({theme:e,ownerState:t})=>{const o="light"===e.palette.mode?"rgba(0, 0, 0, 0.23)":"rgba(255, 255, 255, 0.23)";return(0,k.A)({position:"relative",borderRadius:(e.vars||e).shape.borderRadius,[`&:hover .${Un.notchedOutline}`]:{borderColor:(e.vars||e).palette.text.primary},"@media (hover: none)":{[`&:hover .${Un.notchedOutline}`]:{borderColor:e.vars?`rgba(${e.vars.palette.common.onBackgroundChannel} / 0.23)`:o}},[`&.${Un.focused} .${Un.notchedOutline}`]:{borderColor:(e.vars||e).palette[t.color].main,borderWidth:2},[`&.${Un.error} .${Un.notchedOutline}`]:{borderColor:(e.vars||e).palette.error.main},[`&.${Un.disabled} .${Un.notchedOutline}`]:{borderColor:(e.vars||e).palette.action.disabled}},t.startAdornment&&{paddingLeft:14},t.endAdornment&&{paddingRight:14},t.multiline&&(0,k.A)({padding:"16.5px 14px"},"small"===t.size&&{padding:"8.5px 14px"}))})),Jm=(0,de.Ay)((function(e){const{className:t,label:o,notched:r}=e,n=(0,R.A)(e,Gm),a=null!=o&&""!==o,i=(0,k.A)({},e,{notched:r,withLabel:a});return(0,we.jsx)(Xm,(0,k.A)({"aria-hidden":!0,className:t,ownerState:i},n,{children:(0,we.jsx)(Ym,{ownerState:i,children:a?(0,we.jsx)("span",{children:o}):qm||(qm=(0,we.jsx)("span",{className:"notranslate",children:"​"}))})}))}),{name:"MuiOutlinedInput",slot:"NotchedOutline",overridesResolver:(e,t)=>t.notchedOutline})((({theme:e})=>{const t="light"===e.palette.mode?"rgba(0, 0, 0, 0.23)":"rgba(255, 255, 255, 0.23)";return{borderColor:e.vars?`rgba(${e.vars.palette.common.onBackgroundChannel} / 0.23)`:t}})),Qm=(0,de.Ay)(wc,{name:"MuiOutlinedInput",slot:"Input",overridesResolver:xc})((({theme:e,ownerState:t})=>(0,k.A)({padding:"16.5px 14px"},!e.vars&&{"&:-webkit-autofill":{WebkitBoxShadow:"light"===e.palette.mode?null:"0 0 0 100px #266798 inset",WebkitTextFillColor:"light"===e.palette.mode?null:"#fff",caretColor:"light"===e.palette.mode?null:"#fff",borderRadius:"inherit"}},e.vars&&{"&:-webkit-autofill":{borderRadius:"inherit"},[e.getColorSchemeSelector("dark")]:{"&:-webkit-autofill":{WebkitBoxShadow:"0 0 0 100px #266798 inset",WebkitTextFillColor:"#fff",caretColor:"#fff"}}},"small"===t.size&&{padding:"8.5px 14px"},t.multiline&&{padding:0},t.startAdornment&&{paddingLeft:0},t.endAdornment&&{paddingRight:0}))),ef=ge.forwardRef((function(e,t){var o,r,n,a,i;const s=(0,vt.b)({props:e,name:"MuiOutlinedInput"}),{components:l={},fullWidth:c=!1,inputComponent:u="input",label:d,multiline:p=!1,notched:m,slots:f={},type:v="text"}=s,h=(0,R.A)(s,Km),g=(e=>{const{classes:t}=e,o=(0,ft.A)({root:["root"],notchedOutline:["notchedOutline"],input:["input"]},Hn,t);return(0,k.A)({},t,o)})(s),y=(0,mc.A)(),b=dc({props:s,muiFormControl:y,states:["color","disabled","error","focused","hiddenLabel","size","required"]}),x=(0,k.A)({},s,{color:b.color||"primary",disabled:b.disabled,error:b.error,focused:b.focused,formControl:y,fullWidth:c,hiddenLabel:b.hiddenLabel,multiline:p,size:b.size,type:v}),A=null!=(o=null!=(r=f.root)?r:l.Root)?o:Zm,w=null!=(n=null!=(a=f.input)?a:l.Input)?n:Qm;return(0,we.jsx)(_c,(0,k.A)({slots:{root:A,input:w},renderSuffix:e=>(0,we.jsx)(Jm,{ownerState:x,className:g.notchedOutline,label:null!=d&&""!==d&&b.required?i||(i=(0,we.jsxs)(ge.Fragment,{children:[d," ","*"]})):d,notched:void 0!==m?m:Boolean(e.startAdornment||e.filled||e.focused)}),fullWidth:c,inputComponent:u,multiline:p,ref:t,type:v},h,{classes:(0,k.A)({},g,{notchedOutline:null})}))}));ef.muiName="Input";const tf=ef;function of(e){return(0,At.Ay)("MuiPagination",e)}const rf=(0,xt.A)("MuiPagination",["root","ul","outlined","text"]),nf=["boundaryCount","componentName","count","defaultPage","disabled","hideNextButton","hidePrevButton","onChange","page","showFirstButton","showLastButton","siblingCount"];function af(e={}){const{boundaryCount:t=1,componentName:o="usePagination",count:r=1,defaultPage:n=1,disabled:a=!1,hideNextButton:i=!1,hidePrevButton:s=!1,onChange:l,page:c,showFirstButton:u=!1,showLastButton:d=!1,siblingCount:p=1}=e,m=(0,R.A)(e,nf),[f,v]=(0,Ho.A)({controlled:c,default:n,name:o,state:"page"}),h=(e,t)=>{c||v(t),l&&l(e,t)},g=(e,t)=>{const o=t-e+1;return Array.from({length:o},((t,o)=>e+o))},y=g(1,Math.min(t,r)),b=g(Math.max(r-t+1,t+1),r),x=Math.max(Math.min(f-p,r-t-2*p-1),t+2),A=Math.min(Math.max(f+p,t+2*p+2),b.length>0?b[0]-2:r-1),w=[...u?["first"]:[],...s?[]:["previous"],...y,...x>t+2?["start-ellipsis"]:t+1<r-t?[t+1]:[],...g(x,A),...A<r-t-1?["end-ellipsis"]:r-t>t?[r-t]:[],...b,...i?[]:["next"],...d?["last"]:[]],S=e=>{switch(e){case"first":return 1;case"previous":return f-1;case"next":return f+1;case"last":return r;default:return null}},C=w.map((e=>"number"==typeof e?{onClick:t=>{h(t,e)},type:"page",page:e,selected:e===f,disabled:a,"aria-current":e===f?"true":void 0}:{onClick:t=>{h(t,S(e))},type:e,page:S(e),selected:!1,disabled:a||-1===e.indexOf("ellipsis")&&("next"===e||"last"===e?f>=r:f<=1)}));return(0,k.A)({items:C},m)}function sf(e){return(0,At.Ay)("MuiPaginationItem",e)}const lf=(0,xt.A)("MuiPaginationItem",["root","page","sizeSmall","sizeLarge","text","textPrimary","textSecondary","outlined","outlinedPrimary","outlinedSecondary","rounded","ellipsis","firstLast","previousNext","focusVisible","disabled","selected","icon","colorPrimary","colorSecondary"]),cf=(0,vo.A)((0,we.jsx)("path",{d:"M18.41 16.59L13.82 12l4.59-4.59L17 6l-6 6 6 6zM6 6h2v12H6z"}),"FirstPage"),uf=(0,vo.A)((0,we.jsx)("path",{d:"M5.59 7.41L10.18 12l-4.59 4.59L7 18l6-6-6-6zM16 6h2v12h-2z"}),"LastPage"),df=(0,vo.A)((0,we.jsx)("path",{d:"M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z"}),"NavigateBefore"),pf=(0,vo.A)((0,we.jsx)("path",{d:"M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"}),"NavigateNext"),mf=["className","color","component","components","disabled","page","selected","shape","size","slots","type","variant"],ff=(e,t)=>{const{ownerState:o}=e;return[t.root,t[o.variant],t[`size${(0,uo.A)(o.size)}`],"text"===o.variant&&t[`text${(0,uo.A)(o.color)}`],"outlined"===o.variant&&t[`outlined${(0,uo.A)(o.color)}`],"rounded"===o.shape&&t.rounded,"page"===o.type&&t.page,("start-ellipsis"===o.type||"end-ellipsis"===o.type)&&t.ellipsis,("previous"===o.type||"next"===o.type)&&t.previousNext,("first"===o.type||"last"===o.type)&&t.firstLast]},vf=(0,de.Ay)("div",{name:"MuiPaginationItem",slot:"Root",overridesResolver:ff})((({theme:e,ownerState:t})=>(0,k.A)({},e.typography.body2,{borderRadius:16,textAlign:"center",boxSizing:"border-box",minWidth:32,padding:"0 6px",margin:"0 3px",color:(e.vars||e).palette.text.primary,height:"auto",[`&.${lf.disabled}`]:{opacity:(e.vars||e).palette.action.disabledOpacity}},"small"===t.size&&{minWidth:26,borderRadius:13,margin:"0 1px",padding:"0 4px"},"large"===t.size&&{minWidth:40,borderRadius:20,padding:"0 10px",fontSize:e.typography.pxToRem(15)}))),hf=(0,de.Ay)(oo.A,{name:"MuiPaginationItem",slot:"Root",overridesResolver:ff})((({theme:e,ownerState:t})=>(0,k.A)({},e.typography.body2,{borderRadius:16,textAlign:"center",boxSizing:"border-box",minWidth:32,height:32,padding:"0 6px",margin:"0 3px",color:(e.vars||e).palette.text.primary,[`&.${lf.focusVisible}`]:{backgroundColor:(e.vars||e).palette.action.focus},[`&.${lf.disabled}`]:{opacity:(e.vars||e).palette.action.disabledOpacity},transition:e.transitions.create(["color","background-color"],{duration:e.transitions.duration.short}),"&:hover":{backgroundColor:(e.vars||e).palette.action.hover,"@media (hover: none)":{backgroundColor:"transparent"}},[`&.${lf.selected}`]:{backgroundColor:(e.vars||e).palette.action.selected,"&:hover":{backgroundColor:e.vars?`rgba(${e.vars.palette.action.selectedChannel} / calc(${e.vars.palette.action.selectedOpacity} + ${e.vars.palette.action.hoverOpacity}))`:(0,De.X4)(e.palette.action.selected,e.palette.action.selectedOpacity+e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:(e.vars||e).palette.action.selected}},[`&.${lf.focusVisible}`]:{backgroundColor:e.vars?`rgba(${e.vars.palette.action.selectedChannel} / calc(${e.vars.palette.action.selectedOpacity} + ${e.vars.palette.action.focusOpacity}))`:(0,De.X4)(e.palette.action.selected,e.palette.action.selectedOpacity+e.palette.action.focusOpacity)},[`&.${lf.disabled}`]:{opacity:1,color:(e.vars||e).palette.action.disabled,backgroundColor:(e.vars||e).palette.action.selected}}},"small"===t.size&&{minWidth:26,height:26,borderRadius:13,margin:"0 1px",padding:"0 4px"},"large"===t.size&&{minWidth:40,height:40,borderRadius:20,padding:"0 10px",fontSize:e.typography.pxToRem(15)},"rounded"===t.shape&&{borderRadius:(e.vars||e).shape.borderRadius})),(({theme:e,ownerState:t})=>(0,k.A)({},"text"===t.variant&&{[`&.${lf.selected}`]:(0,k.A)({},"standard"!==t.color&&{color:(e.vars||e).palette[t.color].contrastText,backgroundColor:(e.vars||e).palette[t.color].main,"&:hover":{backgroundColor:(e.vars||e).palette[t.color].dark,"@media (hover: none)":{backgroundColor:(e.vars||e).palette[t.color].main}},[`&.${lf.focusVisible}`]:{backgroundColor:(e.vars||e).palette[t.color].dark}},{[`&.${lf.disabled}`]:{color:(e.vars||e).palette.action.disabled}})},"outlined"===t.variant&&{border:e.vars?`1px solid rgba(${e.vars.palette.common.onBackgroundChannel} / 0.23)`:"1px solid "+("light"===e.palette.mode?"rgba(0, 0, 0, 0.23)":"rgba(255, 255, 255, 0.23)"),[`&.${lf.selected}`]:(0,k.A)({},"standard"!==t.color&&{color:(e.vars||e).palette[t.color].main,border:`1px solid ${e.vars?`rgba(${e.vars.palette[t.color].mainChannel} / 0.5)`:(0,De.X4)(e.palette[t.color].main,.5)}`,backgroundColor:e.vars?`rgba(${e.vars.palette[t.color].mainChannel} / ${e.vars.palette.action.activatedOpacity})`:(0,De.X4)(e.palette[t.color].main,e.palette.action.activatedOpacity),"&:hover":{backgroundColor:e.vars?`rgba(${e.vars.palette[t.color].mainChannel} / calc(${e.vars.palette.action.activatedOpacity} + ${e.vars.palette.action.focusOpacity}))`:(0,De.X4)(e.palette[t.color].main,e.palette.action.activatedOpacity+e.palette.action.focusOpacity),"@media (hover: none)":{backgroundColor:"transparent"}},[`&.${lf.focusVisible}`]:{backgroundColor:e.vars?`rgba(${e.vars.palette[t.color].mainChannel} / calc(${e.vars.palette.action.activatedOpacity} + ${e.vars.palette.action.focusOpacity}))`:(0,De.X4)(e.palette[t.color].main,e.palette.action.activatedOpacity+e.palette.action.focusOpacity)}},{[`&.${lf.disabled}`]:{borderColor:(e.vars||e).palette.action.disabledBackground,color:(e.vars||e).palette.action.disabled}})}))),gf=(0,de.Ay)("div",{name:"MuiPaginationItem",slot:"Icon",overridesResolver:(e,t)=>t.icon})((({theme:e,ownerState:t})=>(0,k.A)({fontSize:e.typography.pxToRem(20),margin:"0 -8px"},"small"===t.size&&{fontSize:e.typography.pxToRem(18)},"large"===t.size&&{fontSize:e.typography.pxToRem(22)}))),yf=ge.forwardRef((function(e,t){const o=(0,vt.b)({props:e,name:"MuiPaginationItem"}),{className:r,color:n="standard",component:a,components:i={},disabled:s=!1,page:l,selected:c=!1,shape:u="circular",size:d="medium",slots:p={},type:m="page",variant:f="text"}=o,v=(0,R.A)(o,mf),h=(0,k.A)({},o,{color:n,disabled:s,selected:c,shape:u,size:d,type:m,variant:f}),g=(0,Tl.I)(),y=(e=>{const{classes:t,color:o,disabled:r,selected:n,size:a,shape:i,type:s,variant:l}=e,c={root:["root",`size${(0,uo.A)(a)}`,l,i,"standard"!==o&&`color${(0,uo.A)(o)}`,"standard"!==o&&`${l}${(0,uo.A)(o)}`,r&&"disabled",n&&"selected",{page:"page",first:"firstLast",last:"firstLast","start-ellipsis":"ellipsis","end-ellipsis":"ellipsis",previous:"previousNext",next:"previousNext"}[s]],icon:["icon"]};return(0,ft.A)(c,sf,t)})(h),b=(g?{previous:p.next||i.next||pf,next:p.previous||i.previous||df,last:p.first||i.first||cf,first:p.last||i.last||uf}:{previous:p.previous||i.previous||df,next:p.next||i.next||pf,first:p.first||i.first||cf,last:p.last||i.last||uf})[m];return"start-ellipsis"===m||"end-ellipsis"===m?(0,we.jsx)(vf,{ref:t,ownerState:h,className:(0,mt.A)(y.root,r),children:"…"}):(0,we.jsxs)(hf,(0,k.A)({ref:t,ownerState:h,component:a,disabled:s,className:(0,mt.A)(y.root,r)},v,{children:["page"===m&&l,b?(0,we.jsx)(gf,{as:b,ownerState:h,className:y.icon}):null]}))})),bf=yf,xf=["boundaryCount","className","color","count","defaultPage","disabled","getItemAriaLabel","hideNextButton","hidePrevButton","onChange","page","renderItem","shape","showFirstButton","showLastButton","siblingCount","size","variant"],Af=(0,de.Ay)("nav",{name:"MuiPagination",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:o}=e;return[t.root,t[o.variant]]}})({}),wf=(0,de.Ay)("ul",{name:"MuiPagination",slot:"Ul",overridesResolver:(e,t)=>t.ul})({display:"flex",flexWrap:"wrap",alignItems:"center",padding:0,margin:0,listStyle:"none"});function Sf(e,t,o){return"page"===e?`${o?"":"Go to "}page ${t}`:`Go to ${e} page`}const Cf=ge.forwardRef((function(e,t){const o=(0,vt.b)({props:e,name:"MuiPagination"}),{boundaryCount:r=1,className:n,color:a="standard",count:i=1,defaultPage:s=1,disabled:l=!1,getItemAriaLabel:c=Sf,hideNextButton:u=!1,hidePrevButton:d=!1,renderItem:p=e=>(0,we.jsx)(bf,(0,k.A)({},e)),shape:m="circular",showFirstButton:f=!1,showLastButton:v=!1,siblingCount:h=1,size:g="medium",variant:y="text"}=o,b=(0,R.A)(o,xf),{items:x}=af((0,k.A)({},o,{componentName:"Pagination"})),A=(0,k.A)({},o,{boundaryCount:r,color:a,count:i,defaultPage:s,disabled:l,getItemAriaLabel:c,hideNextButton:u,hidePrevButton:d,renderItem:p,shape:m,showFirstButton:f,showLastButton:v,siblingCount:h,size:g,variant:y}),w=(e=>{const{classes:t,variant:o}=e,r={root:["root",o],ul:["ul"]};return(0,ft.A)(r,of,t)})(A);return(0,we.jsx)(Af,(0,k.A)({"aria-label":"pagination navigation",className:(0,mt.A)(w.root,n),ownerState:A,ref:t},b,{children:(0,we.jsx)(wf,{className:w.ul,ownerState:A,children:x.map(((e,t)=>(0,we.jsx)("li",{children:p((0,k.A)({},e,{color:a,"aria-label":c(e.type,e.page,e.selected),shape:m,size:g,variant:y}))},t)))})}))}));var _f=o("./node_modules/.pnpm/@mui+material@5.16.4_@emotion+react@11.13.0_@types+react@18.3.3_react@18.3.1__@emotion+styled_brxipnv4yvqheosgxcawdxdyay/node_modules/@mui/material/Paper/paperClasses.js"),kf=o("./node_modules/.pnpm/@mui+material@5.16.4_@emotion+react@11.13.0_@types+react@18.3.3_react@18.3.1__@emotion+styled_brxipnv4yvqheosgxcawdxdyay/node_modules/@mui/material/Popover/Popover.js"),Rf=o("./node_modules/.pnpm/@mui+material@5.16.4_@emotion+react@11.13.0_@types+react@18.3.3_react@18.3.1__@emotion+styled_brxipnv4yvqheosgxcawdxdyay/node_modules/@mui/material/Popover/popoverClasses.js"),Pf=o("./node_modules/.pnpm/@mui+material@5.16.4_@emotion+react@11.13.0_@types+react@18.3.3_react@18.3.1__@emotion+styled_brxipnv4yvqheosgxcawdxdyay/node_modules/@mui/material/internal/SwitchBase.js");const Mf=(0,vo.A)((0,we.jsx)("path",{d:"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z"}),"RadioButtonUnchecked"),If=(0,vo.A)((0,we.jsx)("path",{d:"M8.465 8.465C9.37 7.56 10.62 7 12 7C14.76 7 17 9.24 17 12C17 13.38 16.44 14.63 15.535 15.535C14.63 16.44 13.38 17 12 17C9.24 17 7 14.76 7 12C7 10.62 7.56 9.37 8.465 8.465Z"}),"RadioButtonChecked"),jf=(0,de.Ay)("span",{shouldForwardProp:yl.A})({position:"relative",display:"flex"}),$f=(0,de.Ay)(Mf)({transform:"scale(1)"}),Tf=(0,de.Ay)(If)((({theme:e,ownerState:t})=>(0,k.A)({left:0,position:"absolute",transform:"scale(0)",transition:e.transitions.create("transform",{easing:e.transitions.easing.easeIn,duration:e.transitions.duration.shortest})},t.checked&&{transform:"scale(1)",transition:e.transitions.create("transform",{easing:e.transitions.easing.easeOut,duration:e.transitions.duration.shortest})}))),Lf=function(e){const{checked:t=!1,classes:o={},fontSize:r}=e,n=(0,k.A)({},e,{checked:t});return(0,we.jsxs)(jf,{className:o.root,ownerState:n,children:[(0,we.jsx)($f,{fontSize:r,className:o.background,ownerState:n}),(0,we.jsx)(Tf,{fontSize:r,className:o.dot,ownerState:n})]})};var Of=o("./node_modules/.pnpm/@mui+material@5.16.4_@emotion+react@11.13.0_@types+react@18.3.3_react@18.3.1__@emotion+styled_brxipnv4yvqheosgxcawdxdyay/node_modules/@mui/material/utils/createChainedFunction.js");const Ef=ge.createContext(void 0);function Bf(){return ge.useContext(Ef)}function Nf(e){return(0,At.Ay)("MuiRadio",e)}const zf=(0,xt.A)("MuiRadio",["root","checked","disabled","colorPrimary","colorSecondary","sizeSmall"]),Df=["checked","checkedIcon","color","icon","name","onChange","size","className"],Ff=(0,de.Ay)(Pf.A,{shouldForwardProp:e=>(0,yl.A)(e)||"classes"===e,name:"MuiRadio",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:o}=e;return[t.root,"medium"!==o.size&&t[`size${(0,uo.A)(o.size)}`],t[`color${(0,uo.A)(o.color)}`]]}})((({theme:e,ownerState:t})=>(0,k.A)({color:(e.vars||e).palette.text.secondary},!t.disableRipple&&{"&:hover":{backgroundColor:e.vars?`rgba(${"default"===t.color?e.vars.palette.action.activeChannel:e.vars.palette[t.color].mainChannel} / ${e.vars.palette.action.hoverOpacity})`:(0,De.X4)("default"===t.color?e.palette.action.active:e.palette[t.color].main,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}}},"default"!==t.color&&{[`&.${zf.checked}`]:{color:(e.vars||e).palette[t.color].main}},{[`&.${zf.disabled}`]:{color:(e.vars||e).palette.action.disabled}}))),Wf=(0,we.jsx)(Lf,{checked:!0}),Vf=(0,we.jsx)(Lf,{}),Hf=ge.forwardRef((function(e,t){var o,r;const n=(0,vt.b)({props:e,name:"MuiRadio"}),{checked:a,checkedIcon:i=Wf,color:s="primary",icon:l=Vf,name:c,onChange:u,size:d="medium",className:p}=n,m=(0,R.A)(n,Df),f=(0,k.A)({},n,{color:s,size:d}),v=(e=>{const{classes:t,color:o,size:r}=e,n={root:["root",`color${(0,uo.A)(o)}`,"medium"!==r&&`size${(0,uo.A)(r)}`]};return(0,k.A)({},t,(0,ft.A)(n,Nf,t))})(f),h=Bf();let g=a;const y=(0,Of.A)(u,h&&h.onChange);let b=c;var x,A;return h&&(void 0===g&&(x=h.value,g="object"==typeof(A=n.value)&&null!==A?x===A:String(x)===String(A)),void 0===b&&(b=h.name)),(0,we.jsx)(Ff,(0,k.A)({type:"radio",icon:ge.cloneElement(l,{fontSize:null!=(o=Vf.props.fontSize)?o:d}),checkedIcon:ge.cloneElement(i,{fontSize:null!=(r=Wf.props.fontSize)?r:d}),ownerState:f,classes:v,name:b,checked:g,onChange:y,ref:t,className:(0,mt.A)(v.root,p)},m))}));function Uf(e){return(0,At.Ay)("MuiRadioGroup",e)}const qf=(0,xt.A)("MuiRadioGroup",["root","row","error"]);var Gf=o("./node_modules/.pnpm/@mui+material@5.16.4_@emotion+react@11.13.0_@types+react@18.3.3_react@18.3.1__@emotion+styled_brxipnv4yvqheosgxcawdxdyay/node_modules/@mui/material/utils/useId.js");const Xf=["actions","children","className","defaultValue","name","onChange","value"],Yf=ge.forwardRef((function(e,t){const{actions:o,children:r,className:n,defaultValue:a,name:i,onChange:s,value:l}=e,c=(0,R.A)(e,Xf),u=ge.useRef(null),d=(e=>{const{classes:t,row:o,error:r}=e,n={root:["root",o&&"row",r&&"error"]};return(0,ft.A)(n,Uf,t)})(e),[p,m]=(0,$t.A)({controlled:l,default:a,name:"RadioGroup"});ge.useImperativeHandle(o,(()=>({focus:()=>{let e=u.current.querySelector("input:not(:disabled):checked");e||(e=u.current.querySelector("input:not(:disabled)")),e&&e.focus()}})),[]);const f=(0,bt.A)(t,u),v=(0,Gf.A)(i),h=ge.useMemo((()=>({name:v,onChange(e){m(e.target.value),s&&s(e,e.target.value)},value:p})),[v,s,m,p]);return(0,we.jsx)(Ef.Provider,{value:h,children:(0,we.jsx)(ru,(0,k.A)({role:"radiogroup",ref:f,className:(0,mt.A)(d.root,n)},c,{children:r}))})})),Kf={border:0,clip:"rect(0 0 0 0)",height:"1px",margin:"-1px",overflow:"hidden",padding:0,position:"absolute",whiteSpace:"nowrap",width:"1px"},Zf=(0,vo.A)((0,we.jsx)("path",{d:"M12 17.27L18.18 21l-1.64-7.03L22 9.24l-7.19-.61L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21z"}),"Star"),Jf=(0,vo.A)((0,we.jsx)("path",{d:"M22 9.24l-7.19-.62L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21 12 17.27 18.18 21l-1.63-7.03L22 9.24zM12 15.4l-3.76 2.27 1-4.28-3.32-2.88 4.38-.38L12 6.1l1.71 4.04 4.38.38-3.32 2.88 1 4.28L12 15.4z"}),"StarBorder");function Qf(e){return(0,At.Ay)("MuiRating",e)}const ev=(0,xt.A)("MuiRating",["root","sizeSmall","sizeMedium","sizeLarge","readOnly","disabled","focusVisible","visuallyHidden","pristine","label","labelEmptyValueActive","icon","iconEmpty","iconFilled","iconHover","iconFocus","iconActive","decimal"]),tv=["value"],ov=["className","defaultValue","disabled","emptyIcon","emptyLabelText","getLabelText","highlightSelectedOnly","icon","IconContainerComponent","max","name","onChange","onChangeActive","onMouseLeave","onMouseMove","precision","readOnly","size","value"];function rv(e,t){if(null==e)return e;const o=Math.round(e/t)*t;return Number(o.toFixed(function(e){const t=e.toString().split(".")[1];return t?t.length:0}(t)))}const nv=(0,de.Ay)("span",{name:"MuiRating",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:o}=e;return[{[`& .${ev.visuallyHidden}`]:t.visuallyHidden},t.root,t[`size${(0,uo.A)(o.size)}`],o.readOnly&&t.readOnly]}})((({theme:e,ownerState:t})=>(0,k.A)({display:"inline-flex",position:"relative",fontSize:e.typography.pxToRem(24),color:"#faaf00",cursor:"pointer",textAlign:"left",width:"min-content",WebkitTapHighlightColor:"transparent",[`&.${ev.disabled}`]:{opacity:(e.vars||e).palette.action.disabledOpacity,pointerEvents:"none"},[`&.${ev.focusVisible} .${ev.iconActive}`]:{outline:"1px solid #999"},[`& .${ev.visuallyHidden}`]:Kf},"small"===t.size&&{fontSize:e.typography.pxToRem(18)},"large"===t.size&&{fontSize:e.typography.pxToRem(30)},t.readOnly&&{pointerEvents:"none"}))),av=(0,de.Ay)("label",{name:"MuiRating",slot:"Label",overridesResolver:({ownerState:e},t)=>[t.label,e.emptyValueFocused&&t.labelEmptyValueActive]})((({ownerState:e})=>(0,k.A)({cursor:"inherit"},e.emptyValueFocused&&{top:0,bottom:0,position:"absolute",outline:"1px solid #999",width:"100%"}))),iv=(0,de.Ay)("span",{name:"MuiRating",slot:"Icon",overridesResolver:(e,t)=>{const{ownerState:o}=e;return[t.icon,o.iconEmpty&&t.iconEmpty,o.iconFilled&&t.iconFilled,o.iconHover&&t.iconHover,o.iconFocus&&t.iconFocus,o.iconActive&&t.iconActive]}})((({theme:e,ownerState:t})=>(0,k.A)({display:"flex",transition:e.transitions.create("transform",{duration:e.transitions.duration.shortest}),pointerEvents:"none"},t.iconActive&&{transform:"scale(1.2)"},t.iconEmpty&&{color:(e.vars||e).palette.action.disabled}))),sv=(0,de.Ay)("span",{name:"MuiRating",slot:"Decimal",shouldForwardProp:e=>(0,Am.A)(e)&&"iconActive"!==e,overridesResolver:(e,t)=>{const{iconActive:o}=e;return[t.decimal,o&&t.iconActive]}})((({iconActive:e})=>(0,k.A)({position:"relative"},e&&{transform:"scale(1.2)"})));function lv(e){const t=(0,R.A)(e,tv);return(0,we.jsx)("span",(0,k.A)({},t))}function cv(e){const{classes:t,disabled:o,emptyIcon:r,focus:n,getLabelText:a,highlightSelectedOnly:i,hover:s,icon:l,IconContainerComponent:c,isActive:u,itemValue:d,labelProps:p,name:m,onBlur:f,onChange:v,onClick:h,onFocus:g,readOnly:y,ownerState:b,ratingValue:x,ratingValueRounded:A}=e,w=i?d===x:d<=x,S=d<=s,C=d<=n,_=d===A,R=(0,Gf.A)(),P=(0,we.jsx)(iv,{as:c,value:d,className:(0,mt.A)(t.icon,w?t.iconFilled:t.iconEmpty,S&&t.iconHover,C&&t.iconFocus,u&&t.iconActive),ownerState:(0,k.A)({},b,{iconEmpty:!w,iconFilled:w,iconHover:S,iconFocus:C,iconActive:u}),children:r&&!w?r:l});return y?(0,we.jsx)("span",(0,k.A)({},p,{children:P})):(0,we.jsxs)(ge.Fragment,{children:[(0,we.jsxs)(av,(0,k.A)({ownerState:(0,k.A)({},b,{emptyValueFocused:void 0}),htmlFor:R},p,{children:[P,(0,we.jsx)("span",{className:t.visuallyHidden,children:a(d)})]})),(0,we.jsx)("input",{className:t.visuallyHidden,onFocus:g,onBlur:f,onChange:v,onClick:h,disabled:o,value:d,id:R,type:"radio",name:m,checked:_})]})}const uv=(0,we.jsx)(Zf,{fontSize:"inherit"}),dv=(0,we.jsx)(Jf,{fontSize:"inherit"});function pv(e){return`${e} Star${1!==e?"s":""}`}const mv=ge.forwardRef((function(e,t){const o=(0,vt.b)({name:"MuiRating",props:e}),{className:r,defaultValue:n=null,disabled:a=!1,emptyIcon:i=dv,emptyLabelText:s="Empty",getLabelText:l=pv,highlightSelectedOnly:c=!1,icon:u=uv,IconContainerComponent:d=lv,max:p=5,name:m,onChange:f,onChangeActive:v,onMouseLeave:h,onMouseMove:g,precision:y=1,readOnly:b=!1,size:x="medium",value:A}=o,w=(0,R.A)(o,ov),S=(0,Gf.A)(m),[C,_]=(0,$t.A)({controlled:A,default:n,name:"Rating"}),P=rv(C,y),M=(0,Tl.I)(),[{hover:I,focus:j},$]=ge.useState({hover:-1,focus:-1});let L=P;-1!==I&&(L=I),-1!==j&&(L=j);const{isFocusVisibleRef:O,onBlur:E,onFocus:B,ref:N}=(0,Rp.A)(),[z,D]=ge.useState(!1),F=ge.useRef(),W=(0,bt.A)(N,F,t),V=e=>{let t=""===e.target.value?null:parseFloat(e.target.value);-1!==I&&(t=I),_(t),f&&f(e,t)},H=e=>{0===e.clientX&&0===e.clientY||($({hover:-1,focus:-1}),_(null),f&&parseFloat(e.target.value)===P&&f(e,null))},U=e=>{B(e),!0===O.current&&D(!0);const t=parseFloat(e.target.value);$((e=>({hover:e.hover,focus:t})))},q=e=>{-1===I&&(E(e),!1===O.current&&D(!1),$((e=>({hover:e.hover,focus:-1}))))},[G,X]=ge.useState(!1),Y=(0,k.A)({},o,{defaultValue:n,disabled:a,emptyIcon:i,emptyLabelText:s,emptyValueFocused:G,focusVisible:z,getLabelText:l,icon:u,IconContainerComponent:d,max:p,precision:y,readOnly:b,size:x}),K=(e=>{const{classes:t,size:o,readOnly:r,disabled:n,emptyValueFocused:a,focusVisible:i}=e,s={root:["root",`size${(0,uo.A)(o)}`,n&&"disabled",i&&"focusVisible",r&&"readOnly"],label:["label","pristine"],labelEmptyValue:[a&&"labelEmptyValueActive"],icon:["icon"],iconEmpty:["iconEmpty"],iconFilled:["iconFilled"],iconHover:["iconHover"],iconFocus:["iconFocus"],iconActive:["iconActive"],decimal:["decimal"],visuallyHidden:["visuallyHidden"]};return(0,ft.A)(s,Qf,t)})(Y);return(0,we.jsxs)(nv,(0,k.A)({ref:W,onMouseMove:e=>{g&&g(e);const t=F.current,{right:o,left:r,width:n}=t.getBoundingClientRect();let a;a=M?(o-e.clientX)/n:(e.clientX-r)/n;let i=rv(p*a+y/2,y);i=(0,T.A)(i,y,p),$((e=>e.hover===i&&e.focus===i?e:{hover:i,focus:i})),D(!1),v&&I!==i&&v(e,i)},onMouseLeave:e=>{h&&h(e),$({hover:-1,focus:-1}),v&&-1!==I&&v(e,-1)},className:(0,mt.A)(K.root,r,b&&"MuiRating-readOnly"),ownerState:Y,role:b?"img":null,"aria-label":b?l(L):null},w,{children:[Array.from(new Array(p)).map(((e,t)=>{const o=t+1,r={classes:K,disabled:a,emptyIcon:i,focus:j,getLabelText:l,highlightSelectedOnly:c,hover:I,icon:u,IconContainerComponent:d,name:S,onBlur:q,onChange:V,onClick:H,onFocus:U,ratingValue:L,ratingValueRounded:P,readOnly:b,ownerState:Y},n=o===Math.ceil(L)&&(-1!==I||-1!==j);if(y<1){const e=Array.from(new Array(1/y));return(0,we.jsx)(sv,{className:(0,mt.A)(K.decimal,n&&K.iconActive),ownerState:Y,iconActive:n,children:e.map(((t,n)=>{const a=rv(o-1+(n+1)*y,y);return(0,we.jsx)(cv,(0,k.A)({},r,{isActive:!1,itemValue:a,labelProps:{style:e.length-1===n?{}:{width:a===L?(n+1)*y*100+"%":"0%",overflow:"hidden",position:"absolute"}}}),a)}))},o)}return(0,we.jsx)(cv,(0,k.A)({},r,{isActive:n,itemValue:o}),o)})),!b&&!a&&(0,we.jsxs)(av,{className:(0,mt.A)(K.label,K.labelEmptyValue),ownerState:Y,children:[(0,we.jsx)("input",{className:K.visuallyHidden,value:"",id:`${S}-empty`,type:"radio",name:S,checked:null==P,onFocus:()=>X(!0),onBlur:()=>X(!1),onChange:V}),(0,we.jsx)("span",{className:K.visuallyHidden,children:s})]})]}))})),fv=mv;function vv(e){return(0,At.Ay)("MuiScopedCssBaseline",e)}const hv=(0,xt.A)("MuiScopedCssBaseline",["root"]),gv=["className","component","enableColorScheme"],yv=(0,de.Ay)("div",{name:"MuiScopedCssBaseline",slot:"Root",overridesResolver:(e,t)=>t.root})((({theme:e,ownerState:t})=>{const o={};return t.enableColorScheme&&e.colorSchemes&&Object.entries(e.colorSchemes).forEach((([t,r])=>{var n;o[`&${e.getColorSchemeSelector(t).replace(/\s*&/,"")}`]={colorScheme:null==(n=r.palette)?void 0:n.mode}})),(0,k.A)({},(0,qs.qy)(e,t.enableColorScheme),(0,qs.rf)(e),{"& *, & *::before, & *::after":{boxSizing:"inherit"},"& strong, & b":{fontWeight:e.typography.fontWeightBold}},o)})),bv=ge.forwardRef((function(e,t){const o=(0,vt.b)({props:e,name:"MuiScopedCssBaseline"}),{className:r,component:n="div"}=o,a=(0,R.A)(o,gv),i=(0,k.A)({},o,{component:n}),s=(e=>{const{classes:t}=e;return(0,ft.A)({root:["root"]},vv,t)})(i);return(0,we.jsx)(yv,(0,k.A)({as:n,className:(0,mt.A)(s.root,r),ref:t,ownerState:i},a))}));var xv=o("./node_modules/.pnpm/@mui+material@5.16.4_@emotion+react@11.13.0_@types+react@18.3.3_react@18.3.1__@emotion+styled_brxipnv4yvqheosgxcawdxdyay/node_modules/@mui/material/utils/ownerDocument.js");function Av(e){return(0,At.Ay)("MuiSelect",e)}const wv=(0,xt.A)("MuiSelect",["root","select","multiple","filled","outlined","standard","disabled","focused","icon","iconOpen","iconFilled","iconOutlined","iconStandard","nativeInput","error"]);var Sv;const Cv=["aria-describedby","aria-label","autoFocus","autoWidth","children","className","defaultOpen","defaultValue","disabled","displayEmpty","error","IconComponent","inputRef","labelId","MenuProps","multiple","name","onBlur","onChange","onClose","onFocus","onOpen","open","readOnly","renderValue","SelectDisplayProps","tabIndex","type","value","variant"],_v=(0,de.Ay)("div",{name:"MuiSelect",slot:"Select",overridesResolver:(e,t)=>{const{ownerState:o}=e;return[{[`&.${wv.select}`]:t.select},{[`&.${wv.select}`]:t[o.variant]},{[`&.${wv.error}`]:t.error},{[`&.${wv.multiple}`]:t.multiple}]}})(Om,{[`&.${wv.select}`]:{height:"auto",minHeight:"1.4375em",textOverflow:"ellipsis",whiteSpace:"nowrap",overflow:"hidden"}}),kv=(0,de.Ay)("svg",{name:"MuiSelect",slot:"Icon",overridesResolver:(e,t)=>{const{ownerState:o}=e;return[t.icon,o.variant&&t[`icon${(0,uo.A)(o.variant)}`],o.open&&t.iconOpen]}})(Bm),Rv=(0,de.Ay)("input",{shouldForwardProp:e=>(0,Am.A)(e)&&"classes"!==e,name:"MuiSelect",slot:"NativeInput",overridesResolver:(e,t)=>t.nativeInput})({bottom:0,left:0,position:"absolute",opacity:0,pointerEvents:"none",width:"100%",boxSizing:"border-box"});function Pv(e,t){return"object"==typeof t&&null!==t?e===t:String(e)===String(t)}function Mv(e){return null==e||"string"==typeof e&&!e.trim()}const Iv=ge.forwardRef((function(e,t){var o;const{"aria-describedby":r,"aria-label":n,autoFocus:a,autoWidth:i,children:s,className:l,defaultOpen:c,defaultValue:u,disabled:d,displayEmpty:p,error:m=!1,IconComponent:f,inputRef:v,labelId:h,MenuProps:g={},multiple:y,name:b,onBlur:x,onChange:A,onClose:w,onFocus:S,onOpen:_,open:P,readOnly:M,renderValue:I,SelectDisplayProps:j={},tabIndex:$,value:T,variant:L="standard"}=e,O=(0,R.A)(e,Cv),[E,B]=(0,$t.A)({controlled:T,default:u,name:"Select"}),[N,z]=(0,$t.A)({controlled:P,default:c,name:"Select"}),D=ge.useRef(null),F=ge.useRef(null),[W,V]=ge.useState(null),{current:H}=ge.useRef(null!=P),[U,q]=ge.useState(),G=(0,bt.A)(t,v),X=ge.useCallback((e=>{F.current=e,e&&V(e)}),[]),Y=null==W?void 0:W.parentNode;ge.useImperativeHandle(G,(()=>({focus:()=>{F.current.focus()},node:D.current,value:E})),[E]),ge.useEffect((()=>{c&&N&&W&&!H&&(q(i?null:Y.clientWidth),F.current.focus())}),[W,i]),ge.useEffect((()=>{a&&F.current.focus()}),[a]),ge.useEffect((()=>{if(!h)return;const e=(0,xv.A)(F.current).getElementById(h);if(e){const t=()=>{getSelection().isCollapsed&&F.current.focus()};return e.addEventListener("click",t),()=>{e.removeEventListener("click",t)}}}),[h]);const K=(e,t)=>{e?_&&_(t):w&&w(t),H||(q(i?null:Y.clientWidth),z(e))},Z=ge.Children.toArray(s),J=e=>t=>{let o;if(t.currentTarget.hasAttribute("tabindex")){if(y){o=Array.isArray(E)?E.slice():[];const t=E.indexOf(e.props.value);-1===t?o.push(e.props.value):o.splice(t,1)}else o=e.props.value;if(e.props.onClick&&e.props.onClick(t),E!==o&&(B(o),A)){const r=t.nativeEvent||t,n=new r.constructor(r.type,r);Object.defineProperty(n,"target",{writable:!0,value:{value:o,name:b}}),A(n,e)}y||K(!1,t)}},Q=null!==W&&N;let ee,te;delete O["aria-invalid"];const oe=[];let re=!1,ne=!1;(gc({value:E})||p)&&(I?ee=I(E):re=!0);const ae=Z.map((e=>{if(!ge.isValidElement(e))return null;let t;if(y){if(!Array.isArray(E))throw new Error((0,C.A)(2));t=E.some((t=>Pv(t,e.props.value))),t&&re&&oe.push(e.props.children)}else t=Pv(E,e.props.value),t&&re&&(te=e.props.children);return t&&(ne=!0),ge.cloneElement(e,{"aria-selected":t?"true":"false",onClick:J(e),onKeyUp:t=>{" "===t.key&&t.preventDefault(),e.props.onKeyUp&&e.props.onKeyUp(t)},role:"option",selected:t,value:void 0,"data-value":e.props.value})}));re&&(ee=y?0===oe.length?null:oe.reduce(((e,t,o)=>(e.push(t),o<oe.length-1&&e.push(", "),e)),[]):te);let ie,se=U;!i&&H&&W&&(se=Y.clientWidth),ie=void 0!==$?$:d?null:0;const le=j.id||(b?`mui-component-select-${b}`:void 0),ce=(0,k.A)({},e,{variant:L,value:E,open:Q,error:m}),ue=(e=>{const{classes:t,variant:o,disabled:r,multiple:n,open:a,error:i}=e,s={select:["select",o,r&&"disabled",n&&"multiple",i&&"error"],icon:["icon",`icon${(0,uo.A)(o)}`,a&&"iconOpen",r&&"disabled"],nativeInput:["nativeInput"]};return(0,ft.A)(s,Av,t)})(ce),de=(0,k.A)({},g.PaperProps,null==(o=g.slotProps)?void 0:o.paper),pe=(0,Vo.A)();return(0,we.jsxs)(ge.Fragment,{children:[(0,we.jsx)(_v,(0,k.A)({ref:X,tabIndex:ie,role:"combobox","aria-controls":pe,"aria-disabled":d?"true":void 0,"aria-expanded":Q?"true":"false","aria-haspopup":"listbox","aria-label":n,"aria-labelledby":[h,le].filter(Boolean).join(" ")||void 0,"aria-describedby":r,onKeyDown:e=>{M||-1!==[" ","ArrowUp","ArrowDown","Enter"].indexOf(e.key)&&(e.preventDefault(),K(!0,e))},onMouseDown:d||M?null:e=>{0===e.button&&(e.preventDefault(),F.current.focus(),K(!0,e))},onBlur:e=>{!Q&&x&&(Object.defineProperty(e,"target",{writable:!0,value:{value:E,name:b}}),x(e))},onFocus:S},j,{ownerState:ce,className:(0,mt.A)(j.className,ue.select,l),id:le,children:Mv(ee)?Sv||(Sv=(0,we.jsx)("span",{className:"notranslate",children:"​"})):ee})),(0,we.jsx)(Rv,(0,k.A)({"aria-invalid":m,value:Array.isArray(E)?E.join(","):E,name:b,ref:D,"aria-hidden":!0,onChange:e=>{const t=Z.find((t=>t.props.value===e.target.value));void 0!==t&&(B(t.props.value),A&&A(e,t))},tabIndex:-1,disabled:d,className:ue.nativeInput,autoFocus:a,ownerState:ce},O)),(0,we.jsx)(kv,{as:f,className:ue.icon,ownerState:ce}),(0,we.jsx)(hm.A,(0,k.A)({id:`menu-${b||""}`,anchorEl:Y,open:Q,onClose:e=>{K(!1,e)},anchorOrigin:{vertical:"bottom",horizontal:"center"},transformOrigin:{vertical:"top",horizontal:"center"}},g,{MenuListProps:(0,k.A)({"aria-labelledby":h,role:"listbox","aria-multiselectable":y?"true":void 0,disableListWrap:!0,id:pe},g.MenuListProps),slotProps:(0,k.A)({},g.slotProps,{paper:(0,k.A)({},de,{style:(0,k.A)({minWidth:se},null!=de?de.style:null)})}),children:ae}))]})})),jv=["autoWidth","children","classes","className","defaultOpen","displayEmpty","IconComponent","id","input","inputProps","label","labelId","MenuProps","multiple","native","onClose","onOpen","open","renderValue","SelectDisplayProps","variant"],$v=["root"],Tv={name:"MuiSelect",overridesResolver:(e,t)=>t.root,shouldForwardProp:e=>(0,yl.A)(e)&&"variant"!==e,slot:"Root"},Lv=(0,de.Ay)(Kd,Tv)(""),Ov=(0,de.Ay)(tf,Tv)(""),Ev=(0,de.Ay)(Ic,Tv)(""),Bv=ge.forwardRef((function(e,t){const o=(0,vt.b)({name:"MuiSelect",props:e}),{autoWidth:r=!1,children:n,classes:a={},className:i,defaultOpen:s=!1,displayEmpty:l=!1,IconComponent:c=Xn,id:u,input:d,inputProps:p,label:m,labelId:f,MenuProps:v,multiple:h=!1,native:g=!1,onClose:y,onOpen:b,open:x,renderValue:A,SelectDisplayProps:w,variant:S="outlined"}=o,C=(0,R.A)(o,jv),_=g?zm:Iv,P=dc({props:o,muiFormControl:(0,mc.A)(),states:["variant","error"]}),M=P.variant||S,I=(0,k.A)({},o,{variant:M,classes:a}),j=(e=>{const{classes:t}=e;return t})(I),$=(0,R.A)(j,$v),T=d||{standard:(0,we.jsx)(Lv,{ownerState:I}),outlined:(0,we.jsx)(Ov,{label:m,ownerState:I}),filled:(0,we.jsx)(Ev,{ownerState:I})}[M],L=(0,bt.A)(t,T.ref);return(0,we.jsx)(ge.Fragment,{children:ge.cloneElement(T,(0,k.A)({inputComponent:_,inputProps:(0,k.A)({children:n,error:P.error,IconComponent:c,variant:M,type:void 0,multiple:h},g?{id:u}:{autoWidth:r,defaultOpen:s,displayEmpty:l,labelId:f,MenuProps:v,onClose:y,onOpen:b,open:x,renderValue:A,SelectDisplayProps:(0,k.A)({id:u},w)},p,{classes:p?(0,X.A)($,p.classes):$},d?d.props.inputProps:{})},(h&&g||l)&&"outlined"===M?{notched:!0}:{},{ref:L,className:(0,mt.A)(T.props.className,i,j.root)},!d&&{variant:M},C))})}));Bv.muiName="Select";const Nv=Bv;function zv(e){return(0,At.Ay)("MuiSkeleton",e)}const Dv=(0,xt.A)("MuiSkeleton",["root","text","rectangular","rounded","circular","pulse","wave","withChildren","fitContent","heightAuto"]),Fv=["animation","className","component","height","style","variant","width"];let Wv,Vv,Hv,Uv,qv=e=>e;const Gv=(0,q.i7)(Wv||(Wv=qv`
  0% {
    opacity: 1;
  }

  50% {
    opacity: 0.4;
  }

  100% {
    opacity: 1;
  }
`)),Xv=(0,q.i7)(Vv||(Vv=qv`
  0% {
    transform: translateX(-100%);
  }

  50% {
    /* +0.5s of delay between each loop */
    transform: translateX(100%);
  }

  100% {
    transform: translateX(100%);
  }
`)),Yv=(0,de.Ay)("span",{name:"MuiSkeleton",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:o}=e;return[t.root,t[o.variant],!1!==o.animation&&t[o.animation],o.hasChildren&&t.withChildren,o.hasChildren&&!o.width&&t.fitContent,o.hasChildren&&!o.height&&t.heightAuto]}})((({theme:e,ownerState:t})=>{const o=Q(e.shape.borderRadius)||"px",r=ee(e.shape.borderRadius);return(0,k.A)({display:"block",backgroundColor:e.vars?e.vars.palette.Skeleton.bg:W(e.palette.text.primary,"light"===e.palette.mode?.11:.13),height:"1.2em"},"text"===t.variant&&{marginTop:0,marginBottom:0,height:"auto",transformOrigin:"0 55%",transform:"scale(1, 0.60)",borderRadius:`${r}${o}/${Math.round(r/.6*10)/10}${o}`,"&:empty:before":{content:'"\\00a0"'}},"circular"===t.variant&&{borderRadius:"50%"},"rounded"===t.variant&&{borderRadius:(e.vars||e).shape.borderRadius},t.hasChildren&&{"& > *":{visibility:"hidden"}},t.hasChildren&&!t.width&&{maxWidth:"fit-content"},t.hasChildren&&!t.height&&{height:"auto"})}),(({ownerState:e})=>"pulse"===e.animation&&(0,q.AH)(Hv||(Hv=qv`
      animation: ${0} 2s ease-in-out 0.5s infinite;
    `),Gv)),(({ownerState:e,theme:t})=>"wave"===e.animation&&(0,q.AH)(Uv||(Uv=qv`
      position: relative;
      overflow: hidden;

      /* Fix bug in Safari https://bugs.webkit.org/show_bug.cgi?id=68196 */
      -webkit-mask-image: -webkit-radial-gradient(white, black);

      &::after {
        animation: ${0} 2s linear 0.5s infinite;
        background: linear-gradient(
          90deg,
          transparent,
          ${0},
          transparent
        );
        content: '';
        position: absolute;
        transform: translateX(-100%); /* Avoid flash during server-side hydration */
        bottom: 0;
        left: 0;
        right: 0;
        top: 0;
      }
    `),Xv,(t.vars||t).palette.action.hover))),Kv=ge.forwardRef((function(e,t){const o=(0,vt.b)({props:e,name:"MuiSkeleton"}),{animation:r="pulse",className:n,component:a="span",height:i,style:s,variant:l="text",width:c}=o,u=(0,R.A)(o,Fv),d=(0,k.A)({},o,{animation:r,component:a,variant:l,hasChildren:Boolean(u.children)}),p=(e=>{const{classes:t,variant:o,animation:r,hasChildren:n,width:a,height:i}=e,s={root:["root",o,r,n&&"withChildren",n&&!a&&"fitContent",n&&!i&&"heightAuto"]};return(0,ft.A)(s,zv,t)})(d);return(0,we.jsx)(Yv,(0,k.A)({as:a,ref:t,className:(0,mt.A)(p.root,n),ownerState:d},u,{style:(0,k.A)({width:c,height:i},s)}))})),Zv=Kv;var Jv=o("./node_modules/.pnpm/@mui+utils@5.16.4_@types+react@18.3.3_react@18.3.1/node_modules/@mui/utils/esm/useIsFocusVisible/useIsFocusVisible.js"),Qv=o("./node_modules/.pnpm/@mui+utils@5.16.4_@types+react@18.3.3_react@18.3.1/node_modules/@mui/utils/esm/extractEventHandlers/extractEventHandlers.js");const eh=function(e,t,o=(e,t)=>e===t){return e.length===t.length&&e.every(((e,r)=>o(e,t[r])))};function th(e,t){return e-t}function oh(e,t){var o;const{index:r}=null!=(o=e.reduce(((e,o,r)=>{const n=Math.abs(t-o);return null===e||n<e.distance||n===e.distance?{distance:n,index:r}:e}),null))?o:{};return r}function rh(e,t){if(void 0!==t.current&&e.changedTouches){const o=e;for(let e=0;e<o.changedTouches.length;e+=1){const r=o.changedTouches[e];if(r.identifier===t.current)return{x:r.clientX,y:r.clientY}}return!1}return{x:e.clientX,y:e.clientY}}function nh(e,t,o){return 100*(e-t)/(o-t)}function ah({values:e,newValue:t,index:o}){const r=e.slice();return r[o]=t,r.sort(th)}function ih({sliderRef:e,activeIndex:t,setActive:o}){var r,n;const a=(0,or.A)(e.current);var i;null!=(r=e.current)&&r.contains(a.activeElement)&&Number(null==a||null==(n=a.activeElement)?void 0:n.getAttribute("data-index"))===t||null==(i=e.current)||i.querySelector(`[type="range"][data-index="${t}"]`).focus(),o&&o(t)}function sh(e,t){return"number"==typeof e&&"number"==typeof t?e===t:"object"==typeof e&&"object"==typeof t&&eh(e,t)}const lh={horizontal:{offset:e=>({left:`${e}%`}),leap:e=>({width:`${e}%`})},"horizontal-reverse":{offset:e=>({right:`${e}%`}),leap:e=>({width:`${e}%`})},vertical:{offset:e=>({bottom:`${e}%`}),leap:e=>({height:`${e}%`})}},ch=e=>e;let uh;function dh(){return void 0===uh&&(uh="undefined"==typeof CSS||"function"!=typeof CSS.supports||CSS.supports("touch-action","none")),uh}function ph(e){const{"aria-labelledby":t,defaultValue:o,disabled:r=!1,disableSwap:n=!1,isRtl:a=!1,marks:i=!1,max:s=100,min:l=0,name:c,onChange:u,onChangeCommitted:d,orientation:p="horizontal",rootRef:m,scale:f=ch,step:v=1,shiftStep:h=10,tabIndex:g,value:y}=e,b=ge.useRef(),[x,A]=ge.useState(-1),[w,S]=ge.useState(-1),[C,_]=ge.useState(!1),R=ge.useRef(0),[P,M]=(0,Ho.A)({controlled:y,default:null!=o?o:l,name:"Slider"}),I=u&&((e,t,o)=>{const r=e.nativeEvent||e,n=new r.constructor(r.type,r);Object.defineProperty(n,"target",{writable:!0,value:{value:t,name:c}}),u(n,t,o)}),j=Array.isArray(P);let $=j?P.slice().sort(th):[P];$=$.map((e=>null==e?l:(0,T.A)(e,l,s)));const L=!0===i&&null!==v?[...Array(Math.floor((s-l)/v)+1)].map(((e,t)=>({value:l+v*t}))):i||[],O=L.map((e=>e.value)),{isFocusVisibleRef:E,onBlur:B,onFocus:N,ref:z}=(0,Jv.A)(),[D,F]=ge.useState(-1),W=ge.useRef(),V=(0,Tt.A)(z,W),H=(0,Tt.A)(m,V),U=e=>t=>{var o;const r=Number(t.currentTarget.getAttribute("data-index"));N(t),!0===E.current&&F(r),S(r),null==e||null==(o=e.onFocus)||o.call(e,t)},q=e=>t=>{var o;B(t),!1===E.current&&F(-1),S(-1),null==e||null==(o=e.onBlur)||o.call(e,t)},G=(e,t)=>{const o=Number(e.currentTarget.getAttribute("data-index")),r=$[o],a=O.indexOf(r);let i=t;if(L&&null==v){const e=O[O.length-1];i=i>e?e:i<O[0]?O[0]:i<r?O[a-1]:O[a+1]}if(i=(0,T.A)(i,l,s),j){n&&(i=(0,T.A)(i,$[o-1]||-1/0,$[o+1]||1/0));const e=i;i=ah({values:$,newValue:i,index:o});let t=o;n||(t=i.indexOf(e)),ih({sliderRef:W,activeIndex:t})}M(i),F(o),I&&!sh(i,P)&&I(e,i,o),d&&d(e,i)},X=e=>t=>{var o;if(null!==v){const e=Number(t.currentTarget.getAttribute("data-index")),o=$[e];let r=null;("ArrowLeft"===t.key||"ArrowDown"===t.key)&&t.shiftKey||"PageDown"===t.key?r=Math.max(o-h,l):(("ArrowRight"===t.key||"ArrowUp"===t.key)&&t.shiftKey||"PageUp"===t.key)&&(r=Math.min(o+h,s)),null!==r&&(G(t,r),t.preventDefault())}null==e||null==(o=e.onKeyDown)||o.call(e,t)};(0,tr.A)((()=>{var e;r&&W.current.contains(document.activeElement)&&(null==(e=document.activeElement)||e.blur())}),[r]),r&&-1!==x&&A(-1),r&&-1!==D&&F(-1);const Y=ge.useRef();let K=p;a&&"horizontal"===p&&(K+="-reverse");const Z=({finger:e,move:t=!1})=>{const{current:o}=W,{width:r,height:a,bottom:i,left:c}=o.getBoundingClientRect();let u,d;if(u=0===K.indexOf("vertical")?(i-e.y)/a:(e.x-c)/r,-1!==K.indexOf("-reverse")&&(u=1-u),d=function(e,t,o){return(o-t)*e+t}(u,l,s),v)d=function(e,t,o){const r=Math.round((e-o)/t)*t+o;return Number(r.toFixed(function(e){if(Math.abs(e)<1){const t=e.toExponential().split("e-"),o=t[0].split(".")[1];return(o?o.length:0)+parseInt(t[1],10)}const t=e.toString().split(".")[1];return t?t.length:0}(t)))}(d,v,l);else{const e=oh(O,d);d=O[e]}d=(0,T.A)(d,l,s);let p=0;if(j){p=t?Y.current:oh($,d),n&&(d=(0,T.A)(d,$[p-1]||-1/0,$[p+1]||1/0));const e=d;d=ah({values:$,newValue:d,index:p}),n&&t||(p=d.indexOf(e),Y.current=p)}return{newValue:d,activeIndex:p}},J=(0,qo.A)((e=>{const t=rh(e,b);if(!t)return;if(R.current+=1,"mousemove"===e.type&&0===e.buttons)return void Q(e);const{newValue:o,activeIndex:r}=Z({finger:t,move:!0});ih({sliderRef:W,activeIndex:r,setActive:A}),M(o),!C&&R.current>2&&_(!0),I&&!sh(o,P)&&I(e,o,r)})),Q=(0,qo.A)((e=>{const t=rh(e,b);if(_(!1),!t)return;const{newValue:o}=Z({finger:t,move:!0});A(-1),"touchend"===e.type&&S(-1),d&&d(e,o),b.current=void 0,te()})),ee=(0,qo.A)((e=>{if(r)return;dh()||e.preventDefault();const t=e.changedTouches[0];null!=t&&(b.current=t.identifier);const o=rh(e,b);if(!1!==o){const{newValue:t,activeIndex:r}=Z({finger:o});ih({sliderRef:W,activeIndex:r,setActive:A}),M(t),I&&!sh(t,P)&&I(e,t,r)}R.current=0;const n=(0,or.A)(W.current);n.addEventListener("touchmove",J,{passive:!0}),n.addEventListener("touchend",Q,{passive:!0})})),te=ge.useCallback((()=>{const e=(0,or.A)(W.current);e.removeEventListener("mousemove",J),e.removeEventListener("mouseup",Q),e.removeEventListener("touchmove",J),e.removeEventListener("touchend",Q)}),[Q,J]);ge.useEffect((()=>{const{current:e}=W;return e.addEventListener("touchstart",ee,{passive:dh()}),()=>{e.removeEventListener("touchstart",ee),te()}}),[te,ee]),ge.useEffect((()=>{r&&te()}),[r,te]);const oe=nh(j?$[0]:l,l,s),re=nh($[$.length-1],l,s)-oe,ne=e=>t=>{var o;null==(o=e.onMouseLeave)||o.call(e,t),S(-1)};return{active:x,axis:K,axisProps:lh,dragging:C,focusedThumbIndex:D,getHiddenInputProps:(o={})=>{var n;const i=(0,Qv.A)(o),u={onChange:(d=i||{},e=>{var t;null==(t=d.onChange)||t.call(d,e),G(e,e.target.valueAsNumber)}),onFocus:U(i||{}),onBlur:q(i||{}),onKeyDown:X(i||{})};var d;const m=(0,k.A)({},i,u);return(0,k.A)({tabIndex:g,"aria-labelledby":t,"aria-orientation":p,"aria-valuemax":f(s),"aria-valuemin":f(l),name:c,type:"range",min:e.min,max:e.max,step:null===e.step&&e.marks?"any":null!=(n=e.step)?n:void 0,disabled:r},o,m,{style:(0,k.A)({},Kf,{direction:a?"rtl":"ltr",width:"100%",height:"100%"})})},getRootProps:(e={})=>{const t=(0,Qv.A)(e),o={onMouseDown:(n=t||{},e=>{var t;if(null==(t=n.onMouseDown)||t.call(n,e),r)return;if(e.defaultPrevented)return;if(0!==e.button)return;e.preventDefault();const o=rh(e,b);if(!1!==o){const{newValue:t,activeIndex:r}=Z({finger:o});ih({sliderRef:W,activeIndex:r,setActive:A}),M(t),I&&!sh(t,P)&&I(e,t,r)}R.current=0;const a=(0,or.A)(W.current);a.addEventListener("mousemove",J,{passive:!0}),a.addEventListener("mouseup",Q)})};var n;const a=(0,k.A)({},t,o);return(0,k.A)({},e,{ref:H},a)},getThumbProps:(e={})=>{const t=(0,Qv.A)(e),o={onMouseOver:(r=t||{},e=>{var t;null==(t=r.onMouseOver)||t.call(r,e);const o=Number(e.currentTarget.getAttribute("data-index"));S(o)}),onMouseLeave:ne(t||{})};var r;return(0,k.A)({},e,t,o)},marks:L,open:w,range:j,rootRef:H,trackLeap:re,trackOffset:oe,values:$,getThumbStyle:e=>({pointerEvents:-1!==x&&x!==e?"none":void 0})}}function mh(e){return(0,At.Ay)("MuiSlider",e)}const fh=(0,xt.A)("MuiSlider",["root","active","colorPrimary","colorSecondary","colorError","colorInfo","colorSuccess","colorWarning","disabled","dragging","focusVisible","mark","markActive","marked","markLabel","markLabelActive","rail","sizeSmall","thumb","thumbColorPrimary","thumbColorSecondary","thumbColorError","thumbColorSuccess","thumbColorInfo","thumbColorWarning","track","trackInverted","trackFalse","thumbSizeSmall","valueLabel","valueLabelOpen","valueLabelCircle","valueLabelLabel","vertical"]),vh=["aria-label","aria-valuetext","aria-labelledby","component","components","componentsProps","color","classes","className","disableSwap","disabled","getAriaLabel","getAriaValueText","marks","max","min","name","onChange","onChangeCommitted","orientation","shiftStep","size","step","scale","slotProps","slots","tabIndex","track","value","valueLabelDisplay","valueLabelFormat"];function hh(e){return e}const gh=(0,de.Ay)("span",{name:"MuiSlider",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:o}=e;return[t.root,t[`color${(0,uo.A)(o.color)}`],"medium"!==o.size&&t[`size${(0,uo.A)(o.size)}`],o.marked&&t.marked,"vertical"===o.orientation&&t.vertical,"inverted"===o.track&&t.trackInverted,!1===o.track&&t.trackFalse]}})((({theme:e})=>{var t;return{borderRadius:12,boxSizing:"content-box",display:"inline-block",position:"relative",cursor:"pointer",touchAction:"none",WebkitTapHighlightColor:"transparent","@media print":{colorAdjust:"exact"},[`&.${fh.disabled}`]:{pointerEvents:"none",cursor:"default",color:(e.vars||e).palette.grey[400]},[`&.${fh.dragging}`]:{[`& .${fh.thumb}, & .${fh.track}`]:{transition:"none"}},variants:[...Object.keys((null!=(t=e.vars)?t:e).palette).filter((t=>{var o;return(null!=(o=e.vars)?o:e).palette[t].main})).map((t=>({props:{color:t},style:{color:(e.vars||e).palette[t].main}}))),{props:{orientation:"horizontal"},style:{height:4,width:"100%",padding:"13px 0","@media (pointer: coarse)":{padding:"20px 0"}}},{props:{orientation:"horizontal",size:"small"},style:{height:2}},{props:{orientation:"horizontal",marked:!0},style:{marginBottom:20}},{props:{orientation:"vertical"},style:{height:"100%",width:4,padding:"0 13px","@media (pointer: coarse)":{padding:"0 20px"}}},{props:{orientation:"vertical",size:"small"},style:{width:2}},{props:{orientation:"vertical",marked:!0},style:{marginRight:44}}]}})),yh=(0,de.Ay)("span",{name:"MuiSlider",slot:"Rail",overridesResolver:(e,t)=>t.rail})({display:"block",position:"absolute",borderRadius:"inherit",backgroundColor:"currentColor",opacity:.38,variants:[{props:{orientation:"horizontal"},style:{width:"100%",height:"inherit",top:"50%",transform:"translateY(-50%)"}},{props:{orientation:"vertical"},style:{height:"100%",width:"inherit",left:"50%",transform:"translateX(-50%)"}},{props:{track:"inverted"},style:{opacity:1}}]}),bh=(0,de.Ay)("span",{name:"MuiSlider",slot:"Track",overridesResolver:(e,t)=>t.track})((({theme:e})=>{var t;return{display:"block",position:"absolute",borderRadius:"inherit",border:"1px solid currentColor",backgroundColor:"currentColor",transition:e.transitions.create(["left","width","bottom","height"],{duration:e.transitions.duration.shortest}),variants:[{props:{size:"small"},style:{border:"none"}},{props:{orientation:"horizontal"},style:{height:"inherit",top:"50%",transform:"translateY(-50%)"}},{props:{orientation:"vertical"},style:{width:"inherit",left:"50%",transform:"translateX(-50%)"}},{props:{track:!1},style:{display:"none"}},...Object.keys((null!=(t=e.vars)?t:e).palette).filter((t=>{var o;return(null!=(o=e.vars)?o:e).palette[t].main})).map((t=>({props:{color:t,track:"inverted"},style:(0,k.A)({},e.vars?{backgroundColor:e.vars.palette.Slider[`${t}Track`],borderColor:e.vars.palette.Slider[`${t}Track`]}:(0,k.A)({backgroundColor:(0,De.a)(e.palette[t].main,.62),borderColor:(0,De.a)(e.palette[t].main,.62)},e.applyStyles("dark",{backgroundColor:(0,De.e$)(e.palette[t].main,.5)}),e.applyStyles("dark",{borderColor:(0,De.e$)(e.palette[t].main,.5)})))})))]}})),xh=(0,de.Ay)("span",{name:"MuiSlider",slot:"Thumb",overridesResolver:(e,t)=>{const{ownerState:o}=e;return[t.thumb,t[`thumbColor${(0,uo.A)(o.color)}`],"medium"!==o.size&&t[`thumbSize${(0,uo.A)(o.size)}`]]}})((({theme:e})=>{var t;return{position:"absolute",width:20,height:20,boxSizing:"border-box",borderRadius:"50%",outline:0,backgroundColor:"currentColor",display:"flex",alignItems:"center",justifyContent:"center",transition:e.transitions.create(["box-shadow","left","bottom"],{duration:e.transitions.duration.shortest}),"&::before":{position:"absolute",content:'""',borderRadius:"inherit",width:"100%",height:"100%",boxShadow:(e.vars||e).shadows[2]},"&::after":{position:"absolute",content:'""',borderRadius:"50%",width:42,height:42,top:"50%",left:"50%",transform:"translate(-50%, -50%)"},[`&.${fh.disabled}`]:{"&:hover":{boxShadow:"none"}},variants:[{props:{size:"small"},style:{width:12,height:12,"&::before":{boxShadow:"none"}}},{props:{orientation:"horizontal"},style:{top:"50%",transform:"translate(-50%, -50%)"}},{props:{orientation:"vertical"},style:{left:"50%",transform:"translate(-50%, 50%)"}},...Object.keys((null!=(t=e.vars)?t:e).palette).filter((t=>{var o;return(null!=(o=e.vars)?o:e).palette[t].main})).map((t=>({props:{color:t},style:{[`&:hover, &.${fh.focusVisible}`]:(0,k.A)({},e.vars?{boxShadow:`0px 0px 0px 8px rgba(${e.vars.palette[t].mainChannel} / 0.16)`}:{boxShadow:`0px 0px 0px 8px ${(0,De.X4)(e.palette[t].main,.16)}`},{"@media (hover: none)":{boxShadow:"none"}}),[`&.${fh.active}`]:(0,k.A)({},e.vars?{boxShadow:`0px 0px 0px 14px rgba(${e.vars.palette[t].mainChannel} / 0.16)`}:{boxShadow:`0px 0px 0px 14px ${(0,De.X4)(e.palette[t].main,.16)}`})}})))]}})),Ah=(0,de.Ay)((function(e){const{children:t,className:o,value:r}=e,n=(e=>{const{open:t}=e;return{offset:(0,mt.A)(t&&fh.valueLabelOpen),circle:fh.valueLabelCircle,label:fh.valueLabelLabel}})(e);return t?ge.cloneElement(t,{className:(0,mt.A)(t.props.className)},(0,we.jsxs)(ge.Fragment,{children:[t.props.children,(0,we.jsx)("span",{className:(0,mt.A)(n.offset,o),"aria-hidden":!0,children:(0,we.jsx)("span",{className:n.circle,children:(0,we.jsx)("span",{className:n.label,children:r})})})]})):null}),{name:"MuiSlider",slot:"ValueLabel",overridesResolver:(e,t)=>t.valueLabel})((({theme:e})=>(0,k.A)({zIndex:1,whiteSpace:"nowrap"},e.typography.body2,{fontWeight:500,transition:e.transitions.create(["transform"],{duration:e.transitions.duration.shortest}),position:"absolute",backgroundColor:(e.vars||e).palette.grey[600],borderRadius:2,color:(e.vars||e).palette.common.white,display:"flex",alignItems:"center",justifyContent:"center",padding:"0.25rem 0.75rem",variants:[{props:{orientation:"horizontal"},style:{transform:"translateY(-100%) scale(0)",top:"-10px",transformOrigin:"bottom center","&::before":{position:"absolute",content:'""',width:8,height:8,transform:"translate(-50%, 50%) rotate(45deg)",backgroundColor:"inherit",bottom:0,left:"50%"},[`&.${fh.valueLabelOpen}`]:{transform:"translateY(-100%) scale(1)"}}},{props:{orientation:"vertical"},style:{transform:"translateY(-50%) scale(0)",right:"30px",top:"50%",transformOrigin:"right center","&::before":{position:"absolute",content:'""',width:8,height:8,transform:"translate(-50%, -50%) rotate(45deg)",backgroundColor:"inherit",right:-8,top:"50%"},[`&.${fh.valueLabelOpen}`]:{transform:"translateY(-50%) scale(1)"}}},{props:{size:"small"},style:{fontSize:e.typography.pxToRem(12),padding:"0.25rem 0.5rem"}},{props:{orientation:"vertical",size:"small"},style:{right:"20px"}}]}))),wh=(0,de.Ay)("span",{name:"MuiSlider",slot:"Mark",shouldForwardProp:e=>(0,Am.A)(e)&&"markActive"!==e,overridesResolver:(e,t)=>{const{markActive:o}=e;return[t.mark,o&&t.markActive]}})((({theme:e})=>({position:"absolute",width:2,height:2,borderRadius:1,backgroundColor:"currentColor",variants:[{props:{orientation:"horizontal"},style:{top:"50%",transform:"translate(-1px, -50%)"}},{props:{orientation:"vertical"},style:{left:"50%",transform:"translate(-50%, 1px)"}},{props:{markActive:!0},style:{backgroundColor:(e.vars||e).palette.background.paper,opacity:.8}}]}))),Sh=(0,de.Ay)("span",{name:"MuiSlider",slot:"MarkLabel",shouldForwardProp:e=>(0,Am.A)(e)&&"markLabelActive"!==e,overridesResolver:(e,t)=>t.markLabel})((({theme:e})=>(0,k.A)({},e.typography.body2,{color:(e.vars||e).palette.text.secondary,position:"absolute",whiteSpace:"nowrap",variants:[{props:{orientation:"horizontal"},style:{top:30,transform:"translateX(-50%)","@media (pointer: coarse)":{top:40}}},{props:{orientation:"vertical"},style:{left:36,transform:"translateY(50%)","@media (pointer: coarse)":{left:44}}},{props:{markLabelActive:!0},style:{color:(e.vars||e).palette.text.primary}}]}))),Ch=({children:e})=>e,_h=ge.forwardRef((function(e,t){var o,r,n,a,i,s,l,c,u,d,p,m,f,v,h,g,y,b,x,A,w,S,C,_;const P=(0,vt.b)({props:e,name:"MuiSlider"}),M=(0,Tl.I)(),{"aria-label":I,"aria-valuetext":j,"aria-labelledby":$,component:T="span",components:L={},componentsProps:O={},color:E="primary",classes:B,className:N,disableSwap:z=!1,disabled:D=!1,getAriaLabel:F,getAriaValueText:W,marks:V=!1,max:H=100,min:U=0,orientation:q="horizontal",shiftStep:G=10,size:X="medium",step:Y=1,scale:K=hh,slotProps:Z,slots:J,track:Q="normal",valueLabelDisplay:ee="off",valueLabelFormat:te=hh}=P,oe=(0,R.A)(P,vh),re=(0,k.A)({},P,{isRtl:M,max:H,min:U,classes:B,disabled:D,disableSwap:z,orientation:q,marks:V,color:E,size:X,step:Y,shiftStep:G,scale:K,track:Q,valueLabelDisplay:ee,valueLabelFormat:te}),{axisProps:ne,getRootProps:ae,getHiddenInputProps:ie,getThumbProps:se,open:le,active:ce,axis:ue,focusedThumbIndex:de,range:pe,dragging:me,marks:fe,values:ve,trackOffset:he,trackLeap:ye,getThumbStyle:be}=ph((0,k.A)({},re,{rootRef:t}));re.marked=fe.length>0&&fe.some((e=>e.label)),re.dragging=me,re.focusedThumbIndex=de;const xe=(e=>{const{disabled:t,dragging:o,marked:r,orientation:n,track:a,classes:i,color:s,size:l}=e,c={root:["root",t&&"disabled",o&&"dragging",r&&"marked","vertical"===n&&"vertical","inverted"===a&&"trackInverted",!1===a&&"trackFalse",s&&`color${(0,uo.A)(s)}`,l&&`size${(0,uo.A)(l)}`],rail:["rail"],track:["track"],mark:["mark"],markActive:["markActive"],markLabel:["markLabel"],markLabelActive:["markLabelActive"],valueLabel:["valueLabel"],thumb:["thumb",t&&"disabled",l&&`thumbSize${(0,uo.A)(l)}`,s&&`thumbColor${(0,uo.A)(s)}`],active:["active"],disabled:["disabled"],focusVisible:["focusVisible"]};return(0,ft.A)(c,mh,i)})(re),Ae=null!=(o=null!=(r=null==J?void 0:J.root)?r:L.Root)?o:gh,Se=null!=(n=null!=(a=null==J?void 0:J.rail)?a:L.Rail)?n:yh,Ce=null!=(i=null!=(s=null==J?void 0:J.track)?s:L.Track)?i:bh,_e=null!=(l=null!=(c=null==J?void 0:J.thumb)?c:L.Thumb)?l:xh,ke=null!=(u=null!=(d=null==J?void 0:J.valueLabel)?d:L.ValueLabel)?u:Ah,Re=null!=(p=null!=(m=null==J?void 0:J.mark)?m:L.Mark)?p:wh,Pe=null!=(f=null!=(v=null==J?void 0:J.markLabel)?v:L.MarkLabel)?f:Sh,Me=null!=(h=null!=(g=null==J?void 0:J.input)?g:L.Input)?h:"input",Ie=null!=(y=null==Z?void 0:Z.root)?y:O.root,je=null!=(b=null==Z?void 0:Z.rail)?b:O.rail,$e=null!=(x=null==Z?void 0:Z.track)?x:O.track,Te=null!=(A=null==Z?void 0:Z.thumb)?A:O.thumb,Le=null!=(w=null==Z?void 0:Z.valueLabel)?w:O.valueLabel,Oe=null!=(S=null==Z?void 0:Z.mark)?S:O.mark,Ee=null!=(C=null==Z?void 0:Z.markLabel)?C:O.markLabel,Be=null!=(_=null==Z?void 0:Z.input)?_:O.input,Ne=(0,mn.A)({elementType:Ae,getSlotProps:ae,externalSlotProps:Ie,externalForwardedProps:oe,additionalProps:(0,k.A)({},(qe=Ae,(!qe||!(0,rc.A)(qe))&&{as:T})),ownerState:(0,k.A)({},re,null==Ie?void 0:Ie.ownerState),className:[xe.root,N]}),ze=(0,mn.A)({elementType:Se,externalSlotProps:je,ownerState:re,className:xe.rail}),De=(0,mn.A)({elementType:Ce,externalSlotProps:$e,additionalProps:{style:(0,k.A)({},ne[ue].offset(he),ne[ue].leap(ye))},ownerState:(0,k.A)({},re,null==$e?void 0:$e.ownerState),className:xe.track}),Fe=(0,mn.A)({elementType:_e,getSlotProps:se,externalSlotProps:Te,ownerState:(0,k.A)({},re,null==Te?void 0:Te.ownerState),className:xe.thumb}),We=(0,mn.A)({elementType:ke,externalSlotProps:Le,ownerState:(0,k.A)({},re,null==Le?void 0:Le.ownerState),className:xe.valueLabel}),Ve=(0,mn.A)({elementType:Re,externalSlotProps:Oe,ownerState:re,className:xe.mark}),He=(0,mn.A)({elementType:Pe,externalSlotProps:Ee,ownerState:re,className:xe.markLabel}),Ue=(0,mn.A)({elementType:Me,getSlotProps:ie,externalSlotProps:Be,ownerState:re});var qe;return(0,we.jsxs)(Ae,(0,k.A)({},Ne,{children:[(0,we.jsx)(Se,(0,k.A)({},ze)),(0,we.jsx)(Ce,(0,k.A)({},De)),fe.filter((e=>e.value>=U&&e.value<=H)).map(((e,t)=>{const o=nh(e.value,U,H),r=ne[ue].offset(o);let n;return n=!1===Q?-1!==ve.indexOf(e.value):"normal"===Q&&(pe?e.value>=ve[0]&&e.value<=ve[ve.length-1]:e.value<=ve[0])||"inverted"===Q&&(pe?e.value<=ve[0]||e.value>=ve[ve.length-1]:e.value>=ve[0]),(0,we.jsxs)(ge.Fragment,{children:[(0,we.jsx)(Re,(0,k.A)({"data-index":t},Ve,!(0,rc.A)(Re)&&{markActive:n},{style:(0,k.A)({},r,Ve.style),className:(0,mt.A)(Ve.className,n&&xe.markActive)})),null!=e.label?(0,we.jsx)(Pe,(0,k.A)({"aria-hidden":!0,"data-index":t},He,!(0,rc.A)(Pe)&&{markLabelActive:n},{style:(0,k.A)({},r,He.style),className:(0,mt.A)(xe.markLabel,He.className,n&&xe.markLabelActive),children:e.label})):null]},t)})),ve.map(((e,t)=>{const o=nh(e,U,H),r=ne[ue].offset(o),n="off"===ee?Ch:ke;return(0,we.jsx)(n,(0,k.A)({},!(0,rc.A)(n)&&{valueLabelFormat:te,valueLabelDisplay:ee,value:"function"==typeof te?te(K(e),t):te,index:t,open:le===t||ce===t||"on"===ee,disabled:D},We,{children:(0,we.jsx)(_e,(0,k.A)({"data-index":t},Fe,{className:(0,mt.A)(xe.thumb,Fe.className,ce===t&&xe.active,de===t&&xe.focusVisible),style:(0,k.A)({},r,be(t),Fe.style),children:(0,we.jsx)(Me,(0,k.A)({"data-index":t,"aria-label":F?F(t):I,"aria-valuenow":K(e),"aria-labelledby":$,"aria-valuetext":W?W(K(e),t):j,value:ve[t]},Ue))}))}),t)}))]}))})),kh=_h;function Rh(e){return(0,At.Ay)("MuiSnackbarContent",e)}const Ph=(0,xt.A)("MuiSnackbarContent",["root","message","action"]),Mh=["action","className","message","role"],Ih=(0,de.Ay)(It.A,{name:"MuiSnackbarContent",slot:"Root",overridesResolver:(e,t)=>t.root})((({theme:e})=>{const t="light"===e.palette.mode?.8:.98,o=(0,De.tL)(e.palette.background.default,t);return(0,k.A)({},e.typography.body2,{color:e.vars?e.vars.palette.SnackbarContent.color:e.palette.getContrastText(o),backgroundColor:e.vars?e.vars.palette.SnackbarContent.bg:o,display:"flex",alignItems:"center",flexWrap:"wrap",padding:"6px 16px",borderRadius:(e.vars||e).shape.borderRadius,flexGrow:1,[e.breakpoints.up("sm")]:{flexGrow:"initial",minWidth:288}})})),jh=(0,de.Ay)("div",{name:"MuiSnackbarContent",slot:"Message",overridesResolver:(e,t)=>t.message})({padding:"8px 0"}),$h=(0,de.Ay)("div",{name:"MuiSnackbarContent",slot:"Action",overridesResolver:(e,t)=>t.action})({display:"flex",alignItems:"center",marginLeft:"auto",paddingLeft:16,marginRight:-8}),Th=ge.forwardRef((function(e,t){const o=(0,vt.b)({props:e,name:"MuiSnackbarContent"}),{action:r,className:n,message:a,role:i="alert"}=o,s=(0,R.A)(o,Mh),l=o,c=(e=>{const{classes:t}=e;return(0,ft.A)({root:["root"],action:["action"],message:["message"]},Rh,t)})(l);return(0,we.jsxs)(Ih,(0,k.A)({role:i,square:!0,elevation:6,className:(0,mt.A)(c.root,n),ownerState:l,ref:t},s,{children:[(0,we.jsx)(jh,{className:c.message,ownerState:l,children:a}),r?(0,we.jsx)($h,{className:c.action,ownerState:l,children:r}):null]}))}));function Lh(e){return(0,At.Ay)("MuiSnackbar",e)}const Oh=(0,xt.A)("MuiSnackbar",["root","anchorOriginTopCenter","anchorOriginBottomCenter","anchorOriginTopRight","anchorOriginBottomRight","anchorOriginTopLeft","anchorOriginBottomLeft"]),Eh=["onEnter","onExited"],Bh=["action","anchorOrigin","autoHideDuration","children","className","ClickAwayListenerProps","ContentProps","disableWindowBlurListener","message","onBlur","onClose","onFocus","onMouseEnter","onMouseLeave","open","resumeHideDuration","TransitionComponent","transitionDuration","TransitionProps"],Nh=(0,de.Ay)("div",{name:"MuiSnackbar",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:o}=e;return[t.root,t[`anchorOrigin${(0,uo.A)(o.anchorOrigin.vertical)}${(0,uo.A)(o.anchorOrigin.horizontal)}`]]}})((({theme:e,ownerState:t})=>(0,k.A)({zIndex:(e.vars||e).zIndex.snackbar,position:"fixed",display:"flex",left:8,right:8,justifyContent:"center",alignItems:"center"},"top"===t.anchorOrigin.vertical?{top:8}:{bottom:8},"left"===t.anchorOrigin.horizontal&&{justifyContent:"flex-start"},"right"===t.anchorOrigin.horizontal&&{justifyContent:"flex-end"},{[e.breakpoints.up("sm")]:(0,k.A)({},"top"===t.anchorOrigin.vertical?{top:24}:{bottom:24},"center"===t.anchorOrigin.horizontal&&{left:"50%",right:"auto",transform:"translateX(-50%)"},"left"===t.anchorOrigin.horizontal&&{left:24,right:"auto"},"right"===t.anchorOrigin.horizontal&&{right:24,left:"auto"})}))),zh=ge.forwardRef((function(e,t){const o=(0,vt.b)({props:e,name:"MuiSnackbar"}),r=(0,ne.A)(),n={enter:r.transitions.duration.enteringScreen,exit:r.transitions.duration.leavingScreen},{action:a,anchorOrigin:{vertical:i,horizontal:s}={vertical:"bottom",horizontal:"left"},autoHideDuration:l=null,children:c,className:u,ClickAwayListenerProps:d,ContentProps:p,disableWindowBlurListener:m=!1,message:f,open:v,TransitionComponent:h=ed.A,transitionDuration:g=n,TransitionProps:{onEnter:y,onExited:b}={}}=o,x=(0,R.A)(o.TransitionProps,Eh),A=(0,R.A)(o,Bh),w=(0,k.A)({},o,{anchorOrigin:{vertical:i,horizontal:s},autoHideDuration:l,disableWindowBlurListener:m,TransitionComponent:h,transitionDuration:g}),S=(e=>{const{classes:t,anchorOrigin:o}=e,r={root:["root",`anchorOrigin${(0,uo.A)(o.vertical)}${(0,uo.A)(o.horizontal)}`]};return(0,ft.A)(r,Lh,t)})(w),{getRootProps:C,onClickAway:_}=function(e={}){const{autoHideDuration:t=null,disableWindowBlurListener:o=!1,onClose:r,open:n,resumeHideDuration:a}=e,i=(0,gt.A)();ge.useEffect((()=>{if(n)return document.addEventListener("keydown",e),()=>{document.removeEventListener("keydown",e)};function e(e){e.defaultPrevented||"Escape"!==e.key&&"Esc"!==e.key||null==r||r(e,"escapeKeyDown")}}),[n,r]);const s=(0,qo.A)(((e,t)=>{null==r||r(e,t)})),l=(0,qo.A)((e=>{r&&null!=e&&i.start(e,(()=>{s(null,"timeout")}))}));ge.useEffect((()=>(n&&l(t),i.clear)),[n,t,l,i]);const c=i.clear,u=ge.useCallback((()=>{null!=t&&l(null!=a?a:.5*t)}),[t,a,l]),d=e=>t=>{const o=e.onFocus;null==o||o(t),c()},p=e=>t=>{const o=e.onMouseEnter;null==o||o(t),c()},m=e=>t=>{const o=e.onMouseLeave;null==o||o(t),u()};return ge.useEffect((()=>{if(!o&&n)return window.addEventListener("focus",u),window.addEventListener("blur",c),()=>{window.removeEventListener("focus",u),window.removeEventListener("blur",c)}}),[o,n,u,c]),{getRootProps:(t={})=>{const o=(0,k.A)({},(0,Qv.A)(e),(0,Qv.A)(t));return(0,k.A)({role:"presentation"},t,o,{onBlur:(r=o,e=>{const t=r.onBlur;null==t||t(e),u()}),onFocus:d(o),onMouseEnter:p(o),onMouseLeave:m(o)});var r},onClickAway:e=>{null==r||r(e,"clickaway")}}}((0,k.A)({},w)),[P,M]=ge.useState(!0),I=(0,mn.A)({elementType:Nh,getSlotProps:C,externalForwardedProps:A,ownerState:w,additionalProps:{ref:t},className:[S.root,u]});return!v&&P?null:(0,we.jsx)(Ss,(0,k.A)({onClickAway:_},d,{children:(0,we.jsx)(Nh,(0,k.A)({},I,{children:(0,we.jsx)(h,(0,k.A)({appear:!0,in:v,timeout:g,direction:"top"===i?"down":"up",onEnter:(e,t)=>{M(!1),y&&y(e,t)},onExited:e=>{M(!0),b&&b(e)}},x,{children:c||(0,we.jsx)(Th,(0,k.A)({message:f,action:a},p))}))}))}))})),Dh=["addEndListener","appear","children","easing","in","onEnter","onEntered","onEntering","onExit","onExited","onExiting","style","timeout","TransitionComponent"],Fh={entering:{transform:"none"},entered:{transform:"none"}},Wh=ge.forwardRef((function(e,t){const o=(0,ne.A)(),r={enter:o.transitions.duration.enteringScreen,exit:o.transitions.duration.leavingScreen},{addEndListener:n,appear:a=!0,children:i,easing:s,in:l,onEnter:c,onEntered:u,onEntering:d,onExit:p,onExited:m,onExiting:f,style:v,timeout:h=r,TransitionComponent:g=ht.Ay}=e,y=(0,R.A)(e,Dh),b=ge.useRef(null),x=(0,bt.A)(b,i.ref,t),A=e=>t=>{if(e){const o=b.current;void 0===t?e(o):e(o,t)}},w=A(d),S=A(((e,t)=>{(0,yt.q)(e);const r=(0,yt.c)({style:v,timeout:h,easing:s},{mode:"enter"});e.style.webkitTransition=o.transitions.create("transform",r),e.style.transition=o.transitions.create("transform",r),c&&c(e,t)})),C=A(u),_=A(f),P=A((e=>{const t=(0,yt.c)({style:v,timeout:h,easing:s},{mode:"exit"});e.style.webkitTransition=o.transitions.create("transform",t),e.style.transition=o.transitions.create("transform",t),p&&p(e)})),M=A(m);return(0,we.jsx)(g,(0,k.A)({appear:a,in:l,nodeRef:b,onEnter:S,onEntered:C,onEntering:w,onExit:P,onExited:M,onExiting:_,addEndListener:e=>{n&&n(b.current,e)},timeout:h},y,{children:(e,t)=>ge.cloneElement(i,(0,k.A)({style:(0,k.A)({transform:"scale(0)",visibility:"exited"!==e||l?void 0:"hidden"},Fh[e],v,i.props.style),ref:x},t))}))})),Vh=Wh;function Hh(e){return(0,At.Ay)("MuiSpeedDial",e)}const Uh=(0,xt.A)("MuiSpeedDial",["root","fab","directionUp","directionDown","directionLeft","directionRight","actions","actionsClosed"]),qh=["ref"],Gh=["ariaLabel","FabProps","children","className","direction","hidden","icon","onBlur","onClose","onFocus","onKeyDown","onMouseEnter","onMouseLeave","onOpen","open","openIcon","TransitionComponent","transitionDuration","TransitionProps"],Xh=["ref"];function Yh(e){return"up"===e||"down"===e?"vertical":"right"===e||"left"===e?"horizontal":void 0}const Kh=(0,de.Ay)("div",{name:"MuiSpeedDial",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:o}=e;return[t.root,t[`direction${(0,uo.A)(o.direction)}`]]}})((({theme:e,ownerState:t})=>(0,k.A)({zIndex:(e.vars||e).zIndex.speedDial,display:"flex",alignItems:"center",pointerEvents:"none"},"up"===t.direction&&{flexDirection:"column-reverse",[`& .${Uh.actions}`]:{flexDirection:"column-reverse",marginBottom:-32,paddingBottom:48}},"down"===t.direction&&{flexDirection:"column",[`& .${Uh.actions}`]:{flexDirection:"column",marginTop:-32,paddingTop:48}},"left"===t.direction&&{flexDirection:"row-reverse",[`& .${Uh.actions}`]:{flexDirection:"row-reverse",marginRight:-32,paddingRight:48}},"right"===t.direction&&{flexDirection:"row",[`& .${Uh.actions}`]:{flexDirection:"row",marginLeft:-32,paddingLeft:48}}))),Zh=(0,de.Ay)(oc,{name:"MuiSpeedDial",slot:"Fab",overridesResolver:(e,t)=>t.fab})((()=>({pointerEvents:"auto"}))),Jh=(0,de.Ay)("div",{name:"MuiSpeedDial",slot:"Actions",overridesResolver:(e,t)=>{const{ownerState:o}=e;return[t.actions,!o.open&&t.actionsClosed]}})((({ownerState:e})=>(0,k.A)({display:"flex",pointerEvents:"auto"},!e.open&&{transition:"top 0s linear 0.2s",pointerEvents:"none"}))),Qh=ge.forwardRef((function(e,t){const o=(0,vt.b)({props:e,name:"MuiSpeedDial"}),r=(0,ne.A)(),n={enter:r.transitions.duration.enteringScreen,exit:r.transitions.duration.leavingScreen},{ariaLabel:a,FabProps:{ref:i}={},children:s,className:l,direction:c="up",hidden:u=!1,icon:d,onBlur:p,onClose:m,onFocus:f,onKeyDown:v,onMouseEnter:h,onMouseLeave:g,onOpen:y,open:b,TransitionComponent:x=Vh,transitionDuration:A=n,TransitionProps:w}=o,S=(0,R.A)(o.FabProps,qh),C=(0,R.A)(o,Gh),[_,P]=(0,$t.A)({controlled:b,default:!1,name:"SpeedDial",state:"open"}),M=(0,k.A)({},o,{open:_,direction:c}),I=(e=>{const{classes:t,open:o,direction:r}=e,n={root:["root",`direction${(0,uo.A)(r)}`],fab:["fab"],actions:["actions",!o&&"actionsClosed"]};return(0,ft.A)(n,Hh,t)})(M),j=(0,gt.A)(),$=ge.useRef(0),L=ge.useRef(),O=ge.useRef([]);O.current=[O.current[0]];const E=ge.useCallback((e=>{O.current[0]=e}),[]),B=(0,bt.A)(i,E),N=(e,t)=>o=>{O.current[e+1]=o,t&&t(o)};ge.useEffect((()=>{_||($.current=0,L.current=void 0)}),[_]);const z=e=>{"mouseleave"===e.type&&g&&g(e),"blur"===e.type&&p&&p(e),j.clear(),"blur"===e.type?j.start(0,(()=>{P(!1),m&&m(e,"blur")})):(P(!1),m&&m(e,"mouseLeave"))},D=e=>{"mouseenter"===e.type&&h&&h(e),"focus"===e.type&&f&&f(e),j.clear(),_||j.start(0,(()=>{P(!0),y&&y(e,{focus:"focus",mouseenter:"mouseEnter"}[e.type])}))},F=a.replace(/^[^a-z]+|[^\w:.-]+/gi,""),W=ge.Children.toArray(s).filter((e=>ge.isValidElement(e))),V=W.map(((e,t)=>{const o=e.props,{FabProps:{ref:r}={},tooltipPlacement:n}=o,a=(0,R.A)(o.FabProps,Xh),i=n||("vertical"===Yh(c)?"left":"top");return ge.cloneElement(e,{FabProps:(0,k.A)({},a,{ref:N(t,r)}),delay:30*(_?t:W.length-t),open:_,tooltipPlacement:i,id:`${F}-action-${t}`})}));return(0,we.jsxs)(Kh,(0,k.A)({className:(0,mt.A)(I.root,l),ref:t,role:"presentation",onKeyDown:e=>{v&&v(e);const t=e.key.replace("Arrow","").toLowerCase(),{current:o=t}=L;if("Escape"===e.key)return P(!1),O.current[0].focus(),void(m&&m(e,"escapeKeyDown"));if(Yh(t)===Yh(o)&&void 0!==Yh(t)){e.preventDefault();const r=t===o?1:-1,n=(0,T.A)($.current+r,0,O.current.length-1);O.current[n].focus(),$.current=n,L.current=o}},onBlur:z,onFocus:D,onMouseEnter:D,onMouseLeave:z,ownerState:M},C,{children:[(0,we.jsx)(x,(0,k.A)({in:!u,timeout:A,unmountOnExit:!0},w,{children:(0,we.jsx)(Zh,(0,k.A)({color:"primary","aria-label":a,"aria-haspopup":"true","aria-expanded":_,"aria-controls":`${F}-actions`},S,{onClick:e=>{S.onClick&&S.onClick(e),j.clear(),_?(P(!1),m&&m(e,"toggle")):(P(!0),y&&y(e,"toggle"))},className:(0,mt.A)(I.fab,S.className),ref:B,ownerState:M,children:ge.isValidElement(d)&&(0,jc.A)(d,["SpeedDialIcon"])?ge.cloneElement(d,{open:_}):d}))})),(0,we.jsx)(Jh,{id:`${F}-actions`,role:"menu","aria-orientation":Yh(c),className:(0,mt.A)(I.actions,!_&&I.actionsClosed),ownerState:M,children:V})]}))}));var eg=o("./node_modules/.pnpm/@mui+material@5.16.4_@emotion+react@11.13.0_@types+react@18.3.3_react@18.3.1__@emotion+styled_brxipnv4yvqheosgxcawdxdyay/node_modules/@mui/material/utils/useEventCallback.js");function tg(e){return(0,At.Ay)("MuiTooltip",e)}const og=(0,xt.A)("MuiTooltip",["popper","popperInteractive","popperArrow","popperClose","tooltip","tooltipArrow","touch","tooltipPlacementLeft","tooltipPlacementRight","tooltipPlacementTop","tooltipPlacementBottom","arrow"]),rg=["arrow","children","classes","components","componentsProps","describeChild","disableFocusListener","disableHoverListener","disableInteractive","disableTouchListener","enterDelay","enterNextDelay","enterTouchDelay","followCursor","id","leaveDelay","leaveTouchDelay","onClose","onOpen","open","placement","PopperComponent","PopperProps","slotProps","slots","title","TransitionComponent","TransitionProps"],ng=(0,de.Ay)(_n,{name:"MuiTooltip",slot:"Popper",overridesResolver:(e,t)=>{const{ownerState:o}=e;return[t.popper,!o.disableInteractive&&t.popperInteractive,o.arrow&&t.popperArrow,!o.open&&t.popperClose]}})((({theme:e,ownerState:t,open:o})=>(0,k.A)({zIndex:(e.vars||e).zIndex.tooltip,pointerEvents:"none"},!t.disableInteractive&&{pointerEvents:"auto"},!o&&{pointerEvents:"none"},t.arrow&&{[`&[data-popper-placement*="bottom"] .${og.arrow}`]:{top:0,marginTop:"-0.71em","&::before":{transformOrigin:"0 100%"}},[`&[data-popper-placement*="top"] .${og.arrow}`]:{bottom:0,marginBottom:"-0.71em","&::before":{transformOrigin:"100% 0"}},[`&[data-popper-placement*="right"] .${og.arrow}`]:(0,k.A)({},t.isRtl?{right:0,marginRight:"-0.71em"}:{left:0,marginLeft:"-0.71em"},{height:"1em",width:"0.71em","&::before":{transformOrigin:"100% 100%"}}),[`&[data-popper-placement*="left"] .${og.arrow}`]:(0,k.A)({},t.isRtl?{left:0,marginLeft:"-0.71em"}:{right:0,marginRight:"-0.71em"},{height:"1em",width:"0.71em","&::before":{transformOrigin:"0 0"}})}))),ag=(0,de.Ay)("div",{name:"MuiTooltip",slot:"Tooltip",overridesResolver:(e,t)=>{const{ownerState:o}=e;return[t.tooltip,o.touch&&t.touch,o.arrow&&t.tooltipArrow,t[`tooltipPlacement${(0,uo.A)(o.placement.split("-")[0])}`]]}})((({theme:e,ownerState:t})=>{return(0,k.A)({backgroundColor:e.vars?e.vars.palette.Tooltip.bg:(0,De.X4)(e.palette.grey[700],.92),borderRadius:(e.vars||e).shape.borderRadius,color:(e.vars||e).palette.common.white,fontFamily:e.typography.fontFamily,padding:"4px 8px",fontSize:e.typography.pxToRem(11),maxWidth:300,margin:2,wordWrap:"break-word",fontWeight:e.typography.fontWeightMedium},t.arrow&&{position:"relative",margin:0},t.touch&&{padding:"8px 16px",fontSize:e.typography.pxToRem(14),lineHeight:(o=16/14,Math.round(1e5*o)/1e5+"em"),fontWeight:e.typography.fontWeightRegular},{[`.${og.popper}[data-popper-placement*="left"] &`]:(0,k.A)({transformOrigin:"right center"},t.isRtl?(0,k.A)({marginLeft:"14px"},t.touch&&{marginLeft:"24px"}):(0,k.A)({marginRight:"14px"},t.touch&&{marginRight:"24px"})),[`.${og.popper}[data-popper-placement*="right"] &`]:(0,k.A)({transformOrigin:"left center"},t.isRtl?(0,k.A)({marginRight:"14px"},t.touch&&{marginRight:"24px"}):(0,k.A)({marginLeft:"14px"},t.touch&&{marginLeft:"24px"})),[`.${og.popper}[data-popper-placement*="top"] &`]:(0,k.A)({transformOrigin:"center bottom",marginBottom:"14px"},t.touch&&{marginBottom:"24px"}),[`.${og.popper}[data-popper-placement*="bottom"] &`]:(0,k.A)({transformOrigin:"center top",marginTop:"14px"},t.touch&&{marginTop:"24px"})});var o})),ig=(0,de.Ay)("span",{name:"MuiTooltip",slot:"Arrow",overridesResolver:(e,t)=>t.arrow})((({theme:e})=>({overflow:"hidden",position:"absolute",width:"1em",height:"0.71em",boxSizing:"border-box",color:e.vars?e.vars.palette.Tooltip.bg:(0,De.X4)(e.palette.grey[700],.9),"&::before":{content:'""',margin:"auto",display:"block",width:"100%",height:"100%",backgroundColor:"currentColor",transform:"rotate(45deg)"}})));let sg=!1;const lg=new gt.E;let cg={x:0,y:0};function ug(e,t){return(o,...r)=>{t&&t(o,...r),e(o,...r)}}const dg=ge.forwardRef((function(e,t){var o,r,n,a,i,s,l,c,u,d,p,m,f,v,h,g,y,b,x;const A=(0,vt.b)({props:e,name:"MuiTooltip"}),{arrow:w=!1,children:S,components:C={},componentsProps:_={},describeChild:P=!1,disableFocusListener:M=!1,disableHoverListener:I=!1,disableInteractive:j=!1,disableTouchListener:$=!1,enterDelay:T=100,enterNextDelay:L=0,enterTouchDelay:O=700,followCursor:E=!1,id:B,leaveDelay:N=0,leaveTouchDelay:z=1500,onClose:D,onOpen:F,open:W,placement:V="bottom",PopperComponent:H,PopperProps:U={},slotProps:q={},slots:G={},title:X,TransitionComponent:Y=ed.A,TransitionProps:K}=A,Z=(0,R.A)(A,rg),J=ge.isValidElement(S)?S:(0,we.jsx)("span",{children:S}),Q=(0,ne.A)(),ee=(0,Tl.I)(),[te,oe]=ge.useState(),[re,ae]=ge.useState(null),ie=ge.useRef(!1),se=j||E,le=(0,gt.A)(),ce=(0,gt.A)(),ue=(0,gt.A)(),de=(0,gt.A)(),[pe,me]=(0,$t.A)({controlled:W,default:!1,name:"Tooltip",state:"open"});let fe=pe;const ve=(0,Gf.A)(B),he=ge.useRef(),ye=(0,eg.A)((()=>{void 0!==he.current&&(document.body.style.WebkitUserSelect=he.current,he.current=void 0),de.clear()}));ge.useEffect((()=>ye),[ye]);const be=e=>{lg.clear(),sg=!0,me(!0),F&&!fe&&F(e)},xe=(0,eg.A)((e=>{lg.start(800+N,(()=>{sg=!1})),me(!1),D&&fe&&D(e),le.start(Q.transitions.duration.shortest,(()=>{ie.current=!1}))})),Ae=e=>{ie.current&&"touchstart"!==e.type||(te&&te.removeAttribute("title"),ce.clear(),ue.clear(),T||sg&&L?ce.start(sg?L:T,(()=>{be(e)})):be(e))},Se=e=>{ce.clear(),ue.start(N,(()=>{xe(e)}))},{isFocusVisibleRef:Ce,onBlur:_e,onFocus:ke,ref:Re}=(0,Rp.A)(),[,Pe]=ge.useState(!1),Me=e=>{_e(e),!1===Ce.current&&(Pe(!1),Se(e))},Ie=e=>{te||oe(e.currentTarget),ke(e),!0===Ce.current&&(Pe(!0),Ae(e))},je=e=>{ie.current=!0;const t=J.props;t.onTouchStart&&t.onTouchStart(e)};ge.useEffect((()=>{if(fe)return document.addEventListener("keydown",e),()=>{document.removeEventListener("keydown",e)};function e(e){"Escape"!==e.key&&"Esc"!==e.key||xe(e)}}),[xe,fe]);const $e=(0,bt.A)(J.ref,Re,oe,t);X||0===X||(fe=!1);const Te=ge.useRef(),Le={},Oe="string"==typeof X;P?(Le.title=fe||!Oe||I?null:X,Le["aria-describedby"]=fe?ve:null):(Le["aria-label"]=Oe?X:null,Le["aria-labelledby"]=fe&&!Oe?ve:null);const Ee=(0,k.A)({},Le,Z,J.props,{className:(0,mt.A)(Z.className,J.props.className),onTouchStart:je,ref:$e},E?{onMouseMove:e=>{const t=J.props;t.onMouseMove&&t.onMouseMove(e),cg={x:e.clientX,y:e.clientY},Te.current&&Te.current.update()}}:{}),Be={};$||(Ee.onTouchStart=e=>{je(e),ue.clear(),le.clear(),ye(),he.current=document.body.style.WebkitUserSelect,document.body.style.WebkitUserSelect="none",de.start(O,(()=>{document.body.style.WebkitUserSelect=he.current,Ae(e)}))},Ee.onTouchEnd=e=>{J.props.onTouchEnd&&J.props.onTouchEnd(e),ye(),ue.start(z,(()=>{xe(e)}))}),I||(Ee.onMouseOver=ug(Ae,Ee.onMouseOver),Ee.onMouseLeave=ug(Se,Ee.onMouseLeave),se||(Be.onMouseOver=Ae,Be.onMouseLeave=Se)),M||(Ee.onFocus=ug(Ie,Ee.onFocus),Ee.onBlur=ug(Me,Ee.onBlur),se||(Be.onFocus=Ie,Be.onBlur=Me));const Ne=ge.useMemo((()=>{var e;let t=[{name:"arrow",enabled:Boolean(re),options:{element:re,padding:4}}];return null!=(e=U.popperOptions)&&e.modifiers&&(t=t.concat(U.popperOptions.modifiers)),(0,k.A)({},U.popperOptions,{modifiers:t})}),[re,U]),ze=(0,k.A)({},A,{isRtl:ee,arrow:w,disableInteractive:se,placement:V,PopperComponentProp:H,touch:ie.current}),De=(e=>{const{classes:t,disableInteractive:o,arrow:r,touch:n,placement:a}=e,i={popper:["popper",!o&&"popperInteractive",r&&"popperArrow"],tooltip:["tooltip",r&&"tooltipArrow",n&&"touch",`tooltipPlacement${(0,uo.A)(a.split("-")[0])}`],arrow:["arrow"]};return(0,ft.A)(i,tg,t)})(ze),Fe=null!=(o=null!=(r=G.popper)?r:C.Popper)?o:ng,We=null!=(n=null!=(a=null!=(i=G.transition)?i:C.Transition)?a:Y)?n:ed.A,Ve=null!=(s=null!=(l=G.tooltip)?l:C.Tooltip)?s:ag,He=null!=(c=null!=(u=G.arrow)?u:C.Arrow)?c:ig,Ue=(0,Lt.A)(Fe,(0,k.A)({},U,null!=(d=q.popper)?d:_.popper,{className:(0,mt.A)(De.popper,null==U?void 0:U.className,null==(p=null!=(m=q.popper)?m:_.popper)?void 0:p.className)}),ze),qe=(0,Lt.A)(We,(0,k.A)({},K,null!=(f=q.transition)?f:_.transition),ze),Ge=(0,Lt.A)(Ve,(0,k.A)({},null!=(v=q.tooltip)?v:_.tooltip,{className:(0,mt.A)(De.tooltip,null==(h=null!=(g=q.tooltip)?g:_.tooltip)?void 0:h.className)}),ze),Xe=(0,Lt.A)(He,(0,k.A)({},null!=(y=q.arrow)?y:_.arrow,{className:(0,mt.A)(De.arrow,null==(b=null!=(x=q.arrow)?x:_.arrow)?void 0:b.className)}),ze);return(0,we.jsxs)(ge.Fragment,{children:[ge.cloneElement(J,Ee),(0,we.jsx)(Fe,(0,k.A)({as:null!=H?H:_n,placement:V,anchorEl:E?{getBoundingClientRect:()=>({top:cg.y,left:cg.x,right:cg.x,bottom:cg.y,width:0,height:0})}:te,popperRef:Te,open:!!te&&fe,id:ve,transition:!0},Be,Ue,{popperOptions:Ne,children:({TransitionProps:e})=>(0,we.jsx)(We,(0,k.A)({timeout:Q.transitions.duration.shorter},e,qe,{children:(0,we.jsxs)(Ve,(0,k.A)({},Ge,{children:[X,w?(0,we.jsx)(He,(0,k.A)({},Xe,{ref:ae})):null]}))}))}))]})}));function pg(e){return(0,At.Ay)("MuiSpeedDialAction",e)}const mg=(0,xt.A)("MuiSpeedDialAction",["fab","fabClosed","staticTooltip","staticTooltipClosed","staticTooltipLabel","tooltipPlacementLeft","tooltipPlacementRight"]),fg=["className","delay","FabProps","icon","id","open","TooltipClasses","tooltipOpen","tooltipPlacement","tooltipTitle"],vg=(0,de.Ay)(oc,{name:"MuiSpeedDialAction",slot:"Fab",skipVariantsResolver:!1,overridesResolver:(e,t)=>{const{ownerState:o}=e;return[t.fab,!o.open&&t.fabClosed]}})((({theme:e,ownerState:t})=>(0,k.A)({margin:8,color:(e.vars||e).palette.text.secondary,backgroundColor:(e.vars||e).palette.background.paper,"&:hover":{backgroundColor:e.vars?e.vars.palette.SpeedDialAction.fabHoverBg:(0,De.tL)(e.palette.background.paper,.15)},transition:`${e.transitions.create("transform",{duration:e.transitions.duration.shorter})}, opacity 0.8s`,opacity:1},!t.open&&{opacity:0,transform:"scale(0)"}))),hg=(0,de.Ay)("span",{name:"MuiSpeedDialAction",slot:"StaticTooltip",overridesResolver:(e,t)=>{const{ownerState:o}=e;return[t.staticTooltip,!o.open&&t.staticTooltipClosed,t[`tooltipPlacement${(0,uo.A)(o.tooltipPlacement)}`]]}})((({theme:e,ownerState:t})=>({position:"relative",display:"flex",alignItems:"center",[`& .${mg.staticTooltipLabel}`]:(0,k.A)({transition:e.transitions.create(["transform","opacity"],{duration:e.transitions.duration.shorter}),opacity:1},!t.open&&{opacity:0,transform:"scale(0.5)"},"left"===t.tooltipPlacement&&{transformOrigin:"100% 50%",right:"100%",marginRight:8},"right"===t.tooltipPlacement&&{transformOrigin:"0% 50%",left:"100%",marginLeft:8})}))),gg=(0,de.Ay)("span",{name:"MuiSpeedDialAction",slot:"StaticTooltipLabel",overridesResolver:(e,t)=>t.staticTooltipLabel})((({theme:e})=>(0,k.A)({position:"absolute"},e.typography.body1,{backgroundColor:(e.vars||e).palette.background.paper,borderRadius:(e.vars||e).shape.borderRadius,boxShadow:(e.vars||e).shadows[1],color:(e.vars||e).palette.text.secondary,padding:"4px 16px",wordBreak:"keep-all"}))),yg=ge.forwardRef((function(e,t){const o=(0,vt.b)({props:e,name:"MuiSpeedDialAction"}),{className:r,delay:n=0,FabProps:a={},icon:i,id:s,open:l,TooltipClasses:c,tooltipOpen:u=!1,tooltipPlacement:d="left",tooltipTitle:p}=o,m=(0,R.A)(o,fg),f=(0,k.A)({},o,{tooltipPlacement:d}),v=(e=>{const{open:t,tooltipPlacement:o,classes:r}=e,n={fab:["fab",!t&&"fabClosed"],staticTooltip:["staticTooltip",`tooltipPlacement${(0,uo.A)(o)}`,!t&&"staticTooltipClosed"],staticTooltipLabel:["staticTooltipLabel"]};return(0,ft.A)(n,pg,r)})(f),[h,g]=ge.useState(u),y={transitionDelay:`${n}ms`},b=(0,we.jsx)(vg,(0,k.A)({size:"small",className:(0,mt.A)(v.fab,r),tabIndex:-1,role:"menuitem",ownerState:f},a,{style:(0,k.A)({},y,a.style),children:i}));return u?(0,we.jsxs)(hg,(0,k.A)({id:s,ref:t,className:v.staticTooltip,ownerState:f},m,{children:[(0,we.jsx)(gg,{style:y,id:`${s}-label`,className:v.staticTooltipLabel,ownerState:f,children:p}),ge.cloneElement(b,{"aria-labelledby":`${s}-label`})]})):(!l&&h&&g(!1),(0,we.jsx)(dg,(0,k.A)({id:s,ref:t,title:p,placement:d,onClose:()=>{g(!1)},onOpen:()=>{g(!0)},open:l&&h,classes:c},m,{children:b})))})),bg=(0,vo.A)((0,we.jsx)("path",{d:"M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"}),"Add");function xg(e){return(0,At.Ay)("MuiSpeedDialIcon",e)}const Ag=(0,xt.A)("MuiSpeedDialIcon",["root","icon","iconOpen","iconWithOpenIconOpen","openIcon","openIconOpen"]),wg=["className","icon","open","openIcon"],Sg=(0,de.Ay)("span",{name:"MuiSpeedDialIcon",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:o}=e;return[{[`& .${Ag.icon}`]:t.icon},{[`& .${Ag.icon}`]:o.open&&t.iconOpen},{[`& .${Ag.icon}`]:o.open&&o.openIcon&&t.iconWithOpenIconOpen},{[`& .${Ag.openIcon}`]:t.openIcon},{[`& .${Ag.openIcon}`]:o.open&&t.openIconOpen},t.root]}})((({theme:e,ownerState:t})=>({height:24,[`& .${Ag.icon}`]:(0,k.A)({transition:e.transitions.create(["transform","opacity"],{duration:e.transitions.duration.short})},t.open&&(0,k.A)({transform:"rotate(45deg)"},t.openIcon&&{opacity:0})),[`& .${Ag.openIcon}`]:(0,k.A)({position:"absolute",transition:e.transitions.create(["transform","opacity"],{duration:e.transitions.duration.short}),opacity:0,transform:"rotate(-45deg)"},t.open&&{transform:"rotate(0deg)",opacity:1})}))),Cg=ge.forwardRef((function(e,t){const o=(0,vt.b)({props:e,name:"MuiSpeedDialIcon"}),{className:r,icon:n,openIcon:a}=o,i=(0,R.A)(o,wg),s=o,l=(e=>{const{classes:t,open:o,openIcon:r}=e,n={root:["root"],icon:["icon",o&&"iconOpen",r&&o&&"iconWithOpenIconOpen"],openIcon:["openIcon",o&&"openIconOpen"]};return(0,ft.A)(n,xg,t)})(s);function c(e,t){return ge.isValidElement(e)?ge.cloneElement(e,{className:t}):e}return(0,we.jsxs)(Sg,(0,k.A)({className:(0,mt.A)(l.root,r),ref:t,ownerState:s},i,{children:[a?c(a,l.openIcon):null,n?c(n,l.icon):(0,we.jsx)(bg,{className:l.icon})]}))}));Cg.muiName="SpeedDialIcon";const _g=Cg,kg=(0,xt.A)("MuiStack",["root"]),Rg=ge.createContext({});function Pg(){return ge.useContext(Rg)}const Mg=Rg,Ig=ge.createContext({});function jg(){return ge.useContext(Ig)}const $g=Ig;function Tg(e){return(0,At.Ay)("MuiStep",e)}const Lg=(0,xt.A)("MuiStep",["root","horizontal","vertical","alternativeLabel","completed"]),Og=["active","children","className","component","completed","disabled","expanded","index","last"],Eg=(0,de.Ay)("div",{name:"MuiStep",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:o}=e;return[t.root,t[o.orientation],o.alternativeLabel&&t.alternativeLabel,o.completed&&t.completed]}})((({ownerState:e})=>(0,k.A)({},"horizontal"===e.orientation&&{paddingLeft:8,paddingRight:8},e.alternativeLabel&&{flex:1,position:"relative"}))),Bg=ge.forwardRef((function(e,t){const o=(0,vt.b)({props:e,name:"MuiStep"}),{active:r,children:n,className:a,component:i="div",completed:s,disabled:l,expanded:c=!1,index:u,last:d}=o,p=(0,R.A)(o,Og),{activeStep:m,connector:f,alternativeLabel:v,orientation:h,nonLinear:g}=ge.useContext(Mg);let[y=!1,b=!1,x=!1]=[r,s,l];m===u?y=void 0===r||r:!g&&m>u?b=void 0===s||s:!g&&m<u&&(x=void 0===l||l);const A=ge.useMemo((()=>({index:u,last:d,expanded:c,icon:u+1,active:y,completed:b,disabled:x})),[u,d,c,y,b,x]),w=(0,k.A)({},o,{active:y,orientation:h,alternativeLabel:v,completed:b,disabled:x,expanded:c,component:i}),S=(e=>{const{classes:t,orientation:o,alternativeLabel:r,completed:n}=e,a={root:["root",o,r&&"alternativeLabel",n&&"completed"]};return(0,ft.A)(a,Tg,t)})(w),C=(0,we.jsxs)(Eg,(0,k.A)({as:i,className:(0,mt.A)(S.root,a),ref:t,ownerState:w},p,{children:[f&&v&&0!==u?f:null,n]}));return(0,we.jsx)($g.Provider,{value:A,children:f&&!v&&0!==u?(0,we.jsxs)(ge.Fragment,{children:[f,C]}):C})})),Ng=(0,vo.A)((0,we.jsx)("path",{d:"M12 0a12 12 0 1 0 0 24 12 12 0 0 0 0-24zm-2 17l-5-5 1.4-1.4 3.6 3.6 7.6-7.6L19 8l-9 9z"}),"CheckCircle"),zg=(0,vo.A)((0,we.jsx)("path",{d:"M1 21h22L12 2 1 21zm12-3h-2v-2h2v2zm0-4h-2v-4h2v4z"}),"Warning");var Dg=o("./node_modules/.pnpm/@mui+material@5.16.4_@emotion+react@11.13.0_@types+react@18.3.3_react@18.3.1__@emotion+styled_brxipnv4yvqheosgxcawdxdyay/node_modules/@mui/material/SvgIcon/SvgIcon.js");function Fg(e){return(0,At.Ay)("MuiStepIcon",e)}const Wg=(0,xt.A)("MuiStepIcon",["root","active","completed","error","text"]);var Vg;const Hg=["active","className","completed","error","icon"],Ug=(0,de.Ay)(Dg.A,{name:"MuiStepIcon",slot:"Root",overridesResolver:(e,t)=>t.root})((({theme:e})=>({display:"block",transition:e.transitions.create("color",{duration:e.transitions.duration.shortest}),color:(e.vars||e).palette.text.disabled,[`&.${Wg.completed}`]:{color:(e.vars||e).palette.primary.main},[`&.${Wg.active}`]:{color:(e.vars||e).palette.primary.main},[`&.${Wg.error}`]:{color:(e.vars||e).palette.error.main}}))),qg=(0,de.Ay)("text",{name:"MuiStepIcon",slot:"Text",overridesResolver:(e,t)=>t.text})((({theme:e})=>({fill:(e.vars||e).palette.primary.contrastText,fontSize:e.typography.caption.fontSize,fontFamily:e.typography.fontFamily}))),Gg=ge.forwardRef((function(e,t){const o=(0,vt.b)({props:e,name:"MuiStepIcon"}),{active:r=!1,className:n,completed:a=!1,error:i=!1,icon:s}=o,l=(0,R.A)(o,Hg),c=(0,k.A)({},o,{active:r,completed:a,error:i}),u=(e=>{const{classes:t,active:o,completed:r,error:n}=e,a={root:["root",o&&"active",r&&"completed",n&&"error"],text:["text"]};return(0,ft.A)(a,Fg,t)})(c);if("number"==typeof s||"string"==typeof s){const e=(0,mt.A)(n,u.root);return i?(0,we.jsx)(Ug,(0,k.A)({as:zg,className:e,ref:t,ownerState:c},l)):a?(0,we.jsx)(Ug,(0,k.A)({as:Ng,className:e,ref:t,ownerState:c},l)):(0,we.jsxs)(Ug,(0,k.A)({className:e,ref:t,ownerState:c},l,{children:[Vg||(Vg=(0,we.jsx)("circle",{cx:"12",cy:"12",r:"12"})),(0,we.jsx)(qg,{className:u.text,x:"12",y:"12",textAnchor:"middle",dominantBaseline:"central",ownerState:c,children:s})]}))}return s}));function Xg(e){return(0,At.Ay)("MuiStepLabel",e)}const Yg=(0,xt.A)("MuiStepLabel",["root","horizontal","vertical","label","active","completed","error","disabled","iconContainer","alternativeLabel","labelContainer"]),Kg=["children","className","componentsProps","error","icon","optional","slotProps","StepIconComponent","StepIconProps"],Zg=(0,de.Ay)("span",{name:"MuiStepLabel",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:o}=e;return[t.root,t[o.orientation]]}})((({ownerState:e})=>(0,k.A)({display:"flex",alignItems:"center",[`&.${Yg.alternativeLabel}`]:{flexDirection:"column"},[`&.${Yg.disabled}`]:{cursor:"default"}},"vertical"===e.orientation&&{textAlign:"left",padding:"8px 0"}))),Jg=(0,de.Ay)("span",{name:"MuiStepLabel",slot:"Label",overridesResolver:(e,t)=>t.label})((({theme:e})=>(0,k.A)({},e.typography.body2,{display:"block",transition:e.transitions.create("color",{duration:e.transitions.duration.shortest}),[`&.${Yg.active}`]:{color:(e.vars||e).palette.text.primary,fontWeight:500},[`&.${Yg.completed}`]:{color:(e.vars||e).palette.text.primary,fontWeight:500},[`&.${Yg.alternativeLabel}`]:{marginTop:16},[`&.${Yg.error}`]:{color:(e.vars||e).palette.error.main}}))),Qg=(0,de.Ay)("span",{name:"MuiStepLabel",slot:"IconContainer",overridesResolver:(e,t)=>t.iconContainer})((()=>({flexShrink:0,display:"flex",paddingRight:8,[`&.${Yg.alternativeLabel}`]:{paddingRight:0}}))),ey=(0,de.Ay)("span",{name:"MuiStepLabel",slot:"LabelContainer",overridesResolver:(e,t)=>t.labelContainer})((({theme:e})=>({width:"100%",color:(e.vars||e).palette.text.secondary,[`&.${Yg.alternativeLabel}`]:{textAlign:"center"}}))),ty=ge.forwardRef((function(e,t){var o;const r=(0,vt.b)({props:e,name:"MuiStepLabel"}),{children:n,className:a,componentsProps:i={},error:s=!1,icon:l,optional:c,slotProps:u={},StepIconComponent:d,StepIconProps:p}=r,m=(0,R.A)(r,Kg),{alternativeLabel:f,orientation:v}=ge.useContext(Mg),{active:h,disabled:g,completed:y,icon:b}=ge.useContext($g),x=l||b;let A=d;x&&!A&&(A=Gg);const w=(0,k.A)({},r,{active:h,alternativeLabel:f,completed:y,disabled:g,error:s,orientation:v}),S=(e=>{const{classes:t,orientation:o,active:r,completed:n,error:a,disabled:i,alternativeLabel:s}=e,l={root:["root",o,a&&"error",i&&"disabled",s&&"alternativeLabel"],label:["label",r&&"active",n&&"completed",a&&"error",i&&"disabled",s&&"alternativeLabel"],iconContainer:["iconContainer",r&&"active",n&&"completed",a&&"error",i&&"disabled",s&&"alternativeLabel"],labelContainer:["labelContainer",s&&"alternativeLabel"]};return(0,ft.A)(l,Xg,t)})(w),C=null!=(o=u.label)?o:i.label;return(0,we.jsxs)(Zg,(0,k.A)({className:(0,mt.A)(S.root,a),ref:t,ownerState:w},m,{children:[x||A?(0,we.jsx)(Qg,{className:S.iconContainer,ownerState:w,children:(0,we.jsx)(A,(0,k.A)({completed:y,active:h,error:s,icon:x},p))}):null,(0,we.jsxs)(ey,{className:S.labelContainer,ownerState:w,children:[n?(0,we.jsx)(Jg,(0,k.A)({ownerState:w},C,{className:(0,mt.A)(S.label,null==C?void 0:C.className),children:n})):null,c]})]}))}));ty.muiName="StepLabel";const oy=ty;function ry(e){return(0,At.Ay)("MuiStepButton",e)}const ny=(0,xt.A)("MuiStepButton",["root","horizontal","vertical","touchRipple"]),ay=["children","className","icon","optional"],iy=(0,de.Ay)(oo.A,{name:"MuiStepButton",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:o}=e;return[{[`& .${ny.touchRipple}`]:t.touchRipple},t.root,t[o.orientation]]}})((({ownerState:e})=>(0,k.A)({width:"100%",padding:"24px 16px",margin:"-24px -16px",boxSizing:"content-box"},"vertical"===e.orientation&&{justifyContent:"flex-start",padding:"8px",margin:"-8px"},{[`& .${ny.touchRipple}`]:{color:"rgba(0, 0, 0, 0.3)"}}))),sy=ge.forwardRef((function(e,t){const o=(0,vt.b)({props:e,name:"MuiStepButton"}),{children:r,className:n,icon:a,optional:i}=o,s=(0,R.A)(o,ay),{disabled:l,active:c}=ge.useContext($g),{orientation:u}=ge.useContext(Mg),d=(0,k.A)({},o,{orientation:u}),p=(e=>{const{classes:t,orientation:o}=e,r={root:["root",o],touchRipple:["touchRipple"]};return(0,ft.A)(r,ry,t)})(d),m={icon:a,optional:i},f=(0,jc.A)(r,["StepLabel"])?ge.cloneElement(r,m):(0,we.jsx)(oy,(0,k.A)({},m,{children:r}));return(0,we.jsx)(iy,(0,k.A)({focusRipple:!0,disabled:l,TouchRippleProps:{className:p.touchRipple},className:(0,mt.A)(p.root,n),ref:t,ownerState:d,"aria-current":c?"step":void 0},s,{children:f}))}));function ly(e){return(0,At.Ay)("MuiStepConnector",e)}const cy=(0,xt.A)("MuiStepConnector",["root","horizontal","vertical","alternativeLabel","active","completed","disabled","line","lineHorizontal","lineVertical"]),uy=["className"],dy=(0,de.Ay)("div",{name:"MuiStepConnector",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:o}=e;return[t.root,t[o.orientation],o.alternativeLabel&&t.alternativeLabel,o.completed&&t.completed]}})((({ownerState:e})=>(0,k.A)({flex:"1 1 auto"},"vertical"===e.orientation&&{marginLeft:12},e.alternativeLabel&&{position:"absolute",top:12,left:"calc(-50% + 20px)",right:"calc(50% + 20px)"}))),py=(0,de.Ay)("span",{name:"MuiStepConnector",slot:"Line",overridesResolver:(e,t)=>{const{ownerState:o}=e;return[t.line,t[`line${(0,uo.A)(o.orientation)}`]]}})((({ownerState:e,theme:t})=>{const o="light"===t.palette.mode?t.palette.grey[400]:t.palette.grey[600];return(0,k.A)({display:"block",borderColor:t.vars?t.vars.palette.StepConnector.border:o},"horizontal"===e.orientation&&{borderTopStyle:"solid",borderTopWidth:1},"vertical"===e.orientation&&{borderLeftStyle:"solid",borderLeftWidth:1,minHeight:24})})),my=ge.forwardRef((function(e,t){const o=(0,vt.b)({props:e,name:"MuiStepConnector"}),{className:r}=o,n=(0,R.A)(o,uy),{alternativeLabel:a,orientation:i="horizontal"}=ge.useContext(Mg),{active:s,disabled:l,completed:c}=ge.useContext($g),u=(0,k.A)({},o,{alternativeLabel:a,orientation:i,active:s,completed:c,disabled:l}),d=(e=>{const{classes:t,orientation:o,alternativeLabel:r,active:n,completed:a,disabled:i}=e,s={root:["root",o,r&&"alternativeLabel",n&&"active",a&&"completed",i&&"disabled"],line:["line",`line${(0,uo.A)(o)}`]};return(0,ft.A)(s,ly,t)})(u);return(0,we.jsx)(dy,(0,k.A)({className:(0,mt.A)(d.root,r),ref:t,ownerState:u},n,{children:(0,we.jsx)(py,{className:d.line,ownerState:u})}))}));function fy(e){return(0,At.Ay)("MuiStepContent",e)}const vy=(0,xt.A)("MuiStepContent",["root","last","transition"]),hy=["children","className","TransitionComponent","transitionDuration","TransitionProps"],gy=(0,de.Ay)("div",{name:"MuiStepContent",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:o}=e;return[t.root,o.last&&t.last]}})((({ownerState:e,theme:t})=>(0,k.A)({marginLeft:12,paddingLeft:20,paddingRight:8,borderLeft:t.vars?`1px solid ${t.vars.palette.StepContent.border}`:`1px solid ${"light"===t.palette.mode?t.palette.grey[400]:t.palette.grey[600]}`},e.last&&{borderLeft:"none"}))),yy=(0,de.Ay)(Mt,{name:"MuiStepContent",slot:"Transition",overridesResolver:(e,t)=>t.transition})({}),by=ge.forwardRef((function(e,t){const o=(0,vt.b)({props:e,name:"MuiStepContent"}),{children:r,className:n,TransitionComponent:a=Mt,transitionDuration:i="auto",TransitionProps:s}=o,l=(0,R.A)(o,hy),{orientation:c}=ge.useContext(Mg),{active:u,last:d,expanded:p}=ge.useContext($g),m=(0,k.A)({},o,{last:d}),f=(e=>{const{classes:t,last:o}=e,r={root:["root",o&&"last"],transition:["transition"]};return(0,ft.A)(r,fy,t)})(m);let v=i;return"auto"!==i||a.muiSupportAuto||(v=void 0),(0,we.jsx)(gy,(0,k.A)({className:(0,mt.A)(f.root,n),ref:t,ownerState:m},l,{children:(0,we.jsx)(yy,(0,k.A)({as:a,in:u||p,className:f.transition,ownerState:m,timeout:v,unmountOnExit:!0},s,{children:r}))}))}));function xy(e){return(0,At.Ay)("MuiStepper",e)}const Ay=(0,xt.A)("MuiStepper",["root","horizontal","vertical","nonLinear","alternativeLabel"]),wy=["activeStep","alternativeLabel","children","className","component","connector","nonLinear","orientation"],Sy=(0,de.Ay)("div",{name:"MuiStepper",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:o}=e;return[t.root,t[o.orientation],o.alternativeLabel&&t.alternativeLabel,o.nonLinear&&t.nonLinear]}})((({ownerState:e})=>(0,k.A)({display:"flex"},"horizontal"===e.orientation&&{flexDirection:"row",alignItems:"center"},"vertical"===e.orientation&&{flexDirection:"column"},e.alternativeLabel&&{alignItems:"flex-start"}))),Cy=(0,we.jsx)(my,{}),_y=ge.forwardRef((function(e,t){const o=(0,vt.b)({props:e,name:"MuiStepper"}),{activeStep:r=0,alternativeLabel:n=!1,children:a,className:i,component:s="div",connector:l=Cy,nonLinear:c=!1,orientation:u="horizontal"}=o,d=(0,R.A)(o,wy),p=(0,k.A)({},o,{nonLinear:c,alternativeLabel:n,orientation:u,component:s}),m=(e=>{const{orientation:t,nonLinear:o,alternativeLabel:r,classes:n}=e,a={root:["root",t,o&&"nonLinear",r&&"alternativeLabel"]};return(0,ft.A)(a,xy,n)})(p),f=ge.Children.toArray(a).filter(Boolean),v=f.map(((e,t)=>ge.cloneElement(e,(0,k.A)({index:t,last:t+1===f.length},e.props)))),h=ge.useMemo((()=>({activeStep:r,alternativeLabel:n,connector:l,nonLinear:c,orientation:u})),[r,n,l,c,u]);return(0,we.jsx)(Mg.Provider,{value:h,children:(0,we.jsx)(Sy,(0,k.A)({as:s,ownerState:p,className:(0,mt.A)(m.root,i),ref:t},d,{children:v}))})}));var ky=o("./node_modules/.pnpm/@mui+material@5.16.4_@emotion+react@11.13.0_@types+react@18.3.3_react@18.3.1__@emotion+styled_brxipnv4yvqheosgxcawdxdyay/node_modules/@mui/material/SvgIcon/svgIconClasses.js"),Ry=o("./node_modules/.pnpm/react-dom@18.3.1_react@18.3.1/node_modules/react-dom/index.js");const Py=["anchor","classes","className","width","style"],My=(0,de.Ay)("div",{shouldForwardProp:yl.A})((({theme:e,ownerState:t})=>(0,k.A)({position:"fixed",top:0,left:0,bottom:0,zIndex:e.zIndex.drawer-1},"left"===t.anchor&&{right:"auto"},"right"===t.anchor&&{left:"auto",right:0},"top"===t.anchor&&{bottom:"auto",right:0},"bottom"===t.anchor&&{top:"auto",bottom:0,right:0}))),Iy=ge.forwardRef((function(e,t){const{anchor:o,classes:r={},className:n,width:a,style:i}=e,s=(0,R.A)(e,Py),l=e;return(0,we.jsx)(My,(0,k.A)({className:(0,mt.A)("PrivateSwipeArea-root",r.root,r[`anchor${(0,uo.A)(o)}`],n),ref:t,style:(0,k.A)({[Yl(o)?"width":"height"]:a},i),ownerState:l},s))})),jy=Iy,$y=["BackdropProps"],Ty=["anchor","disableBackdropTransition","disableDiscovery","disableSwipeToOpen","hideBackdrop","hysteresis","allowSwipeInChildren","minFlingVelocity","ModalProps","onClose","onOpen","open","PaperProps","SwipeAreaProps","swipeAreaWidth","transitionDuration","variant"];let Ly=null;function Oy(e,t,o){return"right"===e?o.body.offsetWidth-t[0].pageX:t[0].pageX}function Ey(e,t,o){return"bottom"===e?o.innerHeight-t[0].clientY:t[0].clientY}function By(e,t){return e?t.clientWidth:t.clientHeight}function Ny(e,t,o,r){return Math.min(Math.max(o?t-e:r+t-e,0),r)}const zy="undefined"!=typeof navigator&&/iPad|iPhone|iPod/.test(navigator.userAgent),Dy=ge.forwardRef((function(e,t){const o=(0,vt.b)({name:"MuiSwipeableDrawer",props:e}),r=(0,ne.A)(),n={enter:r.transitions.duration.enteringScreen,exit:r.transitions.duration.leavingScreen},{anchor:a="left",disableBackdropTransition:i=!1,disableDiscovery:s=!1,disableSwipeToOpen:l=zy,hideBackdrop:c,hysteresis:u=.52,allowSwipeInChildren:d=!1,minFlingVelocity:p=450,ModalProps:{BackdropProps:m}={},onClose:f,onOpen:v,open:h=!1,PaperProps:g={},SwipeAreaProps:y,swipeAreaWidth:b=20,transitionDuration:x=n,variant:A="temporary"}=o,w=(0,R.A)(o.ModalProps,$y),S=(0,R.A)(o,Ty),[C,_]=ge.useState(!1),P=ge.useRef({isSwiping:null}),M=ge.useRef(),I=ge.useRef(),j=ge.useRef(),$=(0,bt.A)(g.ref,j),T=ge.useRef(!1),L=ge.useRef();(0,fc.A)((()=>{L.current=null}),[h]);const O=ge.useCallback(((e,t={})=>{const{mode:o=null,changeTransition:n=!0}=t,s=Kl(r,a),l=-1!==["right","bottom"].indexOf(s)?1:-1,u=Yl(a),d=u?`translate(${l*e}px, 0)`:`translate(0, ${l*e}px)`,p=j.current.style;p.webkitTransform=d,p.transform=d;let m="";if(o&&(m=r.transitions.create("all",(0,yt.c)({easing:void 0,style:void 0,timeout:x},{mode:o}))),n&&(p.webkitTransition=m,p.transition=m),!i&&!c){const t=I.current.style;t.opacity=1-e/By(u,j.current),n&&(t.webkitTransition=m,t.transition=m)}}),[a,i,c,r,x]),E=(0,eg.A)((e=>{if(!T.current)return;if(Ly=null,T.current=!1,Ry.flushSync((()=>{_(!1)})),!P.current.isSwiping)return void(P.current.isSwiping=null);P.current.isSwiping=null;const t=Kl(r,a),o=Yl(a);let n;n=o?Oy(t,e.changedTouches,(0,xv.A)(e.currentTarget)):Ey(t,e.changedTouches,(0,Ol.A)(e.currentTarget));const i=o?P.current.startX:P.current.startY,s=By(o,j.current),l=Ny(n,i,h,s),c=l/s;Math.abs(P.current.velocity)>p&&(L.current=1e3*Math.abs((s-l)/P.current.velocity)),h?P.current.velocity>p||c>u?f():O(0,{mode:"exit"}):P.current.velocity<-p||1-c>u?v():O(By(o,j.current),{mode:"enter"})})),B=(e=!1)=>{if(!C){!e&&s&&d||Ry.flushSync((()=>{_(!0)}));const t=Yl(a);!h&&j.current&&O(By(t,j.current)+(s?15:-20),{changeTransition:!1}),P.current.velocity=0,P.current.lastTime=null,P.current.lastTranslate=null,P.current.paperHit=!1,T.current=!0}},N=(0,eg.A)((e=>{if(!j.current||!T.current)return;if(null!==Ly&&Ly!==P.current)return;B(!0);const t=Kl(r,a),o=Yl(a),n=Oy(t,e.touches,(0,xv.A)(e.currentTarget)),i=Ey(t,e.touches,(0,Ol.A)(e.currentTarget));if(h&&j.current.contains(e.target)&&null===Ly){const t=function(e,t){const o=[];for(;e&&e!==t.parentElement;){const r=(0,Ol.A)(t).getComputedStyle(e);"absolute"===r.getPropertyValue("position")||"hidden"===r.getPropertyValue("overflow-x")||(e.clientWidth>0&&e.scrollWidth>e.clientWidth||e.clientHeight>0&&e.scrollHeight>e.clientHeight)&&o.push(e),e=e.parentElement}return o}(e.target,j.current),r=function({domTreeShapes:e,start:t,current:o,anchor:r}){const n={x:"scrollLeft",y:"scrollTop"},a={x:"scrollWidth",y:"scrollHeight"},i={x:"clientWidth",y:"clientHeight"};return e.some((e=>{let s=o>=t;"top"!==r&&"left"!==r||(s=!s);const l="left"===r||"right"===r?"x":"y",c=Math.round(e[n[l]]),u=c>0,d=c+e[i[l]]<e[a[l]];return!!(s&&d||!s&&u)}))}({domTreeShapes:t,start:o?P.current.startX:P.current.startY,current:o?n:i,anchor:a});if(r)return void(Ly=!0);Ly=P.current}if(null==P.current.isSwiping){const t=Math.abs(n-P.current.startX),r=Math.abs(i-P.current.startY),a=o?t>r&&t>3:r>t&&r>3;if(a&&e.cancelable&&e.preventDefault(),!0===a||(o?r>3:t>3)){if(P.current.isSwiping=a,!a)return void E(e);P.current.startX=n,P.current.startY=i,s||h||(o?P.current.startX-=20:P.current.startY-=20)}}if(!P.current.isSwiping)return;const l=By(o,j.current);let c=o?P.current.startX:P.current.startY;h&&!P.current.paperHit&&(c=Math.min(c,l));const u=Ny(o?n:i,c,h,l);if(h)if(P.current.paperHit)0===u&&(P.current.startX=n,P.current.startY=i);else{if(!(o?n<l:i<l))return;P.current.paperHit=!0,P.current.startX=n,P.current.startY=i}null===P.current.lastTranslate&&(P.current.lastTranslate=u,P.current.lastTime=performance.now()+1);const d=(u-P.current.lastTranslate)/(performance.now()-P.current.lastTime)*1e3;P.current.velocity=.4*P.current.velocity+.6*d,P.current.lastTranslate=u,P.current.lastTime=performance.now(),e.cancelable&&e.preventDefault(),O(u)})),z=(0,eg.A)((e=>{if(e.defaultPrevented)return;if(e.defaultMuiPrevented)return;if(h&&(c||!I.current.contains(e.target))&&!j.current.contains(e.target))return;const t=Kl(r,a),o=Yl(a),n=Oy(t,e.touches,(0,xv.A)(e.currentTarget)),i=Ey(t,e.touches,(0,Ol.A)(e.currentTarget));if(!h){var s;if(l||!(e.target===M.current||null!=(s=j.current)&&s.contains(e.target)&&("function"==typeof d?d(e,M.current,j.current):d)))return;if(o){if(n>b)return}else if(i>b)return}e.defaultMuiPrevented=!0,Ly=null,P.current.startX=n,P.current.startY=i,B()}));return ge.useEffect((()=>{if("temporary"===A){const e=(0,xv.A)(j.current);return e.addEventListener("touchstart",z),e.addEventListener("touchmove",N,{passive:!h}),e.addEventListener("touchend",E),()=>{e.removeEventListener("touchstart",z),e.removeEventListener("touchmove",N,{passive:!h}),e.removeEventListener("touchend",E)}}}),[A,h,z,N,E]),ge.useEffect((()=>()=>{Ly===P.current&&(Ly=null)}),[]),ge.useEffect((()=>{h||_(!1)}),[h]),(0,we.jsxs)(ge.Fragment,{children:[(0,we.jsx)(Zl,(0,k.A)({open:!("temporary"!==A||!C)||h,variant:A,ModalProps:(0,k.A)({BackdropProps:(0,k.A)({},m,{ref:I})},"temporary"===A&&{keepMounted:!0},w),hideBackdrop:c,PaperProps:(0,k.A)({},g,{style:(0,k.A)({pointerEvents:"temporary"!==A||h||d?"":"none"},g.style),ref:$}),anchor:a,transitionDuration:L.current||x,onClose:f,ref:t},S)),!l&&"temporary"===A&&(0,we.jsx)(Um,{children:(0,we.jsx)(jy,(0,k.A)({anchor:a,ref:M,width:b},y))})]})})),Fy=Dy;function Wy(e){return(0,At.Ay)("MuiSwitch",e)}const Vy=(0,xt.A)("MuiSwitch",["root","edgeStart","edgeEnd","switchBase","colorPrimary","colorSecondary","sizeSmall","sizeMedium","checked","disabled","input","thumb","track"]),Hy=["className","color","edge","size","sx"],Uy=(0,de.Ay)("span",{name:"MuiSwitch",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:o}=e;return[t.root,o.edge&&t[`edge${(0,uo.A)(o.edge)}`],t[`size${(0,uo.A)(o.size)}`]]}})({display:"inline-flex",width:58,height:38,overflow:"hidden",padding:12,boxSizing:"border-box",position:"relative",flexShrink:0,zIndex:0,verticalAlign:"middle","@media print":{colorAdjust:"exact"},variants:[{props:{edge:"start"},style:{marginLeft:-8}},{props:{edge:"end"},style:{marginRight:-8}},{props:{size:"small"},style:{width:40,height:24,padding:7,[`& .${Vy.thumb}`]:{width:16,height:16},[`& .${Vy.switchBase}`]:{padding:4,[`&.${Vy.checked}`]:{transform:"translateX(16px)"}}}}]}),qy=(0,de.Ay)(Pf.A,{name:"MuiSwitch",slot:"SwitchBase",overridesResolver:(e,t)=>{const{ownerState:o}=e;return[t.switchBase,{[`& .${Vy.input}`]:t.input},"default"!==o.color&&t[`color${(0,uo.A)(o.color)}`]]}})((({theme:e})=>({position:"absolute",top:0,left:0,zIndex:1,color:e.vars?e.vars.palette.Switch.defaultColor:`${"light"===e.palette.mode?e.palette.common.white:e.palette.grey[300]}`,transition:e.transitions.create(["left","transform"],{duration:e.transitions.duration.shortest}),[`&.${Vy.checked}`]:{transform:"translateX(20px)"},[`&.${Vy.disabled}`]:{color:e.vars?e.vars.palette.Switch.defaultDisabledColor:`${"light"===e.palette.mode?e.palette.grey[100]:e.palette.grey[600]}`},[`&.${Vy.checked} + .${Vy.track}`]:{opacity:.5},[`&.${Vy.disabled} + .${Vy.track}`]:{opacity:e.vars?e.vars.opacity.switchTrackDisabled:""+("light"===e.palette.mode?.12:.2)},[`& .${Vy.input}`]:{left:"-100%",width:"300%"}})),(({theme:e})=>({"&:hover":{backgroundColor:e.vars?`rgba(${e.vars.palette.action.activeChannel} / ${e.vars.palette.action.hoverOpacity})`:(0,De.X4)(e.palette.action.active,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}},variants:[...Object.entries(e.palette).filter((([,e])=>e.main&&e.light)).map((([t])=>({props:{color:t},style:{[`&.${Vy.checked}`]:{color:(e.vars||e).palette[t].main,"&:hover":{backgroundColor:e.vars?`rgba(${e.vars.palette[t].mainChannel} / ${e.vars.palette.action.hoverOpacity})`:(0,De.X4)(e.palette[t].main,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}},[`&.${Vy.disabled}`]:{color:e.vars?e.vars.palette.Switch[`${t}DisabledColor`]:`${"light"===e.palette.mode?(0,De.a)(e.palette[t].main,.62):(0,De.e$)(e.palette[t].main,.55)}`}},[`&.${Vy.checked} + .${Vy.track}`]:{backgroundColor:(e.vars||e).palette[t].main}}})))]}))),Gy=(0,de.Ay)("span",{name:"MuiSwitch",slot:"Track",overridesResolver:(e,t)=>t.track})((({theme:e})=>({height:"100%",width:"100%",borderRadius:7,zIndex:-1,transition:e.transitions.create(["opacity","background-color"],{duration:e.transitions.duration.shortest}),backgroundColor:e.vars?e.vars.palette.common.onBackground:`${"light"===e.palette.mode?e.palette.common.black:e.palette.common.white}`,opacity:e.vars?e.vars.opacity.switchTrack:""+("light"===e.palette.mode?.38:.3)}))),Xy=(0,de.Ay)("span",{name:"MuiSwitch",slot:"Thumb",overridesResolver:(e,t)=>t.thumb})((({theme:e})=>({boxShadow:(e.vars||e).shadows[1],backgroundColor:"currentColor",width:20,height:20,borderRadius:"50%"}))),Yy=ge.forwardRef((function(e,t){const o=(0,vt.b)({props:e,name:"MuiSwitch"}),{className:r,color:n="primary",edge:a=!1,size:i="medium",sx:s}=o,l=(0,R.A)(o,Hy),c=(0,k.A)({},o,{color:n,edge:a,size:i}),u=(e=>{const{classes:t,edge:o,size:r,color:n,checked:a,disabled:i}=e,s={root:["root",o&&`edge${(0,uo.A)(o)}`,`size${(0,uo.A)(r)}`],switchBase:["switchBase",`color${(0,uo.A)(n)}`,a&&"checked",i&&"disabled"],thumb:["thumb"],track:["track"],input:["input"]},l=(0,ft.A)(s,Wy,t);return(0,k.A)({},t,l)})(c),d=(0,we.jsx)(Xy,{className:u.thumb,ownerState:c});return(0,we.jsxs)(Uy,{className:(0,mt.A)(u.root,r),sx:s,ownerState:c,children:[(0,we.jsx)(qy,(0,k.A)({type:"checkbox",icon:d,checkedIcon:d,ref:t,ownerState:c},l,{classes:(0,k.A)({},u,{root:u.switchBase})})),(0,we.jsx)(Gy,{className:u.track,ownerState:c})]})}));function Ky(e){return(0,At.Ay)("MuiTab",e)}const Zy=(0,xt.A)("MuiTab",["root","labelIcon","textColorInherit","textColorPrimary","textColorSecondary","selected","disabled","fullWidth","wrapped","iconWrapper"]),Jy=["className","disabled","disableFocusRipple","fullWidth","icon","iconPosition","indicator","label","onChange","onClick","onFocus","selected","selectionFollowsFocus","textColor","value","wrapped"],Qy=(0,de.Ay)(oo.A,{name:"MuiTab",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:o}=e;return[t.root,o.label&&o.icon&&t.labelIcon,t[`textColor${(0,uo.A)(o.textColor)}`],o.fullWidth&&t.fullWidth,o.wrapped&&t.wrapped,{[`& .${Zy.iconWrapper}`]:t.iconWrapper}]}})((({theme:e,ownerState:t})=>(0,k.A)({},e.typography.button,{maxWidth:360,minWidth:90,position:"relative",minHeight:48,flexShrink:0,padding:"12px 16px",overflow:"hidden",whiteSpace:"normal",textAlign:"center"},t.label&&{flexDirection:"top"===t.iconPosition||"bottom"===t.iconPosition?"column":"row"},{lineHeight:1.25},t.icon&&t.label&&{minHeight:72,paddingTop:9,paddingBottom:9,[`& > .${Zy.iconWrapper}`]:(0,k.A)({},"top"===t.iconPosition&&{marginBottom:6},"bottom"===t.iconPosition&&{marginTop:6},"start"===t.iconPosition&&{marginRight:e.spacing(1)},"end"===t.iconPosition&&{marginLeft:e.spacing(1)})},"inherit"===t.textColor&&{color:"inherit",opacity:.6,[`&.${Zy.selected}`]:{opacity:1},[`&.${Zy.disabled}`]:{opacity:(e.vars||e).palette.action.disabledOpacity}},"primary"===t.textColor&&{color:(e.vars||e).palette.text.secondary,[`&.${Zy.selected}`]:{color:(e.vars||e).palette.primary.main},[`&.${Zy.disabled}`]:{color:(e.vars||e).palette.text.disabled}},"secondary"===t.textColor&&{color:(e.vars||e).palette.text.secondary,[`&.${Zy.selected}`]:{color:(e.vars||e).palette.secondary.main},[`&.${Zy.disabled}`]:{color:(e.vars||e).palette.text.disabled}},t.fullWidth&&{flexShrink:1,flexGrow:1,flexBasis:0,maxWidth:"none"},t.wrapped&&{fontSize:e.typography.pxToRem(12)}))),eb=ge.forwardRef((function(e,t){const o=(0,vt.b)({props:e,name:"MuiTab"}),{className:r,disabled:n=!1,disableFocusRipple:a=!1,fullWidth:i,icon:s,iconPosition:l="top",indicator:c,label:u,onChange:d,onClick:p,onFocus:m,selected:f,selectionFollowsFocus:v,textColor:h="inherit",value:g,wrapped:y=!1}=o,b=(0,R.A)(o,Jy),x=(0,k.A)({},o,{disabled:n,disableFocusRipple:a,selected:f,icon:!!s,iconPosition:l,label:!!u,fullWidth:i,textColor:h,wrapped:y}),A=(e=>{const{classes:t,textColor:o,fullWidth:r,wrapped:n,icon:a,label:i,selected:s,disabled:l}=e,c={root:["root",a&&i&&"labelIcon",`textColor${(0,uo.A)(o)}`,r&&"fullWidth",n&&"wrapped",s&&"selected",l&&"disabled"],iconWrapper:["iconWrapper"]};return(0,ft.A)(c,Ky,t)})(x),w=s&&u&&ge.isValidElement(s)?ge.cloneElement(s,{className:(0,mt.A)(A.iconWrapper,s.props.className)}):s;return(0,we.jsxs)(Qy,(0,k.A)({focusRipple:!a,className:(0,mt.A)(A.root,r),ref:t,role:"tab","aria-selected":f,disabled:n,onClick:e=>{!f&&d&&d(e,g),p&&p(e)},onFocus:e=>{v&&!f&&d&&d(e,g),m&&m(e)},ownerState:x,tabIndex:f?0:-1},b,{children:["top"===l||"start"===l?(0,we.jsxs)(ge.Fragment,{children:[w,u]}):(0,we.jsxs)(ge.Fragment,{children:[u,w]}),c]}))})),tb=ge.createContext();function ob(e){return(0,At.Ay)("MuiTable",e)}const rb=(0,xt.A)("MuiTable",["root","stickyHeader"]),nb=["className","component","padding","size","stickyHeader"],ab=(0,de.Ay)("table",{name:"MuiTable",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:o}=e;return[t.root,o.stickyHeader&&t.stickyHeader]}})((({theme:e,ownerState:t})=>(0,k.A)({display:"table",width:"100%",borderCollapse:"collapse",borderSpacing:0,"& caption":(0,k.A)({},e.typography.body2,{padding:e.spacing(2),color:(e.vars||e).palette.text.secondary,textAlign:"left",captionSide:"bottom"})},t.stickyHeader&&{borderCollapse:"separate"}))),ib="table",sb=ge.forwardRef((function(e,t){const o=(0,vt.b)({props:e,name:"MuiTable"}),{className:r,component:n=ib,padding:a="normal",size:i="medium",stickyHeader:s=!1}=o,l=(0,R.A)(o,nb),c=(0,k.A)({},o,{component:n,padding:a,size:i,stickyHeader:s}),u=(e=>{const{classes:t,stickyHeader:o}=e,r={root:["root",o&&"stickyHeader"]};return(0,ft.A)(r,ob,t)})(c),d=ge.useMemo((()=>({padding:a,size:i,stickyHeader:s})),[a,i,s]);return(0,we.jsx)(tb.Provider,{value:d,children:(0,we.jsx)(ab,(0,k.A)({as:n,role:n===ib?null:"table",ref:t,className:(0,mt.A)(u.root,r),ownerState:c},l))})})),lb=ge.createContext();function cb(e){return(0,At.Ay)("MuiTableBody",e)}const ub=(0,xt.A)("MuiTableBody",["root"]),db=["className","component"],pb=(0,de.Ay)("tbody",{name:"MuiTableBody",slot:"Root",overridesResolver:(e,t)=>t.root})({display:"table-row-group"}),mb={variant:"body"},fb="tbody",vb=ge.forwardRef((function(e,t){const o=(0,vt.b)({props:e,name:"MuiTableBody"}),{className:r,component:n=fb}=o,a=(0,R.A)(o,db),i=(0,k.A)({},o,{component:n}),s=(e=>{const{classes:t}=e;return(0,ft.A)({root:["root"]},cb,t)})(i);return(0,we.jsx)(lb.Provider,{value:mb,children:(0,we.jsx)(pb,(0,k.A)({className:(0,mt.A)(s.root,r),as:n,ref:t,role:n===fb?null:"rowgroup",ownerState:i},a))})}));function hb(e){return(0,At.Ay)("MuiTableCell",e)}const gb=(0,xt.A)("MuiTableCell",["root","head","body","footer","sizeSmall","sizeMedium","paddingCheckbox","paddingNone","alignLeft","alignCenter","alignRight","alignJustify","stickyHeader"]),yb=["align","className","component","padding","scope","size","sortDirection","variant"],bb=(0,de.Ay)("td",{name:"MuiTableCell",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:o}=e;return[t.root,t[o.variant],t[`size${(0,uo.A)(o.size)}`],"normal"!==o.padding&&t[`padding${(0,uo.A)(o.padding)}`],"inherit"!==o.align&&t[`align${(0,uo.A)(o.align)}`],o.stickyHeader&&t.stickyHeader]}})((({theme:e,ownerState:t})=>(0,k.A)({},e.typography.body2,{display:"table-cell",verticalAlign:"inherit",borderBottom:e.vars?`1px solid ${e.vars.palette.TableCell.border}`:`1px solid\n    ${"light"===e.palette.mode?(0,De.a)((0,De.X4)(e.palette.divider,1),.88):(0,De.e$)((0,De.X4)(e.palette.divider,1),.68)}`,textAlign:"left",padding:16},"head"===t.variant&&{color:(e.vars||e).palette.text.primary,lineHeight:e.typography.pxToRem(24),fontWeight:e.typography.fontWeightMedium},"body"===t.variant&&{color:(e.vars||e).palette.text.primary},"footer"===t.variant&&{color:(e.vars||e).palette.text.secondary,lineHeight:e.typography.pxToRem(21),fontSize:e.typography.pxToRem(12)},"small"===t.size&&{padding:"6px 16px",[`&.${gb.paddingCheckbox}`]:{width:24,padding:"0 12px 0 16px","& > *":{padding:0}}},"checkbox"===t.padding&&{width:48,padding:"0 0 0 4px"},"none"===t.padding&&{padding:0},"left"===t.align&&{textAlign:"left"},"center"===t.align&&{textAlign:"center"},"right"===t.align&&{textAlign:"right",flexDirection:"row-reverse"},"justify"===t.align&&{textAlign:"justify"},t.stickyHeader&&{position:"sticky",top:0,zIndex:2,backgroundColor:(e.vars||e).palette.background.default}))),xb=ge.forwardRef((function(e,t){const o=(0,vt.b)({props:e,name:"MuiTableCell"}),{align:r="inherit",className:n,component:a,padding:i,scope:s,size:l,sortDirection:c,variant:u}=o,d=(0,R.A)(o,yb),p=ge.useContext(tb),m=ge.useContext(lb),f=m&&"head"===m.variant;let v;v=a||(f?"th":"td");let h=s;"td"===v?h=void 0:!h&&f&&(h="col");const g=u||m&&m.variant,y=(0,k.A)({},o,{align:r,component:v,padding:i||(p&&p.padding?p.padding:"normal"),size:l||(p&&p.size?p.size:"medium"),sortDirection:c,stickyHeader:"head"===g&&p&&p.stickyHeader,variant:g}),b=(e=>{const{classes:t,variant:o,align:r,padding:n,size:a,stickyHeader:i}=e,s={root:["root",o,i&&"stickyHeader","inherit"!==r&&`align${(0,uo.A)(r)}`,"normal"!==n&&`padding${(0,uo.A)(n)}`,`size${(0,uo.A)(a)}`]};return(0,ft.A)(s,hb,t)})(y);let x=null;return c&&(x="asc"===c?"ascending":"descending"),(0,we.jsx)(bb,(0,k.A)({as:v,ref:t,className:(0,mt.A)(b.root,n),"aria-sort":x,scope:h,ownerState:y},d))})),Ab=xb;function wb(e){return(0,At.Ay)("MuiTableContainer",e)}const Sb=(0,xt.A)("MuiTableContainer",["root"]),Cb=["className","component"],_b=(0,de.Ay)("div",{name:"MuiTableContainer",slot:"Root",overridesResolver:(e,t)=>t.root})({width:"100%",overflowX:"auto"}),kb=ge.forwardRef((function(e,t){const o=(0,vt.b)({props:e,name:"MuiTableContainer"}),{className:r,component:n="div"}=o,a=(0,R.A)(o,Cb),i=(0,k.A)({},o,{component:n}),s=(e=>{const{classes:t}=e;return(0,ft.A)({root:["root"]},wb,t)})(i);return(0,we.jsx)(_b,(0,k.A)({ref:t,as:n,className:(0,mt.A)(s.root,r),ownerState:i},a))}));function Rb(e){return(0,At.Ay)("MuiTableFooter",e)}const Pb=(0,xt.A)("MuiTableFooter",["root"]),Mb=["className","component"],Ib=(0,de.Ay)("tfoot",{name:"MuiTableFooter",slot:"Root",overridesResolver:(e,t)=>t.root})({display:"table-footer-group"}),jb={variant:"footer"},$b="tfoot",Tb=ge.forwardRef((function(e,t){const o=(0,vt.b)({props:e,name:"MuiTableFooter"}),{className:r,component:n=$b}=o,a=(0,R.A)(o,Mb),i=(0,k.A)({},o,{component:n}),s=(e=>{const{classes:t}=e;return(0,ft.A)({root:["root"]},Rb,t)})(i);return(0,we.jsx)(lb.Provider,{value:jb,children:(0,we.jsx)(Ib,(0,k.A)({as:n,className:(0,mt.A)(s.root,r),ref:t,role:n===$b?null:"rowgroup",ownerState:i},a))})}));function Lb(e){return(0,At.Ay)("MuiTableHead",e)}const Ob=(0,xt.A)("MuiTableHead",["root"]),Eb=["className","component"],Bb=(0,de.Ay)("thead",{name:"MuiTableHead",slot:"Root",overridesResolver:(e,t)=>t.root})({display:"table-header-group"}),Nb={variant:"head"},zb="thead",Db=ge.forwardRef((function(e,t){const o=(0,vt.b)({props:e,name:"MuiTableHead"}),{className:r,component:n=zb}=o,a=(0,R.A)(o,Eb),i=(0,k.A)({},o,{component:n}),s=(e=>{const{classes:t}=e;return(0,ft.A)({root:["root"]},Lb,t)})(i);return(0,we.jsx)(lb.Provider,{value:Nb,children:(0,we.jsx)(Bb,(0,k.A)({as:n,className:(0,mt.A)(s.root,r),ref:t,role:n===zb?null:"rowgroup",ownerState:i},a))})}));var Fb=o("./node_modules/.pnpm/@mui+material@5.16.4_@emotion+react@11.13.0_@types+react@18.3.3_react@18.3.1__@emotion+styled_brxipnv4yvqheosgxcawdxdyay/node_modules/@mui/material/Toolbar/Toolbar.js");const Wb=(0,vo.A)((0,we.jsx)("path",{d:"M15.41 16.09l-4.58-4.59 4.58-4.59L14 5.5l-6 6 6 6z"}),"KeyboardArrowLeft"),Vb=(0,vo.A)((0,we.jsx)("path",{d:"M8.59 16.34l4.58-4.59-4.58-4.59L10 5.75l6 6-6 6z"}),"KeyboardArrowRight"),Hb=["backIconButtonProps","count","disabled","getItemAriaLabel","nextIconButtonProps","onPageChange","page","rowsPerPage","showFirstButton","showLastButton","slots","slotProps"],Ub=ge.forwardRef((function(e,t){var o,r,n,a,i,s,l,c;const{backIconButtonProps:u,count:d,disabled:p=!1,getItemAriaLabel:m,nextIconButtonProps:f,onPageChange:v,page:h,rowsPerPage:g,showFirstButton:y,showLastButton:b,slots:x={},slotProps:A={}}=e,w=(0,R.A)(e,Hb),S=(0,Tl.I)(),C=null!=(o=x.firstButton)?o:fo.A,_=null!=(r=x.lastButton)?r:fo.A,P=null!=(n=x.nextButton)?n:fo.A,M=null!=(a=x.previousButton)?a:fo.A,I=null!=(i=x.firstButtonIcon)?i:cf,j=null!=(s=x.lastButtonIcon)?s:uf,$=null!=(l=x.nextButtonIcon)?l:Vb,T=null!=(c=x.previousButtonIcon)?c:Wb,L=S?_:C,O=S?P:M,E=S?M:P,B=S?C:_,N=S?A.lastButton:A.firstButton,z=S?A.nextButton:A.previousButton,D=S?A.previousButton:A.nextButton,F=S?A.firstButton:A.lastButton;return(0,we.jsxs)("div",(0,k.A)({ref:t},w,{children:[y&&(0,we.jsx)(L,(0,k.A)({onClick:e=>{v(e,0)},disabled:p||0===h,"aria-label":m("first",h),title:m("first",h)},N,{children:S?(0,we.jsx)(j,(0,k.A)({},A.lastButtonIcon)):(0,we.jsx)(I,(0,k.A)({},A.firstButtonIcon))})),(0,we.jsx)(O,(0,k.A)({onClick:e=>{v(e,h-1)},disabled:p||0===h,color:"inherit","aria-label":m("previous",h),title:m("previous",h)},null!=z?z:u,{children:S?(0,we.jsx)($,(0,k.A)({},A.nextButtonIcon)):(0,we.jsx)(T,(0,k.A)({},A.previousButtonIcon))})),(0,we.jsx)(E,(0,k.A)({onClick:e=>{v(e,h+1)},disabled:p||-1!==d&&h>=Math.ceil(d/g)-1,color:"inherit","aria-label":m("next",h),title:m("next",h)},null!=D?D:f,{children:S?(0,we.jsx)(T,(0,k.A)({},A.previousButtonIcon)):(0,we.jsx)($,(0,k.A)({},A.nextButtonIcon))})),b&&(0,we.jsx)(B,(0,k.A)({onClick:e=>{v(e,Math.max(0,Math.ceil(d/g)-1))},disabled:p||h>=Math.ceil(d/g)-1,"aria-label":m("last",h),title:m("last",h)},F,{children:S?(0,we.jsx)(I,(0,k.A)({},A.firstButtonIcon)):(0,we.jsx)(j,(0,k.A)({},A.lastButtonIcon))}))]}))}));function qb(e){return(0,At.Ay)("MuiTablePagination",e)}const Gb=(0,xt.A)("MuiTablePagination",["root","toolbar","spacer","selectLabel","selectRoot","select","selectIcon","input","menuItem","displayedRows","actions"]);var Xb;const Yb=["ActionsComponent","backIconButtonProps","className","colSpan","component","count","disabled","getItemAriaLabel","labelDisplayedRows","labelRowsPerPage","nextIconButtonProps","onPageChange","onRowsPerPageChange","page","rowsPerPage","rowsPerPageOptions","SelectProps","showFirstButton","showLastButton","slotProps","slots"],Kb=(0,de.Ay)(Ab,{name:"MuiTablePagination",slot:"Root",overridesResolver:(e,t)=>t.root})((({theme:e})=>({overflow:"auto",color:(e.vars||e).palette.text.primary,fontSize:e.typography.pxToRem(14),"&:last-child":{padding:0}}))),Zb=(0,de.Ay)(Fb.A,{name:"MuiTablePagination",slot:"Toolbar",overridesResolver:(e,t)=>(0,k.A)({[`& .${Gb.actions}`]:t.actions},t.toolbar)})((({theme:e})=>({minHeight:52,paddingRight:2,[`${e.breakpoints.up("xs")} and (orientation: landscape)`]:{minHeight:52},[e.breakpoints.up("sm")]:{minHeight:52,paddingRight:2},[`& .${Gb.actions}`]:{flexShrink:0,marginLeft:20}}))),Jb=(0,de.Ay)("div",{name:"MuiTablePagination",slot:"Spacer",overridesResolver:(e,t)=>t.spacer})({flex:"1 1 100%"}),Qb=(0,de.Ay)("p",{name:"MuiTablePagination",slot:"SelectLabel",overridesResolver:(e,t)=>t.selectLabel})((({theme:e})=>(0,k.A)({},e.typography.body2,{flexShrink:0}))),ex=(0,de.Ay)(Nv,{name:"MuiTablePagination",slot:"Select",overridesResolver:(e,t)=>(0,k.A)({[`& .${Gb.selectIcon}`]:t.selectIcon,[`& .${Gb.select}`]:t.select},t.input,t.selectRoot)})({color:"inherit",fontSize:"inherit",flexShrink:0,marginRight:32,marginLeft:8,[`& .${Gb.select}`]:{paddingLeft:8,paddingRight:24,textAlign:"right",textAlignLast:"right"}}),tx=(0,de.Ay)(ym.A,{name:"MuiTablePagination",slot:"MenuItem",overridesResolver:(e,t)=>t.menuItem})({}),ox=(0,de.Ay)("p",{name:"MuiTablePagination",slot:"DisplayedRows",overridesResolver:(e,t)=>t.displayedRows})((({theme:e})=>(0,k.A)({},e.typography.body2,{flexShrink:0})));function rx({from:e,to:t,count:o}){return`${e}–${t} of ${-1!==o?o:`more than ${t}`}`}function nx(e){return`Go to ${e} page`}const ax=ge.forwardRef((function(e,t){var o;const r=(0,vt.b)({props:e,name:"MuiTablePagination"}),{ActionsComponent:n=Ub,backIconButtonProps:a,className:i,colSpan:s,component:l=Ab,count:c,disabled:u=!1,getItemAriaLabel:d=nx,labelDisplayedRows:p=rx,labelRowsPerPage:m="Rows per page:",nextIconButtonProps:f,onPageChange:v,onRowsPerPageChange:h,page:g,rowsPerPage:y,rowsPerPageOptions:b=[10,25,50,100],SelectProps:x={},showFirstButton:A=!1,showLastButton:w=!1,slotProps:S={},slots:C={}}=r,_=(0,R.A)(r,Yb),P=r,M=(e=>{const{classes:t}=e;return(0,ft.A)({root:["root"],toolbar:["toolbar"],spacer:["spacer"],selectLabel:["selectLabel"],select:["select"],input:["input"],selectIcon:["selectIcon"],menuItem:["menuItem"],displayedRows:["displayedRows"],actions:["actions"]},qb,t)})(P),I=null!=(o=null==S?void 0:S.select)?o:x,j=I.native?"option":tx;let $;l!==Ab&&"td"!==l||($=s||1e3);const T=(0,Gf.A)(I.id),L=(0,Gf.A)(I.labelId);return(0,we.jsx)(Kb,(0,k.A)({colSpan:$,ref:t,as:l,ownerState:P,className:(0,mt.A)(M.root,i)},_,{children:(0,we.jsxs)(Zb,{className:M.toolbar,children:[(0,we.jsx)(Jb,{className:M.spacer}),b.length>1&&(0,we.jsx)(Qb,{className:M.selectLabel,id:L,children:m}),b.length>1&&(0,we.jsx)(ex,(0,k.A)({variant:"standard"},!I.variant&&{input:Xb||(Xb=(0,we.jsx)(_c,{}))},{value:y,onChange:h,id:T,labelId:L},I,{classes:(0,k.A)({},I.classes,{root:(0,mt.A)(M.input,M.selectRoot,(I.classes||{}).root),select:(0,mt.A)(M.select,(I.classes||{}).select),icon:(0,mt.A)(M.selectIcon,(I.classes||{}).icon)}),disabled:u,children:b.map((e=>(0,ge.createElement)(j,(0,k.A)({},!(0,rc.A)(j)&&{ownerState:P},{className:M.menuItem,key:e.label?e.label:e,value:e.value?e.value:e}),e.label?e.label:e)))})),(0,we.jsx)(ox,{className:M.displayedRows,children:p({from:0===c?0:g*y+1,to:-1===c?(g+1)*y:-1===y?c:Math.min(c,(g+1)*y),count:-1===c?-1:c,page:g})}),(0,we.jsx)(n,{className:M.actions,backIconButtonProps:a,count:c,nextIconButtonProps:f,onPageChange:v,page:g,rowsPerPage:y,showFirstButton:A,showLastButton:w,slotProps:S.actions,slots:C.actions,getItemAriaLabel:d,disabled:u})]})}))}));function ix(e){return(0,At.Ay)("MuiTableRow",e)}const sx=(0,xt.A)("MuiTableRow",["root","selected","hover","head","footer"]),lx=["className","component","hover","selected"],cx=(0,de.Ay)("tr",{name:"MuiTableRow",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:o}=e;return[t.root,o.head&&t.head,o.footer&&t.footer]}})((({theme:e})=>({color:"inherit",display:"table-row",verticalAlign:"middle",outline:0,[`&.${sx.hover}:hover`]:{backgroundColor:(e.vars||e).palette.action.hover},[`&.${sx.selected}`]:{backgroundColor:e.vars?`rgba(${e.vars.palette.primary.mainChannel} / ${e.vars.palette.action.selectedOpacity})`:(0,De.X4)(e.palette.primary.main,e.palette.action.selectedOpacity),"&:hover":{backgroundColor:e.vars?`rgba(${e.vars.palette.primary.mainChannel} / calc(${e.vars.palette.action.selectedOpacity} + ${e.vars.palette.action.hoverOpacity}))`:(0,De.X4)(e.palette.primary.main,e.palette.action.selectedOpacity+e.palette.action.hoverOpacity)}}}))),ux="tr",dx=ge.forwardRef((function(e,t){const o=(0,vt.b)({props:e,name:"MuiTableRow"}),{className:r,component:n=ux,hover:a=!1,selected:i=!1}=o,s=(0,R.A)(o,lx),l=ge.useContext(lb),c=(0,k.A)({},o,{component:n,hover:a,selected:i,head:l&&"head"===l.variant,footer:l&&"footer"===l.variant}),u=(e=>{const{classes:t,selected:o,hover:r,head:n,footer:a}=e,i={root:["root",o&&"selected",r&&"hover",n&&"head",a&&"footer"]};return(0,ft.A)(i,ix,t)})(c);return(0,we.jsx)(cx,(0,k.A)({as:n,ref:t,className:(0,mt.A)(u.root,r),role:n===ux?null:"row",ownerState:c},s))})),px=dx,mx=(0,vo.A)((0,we.jsx)("path",{d:"M20 12l-1.41-1.41L13 16.17V4h-2v12.17l-5.58-5.59L4 12l8 8 8-8z"}),"ArrowDownward");function fx(e){return(0,At.Ay)("MuiTableSortLabel",e)}const vx=(0,xt.A)("MuiTableSortLabel",["root","active","icon","iconDirectionDesc","iconDirectionAsc"]),hx=["active","children","className","direction","hideSortIcon","IconComponent"],gx=(0,de.Ay)(oo.A,{name:"MuiTableSortLabel",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:o}=e;return[t.root,o.active&&t.active]}})((({theme:e})=>({cursor:"pointer",display:"inline-flex",justifyContent:"flex-start",flexDirection:"inherit",alignItems:"center","&:focus":{color:(e.vars||e).palette.text.secondary},"&:hover":{color:(e.vars||e).palette.text.secondary,[`& .${vx.icon}`]:{opacity:.5}},[`&.${vx.active}`]:{color:(e.vars||e).palette.text.primary,[`& .${vx.icon}`]:{opacity:1,color:(e.vars||e).palette.text.secondary}}}))),yx=(0,de.Ay)("span",{name:"MuiTableSortLabel",slot:"Icon",overridesResolver:(e,t)=>{const{ownerState:o}=e;return[t.icon,t[`iconDirection${(0,uo.A)(o.direction)}`]]}})((({theme:e,ownerState:t})=>(0,k.A)({fontSize:18,marginRight:4,marginLeft:4,opacity:0,transition:e.transitions.create(["opacity","transform"],{duration:e.transitions.duration.shorter}),userSelect:"none"},"desc"===t.direction&&{transform:"rotate(0deg)"},"asc"===t.direction&&{transform:"rotate(180deg)"}))),bx=ge.forwardRef((function(e,t){const o=(0,vt.b)({props:e,name:"MuiTableSortLabel"}),{active:r=!1,children:n,className:a,direction:i="asc",hideSortIcon:s=!1,IconComponent:l=mx}=o,c=(0,R.A)(o,hx),u=(0,k.A)({},o,{active:r,direction:i,hideSortIcon:s,IconComponent:l}),d=(e=>{const{classes:t,direction:o,active:r}=e,n={root:["root",r&&"active"],icon:["icon",`iconDirection${(0,uo.A)(o)}`]};return(0,ft.A)(n,fx,t)})(u);return(0,we.jsxs)(gx,(0,k.A)({className:(0,mt.A)(d.root,a),component:"span",disableRipple:!0,ownerState:u,ref:t},c,{children:[n,s&&!r?null:(0,we.jsx)(yx,{as:l,className:(0,mt.A)(d.icon),ownerState:u})]}))}));let xx;function Ax(){if(xx)return xx;const e=document.createElement("div"),t=document.createElement("div");return t.style.width="10px",t.style.height="1px",e.appendChild(t),e.dir="rtl",e.style.fontSize="14px",e.style.width="4px",e.style.height="1px",e.style.position="absolute",e.style.top="-1000px",e.style.overflow="scroll",document.body.appendChild(e),xx="reverse",e.scrollLeft>0?xx="default":(e.scrollLeft=1,0===e.scrollLeft&&(xx="negative")),document.body.removeChild(e),xx}function wx(e,t){const o=e.scrollLeft;if("rtl"!==t)return o;switch(Ax()){case"negative":return e.scrollWidth-e.clientWidth+o;case"reverse":return e.scrollWidth-e.clientWidth-o;default:return o}}function Sx(e){return(1+Math.sin(Math.PI*e-Math.PI/2))/2}const Cx=["onChange"],_x={width:99,height:99,position:"absolute",top:-9999,overflow:"scroll"};function kx(e){return(0,At.Ay)("MuiTabScrollButton",e)}const Rx=(0,xt.A)("MuiTabScrollButton",["root","vertical","horizontal","disabled"]),Px=["className","slots","slotProps","direction","orientation","disabled"],Mx=(0,de.Ay)(oo.A,{name:"MuiTabScrollButton",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:o}=e;return[t.root,o.orientation&&t[o.orientation]]}})((({ownerState:e})=>(0,k.A)({width:40,flexShrink:0,opacity:.8,[`&.${Rx.disabled}`]:{opacity:0}},"vertical"===e.orientation&&{width:"100%",height:40,"& svg":{transform:`rotate(${e.isRtl?-90:90}deg)`}}))),Ix=ge.forwardRef((function(e,t){var o,r;const n=(0,vt.b)({props:e,name:"MuiTabScrollButton"}),{className:a,slots:i={},slotProps:s={},direction:l}=n,c=(0,R.A)(n,Px),u=(0,Tl.I)(),d=(0,k.A)({isRtl:u},n),p=(e=>{const{classes:t,orientation:o,disabled:r}=e,n={root:["root",o,r&&"disabled"]};return(0,ft.A)(n,kx,t)})(d),m=null!=(o=i.StartScrollButtonIcon)?o:Wb,f=null!=(r=i.EndScrollButtonIcon)?r:Vb,v=(0,mn.A)({elementType:m,externalSlotProps:s.startScrollButtonIcon,additionalProps:{fontSize:"small"},ownerState:d}),h=(0,mn.A)({elementType:f,externalSlotProps:s.endScrollButtonIcon,additionalProps:{fontSize:"small"},ownerState:d});return(0,we.jsx)(Mx,(0,k.A)({component:"div",className:(0,mt.A)(p.root,a),ref:t,role:null,ownerState:d,tabIndex:null},c,{children:"left"===l?(0,we.jsx)(m,(0,k.A)({},v)):(0,we.jsx)(f,(0,k.A)({},h))}))}));function jx(e){return(0,At.Ay)("MuiTabs",e)}const $x=(0,xt.A)("MuiTabs",["root","vertical","flexContainer","flexContainerVertical","centered","scroller","fixed","scrollableX","scrollableY","hideScrollbar","scrollButtons","scrollButtonsHideMobile","indicator"]),Tx=["aria-label","aria-labelledby","action","centered","children","className","component","allowScrollButtonsMobile","indicatorColor","onChange","orientation","ScrollButtonComponent","scrollButtons","selectionFollowsFocus","slots","slotProps","TabIndicatorProps","TabScrollButtonProps","textColor","value","variant","visibleScrollbar"],Lx=(e,t)=>e===t?e.firstChild:t&&t.nextElementSibling?t.nextElementSibling:e.firstChild,Ox=(e,t)=>e===t?e.lastChild:t&&t.previousElementSibling?t.previousElementSibling:e.lastChild,Ex=(e,t,o)=>{let r=!1,n=o(e,t);for(;n;){if(n===e.firstChild){if(r)return;r=!0}const t=n.disabled||"true"===n.getAttribute("aria-disabled");if(n.hasAttribute("tabindex")&&!t)return void n.focus();n=o(e,n)}},Bx=(0,de.Ay)("div",{name:"MuiTabs",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:o}=e;return[{[`& .${$x.scrollButtons}`]:t.scrollButtons},{[`& .${$x.scrollButtons}`]:o.scrollButtonsHideMobile&&t.scrollButtonsHideMobile},t.root,o.vertical&&t.vertical]}})((({ownerState:e,theme:t})=>(0,k.A)({overflow:"hidden",minHeight:48,WebkitOverflowScrolling:"touch",display:"flex"},e.vertical&&{flexDirection:"column"},e.scrollButtonsHideMobile&&{[`& .${$x.scrollButtons}`]:{[t.breakpoints.down("sm")]:{display:"none"}}}))),Nx=(0,de.Ay)("div",{name:"MuiTabs",slot:"Scroller",overridesResolver:(e,t)=>{const{ownerState:o}=e;return[t.scroller,o.fixed&&t.fixed,o.hideScrollbar&&t.hideScrollbar,o.scrollableX&&t.scrollableX,o.scrollableY&&t.scrollableY]}})((({ownerState:e})=>(0,k.A)({position:"relative",display:"inline-block",flex:"1 1 auto",whiteSpace:"nowrap"},e.fixed&&{overflowX:"hidden",width:"100%"},e.hideScrollbar&&{scrollbarWidth:"none","&::-webkit-scrollbar":{display:"none"}},e.scrollableX&&{overflowX:"auto",overflowY:"hidden"},e.scrollableY&&{overflowY:"auto",overflowX:"hidden"}))),zx=(0,de.Ay)("div",{name:"MuiTabs",slot:"FlexContainer",overridesResolver:(e,t)=>{const{ownerState:o}=e;return[t.flexContainer,o.vertical&&t.flexContainerVertical,o.centered&&t.centered]}})((({ownerState:e})=>(0,k.A)({display:"flex"},e.vertical&&{flexDirection:"column"},e.centered&&{justifyContent:"center"}))),Dx=(0,de.Ay)("span",{name:"MuiTabs",slot:"Indicator",overridesResolver:(e,t)=>t.indicator})((({ownerState:e,theme:t})=>(0,k.A)({position:"absolute",height:2,bottom:0,width:"100%",transition:t.transitions.create()},"primary"===e.indicatorColor&&{backgroundColor:(t.vars||t).palette.primary.main},"secondary"===e.indicatorColor&&{backgroundColor:(t.vars||t).palette.secondary.main},e.vertical&&{height:"100%",width:2,right:0}))),Fx=(0,de.Ay)((function(e){const{onChange:t}=e,o=(0,R.A)(e,Cx),r=ge.useRef(),n=ge.useRef(null),a=()=>{r.current=n.current.offsetHeight-n.current.clientHeight};return(0,fc.A)((()=>{const e=(0,Ll.A)((()=>{const e=r.current;a(),e!==r.current&&t(r.current)})),o=(0,Ol.A)(n.current);return o.addEventListener("resize",e),()=>{e.clear(),o.removeEventListener("resize",e)}}),[t]),ge.useEffect((()=>{a(),t(r.current)}),[t]),(0,we.jsx)("div",(0,k.A)({style:_x,ref:n},o))}))({overflowX:"auto",overflowY:"hidden",scrollbarWidth:"none","&::-webkit-scrollbar":{display:"none"}}),Wx={},Vx=ge.forwardRef((function(e,t){const o=(0,vt.b)({props:e,name:"MuiTabs"}),r=(0,ne.A)(),n=(0,Tl.I)(),{"aria-label":a,"aria-labelledby":i,action:s,centered:l=!1,children:c,className:u,component:d="div",allowScrollButtonsMobile:p=!1,indicatorColor:m="primary",onChange:f,orientation:v="horizontal",ScrollButtonComponent:h=Ix,scrollButtons:g="auto",selectionFollowsFocus:y,slots:b={},slotProps:x={},TabIndicatorProps:A={},TabScrollButtonProps:w={},textColor:S="primary",value:C,variant:_="standard",visibleScrollbar:P=!1}=o,M=(0,R.A)(o,Tx),I="scrollable"===_,j="vertical"===v,$=j?"scrollTop":"scrollLeft",T=j?"top":"left",L=j?"bottom":"right",O=j?"clientHeight":"clientWidth",E=j?"height":"width",B=(0,k.A)({},o,{component:d,allowScrollButtonsMobile:p,indicatorColor:m,orientation:v,vertical:j,scrollButtons:g,textColor:S,variant:_,visibleScrollbar:P,fixed:!I,hideScrollbar:I&&!P,scrollableX:I&&!j,scrollableY:I&&j,centered:l&&!I,scrollButtonsHideMobile:!p}),N=(e=>{const{vertical:t,fixed:o,hideScrollbar:r,scrollableX:n,scrollableY:a,centered:i,scrollButtonsHideMobile:s,classes:l}=e,c={root:["root",t&&"vertical"],scroller:["scroller",o&&"fixed",r&&"hideScrollbar",n&&"scrollableX",a&&"scrollableY"],flexContainer:["flexContainer",t&&"flexContainerVertical",i&&"centered"],indicator:["indicator"],scrollButtons:["scrollButtons",s&&"scrollButtonsHideMobile"],scrollableX:[n&&"scrollableX"],hideScrollbar:[r&&"hideScrollbar"]};return(0,ft.A)(c,jx,l)})(B),z=(0,mn.A)({elementType:b.StartScrollButtonIcon,externalSlotProps:x.startScrollButtonIcon,ownerState:B}),D=(0,mn.A)({elementType:b.EndScrollButtonIcon,externalSlotProps:x.endScrollButtonIcon,ownerState:B}),[F,W]=ge.useState(!1),[V,H]=ge.useState(Wx),[U,q]=ge.useState(!1),[G,X]=ge.useState(!1),[Y,K]=ge.useState(!1),[Z,J]=ge.useState({overflow:"hidden",scrollbarWidth:0}),Q=new Map,ee=ge.useRef(null),te=ge.useRef(null),oe=()=>{const e=ee.current;let t,o;if(e){const o=e.getBoundingClientRect();t={clientWidth:e.clientWidth,scrollLeft:e.scrollLeft,scrollTop:e.scrollTop,scrollLeftNormalized:wx(e,n?"rtl":"ltr"),scrollWidth:e.scrollWidth,top:o.top,bottom:o.bottom,left:o.left,right:o.right}}if(e&&!1!==C){const e=te.current.children;if(e.length>0){const t=e[Q.get(C)];o=t?t.getBoundingClientRect():null}}return{tabsMeta:t,tabMeta:o}},re=(0,eg.A)((()=>{const{tabsMeta:e,tabMeta:t}=oe();let o,r=0;if(j)o="top",t&&e&&(r=t.top-e.top+e.scrollTop);else if(o=n?"right":"left",t&&e){const a=n?e.scrollLeftNormalized+e.clientWidth-e.scrollWidth:e.scrollLeft;r=(n?-1:1)*(t[o]-e[o]+a)}const a={[o]:r,[E]:t?t[E]:0};if(isNaN(V[o])||isNaN(V[E]))H(a);else{const e=Math.abs(V[o]-a[o]),t=Math.abs(V[E]-a[E]);(e>=1||t>=1)&&H(a)}})),ae=(e,{animation:t=!0}={})=>{t?function(e,t,o,r={},n=()=>{}){const{ease:a=Sx,duration:i=300}=r;let s=null;const l=t[e];let c=!1;const u=r=>{if(c)return void n(new Error("Animation cancelled"));null===s&&(s=r);const d=Math.min(1,(r-s)/i);t[e]=a(d)*(o-l)+l,d>=1?requestAnimationFrame((()=>{n(null)})):requestAnimationFrame(u)};l===o?n(new Error("Element already at target position")):requestAnimationFrame(u)}($,ee.current,e,{duration:r.transitions.duration.standard}):ee.current[$]=e},ie=e=>{let t=ee.current[$];j?t+=e:(t+=e*(n?-1:1),t*=n&&"reverse"===Ax()?-1:1),ae(t)},se=()=>{const e=ee.current[O];let t=0;const o=Array.from(te.current.children);for(let r=0;r<o.length;r+=1){const n=o[r];if(t+n[O]>e){0===r&&(t=e);break}t+=n[O]}return t},le=()=>{ie(-1*se())},ce=()=>{ie(se())},ue=ge.useCallback((e=>{J({overflow:null,scrollbarWidth:e})}),[]),de=(0,eg.A)((e=>{const{tabsMeta:t,tabMeta:o}=oe();if(o&&t)if(o[T]<t[T]){const r=t[$]+(o[T]-t[T]);ae(r,{animation:e})}else if(o[L]>t[L]){const r=t[$]+(o[L]-t[L]);ae(r,{animation:e})}})),pe=(0,eg.A)((()=>{I&&!1!==g&&K(!Y)}));ge.useEffect((()=>{const e=(0,Ll.A)((()=>{ee.current&&re()}));let t;const o=(0,Ol.A)(ee.current);let r;return o.addEventListener("resize",e),"undefined"!=typeof ResizeObserver&&(t=new ResizeObserver(e),Array.from(te.current.children).forEach((e=>{t.observe(e)}))),"undefined"!=typeof MutationObserver&&(r=new MutationObserver((o=>{o.forEach((e=>{e.removedNodes.forEach((e=>{var o;null==(o=t)||o.unobserve(e)})),e.addedNodes.forEach((e=>{var o;null==(o=t)||o.observe(e)}))})),e(),pe()})),r.observe(te.current,{childList:!0})),()=>{var n,a;e.clear(),o.removeEventListener("resize",e),null==(n=r)||n.disconnect(),null==(a=t)||a.disconnect()}}),[re,pe]),ge.useEffect((()=>{const e=Array.from(te.current.children),t=e.length;if("undefined"!=typeof IntersectionObserver&&t>0&&I&&!1!==g){const o=e[0],r=e[t-1],n={root:ee.current,threshold:.99},a=new IntersectionObserver((e=>{q(!e[0].isIntersecting)}),n);a.observe(o);const i=new IntersectionObserver((e=>{X(!e[0].isIntersecting)}),n);return i.observe(r),()=>{a.disconnect(),i.disconnect()}}}),[I,g,Y,null==c?void 0:c.length]),ge.useEffect((()=>{W(!0)}),[]),ge.useEffect((()=>{re()})),ge.useEffect((()=>{de(Wx!==V)}),[de,V]),ge.useImperativeHandle(s,(()=>({updateIndicator:re,updateScrollButtons:pe})),[re,pe]);const me=(0,we.jsx)(Dx,(0,k.A)({},A,{className:(0,mt.A)(N.indicator,A.className),ownerState:B,style:(0,k.A)({},V,A.style)}));let fe=0;const ve=ge.Children.map(c,(e=>{if(!ge.isValidElement(e))return null;const t=void 0===e.props.value?fe:e.props.value;Q.set(t,fe);const o=t===C;return fe+=1,ge.cloneElement(e,(0,k.A)({fullWidth:"fullWidth"===_,indicator:o&&!F&&me,selected:o,selectionFollowsFocus:y,onChange:f,textColor:S,value:t},1!==fe||!1!==C||e.props.tabIndex?{}:{tabIndex:0}))})),he=(()=>{const e={};e.scrollbarSizeListener=I?(0,we.jsx)(Fx,{onChange:ue,className:(0,mt.A)(N.scrollableX,N.hideScrollbar)}):null;const t=I&&("auto"===g&&(U||G)||!0===g);return e.scrollButtonStart=t?(0,we.jsx)(h,(0,k.A)({slots:{StartScrollButtonIcon:b.StartScrollButtonIcon},slotProps:{startScrollButtonIcon:z},orientation:v,direction:n?"right":"left",onClick:le,disabled:!U},w,{className:(0,mt.A)(N.scrollButtons,w.className)})):null,e.scrollButtonEnd=t?(0,we.jsx)(h,(0,k.A)({slots:{EndScrollButtonIcon:b.EndScrollButtonIcon},slotProps:{endScrollButtonIcon:D},orientation:v,direction:n?"left":"right",onClick:ce,disabled:!G},w,{className:(0,mt.A)(N.scrollButtons,w.className)})):null,e})();return(0,we.jsxs)(Bx,(0,k.A)({className:(0,mt.A)(N.root,u),ownerState:B,ref:t,as:d},M,{children:[he.scrollButtonStart,he.scrollbarSizeListener,(0,we.jsxs)(Nx,{className:N.scroller,ownerState:B,style:{overflow:Z.overflow,[j?"margin"+(n?"Left":"Right"):"marginBottom"]:P?void 0:-Z.scrollbarWidth},ref:ee,children:[(0,we.jsx)(zx,{"aria-label":a,"aria-labelledby":i,"aria-orientation":"vertical"===v?"vertical":null,className:N.flexContainer,ownerState:B,onKeyDown:e=>{const t=te.current,o=(0,xv.A)(t).activeElement;if("tab"!==o.getAttribute("role"))return;let r="horizontal"===v?"ArrowLeft":"ArrowUp",a="horizontal"===v?"ArrowRight":"ArrowDown";switch("horizontal"===v&&n&&(r="ArrowRight",a="ArrowLeft"),e.key){case r:e.preventDefault(),Ex(t,o,Ox);break;case a:e.preventDefault(),Ex(t,o,Lx);break;case"Home":e.preventDefault(),Ex(t,null,Lx);break;case"End":e.preventDefault(),Ex(t,null,Ox)}},ref:te,role:"tablist",children:ve}),F&&me]}),he.scrollButtonEnd]}))})),Hx=Vx;function Ux(e){return(0,At.Ay)("MuiTextField",e)}const qx=(0,xt.A)("MuiTextField",["root"]),Gx=["autoComplete","autoFocus","children","className","color","defaultValue","disabled","error","FormHelperTextProps","fullWidth","helperText","id","InputLabelProps","inputProps","InputProps","inputRef","label","maxRows","minRows","multiline","name","onBlur","onChange","onFocus","placeholder","required","rows","select","SelectProps","type","value","variant"],Xx={standard:Kd,filled:Ic,outlined:tf},Yx=(0,de.Ay)(Ec,{name:"MuiTextField",slot:"Root",overridesResolver:(e,t)=>t.root})({}),Kx=ge.forwardRef((function(e,t){const o=(0,vt.b)({props:e,name:"MuiTextField"}),{autoComplete:r,autoFocus:n=!1,children:a,className:i,color:s="primary",defaultValue:l,disabled:c=!1,error:u=!1,FormHelperTextProps:d,fullWidth:p=!1,helperText:m,id:f,InputLabelProps:v,inputProps:h,InputProps:g,inputRef:y,label:b,maxRows:x,minRows:A,multiline:w=!1,name:S,onBlur:C,onChange:_,onFocus:P,placeholder:M,required:I=!1,rows:j,select:$=!1,SelectProps:T,type:L,value:O,variant:E="outlined"}=o,B=(0,R.A)(o,Gx),N=(0,k.A)({},o,{autoFocus:n,color:s,disabled:c,error:u,fullWidth:p,multiline:w,required:I,select:$,variant:E}),z=(e=>{const{classes:t}=e;return(0,ft.A)({root:["root"]},Ux,t)})(N),D={};"outlined"===E&&(v&&void 0!==v.shrink&&(D.notched=v.shrink),D.label=b),$&&(T&&T.native||(D.id=void 0),D["aria-describedby"]=void 0);const F=(0,Vo.A)(f),W=m&&F?`${F}-helper-text`:void 0,V=b&&F?`${F}-label`:void 0,H=Xx[E],U=(0,we.jsx)(H,(0,k.A)({"aria-describedby":W,autoComplete:r,autoFocus:n,defaultValue:l,fullWidth:p,multiline:w,name:S,rows:j,maxRows:x,minRows:A,type:L,value:O,id:F,inputRef:y,onBlur:C,onChange:_,onFocus:P,placeholder:M,inputProps:h},D,g));return(0,we.jsxs)(Yx,(0,k.A)({className:(0,mt.A)(z.root,i),disabled:c,error:u,fullWidth:p,ref:t,required:I,color:s,variant:E,ownerState:N},B,{children:[null!=b&&""!==b&&(0,we.jsx)(sp,(0,k.A)({htmlFor:F,id:V},v,{children:b})),$?(0,we.jsx)(Nv,(0,k.A)({"aria-describedby":W,id:F,labelId:V,value:O,input:U},T,{children:a})):U,m&&(0,we.jsx)(cu,(0,k.A)({id:W},d,{children:m}))]}))}));function Zx(e){return(0,At.Ay)("MuiToggleButton",e)}const Jx=(0,xt.A)("MuiToggleButton",["root","disabled","selected","standard","primary","secondary","sizeSmall","sizeMedium","sizeLarge","fullWidth"]),Qx=ge.createContext({}),eA=ge.createContext(void 0);function tA(e,t){return void 0!==t&&void 0!==e&&(Array.isArray(t)?t.indexOf(e)>=0:e===t)}const oA=["value"],rA=["children","className","color","disabled","disableFocusRipple","fullWidth","onChange","onClick","selected","size","value"],nA=(0,de.Ay)(oo.A,{name:"MuiToggleButton",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:o}=e;return[t.root,t[`size${(0,uo.A)(o.size)}`]]}})((({theme:e,ownerState:t})=>{let o,r="standard"===t.color?e.palette.text.primary:e.palette[t.color].main;return e.vars&&(r="standard"===t.color?e.vars.palette.text.primary:e.vars.palette[t.color].main,o="standard"===t.color?e.vars.palette.text.primaryChannel:e.vars.palette[t.color].mainChannel),(0,k.A)({},e.typography.button,{borderRadius:(e.vars||e).shape.borderRadius,padding:11,border:`1px solid ${(e.vars||e).palette.divider}`,color:(e.vars||e).palette.action.active},t.fullWidth&&{width:"100%"},{[`&.${Jx.disabled}`]:{color:(e.vars||e).palette.action.disabled,border:`1px solid ${(e.vars||e).palette.action.disabledBackground}`},"&:hover":{textDecoration:"none",backgroundColor:e.vars?`rgba(${e.vars.palette.text.primaryChannel} / ${e.vars.palette.action.hoverOpacity})`:W(e.palette.text.primary,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}},[`&.${Jx.selected}`]:{color:r,backgroundColor:e.vars?`rgba(${o} / ${e.vars.palette.action.selectedOpacity})`:W(r,e.palette.action.selectedOpacity),"&:hover":{backgroundColor:e.vars?`rgba(${o} / calc(${e.vars.palette.action.selectedOpacity} + ${e.vars.palette.action.hoverOpacity}))`:W(r,e.palette.action.selectedOpacity+e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:e.vars?`rgba(${o} / ${e.vars.palette.action.selectedOpacity})`:W(r,e.palette.action.selectedOpacity)}}}},"small"===t.size&&{padding:7,fontSize:e.typography.pxToRem(13)},"large"===t.size&&{padding:15,fontSize:e.typography.pxToRem(15)})})),aA=ge.forwardRef((function(e,t){const o=ge.useContext(Qx),{value:r}=o,n=(0,R.A)(o,oA),a=ge.useContext(eA),i=(0,ae.A)((0,k.A)({},n,{selected:tA(e.value,r)}),e),s=(0,vt.b)({props:i,name:"MuiToggleButton"}),{children:l,className:c,color:u="standard",disabled:d=!1,disableFocusRipple:p=!1,fullWidth:m=!1,onChange:f,onClick:v,selected:h,size:g="medium",value:y}=s,b=(0,R.A)(s,rA),x=(0,k.A)({},s,{color:u,disabled:d,disableFocusRipple:p,fullWidth:m,size:g}),A=(e=>{const{classes:t,fullWidth:o,selected:r,disabled:n,size:a,color:i}=e,s={root:["root",r&&"selected",n&&"disabled",o&&"fullWidth",`size${(0,uo.A)(a)}`,i]};return(0,ft.A)(s,Zx,t)})(x),w=a||"";return(0,we.jsx)(nA,(0,k.A)({className:(0,mt.A)(n.className,A.root,c,w),disabled:d,focusRipple:!p,ref:t,onClick:e=>{v&&(v(e,y),e.defaultPrevented)||f&&f(e,y)},onChange:f,value:y,ownerState:x,"aria-pressed":h},b,{children:l}))}));function iA(e){return(0,At.Ay)("MuiToggleButtonGroup",e)}const sA=(0,xt.A)("MuiToggleButtonGroup",["root","selected","horizontal","vertical","disabled","grouped","groupedHorizontal","groupedVertical","fullWidth","firstButton","lastButton","middleButton"]),lA=["children","className","color","disabled","exclusive","fullWidth","onChange","orientation","size","value"],cA=(0,de.Ay)("div",{name:"MuiToggleButtonGroup",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:o}=e;return[{[`& .${sA.grouped}`]:t.grouped},{[`& .${sA.grouped}`]:t[`grouped${(0,uo.A)(o.orientation)}`]},{[`& .${sA.firstButton}`]:t.firstButton},{[`& .${sA.lastButton}`]:t.lastButton},{[`& .${sA.middleButton}`]:t.middleButton},t.root,"vertical"===o.orientation&&t.vertical,o.fullWidth&&t.fullWidth]}})((({ownerState:e,theme:t})=>(0,k.A)({display:"inline-flex",borderRadius:(t.vars||t).shape.borderRadius},"vertical"===e.orientation&&{flexDirection:"column"},e.fullWidth&&{width:"100%"},{[`& .${sA.grouped}`]:(0,k.A)({},"horizontal"===e.orientation?{[`&.${sA.selected} + .${sA.grouped}.${sA.selected}`]:{borderLeft:0,marginLeft:0}}:{[`&.${sA.selected} + .${sA.grouped}.${sA.selected}`]:{borderTop:0,marginTop:0}})},"horizontal"===e.orientation?{[`& .${sA.firstButton},& .${sA.middleButton}`]:{borderTopRightRadius:0,borderBottomRightRadius:0},[`& .${sA.lastButton},& .${sA.middleButton}`]:{marginLeft:-1,borderLeft:"1px solid transparent",borderTopLeftRadius:0,borderBottomLeftRadius:0}}:{[`& .${sA.firstButton},& .${sA.middleButton}`]:{borderBottomLeftRadius:0,borderBottomRightRadius:0},[`& .${sA.lastButton},& .${sA.middleButton}`]:{marginTop:-1,borderTop:"1px solid transparent",borderTopLeftRadius:0,borderTopRightRadius:0}},"horizontal"===e.orientation?{[`& .${sA.lastButton}.${Jx.disabled},& .${sA.middleButton}.${Jx.disabled}`]:{borderLeft:"1px solid transparent"}}:{[`& .${sA.lastButton}.${Jx.disabled},& .${sA.middleButton}.${Jx.disabled}`]:{borderTop:"1px solid transparent"}}))),uA=ge.forwardRef((function(e,t){const o=(0,vt.b)({props:e,name:"MuiToggleButtonGroup"}),{children:r,className:n,color:a="standard",disabled:i=!1,exclusive:s=!1,fullWidth:l=!1,onChange:c,orientation:u="horizontal",size:d="medium",value:p}=o,m=(0,R.A)(o,lA),f=(0,k.A)({},o,{disabled:i,fullWidth:l,orientation:u,size:d}),v=(e=>{const{classes:t,orientation:o,fullWidth:r,disabled:n}=e,a={root:["root","vertical"===o&&"vertical",r&&"fullWidth"],grouped:["grouped",`grouped${(0,uo.A)(o)}`,n&&"disabled"],firstButton:["firstButton"],lastButton:["lastButton"],middleButton:["middleButton"]};return(0,ft.A)(a,iA,t)})(f),h=ge.useCallback(((e,t)=>{if(!c)return;const o=p&&p.indexOf(t);let r;p&&o>=0?(r=p.slice(),r.splice(o,1)):r=p?p.concat(t):[t],c(e,r)}),[c,p]),g=ge.useCallback(((e,t)=>{c&&c(e,p===t?null:t)}),[c,p]),y=ge.useMemo((()=>({className:v.grouped,onChange:s?g:h,value:p,size:d,fullWidth:l,color:a,disabled:i})),[v.grouped,s,g,h,p,d,l,a,i]),b=fi(r),x=b.length,A=e=>{const t=0===e,o=e===x-1;return t&&o?"":t?v.firstButton:o?v.lastButton:v.middleButton};return(0,we.jsx)(cA,(0,k.A)({role:"group",className:(0,mt.A)(v.root,n),ref:t,ownerState:f},m,{children:(0,we.jsx)(Qx.Provider,{value:y,children:b.map(((e,t)=>(0,we.jsx)(eA.Provider,{value:A(t),children:e},t)))})}))}));var dA=o("./node_modules/.pnpm/@mui+material@5.16.4_@emotion+react@11.13.0_@types+react@18.3.3_react@18.3.1__@emotion+styled_brxipnv4yvqheosgxcawdxdyay/node_modules/@mui/material/Toolbar/toolbarClasses.js");const pA=["getTrigger","target"];function mA(e,t){const{disableHysteresis:o=!1,threshold:r=100,target:n}=t,a=e.current;return n&&(e.current=void 0!==n.pageYOffset?n.pageYOffset:n.scrollTop),!(!o&&void 0!==a&&e.current<a)&&e.current>r}const fA="undefined"!=typeof window?window:null;function vA(e={}){const{getTrigger:t=mA,target:o=fA}=e,r=(0,R.A)(e,pA),n=ge.useRef(),[a,i]=ge.useState((()=>t(n,r)));return ge.useEffect((()=>{const e=()=>{i(t(n,(0,k.A)({target:o},r)))};return e(),o.addEventListener("scroll",e,{passive:!0}),()=>{o.removeEventListener("scroll",e,{passive:!0})}}),[o,t,JSON.stringify(r)]),a}var hA=o("./node_modules/.pnpm/@mui+material@5.16.4_@emotion+react@11.13.0_@types+react@18.3.3_react@18.3.1__@emotion+styled_brxipnv4yvqheosgxcawdxdyay/node_modules/@mui/material/Unstable_TrapFocus/FocusTrap.js")},"./node_modules/.pnpm/@mui+system@5.16.4_@emotion+react@11.13.0_@types+react@18.3.3_react@18.3.1__@emotion+styled@1_6pxsshf4op6ciexesjgj77xooe/node_modules/@mui/system/useThemeWithoutDefault.js":(e,t,o)=>{t.A=void 0;var r=function(e,t){if(e&&e.__esModule)return e;if(null===e||"object"!=typeof e&&"function"!=typeof e)return{default:e};var o=a(t);if(o&&o.has(e))return o.get(e);var r={__proto__:null},n=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var i in e)if("default"!==i&&Object.prototype.hasOwnProperty.call(e,i)){var s=n?Object.getOwnPropertyDescriptor(e,i):null;s&&(s.get||s.set)?Object.defineProperty(r,i,s):r[i]=e[i]}return r.default=e,o&&o.set(e,r),r}(o("./node_modules/.pnpm/react@18.3.1/node_modules/react/index.js")),n=o("./node_modules/.pnpm/@mui+styled-engine@5.16.4_@emotion+react@11.13.0_@types+react@18.3.3_react@18.3.1__@emotion+s_fxygcpf7zqzkokazitjbbkulbe/node_modules/@mui/styled-engine/index.js");function a(e){if("function"!=typeof WeakMap)return null;var t=new WeakMap,o=new WeakMap;return(a=function(e){return e?o:t})(e)}t.A=function(e=null){const t=r.useContext(n.ThemeContext);return t&&(o=t,0!==Object.keys(o).length)?t:e;var o}},"./node_modules/.pnpm/framer-motion@4.1.17_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/framer-motion/dist/framer-motion.cjs.js":(e,t,o)=>{Object.defineProperty(t,"__esModule",{value:!0});var r=o("./node_modules/.pnpm/tslib@2.6.3/node_modules/tslib/tslib.es6.mjs"),n=o("./node_modules/.pnpm/react@18.3.1/node_modules/react/index.js"),a=o("./node_modules/.pnpm/hey-listen@1.0.8/node_modules/hey-listen/dist/hey-listen.es.js"),i=o("./node_modules/.pnpm/style-value-types@4.1.4/node_modules/style-value-types/dist/valueTypes.cjs.js"),s=o("./node_modules/.pnpm/popmotion@9.3.6/node_modules/popmotion/dist/popmotion.cjs.js"),l=o("./node_modules/.pnpm/framesync@5.3.0/node_modules/framesync/dist/framesync.cjs.js");function c(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}function u(e){if(e&&e.__esModule)return e;var t=Object.create(null);return e&&Object.keys(e).forEach((function(o){if("default"!==o){var r=Object.getOwnPropertyDescriptor(e,o);Object.defineProperty(t,o,r.get?r:{enumerable:!0,get:function(){return e[o]}})}})),t.default=e,Object.freeze(t)}var d=u(n),p=c(n),m=c(l),f=function(e){return{isEnabled:function(t){return e.some((function(e){return!!t[e]}))}}},v={measureLayout:f(["layout","layoutId","drag","_layoutResetTransform"]),animation:f(["animate","exit","variants","whileHover","whileTap","whileFocus","whileDrag"]),exit:f(["exit"]),drag:f(["drag","dragControls"]),focus:f(["whileFocus"]),hover:f(["whileHover","onHoverStart","onHoverEnd"]),tap:f(["whileTap","onTap","onTapStart","onTapCancel"]),pan:f(["onPan","onPanStart","onPanSessionStart","onPanEnd"]),layoutAnimation:f(["layout","layoutId"])};function h(e){for(var t in e){var o=e[t];null!==o&&(v[t].Component=o)}}var g=n.createContext({strict:!1}),y=Object.keys(v),b=y.length,x=n.createContext({transformPagePoint:function(e){return e},isStatic:!1}),A=n.createContext({});function w(){return n.useContext(A).visualElement}var S=n.createContext(null);function C(e){var t=n.useRef(null);return null===t.current&&(t.current=e()),t.current}function _(){var e=n.useContext(S);if(null===e)return[!0,null];var t=e.isPresent,o=e.onExitComplete,r=e.register,a=M();return n.useEffect((function(){return r(a)}),[]),!t&&o?[!1,function(){return null==o?void 0:o(a)}]:[!0]}function k(e){return null===e||e.isPresent}var R=0,P=function(){return R++},M=function(){return C(P)},I=n.createContext(null),j="undefined"!=typeof window,$=j?n.useLayoutEffect:n.useEffect;function T(e){return"object"==typeof e&&Object.prototype.hasOwnProperty.call(e,"current")}function L(e){return Array.isArray(e)}function O(e){return"string"==typeof e||L(e)}function E(e,t,o,r,n){var a;return void 0===r&&(r={}),void 0===n&&(n={}),"string"==typeof t&&(t=null===(a=e.variants)||void 0===a?void 0:a[t]),"function"==typeof t?t(null!=o?o:e.custom,r,n):t}function B(e,t,o){var r=e.getProps();return E(r,t,null!=o?o:r.custom,function(e){var t={};return e.forEachValue((function(e,o){return t[o]=e.get()})),t}(e),function(e){var t={};return e.forEachValue((function(e,o){return t[o]=e.getVelocity()})),t}(e))}function N(e){var t;return"function"==typeof(null===(t=e.animate)||void 0===t?void 0:t.start)||O(e.initial)||O(e.animate)||O(e.whileHover)||O(e.whileDrag)||O(e.whileTap)||O(e.whileFocus)||O(e.exit)}function z(e){return Boolean(N(e)||e.variants)}function D(e){return Array.isArray(e)?e.join(" "):e}function F(e){var t=e.preloadedFeatures,o=e.createVisualElement,a=e.useRender,i=e.useVisualState,s=e.Component;return t&&h(t),n.forwardRef((function(e,t){var l=n.useContext(x).isStatic,c=null,u=function(e,t){var o=function(e,t){if(N(e)){var o=e.initial,r=e.animate;return{initial:!1===o||O(o)?o:void 0,animate:O(r)?r:void 0}}return!1!==e.inherit?t:{}}(e,n.useContext(A)),r=o.initial,a=o.animate;return n.useMemo((function(){return{initial:r,animate:a}}),t?[D(r),D(a)]:[])}(e,l),p=i(e,l);return!l&&j&&(u.visualElement=function(e,t,o,a){var i=n.useContext(x),s=n.useContext(g),l=w(),c=n.useContext(S),u=function(e){var t=e.layoutId,o=n.useContext(I);return o&&void 0!==t?o+"-"+t:t}(o),d=n.useRef(void 0);a||(a=s.renderer),!d.current&&a&&(d.current=a(e,{visualState:t,parent:l,props:r.__assign(r.__assign({},o),{layoutId:u}),presenceId:null==c?void 0:c.id,blockInitialAnimation:!1===(null==c?void 0:c.initial)}));var p=d.current;return $((function(){p&&(p.setProps(r.__assign(r.__assign(r.__assign({},i),o),{layoutId:u})),p.isPresent=k(c),p.isPresenceRoot=!l||l.presenceId!==(null==c?void 0:c.id),p.syncRender())})),n.useEffect((function(){var e;p&&(null===(e=p.animationState)||void 0===e||e.animateChanges())})),$((function(){return function(){return null==p?void 0:p.notifyUnmount()}}),[]),p}(s,p,e,o),c=function(e,t){var o=[];if(n.useContext(g),!t)return null;for(var a=0;a<b;a++){var i=y[a],s=v[i],l=s.isEnabled,c=s.Component;l(e)&&c&&o.push(d.createElement(c,r.__assign({key:i},e,{visualElement:t})))}return o}(e,u.visualElement)),d.createElement(d.Fragment,null,d.createElement(A.Provider,{value:u},a(s,e,function(e,t,o){return n.useCallback((function(r){var n;r&&(null===(n=e.mount)||void 0===n||n.call(e,r)),t&&(r?t.mount(r):t.unmount()),o&&("function"==typeof o?o(r):T(o)&&(o.current=r))}),[t])}(p,u.visualElement,t),p,l)),c)}))}function W(e){function t(t,o){return void 0===o&&(o={}),F(e(t,o))}var o=new Map;return new Proxy(t,{get:function(e,r){return o.has(r)||o.set(r,t(r)),o.get(r)}})}var V=["animate","circle","defs","desc","ellipse","g","image","line","filter","marker","mask","metadata","path","pattern","polygon","polyline","rect","stop","svg","switch","symbol","text","tspan","use","view"];function H(e){return"string"==typeof e&&!e.includes("-")&&!!(V.indexOf(e)>-1||/[A-Z]/.test(e))}var U={};function q(e){for(var t in e)U[t]=e[t]}var G=["","X","Y","Z"],X=["transformPerspective","x","y","z"];function Y(e,t){return X.indexOf(e)-X.indexOf(t)}["translate","scale","rotate","skew"].forEach((function(e){return G.forEach((function(t){return X.push(e+t)}))}));var K=new Set(X);function Z(e){return K.has(e)}var J=new Set(["originX","originY","originZ"]);function Q(e){return J.has(e)}function ee(e,t){var o=t.layout,r=t.layoutId;return Z(e)||Q(e)||(o||void 0!==r)&&(!!U[e]||"opacity"===e)}var te=function(e){return null!==e&&"object"==typeof e&&e.getVelocity},oe={x:"translateX",y:"translateY",z:"translateZ",transformPerspective:"perspective"};function re(e){return e.startsWith("--")}var ne=function(e,t){return t&&"number"==typeof e?t.transform(e):e},ae=r.__assign(r.__assign({},i.number),{transform:Math.round}),ie={borderWidth:i.px,borderTopWidth:i.px,borderRightWidth:i.px,borderBottomWidth:i.px,borderLeftWidth:i.px,borderRadius:i.px,radius:i.px,borderTopLeftRadius:i.px,borderTopRightRadius:i.px,borderBottomRightRadius:i.px,borderBottomLeftRadius:i.px,width:i.px,maxWidth:i.px,height:i.px,maxHeight:i.px,size:i.px,top:i.px,right:i.px,bottom:i.px,left:i.px,padding:i.px,paddingTop:i.px,paddingRight:i.px,paddingBottom:i.px,paddingLeft:i.px,margin:i.px,marginTop:i.px,marginRight:i.px,marginBottom:i.px,marginLeft:i.px,rotate:i.degrees,rotateX:i.degrees,rotateY:i.degrees,rotateZ:i.degrees,scale:i.scale,scaleX:i.scale,scaleY:i.scale,scaleZ:i.scale,skew:i.degrees,skewX:i.degrees,skewY:i.degrees,distance:i.px,translateX:i.px,translateY:i.px,translateZ:i.px,x:i.px,y:i.px,z:i.px,perspective:i.px,transformPerspective:i.px,opacity:i.alpha,originX:i.progressPercentage,originY:i.progressPercentage,originZ:i.px,zIndex:ae,fillOpacity:i.alpha,strokeOpacity:i.alpha,numOctaves:ae};function se(e,t,o,r,n,a,i,s){var l,c=e.style,u=e.vars,d=e.transform,p=e.transformKeys,m=e.transformOrigin;p.length=0;var f=!1,v=!1,h=!0;for(var g in t){var y=t[g];if(re(g))u[g]=y;else{var b=ie[g],x=ne(y,b);if(Z(g)){if(f=!0,d[g]=x,p.push(g),!h)continue;y!==(null!==(l=b.default)&&void 0!==l?l:0)&&(h=!1)}else if(Q(g))m[g]=x,v=!0;else if((null==o?void 0:o.isHydrated)&&(null==r?void 0:r.isHydrated)&&U[g]){var A=U[g].process(y,r,o),w=U[g].applyTo;if(w)for(var S=w.length,C=0;C<S;C++)c[w[C]]=A;else c[g]=A}else c[g]=x}}r&&o&&i&&s?(c.transform=i(r.deltaFinal,r.treeScale,f?d:void 0),a&&(c.transform=a(d,c.transform)),c.transformOrigin=s(r)):(f&&(c.transform=function(e,t,o,r){var n=e.transform,a=e.transformKeys,i=t.enableHardwareAcceleration,s=void 0===i||i,l=t.allowTransformNone,c=void 0===l||l,u="";a.sort(Y);for(var d=!1,p=a.length,m=0;m<p;m++){var f=a[m];u+=(oe[f]||f)+"("+n[f]+") ","z"===f&&(d=!0)}return!d&&s?u+="translateZ(0)":u=u.trim(),r?u=r(n,o?"":u):c&&o&&(u="none"),u}(e,n,h,a)),v&&(c.transformOrigin=function(e){var t=e.originX,o=void 0===t?"50%":t,r=e.originY,n=void 0===r?"50%":r,a=e.originZ;return o+" "+n+" "+(void 0===a?0:a)}(m)))}var le=function(){return{style:{},transform:{},transformKeys:[],transformOrigin:{},vars:{}}};function ce(e,t,o){for(var r in t)te(t[r])||ee(r,o)||(e[r]=t[r])}function ue(e,t,o){var a={},i=function(e,t,o){var a={};return ce(a,e.style||{},e),Object.assign(a,function(e,t,o){var a=e.transformTemplate;return n.useMemo((function(){var e=le();se(e,t,void 0,void 0,{enableHardwareAcceleration:!o},a);var n=e.vars,i=e.style;return r.__assign(r.__assign({},n),i)}),[t])}(e,t,o)),e.transformValues&&(a=e.transformValues(a)),a}(e,t,o);return Boolean(e.drag)&&(a.draggable=!1,i.userSelect=i.WebkitUserSelect=i.WebkitTouchCallout="none",i.touchAction=!0===e.drag?"none":"pan-"+("x"===e.drag?"y":"x")),a.style=i,a}var de=new Set(["initial","animate","exit","style","variants","transition","transformTemplate","transformValues","custom","inherit","layout","layoutId","_layoutResetTransform","onLayoutAnimationComplete","onViewportBoxUpdate","onLayoutMeasure","onBeforeLayoutMeasure","onAnimationStart","onAnimationComplete","onUpdate","onDragStart","onDrag","onDragEnd","onMeasureDragConstraints","onDirectionLock","onDragTransitionEnd","drag","dragControls","dragListener","dragConstraints","dragDirectionLock","_dragX","_dragY","dragElastic","dragMomentum","dragPropagation","dragTransition","whileDrag","onPan","onPanStart","onPanEnd","onPanSessionStart","onTap","onTapStart","onTapCancel","onHoverStart","onHoverEnd","whileFocus","whileTap","whileHover"]);function pe(e){return de.has(e)}var me=function(e){return!pe(e)};try{var fe=o("./node_modules/.pnpm/@emotion+is-prop-valid@0.8.8/node_modules/@emotion/is-prop-valid/dist/is-prop-valid.browser.esm.js").A;me=function(e){return e.startsWith("on")?!pe(e):fe(e)}}catch(e){}function ve(e,t,o){return"string"==typeof e?e:i.px.transform(t+o*e)}var he=function(e,t){return i.px.transform(e*t)},ge={offset:"stroke-dashoffset",array:"stroke-dasharray"},ye={offset:"strokeDashoffset",array:"strokeDasharray"};function be(e,t,o,n,a,i,s,l){var c=t.attrX,u=t.attrY,d=t.originX,p=t.originY,m=t.pathLength,f=t.pathSpacing,v=void 0===f?1:f,h=t.pathOffset,g=void 0===h?0:h;se(e,r.__rest(t,["attrX","attrY","originX","originY","pathLength","pathSpacing","pathOffset"]),o,n,a,i,s,l),e.attrs=e.style,e.style={};var y=e.attrs,b=e.style,x=e.dimensions,A=e.totalPathLength;y.transform&&(x&&(b.transform=y.transform),delete y.transform),x&&(void 0!==d||void 0!==p||b.transform)&&(b.transformOrigin=function(e,t,o){return ve(t,e.x,e.width)+" "+ve(o,e.y,e.height)}(x,void 0!==d?d:.5,void 0!==p?p:.5)),void 0!==c&&(y.x=c),void 0!==u&&(y.y=u),void 0!==A&&void 0!==m&&function(e,t,o,r,n,a){void 0===r&&(r=1),void 0===n&&(n=0),void 0===a&&(a=!0);var i=a?ge:ye;e[i.offset]=he(-n,t);var s=he(o,t),l=he(r,t);e[i.array]=s+" "+l}(y,A,m,v,g,!1)}var xe=function(){return r.__assign(r.__assign({},le()),{attrs:{}})};function Ae(e,t){var o=n.useMemo((function(){var o=xe();return be(o,t,void 0,void 0,{enableHardwareAcceleration:!1},e.transformTemplate),r.__assign(r.__assign({},o.attrs),{style:r.__assign({},o.style)})}),[t]);if(e.style){var a={};ce(a,e.style,e),o.style=r.__assign(r.__assign({},a),o.style)}return o}function we(e){return void 0===e&&(e=!1),function(t,o,a,i,s){var l=i.latestValues,c=(H(t)?Ae:ue)(o,l,s),u=function(e,t,o){var r={};for(var n in e)(me(n)||!0===o&&pe(n)||!t&&!pe(n))&&(r[n]=e[n]);return r}(o,"string"==typeof t,e),d=r.__assign(r.__assign(r.__assign({},u),c),{ref:a});return n.createElement(t,d)}}var Se=/([a-z])([A-Z])/g,Ce=function(e){return e.replace(Se,"$1-$2").toLowerCase()};function _e(e,t){var o=t.style,r=t.vars;for(var n in Object.assign(e.style,o),r)e.style.setProperty(n,r[n])}var ke=new Set(["baseFrequency","diffuseConstant","kernelMatrix","kernelUnitLength","keySplines","keyTimes","limitingConeAngle","markerHeight","markerWidth","numOctaves","targetX","targetY","surfaceScale","specularConstant","specularExponent","stdDeviation","tableValues","viewBox","gradientTransform"]);function Re(e,t){for(var o in _e(e,t),t.attrs)e.setAttribute(ke.has(o)?o:Ce(o),t.attrs[o])}function Pe(e){var t=e.style,o={};for(var r in t)(te(t[r])||ee(r,e))&&(o[r]=t[r]);return o}function Me(e){var t=Pe(e);for(var o in e)te(e[o])&&(t["x"===o||"y"===o?"attr"+o.toUpperCase():o]=e[o]);return t}function Ie(e){return"object"==typeof e&&"function"==typeof e.start}var je=function(e){return Array.isArray(e)},$e=function(e){return Boolean(e&&"object"==typeof e&&e.mix&&e.toValue)},Te=function(e){return je(e)?e[e.length-1]||0:e};function Le(e){var t=te(e)?e.get():e;return $e(t)?t.toValue():t}function Oe(e,t,o,r){var n=e.scrapeMotionValuesFromProps,a=e.createRenderState,i=e.onMount,s={latestValues:Be(t,o,r,n),renderState:a()};return i&&(s.mount=function(e){return i(t,e,s)}),s}var Ee=function(e){return function(t,o){var r=n.useContext(A),a=n.useContext(S);return o?Oe(e,t,r,a):C((function(){return Oe(e,t,r,a)}))}};function Be(e,t,o,n){var a={},i=!1===(null==o?void 0:o.initial),s=n(e);for(var l in s)a[l]=Le(s[l]);var c=e.initial,u=e.animate,d=N(e),p=z(e);t&&p&&!d&&!1!==e.inherit&&(null!=c||(c=t.initial),null!=u||(u=t.animate));var m=i||!1===c?u:c;return m&&"boolean"!=typeof m&&!Ie(m)&&(Array.isArray(m)?m:[m]).forEach((function(t){var o=E(e,t);if(o){var n=o.transitionEnd;o.transition;var i=r.__rest(o,["transitionEnd","transition"]);for(var s in i)a[s]=i[s];for(var s in n)a[s]=n[s]}})),a}var Ne,ze={useVisualState:Ee({scrapeMotionValuesFromProps:Me,createRenderState:xe,onMount:function(e,t,o){var r=o.renderState,n=o.latestValues;try{r.dimensions="function"==typeof t.getBBox?t.getBBox():t.getBoundingClientRect()}catch(e){r.dimensions={x:0,y:0,width:0,height:0}}"path"===t.tagName&&(r.totalPathLength=t.getTotalLength()),be(r,n,void 0,void 0,{enableHardwareAcceleration:!1},e.transformTemplate),Re(t,r)}})},De={useVisualState:Ee({scrapeMotionValuesFromProps:Pe,createRenderState:le})};function Fe(e,t,o,n){var a=t.forwardMotionProps,i=void 0!==a&&a,s=H(e)?ze:De;return r.__assign(r.__assign({},s),{preloadedFeatures:o,useRender:we(i),createVisualElement:n,Component:e})}function We(e,t,o,r){return e.addEventListener(t,o,r),function(){return e.removeEventListener(t,o,r)}}function Ve(e,t,o,r){n.useEffect((function(){var n=e.current;if(o&&n)return We(n,t,o,r)}),[e,t,o,r])}function He(e){return"undefined"!=typeof PointerEvent&&e instanceof PointerEvent?!("mouse"!==e.pointerType):e instanceof MouseEvent}function Ue(e){return!!e.touches}!function(e){e.Animate="animate",e.Hover="whileHover",e.Tap="whileTap",e.Drag="whileDrag",e.Focus="whileFocus",e.Exit="exit"}(Ne||(Ne={}));var qe={pageX:0,pageY:0};function Ge(e,t){void 0===t&&(t="page");var o=e.touches[0]||e.changedTouches[0]||qe;return{x:o[t+"X"],y:o[t+"Y"]}}function Xe(e,t){return void 0===t&&(t="page"),{x:e[t+"X"],y:e[t+"Y"]}}function Ye(e,t){return void 0===t&&(t="page"),{point:Ue(e)?Ge(e,t):Xe(e,t)}}var Ke=function(e,t){void 0===t&&(t=!1);var o,r=function(t){return e(t,Ye(t))};return t?(o=r,function(e){var t=e instanceof MouseEvent;(!t||t&&0===e.button)&&o(e)}):r},Ze=function(){return j&&null===window.onpointerdown},Je=function(){return j&&null===window.ontouchstart},Qe=function(){return j&&null===window.onmousedown},et={pointerdown:"mousedown",pointermove:"mousemove",pointerup:"mouseup",pointercancel:"mousecancel",pointerover:"mouseover",pointerout:"mouseout",pointerenter:"mouseenter",pointerleave:"mouseleave"},tt={pointerdown:"touchstart",pointermove:"touchmove",pointerup:"touchend",pointercancel:"touchcancel"};function ot(e){return Ze()?e:Je()?tt[e]:Qe()?et[e]:e}function rt(e,t,o,r){return We(e,ot(t),Ke(o,"pointerdown"===t),r)}function nt(e,t,o,r){return Ve(e,ot(t),o&&Ke(o,"pointerdown"===t),r)}function at(e){var t=null;return function(){return null===t&&(t=e,function(){t=null})}}var it=at("dragHorizontal"),st=at("dragVertical");function lt(e){var t=!1;if("y"===e)t=st();else if("x"===e)t=it();else{var o=it(),r=st();o&&r?t=function(){o(),r()}:(o&&o(),r&&r())}return t}function ct(){var e=lt(!0);return!e||(e(),!1)}function ut(e,t,o){return function(r,n){var a;He(r)&&!ct()&&(null==o||o(r,n),null===(a=e.animationState)||void 0===a||a.setActive(Ne.Hover,t))}}var dt=function(e,t){return!!t&&(e===t||dt(e,t.parentElement))};function pt(e){return n.useEffect((function(){return function(){return e()}}),[])}var mt=function(e){return function(t){return e(t),null}},ft={tap:mt((function(e){var t=e.onTap,o=e.onTapStart,r=e.onTapCancel,a=e.whileTap,i=e.visualElement,l=t||o||r||a,c=n.useRef(!1),u=n.useRef(null);function d(){var e;null===(e=u.current)||void 0===e||e.call(u),u.current=null}function p(){var e;return d(),c.current=!1,null===(e=i.animationState)||void 0===e||e.setActive(Ne.Tap,!1),!ct()}function m(e,o){p()&&(dt(i.getInstance(),e.target)?null==t||t(e,o):null==r||r(e,o))}function f(e,t){p()&&(null==r||r(e,t))}nt(i,"pointerdown",l?function(e,t){var r;d(),c.current||(c.current=!0,u.current=s.pipe(rt(window,"pointerup",m),rt(window,"pointercancel",f)),null==o||o(e,t),null===(r=i.animationState)||void 0===r||r.setActive(Ne.Tap,!0))}:void 0),pt(d)})),focus:mt((function(e){var t=e.whileFocus,o=e.visualElement;Ve(o,"focus",t?function(){var e;null===(e=o.animationState)||void 0===e||e.setActive(Ne.Focus,!0)}:void 0),Ve(o,"blur",t?function(){var e;null===(e=o.animationState)||void 0===e||e.setActive(Ne.Focus,!1)}:void 0)})),hover:mt((function(e){var t=e.onHoverStart,o=e.onHoverEnd,r=e.whileHover,n=e.visualElement;nt(n,"pointerenter",t||r?ut(n,!0,t):void 0),nt(n,"pointerleave",o||r?ut(n,!1,o):void 0)}))};function vt(e,t){if(!Array.isArray(t))return!1;var o=t.length;if(o!==e.length)return!1;for(var r=0;r<o;r++)if(t[r]!==e[r])return!1;return!0}var ht=function(e){return 1e3*e},gt={linear:s.linear,easeIn:s.easeIn,easeInOut:s.easeInOut,easeOut:s.easeOut,circIn:s.circIn,circInOut:s.circInOut,circOut:s.circOut,backIn:s.backIn,backInOut:s.backInOut,backOut:s.backOut,anticipate:s.anticipate,bounceIn:s.bounceIn,bounceInOut:s.bounceInOut,bounceOut:s.bounceOut},yt=function(e){if(Array.isArray(e)){a.invariant(4===e.length,"Cubic bezier arrays must contain four numerical values.");var t=r.__read(e,4),o=t[0],n=t[1],i=t[2],l=t[3];return s.cubicBezier(o,n,i,l)}return"string"==typeof e?(a.invariant(void 0!==gt[e],"Invalid easing type '"+e+"'"),gt[e]):e},bt=function(e){return Array.isArray(e)&&"number"!=typeof e[0]},xt=function(e,t){return!("zIndex"===e||"number"!=typeof t&&!Array.isArray(t)&&("string"!=typeof t||!i.complex.test(t)||t.startsWith("url(")))},At=function(){return{type:"spring",stiffness:500,damping:25,restDelta:.5,restSpeed:10}},wt=function(e){return{type:"spring",stiffness:550,damping:0===e?2*Math.sqrt(550):30,restDelta:.01,restSpeed:10}},St=function(){return{type:"keyframes",ease:"linear",duration:.3}},Ct=function(e){return{type:"keyframes",duration:.8,values:e}},_t={x:At,y:At,z:At,rotate:At,rotateX:At,rotateY:At,rotateZ:At,scaleX:wt,scaleY:wt,scale:wt,opacity:St,backgroundColor:St,color:St,default:wt},kt=function(e,t){var o;return o=je(t)?Ct:_t[e]||_t.default,r.__assign({to:t},o(t))},Rt=r.__assign(r.__assign({},ie),{color:i.color,backgroundColor:i.color,outlineColor:i.color,fill:i.color,stroke:i.color,borderColor:i.color,borderTopColor:i.color,borderRightColor:i.color,borderBottomColor:i.color,borderLeftColor:i.color,filter:i.filter,WebkitFilter:i.filter}),Pt=function(e){return Rt[e]};function Mt(e,t){var o,r=Pt(e);return r!==i.filter&&(r=i.complex),null===(o=r.getAnimatableNone)||void 0===o?void 0:o.call(r,t)}var It=!1;function jt(e){return 0===e||"string"==typeof e&&0===parseFloat(e)&&-1===e.indexOf(" ")}function $t(e){return"number"==typeof e?0:Mt("",e)}function Tt(e,t){return e[t]||e.default||e}function Lt(e,t,o,n){return void 0===n&&(n={}),t.start((function(i){var l,c,u=function(e,t,o,n,i){var l,c=Tt(n,e),u=null!==(l=c.from)&&void 0!==l?l:t.get(),d=xt(e,o);"none"===u&&d&&"string"==typeof o?u=Mt(e,o):jt(u)&&"string"==typeof o?u=$t(o):!Array.isArray(o)&&jt(o)&&"string"==typeof u&&(o=$t(u));var p=xt(e,u);return a.warning(p===d,"You are trying to animate "+e+' from "'+u+'" to "'+o+'". '+u+" is not an animatable value - to enable this animation set "+u+" to a value animatable to "+o+" via the `style` property."),p&&d&&!1!==c.type?function(){var n={from:u,to:o,velocity:t.getVelocity(),onComplete:i,onUpdate:function(e){return t.set(e)}};return"inertia"===c.type||"decay"===c.type?s.inertia(r.__assign(r.__assign({},n),c)):s.animate(r.__assign(r.__assign({},function(e,t,o){var n;return Array.isArray(t.to)&&(null!==(n=e.duration)&&void 0!==n||(e.duration=.8)),function(e){Array.isArray(e.to)&&null===e.to[0]&&(e.to=r.__spreadArray([],r.__read(e.to)),e.to[0]=e.from)}(t),function(e){e.when,e.delay,e.delayChildren,e.staggerChildren,e.staggerDirection,e.repeat,e.repeatType,e.repeatDelay,e.from;var t=r.__rest(e,["when","delay","delayChildren","staggerChildren","staggerDirection","repeat","repeatType","repeatDelay","from"]);return!!Object.keys(t).length}(e)||(e=r.__assign(r.__assign({},e),kt(o,t.to))),r.__assign(r.__assign({},t),function(e){var t=e.ease,o=e.times,n=e.yoyo,i=e.flip,s=e.loop,l=r.__rest(e,["ease","times","yoyo","flip","loop"]),c=r.__assign({},l);return o&&(c.offset=o),l.duration&&(c.duration=ht(l.duration)),l.repeatDelay&&(c.repeatDelay=ht(l.repeatDelay)),t&&(c.ease=bt(t)?t.map(yt):yt(t)),"tween"===l.type&&(c.type="keyframes"),(n||s||i)&&(a.warning(!It,"yoyo, loop and flip have been removed from the API. Replace with repeat and repeatType options."),It=!0,n?c.repeatType="reverse":s?c.repeatType="loop":i&&(c.repeatType="mirror"),c.repeat=s||n||i||l.repeat),"spring"!==l.type&&(c.type="keyframes"),c}(e))}(c,n,e)),{onUpdate:function(e){var t;n.onUpdate(e),null===(t=c.onUpdate)||void 0===t||t.call(c,e)},onComplete:function(){var e;n.onComplete(),null===(e=c.onComplete)||void 0===e||e.call(c)}}))}:function(){var e;return t.set(o),i(),null===(e=null==c?void 0:c.onComplete)||void 0===e||e.call(c),{stop:function(){}}}}(e,t,o,n,i),d=function(e,t){var o;return null!==(o=(Tt(e,t)||{}).delay)&&void 0!==o?o:0}(n,e),p=function(){return c=u()};return d?l=setTimeout(p,ht(d)):p(),function(){clearTimeout(l),null==c||c.stop()}}))}function Ot(e,t){-1===e.indexOf(t)&&e.push(t)}function Et(e,t){var o=e.indexOf(t);o>-1&&e.splice(o,1)}var Bt=function(){function e(){this.subscriptions=[]}return e.prototype.add=function(e){var t=this;return Ot(this.subscriptions,e),function(){return Et(t.subscriptions,e)}},e.prototype.notify=function(e,t,o){var r=this.subscriptions.length;if(r)if(1===r)this.subscriptions[0](e,t,o);else for(var n=0;n<r;n++){var a=this.subscriptions[n];a&&a(e,t,o)}},e.prototype.getSize=function(){return this.subscriptions.length},e.prototype.clear=function(){this.subscriptions.length=0},e}(),Nt=function(){function e(e){var t,o=this;this.timeDelta=0,this.lastUpdated=0,this.updateSubscribers=new Bt,this.velocityUpdateSubscribers=new Bt,this.renderSubscribers=new Bt,this.canTrackVelocity=!1,this.updateAndNotify=function(e,t){void 0===t&&(t=!0),o.prev=o.current,o.current=e;var r=l.getFrameData(),n=r.delta,a=r.timestamp;o.lastUpdated!==a&&(o.timeDelta=n,o.lastUpdated=a,m.default.postRender(o.scheduleVelocityCheck)),o.prev!==o.current&&o.updateSubscribers.notify(o.current),o.velocityUpdateSubscribers.getSize()&&o.velocityUpdateSubscribers.notify(o.getVelocity()),t&&o.renderSubscribers.notify(o.current)},this.scheduleVelocityCheck=function(){return m.default.postRender(o.velocityCheck)},this.velocityCheck=function(e){e.timestamp!==o.lastUpdated&&(o.prev=o.current,o.velocityUpdateSubscribers.notify(o.getVelocity()))},this.hasAnimated=!1,this.prev=this.current=e,this.canTrackVelocity=(t=this.current,!isNaN(parseFloat(t)))}return e.prototype.onChange=function(e){return this.updateSubscribers.add(e)},e.prototype.clearListeners=function(){this.updateSubscribers.clear()},e.prototype.onRenderRequest=function(e){return e(this.get()),this.renderSubscribers.add(e)},e.prototype.attach=function(e){this.passiveEffect=e},e.prototype.set=function(e,t){void 0===t&&(t=!0),t&&this.passiveEffect?this.passiveEffect(e,this.updateAndNotify):this.updateAndNotify(e,t)},e.prototype.get=function(){return this.current},e.prototype.getPrevious=function(){return this.prev},e.prototype.getVelocity=function(){return this.canTrackVelocity?s.velocityPerSecond(parseFloat(this.current)-parseFloat(this.prev),this.timeDelta):0},e.prototype.start=function(e){var t=this;return this.stop(),new Promise((function(o){t.hasAnimated=!0,t.stopAnimation=e(o)})).then((function(){return t.clearAnimation()}))},e.prototype.stop=function(){this.stopAnimation&&this.stopAnimation(),this.clearAnimation()},e.prototype.isAnimating=function(){return!!this.stopAnimation},e.prototype.clearAnimation=function(){this.stopAnimation=null},e.prototype.destroy=function(){this.updateSubscribers.clear(),this.renderSubscribers.clear(),this.stop()},e}();function zt(e){return new Nt(e)}var Dt=function(e){return function(t){return t.test(e)}},Ft=[i.number,i.px,i.percent,i.degrees,i.vw,i.vh,{test:function(e){return"auto"===e},parse:function(e){return e}}],Wt=function(e){return Ft.find(Dt(e))},Vt=r.__spreadArray(r.__spreadArray([],r.__read(Ft)),[i.color,i.complex]);function Ht(e,t,o){e.hasValue(t)?e.getValue(t).set(o):e.addValue(t,zt(o))}function Ut(e,t){var o=B(e,t),n=o?e.makeTargetAnimatable(o,!1):{},a=n.transitionEnd,i=void 0===a?{}:a;n.transition;var s=r.__rest(n,["transitionEnd","transition"]);for(var l in s=r.__assign(r.__assign({},s),i))Ht(e,l,Te(s[l]))}function qt(e,t){r.__spreadArray([],r.__read(t)).reverse().forEach((function(o){var r,n=e.getVariant(o);n&&Ut(e,n),null===(r=e.variantChildren)||void 0===r||r.forEach((function(e){qt(e,t)}))}))}function Gt(e,t,o){var r,n,a,s,l,c=Object.keys(t).filter((function(t){return!e.hasValue(t)})),u=c.length;if(u)for(var d=0;d<u;d++){var p=c[d],m=t[p],f=null;Array.isArray(m)&&(f=m[0]),null===f&&(f=null!==(n=null!==(r=o[p])&&void 0!==r?r:e.readValue(p))&&void 0!==n?n:t[p]),null!=f&&("string"==typeof f&&/^\-?\d*\.?\d+$/.test(f)?f=parseFloat(f):(l=f,!Vt.find(Dt(l))&&i.complex.test(m)&&(f=Mt(p,m))),e.addValue(p,zt(f)),null!==(a=(s=o)[p])&&void 0!==a||(s[p]=f),e.setBaseTarget(p,f))}}function Xt(e,t){if(t)return(t[e]||t.default||t).from}function Yt(e,t,o){var r,n,a={};for(var i in e)a[i]=null!==(r=Xt(i,t))&&void 0!==r?r:null===(n=o.getValue(i))||void 0===n?void 0:n.get();return a}function Kt(e,t,o){var r;if(void 0===o&&(o={}),e.notifyAnimationStart(),Array.isArray(t)){var n=t.map((function(t){return Zt(e,t,o)}));r=Promise.all(n)}else if("string"==typeof t)r=Zt(e,t,o);else{var a="function"==typeof t?B(e,t,o.custom):t;r=Jt(e,a,o)}return r.then((function(){return e.notifyAnimationComplete(t)}))}function Zt(e,t,o){var n;void 0===o&&(o={});var a=B(e,t,o.custom),i=(a||{}).transition,s=void 0===i?e.getDefaultTransition()||{}:i;o.transitionOverride&&(s=o.transitionOverride);var l=a?function(){return Jt(e,a,o)}:function(){return Promise.resolve()},c=(null===(n=e.variantChildren)||void 0===n?void 0:n.size)?function(n){void 0===n&&(n=0);var a=s.delayChildren,i=void 0===a?0:a,l=s.staggerChildren,c=s.staggerDirection;return function(e,t,o,n,a,i){void 0===o&&(o=0),void 0===n&&(n=0),void 0===a&&(a=1);var s=[],l=(e.variantChildren.size-1)*n,c=1===a?function(e){return void 0===e&&(e=0),e*n}:function(e){return void 0===e&&(e=0),l-e*n};return Array.from(e.variantChildren).sort(Qt).forEach((function(e,n){s.push(Zt(e,t,r.__assign(r.__assign({},i),{delay:o+c(n)})).then((function(){return e.notifyAnimationComplete(t)})))})),Promise.all(s)}(e,t,i+n,l,c,o)}:function(){return Promise.resolve()},u=s.when;if(u){var d=r.__read("beforeChildren"===u?[l,c]:[c,l],2),p=d[0],m=d[1];return p().then(m)}return Promise.all([l(),c(o.delay)])}function Jt(e,t,o){var n,a=void 0===o?{}:o,i=a.delay,s=void 0===i?0:i,l=a.transitionOverride,c=a.type,u=e.makeTargetAnimatable(t),d=u.transition,p=void 0===d?e.getDefaultTransition():d,m=u.transitionEnd,f=r.__rest(u,["transition","transitionEnd"]);l&&(p=l);var v=[],h=c&&(null===(n=e.animationState)||void 0===n?void 0:n.getState()[c]);for(var g in f){var y=e.getValue(g),b=f[g];if(!(!y||void 0===b||h&&eo(h,g))){var x=Lt(g,y,b,r.__assign({delay:s},p));v.push(x)}}return Promise.all(v).then((function(){m&&Ut(e,m)}))}function Qt(e,t){return e.sortNodePosition(t)}function eo(e,t){var o=e.protectedKeys,r=e.needsAnimating,n=o.hasOwnProperty(t)&&!0!==r[t];return r[t]=!1,n}var to=[Ne.Animate,Ne.Hover,Ne.Tap,Ne.Drag,Ne.Focus,Ne.Exit],oo=r.__spreadArray([],r.__read(to)).reverse(),ro=to.length;function no(e){return void 0===e&&(e=!1),{isActive:e,protectedKeys:{},needsAnimating:{},prevResolvedValues:{}}}var ao={animation:mt((function(e){var t=e.visualElement,o=e.animate;t.animationState||(t.animationState=function(e){var t,o=function(e){return function(t){return Promise.all(t.map((function(t){var o=t.animation,r=t.options;return Kt(e,o,r)})))}}(e),n=((t={})[Ne.Animate]=no(!0),t[Ne.Hover]=no(),t[Ne.Tap]=no(),t[Ne.Drag]=no(),t[Ne.Focus]=no(),t[Ne.Exit]=no(),t),a={},i=!0,s=function(t,o){var n=B(e,o);if(n){n.transition;var a=n.transitionEnd,i=r.__rest(n,["transition","transitionEnd"]);t=r.__assign(r.__assign(r.__assign({},t),i),a)}return t};function l(t,l){for(var c,u=e.getProps(),d=e.getVariantContext(!0)||{},p=[],m=new Set,f={},v=1/0,h=function(o){var a=oo[o],h=n[a],g=null!==(c=u[a])&&void 0!==c?c:d[a],y=O(g),b=a===l?h.isActive:null;!1===b&&(v=o);var x=g===d[a]&&g!==u[a]&&y;if(x&&i&&e.manuallyAnimateOnMount&&(x=!1),h.protectedKeys=r.__assign({},f),!h.isActive&&null===b||!g&&!h.prevProp||Ie(g)||"boolean"==typeof g)return"continue";var A=function(e,t){return"string"==typeof t?t!==e:!!L(t)&&!vt(t,e)}(h.prevProp,g)||a===l&&h.isActive&&!x&&y||o>v&&y,w=Array.isArray(g)?g:[g],S=w.reduce(s,{});!1===b&&(S={});var C=h.prevResolvedValues,_=void 0===C?{}:C,k=r.__assign(r.__assign({},_),S),R=function(e){A=!0,m.delete(e),h.needsAnimating[e]=!0};for(var P in k){var M=S[P],I=_[P];f.hasOwnProperty(P)||(M!==I?je(M)&&je(I)?vt(M,I)?h.protectedKeys[P]=!0:R(P):void 0!==M?R(P):m.add(P):void 0!==M&&m.has(P)?R(P):h.protectedKeys[P]=!0)}h.prevProp=g,h.prevResolvedValues=S,h.isActive&&(f=r.__assign(r.__assign({},f),S)),i&&e.blockInitialAnimation&&(A=!1),A&&!x&&p.push.apply(p,r.__spreadArray([],r.__read(w.map((function(e){return{animation:e,options:r.__assign({type:a},t)}})))))},g=0;g<ro;g++)h(g);if(a=r.__assign({},f),m.size){var y={};m.forEach((function(t){var o=e.getBaseTarget(t);void 0!==o&&(y[t]=o)})),p.push({animation:y})}var b=Boolean(p.length);return i&&!1===u.initial&&!e.manuallyAnimateOnMount&&(b=!1),i=!1,b?o(p):Promise.resolve()}return{isAnimated:function(e){return void 0!==a[e]},animateChanges:l,setActive:function(t,o,r){var a;return n[t].isActive===o?Promise.resolve():(null===(a=e.variantChildren)||void 0===a||a.forEach((function(e){var r;return null===(r=e.animationState)||void 0===r?void 0:r.setActive(t,o)})),n[t].isActive=o,l(r,t))},setAnimateFunction:function(t){o=t(e)},getState:function(){return n}}}(t)),Ie(o)&&n.useEffect((function(){return o.subscribe(t)}),[o])})),exit:mt((function(e){var t=e.custom,o=e.visualElement,a=r.__read(_(),2),i=a[0],s=a[1],l=n.useContext(S);n.useEffect((function(){var e,r,n=null===(e=o.animationState)||void 0===e?void 0:e.setActive(Ne.Exit,!i,{custom:null!==(r=null==l?void 0:l.custom)&&void 0!==r?r:t});!i&&(null==n||n.then(s))}),[i])}))},io=function(){function e(e,t,o){var n=this,a=(void 0===o?{}:o).transformPagePoint;if(this.startEvent=null,this.lastMoveEvent=null,this.lastMoveEventInfo=null,this.handlers={},this.updatePoint=function(){if(n.lastMoveEvent&&n.lastMoveEventInfo){var e=co(n.lastMoveEventInfo,n.history),t=null!==n.startEvent,o=s.distance(e.offset,{x:0,y:0})>=3;if(t||o){var a=e.point,i=l.getFrameData().timestamp;n.history.push(r.__assign(r.__assign({},a),{timestamp:i}));var c=n.handlers,u=c.onStart,d=c.onMove;t||(u&&u(n.lastMoveEvent,e),n.startEvent=n.lastMoveEvent),d&&d(n.lastMoveEvent,e)}}},this.handlePointerMove=function(e,t){n.lastMoveEvent=e,n.lastMoveEventInfo=so(t,n.transformPagePoint),He(e)&&0===e.buttons?n.handlePointerUp(e,t):m.default.update(n.updatePoint,!0)},this.handlePointerUp=function(e,t){n.end();var o=n.handlers,r=o.onEnd,a=o.onSessionEnd,i=co(so(t,n.transformPagePoint),n.history);n.startEvent&&r&&r(e,i),a&&a(e,i)},!(Ue(e)&&e.touches.length>1)){this.handlers=t,this.transformPagePoint=a;var i=so(Ye(e),this.transformPagePoint),c=i.point,u=l.getFrameData().timestamp;this.history=[r.__assign(r.__assign({},c),{timestamp:u})];var d=t.onSessionStart;d&&d(e,co(i,this.history)),this.removeListeners=s.pipe(rt(window,"pointermove",this.handlePointerMove),rt(window,"pointerup",this.handlePointerUp),rt(window,"pointercancel",this.handlePointerUp))}}return e.prototype.updateHandlers=function(e){this.handlers=e},e.prototype.end=function(){this.removeListeners&&this.removeListeners(),l.cancelSync.update(this.updatePoint)},e}();function so(e,t){return t?{point:t(e.point)}:e}function lo(e,t){return{x:e.x-t.x,y:e.y-t.y}}function co(e,t){var o=e.point;return{point:o,delta:lo(o,po(t)),offset:lo(o,uo(t)),velocity:mo(t,.1)}}function uo(e){return e[0]}function po(e){return e[e.length-1]}function mo(e,t){if(e.length<2)return{x:0,y:0};for(var o=e.length-1,r=null,n=po(e);o>=0&&(r=e[o],!(n.timestamp-r.timestamp>ht(t)));)o--;if(!r)return{x:0,y:0};var a=(n.timestamp-r.timestamp)/1e3;if(0===a)return{x:0,y:0};var i={x:(n.x-r.x)/a,y:(n.y-r.y)/a};return i.x===1/0&&(i.x=0),i.y===1/0&&(i.y=0),i}function fo(e){return e}function vo(e){var t=e.top;return{x:{min:e.left,max:e.right},y:{min:t,max:e.bottom}}}var ho={translate:0,scale:1,origin:0,originPoint:0};function go(){return{x:r.__assign({},ho),y:r.__assign({},ho)}}function yo(e){return[e("x"),e("y")]}function bo(e,t,o){return void 0===t&&(t=0),void 0===o&&(o=.01),s.distance(e,t)<o}function xo(e){return e.max-e.min}function Ao(e,t,o,r){void 0===r&&(r=.5),e.origin=r,e.originPoint=s.mix(t.min,t.max,e.origin),e.scale=xo(o)/xo(t),bo(e.scale,1,1e-4)&&(e.scale=1),e.translate=s.mix(o.min,o.max,e.origin)-e.originPoint,bo(e.translate)&&(e.translate=0)}function wo(e,t,o,r){Ao(e.x,t.x,o.x,So(r.originX)),Ao(e.y,t.y,o.y,So(r.originY))}function So(e){return"number"==typeof e?e:.5}function Co(e,t,o){e.min=o.min+t.min,e.max=e.min+xo(t)}function _o(e,t,o){var r=t.min,n=t.max;return void 0!==r&&e<r?e=o?s.mix(r,e,o.min):Math.max(e,r):void 0!==n&&e>n&&(e=o?s.mix(n,e,o.max):Math.min(e,n)),e}function ko(e,t,o){return{min:void 0!==t?e.min+t:void 0,max:void 0!==o?e.max+o-(e.max-e.min):void 0}}function Ro(e,t){var o,n=t.min-e.min,a=t.max-e.max;return t.max-t.min<e.max-e.min&&(n=(o=r.__read([a,n],2))[0],a=o[1]),{min:e.min+n,max:e.min+a}}function Po(e,t,o){return{min:Mo(e,t),max:Mo(e,o)}}function Mo(e,t){var o;return"number"==typeof e?e:null!==(o=e[t])&&void 0!==o?o:0}function Io(e,t){return vo(function(e,t){var o=e.top,r=e.left,n=e.bottom,a=e.right;void 0===t&&(t=fo);var i=t({x:r,y:o}),s=t({x:a,y:n});return{top:i.y,left:i.x,bottom:s.y,right:s.x}}(e.getBoundingClientRect(),t))}var jo=function(e,t){return e.depth-t.depth};function $o(e){return e.projection.isEnabled||e.shouldResetTransform()}function To(e,t){void 0===t&&(t=[]);var o=e.parent;return o&&To(o,t),$o(e)&&t.push(e),t}function Lo(e){if(!e.shouldResetTransform()){var t,o=e.getLayoutState();e.notifyBeforeLayoutMeasure(o.layout),o.isHydrated=!0,o.layout=e.measureViewportBox(),o.layoutCorrected=(t=o.layout,{x:r.__assign({},t.x),y:r.__assign({},t.y)}),e.notifyLayoutMeasure(o.layout,e.prevViewportBox||o.layout),m.default.update((function(){return e.rebaseProjectionTarget()}))}}function Oo(e){e.shouldResetTransform()||(e.prevViewportBox=e.measureViewportBox(!1),e.rebaseProjectionTarget(!1,e.prevViewportBox))}function Eo(e,t){return{min:t.min-e.min,max:t.max-e.min}}function Bo(e,t){return{x:Eo(e.x,t.x),y:Eo(e.y,t.y)}}function No(e){var t=e.getProps(),o=t.drag,r=t._dragX;return o&&!r}function zo(e,t){e.min=t.min,e.max=t.max}function Do(e,t,o){return o+t*(e-o)}function Fo(e,t,o,r,n){return void 0!==n&&(e=Do(e,n,r)),Do(e,o,r)+t}function Wo(e,t,o,r,n){void 0===t&&(t=0),void 0===o&&(o=1),e.min=Fo(e.min,t,o,r,n),e.max=Fo(e.max,t,o,r,n)}function Vo(e,t){var o=t.x,r=t.y;Wo(e.x,o.translate,o.scale,o.originPoint),Wo(e.y,r.translate,r.scale,r.originPoint)}function Ho(e,t,o,n){var a=r.__read(n,3),i=a[0],l=a[1],c=a[2];e.min=t.min,e.max=t.max;var u=void 0!==o[c]?o[c]:.5,d=s.mix(t.min,t.max,u);Wo(e,o[i],o[l],d,o.scale)}var Uo=["x","scaleX","originX"],qo=["y","scaleY","originY"];function Go(e,t,o){Ho(e.x,t.x,o,Uo),Ho(e.y,t.y,o,qo)}function Xo(e,t,o,r,n){return e=Do(e-=t,1/o,r),void 0!==n&&(e=Do(e,1/n,r)),e}function Yo(e,t,o){var n=r.__read(o,3),a=n[0],i=n[1],l=n[2];!function(e,t,o,r,n){void 0===t&&(t=0),void 0===o&&(o=1),void 0===r&&(r=.5);var a=s.mix(e.min,e.max,r)-t;e.min=Xo(e.min,t,o,a,n),e.max=Xo(e.max,t,o,a,n)}(e,t[a],t[i],t[l],t.scale)}function Ko(e,t){Yo(e.x,t,Uo),Yo(e.y,t,qo)}var Zo=new Set;function Jo(e,t,o){e[o]||(e[o]=[]),e[o].push(t)}function Qo(e){return Zo.add(e),function(){return Zo.delete(e)}}function er(){if(Zo.size){var e=0,t=[[]],o=[],r=function(o){return Jo(t,o,e)},n=function(t){Jo(o,t,e),e++};Zo.forEach((function(t){t(r,n),e=0})),Zo.clear();for(var a=o.length,i=0;i<=a;i++)t[i]&&t[i].forEach(or),o[i]&&o[i].forEach(or)}}var tr,or=function(e){return e()},rr=new WeakMap,nr=function(){function e(e){var t=e.visualElement;this.isDragging=!1,this.currentDirection=null,this.constraints=!1,this.elastic={x:{min:0,max:1},y:{min:0,max:1}},this.props={},this.hasMutatedConstraints=!1,this.cursorProgress={x:.5,y:.5},this.originPoint={},this.openGlobalLock=null,this.panSession=null,this.visualElement=t,this.visualElement.enableLayoutProjection(),rr.set(t,this)}return e.prototype.start=function(e,t){var o=this,n=void 0===t?{}:t,a=n.snapToCursor,i=void 0!==a&&a,c=n.cursorProgress,u=this.props.transformPagePoint;this.panSession=new io(e,{onSessionStart:function(e){var t;o.stopMotion();var n=function(e){return Ye(e,"client")}(e).point;null===(t=o.cancelLayout)||void 0===t||t.call(o),o.cancelLayout=Qo((function(e,t){var a=To(o.visualElement),u=function(e){var t=[],o=function(e){$o(e)&&t.push(e),e.children.forEach(o)};return e.children.forEach(o),t.sort(jo)}(o.visualElement),d=r.__spreadArray(r.__spreadArray([],r.__read(a)),r.__read(u)),p=!1;o.isLayoutDrag()&&o.visualElement.lockProjectionTarget(),t((function(){d.forEach((function(e){return e.resetTransform()}))})),e((function(){Lo(o.visualElement),u.forEach(Lo)})),t((function(){d.forEach((function(e){return e.restoreTransform()})),i&&(p=o.snapToCursor(n))})),e((function(){Boolean(o.getAxisMotionValue("x")&&!o.isExternalDrag())||o.visualElement.rebaseProjectionTarget(!0,o.visualElement.measureViewportBox(!1)),o.visualElement.scheduleUpdateLayoutProjection();var e=o.visualElement.projection;yo((function(t){if(!p){var r=e.target[t],a=r.min,i=r.max;o.cursorProgress[t]=c?c[t]:s.progress(a,i,n[t])}var l=o.getAxisMotionValue(t);l&&(o.originPoint[t]=l.get())}))})),t((function(){l.flushSync.update(),l.flushSync.preRender(),l.flushSync.render(),l.flushSync.postRender()})),e((function(){return o.resolveDragConstraints()}))}))},onStart:function(e,t){var r,n,a,i=o.props,s=i.drag,l=i.dragPropagation;(!s||l||(o.openGlobalLock&&o.openGlobalLock(),o.openGlobalLock=lt(s),o.openGlobalLock))&&(er(),o.isDragging=!0,o.currentDirection=null,null===(n=(r=o.props).onDragStart)||void 0===n||n.call(r,e,t),null===(a=o.visualElement.animationState)||void 0===a||a.setActive(Ne.Drag,!0))},onMove:function(e,t){var r,n,a,i,s=o.props,l=s.dragPropagation,c=s.dragDirectionLock;if(l||o.openGlobalLock){var u=t.offset;if(c&&null===o.currentDirection)return o.currentDirection=function(e,t){void 0===t&&(t=10);var o=null;return Math.abs(e.y)>t?o="y":Math.abs(e.x)>t&&(o="x"),o}(u),void(null!==o.currentDirection&&(null===(n=(r=o.props).onDirectionLock)||void 0===n||n.call(r,o.currentDirection)));o.updateAxis("x",t.point,u),o.updateAxis("y",t.point,u),null===(i=(a=o.props).onDrag)||void 0===i||i.call(a,e,t),tr=e}},onSessionEnd:function(e,t){return o.stop(e,t)}},{transformPagePoint:u})},e.prototype.resolveDragConstraints=function(){var e=this,t=this.props,o=t.dragConstraints,r=t.dragElastic,n=this.visualElement.getLayoutState().layoutCorrected;this.constraints=!!o&&(T(o)?this.resolveRefConstraints(n,o):function(e,t){var o=t.top,r=t.left,n=t.bottom,a=t.right;return{x:ko(e.x,r,a),y:ko(e.y,o,n)}}(n,o)),this.elastic=function(e){return!1===e?e=0:!0===e&&(e=.35),{x:Po(e,"left","right"),y:Po(e,"top","bottom")}}(r),this.constraints&&!this.hasMutatedConstraints&&yo((function(t){e.getAxisMotionValue(t)&&(e.constraints[t]=function(e,t){var o={};return void 0!==t.min&&(o.min=t.min-e.min),void 0!==t.max&&(o.max=t.max-e.min),o}(n[t],e.constraints[t]))}))},e.prototype.resolveRefConstraints=function(e,t){var o=this.props,r=o.onMeasureDragConstraints,n=o.transformPagePoint,i=t.current;a.invariant(null!==i,"If `dragConstraints` is set as a React ref, that ref must be passed to another component's `ref` prop."),this.constraintsBox=Io(i,n);var s=function(e,t){return{x:Ro(e.x,t.x),y:Ro(e.y,t.y)}}(e,this.constraintsBox);if(r){var l=r(function(e){var t=e.x,o=e.y;return{top:o.min,bottom:o.max,left:t.min,right:t.max}}(s));this.hasMutatedConstraints=!!l,l&&(s=vo(l))}return s},e.prototype.cancelDrag=function(){var e,t;this.visualElement.unlockProjectionTarget(),null===(e=this.cancelLayout)||void 0===e||e.call(this),this.isDragging=!1,this.panSession&&this.panSession.end(),this.panSession=null,!this.props.dragPropagation&&this.openGlobalLock&&(this.openGlobalLock(),this.openGlobalLock=null),null===(t=this.visualElement.animationState)||void 0===t||t.setActive(Ne.Drag,!1)},e.prototype.stop=function(e,t){var o,r,n;null===(o=this.panSession)||void 0===o||o.end(),this.panSession=null;var a=this.isDragging;if(this.cancelDrag(),a){var i=t.velocity;this.animateDragEnd(i),null===(n=(r=this.props).onDragEnd)||void 0===n||n.call(r,e,t)}},e.prototype.snapToCursor=function(e){var t=this;return yo((function(o){if(ar(o,t.props.drag,t.currentDirection)){var r=t.getAxisMotionValue(o);if(!r)return t.cursorProgress[o]=.5,!0;var n=t.visualElement.getLayoutState().layout,a=n[o].max-n[o].min,i=n[o].min+a/2,s=e[o]-i;t.originPoint[o]=e[o],r.set(s)}})).includes(!0)},e.prototype.updateAxis=function(e,t,o){if(ar(e,this.props.drag,this.currentDirection))return this.getAxisMotionValue(e)?this.updateAxisMotionValue(e,o):this.updateVisualElementAxis(e,t)},e.prototype.updateAxisMotionValue=function(e,t){var o=this.getAxisMotionValue(e);if(t&&o){var r=this.originPoint[e]+t[e],n=this.constraints?_o(r,this.constraints[e],this.elastic[e]):r;o.set(n)}},e.prototype.updateVisualElementAxis=function(e,t){var o,r=this.visualElement.getLayoutState().layout[e],n=r.max-r.min,a=this.cursorProgress[e],i=function(e,t,o,r,n){var a=e-t*o;return r?_o(a,r,n):a}(t[e],n,a,null===(o=this.constraints)||void 0===o?void 0:o[e],this.elastic[e]);this.visualElement.setProjectionTargetAxis(e,i,i+n)},e.prototype.setProps=function(e){var t=e.drag,o=void 0!==t&&t,n=e.dragDirectionLock,a=void 0!==n&&n,i=e.dragPropagation,s=void 0!==i&&i,l=e.dragConstraints,c=void 0!==l&&l,u=e.dragElastic,d=void 0===u?.35:u,p=e.dragMomentum,m=void 0===p||p,f=r.__rest(e,["drag","dragDirectionLock","dragPropagation","dragConstraints","dragElastic","dragMomentum"]);this.props=r.__assign({drag:o,dragDirectionLock:a,dragPropagation:s,dragConstraints:c,dragElastic:d,dragMomentum:m},f)},e.prototype.getAxisMotionValue=function(e){var t=this.props,o=t.layout,r=t.layoutId,n="_drag"+e.toUpperCase();return this.props[n]?this.props[n]:o||void 0!==r?void 0:this.visualElement.getValue(e,0)},e.prototype.isLayoutDrag=function(){return!this.getAxisMotionValue("x")},e.prototype.isExternalDrag=function(){var e=this.props,t=e._dragX,o=e._dragY;return t||o},e.prototype.animateDragEnd=function(e){var t=this,o=this.props,n=o.drag,a=o.dragMomentum,i=o.dragElastic,s=o.dragTransition,l=function(e,t){void 0===t&&(t=!0);var o,r=e.getProjectionParent();return!!r&&(t?Ko(o=Bo(r.projection.target,e.projection.target),r.getLatestValues()):o=Bo(r.getLayoutState().layout,e.getLayoutState().layout),yo((function(t){return e.setProjectionTargetAxis(t,o[t].min,o[t].max,!0)})),!0)}(this.visualElement,this.isLayoutDrag()&&!this.isExternalDrag()),c=this.constraints||{};if(l&&Object.keys(c).length&&this.isLayoutDrag()){var u=this.visualElement.getProjectionParent();if(u){var d=Bo(u.projection.targetFinal,c);yo((function(e){var t=d[e],o=t.min,r=t.max;c[e]={min:isNaN(o)?void 0:o,max:isNaN(r)?void 0:r}}))}}var p=yo((function(o){var u;if(ar(o,n,t.currentDirection)){var d=null!==(u=null==c?void 0:c[o])&&void 0!==u?u:{},p=i?200:1e6,m=i?40:1e7,f=r.__assign(r.__assign({type:"inertia",velocity:a?e[o]:0,bounceStiffness:p,bounceDamping:m,timeConstant:750,restDelta:1,restSpeed:10},s),d);return t.getAxisMotionValue(o)?t.startAxisValueAnimation(o,f):t.visualElement.startLayoutAnimation(o,f,l)}}));return Promise.all(p).then((function(){var e,o;null===(o=(e=t.props).onDragTransitionEnd)||void 0===o||o.call(e)}))},e.prototype.stopMotion=function(){var e=this;yo((function(t){var o=e.getAxisMotionValue(t);o?o.stop():e.visualElement.stopLayoutAnimation()}))},e.prototype.startAxisValueAnimation=function(e,t){var o=this.getAxisMotionValue(e);if(o){var r=o.get();return o.set(r),o.set(r),Lt(e,o,0,t)}},e.prototype.scalePoint=function(){var e=this,t=this.props,o=t.drag;if(T(t.dragConstraints)&&this.constraintsBox){this.stopMotion();var r={x:0,y:0};yo((function(t){var o,n,a,i,l,c;r[t]=(o=e.visualElement.projection.target[t],n=e.constraintsBox[t],i=.5,l=xo(o),(c=xo(n))>l?i=s.progress(n.min,n.max-l,o.min):l>c&&(i=s.progress(o.min,o.max-c,n.min)),a=i,s.clamp(0,1,a))})),this.updateConstraints((function(){yo((function(t){if(ar(t,o,null)){var n=function(e,t,o){var r=e.max-e.min,n=s.mix(t.min,t.max-r,o);return{min:n,max:n+r}}(e.visualElement.projection.target[t],e.constraintsBox[t],r[t]),a=n.min,i=n.max;e.visualElement.setProjectionTargetAxis(t,a,i)}}))})),setTimeout(er,1)}},e.prototype.updateConstraints=function(e){var t=this;this.cancelLayout=Qo((function(o,r){var n=To(t.visualElement);r((function(){return n.forEach((function(e){return e.resetTransform()}))})),o((function(){return Lo(t.visualElement)})),r((function(){return n.forEach((function(e){return e.restoreTransform()}))})),o((function(){t.resolveDragConstraints()})),e&&r(e)}))},e.prototype.mount=function(e){var t=this,o=rt(e.getInstance(),"pointerdown",(function(e){var o=t.props,r=o.drag,n=o.dragListener;r&&(void 0===n||n)&&t.start(e)})),r=We(window,"resize",(function(){t.scalePoint()})),n=e.onLayoutUpdate((function(){t.isDragging&&t.resolveDragConstraints()})),a=e.prevDragCursor;return a&&this.start(tr,{cursorProgress:a}),function(){null==o||o(),null==r||r(),null==n||n(),t.cancelDrag()}},e}();function ar(e,t,o){return!(!0!==t&&t!==e||null!==o&&o!==e)}var ir,sr,lr={pan:mt((function(e){var t=e.onPan,o=e.onPanStart,r=e.onPanEnd,a=e.onPanSessionStart,i=e.visualElement,s=t||o||r||a,l=n.useRef(null),c=n.useContext(x).transformPagePoint,u={onSessionStart:a,onStart:o,onMove:t,onEnd:function(e,t){l.current=null,r&&r(e,t)}};n.useEffect((function(){null!==l.current&&l.current.updateHandlers(u)})),nt(i,"pointerdown",s&&function(e){l.current=new io(e,u,{transformPagePoint:c})}),pt((function(){return l.current&&l.current.end()}))})),drag:mt((function(e){var t=e.dragControls,o=e.visualElement,a=n.useContext(x).transformPagePoint,i=C((function(){return new nr({visualElement:o})}));i.setProps(r.__assign(r.__assign({},e),{transformPagePoint:a})),n.useEffect((function(){return t&&t.subscribe(i)}),[i]),n.useEffect((function(){return i.mount(o)}),[])}))};function cr(e){return"string"==typeof e&&e.startsWith("var(--")}!function(e){e[e.Entering=0]="Entering",e[e.Present=1]="Present",e[e.Exiting=2]="Exiting"}(ir||(ir={})),t.VisibilityAction=void 0,(sr=t.VisibilityAction||(t.VisibilityAction={}))[sr.Hide=0]="Hide",sr[sr.Show=1]="Show";var ur=/var\((--[a-zA-Z0-9-_]+),? ?([a-zA-Z0-9 ()%#.,-]+)?\)/;function dr(e,t,o){void 0===o&&(o=1),a.invariant(o<=4,'Max CSS variable fallback depth detected in property "'+e+'". This may indicate a circular fallback dependency.');var n=r.__read(function(e){var t=ur.exec(e);if(!t)return[,];var o=r.__read(t,3);return[o[1],o[2]]}(e),2),i=n[0],s=n[1];if(i){var l=window.getComputedStyle(t).getPropertyValue(i);return l?l.trim():cr(s)?dr(s,t,o+1):s}}function pr(e,t){return e/(t.max-t.min)*100}var mr="_$css",fr={process:function(e,t,o){var r=o.target;if("string"==typeof e){if(!i.px.test(e))return e;e=parseFloat(e)}return pr(e,r.x)+"% "+pr(e,r.y)+"%"}},vr={borderRadius:r.__assign(r.__assign({},fr),{applyTo:["borderTopLeftRadius","borderTopRightRadius","borderBottomLeftRadius","borderBottomRightRadius"]}),borderTopLeftRadius:fr,borderTopRightRadius:fr,borderBottomLeftRadius:fr,borderBottomRightRadius:fr,boxShadow:{process:function(e,t){var o=t.delta,r=t.treeScale,n=e,a=e.includes("var("),l=[];a&&(e=e.replace(ur,(function(e){return l.push(e),mr})));var c=i.complex.parse(e);if(c.length>5)return n;var u=i.complex.createTransformer(e),d="number"!=typeof c[0]?1:0,p=o.x.scale*r.x,m=o.y.scale*r.y;c[0+d]/=p,c[1+d]/=m;var f=s.mix(p,m,.5);"number"==typeof c[2+d]&&(c[2+d]/=f),"number"==typeof c[3+d]&&(c[3+d]/=f);var v=u(c);if(a){var h=0;v=v.replace(mr,(function(){var e=l[h];return h++,e}))}return v}}},hr=function(e){function o(){var o=null!==e&&e.apply(this,arguments)||this;return o.frameTarget={x:{min:0,max:1},y:{min:0,max:1}},o.currentAnimationTarget={x:{min:0,max:1},y:{min:0,max:1}},o.isAnimating={x:!1,y:!1},o.stopAxisAnimation={x:void 0,y:void 0},o.isAnimatingTree=!1,o.animate=function(e,n,a){void 0===a&&(a={});var i=a.originBox,s=a.targetBox,l=a.visibilityAction,c=a.shouldStackAnimate,u=a.onComplete,d=a.prevParent,p=r.__rest(a,["originBox","targetBox","visibilityAction","shouldStackAnimate","onComplete","prevParent"]),m=o.props,f=m.visualElement,v=m.layout;if(!1===c)return o.isAnimatingTree=!1,o.safeToRemove();if(!o.isAnimatingTree||!0===c){c&&(o.isAnimatingTree=!0),n=i||n,e=s||e;var h,g,y,b=!1,x=f.getProjectionParent();if(x){var A=x.prevViewportBox,w=x.getLayoutState().layout;d&&(s&&(w=d.getLayoutState().layout),i&&(g=x,(h=d).getLayoutId()===(y=g.getLayoutId())&&(void 0!==y||h===g))&&d.prevViewportBox&&(A=d.prevViewportBox)),A&&function(e,t,o){return e||!e&&!(t||o)}(d,i,s)&&(b=!0,n=Bo(A,n),e=Bo(w,e))}var S,C,_=(C=e,!(yr(S=n)||yr(C)||br(S.x,C.x)&&br(S.y,C.y))),k=yo((function(a){var i,s;if("position"===v){var c=e[a].max-e[a].min;n[a].max=n[a].min+c}if(!f.projection.isTargetLocked)return void 0===l?_?o.animateAxis(a,e[a],n[a],r.__assign(r.__assign({},p),{isRelative:b})):(null===(s=(i=o.stopAxisAnimation)[a])||void 0===s||s.call(i),f.setProjectionTargetAxis(a,e[a].min,e[a].max,b)):void f.setVisibility(l===t.VisibilityAction.Show)}));return f.syncRender(),Promise.all(k).then((function(){o.isAnimatingTree=!1,u&&u(),f.notifyLayoutAnimationComplete()}))}},o}return r.__extends(o,e),o.prototype.componentDidMount=function(){var e=this,t=this.props.visualElement;t.animateMotionValue=Lt,t.enableLayoutProjection(),this.unsubLayoutReady=t.onLayoutUpdate(this.animate),t.layoutSafeToRemove=function(){return e.safeToRemove()},q(vr)},o.prototype.componentWillUnmount=function(){var e=this;this.unsubLayoutReady(),yo((function(t){var o,r;return null===(r=(o=e.stopAxisAnimation)[t])||void 0===r?void 0:r.call(o)}))},o.prototype.animateAxis=function(e,t,o,r){var n,a,i=this,l=void 0===r?{}:r,c=l.transition,u=l.isRelative;if(!this.isAnimating[e]||!br(t,this.currentAnimationTarget[e])){null===(a=(n=this.stopAxisAnimation)[e])||void 0===a||a.call(n),this.isAnimating[e]=!0;var d=this.props.visualElement,p=this.frameTarget[e],m=d.getProjectionAnimationProgress()[e];m.clearListeners(),m.set(0),m.set(0);var f=function(){var r=m.get()/1e3;!function(e,t,o,r){e.min=s.mix(t.min,o.min,r),e.max=s.mix(t.max,o.max,r)}(p,o,t,r),d.setProjectionTargetAxis(e,p.min,p.max,u)};f();var v=m.onChange(f);this.stopAxisAnimation[e]=function(){i.isAnimating[e]=!1,m.stop(),v()},this.currentAnimationTarget[e]=t;var h=c||d.getDefaultTransition()||xr;return Lt("x"===e?"layoutX":"layoutY",m,1e3,h&&Tt(h,"layout")).then(this.stopAxisAnimation[e])}},o.prototype.safeToRemove=function(){var e,t;null===(t=(e=this.props).safeToRemove)||void 0===t||t.call(e)},o.prototype.render=function(){return null},o}(d.Component),gr={min:0,max:0};function yr(e){return br(e.x,gr)&&br(e.y,gr)}function br(e,t){return e.min===t.min&&e.max===t.max}var xr={duration:.45,ease:[.4,0,.1,1]},Ar={layoutReady:function(e){return e.notifyLayoutReady()}};function wr(){var e=new Set;return{add:function(t){return e.add(t)},flush:function(t){var o=void 0===t?Ar:t,n=o.layoutReady,a=o.parent;Qo((function(t,o){var i=Array.from(e).sort(jo),s=a?To(a):[];o((function(){r.__spreadArray(r.__spreadArray([],r.__read(s)),r.__read(i)).forEach((function(e){return e.resetTransform()}))})),t((function(){i.forEach(Lo)})),o((function(){s.forEach((function(e){return e.restoreTransform()})),i.forEach(n)})),t((function(){i.forEach((function(e){e.isPresent&&(e.presence=ir.Present)}))})),o((function(){l.flushSync.preRender(),l.flushSync.render()})),t((function(){m.default.postRender((function(){return i.forEach(Sr)})),e.clear()}))})),er()}}}function Sr(e){e.prevViewportBox=e.projection.target}var Cr=n.createContext(wr()),_r=n.createContext(wr());function kr(e){return!!e.forceUpdate}var Rr=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return r.__extends(t,e),t.prototype.componentDidMount=function(){var e=this.props,t=e.syncLayout,o=e.framerSyncLayout,r=e.visualElement;kr(t)&&t.register(r),kr(o)&&o.register(r),r.onUnmount((function(){kr(t)&&t.remove(r),kr(o)&&o.remove(r)}))},t.prototype.getSnapshotBeforeUpdate=function(){var e=this.props,t=e.syncLayout,o=e.visualElement;return kr(t)?t.syncUpdate():(Oo(o),t.add(o)),null},t.prototype.componentDidUpdate=function(){var e=this.props.syncLayout;kr(e)||e.flush()},t.prototype.render=function(){return null},t}(p.default.Component),Pr={measureLayout:function(e){var t=n.useContext(Cr),o=n.useContext(_r);return p.default.createElement(Rr,r.__assign({},e,{syncLayout:t,framerSyncLayout:o}))},layoutAnimation:function(e){var t=r.__read(_(),2)[1];return d.createElement(hr,r.__assign({},e,{safeToRemove:t}))}};function Mr(){return{isHydrated:!1,layout:{x:{min:0,max:1},y:{min:0,max:1}},layoutCorrected:{x:{min:0,max:1},y:{min:0,max:1}},treeScale:{x:1,y:1},delta:go(),deltaFinal:go(),deltaTransform:""}}var Ir=Mr();function jr(e,t,o){var r=e.x,n=e.y,a="translate3d("+r.translate/t.x+"px, "+n.translate/t.y+"px, 0) ";if(o){var i=o.rotate,s=o.rotateX,l=o.rotateY;i&&(a+="rotate("+i+") "),s&&(a+="rotateX("+s+") "),l&&(a+="rotateY("+l+") ")}return a+="scale("+r.scale+", "+n.scale+")",o||a!==Tr?a:""}function $r(e){var t=e.deltaFinal;return 100*t.x.origin+"% "+100*t.y.origin+"% 0"}var Tr=jr(Ir.delta,Ir.treeScale,{x:1,y:1}),Lr=["LayoutMeasure","BeforeLayoutMeasure","LayoutUpdate","ViewportBoxUpdate","Update","Render","AnimationComplete","LayoutAnimationComplete","AnimationStart","SetAxisTarget","Unmount"];var Or=function(){function e(){this.children=[],this.isDirty=!1}return e.prototype.add=function(e){Ot(this.children,e),this.isDirty=!0},e.prototype.remove=function(e){Et(this.children,e),this.isDirty=!0},e.prototype.forEach=function(e){this.isDirty&&this.children.sort(jo),this.isDirty=!1,this.children.forEach(e)},e}(),Er=function(e){var t=e.treeType,o=void 0===t?"":t,n=e.build,a=e.getBaseTarget,i=e.makeTargetAnimatable,c=e.measureViewportBox,u=e.render,d=e.readValueFromInstance,p=e.resetTransform,f=e.restoreTransform,v=e.removeValueFromRenderState,h=e.sortNodePosition,g=e.scrapeMotionValuesFromProps;return function(e,t){var y=e.parent,b=e.props,x=e.presenceId,A=e.blockInitialAnimation,w=e.visualState;void 0===t&&(t={});var S,C,_,k,R,P,M=w.latestValues,I=w.renderState,j=function(){var e=Lr.map((function(){return new Bt})),t={},o={clearAllListeners:function(){return e.forEach((function(e){return e.clear()}))},updatePropListeners:function(e){return Lr.forEach((function(r){var n;null===(n=t[r])||void 0===n||n.call(t);var a="on"+r,i=e[a];i&&(t[r]=o[a](i))}))}};return e.forEach((function(e,t){o["on"+Lr[t]]=function(t){return e.add(t)},o["notify"+Lr[t]]=function(){for(var t=[],o=0;o<arguments.length;o++)t[o]=arguments[o];return e.notify.apply(e,r.__spreadArray([],r.__read(t)))}})),o}(),$={isEnabled:!1,isHydrated:!1,isTargetLocked:!1,target:{x:{min:0,max:1},y:{min:0,max:1}},targetFinal:{x:{min:0,max:1},y:{min:0,max:1}}},T=$,L=M,E=Mr(),B=!1,D=new Map,F=new Map,W={},V=r.__assign({},M);function H(){S&&(Q.isProjectionReady()&&(Go(T.targetFinal,T.target,L),wo(E.deltaFinal,E.layoutCorrected,T.targetFinal,M)),U(),u(S,I))}function U(){var e=M;if(k&&k.isActive()){var o=k.getCrossfadeState(Q);o&&(e=o)}n(Q,I,e,T,E,t,b)}function q(){j.notifyUpdate(M)}function G(){Q.layoutTree.forEach(Nr)}var X=g(b);for(var Y in X){var K=X[Y];void 0!==M[Y]&&te(K)&&K.set(M[Y],!1)}var Z=N(b),J=z(b),Q=r.__assign(r.__assign({treeType:o,current:null,depth:y?y.depth+1:0,parent:y,children:new Set,path:y?r.__spreadArray(r.__spreadArray([],r.__read(y.path)),[y]):[],layoutTree:y?y.layoutTree:new Or,presenceId:x,projection:$,variantChildren:J?new Set:void 0,isVisible:void 0,manuallyAnimateOnMount:Boolean(null==y?void 0:y.isMounted()),blockInitialAnimation:A,isMounted:function(){return Boolean(S)},mount:function(e){S=Q.current=e,Q.pointTo(Q),J&&y&&!Z&&(P=null==y?void 0:y.addVariantChild(Q)),null==y||y.children.add(Q)},unmount:function(){l.cancelSync.update(q),l.cancelSync.render(H),l.cancelSync.preRender(Q.updateLayoutProjection),F.forEach((function(e){return e()})),Q.stopLayoutAnimation(),Q.layoutTree.remove(Q),null==P||P(),null==y||y.children.delete(Q),null==_||_(),j.clearAllListeners()},addVariantChild:function(e){var t,o=Q.getClosestVariantNode();if(o)return null===(t=o.variantChildren)||void 0===t||t.add(e),function(){return o.variantChildren.delete(e)}},sortNodePosition:function(e){return h&&o===e.treeType?h(Q.getInstance(),e.getInstance()):0},getClosestVariantNode:function(){return J?Q:null==y?void 0:y.getClosestVariantNode()},scheduleUpdateLayoutProjection:y?y.scheduleUpdateLayoutProjection:function(){return m.default.preRender(Q.updateTreeLayoutProjection,!1,!0)},getLayoutId:function(){return b.layoutId},getInstance:function(){return S},getStaticValue:function(e){return M[e]},setStaticValue:function(e,t){return M[e]=t},getLatestValues:function(){return M},setVisibility:function(e){Q.isVisible!==e&&(Q.isVisible=e,Q.scheduleRender())},makeTargetAnimatable:function(e,t){return void 0===t&&(t=!0),i(Q,e,b,t)},addValue:function(e,t){Q.hasValue(e)&&Q.removeValue(e),D.set(e,t),M[e]=t.get(),function(e,t){var o=t.onChange((function(t){M[e]=t,b.onUpdate&&m.default.update(q,!1,!0)})),r=t.onRenderRequest(Q.scheduleRender);F.set(e,(function(){o(),r()}))}(e,t)},removeValue:function(e){var t;D.delete(e),null===(t=F.get(e))||void 0===t||t(),F.delete(e),delete M[e],v(e,I)},hasValue:function(e){return D.has(e)},getValue:function(e,t){var o=D.get(e);return void 0===o&&void 0!==t&&(o=zt(t),Q.addValue(e,o)),o},forEachValue:function(e){return D.forEach(e)},readValue:function(e){var o;return null!==(o=M[e])&&void 0!==o?o:d(S,e,t)},setBaseTarget:function(e,t){V[e]=t},getBaseTarget:function(e){if(a){var t=a(b,e);if(void 0!==t&&!te(t))return t}return V[e]}},j),{build:function(){return U(),I},scheduleRender:function(){m.default.render(H,!1,!0)},syncRender:H,setProps:function(e){b=e,j.updatePropListeners(e),W=function(e,t,o){var r;for(var n in t){var a=t[n],i=o[n];if(te(a))e.addValue(n,a);else if(te(i))e.addValue(n,zt(a));else if(i!==a)if(e.hasValue(n)){var s=e.getValue(n);!s.hasAnimated&&s.set(a)}else e.addValue(n,zt(null!==(r=e.getStaticValue(n))&&void 0!==r?r:a))}for(var n in o)void 0===t[n]&&e.removeValue(n);return t}(Q,g(b),W)},getProps:function(){return b},getVariant:function(e){var t;return null===(t=b.variants)||void 0===t?void 0:t[e]},getDefaultTransition:function(){return b.transition},getVariantContext:function(e){if(void 0===e&&(e=!1),e)return null==y?void 0:y.getVariantContext();if(!Z){var t=(null==y?void 0:y.getVariantContext())||{};return void 0!==b.initial&&(t.initial=b.initial),t}for(var o={},r=0;r<Fr;r++){var n=Dr[r],a=b[n];(O(a)||!1===a)&&(o[n]=a)}return o},enableLayoutProjection:function(){$.isEnabled=!0,Q.layoutTree.add(Q)},lockProjectionTarget:function(){$.isTargetLocked=!0},unlockProjectionTarget:function(){Q.stopLayoutAnimation(),$.isTargetLocked=!1},getLayoutState:function(){return E},setCrossfader:function(e){k=e},isProjectionReady:function(){return $.isEnabled&&$.isHydrated&&E.isHydrated},startLayoutAnimation:function(e,t,o){void 0===o&&(o=!1);var r=Q.getProjectionAnimationProgress()[e],n=o?$.relativeTarget[e]:$.target[e],a=n.min,i=n.max-a;return r.clearListeners(),r.set(a),r.set(a),r.onChange((function(t){Q.setProjectionTargetAxis(e,t,t+i,o)})),Q.animateMotionValue(e,r,0,t)},stopLayoutAnimation:function(){yo((function(e){return Q.getProjectionAnimationProgress()[e].stop()}))},measureViewportBox:function(e){void 0===e&&(e=!0);var o=c(S,t);return e||Ko(o,M),o},getProjectionAnimationProgress:function(){return R||(R={x:zt(0),y:zt(0)}),R},setProjectionTargetAxis:function(e,t,o,r){var n;void 0===r&&(r=!1),r?($.relativeTarget||($.relativeTarget={x:{min:0,max:1},y:{min:0,max:1}}),n=$.relativeTarget[e]):($.relativeTarget=void 0,n=$.target[e]),$.isHydrated=!0,n.min=t,n.max=o,B=!0,j.notifySetAxisTarget()},rebaseProjectionTarget:function(e,t){void 0===t&&(t=E.layout);var o=Q.getProjectionAnimationProgress(),r=o.x,n=o.y,a=!($.relativeTarget||$.isTargetLocked||r.isAnimating()||n.isAnimating());(e||a)&&yo((function(e){var o=t[e],r=o.min,n=o.max;Q.setProjectionTargetAxis(e,r,n)}))},notifyLayoutReady:function(e){!function(e){var t=e.getProjectionParent();if(t){var o=Bo(t.getLayoutState().layout,e.getLayoutState().layout);yo((function(t){e.setProjectionTargetAxis(t,o[t].min,o[t].max,!0)}))}else e.rebaseProjectionTarget()}(Q),Q.notifyLayoutUpdate(E.layout,Q.prevViewportBox||E.layout,e)},resetTransform:function(){return p(Q,S,b)},restoreTransform:function(){return f(S,I)},updateLayoutProjection:function(){if(Q.isProjectionReady()){var e=E.delta,t=E.treeScale,o=t.x,r=t.y,n=E.deltaTransform;(function(e,t,o,r){var n,a,i=e.delta,s=e.layout,l=e.layoutCorrected,c=e.treeScale,u=t.target;a=s,zo((n=l).x,a.x),zo(n.y,a.y),function(e,t,o){var r=o.length;if(r){var n,a;t.x=t.y=1;for(var i=0;i<r;i++)a=(n=o[i]).getLayoutState().delta,t.x*=a.x.scale,t.y*=a.y.scale,Vo(e,a),No(n)&&Go(e,e,n.getLatestValues())}}(l,c,o),wo(i,l,u,r)})(E,T,Q.path,M),B&&Q.notifyViewportBoxUpdate(T.target,e),B=!1;var a=jr(e,t);a===n&&o===t.x&&r===t.y||Q.scheduleRender(),E.deltaTransform=a}},updateTreeLayoutProjection:function(){Q.layoutTree.forEach(Br),m.default.preRender(G,!1,!0)},getProjectionParent:function(){if(void 0===C){for(var e=!1,t=Q.path.length-1;t>=0;t--){var o=Q.path[t];if(o.projection.isEnabled){e=o;break}}C=e}return C},resolveRelativeTargetBox:function(){var e=Q.getProjectionParent();if($.relativeTarget&&e&&(function(e,t){Co(e.target.x,e.relativeTarget.x,t.target.x),Co(e.target.y,e.relativeTarget.y,t.target.y)}($,e.projection),No(e))){var t=$.target;Go(t,t,e.getLatestValues())}},shouldResetTransform:function(){return Boolean(b._layoutResetTransform)},pointTo:function(e){T=e.projection,L=e.getLatestValues(),null==_||_(),_=s.pipe(e.onSetAxisTarget(Q.scheduleUpdateLayoutProjection),e.onLayoutAnimationComplete((function(){var e;Q.isPresent?Q.presence=ir.Present:null===(e=Q.layoutSafeToRemove)||void 0===e||e.call(Q)})))},isPresent:!0,presence:ir.Entering});return Q}};function Br(e){e.resolveRelativeTargetBox()}function Nr(e){e.updateLayoutProjection()}var zr,Dr=r.__spreadArray(["initial"],r.__read(to)),Fr=Dr.length,Wr=new Set(["width","height","top","left","right","bottom","x","y"]),Vr=function(e){return Wr.has(e)},Hr=function(e,t){e.set(t,!1),e.set(t)},Ur=function(e){return e===i.number||e===i.px};!function(e){e.width="width",e.height="height",e.left="left",e.right="right",e.top="top",e.bottom="bottom"}(zr||(zr={}));var qr=function(e,t){return parseFloat(e.split(", ")[t])},Gr=function(e,t){return function(o,r){var n=r.transform;if("none"===n||!n)return 0;var a=n.match(/^matrix3d\((.+)\)$/);if(a)return qr(a[1],t);var i=n.match(/^matrix\((.+)\)$/);return i?qr(i[1],e):0}},Xr=new Set(["x","y","z"]),Yr=X.filter((function(e){return!Xr.has(e)})),Kr={width:function(e){var t=e.x;return t.max-t.min},height:function(e){var t=e.y;return t.max-t.min},top:function(e,t){var o=t.top;return parseFloat(o)},left:function(e,t){var o=t.left;return parseFloat(o)},bottom:function(e,t){var o=e.y,r=t.top;return parseFloat(r)+(o.max-o.min)},right:function(e,t){var o=e.x,r=t.left;return parseFloat(r)+(o.max-o.min)},x:Gr(4,13),y:Gr(5,14)};function Zr(e,t,o,n){return function(e){return Object.keys(e).some(Vr)}(t)?function(e,t,o,n){void 0===o&&(o={}),void 0===n&&(n={}),t=r.__assign({},t),n=r.__assign({},n);var s=Object.keys(t).filter(Vr),l=[],c=!1,u=[];if(s.forEach((function(r){var s=e.getValue(r);if(e.hasValue(r)){var d,p=o[r],m=t[r],f=Wt(p);if(je(m))for(var v=m.length,h=null===m[0]?1:0;h<v;h++)d?a.invariant(Wt(m[h])===d,"All keyframes must be of the same type"):(d=Wt(m[h]),a.invariant(d===f||Ur(f)&&Ur(d),"Keyframes must be of the same dimension as the current value"));else d=Wt(m);if(f!==d)if(Ur(f)&&Ur(d)){var g=s.get();"string"==typeof g&&s.set(parseFloat(g)),"string"==typeof m?t[r]=parseFloat(m):Array.isArray(m)&&d===i.px&&(t[r]=m.map(parseFloat))}else(null==f?void 0:f.transform)&&(null==d?void 0:d.transform)&&(0===p||0===m)?0===p?s.set(d.transform(p)):t[r]=f.transform(m):(c||(l=function(e){var t=[];return Yr.forEach((function(o){var r=e.getValue(o);void 0!==r&&(t.push([o,r.get()]),r.set(o.startsWith("scale")?1:0))})),t.length&&e.syncRender(),t}(e),c=!0),u.push(r),n[r]=void 0!==n[r]?n[r]:t[r],Hr(s,m))}})),u.length){var d=function(e,t,o){var r=t.measureViewportBox(),n=t.getInstance(),a=getComputedStyle(n),i=a.display,s={top:a.top,left:a.left,bottom:a.bottom,right:a.right,transform:a.transform};"none"===i&&t.setStaticValue("display",e.display||"block"),t.syncRender();var l=t.measureViewportBox();return o.forEach((function(o){var n=t.getValue(o);Hr(n,Kr[o](r,s)),e[o]=Kr[o](l,a)})),e}(t,e,u);return l.length&&l.forEach((function(t){var o=r.__read(t,2),n=o[0],a=o[1];e.getValue(n).set(a)})),e.syncRender(),{target:d,transitionEnd:n}}return{target:t,transitionEnd:n}}(e,t,o,n):{target:t,transitionEnd:n}}var Jr={treeType:"dom",readValueFromInstance:function(e,t){if(Z(t)){var o=Pt(t);return o&&o.default||0}var r,n=(r=e,window.getComputedStyle(r));return(re(t)?n.getPropertyValue(t):n[t])||0},sortNodePosition:function(e,t){return 2&e.compareDocumentPosition(t)?1:-1},getBaseTarget:function(e,t){var o;return null===(o=e.style)||void 0===o?void 0:o[t]},measureViewportBox:function(e,t){return Io(e,t.transformPagePoint)},resetTransform:function(e,t,o){var r=o.transformTemplate;t.style.transform=r?r({},""):"none",e.scheduleRender()},restoreTransform:function(e,t){e.style.transform=t.style.transform},removeValueFromRenderState:function(e,t){var o=t.vars,r=t.style;delete o[e],delete r[e]},makeTargetAnimatable:function(e,t,o,n){var a=o.transformValues;void 0===n&&(n=!0);var i=t.transition,s=t.transitionEnd,l=r.__rest(t,["transition","transitionEnd"]),c=Yt(l,i||{},e);if(a&&(s&&(s=a(s)),l&&(l=a(l)),c&&(c=a(c))),n){Gt(e,l,c);var u=function(e,t,o,n){var a=function(e,t,o){var n,a=r.__rest(t,[]),i=e.getInstance();if(!(i instanceof HTMLElement))return{target:a,transitionEnd:o};for(var s in o&&(o=r.__assign({},o)),e.forEachValue((function(e){var t=e.get();if(cr(t)){var o=dr(t,i);o&&e.set(o)}})),a){var l=a[s];if(cr(l)){var c=dr(l,i);c&&(a[s]=c,o&&(null!==(n=o[s])&&void 0!==n||(o[s]=l)))}}return{target:a,transitionEnd:o}}(e,t,n);return Zr(e,t=a.target,o,n=a.transitionEnd)}(e,l,c,s);s=u.transitionEnd,l=u.target}return r.__assign({transition:i,transitionEnd:s},l)},scrapeMotionValuesFromProps:Pe,build:function(e,t,o,r,n,a,i){void 0!==e.isVisible&&(t.style.visibility=e.isVisible?"visible":"hidden");var s=r.isEnabled&&n.isHydrated;se(t,o,r,n,a,i.transformTemplate,s?jr:void 0,s?$r:void 0)},render:_e},Qr=Er(Jr),en=Er(r.__assign(r.__assign({},Jr),{getBaseTarget:function(e,t){return e[t]},readValueFromInstance:function(e,t){var o;return Z(t)?(null===(o=Pt(t))||void 0===o?void 0:o.default)||0:(t=ke.has(t)?t:Ce(t),e.getAttribute(t))},scrapeMotionValuesFromProps:Me,build:function(e,t,o,r,n,a,i){var s=r.isEnabled&&n.isHydrated;be(t,o,r,n,a,i.transformTemplate,s?jr:void 0,s?$r:void 0)},render:Re})),tn=function(e,t){return H(e)?en(t,{enableHardwareAcceleration:!1}):Qr(t,{enableHardwareAcceleration:!0})},on=r.__assign(r.__assign(r.__assign(r.__assign({},ao),ft),lr),Pr),rn=W((function(e,t){return Fe(e,t,on,tn)})),nn=W(Fe),an=0;function sn(){var e=an;return an++,e}var ln=function(e){var t=e.children,o=e.initial,r=e.isPresent,a=e.onExitComplete,i=e.custom,s=e.presenceAffectsLayout,l=C(cn),c=C(sn),u=n.useMemo((function(){return{id:c,initial:o,isPresent:r,custom:i,onExitComplete:function(e){l.set(e,!0);var t=!0;l.forEach((function(e){e||(t=!1)})),t&&(null==a||a())},register:function(e){return l.set(e,!1),function(){return l.delete(e)}}}}),s?void 0:[r]);return n.useMemo((function(){l.forEach((function(e,t){return l.set(t,!1)}))}),[r]),d.useEffect((function(){!r&&!l.size&&(null==a||a())}),[r]),d.createElement(S.Provider,{value:u},t)};function cn(){return new Map}function un(e){return e.key||""}function dn(e,t,o){void 0===o&&(o={});var r=te(e)?e:zt(e);return Lt("",r,t,o),{stop:function(){return r.stop()}}}function pn(){var e=zt(1),t={lead:void 0,follow:void 0,crossfadeOpacity:!1,preserveFollowOpacity:!1},o=r.__assign({},t),n={},a={},i=!1,c=null,u=0;function d(o,n){var a=t.lead,s=t.follow;i=!0,c=null;var u=!1,d=function(){u=!0,a&&a.scheduleRender(),s&&s.scheduleRender()},p=function(){i=!1,c=l.getFrameData().timestamp};return n=n&&Tt(n,"crossfade"),dn(e,o,r.__assign(r.__assign({},n),{onUpdate:d,onComplete:function(){u?p():(e.set(o),m.default.read(p)),d()}}))}return{isActive:function(){return n&&(i||l.getFrameData().timestamp===c)},fromLead:function(e){return d(0,e)},toLead:function(r){var n=0;return t.prevValues||t.follow?o.lead===t.follow&&o.follow===t.lead&&(n=1-e.get()):n=1,e.set(n),d(1,r)},reset:function(){return e.set(1)},stop:function(){return e.stop()},getCrossfadeState:function(o){return function(){var o,r,i=l.getFrameData().timestamp,c=t.lead,d=t.follow;if(i!==u&&c){u=i;var p=c.getLatestValues();Object.assign(n,p);var m=d?d.getLatestValues():t.prevValues;Object.assign(a,m);var f=e.get(),v=null!==(o=p.opacity)&&void 0!==o?o:1,h=null!==(r=null==m?void 0:m.opacity)&&void 0!==r?r:1;t.crossfadeOpacity&&d?(n.opacity=s.mix(!1!==d.isVisible?0:h,v,mn(f)),a.opacity=t.preserveFollowOpacity?h:s.mix(h,0,fn(f))):d||(n.opacity=s.mix(h,v,f)),function(e,t,o,r,n,a){for(var i=0;i<gn;i++){var l="border"+hn[i]+"Radius",c=yn(r,l),u=yn(o,l);if((void 0!==c||void 0!==u)&&(c||(c=0),u||(u=0),"number"==typeof c&&"number"==typeof u)){var d=Math.max(s.mix(c,u,a),0);e[l]=t[l]=d}}if(r.rotate||o.rotate){var p=s.mix(r.rotate||0,o.rotate||0,a);e.rotate=t.rotate=p}!n&&o.backgroundColor&&r.backgroundColor&&(e.backgroundColor=t.backgroundColor=s.mixColor(r.backgroundColor,o.backgroundColor)(a))}(n,a,p,m||{},Boolean(d),f)}}(),o===t.lead?n:o===t.follow?a:void 0},setOptions:function(e){o=t,t=e,n={},a={}},getLatestValues:function(){return n}}}var mn=vn(0,.5,s.circOut),fn=vn(.5,.95,s.linear);function vn(e,t,o){return function(r){return r<e?0:r>t?1:o(s.progress(e,t,r))}}var hn=["TopLeft","TopRight","BottomLeft","BottomRight"],gn=hn.length;function yn(e,t){var o;return null!==(o=e[t])&&void 0!==o?o:e.borderRadius}var bn=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.children=new Set,t.stacks=new Map,t.hasMounted=!1,t.updateScheduled=!1,t.renderScheduled=!1,t.syncContext=r.__assign(r.__assign({},wr()),{syncUpdate:function(e){return t.scheduleUpdate(e)},forceUpdate:function(){t.syncContext=r.__assign({},t.syncContext),t.scheduleUpdate(!0)},register:function(e){return t.addChild(e)},remove:function(e){return t.removeChild(e)}}),t}return r.__extends(t,e),t.prototype.componentDidMount=function(){this.hasMounted=!0},t.prototype.componentDidUpdate=function(){this.startLayoutAnimation()},t.prototype.shouldComponentUpdate=function(){return this.renderScheduled=!0,!0},t.prototype.startLayoutAnimation=function(){var e=this;this.renderScheduled=this.updateScheduled=!1;var t=this.props.type;this.children.forEach((function(e){e.isPresent?e.presence!==ir.Entering&&(e.presence=e.presence===ir.Exiting?ir.Entering:ir.Present):e.presence=ir.Exiting})),this.updateStacks();var o={layoutReady:function(o){void 0!==o.getLayoutId()?e.getStack(o).animate(o,"crossfade"===t):o.notifyLayoutReady()},parent:this.context.visualElement};this.children.forEach((function(t){return e.syncContext.add(t)})),this.syncContext.flush(o),this.stacks.forEach((function(e){return e.clearSnapshot()}))},t.prototype.updateStacks=function(){this.stacks.forEach((function(e){return e.updateLeadAndFollow()}))},t.prototype.scheduleUpdate=function(e){void 0===e&&(e=!1),!e&&this.updateScheduled||(this.updateScheduled=!0,this.children.forEach((function(e){!function(e){for(var t=!1,o={},r=0;r<G.length;r++){var n="rotate"+G[r];e.hasValue(n)&&0!==e.getStaticValue(n)&&(t=!0,o[n]=e.getStaticValue(n),e.setStaticValue(n,0))}if(t){for(var n in e.syncRender(),o)e.setStaticValue(n,o[n]);e.scheduleRender()}}(e),e.shouldResetTransform()&&e.resetTransform()})),this.children.forEach(Oo),this.stacks.forEach((function(e){return e.updateSnapshot()})),!e&&this.renderScheduled||(this.renderScheduled=!0,this.forceUpdate()))},t.prototype.addChild=function(e){this.children.add(e),this.addToStack(e),e.presence=this.hasMounted?ir.Entering:ir.Present},t.prototype.removeChild=function(e){this.scheduleUpdate(),this.children.delete(e),this.removeFromStack(e)},t.prototype.addToStack=function(e){var t=this.getStack(e);null==t||t.add(e)},t.prototype.removeFromStack=function(e){var t=this.getStack(e);null==t||t.remove(e)},t.prototype.getStack=function(e){var t,o,n,a,i,s,l,c,u=e.getLayoutId();if(void 0!==u)return!this.stacks.has(u)&&this.stacks.set(u,(a=new Set,i={leadIsExiting:!1},s=r.__assign({},i),l=pn(),c=!1,{add:function(e){e.setCrossfader(l),a.add(e),n&&(e.prevDragCursor=n),i.lead||(i.lead=e)},remove:function(e){a.delete(e)},getLead:function(){return i.lead},updateSnapshot:function(){if(i.lead){t=l.isActive()?l.getLatestValues():i.lead.getLatestValues(),o=i.lead.prevViewportBox;var e=rr.get(i.lead);e&&e.isDragging&&(n=e.cursorProgress)}},clearSnapshot:function(){n=o=void 0},updateLeadAndFollow:function(){var e,o,n;s=r.__assign({},i);for(var u=Array.from(a),d=u.length;d--;d>=0){var p=u[d];if(o&&(null!=n||(n=p)),null!=o||(o=p),o&&n)break}i.lead=o,i.follow=n,i.leadIsExiting=(null===(e=i.lead)||void 0===e?void 0:e.presence)===ir.Exiting,l.setOptions({lead:o,follow:n,prevValues:t,crossfadeOpacity:(null==n?void 0:n.isPresenceRoot)||(null==o?void 0:o.isPresenceRoot)}),i.lead===s.follow||s.lead===i.lead&&s.leadIsExiting===i.leadIsExiting||(c=!0)},animate:function(e,t){var r;if(void 0===t&&(t=!1),e===i.lead){t?e.pointTo(i.lead):e.setVisibility(!0);var n={},a=null===(r=i.follow)||void 0===r?void 0:r.getProjectionParent();if(a&&(n.prevParent=a),e.presence===ir.Entering?n.originBox=i.follow?i.follow.prevViewportBox:o:e.presence===ir.Exiting&&(n.targetBox=function(){var e;return null===(e=i.follow)||void 0===e?void 0:e.getLayoutState().layout}()),c){c=!1;var s=e.getDefaultTransition();e.presence===ir.Entering?l.toLead(s):l.fromLead(s)}e.notifyLayoutReady(n)}else t?i.lead&&e.pointTo(i.lead):e.setVisibility(!1)}})),this.stacks.get(u)},t.prototype.render=function(){return d.createElement(Cr.Provider,{value:this.syncContext},this.props.children)},t.contextType=A,t}(d.Component);function xn(e){return"function"==typeof e}var An=r.__assign(r.__assign({renderer:tn},ao),ft),wn=r.__assign(r.__assign(r.__assign({},An),lr),Pr);function Sn(e){var t=C((function(){return zt(e)}));if(n.useContext(x).isStatic){var o=r.__read(n.useState(e),2)[1];n.useEffect((function(){return t.onChange(o)}),[])}return t}function Cn(e,t){n.useEffect((function(){if(te(e))return e.onChange(t)}),[t])}function _n(e,t){var o=Sn(t()),r=function(){return o.set(t())};return r(),function(e,t){n.useEffect((function(){var o=e.map((function(e){return e.onChange(t)}));return function(){return o.forEach((function(e){return e()}))}}))}(e,(function(){return m.default.update(r,!1,!0)})),o}var kn,Rn=function(e){return function(e){return"object"==typeof e&&e.mix}(e)?e.mix:void 0};function Pn(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var o=!Array.isArray(e[0]),n=o?0:-1,a=e[0+n],i=e[1+n],l=e[2+n],c=e[3+n],u=s.interpolate(i,l,r.__assign({mixer:Rn(l[0])},c));return o?u(a):u}function Mn(e,t,o,n){var a="function"==typeof t?t:Pn(t,o,n);return Array.isArray(e)?In(e,a):In([e],(function(e){var t=r.__read(e,1)[0];return a(t)}))}function In(e,t){var o=C((function(){return[]}));return _n(e,(function(){o.length=0;for(var r=e.length,n=0;n<r;n++)o[n]=e[n].get();return t(o)}))}function jn(){return{scrollX:zt(0),scrollY:zt(0),scrollXProgress:zt(0),scrollYProgress:zt(0)}}function $n(e,t,o){o.set(e&&t?e/t:0)}function Tn(e,t){var o=function(){var o=t(),r=o.xOffset,n=o.yOffset,a=o.xMaxOffset,i=o.yMaxOffset;e.scrollX.set(r),e.scrollY.set(n),$n(r,a,e.scrollXProgress),$n(n,i,e.scrollYProgress)};return o(),o}function Ln(){return{xOffset:window.pageXOffset,yOffset:window.pageYOffset,xMaxOffset:document.body.clientWidth-window.innerWidth,yMaxOffset:document.body.clientHeight-window.innerHeight}}var On,En=!1;function Bn(){var e=!1,t=[],o=new Set,n={subscribe:function(e){return o.add(e),function(){o.delete(e)}},start:function(r,n){if(e){var a=[];return o.forEach((function(e){a.push(Kt(e,r,{transitionOverride:n}))})),Promise.all(a)}return new Promise((function(e){t.push({animation:[r,n],resolve:e})}))},set:function(t){return a.invariant(e,"controls.set() should only be called after a component has mounted. Consider calling within a useEffect hook."),o.forEach((function(e){!function(e,t){Array.isArray(t)?qt(e,t):"string"==typeof t?qt(e,[t]):Ut(e,t)}(e,t)}))},stop:function(){o.forEach((function(e){!function(e){e.forEachValue((function(e){return e.stop()}))}(e)}))},mount:function(){return e=!0,t.forEach((function(e){var t=e.animation,o=e.resolve;n.start.apply(n,r.__spreadArray([],r.__read(t))).then(o)})),function(){e=!1,n.stop()}}};return n}var Nn=function(){function e(){this.componentControls=new Set}return e.prototype.subscribe=function(e){var t=this;return this.componentControls.add(e),function(){return t.componentControls.delete(e)}},e.prototype.start=function(e,t){this.componentControls.forEach((function(o){o.start(e.nativeEvent||e,t)}))},e.prototype.updateConstraints=function(e){void 0===e&&(e=!0),this.componentControls.forEach((function(e){e.updateConstraints()})),e&&er()},e}(),zn=function(){return new Nn},Dn=function(){return{}},Fn=Er({build:function(){},measureViewportBox:function(){return{x:{min:0,max:1},y:{min:0,max:1}}},resetTransform:function(){},restoreTransform:function(){},removeValueFromRenderState:function(){},render:function(){},scrapeMotionValuesFromProps:Dn,readValueFromInstance:function(e,t,o){return o.initialState[t]||0},makeTargetAnimatable:function(e,t){var o=t.transition,n=t.transitionEnd,a=r.__rest(t,["transition","transitionEnd"]);return Gt(e,a,Yt(a,o||{},e)),r.__assign({transition:o,transitionEnd:n},a)}}),Wn=Ee({scrapeMotionValuesFromProps:Dn,createRenderState:Dn}),Vn=function(e){return e>.001?1/e:1e5},Hn=!1;t.AnimatePresence=function(e){var t=e.children,o=e.custom,a=e.initial,i=void 0===a||a,s=e.onExitComplete,l=e.exitBeforeEnter,c=e.presenceAffectsLayout,u=void 0===c||c,p=function(){var e=n.useRef(!1),t=r.__read(n.useState(0),2),o=t[0],a=t[1];return pt((function(){return e.current=!0})),n.useCallback((function(){!e.current&&a(o+1)}),[o])}(),m=n.useContext(Cr);kr(m)&&(p=m.forceUpdate);var f=n.useRef(!0),v=function(e){var t=[];return n.Children.forEach(e,(function(e){n.isValidElement(e)&&t.push(e)})),t}(t),h=n.useRef(v),g=n.useRef(new Map).current,y=n.useRef(new Set).current;if(function(e,t){e.forEach((function(e){var o=un(e);t.set(o,e)}))}(v,g),f.current)return f.current=!1,d.createElement(d.Fragment,null,v.map((function(e){return d.createElement(ln,{key:un(e),isPresent:!0,initial:!!i&&void 0,presenceAffectsLayout:u},e)})));for(var b=r.__spreadArray([],r.__read(v)),x=h.current.map(un),A=v.map(un),w=x.length,S=0;S<w;S++){var C=x[S];-1===A.indexOf(C)?y.add(C):y.delete(C)}return l&&y.size&&(b=[]),y.forEach((function(e){if(-1===A.indexOf(e)){var t=g.get(e);if(t){var r=x.indexOf(e);b.splice(r,0,d.createElement(ln,{key:un(t),isPresent:!1,onExitComplete:function(){g.delete(e),y.delete(e);var t=h.current.findIndex((function(t){return t.key===e}));h.current.splice(t,1),y.size||(h.current=v,p(),s&&s())},custom:o,presenceAffectsLayout:u},t))}}})),b=b.map((function(e){var t=e.key;return y.has(t)?e:d.createElement(ln,{key:un(e),isPresent:!0,presenceAffectsLayout:u},e)})),h.current=b,d.createElement(d.Fragment,null,y.size?b:b.map((function(e){return n.cloneElement(e)})))},t.AnimateSharedLayout=bn,t.DragControls=Nn,t.FlatTree=Or,t.FramerTreeLayoutContext=_r,t.LayoutGroupContext=I,t.LazyMotion=function(e){var t=e.children,o=e.features,a=e.strict,i=void 0!==a&&a,s=r.__read(n.useState(!xn(o)),2)[1],l=n.useRef(void 0);if(!xn(o)){var c=o.renderer,u=r.__rest(o,["renderer"]);l.current=c,h(u)}return n.useEffect((function(){xn(o)&&o().then((function(e){var t=e.renderer;h(r.__rest(e,["renderer"])),l.current=t,s(!0)}))}),[]),d.createElement(g.Provider,{value:{renderer:l.current,strict:i}},t)},t.MotionConfig=function(e){var t=e.children,o=r.__rest(e,["children"]);(o=r.__assign(r.__assign({},n.useContext(x)),o)).isStatic=C((function(){return o.isStatic}));var a="object"==typeof o.transition?o.transition.toString():"",i=n.useMemo((function(){return o}),[a,o.transformPagePoint]);return d.createElement(x.Provider,{value:i},t)},t.MotionConfigContext=x,t.MotionValue=Nt,t.PresenceContext=S,t.SharedLayoutContext=Cr,t.addScaleCorrection=q,t.animate=dn,t.animateVisualElement=Kt,t.animationControls=Bn,t.batchLayout=Qo,t.createBatcher=wr,t.createCrossfader=pn,t.createDomMotionComponent=function(e){return F(Fe(e,{forwardMotionProps:!1},on,tn))},t.createMotionComponent=F,t.domAnimation=An,t.domMax=wn,t.flushLayout=er,t.isValidMotionProp=pe,t.m=nn,t.motion=rn,t.motionValue=zt,t.resolveMotionValue=Le,t.snapshotViewportBox=Oo,t.transform=Pn,t.useAnimation=function(){var e=C(Bn);return n.useEffect(e.mount,[]),e},t.useCycle=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var o=n.useRef(0),a=r.__read(n.useState(e[o.current]),2),i=a[0],l=a[1];return[i,function(t){o.current="number"!=typeof t?s.wrap(0,e.length,o.current+1):t,l(e[o.current])}]},t.useDeprecatedAnimatedState=function(e){var t=r.__read(n.useState(e),2),o=t[0],a=t[1],i=Wn({},!1),s=C((function(){return Fn({props:{},visualState:i},{initialState:e})}));return n.useEffect((function(){return s.mount({}),s.unmount()}),[]),n.useEffect((function(){s.setProps({onUpdate:function(e){return a(r.__assign({},e))}})})),[o,C((function(){return function(e){return Kt(s,e)}}))]},t.useDeprecatedInvertedScale=function(e){var t=Sn(1),o=Sn(1),r=w();return a.invariant(!(!e&&!r),"If no scale values are provided, useInvertedScale must be used within a child of another motion component."),a.warning(Hn,"useInvertedScale is deprecated and will be removed in 3.0. Use the layout prop instead."),Hn=!0,e?(t=e.scaleX||t,o=e.scaleY||o):r&&(t=r.getValue("scaleX",1),o=r.getValue("scaleY",1)),{scaleX:Mn(t,Vn),scaleY:Mn(o,Vn)}},t.useDomEvent=Ve,t.useDragControls=function(){return C(zn)},t.useElementScroll=function(e){var t=C(jn);return $((function(){var o=e.current;if(a.invariant(!!o,"ref provided to useScroll must be passed into a HTML element."),o){var r=Tn(t,function(e){return function(){return{xOffset:e.scrollLeft,yOffset:e.scrollTop,xMaxOffset:e.scrollWidth-e.offsetWidth,yMaxOffset:e.scrollHeight-e.offsetHeight}}}(o)),n=We(o,"scroll",r,{passive:!0}),i=We(o,"resize",r);return function(){n&&n(),i&&i()}}}),[]),t},t.useIsPresent=function(){return k(n.useContext(S))},t.useMotionTemplate=function(e){for(var t=[],o=1;o<arguments.length;o++)t[o-1]=arguments[o];var r=e.length;return _n(t,(function(){for(var o="",n=0;n<r;n++)o+=e[n],t[n]&&(o+=t[n].get());return o}))},t.useMotionValue=Sn,t.usePresence=_,t.useReducedMotion=function(){!On&&function(){if(On=zt(null),"undefined"!=typeof window)if(window.matchMedia){var e=window.matchMedia("(prefers-reduced-motion)"),t=function(){return On.set(e.matches)};e.addListener(t),t()}else On.set(!1)}();var e=r.__read(n.useState(On.get()),2),t=e[0],o=e[1];return Cn(On,o),t},t.useSpring=function(e,t){void 0===t&&(t={});var o=n.useContext(x).isStatic,a=n.useRef(null),i=Sn(te(e)?e.get():e);return n.useMemo((function(){return i.attach((function(e,n){return o?n(e):(a.current&&a.current.stop(),a.current=s.animate(r.__assign(r.__assign({from:i.get(),to:e,velocity:i.getVelocity()},t),{onUpdate:n})),i.get())}))}),Object.values(t)),Cn(e,(function(e){return i.set(parseFloat(e))})),i},t.useTransform=Mn,t.useVelocity=function(e){var t=Sn(e.getVelocity());return n.useEffect((function(){return e.velocityUpdateSubscribers.add((function(e){t.set(e)}))}),[e]),t},t.useViewportScroll=function(){return kn||(kn=jn()),$((function(){!En&&function(){if(En=!0,"undefined"!=typeof window){var e=Tn(kn,Ln);We(window,"scroll",e,{passive:!0}),We(window,"resize",e)}}()}),[]),kn},t.visualElement=Er},"./node_modules/.pnpm/framesync@5.3.0/node_modules/framesync/dist/framesync.cjs.js":(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0});var o=1/60*1e3,r="undefined"!=typeof performance?function(){return performance.now()}:function(){return Date.now()},n="undefined"!=typeof window?function(e){return window.requestAnimationFrame(e)}:function(e){return setTimeout((function(){return e(r())}),o)},a=!0,i=!1,s=!1,l={delta:0,timestamp:0},c=["read","update","preRender","render","postRender"],u=c.reduce((function(e,t){return e[t]=function(e){var t=[],o=[],r=0,n=!1,a=new WeakSet,i={schedule:function(e,i,s){void 0===i&&(i=!1),void 0===s&&(s=!1);var l=s&&n,c=l?t:o;return i&&a.add(e),-1===c.indexOf(e)&&(c.push(e),l&&n&&(r=t.length)),e},cancel:function(e){var t=o.indexOf(e);-1!==t&&o.splice(t,1),a.delete(e)},process:function(s){var l;if(n=!0,t=(l=[o,t])[0],(o=l[1]).length=0,r=t.length)for(var c=0;c<r;c++){var u=t[c];u(s),a.has(u)&&(i.schedule(u),e())}n=!1}};return i}((function(){return i=!0})),e}),{}),d=c.reduce((function(e,t){var o=u[t];return e[t]=function(e,t,r){return void 0===t&&(t=!1),void 0===r&&(r=!1),i||h(),o.schedule(e,t,r)},e}),{}),p=c.reduce((function(e,t){return e[t]=u[t].cancel,e}),{}),m=c.reduce((function(e,t){return e[t]=function(){return u[t].process(l)},e}),{}),f=function(e){return u[e].process(l)},v=function(e){i=!1,l.delta=a?o:Math.max(Math.min(e-l.timestamp,40),1),l.timestamp=e,s=!0,c.forEach(f),s=!1,i&&(a=!1,n(v))},h=function(){i=!0,a=!0,s||n(v)};t.cancelSync=p,t.default=d,t.flushSync=m,t.getFrameData=function(){return l}},"./node_modules/.pnpm/hey-listen@1.0.8/node_modules/hey-listen/dist/hey-listen.es.js":(e,t,o)=>{o.r(t),o.d(t,{invariant:()=>n,warning:()=>r});var r=function(){},n=function(){}},"./node_modules/.pnpm/popmotion@9.3.6/node_modules/popmotion/dist/popmotion.cjs.js":(e,t,o)=>{Object.defineProperty(t,"__esModule",{value:!0});var r=o("./node_modules/.pnpm/tslib@2.6.3/node_modules/tslib/tslib.es6.mjs"),n=o("./node_modules/.pnpm/hey-listen@1.0.8/node_modules/hey-listen/dist/hey-listen.es.js"),a=o("./node_modules/.pnpm/style-value-types@4.1.4/node_modules/style-value-types/dist/valueTypes.cjs.js"),i=o("./node_modules/.pnpm/framesync@5.3.0/node_modules/framesync/dist/framesync.cjs.js");function s(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}var l=s(i),c=function(e,t,o){return Math.min(Math.max(o,e),t)},u=.001,d=.01,p=10,m=.05,f=1;var v=12;function h(e,t){return e*Math.sqrt(1-t*t)}var g=["duration","bounce"],y=["stiffness","damping","mass"];function b(e,t){return t.some((function(t){return void 0!==e[t]}))}function x(e){var t=e.from,o=void 0===t?0:t,a=e.to,i=void 0===a?1:a,s=e.restSpeed,l=void 0===s?2:s,x=e.restDelta,w=r.__rest(e,["from","to","restSpeed","restDelta"]),S={done:!1,value:o},C=function(e){var t=r.__assign({velocity:0,stiffness:100,damping:10,mass:1,isResolvedFromDuration:!1},e);if(!b(e,y)&&b(e,g)){var o=function(e){var t,o,r=e.duration,a=void 0===r?800:r,i=e.bounce,s=void 0===i?.25:i,l=e.velocity,g=void 0===l?0:l,y=e.mass,b=void 0===y?1:y;n.warning(a<=1e3*p,"Spring duration must be 10 seconds or less");var x=1-s;x=c(m,f,x),a=c(d,p,a/1e3),x<1?(t=function(e){var t=e*x,o=t*a,r=t-g,n=h(e,x),i=Math.exp(-o);return u-r/n*i},o=function(e){var o=e*x*a,r=o*g+g,n=Math.pow(x,2)*Math.pow(e,2)*a,i=Math.exp(-o),s=h(Math.pow(e,2),x);return(-t(e)+u>0?-1:1)*((r-n)*i)/s}):(t=function(e){return Math.exp(-e*a)*((e-g)*a+1)-u},o=function(e){return Math.exp(-e*a)*(a*a*(g-e))});var A=function(e,t,o){for(var r=o,n=1;n<v;n++)r-=e(r)/t(r);return r}(t,o,5/a);if(a*=1e3,isNaN(A))return{stiffness:100,damping:10,duration:a};var w=Math.pow(A,2)*b;return{stiffness:w,damping:2*x*Math.sqrt(b*w),duration:a}}(e);(t=r.__assign(r.__assign(r.__assign({},t),o),{velocity:0,mass:1})).isResolvedFromDuration=!0}return t}(w),_=C.stiffness,k=C.damping,R=C.mass,P=C.velocity,M=C.duration,I=C.isResolvedFromDuration,j=A,$=A;function T(){var e=P?-P/1e3:0,t=i-o,r=k/(2*Math.sqrt(_*R)),n=Math.sqrt(_/R)/1e3;if(null!=x||(x=Math.abs(i-o)<=1?.01:.4),r<1){var a=h(n,r);j=function(o){var s=Math.exp(-r*n*o);return i-s*((e+r*n*t)/a*Math.sin(a*o)+t*Math.cos(a*o))},$=function(o){var i=Math.exp(-r*n*o);return r*n*i*(Math.sin(a*o)*(e+r*n*t)/a+t*Math.cos(a*o))-i*(Math.cos(a*o)*(e+r*n*t)-a*t*Math.sin(a*o))}}else if(1===r)j=function(o){return i-Math.exp(-n*o)*(t+(e+n*t)*o)};else{var s=n*Math.sqrt(r*r-1);j=function(o){var a=Math.exp(-r*n*o),l=Math.min(s*o,300);return i-a*((e+r*n*t)*Math.sinh(l)+s*t*Math.cosh(l))/s}}}return T(),{next:function(e){var t=j(e);if(I)S.done=e>=M;else{var o=1e3*$(e),r=Math.abs(o)<=l,n=Math.abs(i-t)<=x;S.done=r&&n}return S.value=S.done?i:t,S},flipTarget:function(){var e;P=-P,o=(e=[i,o])[0],i=e[1],T()}}}x.needsInterpolation=function(e,t){return"string"==typeof e||"string"==typeof t};var A=function(e){return 0},w=function(e,t,o){var r=t-e;return 0===r?1:(o-e)/r},S=function(e,t,o){return-o*e+o*t+e},C=function(e,t,o){var r=e*e,n=t*t;return Math.sqrt(Math.max(0,o*(n-r)+r))},_=[a.hex,a.rgba,a.hsla],k=function(e){return _.find((function(t){return t.test(e)}))},R=function(e){return"'"+e+"' is not an animatable color. Use the equivalent color code instead."},P=function(e,t){var o=k(e),i=k(t);n.invariant(!!o,R(e)),n.invariant(!!i,R(t)),n.invariant(o.transform===i.transform,"Both colors must be hex/RGBA, OR both must be HSLA.");var s=o.parse(e),l=i.parse(t),c=r.__assign({},s),u=o===a.hsla?S:C;return function(e){for(var t in c)"alpha"!==t&&(c[t]=u(s[t],l[t],e));return c.alpha=S(s.alpha,l.alpha,e),o.transform(c)}},M={x:0,y:0,z:0},I=function(e){return"number"==typeof e},j=function(e,t){return function(o){return t(e(o))}},$=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return e.reduce(j)};function T(e,t){return I(e)?function(o){return S(e,t,o)}:a.color.test(e)?P(e,t):B(e,t)}var L=function(e,t){var o=r.__spreadArray([],e),n=o.length,a=e.map((function(e,o){return T(e,t[o])}));return function(e){for(var t=0;t<n;t++)o[t]=a[t](e);return o}},O=function(e,t){var o=r.__assign(r.__assign({},e),t),n={};for(var a in o)void 0!==e[a]&&void 0!==t[a]&&(n[a]=T(e[a],t[a]));return function(e){for(var t in n)o[t]=n[t](e);return o}};function E(e){for(var t=a.complex.parse(e),o=t.length,r=0,n=0,i=0,s=0;s<o;s++)r||"number"==typeof t[s]?r++:void 0!==t[s].hue?i++:n++;return{parsed:t,numNumbers:r,numRGB:n,numHSL:i}}var B=function(e,t){var o=a.complex.createTransformer(t),r=E(e),i=E(t);return n.invariant(r.numHSL===i.numHSL&&r.numRGB===i.numRGB&&r.numNumbers>=i.numNumbers,"Complex values '"+e+"' and '"+t+"' too different to mix. Ensure all colors are of the same type."),$(L(r.parsed,i.parsed),o)},N=function(e,t){return function(o){return S(e,t,o)}};function z(e,t,o){var r=void 0===o?{}:o,i=r.clamp,s=void 0===i||i,l=r.ease,u=r.mixer,d=e.length;n.invariant(d===t.length,"Both input and output ranges must be the same length"),n.invariant(!l||!Array.isArray(l)||l.length===d-1,"Array of easing functions must be of length `input.length - 1`, as it applies to the transitions **between** the defined values."),e[0]>e[d-1]&&(e=[].concat(e),t=[].concat(t),e.reverse(),t.reverse());var p=function(e,t,o){for(var r,n=[],i=o||("number"==typeof(r=e[0])?N:"string"==typeof r?a.color.test(r)?P:B:Array.isArray(r)?L:"object"==typeof r?O:void 0),s=e.length-1,l=0;l<s;l++){var c=i(e[l],e[l+1]);if(t){var u=Array.isArray(t)?t[l]:t;c=$(u,c)}n.push(c)}return n}(t,l,u),m=2===d?function(e,t){var o=e[0],r=e[1],n=t[0];return function(e){return n(w(o,r,e))}}(e,p):function(e,t){var o=e.length,r=o-1;return function(n){var a=0,i=!1;if(n<=e[0]?i=!0:n>=e[r]&&(a=r-1,i=!0),!i){for(var s=1;s<o&&!(e[s]>n||s===r);s++);a=s-1}var l=w(e[a],e[a+1],n);return t[a](l)}}(e,p);return s?function(t){return m(c(e[0],e[d-1],t))}:m}var D=function(e){return function(t){return 1-e(1-t)}},F=function(e){return function(t){return t<=.5?e(2*t)/2:(2-e(2*(1-t)))/2}},W=function(e){return function(t){return Math.pow(t,e)}},V=function(e){return function(t){return t*t*((e+1)*t-e)}},H=function(e){var t=V(e);return function(e){return(e*=2)<1?.5*t(e):.5*(2-Math.pow(2,-10*(e-1)))}},U=4/11,q=8/11,G=function(e){return e},X=W(2),Y=D(X),K=F(X),Z=function(e){return 1-Math.sin(Math.acos(e))},J=D(Z),Q=F(J),ee=V(1.525),te=D(ee),oe=F(ee),re=H(1.525),ne=4356/361,ae=35442/1805,ie=16061/1805,se=function(e){if(1===e||0===e)return e;var t=e*e;return e<U?7.5625*t:e<q?9.075*t-9.9*e+3.4:e<.9?ne*t-ae*e+ie:10.8*e*e-20.52*e+10.72},le=D(se);function ce(e,t){return e.map((function(){return t||K})).splice(0,e.length-1)}function ue(e){var t=e.from,o=void 0===t?0:t,r=e.to,n=void 0===r?1:r,a=e.ease,i=e.offset,s=e.duration,l=void 0===s?300:s,c={done:!1,value:o},u=Array.isArray(n)?n:[o,n],d=function(e,t){return e.map((function(e){return e*t}))}(i&&i.length===u.length?i:function(e){var t=e.length;return e.map((function(e,o){return 0!==o?o/(t-1):0}))}(u),l);function p(){return z(d,u,{ease:Array.isArray(a)?a:ce(u,a)})}var m=p();return{next:function(e){return c.value=m(e),c.done=e>=l,c},flipTarget:function(){u.reverse(),m=p()}}}function de(e){var t=e.velocity,o=void 0===t?0:t,r=e.from,n=void 0===r?0:r,a=e.power,i=void 0===a?.8:a,s=e.timeConstant,l=void 0===s?350:s,c=e.restDelta,u=void 0===c?.5:c,d=e.modifyTarget,p={done:!1,value:n},m=i*o,f=n+m,v=void 0===d?f:d(f);return v!==f&&(m=v-n),{next:function(e){var t=-m*Math.exp(-e/l);return p.done=!(t>u||t<-u),p.value=p.done?v:v+t,p},flipTarget:function(){}}}var pe={keyframes:ue,spring:x,decay:de};function me(e,t,o){return void 0===o&&(o=0),e-t-o}var fe=function(e){var t=function(t){var o=t.delta;return e(o)};return{start:function(){return l.default.update(t,!0)},stop:function(){return i.cancelSync.update(t)}}};function ve(e){var t,o,n,a,i,s=e.from,l=e.autoplay,c=void 0===l||l,u=e.driver,d=void 0===u?fe:u,p=e.elapsed,m=void 0===p?0:p,f=e.repeat,v=void 0===f?0:f,h=e.repeatType,g=void 0===h?"loop":h,y=e.repeatDelay,b=void 0===y?0:y,A=e.onPlay,w=e.onStop,S=e.onComplete,C=e.onRepeat,_=e.onUpdate,k=r.__rest(e,["from","autoplay","driver","elapsed","repeat","repeatType","repeatDelay","onPlay","onStop","onComplete","onRepeat","onUpdate"]),R=k.to,P=0,M=k.duration,I=!1,j=!0,$=function(e){if(Array.isArray(e.to))return ue;if(pe[e.type])return pe[e.type];var t=new Set(Object.keys(e));return t.has("ease")||t.has("duration")&&!t.has("dampingRatio")?ue:t.has("dampingRatio")||t.has("stiffness")||t.has("mass")||t.has("damping")||t.has("restSpeed")||t.has("restDelta")?x:ue}(k);(null===(o=(t=$).needsInterpolation)||void 0===o?void 0:o.call(t,s,R))&&(i=z([0,100],[s,R],{clamp:!1}),s=0,R=100);var T=$(r.__assign(r.__assign({},k),{from:s,to:R}));return c&&(null==A||A(),(n=d((function(e){if(j||(e=-e),m+=e,!I){var t=T.next(Math.max(0,m));a=t.value,i&&(a=i(a)),I=j?t.done:m<=0}null==_||_(a),I&&(0===P&&(null!=M||(M=m)),P<v?function(e,t,o,r){return r?e>=t+o:e<=-o}(m,M,b,j)&&(P++,"reverse"===g?m=function(e,t,o,r){return void 0===o&&(o=0),void 0===r&&(r=!0),r?me(t+-e,t,o):t-(e-t)+o}(m,M,b,j=P%2==0):(m=me(m,M,b),"mirror"===g&&T.flipTarget()),I=!1,C&&C()):(n.stop(),S&&S()))}))).start()),{stop:function(){null==w||w(),n.stop()}}}function he(e,t){return t?e*(1e3/t):0}var ge=function(e){return 180*e/Math.PI},ye=function(e){return e},be=function(e){return void 0===e&&(e=ye),function(t,o,r){var n=o-r,a=-(0-t+1)*(0-e(Math.abs(n)));return n<=0?o+a:o-a}},xe=be(),Ae=be(Math.sqrt),we=function(e){return e*Math.PI/180},Se=function(e){return e.hasOwnProperty("x")&&e.hasOwnProperty("y")},Ce=function(e){return Se(e)&&e.hasOwnProperty("z")},_e=function(e,t){return Math.abs(e-t)},ke=function(e,t){return void 0===t&&(t=2),t=Math.pow(10,t),Math.round(e*t)/t},Re=function(e,t,o,r){return void 0===r&&(r=0),ke(e+o*(t-e)/Math.max(r,o))},Pe=function(e,t){return 1-3*t+3*e},Me=function(e,t){return 3*t-6*e},Ie=function(e){return 3*e},je=function(e,t,o){return((Pe(t,o)*e+Me(t,o))*e+Ie(t))*e},$e=function(e,t,o){return 3*Pe(t,o)*e*e+2*Me(t,o)*e+Ie(t)},Te=.1;t.angle=function(e,t){return void 0===t&&(t=M),ge(Math.atan2(t.y-e.y,t.x-e.x))},t.animate=ve,t.anticipate=re,t.applyOffset=function(e,t){var o=!0;return void 0===t&&(t=e,o=!1),function(r){return o?r-e+t:(e=r,o=!0,t)}},t.attract=xe,t.attractExpo=Ae,t.backIn=ee,t.backInOut=oe,t.backOut=te,t.bounceIn=le,t.bounceInOut=function(e){return e<.5?.5*(1-se(1-2*e)):.5*se(2*e-1)+.5},t.bounceOut=se,t.circIn=Z,t.circInOut=Q,t.circOut=J,t.clamp=c,t.createAnticipate=H,t.createAttractor=be,t.createBackIn=V,t.createExpoIn=W,t.cubicBezier=function(e,t,o,r){if(e===t&&o===r)return G;for(var n=new Float32Array(11),a=0;a<11;++a)n[a]=je(a*Te,e,o);return function(a){return 0===a||1===a?a:je(function(t){for(var r=0,a=1;10!==a&&n[a]<=t;++a)r+=Te;--a;var i=r+(t-n[a])/(n[a+1]-n[a])*Te,s=$e(i,e,o);return s>=.001?function(e,t,o,r){for(var n=0;n<8;++n){var a=$e(t,o,r);if(0===a)return t;t-=(je(t,o,r)-e)/a}return t}(t,i,e,o):0===s?i:function(e,t,o,r,n){var a,i,s=0;do{(a=je(i=t+(o-t)/2,r,n)-e)>0?o=i:t=i}while(Math.abs(a)>1e-7&&++s<10);return i}(t,r,r+Te,e,o)}(a),t,r)}},t.decay=de,t.degreesToRadians=we,t.distance=function(e,t){if(I(e)&&I(t))return _e(e,t);if(Se(e)&&Se(t)){var o=_e(e.x,t.x),r=_e(e.y,t.y),n=Ce(e)&&Ce(t)?_e(e.z,t.z):0;return Math.sqrt(Math.pow(o,2)+Math.pow(r,2)+Math.pow(n,2))}},t.easeIn=X,t.easeInOut=K,t.easeOut=Y,t.inertia=function(e){var t,o=e.from,n=void 0===o?0:o,a=e.velocity,s=void 0===a?0:a,l=e.min,c=e.max,u=e.power,d=void 0===u?.8:u,p=e.timeConstant,m=void 0===p?750:p,f=e.bounceStiffness,v=void 0===f?500:f,h=e.bounceDamping,g=void 0===h?10:h,y=e.restDelta,b=void 0===y?1:y,x=e.modifyTarget,A=e.driver,w=e.onUpdate,S=e.onComplete;function C(e){return void 0!==l&&e<l||void 0!==c&&e>c}function _(e){return void 0===l?c:void 0===c||Math.abs(l-e)<Math.abs(c-e)?l:c}function k(e){null==t||t.stop(),t=ve(r.__assign(r.__assign({},e),{driver:A,onUpdate:function(t){var o;null==w||w(t),null===(o=e.onUpdate)||void 0===o||o.call(e,t)},onComplete:S}))}function R(e){k(r.__assign({type:"spring",stiffness:v,damping:g,restDelta:b},e))}if(C(n))R({from:n,velocity:s,to:_(n)});else{var P=d*s+n;void 0!==x&&(P=x(P));var M,I,j=_(P),$=j===l?-1:1;k({type:"decay",from:n,velocity:s,timeConstant:m,power:d,restDelta:b,modifyTarget:x,onUpdate:C(P)?function(e){M=I,I=e,s=he(e-M,i.getFrameData().delta),(1===$&&e>j||-1===$&&e<j)&&R({from:e,to:j,velocity:s})}:void 0})}return{stop:function(){return null==t?void 0:t.stop()}}},t.interpolate=z,t.isPoint=Se,t.isPoint3D=Ce,t.keyframes=ue,t.linear=G,t.mirrorEasing=F,t.mix=S,t.mixColor=P,t.mixComplex=B,t.pipe=$,t.pointFromVector=function(e,t,o){return t=we(t),{x:o*Math.cos(t)+e.x,y:o*Math.sin(t)+e.y}},t.progress=w,t.radiansToDegrees=ge,t.reverseEasing=D,t.smooth=function(e){void 0===e&&(e=50);var t=0,o=0;return function(r){var n=i.getFrameData().timestamp,a=n!==o?n-o:0,s=a?Re(t,r,a,e):t;return o=n,t=s,s}},t.smoothFrame=Re,t.snap=function(e){if("number"==typeof e)return function(t){return Math.round(t/e)*e};var t=0,o=e.length;return function(r){var n=Math.abs(e[0]-r);for(t=1;t<o;t++){var a=e[t],i=Math.abs(a-r);if(0===i)return a;if(i>n)return e[t-1];if(t===o-1)return a;n=i}}},t.spring=x,t.steps=function(e,t){return void 0===t&&(t="end"),function(o){var r=(o="end"===t?Math.min(o,.999):Math.max(o,.001))*e,n="end"===t?Math.floor(r):Math.ceil(r);return c(0,1,n/e)}},t.toDecimal=ke,t.velocityPerFrame=function(e,t){return e/(1e3/t)},t.velocityPerSecond=he,t.wrap=function(e,t,o){var r=t-e;return((o-e)%r+r)%r+e}},"./node_modules/.pnpm/react-material-ui-carousel@3.4.2_e3lerudwt3ipr7lpe2pscoafye/node_modules/react-material-ui-carousel/dist/components/Carousel.js":function(e,t,o){var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var t,o=1,r=arguments.length;o<r;o++)for(var n in t=arguments[o])Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e},r.apply(this,arguments)},n=this&&this.__createBinding||(Object.create?function(e,t,o,r){void 0===r&&(r=o),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[o]}})}:function(e,t,o,r){void 0===r&&(r=o),e[r]=t[o]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),i=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var o in e)"default"!==o&&Object.prototype.hasOwnProperty.call(e,o)&&n(t,e,o);return a(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.Carousel=void 0;var s=o("./node_modules/.pnpm/react-material-ui-carousel@3.4.2_e3lerudwt3ipr7lpe2pscoafye/node_modules/react-material-ui-carousel/dist/components/CarouselItem.js"),l=o("./node_modules/.pnpm/react-material-ui-carousel@3.4.2_e3lerudwt3ipr7lpe2pscoafye/node_modules/react-material-ui-carousel/dist/components/Indicators.js"),c=o("./node_modules/.pnpm/react-material-ui-carousel@3.4.2_e3lerudwt3ipr7lpe2pscoafye/node_modules/react-material-ui-carousel/dist/components/util.js"),u=o("./node_modules/.pnpm/react-material-ui-carousel@3.4.2_e3lerudwt3ipr7lpe2pscoafye/node_modules/react-material-ui-carousel/dist/components/Styled.js"),d=i(o("./node_modules/.pnpm/react@18.3.1/node_modules/react/index.js"));t.Carousel=function(e){var t=(0,d.useState)({active:0,prevActive:0,next:!0}),o=t[0],n=t[1],a=(0,d.useState)(),i=a[0],p=a[1],m=(0,d.useState)(!1),f=m[0],v=m[1],h=(0,c.sanitizeProps)(e);(0,d.useEffect)((function(){var e=h.index,t=h.changeOnFirstRender;b(e,!0,t)}),[h.index]),(0,c.useInterval)((function(){h.autoPlay&&!f&&g(void 0)}),h.interval);var g=function(e){var t=h.children,r=h.cycleNavigation,n=Array.isArray(t)?t.length-1:0,a=o.active+1>n?r?0:o.active:o.active+1;b(a,!0),e&&e.stopPropagation()},y=function(e){var t=h.children,r=h.cycleNavigation,n=Array.isArray(t)?t.length-1:0,a=o.active-1<0?r?n:o.active:o.active-1;b(a,!1),e&&e.stopPropagation()},b=function(e,t,r){void 0===r&&(r=!0);var a=h.onChange,i=h.children,s=h.strictIndexing;Array.isArray(i)?(s&&e>i.length-1&&(e=i.length-1),s&&e<0&&(e=0)):e=0,r&&(void 0!==t&&(t?h.next(e,o.active):h.prev(e,o.active)),a(e,o.active)),void 0===t&&(t=e>o.active),n({active:e,prevActive:o.active,next:t})},x=h.children,A=h.sx,w=h.className,S=h.height,C=h.stopAutoPlayOnHover,_=h.animation,k=h.duration,R=h.swipe,P=h.navButtonsAlwaysInvisible,M=h.navButtonsAlwaysVisible,I=h.cycleNavigation,j=h.fullHeightHover,$=h.navButtonsProps,T=h.navButtonsWrapperProps,L=h.NavButton,O=h.NextIcon,E=h.PrevIcon,B=h.indicators,N=h.indicatorContainerProps,z=h.indicatorIconButtonProps,D=h.activeIndicatorIconButtonProps,F=h.IndicatorIcon,W=function(e){if(void 0===e&&(e=!0),I)return!0;var t=Array.isArray(x)?x.length-1:0;return!(e&&o.active===t||!e&&0===o.active)};return d.default.createElement(u.StyledRoot,{sx:A,className:w,onMouseOver:function(){C&&v(!0)},onMouseOut:function(){C&&v(!1)},onFocus:function(){C&&v(!0)},onBlur:function(){C&&v(!1)}},d.default.createElement(u.StyledItemWrapper,{style:{height:S||i}},Array.isArray(x)?x.map((function(e,t){return d.default.createElement(s.CarouselItem,{key:"carousel-item"+t,state:o,index:t,maxIndex:x.length-1,child:e,animation:_,duration:k,swipe:R,next:g,prev:y,height:S,setHeight:p})})):d.default.createElement(s.CarouselItem,{key:"carousel-item0",state:o,index:0,maxIndex:0,child:x,animation:_,duration:k,height:S,setHeight:p})),!P&&W(!0)&&d.default.createElement(u.StyledButtonWrapper,r({$next:!0,$prev:!1,$fullHeightHover:j},T),void 0!==L?L(r({onClick:g,next:!0,prev:!1},$)):d.default.createElement(u.StyledIconButton,r({$alwaysVisible:M,$fullHeightHover:j,onClick:g,"aria-label":"Next"},$),O)),!P&&W(!1)&&d.default.createElement(u.StyledButtonWrapper,r({$next:!1,$prev:!0,$fullHeightHover:j},T),void 0!==L?L(r({onClick:y,next:!1,prev:!0},$)):d.default.createElement(u.StyledIconButton,r({$alwaysVisible:M,$fullHeightHover:j,onClick:y,"aria-label":"Previous"},$),E)),B?d.default.createElement(l.Indicators,{length:Array.isArray(x)?x.length:0,active:o.active,press:b,indicatorContainerProps:N,indicatorIconButtonProps:z,activeIndicatorIconButtonProps:D,IndicatorIcon:F}):null)},t.default=t.Carousel},"./node_modules/.pnpm/react-material-ui-carousel@3.4.2_e3lerudwt3ipr7lpe2pscoafye/node_modules/react-material-ui-carousel/dist/components/CarouselItem.js":function(e,t,o){var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var t,o=1,r=arguments.length;o<r;o++)for(var n in t=arguments[o])Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e},r.apply(this,arguments)},n=this&&this.__createBinding||(Object.create?function(e,t,o,r){void 0===r&&(r=o),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[o]}})}:function(e,t,o,r){void 0===r&&(r=o),e[r]=t[o]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),i=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var o in e)"default"!==o&&Object.prototype.hasOwnProperty.call(e,o)&&n(t,e,o);return a(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.CarouselItem=void 0;var s=o("./node_modules/.pnpm/framer-motion@4.1.17_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/framer-motion/dist/framer-motion.cjs.js"),l=i(o("./node_modules/.pnpm/react@18.3.1/node_modules/react/index.js")),c=o("./node_modules/.pnpm/react-material-ui-carousel@3.4.2_e3lerudwt3ipr7lpe2pscoafye/node_modules/react-material-ui-carousel/dist/components/Styled.js");t.CarouselItem=function(e){var t=e.animation,o=e.next,n=e.prev,a=e.swipe,i=e.state,u=e.index,d=e.maxIndex,p=e.duration,m=e.child,f=e.height,v=e.setHeight,h="slide"===t,g="fade"===t,y={drag:"x",layout:!0,onDragEnd:function(e,t){a&&(t.offset.x>0?n&&n():t.offset.x<0&&o&&o(),e.stopPropagation())},dragElastic:0,dragConstraints:{left:0,right:0}},b=(0,l.useRef)(null),x=(0,l.useCallback)((function(){u===i.active&&b.current&&(0===b.current.offsetHeight?setTimeout((function(){return x()}),100):v(b.current.offsetHeight))}),[v,i.active,u,b]);(0,l.useEffect)((function(){x()}),[x]);var A={leftwardExit:{x:h?"-100%":void 0,opacity:g?0:void 0,zIndex:0},leftOut:{x:h?"-100%":void 0,opacity:g?0:void 0,display:"none",zIndex:0},rightwardExit:{x:h?"100%":void 0,opacity:g?0:void 0,zIndex:0},rightOut:{x:h?"100%":void 0,opacity:g?0:void 0,display:"none",zIndex:0},center:{x:0,opacity:1,zIndex:1}},w=i.active,S=i.next,C=i.prevActive,_="center";return u===w?_="center":u===C?(_=S?"leftwardExit":"rightwardExit",w===d&&0===u&&(_="rightwardExit"),0===w&&u===d&&(_="leftwardExit")):(_=u<w?"leftOut":"rightOut",w===d&&0===u&&(_="rightOut"),0===w&&u===d&&(_="leftOut")),p/=1e3,l.default.createElement(c.StyledItem,null,l.default.createElement(s.AnimatePresence,{custom:S},l.default.createElement(s.motion.div,r({},a&&y,{style:{height:"100%"}}),l.default.createElement(s.motion.div,{custom:S,variants:A,animate:_,transition:{x:{type:"tween",duration:p,delay:0},opacity:{duration:p}},style:{position:"relative",height:"100%"}},l.default.createElement("div",{ref:b,style:{height:f}},m)))))}},"./node_modules/.pnpm/react-material-ui-carousel@3.4.2_e3lerudwt3ipr7lpe2pscoafye/node_modules/react-material-ui-carousel/dist/components/Indicators.js":function(e,t,o){var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var t,o=1,r=arguments.length;o<r;o++)for(var n in t=arguments[o])Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e},r.apply(this,arguments)},n=this&&this.__createBinding||(Object.create?function(e,t,o,r){void 0===r&&(r=o),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[o]}})}:function(e,t,o,r){void 0===r&&(r=o),e[r]=t[o]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),i=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var o in e)"default"!==o&&Object.prototype.hasOwnProperty.call(e,o)&&n(t,e,o);return a(t,e),t},s=this&&this.__rest||function(e,t){var o={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(o[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var n=0;for(r=Object.getOwnPropertySymbols(e);n<r.length;n++)t.indexOf(r[n])<0&&Object.prototype.propertyIsEnumerable.call(e,r[n])&&(o[r[n]]=e[r[n]])}return o};Object.defineProperty(t,"__esModule",{value:!0}),t.Indicators=void 0;var l=i(o("./node_modules/.pnpm/react@18.3.1/node_modules/react/index.js")),c=o("./node_modules/.pnpm/react-material-ui-carousel@3.4.2_e3lerudwt3ipr7lpe2pscoafye/node_modules/react-material-ui-carousel/dist/components/Styled.js");t.Indicators=function(e){for(var t=(0,l.useMemo)((function(){return void 0!==e.IndicatorIcon?e.IndicatorIcon:l.default.createElement(c.StyledFiberManualRecordIcon,null)}),[e.IndicatorIcon]),o=(0,l.useCallback)((function(t){for(;t.length<e.length;){var o=0;t.push(t[o]),o+=1}}),[e.length]),n=e.indicatorIconButtonProps,a=n.className,i=n.style,u=s(n,["className","style"]),d=e.activeIndicatorIconButtonProps,p=d.className,m=d.style,f=s(d,["className","style"]),v=[],h=function(n){var s=n===e.active?a+" "+p:""+a,d=n===e.active?Object.assign({},i,m):i,h=n===e.active?Object.assign({},u,f):u;void 0===h["aria-label"]&&(h["aria-label"]="carousel indicator");var g=function(t){return l.default.createElement(c.StyledIndicatorIconButton,r({$active:n===e.active,key:n,className:s,style:d,onClick:function(){e.press(n)}},h,{"aria-label":h["aria-label"]+" "+(n+1)}),t)};Array.isArray(t)?v.push(g(t[n]))&&o(t):v.push(g(t))},g=0;g<e.length;g++)h(g);var y=e.indicatorContainerProps,b=y.className,x=y.style,A=s(y,["className","style"]);return l.default.createElement(c.StyledIndicators,r({className:b,style:x},A),v)}},"./node_modules/.pnpm/react-material-ui-carousel@3.4.2_e3lerudwt3ipr7lpe2pscoafye/node_modules/react-material-ui-carousel/dist/components/Styled.js":function(e,t,o){var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var t,o=1,r=arguments.length;o<r;o++)for(var n in t=arguments[o])Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e},r.apply(this,arguments)},n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.StyledButtonWrapper=t.StyledIconButton=t.StyledIndicatorIconButton=t.StyledFiberManualRecordIcon=t.StyledIndicators=t.StyledItemWrapper=t.StyledItem=t.StyledRoot=void 0;var a=n(o("./node_modules/.pnpm/@mui+icons-material@5.16.4_@mui+material@5.16.4_@emotion+react@11.13.0_@types+react@18.3.3_re_nbdaqwfqqipzti35upcsmwmgry/node_modules/@mui/icons-material/FiberManualRecord.js")),i=o("./node_modules/.pnpm/@mui+material@5.16.4_@emotion+react@11.13.0_@types+react@18.3.3_react@18.3.1__@emotion+styled_brxipnv4yvqheosgxcawdxdyay/node_modules/@mui/material/index.js");t.StyledRoot=(0,i.styled)("div")({position:"relative",overflow:"hidden"}),t.StyledItem=(0,i.styled)("div")({position:"absolute",height:"100%",width:"100%"}),t.StyledItemWrapper=(0,i.styled)("div")({position:"relative",width:"100%",height:"100%"}),t.StyledIndicators=(0,i.styled)("div")({width:"100%",marginTop:"10px",textAlign:"center"}),t.StyledFiberManualRecordIcon=(0,i.styled)(a.default)({fontSize:"15px"}),t.StyledIndicatorIconButton=(0,i.styled)(i.IconButton,{shouldForwardProp:function(e){return!e.startsWith("$")}})((function(e){var t=e.$active;return{cursor:"pointer",transition:"200ms",padding:0,color:t?"#494949":"#afafaf","&:hover":{color:t?"#494949":"#1f1f1f"},"&:active":{color:t?"#494949":"#1f1f1f"}}})),t.StyledIconButton=(0,i.styled)(i.IconButton,{shouldForwardProp:function(e){return!e.startsWith("$")}})((function(e){return{margin:"0 10px",position:"relative",backgroundColor:"#494949",top:"calc(50% - 20px) !important",color:"white",fontSize:"30px",transition:"200ms",cursor:"pointer",opacity:e.$alwaysVisible?"1":"0","&:hover":{opacity:"0.6 !important"}}})),t.StyledButtonWrapper=(0,i.styled)("div",{shouldForwardProp:function(e){return!e.startsWith("$")}})((function(e){var t=e.$next,o=e.$prev,n=e.$fullHeightHover;return r(r(r({position:"absolute",height:"100px",backgroundColor:"transparent",zIndex:1,top:"calc(50% - 70px)","&:hover":{"& button":{backgroundColor:"black",filter:"brightness(120%)",opacity:"0.4"}}},n?{height:"100%",top:"0"}:void 0),t?{right:0}:void 0),o?{left:0}:void 0)}))},"./node_modules/.pnpm/react-material-ui-carousel@3.4.2_e3lerudwt3ipr7lpe2pscoafye/node_modules/react-material-ui-carousel/dist/components/util.js":function(e,t,o){var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var t,o=1,r=arguments.length;o<r;o++)for(var n in t=arguments[o])Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e},r.apply(this,arguments)},n=this&&this.__createBinding||(Object.create?function(e,t,o,r){void 0===r&&(r=o),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[o]}})}:function(e,t,o,r){void 0===r&&(r=o),e[r]=t[o]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),i=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var o in e)"default"!==o&&Object.prototype.hasOwnProperty.call(e,o)&&n(t,e,o);return a(t,e),t},s=this&&this.__rest||function(e,t){var o={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(o[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var n=0;for(r=Object.getOwnPropertySymbols(e);n<r.length;n++)t.indexOf(r[n])<0&&Object.prototype.propertyIsEnumerable.call(e,r[n])&&(o[r[n]]=e[r[n]])}return o},l=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.useInterval=t.sanitizeProps=t.sanitizeNavProps=void 0;var c=l(o("./node_modules/.pnpm/@mui+icons-material@5.16.4_@mui+material@5.16.4_@emotion+react@11.13.0_@types+react@18.3.3_re_nbdaqwfqqipzti35upcsmwmgry/node_modules/@mui/icons-material/NavigateBefore.js")),u=l(o("./node_modules/.pnpm/@mui+icons-material@5.16.4_@mui+material@5.16.4_@emotion+react@11.13.0_@types+react@18.3.3_re_nbdaqwfqqipzti35upcsmwmgry/node_modules/@mui/icons-material/NavigateNext.js")),d=i(o("./node_modules/.pnpm/react@18.3.1/node_modules/react/index.js"));t.sanitizeNavProps=function(e){var t=e||{},o=(t.className,t.style,s(t,["className","style"]));return r(void 0!==e?{style:void 0!==e.style?e.style:{},className:void 0!==e.className?e.className:""}:{style:{},className:""},o)},t.sanitizeProps=function(e){var o=void 0!==e.animation?e.animation:"fade",r=void 0!==e.duration?e.duration:"fade"===o?500:200;return{sx:void 0!==e.sx?e.sx:{},className:void 0!==e.className?e.className:"",children:e.children?e.children:[],height:e.height,index:void 0!==e.index?e.index:0,strictIndexing:void 0===e.strictIndexing||e.strictIndexing,autoPlay:void 0===e.autoPlay||e.autoPlay,stopAutoPlayOnHover:void 0===e.stopAutoPlayOnHover||e.stopAutoPlayOnHover,interval:void 0!==e.interval?e.interval:4e3,animation:o,duration:r,swipe:void 0===e.swipe||e.swipe,navButtonsAlwaysInvisible:void 0!==e.navButtonsAlwaysInvisible&&e.navButtonsAlwaysInvisible,navButtonsAlwaysVisible:void 0!==e.navButtonsAlwaysVisible&&e.navButtonsAlwaysVisible,cycleNavigation:void 0===e.cycleNavigation||e.cycleNavigation,fullHeightHover:void 0===e.fullHeightHover||e.fullHeightHover,navButtonsWrapperProps:(0,t.sanitizeNavProps)(e.navButtonsWrapperProps),navButtonsProps:(0,t.sanitizeNavProps)(e.navButtonsProps),NavButton:e.NavButton,NextIcon:void 0!==e.NextIcon?e.NextIcon:d.default.createElement(u.default,null),PrevIcon:void 0!==e.PrevIcon?e.PrevIcon:d.default.createElement(c.default,null),indicators:void 0===e.indicators||e.indicators,indicatorContainerProps:(0,t.sanitizeNavProps)(e.indicatorContainerProps),indicatorIconButtonProps:(0,t.sanitizeNavProps)(e.indicatorIconButtonProps),activeIndicatorIconButtonProps:(0,t.sanitizeNavProps)(e.activeIndicatorIconButtonProps),IndicatorIcon:e.IndicatorIcon,onChange:void 0!==e.onChange?e.onChange:function(){},changeOnFirstRender:void 0!==e.changeOnFirstRender&&e.changeOnFirstRender,next:void 0!==e.next?e.next:function(){},prev:void 0!==e.prev?e.prev:function(){}}},t.useInterval=function(e,t){var o=(0,d.useRef)((function(){}));(0,d.useEffect)((function(){o.current=e}),[e]),(0,d.useEffect)((function(){if(null!==t){var e=setInterval((function(){o.current()}),t);return function(){return clearInterval(e)}}return function(){}}),[t])}},"./node_modules/.pnpm/react-material-ui-carousel@3.4.2_e3lerudwt3ipr7lpe2pscoafye/node_modules/react-material-ui-carousel/dist/index.js":function(e,t,o){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var n=r(o("./node_modules/.pnpm/react-material-ui-carousel@3.4.2_e3lerudwt3ipr7lpe2pscoafye/node_modules/react-material-ui-carousel/dist/components/Carousel.js"));t.default=n.default},"./node_modules/.pnpm/style-value-types@4.1.4/node_modules/style-value-types/dist/valueTypes.cjs.js":(e,t,o)=>{Object.defineProperty(t,"__esModule",{value:!0});var r=o("./node_modules/.pnpm/tslib@2.6.3/node_modules/tslib/tslib.es6.mjs"),n=function(e,t){return function(o){return Math.max(Math.min(o,t),e)}},a=function(e){return e%1?Number(e.toFixed(5)):e},i=/(-)?([\d]*\.?[\d])+/g,s=/(#[0-9a-f]{6}|#[0-9a-f]{3}|#(?:[0-9a-f]{2}){2,4}|(rgb|hsl)a?\((-?[\d\.]+%?[,\s]+){2,3}\s*\/*\s*[\d\.]+%?\))/gi,l=/^(#[0-9a-f]{3}|#(?:[0-9a-f]{2}){2,4}|(rgb|hsl)a?\((-?[\d\.]+%?[,\s]+){2,3}\s*\/*\s*[\d\.]+%?\))$/i;function c(e){return"string"==typeof e}var u={test:function(e){return"number"==typeof e},parse:parseFloat,transform:function(e){return e}},d=r.__assign(r.__assign({},u),{transform:n(0,1)}),p=r.__assign(r.__assign({},u),{default:1}),m=function(e){return{test:function(t){return c(t)&&t.endsWith(e)&&1===t.split(" ").length},parse:parseFloat,transform:function(t){return""+t+e}}},f=m("deg"),v=m("%"),h=m("px"),g=m("vh"),y=m("vw"),b=r.__assign(r.__assign({},v),{parse:function(e){return v.parse(e)/100},transform:function(e){return v.transform(100*e)}}),x=function(e,t){return function(o){return Boolean(c(o)&&l.test(o)&&o.startsWith(e)||t&&Object.prototype.hasOwnProperty.call(o,t))}},A=function(e,t,o){return function(r){var n;if(!c(r))return r;var a=r.match(i),s=a[0],l=a[1],u=a[2],d=a[3];return(n={})[e]=parseFloat(s),n[t]=parseFloat(l),n[o]=parseFloat(u),n.alpha=void 0!==d?parseFloat(d):1,n}},w={test:x("hsl","hue"),parse:A("hue","saturation","lightness"),transform:function(e){var t=e.hue,o=e.saturation,r=e.lightness,n=e.alpha,i=void 0===n?1:n;return"hsla("+Math.round(t)+", "+v.transform(a(o))+", "+v.transform(a(r))+", "+a(d.transform(i))+")"}},S=n(0,255),C=r.__assign(r.__assign({},u),{transform:function(e){return Math.round(S(e))}}),_={test:x("rgb","red"),parse:A("red","green","blue"),transform:function(e){var t=e.red,o=e.green,r=e.blue,n=e.alpha,i=void 0===n?1:n;return"rgba("+C.transform(t)+", "+C.transform(o)+", "+C.transform(r)+", "+a(d.transform(i))+")"}},k={test:x("#"),parse:function(e){var t="",o="",r="",n="";return e.length>5?(t=e.substr(1,2),o=e.substr(3,2),r=e.substr(5,2),n=e.substr(7,2)):(t=e.substr(1,1),o=e.substr(2,1),r=e.substr(3,1),n=e.substr(4,1),t+=t,o+=o,r+=r,n+=n),{red:parseInt(t,16),green:parseInt(o,16),blue:parseInt(r,16),alpha:n?parseInt(n,16)/255:1}},transform:_.transform},R={test:function(e){return _.test(e)||k.test(e)||w.test(e)},parse:function(e){return _.test(e)?_.parse(e):w.test(e)?w.parse(e):k.parse(e)},transform:function(e){return c(e)?e:e.hasOwnProperty("red")?_.transform(e):w.transform(e)}},P="${c}",M="${n}";function I(e){var t=[],o=0,r=e.match(s);r&&(o=r.length,e=e.replace(s,P),t.push.apply(t,r.map(R.parse)));var n=e.match(i);return n&&(e=e.replace(i,M),t.push.apply(t,n.map(u.parse))),{values:t,numColors:o,tokenised:e}}function j(e){return I(e).values}function $(e){var t=I(e),o=t.values,r=t.numColors,n=t.tokenised,i=o.length;return function(e){for(var t=n,o=0;o<i;o++)t=t.replace(o<r?P:M,o<r?R.transform(e[o]):a(e[o]));return t}}var T=function(e){return"number"==typeof e?0:e},L={test:function(e){var t,o,r,n;return isNaN(e)&&c(e)&&(null!==(o=null===(t=e.match(i))||void 0===t?void 0:t.length)&&void 0!==o?o:0)+(null!==(n=null===(r=e.match(s))||void 0===r?void 0:r.length)&&void 0!==n?n:0)>0},parse:j,createTransformer:$,getAnimatableNone:function(e){var t=j(e);return $(e)(t.map(T))}},O=new Set(["brightness","contrast","saturate","opacity"]);function E(e){var t=e.slice(0,-1).split("("),o=t[0],r=t[1];if("drop-shadow"===o)return e;var n=(r.match(i)||[])[0];if(!n)return e;var a=r.replace(n,""),s=O.has(o)?1:0;return n!==r&&(s*=100),o+"("+s+a+")"}var B=/([a-z-]*)\(.*?\)/g,N=r.__assign(r.__assign({},L),{getAnimatableNone:function(e){var t=e.match(B);return t?t.map(E).join(" "):e}});t.alpha=d,t.color=R,t.complex=L,t.degrees=f,t.filter=N,t.hex=k,t.hsla=w,t.number=u,t.percent=v,t.progressPercentage=b,t.px=h,t.rgbUnit=C,t.rgba=_,t.scale=p,t.vh=g,t.vw=y},"./node_modules/.pnpm/tslib@2.6.3/node_modules/tslib/tslib.es6.mjs":(e,t,o)=>{o.r(t),o.d(t,{__addDisposableResource:()=>L,__assign:()=>a,__asyncDelegator:()=>_,__asyncGenerator:()=>C,__asyncValues:()=>k,__await:()=>S,__awaiter:()=>f,__classPrivateFieldGet:()=>j,__classPrivateFieldIn:()=>T,__classPrivateFieldSet:()=>$,__createBinding:()=>h,__decorate:()=>s,__disposeResources:()=>E,__esDecorate:()=>c,__exportStar:()=>g,__extends:()=>n,__generator:()=>v,__importDefault:()=>I,__importStar:()=>M,__makeTemplateObject:()=>R,__metadata:()=>m,__param:()=>l,__propKey:()=>d,__read:()=>b,__rest:()=>i,__runInitializers:()=>u,__setFunctionName:()=>p,__spread:()=>x,__spreadArray:()=>w,__spreadArrays:()=>A,__values:()=>y,default:()=>B});var r=function(e,t){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])},r(e,t)};function n(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function o(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(o.prototype=t.prototype,new o)}var a=function(){return a=Object.assign||function(e){for(var t,o=1,r=arguments.length;o<r;o++)for(var n in t=arguments[o])Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e},a.apply(this,arguments)};function i(e,t){var o={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(o[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var n=0;for(r=Object.getOwnPropertySymbols(e);n<r.length;n++)t.indexOf(r[n])<0&&Object.prototype.propertyIsEnumerable.call(e,r[n])&&(o[r[n]]=e[r[n]])}return o}function s(e,t,o,r){var n,a=arguments.length,i=a<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,o):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)i=Reflect.decorate(e,t,o,r);else for(var s=e.length-1;s>=0;s--)(n=e[s])&&(i=(a<3?n(i):a>3?n(t,o,i):n(t,o))||i);return a>3&&i&&Object.defineProperty(t,o,i),i}function l(e,t){return function(o,r){t(o,r,e)}}function c(e,t,o,r,n,a){function i(e){if(void 0!==e&&"function"!=typeof e)throw new TypeError("Function expected");return e}for(var s,l=r.kind,c="getter"===l?"get":"setter"===l?"set":"value",u=!t&&e?r.static?e:e.prototype:null,d=t||(u?Object.getOwnPropertyDescriptor(u,r.name):{}),p=!1,m=o.length-1;m>=0;m--){var f={};for(var v in r)f[v]="access"===v?{}:r[v];for(var v in r.access)f.access[v]=r.access[v];f.addInitializer=function(e){if(p)throw new TypeError("Cannot add initializers after decoration has completed");a.push(i(e||null))};var h=(0,o[m])("accessor"===l?{get:d.get,set:d.set}:d[c],f);if("accessor"===l){if(void 0===h)continue;if(null===h||"object"!=typeof h)throw new TypeError("Object expected");(s=i(h.get))&&(d.get=s),(s=i(h.set))&&(d.set=s),(s=i(h.init))&&n.unshift(s)}else(s=i(h))&&("field"===l?n.unshift(s):d[c]=s)}u&&Object.defineProperty(u,r.name,d),p=!0}function u(e,t,o){for(var r=arguments.length>2,n=0;n<t.length;n++)o=r?t[n].call(e,o):t[n].call(e);return r?o:void 0}function d(e){return"symbol"==typeof e?e:"".concat(e)}function p(e,t,o){return"symbol"==typeof t&&(t=t.description?"[".concat(t.description,"]"):""),Object.defineProperty(e,"name",{configurable:!0,value:o?"".concat(o," ",t):t})}function m(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)}function f(e,t,o,r){return new(o||(o=Promise))((function(n,a){function i(e){try{l(r.next(e))}catch(e){a(e)}}function s(e){try{l(r.throw(e))}catch(e){a(e)}}function l(e){var t;e.done?n(e.value):(t=e.value,t instanceof o?t:new o((function(e){e(t)}))).then(i,s)}l((r=r.apply(e,t||[])).next())}))}function v(e,t){var o,r,n,a,i={label:0,sent:function(){if(1&n[0])throw n[1];return n[1]},trys:[],ops:[]};return a={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function s(s){return function(l){return function(s){if(o)throw new TypeError("Generator is already executing.");for(;a&&(a=0,s[0]&&(i=0)),i;)try{if(o=1,r&&(n=2&s[0]?r.return:s[0]?r.throw||((n=r.return)&&n.call(r),0):r.next)&&!(n=n.call(r,s[1])).done)return n;switch(r=0,n&&(s=[2&s[0],n.value]),s[0]){case 0:case 1:n=s;break;case 4:return i.label++,{value:s[1],done:!1};case 5:i.label++,r=s[1],s=[0];continue;case 7:s=i.ops.pop(),i.trys.pop();continue;default:if(!((n=(n=i.trys).length>0&&n[n.length-1])||6!==s[0]&&2!==s[0])){i=0;continue}if(3===s[0]&&(!n||s[1]>n[0]&&s[1]<n[3])){i.label=s[1];break}if(6===s[0]&&i.label<n[1]){i.label=n[1],n=s;break}if(n&&i.label<n[2]){i.label=n[2],i.ops.push(s);break}n[2]&&i.ops.pop(),i.trys.pop();continue}s=t.call(e,i)}catch(e){s=[6,e],r=0}finally{o=n=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,l])}}}var h=Object.create?function(e,t,o,r){void 0===r&&(r=o);var n=Object.getOwnPropertyDescriptor(t,o);n&&!("get"in n?!t.__esModule:n.writable||n.configurable)||(n={enumerable:!0,get:function(){return t[o]}}),Object.defineProperty(e,r,n)}:function(e,t,o,r){void 0===r&&(r=o),e[r]=t[o]};function g(e,t){for(var o in e)"default"===o||Object.prototype.hasOwnProperty.call(t,o)||h(t,e,o)}function y(e){var t="function"==typeof Symbol&&Symbol.iterator,o=t&&e[t],r=0;if(o)return o.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")}function b(e,t){var o="function"==typeof Symbol&&e[Symbol.iterator];if(!o)return e;var r,n,a=o.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(r=a.next()).done;)i.push(r.value)}catch(e){n={error:e}}finally{try{r&&!r.done&&(o=a.return)&&o.call(a)}finally{if(n)throw n.error}}return i}function x(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(b(arguments[t]));return e}function A(){for(var e=0,t=0,o=arguments.length;t<o;t++)e+=arguments[t].length;var r=Array(e),n=0;for(t=0;t<o;t++)for(var a=arguments[t],i=0,s=a.length;i<s;i++,n++)r[n]=a[i];return r}function w(e,t,o){if(o||2===arguments.length)for(var r,n=0,a=t.length;n<a;n++)!r&&n in t||(r||(r=Array.prototype.slice.call(t,0,n)),r[n]=t[n]);return e.concat(r||Array.prototype.slice.call(t))}function S(e){return this instanceof S?(this.v=e,this):new S(e)}function C(e,t,o){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r,n=o.apply(e,t||[]),a=[];return r={},i("next"),i("throw"),i("return",(function(e){return function(t){return Promise.resolve(t).then(e,c)}})),r[Symbol.asyncIterator]=function(){return this},r;function i(e,t){n[e]&&(r[e]=function(t){return new Promise((function(o,r){a.push([e,t,o,r])>1||s(e,t)}))},t&&(r[e]=t(r[e])))}function s(e,t){try{(o=n[e](t)).value instanceof S?Promise.resolve(o.value.v).then(l,c):u(a[0][2],o)}catch(e){u(a[0][3],e)}var o}function l(e){s("next",e)}function c(e){s("throw",e)}function u(e,t){e(t),a.shift(),a.length&&s(a[0][0],a[0][1])}}function _(e){var t,o;return t={},r("next"),r("throw",(function(e){throw e})),r("return"),t[Symbol.iterator]=function(){return this},t;function r(r,n){t[r]=e[r]?function(t){return(o=!o)?{value:S(e[r](t)),done:!1}:n?n(t):t}:n}}function k(e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var t,o=e[Symbol.asyncIterator];return o?o.call(e):(e=y(e),t={},r("next"),r("throw"),r("return"),t[Symbol.asyncIterator]=function(){return this},t);function r(o){t[o]=e[o]&&function(t){return new Promise((function(r,n){!function(e,t,o,r){Promise.resolve(r).then((function(t){e({value:t,done:o})}),t)}(r,n,(t=e[o](t)).done,t.value)}))}}}function R(e,t){return Object.defineProperty?Object.defineProperty(e,"raw",{value:t}):e.raw=t,e}var P=Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t};function M(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var o in e)"default"!==o&&Object.prototype.hasOwnProperty.call(e,o)&&h(t,e,o);return P(t,e),t}function I(e){return e&&e.__esModule?e:{default:e}}function j(e,t,o,r){if("a"===o&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!r:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===o?r:"a"===o?r.call(e):r?r.value:t.get(e)}function $(e,t,o,r,n){if("m"===r)throw new TypeError("Private method is not writable");if("a"===r&&!n)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!n:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===r?n.call(e,o):n?n.value=o:t.set(e,o),o}function T(e,t){if(null===t||"object"!=typeof t&&"function"!=typeof t)throw new TypeError("Cannot use 'in' operator on non-object");return"function"==typeof e?t===e:e.has(t)}function L(e,t,o){if(null!=t){if("object"!=typeof t&&"function"!=typeof t)throw new TypeError("Object expected.");var r,n;if(o){if(!Symbol.asyncDispose)throw new TypeError("Symbol.asyncDispose is not defined.");r=t[Symbol.asyncDispose]}if(void 0===r){if(!Symbol.dispose)throw new TypeError("Symbol.dispose is not defined.");r=t[Symbol.dispose],o&&(n=r)}if("function"!=typeof r)throw new TypeError("Object not disposable.");n&&(r=function(){try{n.call(this)}catch(e){return Promise.reject(e)}}),e.stack.push({value:t,dispose:r,async:o})}else o&&e.stack.push({async:!0});return t}var O="function"==typeof SuppressedError?SuppressedError:function(e,t,o){var r=new Error(o);return r.name="SuppressedError",r.error=e,r.suppressed=t,r};function E(e){function t(t){e.error=e.hasError?new O(t,e.error,"An error was suppressed during disposal."):t,e.hasError=!0}return function o(){for(;e.stack.length;){var r=e.stack.pop();try{var n=r.dispose&&r.dispose.call(r.value);if(r.async)return Promise.resolve(n).then(o,(function(e){return t(e),o()}))}catch(e){t(e)}}if(e.hasError)throw e.error}()}const B={__extends:n,__assign:a,__rest:i,__decorate:s,__param:l,__metadata:m,__awaiter:f,__generator:v,__createBinding:h,__exportStar:g,__values:y,__read:b,__spread:x,__spreadArrays:A,__spreadArray:w,__await:S,__asyncGenerator:C,__asyncDelegator:_,__asyncValues:k,__makeTemplateObject:R,__importStar:M,__importDefault:I,__classPrivateFieldGet:j,__classPrivateFieldSet:$,__classPrivateFieldIn:T,__addDisposableResource:L,__disposeResources:E}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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R0FBSXVnSixFQUFJVSxTQUFVLE1BQU1WLEVBQUluOEksS0FDOUIsQ0FDTytPLEVBQ1QsQ0FFQSxTQUNFdzdHLFlBQ0FqdEIsV0FDQXlILFNBQ0EreUMsYUFDQUssVUFDQXNCLGFBQ0FJLFlBQ0FPLGNBQ0F2SyxrQkFDQTZLLGVBQ0FDLFdBQ0Ezc0MsU0FDQTZzQyxXQUNBQyxpQkFDQWxxQyxnQkFDQXVxQyxVQUNBQyxtQkFDQU0sbUJBQ0FDLGdCQUNBQyx1QkFDQTVMLGVBQ0E2RSxrQkFDQWlILHlCQUNBRSx5QkFDQUMsd0JBQ0FDLDBCQUNBUyIsInNvdXJjZXMiOlsid2VicGFjazovL2xhbGEtbGFuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AZW1vdGlvbitpcy1wcm9wLXZhbGlkQDAuOC44L25vZGVfbW9kdWxlcy9AZW1vdGlvbi9pcy1wcm9wLXZhbGlkL2Rpc3QvaXMtcHJvcC12YWxpZC5icm93c2VyLmVzbS5qcyIsIndlYnBhY2s6Ly9sYWxhLWxhbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vQGVtb3Rpb24rbWVtb2l6ZUAwLjcuNC9ub2RlX21vZHVsZXMvQGVtb3Rpb24vbWVtb2l6ZS9kaXN0L21lbW9pemUuYnJvd3Nlci5lc20uanMiLCJ3ZWJwYWNrOi8vbGFsYS1sYW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BtdWkraWNvbnMtbWF0ZXJpYWxANS4xNi40X0BtdWkrbWF0ZXJpYWxANS4xNi40X0BlbW90aW9uK3JlYWN0QDExLjEzLjBfQHR5cGVzK3JlYWN0QDE4LjMuM19yZV9uYmRhcXdmcXFpcHp0aTM1dXBjc213bWdyeS9ub2RlX21vZHVsZXMvQG11aS9pY29ucy1tYXRlcmlhbC9GaWJlck1hbnVhbFJlY29yZC5qcyIsIndlYnBhY2s6Ly9sYWxhLWxhbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vQG11aStpY29ucy1tYXRlcmlhbEA1LjE2LjRfQG11aSttYXRlcmlhbEA1LjE2LjRfQGVtb3Rpb24rcmVhY3RAMTEuMTMuMF9AdHlwZXMrcmVhY3RAMTguMy4zX3JlX25iZGFxd2ZxcWlwenRpMzV1cGNzbXdtZ3J5L25vZGVfbW9kdWxlcy9AbXVpL2ljb25zLW1hdGVyaWFsL05hdmlnYXRlQmVmb3JlLmpzIiwid2VicGFjazovL2xhbGEtbGFuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbXVpK2ljb25zLW1hdGVyaWFsQDUuMTYuNF9AbXVpK21hdGVyaWFsQDUuMTYuNF9AZW1vdGlvbityZWFjdEAxMS4xMy4wX0B0eXBlcytyZWFjdEAxOC4zLjNfcmVfbmJkYXF3ZnFxaXB6dGkzNXVwY3Ntd21ncnkvbm9kZV9tb2R1bGVzL0BtdWkvaWNvbnMtbWF0ZXJpYWwvTmF2aWdhdGVOZXh0LmpzIiwid2VicGFjazovL2xhbGEtbGFuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbXVpK21hdGVyaWFsQDUuMTYuNF9AZW1vdGlvbityZWFjdEAxMS4xMy4wX0B0eXBlcytyZWFjdEAxOC4zLjNfcmVhY3RAMTguMy4xX19AZW1vdGlvbitzdHlsZWRfYnJ4aXBudjR5dnFoZW9zZ3hjYXdkeGR5YXkvbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvY29sb3JzL3BpbmsuanMiLCJ3ZWJwYWNrOi8vbGFsYS1sYW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BtdWkrbWF0ZXJpYWxANS4xNi40X0BlbW90aW9uK3JlYWN0QDExLjEzLjBfQHR5cGVzK3JlYWN0QDE4LjMuM19yZWFjdEAxOC4zLjFfX0BlbW90aW9uK3N0eWxlZF9icnhpcG52NHl2cWhlb3NneGNhd2R4ZHlheS9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9jb2xvcnMvZGVlcFB1cnBsZS5qcyIsIndlYnBhY2s6Ly9sYWxhLWxhbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vQG11aSttYXRlcmlhbEA1LjE2LjRfQGVtb3Rpb24rcmVhY3RAMTEuMTMuMF9AdHlwZXMrcmVhY3RAMTguMy4zX3JlYWN0QDE4LjMuMV9fQGVtb3Rpb24rc3R5bGVkX2JyeGlwbnY0eXZxaGVvc2d4Y2F3ZHhkeWF5L25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL2NvbG9ycy9pbmRpZ28uanMiLCJ3ZWJwYWNrOi8vbGFsYS1sYW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BtdWkrbWF0ZXJpYWxANS4xNi40X0BlbW90aW9uK3JlYWN0QDExLjEzLjBfQHR5cGVzK3JlYWN0QDE4LjMuM19yZWFjdEAxOC4zLjFfX0BlbW90aW9uK3N0eWxlZF9icnhpcG52NHl2cWhlb3NneGNhd2R4ZHlheS9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9jb2xvcnMvY3lhbi5qcyIsIndlYnBhY2s6Ly9sYWxhLWxhbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vQG11aSttYXRlcmlhbEA1LjE2LjRfQGVtb3Rpb24rcmVhY3RAMTEuMTMuMF9AdHlwZXMrcmVhY3RAMTguMy4zX3JlYWN0QDE4LjMuMV9fQGVtb3Rpb24rc3R5bGVkX2JyeGlwbnY0eXZxaGVvc2d4Y2F3ZHhkeWF5L25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL2NvbG9ycy90ZWFsLmpzIiwid2VicGFjazovL2xhbGEtbGFuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbXVpK21hdGVyaWFsQDUuMTYuNF9AZW1vdGlvbityZWFjdEAxMS4xMy4wX0B0eXBlcytyZWFjdEAxOC4zLjNfcmVhY3RAMTguMy4xX19AZW1vdGlvbitzdHlsZWRfYnJ4aXBudjR5dnFoZW9zZ3hjYXdkeGR5YXkvbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvY29sb3JzL2xpZ2h0R3JlZW4uanMiLCJ3ZWJwYWNrOi8vbGFsYS1sYW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BtdWkrbWF0ZXJpYWxANS4xNi40X0BlbW90aW9uK3JlYWN0QDExLjEzLjBfQHR5cGVzK3JlYWN0QDE4LjMuM19yZWFjdEAxOC4zLjFfX0BlbW90aW9uK3N0eWxlZF9icnhpcG52NHl2cWhlb3NneGNhd2R4ZHlheS9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9jb2xvcnMvbGltZS5qcyIsIndlYnBhY2s6Ly9sYWxhLWxhbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vQG11aSttYXRlcmlhbEA1LjE2LjRfQGVtb3Rpb24rcmVhY3RAMTEuMTMuMF9AdHlwZXMrcmVhY3RAMTguMy4zX3JlYWN0QDE4LjMuMV9fQGVtb3Rpb24rc3R5bGVkX2JyeGlwbnY0eXZxaGVvc2d4Y2F3ZHhkeWF5L25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL2NvbG9ycy95ZWxsb3cuanMiLCJ3ZWJwYWNrOi8vbGFsYS1sYW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BtdWkrbWF0ZXJpYWxANS4xNi40X0BlbW90aW9uK3JlYWN0QDExLjEzLjBfQHR5cGVzK3JlYWN0QDE4LjMuM19yZWFjdEAxOC4zLjFfX0BlbW90aW9uK3N0eWxlZF9icnhpcG52NHl2cWhlb3NneGNhd2R4ZHlheS9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9jb2xvcnMvYW1iZXIuanMiLCJ3ZWJwYWNrOi8vbGFsYS1sYW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BtdWkrbWF0ZXJpYWxANS4xNi40X0BlbW90aW9uK3JlYWN0QDExLjEzLjBfQHR5cGVzK3JlYWN0QDE4LjMuM19yZWFjdEAxOC4zLjFfX0BlbW90aW9uK3N0eWxlZF9icnhpcG52NHl2cWhlb3NneGNhd2R4ZHlheS9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9jb2xvcnMvZGVlcE9yYW5nZS5qcyIsIndlYnBhY2s6Ly9sYWxhLWxhbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vQG11aSttYXRlcmlhbEA1LjE2LjRfQGVtb3Rpb24rcmVhY3RAMTEuMTMuMF9AdHlwZXMrcmVhY3RAMTguMy4zX3JlYWN0QDE4LjMuMV9fQGVtb3Rpb24rc3R5bGVkX2JyeGlwbnY0eXZxaGVvc2d4Y2F3ZHhkeWF5L25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL2NvbG9ycy9icm93bi5qcyIsIndlYnBhY2s6Ly9sYWxhLWxhbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vQG11aSttYXRlcmlhbEA1LjE2LjRfQGVtb3Rpb24rcmVhY3RAMTEuMTMuMF9AdHlwZXMrcmVhY3RAMTguMy4zX3JlYWN0QDE4LjMuMV9fQGVtb3Rpb24rc3R5bGVkX2JyeGlwbnY0eXZxaGVvc2d4Y2F3ZHhkeWF5L25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL2NvbG9ycy9ibHVlR3JleS5qcyIsIndlYnBhY2s6Ly9sYWxhLWxhbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vQG11aSttYXRlcmlhbEA1LjE2LjRfQGVtb3Rpb24rcmVhY3RAMTEuMTMuMF9AdHlwZXMrcmVhY3RAMTguMy4zX3JlYWN0QDE4LjMuMV9fQGVtb3Rpb24rc3R5bGVkX2JyeGlwbnY0eXZxaGVvc2d4Y2F3ZHhkeWF5L25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL3N0eWxlcy9hZGFwdFY0VGhlbWUuanMiLCJ3ZWJwYWNrOi8vbGFsYS1sYW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BtdWkrc3lzdGVtQDUuMTYuNF9AZW1vdGlvbityZWFjdEAxMS4xMy4wX0B0eXBlcytyZWFjdEAxOC4zLjNfcmVhY3RAMTguMy4xX19AZW1vdGlvbitzdHlsZWRAMV82cHhzc2hmNG9wNmNpZXhlc2pnajc3eG9vZS9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL2NvbG9yTWFuaXB1bGF0b3IuanMiLCJ3ZWJwYWNrOi8vbGFsYS1sYW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BtdWkrbWF0ZXJpYWxANS4xNi40X0BlbW90aW9uK3JlYWN0QDExLjEzLjBfQHR5cGVzK3JlYWN0QDE4LjMuM19yZWFjdEAxOC4zLjFfX0BlbW90aW9uK3N0eWxlZF9icnhpcG52NHl2cWhlb3NneGNhd2R4ZHlheS9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9zdHlsZXMvY3JlYXRlTXVpU3RyaWN0TW9kZVRoZW1lLmpzIiwid2VicGFjazovL2xhbGEtbGFuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbXVpK21hdGVyaWFsQDUuMTYuNF9AZW1vdGlvbityZWFjdEAxMS4xMy4wX0B0eXBlcytyZWFjdEAxOC4zLjNfcmVhY3RAMTguMy4xX19AZW1vdGlvbitzdHlsZWRfYnJ4aXBudjR5dnFoZW9zZ3hjYXdkeGR5YXkvbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvc3R5bGVzL2NyZWF0ZVN0eWxlcy5qcyIsIndlYnBhY2s6Ly9sYWxhLWxhbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vQG11aSttYXRlcmlhbEA1LjE2LjRfQGVtb3Rpb24rcmVhY3RAMTEuMTMuMF9AdHlwZXMrcmVhY3RAMTguMy4zX3JlYWN0QDE4LjMuMV9fQGVtb3Rpb24rc3R5bGVkX2JyeGlwbnY0eXZxaGVvc2d4Y2F3ZHhkeWF5L25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL3N0eWxlcy9jc3NVdGlscy5qcyIsIndlYnBhY2s6Ly9sYWxhLWxhbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vQG11aSttYXRlcmlhbEA1LjE2LjRfQGVtb3Rpb24rcmVhY3RAMTEuMTMuMF9AdHlwZXMrcmVhY3RAMTguMy4zX3JlYWN0QDE4LjMuMV9fQGVtb3Rpb24rc3R5bGVkX2JyeGlwbnY0eXZxaGVvc2d4Y2F3ZHhkeWF5L25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL3N0eWxlcy9yZXNwb25zaXZlRm9udFNpemVzLmpzIiwid2VicGFjazovL2xhbGEtbGFuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbXVpK3N5c3RlbUA1LjE2LjRfQGVtb3Rpb24rcmVhY3RAMTEuMTMuMF9AdHlwZXMrcmVhY3RAMTguMy4zX3JlYWN0QDE4LjMuMV9fQGVtb3Rpb24rc3R5bGVkQDFfNnB4c3NoZjRvcDZjaWV4ZXNqZ2o3N3hvb2Uvbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS91c2VUaGVtZVByb3BzL2dldFRoZW1lUHJvcHMuanMiLCJ3ZWJwYWNrOi8vbGFsYS1sYW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BtdWkrc3lzdGVtQDUuMTYuNF9AZW1vdGlvbityZWFjdEAxMS4xMy4wX0B0eXBlcytyZWFjdEAxOC4zLjNfcmVhY3RAMTguMy4xX19AZW1vdGlvbitzdHlsZWRAMV82cHhzc2hmNG9wNmNpZXhlc2pnajc3eG9vZS9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL3VzZVRoZW1lUHJvcHMvdXNlVGhlbWVQcm9wcy5qcyIsIndlYnBhY2s6Ly9sYWxhLWxhbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vQG11aSttYXRlcmlhbEA1LjE2LjRfQGVtb3Rpb24rcmVhY3RAMTEuMTMuMF9AdHlwZXMrcmVhY3RAMTguMy4zX3JlYWN0QDE4LjMuMV9fQGVtb3Rpb24rc3R5bGVkX2JyeGlwbnY0eXZxaGVvc2d4Y2F3ZHhkeWF5L25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL3N0eWxlcy91c2VUaGVtZVByb3BzLmpzIiwid2VicGFjazovL2xhbGEtbGFuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbXVpK21hdGVyaWFsQDUuMTYuNF9AZW1vdGlvbityZWFjdEAxMS4xMy4wX0B0eXBlcytyZWFjdEAxOC4zLjNfcmVhY3RAMTguMy4xX19AZW1vdGlvbitzdHlsZWRfYnJ4aXBudjR5dnFoZW9zZ3hjYXdkeGR5YXkvbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvc3R5bGVzL21ha2VTdHlsZXMuanMiLCJ3ZWJwYWNrOi8vbGFsYS1sYW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BtdWkrbWF0ZXJpYWxANS4xNi40X0BlbW90aW9uK3JlYWN0QDExLjEzLjBfQHR5cGVzK3JlYWN0QDE4LjMuM19yZWFjdEAxOC4zLjFfX0BlbW90aW9uK3N0eWxlZF9icnhpcG52NHl2cWhlb3NneGNhd2R4ZHlheS9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9zdHlsZXMvd2l0aFN0eWxlcy5qcyIsIndlYnBhY2s6Ly9sYWxhLWxhbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vQG11aSttYXRlcmlhbEA1LjE2LjRfQGVtb3Rpb24rcmVhY3RAMTEuMTMuMF9AdHlwZXMrcmVhY3RAMTguMy4zX3JlYWN0QDE4LjMuMV9fQGVtb3Rpb24rc3R5bGVkX2JyeGlwbnY0eXZxaGVvc2d4Y2F3ZHhkeWF5L25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL3N0eWxlcy93aXRoVGhlbWUuanMiLCJ3ZWJwYWNrOi8vbGFsYS1sYW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BtdWkrc3lzdGVtQDUuMTYuNF9AZW1vdGlvbityZWFjdEAxMS4xMy4wX0B0eXBlcytyZWFjdEAxOC4zLjNfcmVhY3RAMTguMy4xX19AZW1vdGlvbitzdHlsZWRAMV82cHhzc2hmNG9wNmNpZXhlc2pnajc3eG9vZS9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL0luaXRDb2xvclNjaGVtZVNjcmlwdC9Jbml0Q29sb3JTY2hlbWVTY3JpcHQuanMiLCJ3ZWJwYWNrOi8vbGFsYS1sYW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BtdWkrc3lzdGVtQDUuMTYuNF9AZW1vdGlvbityZWFjdEAxMS4xMy4wX0B0eXBlcytyZWFjdEAxOC4zLjNfcmVhY3RAMTguMy4xX19AZW1vdGlvbitzdHlsZWRAMV82cHhzc2hmNG9wNmNpZXhlc2pnajc3eG9vZS9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL2Nzc1ZhcnMvdXNlQ3VycmVudENvbG9yU2NoZW1lLmpzIiwid2VicGFjazovL2xhbGEtbGFuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbXVpK3N5c3RlbUA1LjE2LjRfQGVtb3Rpb24rcmVhY3RAMTEuMTMuMF9AdHlwZXMrcmVhY3RAMTguMy4zX3JlYWN0QDE4LjMuMV9fQGVtb3Rpb24rc3R5bGVkQDFfNnB4c3NoZjRvcDZjaWV4ZXNqZ2o3N3hvb2Uvbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS9jc3NWYXJzL2NyZWF0ZUNzc1ZhcnNQcm92aWRlci5qcyIsIndlYnBhY2s6Ly9sYWxhLWxhbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vQG11aStzeXN0ZW1ANS4xNi40X0BlbW90aW9uK3JlYWN0QDExLjEzLjBfQHR5cGVzK3JlYWN0QDE4LjMuM19yZWFjdEAxOC4zLjFfX0BlbW90aW9uK3N0eWxlZEAxXzZweHNzaGY0b3A2Y2lleGVzamdqNzd4b29lL25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vY3NzVmFycy9jcmVhdGVHZXRDc3NWYXIuanMiLCJ3ZWJwYWNrOi8vbGFsYS1sYW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BiYWJlbCtydW50aW1lQDcuMjQuOC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdHlwZW9mLmpzIiwid2VicGFjazovL2xhbGEtbGFuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AYmFiZWwrcnVudGltZUA3LjI0Ljgvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3RvUHJvcGVydHlLZXkuanMiLCJ3ZWJwYWNrOi8vbGFsYS1sYW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BiYWJlbCtydW50aW1lQDcuMjQuOC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdG9QcmltaXRpdmUuanMiLCJ3ZWJwYWNrOi8vbGFsYS1sYW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BtdWkrc3lzdGVtQDUuMTYuNF9AZW1vdGlvbityZWFjdEAxMS4xMy4wX0B0eXBlcytyZWFjdEAxOC4zLjNfcmVhY3RAMTguMy4xX19AZW1vdGlvbitzdHlsZWRAMV82cHhzc2hmNG9wNmNpZXhlc2pnajc3eG9vZS9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL2Nzc1ZhcnMvY3NzVmFyc1BhcnNlci5qcyIsIndlYnBhY2s6Ly9sYWxhLWxhbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vQG11aStzeXN0ZW1ANS4xNi40X0BlbW90aW9uK3JlYWN0QDExLjEzLjBfQHR5cGVzK3JlYWN0QDE4LjMuM19yZWFjdEAxOC4zLjFfX0BlbW90aW9uK3N0eWxlZEAxXzZweHNzaGY0b3A2Y2lleGVzamdqNzd4b29lL25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vY3NzVmFycy9wcmVwYXJlQ3NzVmFycy5qcyIsIndlYnBhY2s6Ly9sYWxhLWxhbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vQG11aSttYXRlcmlhbEA1LjE2LjRfQGVtb3Rpb24rcmVhY3RAMTEuMTMuMF9AdHlwZXMrcmVhY3RAMTguMy4zX3JlYWN0QDE4LjMuMV9fQGVtb3Rpb24rc3R5bGVkX2JyeGlwbnY0eXZxaGVvc2d4Y2F3ZHhkeWF5L25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL3N0eWxlcy9zaG91bGRTa2lwR2VuZXJhdGluZ1Zhci5qcyIsIndlYnBhY2s6Ly9sYWxhLWxhbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vQG11aSttYXRlcmlhbEA1LjE2LjRfQGVtb3Rpb24rcmVhY3RAMTEuMTMuMF9AdHlwZXMrcmVhY3RAMTguMy4zX3JlYWN0QDE4LjMuMV9fQGVtb3Rpb24rc3R5bGVkX2JyeGlwbnY0eXZxaGVvc2d4Y2F3ZHhkeWF5L25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL3N0eWxlcy9leHBlcmltZW50YWxfZXh0ZW5kVGhlbWUuanMiLCJ3ZWJwYWNrOi8vbGFsYS1sYW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BtdWkrbWF0ZXJpYWxANS4xNi40X0BlbW90aW9uK3JlYWN0QDExLjEzLjBfQHR5cGVzK3JlYWN0QDE4LjMuM19yZWFjdEAxOC4zLjFfX0BlbW90aW9uK3N0eWxlZF9icnhpcG52NHl2cWhlb3NneGNhd2R4ZHlheS9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9zdHlsZXMvZXhjbHVkZVZhcmlhYmxlc0Zyb21Sb290LmpzIiwid2VicGFjazovL2xhbGEtbGFuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbXVpK21hdGVyaWFsQDUuMTYuNF9AZW1vdGlvbityZWFjdEAxMS4xMy4wX0B0eXBlcytyZWFjdEAxOC4zLjNfcmVhY3RAMTguMy4xX19AZW1vdGlvbitzdHlsZWRfYnJ4aXBudjR5dnFoZW9zZ3hjYXdkeGR5YXkvbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvSW5pdENvbG9yU2NoZW1lU2NyaXB0L0luaXRDb2xvclNjaGVtZVNjcmlwdC5qcyIsIndlYnBhY2s6Ly9sYWxhLWxhbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vQG11aSttYXRlcmlhbEA1LjE2LjRfQGVtb3Rpb24rcmVhY3RAMTEuMTMuMF9AdHlwZXMrcmVhY3RAMTguMy4zX3JlYWN0QDE4LjMuMV9fQGVtb3Rpb24rc3R5bGVkX2JyeGlwbnY0eXZxaGVvc2d4Y2F3ZHhkeWF5L25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL3N0eWxlcy9Dc3NWYXJzUHJvdmlkZXIuanMiLCJ3ZWJwYWNrOi8vbGFsYS1sYW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BtdWkrbWF0ZXJpYWxANS4xNi40X0BlbW90aW9uK3JlYWN0QDExLjEzLjBfQHR5cGVzK3JlYWN0QDE4LjMuM19yZWFjdEAxOC4zLjFfX0BlbW90aW9uK3N0eWxlZF9icnhpcG52NHl2cWhlb3NneGNhd2R4ZHlheS9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9zdHlsZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vbGFsYS1sYW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BtdWkrbWF0ZXJpYWxANS4xNi40X0BlbW90aW9uK3JlYWN0QDExLjEzLjBfQHR5cGVzK3JlYWN0QDE4LjMuM19yZWFjdEAxOC4zLjFfX0BlbW90aW9uK3N0eWxlZF9icnhpcG52NHl2cWhlb3NneGNhd2R4ZHlheS9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9Db2xsYXBzZS9jb2xsYXBzZUNsYXNzZXMuanMiLCJ3ZWJwYWNrOi8vbGFsYS1sYW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BtdWkrbWF0ZXJpYWxANS4xNi40X0BlbW90aW9uK3JlYWN0QDExLjEzLjBfQHR5cGVzK3JlYWN0QDE4LjMuM19yZWFjdEAxOC4zLjFfX0BlbW90aW9uK3N0eWxlZF9icnhpcG52NHl2cWhlb3NneGNhd2R4ZHlheS9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9Db2xsYXBzZS9Db2xsYXBzZS5qcyIsIndlYnBhY2s6Ly9sYWxhLWxhbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vQG11aSttYXRlcmlhbEA1LjE2LjRfQGVtb3Rpb24rcmVhY3RAMTEuMTMuMF9AdHlwZXMrcmVhY3RAMTguMy4zX3JlYWN0QDE4LjMuMV9fQGVtb3Rpb24rc3R5bGVkX2JyeGlwbnY0eXZxaGVvc2d4Y2F3ZHhkeWF5L25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0FjY29yZGlvbi9BY2NvcmRpb25Db250ZXh0LmpzIiwid2VicGFjazovL2xhbGEtbGFuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbXVpK21hdGVyaWFsQDUuMTYuNF9AZW1vdGlvbityZWFjdEAxMS4xMy4wX0B0eXBlcytyZWFjdEAxOC4zLjNfcmVhY3RAMTguMy4xX19AZW1vdGlvbitzdHlsZWRfYnJ4aXBudjR5dnFoZW9zZ3hjYXdkeGR5YXkvbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvdXRpbHMvdXNlU2xvdC5qcyIsIndlYnBhY2s6Ly9sYWxhLWxhbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vQG11aSttYXRlcmlhbEA1LjE2LjRfQGVtb3Rpb24rcmVhY3RAMTEuMTMuMF9AdHlwZXMrcmVhY3RAMTguMy4zX3JlYWN0QDE4LjMuMV9fQGVtb3Rpb24rc3R5bGVkX2JyeGlwbnY0eXZxaGVvc2d4Y2F3ZHhkeWF5L25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0FjY29yZGlvbi9hY2NvcmRpb25DbGFzc2VzLmpzIiwid2VicGFjazovL2xhbGEtbGFuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbXVpK21hdGVyaWFsQDUuMTYuNF9AZW1vdGlvbityZWFjdEAxMS4xMy4wX0B0eXBlcytyZWFjdEAxOC4zLjNfcmVhY3RAMTguMy4xX19AZW1vdGlvbitzdHlsZWRfYnJ4aXBudjR5dnFoZW9zZ3hjYXdkeGR5YXkvbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvQWNjb3JkaW9uL0FjY29yZGlvbi5qcyIsIndlYnBhY2s6Ly9sYWxhLWxhbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vQG11aSttYXRlcmlhbEA1LjE2LjRfQGVtb3Rpb24rcmVhY3RAMTEuMTMuMF9AdHlwZXMrcmVhY3RAMTguMy4zX3JlYWN0QDE4LjMuMV9fQGVtb3Rpb24rc3R5bGVkX2JyeGlwbnY0eXZxaGVvc2d4Y2F3ZHhkeWF5L25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0FjY29yZGlvbkFjdGlvbnMvYWNjb3JkaW9uQWN0aW9uc0NsYXNzZXMuanMiLCJ3ZWJwYWNrOi8vbGFsYS1sYW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BtdWkrbWF0ZXJpYWxANS4xNi40X0BlbW90aW9uK3JlYWN0QDExLjEzLjBfQHR5cGVzK3JlYWN0QDE4LjMuM19yZWFjdEAxOC4zLjFfX0BlbW90aW9uK3N0eWxlZF9icnhpcG52NHl2cWhlb3NneGNhd2R4ZHlheS9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9BY2NvcmRpb25BY3Rpb25zL0FjY29yZGlvbkFjdGlvbnMuanMiLCJ3ZWJwYWNrOi8vbGFsYS1sYW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BtdWkrbWF0ZXJpYWxANS4xNi40X0BlbW90aW9uK3JlYWN0QDExLjEzLjBfQHR5cGVzK3JlYWN0QDE4LjMuM19yZWFjdEAxOC4zLjFfX0BlbW90aW9uK3N0eWxlZF9icnhpcG52NHl2cWhlb3NneGNhd2R4ZHlheS9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9BY2NvcmRpb25EZXRhaWxzL2FjY29yZGlvbkRldGFpbHNDbGFzc2VzLmpzIiwid2VicGFjazovL2xhbGEtbGFuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbXVpK21hdGVyaWFsQDUuMTYuNF9AZW1vdGlvbityZWFjdEAxMS4xMy4wX0B0eXBlcytyZWFjdEAxOC4zLjNfcmVhY3RAMTguMy4xX19AZW1vdGlvbitzdHlsZWRfYnJ4aXBudjR5dnFoZW9zZ3hjYXdkeGR5YXkvbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvQWNjb3JkaW9uRGV0YWlscy9BY2NvcmRpb25EZXRhaWxzLmpzIiwid2VicGFjazovL2xhbGEtbGFuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbXVpK21hdGVyaWFsQDUuMTYuNF9AZW1vdGlvbityZWFjdEAxMS4xMy4wX0B0eXBlcytyZWFjdEAxOC4zLjNfcmVhY3RAMTguMy4xX19AZW1vdGlvbitzdHlsZWRfYnJ4aXBudjR5dnFoZW9zZ3hjYXdkeGR5YXkvbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvQWNjb3JkaW9uU3VtbWFyeS9hY2NvcmRpb25TdW1tYXJ5Q2xhc3Nlcy5qcyIsIndlYnBhY2s6Ly9sYWxhLWxhbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vQG11aSttYXRlcmlhbEA1LjE2LjRfQGVtb3Rpb24rcmVhY3RAMTEuMTMuMF9AdHlwZXMrcmVhY3RAMTguMy4zX3JlYWN0QDE4LjMuMV9fQGVtb3Rpb24rc3R5bGVkX2JyeGlwbnY0eXZxaGVvc2d4Y2F3ZHhkeWF5L25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0FjY29yZGlvblN1bW1hcnkvQWNjb3JkaW9uU3VtbWFyeS5qcyIsIndlYnBhY2s6Ly9sYWxhLWxhbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vQG11aSttYXRlcmlhbEA1LjE2LjRfQGVtb3Rpb24rcmVhY3RAMTEuMTMuMF9AdHlwZXMrcmVhY3RAMTguMy4zX3JlYWN0QDE4LjMuMV9fQGVtb3Rpb24rc3R5bGVkX2JyeGlwbnY0eXZxaGVvc2d4Y2F3ZHhkeWF5L25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0FsZXJ0L2FsZXJ0Q2xhc3Nlcy5qcyIsIndlYnBhY2s6Ly9sYWxhLWxhbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vQG11aSttYXRlcmlhbEA1LjE2LjRfQGVtb3Rpb24rcmVhY3RAMTEuMTMuMF9AdHlwZXMrcmVhY3RAMTguMy4zX3JlYWN0QDE4LjMuMV9fQGVtb3Rpb24rc3R5bGVkX2JyeGlwbnY0eXZxaGVvc2d4Y2F3ZHhkeWF5L25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL2ludGVybmFsL3N2Zy1pY29ucy9TdWNjZXNzT3V0bGluZWQuanMiLCJ3ZWJwYWNrOi8vbGFsYS1sYW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BtdWkrbWF0ZXJpYWxANS4xNi40X0BlbW90aW9uK3JlYWN0QDExLjEzLjBfQHR5cGVzK3JlYWN0QDE4LjMuM19yZWFjdEAxOC4zLjFfX0BlbW90aW9uK3N0eWxlZF9icnhpcG52NHl2cWhlb3NneGNhd2R4ZHlheS9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9pbnRlcm5hbC9zdmctaWNvbnMvUmVwb3J0UHJvYmxlbU91dGxpbmVkLmpzIiwid2VicGFjazovL2xhbGEtbGFuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbXVpK21hdGVyaWFsQDUuMTYuNF9AZW1vdGlvbityZWFjdEAxMS4xMy4wX0B0eXBlcytyZWFjdEAxOC4zLjNfcmVhY3RAMTguMy4xX19AZW1vdGlvbitzdHlsZWRfYnJ4aXBudjR5dnFoZW9zZ3hjYXdkeGR5YXkvbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvaW50ZXJuYWwvc3ZnLWljb25zL0Vycm9yT3V0bGluZS5qcyIsIndlYnBhY2s6Ly9sYWxhLWxhbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vQG11aSttYXRlcmlhbEA1LjE2LjRfQGVtb3Rpb24rcmVhY3RAMTEuMTMuMF9AdHlwZXMrcmVhY3RAMTguMy4zX3JlYWN0QDE4LjMuMV9fQGVtb3Rpb24rc3R5bGVkX2JyeGlwbnY0eXZxaGVvc2d4Y2F3ZHhkeWF5L25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL2ludGVybmFsL3N2Zy1pY29ucy9JbmZvT3V0bGluZWQuanMiLCJ3ZWJwYWNrOi8vbGFsYS1sYW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BtdWkrbWF0ZXJpYWxANS4xNi40X0BlbW90aW9uK3JlYWN0QDExLjEzLjBfQHR5cGVzK3JlYWN0QDE4LjMuM19yZWFjdEAxOC4zLjFfX0BlbW90aW9uK3N0eWxlZF9icnhpcG52NHl2cWhlb3NneGNhd2R4ZHlheS9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9pbnRlcm5hbC9zdmctaWNvbnMvQ2xvc2UuanMiLCJ3ZWJwYWNrOi8vbGFsYS1sYW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BtdWkrbWF0ZXJpYWxANS4xNi40X0BlbW90aW9uK3JlYWN0QDExLjEzLjBfQHR5cGVzK3JlYWN0QDE4LjMuM19yZWFjdEAxOC4zLjFfX0BlbW90aW9uK3N0eWxlZF9icnhpcG52NHl2cWhlb3NneGNhd2R4ZHlheS9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9BbGVydC9BbGVydC5qcyIsIndlYnBhY2s6Ly9sYWxhLWxhbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vQG11aSttYXRlcmlhbEA1LjE2LjRfQGVtb3Rpb24rcmVhY3RAMTEuMTMuMF9AdHlwZXMrcmVhY3RAMTguMy4zX3JlYWN0QDE4LjMuMV9fQGVtb3Rpb24rc3R5bGVkX2JyeGlwbnY0eXZxaGVvc2d4Y2F3ZHhkeWF5L25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL1R5cG9ncmFwaHkvdHlwb2dyYXBoeUNsYXNzZXMuanMiLCJ3ZWJwYWNrOi8vbGFsYS1sYW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BtdWkrbWF0ZXJpYWxANS4xNi40X0BlbW90aW9uK3JlYWN0QDExLjEzLjBfQHR5cGVzK3JlYWN0QDE4LjMuM19yZWFjdEAxOC4zLjFfX0BlbW90aW9uK3N0eWxlZF9icnhpcG52NHl2cWhlb3NneGNhd2R4ZHlheS9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9UeXBvZ3JhcGh5L1R5cG9ncmFwaHkuanMiLCJ3ZWJwYWNrOi8vbGFsYS1sYW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BtdWkrbWF0ZXJpYWxANS4xNi40X0BlbW90aW9uK3JlYWN0QDExLjEzLjBfQHR5cGVzK3JlYWN0QDE4LjMuM19yZWFjdEAxOC4zLjFfX0BlbW90aW9uK3N0eWxlZF9icnhpcG52NHl2cWhlb3NneGNhd2R4ZHlheS9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9BbGVydFRpdGxlL2FsZXJ0VGl0bGVDbGFzc2VzLmpzIiwid2VicGFjazovL2xhbGEtbGFuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbXVpK21hdGVyaWFsQDUuMTYuNF9AZW1vdGlvbityZWFjdEAxMS4xMy4wX0B0eXBlcytyZWFjdEAxOC4zLjNfcmVhY3RAMTguMy4xX19AZW1vdGlvbitzdHlsZWRfYnJ4aXBudjR5dnFoZW9zZ3hjYXdkeGR5YXkvbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvQWxlcnRUaXRsZS9BbGVydFRpdGxlLmpzIiwid2VicGFjazovL2xhbGEtbGFuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbXVpK3V0aWxzQDUuMTYuNF9AdHlwZXMrcmVhY3RAMTguMy4zX3JlYWN0QDE4LjMuMS9ub2RlX21vZHVsZXMvQG11aS91dGlscy9lc20vdXNlUHJldmlvdXNQcm9wcy91c2VQcmV2aW91c1Byb3BzLmpzIiwid2VicGFjazovL2xhbGEtbGFuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbXVpK21hdGVyaWFsQDUuMTYuNF9AZW1vdGlvbityZWFjdEAxMS4xMy4wX0B0eXBlcytyZWFjdEAxOC4zLjNfcmVhY3RAMTguMy4xX19AZW1vdGlvbitzdHlsZWRfYnJ4aXBudjR5dnFoZW9zZ3hjYXdkeGR5YXkvbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvdXNlQXV0b2NvbXBsZXRlL3VzZUF1dG9jb21wbGV0ZS5qcyIsIndlYnBhY2s6Ly9sYWxhLWxhbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vQHBvcHBlcmpzK2NvcmVAMi4xMS44L25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvZG9tLXV0aWxzL2dldFdpbmRvdy5qcyIsIndlYnBhY2s6Ly9sYWxhLWxhbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vQHBvcHBlcmpzK2NvcmVAMi4xMS44L25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvZG9tLXV0aWxzL2luc3RhbmNlT2YuanMiLCJ3ZWJwYWNrOi8vbGFsYS1sYW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0Bwb3BwZXJqcytjb3JlQDIuMTEuOC9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL21hdGguanMiLCJ3ZWJwYWNrOi8vbGFsYS1sYW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0Bwb3BwZXJqcytjb3JlQDIuMTEuOC9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL3VzZXJBZ2VudC5qcyIsIndlYnBhY2s6Ly9sYWxhLWxhbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vQHBvcHBlcmpzK2NvcmVAMi4xMS44L25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvZG9tLXV0aWxzL2lzTGF5b3V0Vmlld3BvcnQuanMiLCJ3ZWJwYWNrOi8vbGFsYS1sYW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0Bwb3BwZXJqcytjb3JlQDIuMTEuOC9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXRCb3VuZGluZ0NsaWVudFJlY3QuanMiLCJ3ZWJwYWNrOi8vbGFsYS1sYW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0Bwb3BwZXJqcytjb3JlQDIuMTEuOC9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXRXaW5kb3dTY3JvbGwuanMiLCJ3ZWJwYWNrOi8vbGFsYS1sYW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0Bwb3BwZXJqcytjb3JlQDIuMTEuOC9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXROb2RlTmFtZS5qcyIsIndlYnBhY2s6Ly9sYWxhLWxhbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vQHBvcHBlcmpzK2NvcmVAMi4xMS44L25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvZG9tLXV0aWxzL2dldERvY3VtZW50RWxlbWVudC5qcyIsIndlYnBhY2s6Ly9sYWxhLWxhbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vQHBvcHBlcmpzK2NvcmVAMi4xMS44L25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvZG9tLXV0aWxzL2dldFdpbmRvd1Njcm9sbEJhclguanMiLCJ3ZWJwYWNrOi8vbGFsYS1sYW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0Bwb3BwZXJqcytjb3JlQDIuMTEuOC9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXRDb21wdXRlZFN0eWxlLmpzIiwid2VicGFjazovL2xhbGEtbGFuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AcG9wcGVyanMrY29yZUAyLjExLjgvbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvaXNTY3JvbGxQYXJlbnQuanMiLCJ3ZWJwYWNrOi8vbGFsYS1sYW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0Bwb3BwZXJqcytjb3JlQDIuMTEuOC9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXRDb21wb3NpdGVSZWN0LmpzIiwid2VicGFjazovL2xhbGEtbGFuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AcG9wcGVyanMrY29yZUAyLjExLjgvbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvZ2V0Tm9kZVNjcm9sbC5qcyIsIndlYnBhY2s6Ly9sYWxhLWxhbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vQHBvcHBlcmpzK2NvcmVAMi4xMS44L25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvZG9tLXV0aWxzL2dldEhUTUxFbGVtZW50U2Nyb2xsLmpzIiwid2VicGFjazovL2xhbGEtbGFuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AcG9wcGVyanMrY29yZUAyLjExLjgvbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvZ2V0TGF5b3V0UmVjdC5qcyIsIndlYnBhY2s6Ly9sYWxhLWxhbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vQHBvcHBlcmpzK2NvcmVAMi4xMS44L25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvZG9tLXV0aWxzL2dldFBhcmVudE5vZGUuanMiLCJ3ZWJwYWNrOi8vbGFsYS1sYW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0Bwb3BwZXJqcytjb3JlQDIuMTEuOC9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXRTY3JvbGxQYXJlbnQuanMiLCJ3ZWJwYWNrOi8vbGFsYS1sYW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0Bwb3BwZXJqcytjb3JlQDIuMTEuOC9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9saXN0U2Nyb2xsUGFyZW50cy5qcyIsIndlYnBhY2s6Ly9sYWxhLWxhbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vQHBvcHBlcmpzK2NvcmVAMi4xMS44L25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvZG9tLXV0aWxzL2lzVGFibGVFbGVtZW50LmpzIiwid2VicGFjazovL2xhbGEtbGFuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AcG9wcGVyanMrY29yZUAyLjExLjgvbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvZ2V0T2Zmc2V0UGFyZW50LmpzIiwid2VicGFjazovL2xhbGEtbGFuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AcG9wcGVyanMrY29yZUAyLjExLjgvbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9lbnVtcy5qcyIsIndlYnBhY2s6Ly9sYWxhLWxhbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vQHBvcHBlcmpzK2NvcmVAMi4xMS44L25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvdXRpbHMvb3JkZXJNb2RpZmllcnMuanMiLCJ3ZWJwYWNrOi8vbGFsYS1sYW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0Bwb3BwZXJqcytjb3JlQDIuMTEuOC9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2NyZWF0ZVBvcHBlci5qcyIsIndlYnBhY2s6Ly9sYWxhLWxhbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vQHBvcHBlcmpzK2NvcmVAMi4xMS44L25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvdXRpbHMvZGVib3VuY2UuanMiLCJ3ZWJwYWNrOi8vbGFsYS1sYW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0Bwb3BwZXJqcytjb3JlQDIuMTEuOC9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL21lcmdlQnlOYW1lLmpzIiwid2VicGFjazovL2xhbGEtbGFuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AcG9wcGVyanMrY29yZUAyLjExLjgvbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9tb2RpZmllcnMvZXZlbnRMaXN0ZW5lcnMuanMiLCJ3ZWJwYWNrOi8vbGFsYS1sYW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0Bwb3BwZXJqcytjb3JlQDIuMTEuOC9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL2dldEJhc2VQbGFjZW1lbnQuanMiLCJ3ZWJwYWNrOi8vbGFsYS1sYW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0Bwb3BwZXJqcytjb3JlQDIuMTEuOC9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL2dldFZhcmlhdGlvbi5qcyIsIndlYnBhY2s6Ly9sYWxhLWxhbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vQHBvcHBlcmpzK2NvcmVAMi4xMS44L25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvdXRpbHMvZ2V0TWFpbkF4aXNGcm9tUGxhY2VtZW50LmpzIiwid2VicGFjazovL2xhbGEtbGFuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AcG9wcGVyanMrY29yZUAyLjExLjgvbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi91dGlscy9jb21wdXRlT2Zmc2V0cy5qcyIsIndlYnBhY2s6Ly9sYWxhLWxhbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vQHBvcHBlcmpzK2NvcmVAMi4xMS44L25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvbW9kaWZpZXJzL2NvbXB1dGVTdHlsZXMuanMiLCJ3ZWJwYWNrOi8vbGFsYS1sYW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0Bwb3BwZXJqcytjb3JlQDIuMTEuOC9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL21vZGlmaWVycy9hcHBseVN0eWxlcy5qcyIsIndlYnBhY2s6Ly9sYWxhLWxhbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vQHBvcHBlcmpzK2NvcmVAMi4xMS44L25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvdXRpbHMvZ2V0T3Bwb3NpdGVQbGFjZW1lbnQuanMiLCJ3ZWJwYWNrOi8vbGFsYS1sYW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0Bwb3BwZXJqcytjb3JlQDIuMTEuOC9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL2dldE9wcG9zaXRlVmFyaWF0aW9uUGxhY2VtZW50LmpzIiwid2VicGFjazovL2xhbGEtbGFuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AcG9wcGVyanMrY29yZUAyLjExLjgvbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvY29udGFpbnMuanMiLCJ3ZWJwYWNrOi8vbGFsYS1sYW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0Bwb3BwZXJqcytjb3JlQDIuMTEuOC9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL3JlY3RUb0NsaWVudFJlY3QuanMiLCJ3ZWJwYWNrOi8vbGFsYS1sYW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0Bwb3BwZXJqcytjb3JlQDIuMTEuOC9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXRDbGlwcGluZ1JlY3QuanMiLCJ3ZWJwYWNrOi8vbGFsYS1sYW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0Bwb3BwZXJqcytjb3JlQDIuMTEuOC9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXRWaWV3cG9ydFJlY3QuanMiLCJ3ZWJwYWNrOi8vbGFsYS1sYW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0Bwb3BwZXJqcytjb3JlQDIuMTEuOC9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXREb2N1bWVudFJlY3QuanMiLCJ3ZWJwYWNrOi8vbGFsYS1sYW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0Bwb3BwZXJqcytjb3JlQDIuMTEuOC9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL21lcmdlUGFkZGluZ09iamVjdC5qcyIsIndlYnBhY2s6Ly9sYWxhLWxhbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vQHBvcHBlcmpzK2NvcmVAMi4xMS44L25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvdXRpbHMvZ2V0RnJlc2hTaWRlT2JqZWN0LmpzIiwid2VicGFjazovL2xhbGEtbGFuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AcG9wcGVyanMrY29yZUAyLjExLjgvbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi91dGlscy9leHBhbmRUb0hhc2hNYXAuanMiLCJ3ZWJwYWNrOi8vbGFsYS1sYW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0Bwb3BwZXJqcytjb3JlQDIuMTEuOC9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL2RldGVjdE92ZXJmbG93LmpzIiwid2VicGFjazovL2xhbGEtbGFuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AcG9wcGVyanMrY29yZUAyLjExLjgvbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi91dGlscy93aXRoaW4uanMiLCJ3ZWJwYWNrOi8vbGFsYS1sYW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0Bwb3BwZXJqcytjb3JlQDIuMTEuOC9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL21vZGlmaWVycy9oaWRlLmpzIiwid2VicGFjazovL2xhbGEtbGFuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AcG9wcGVyanMrY29yZUAyLjExLjgvbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9wb3BwZXIuanMiLCJ3ZWJwYWNrOi8vbGFsYS1sYW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0Bwb3BwZXJqcytjb3JlQDIuMTEuOC9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL21vZGlmaWVycy9wb3BwZXJPZmZzZXRzLmpzIiwid2VicGFjazovL2xhbGEtbGFuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AcG9wcGVyanMrY29yZUAyLjExLjgvbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9tb2RpZmllcnMvb2Zmc2V0LmpzIiwid2VicGFjazovL2xhbGEtbGFuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AcG9wcGVyanMrY29yZUAyLjExLjgvbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9tb2RpZmllcnMvZmxpcC5qcyIsIndlYnBhY2s6Ly9sYWxhLWxhbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vQHBvcHBlcmpzK2NvcmVAMi4xMS44L25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvdXRpbHMvY29tcHV0ZUF1dG9QbGFjZW1lbnQuanMiLCJ3ZWJwYWNrOi8vbGFsYS1sYW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0Bwb3BwZXJqcytjb3JlQDIuMTEuOC9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL21vZGlmaWVycy9wcmV2ZW50T3ZlcmZsb3cuanMiLCJ3ZWJwYWNrOi8vbGFsYS1sYW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0Bwb3BwZXJqcytjb3JlQDIuMTEuOC9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL2dldEFsdEF4aXMuanMiLCJ3ZWJwYWNrOi8vbGFsYS1sYW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0Bwb3BwZXJqcytjb3JlQDIuMTEuOC9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL21vZGlmaWVycy9hcnJvdy5qcyIsIndlYnBhY2s6Ly9sYWxhLWxhbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vQG11aSttYXRlcmlhbEA1LjE2LjRfQGVtb3Rpb24rcmVhY3RAMTEuMTMuMF9AdHlwZXMrcmVhY3RAMTguMy4zX3JlYWN0QDE4LjMuMV9fQGVtb3Rpb24rc3R5bGVkX2JyeGlwbnY0eXZxaGVvc2d4Y2F3ZHhkeWF5L25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL1BvcHBlci9wb3BwZXJDbGFzc2VzLmpzIiwid2VicGFjazovL2xhbGEtbGFuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbXVpK21hdGVyaWFsQDUuMTYuNF9AZW1vdGlvbityZWFjdEAxMS4xMy4wX0B0eXBlcytyZWFjdEAxOC4zLjNfcmVhY3RAMTguMy4xX19AZW1vdGlvbitzdHlsZWRfYnJ4aXBudjR5dnFoZW9zZ3hjYXdkeGR5YXkvbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvUG9wcGVyL0Jhc2VQb3BwZXIuanMiLCJ3ZWJwYWNrOi8vbGFsYS1sYW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BtdWkrbWF0ZXJpYWxANS4xNi40X0BlbW90aW9uK3JlYWN0QDExLjEzLjBfQHR5cGVzK3JlYWN0QDE4LjMuM19yZWFjdEAxOC4zLjFfX0BlbW90aW9uK3N0eWxlZF9icnhpcG52NHl2cWhlb3NneGNhd2R4ZHlheS9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9Qb3BwZXIvUG9wcGVyLmpzIiwid2VicGFjazovL2xhbGEtbGFuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbXVpK21hdGVyaWFsQDUuMTYuNF9AZW1vdGlvbityZWFjdEAxMS4xMy4wX0B0eXBlcytyZWFjdEAxOC4zLjNfcmVhY3RAMTguMy4xX19AZW1vdGlvbitzdHlsZWRfYnJ4aXBudjR5dnFoZW9zZ3hjYXdkeGR5YXkvbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvTGlzdFN1YmhlYWRlci9saXN0U3ViaGVhZGVyQ2xhc3Nlcy5qcyIsIndlYnBhY2s6Ly9sYWxhLWxhbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vQG11aSttYXRlcmlhbEA1LjE2LjRfQGVtb3Rpb24rcmVhY3RAMTEuMTMuMF9AdHlwZXMrcmVhY3RAMTguMy4zX3JlYWN0QDE4LjMuMV9fQGVtb3Rpb24rc3R5bGVkX2JyeGlwbnY0eXZxaGVvc2d4Y2F3ZHhkeWF5L25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0xpc3RTdWJoZWFkZXIvTGlzdFN1YmhlYWRlci5qcyIsIndlYnBhY2s6Ly9sYWxhLWxhbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vQG11aSttYXRlcmlhbEA1LjE2LjRfQGVtb3Rpb24rcmVhY3RAMTEuMTMuMF9AdHlwZXMrcmVhY3RAMTguMy4zX3JlYWN0QDE4LjMuMV9fQGVtb3Rpb24rc3R5bGVkX2JyeGlwbnY0eXZxaGVvc2d4Y2F3ZHhkeWF5L25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL2ludGVybmFsL3N2Zy1pY29ucy9DYW5jZWwuanMiLCJ3ZWJwYWNrOi8vbGFsYS1sYW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BtdWkrbWF0ZXJpYWxANS4xNi40X0BlbW90aW9uK3JlYWN0QDExLjEzLjBfQHR5cGVzK3JlYWN0QDE4LjMuM19yZWFjdEAxOC4zLjFfX0BlbW90aW9uK3N0eWxlZF9icnhpcG52NHl2cWhlb3NneGNhd2R4ZHlheS9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9DaGlwL2NoaXBDbGFzc2VzLmpzIiwid2VicGFjazovL2xhbGEtbGFuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbXVpK21hdGVyaWFsQDUuMTYuNF9AZW1vdGlvbityZWFjdEAxMS4xMy4wX0B0eXBlcytyZWFjdEAxOC4zLjNfcmVhY3RAMTguMy4xX19AZW1vdGlvbitzdHlsZWRfYnJ4aXBudjR5dnFoZW9zZ3hjYXdkeGR5YXkvbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvQ2hpcC9DaGlwLmpzIiwid2VicGFjazovL2xhbGEtbGFuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbXVpK21hdGVyaWFsQDUuMTYuNF9AZW1vdGlvbityZWFjdEAxMS4xMy4wX0B0eXBlcytyZWFjdEAxOC4zLjNfcmVhY3RAMTguMy4xX19AZW1vdGlvbitzdHlsZWRfYnJ4aXBudjR5dnFoZW9zZ3hjYXdkeGR5YXkvbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvSW5wdXRCYXNlL2lucHV0QmFzZUNsYXNzZXMuanMiLCJ3ZWJwYWNrOi8vbGFsYS1sYW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BtdWkrbWF0ZXJpYWxANS4xNi40X0BlbW90aW9uK3JlYWN0QDExLjEzLjBfQHR5cGVzK3JlYWN0QDE4LjMuM19yZWFjdEAxOC4zLjFfX0BlbW90aW9uK3N0eWxlZF9icnhpcG52NHl2cWhlb3NneGNhd2R4ZHlheS9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9JbnB1dC9pbnB1dENsYXNzZXMuanMiLCJ3ZWJwYWNrOi8vbGFsYS1sYW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BtdWkrbWF0ZXJpYWxANS4xNi40X0BlbW90aW9uK3JlYWN0QDExLjEzLjBfQHR5cGVzK3JlYWN0QDE4LjMuM19yZWFjdEAxOC4zLjFfX0BlbW90aW9uK3N0eWxlZF9icnhpcG52NHl2cWhlb3NneGNhd2R4ZHlheS9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9PdXRsaW5lZElucHV0L291dGxpbmVkSW5wdXRDbGFzc2VzLmpzIiwid2VicGFjazovL2xhbGEtbGFuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbXVpK21hdGVyaWFsQDUuMTYuNF9AZW1vdGlvbityZWFjdEAxMS4xMy4wX0B0eXBlcytyZWFjdEAxOC4zLjNfcmVhY3RAMTguMy4xX19AZW1vdGlvbitzdHlsZWRfYnJ4aXBudjR5dnFoZW9zZ3hjYXdkeGR5YXkvbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvRmlsbGVkSW5wdXQvZmlsbGVkSW5wdXRDbGFzc2VzLmpzIiwid2VicGFjazovL2xhbGEtbGFuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbXVpK21hdGVyaWFsQDUuMTYuNF9AZW1vdGlvbityZWFjdEAxMS4xMy4wX0B0eXBlcytyZWFjdEAxOC4zLjNfcmVhY3RAMTguMy4xX19AZW1vdGlvbitzdHlsZWRfYnJ4aXBudjR5dnFoZW9zZ3hjYXdkeGR5YXkvbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvaW50ZXJuYWwvc3ZnLWljb25zL0Fycm93RHJvcERvd24uanMiLCJ3ZWJwYWNrOi8vbGFsYS1sYW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BtdWkrbWF0ZXJpYWxANS4xNi40X0BlbW90aW9uK3JlYWN0QDExLjEzLjBfQHR5cGVzK3JlYWN0QDE4LjMuM19yZWFjdEAxOC4zLjFfX0BlbW90aW9uK3N0eWxlZF9icnhpcG52NHl2cWhlb3NneGNhd2R4ZHlheS9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9BdXRvY29tcGxldGUvYXV0b2NvbXBsZXRlQ2xhc3Nlcy5qcyIsIndlYnBhY2s6Ly9sYWxhLWxhbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vQG11aSttYXRlcmlhbEA1LjE2LjRfQGVtb3Rpb24rcmVhY3RAMTEuMTMuMF9AdHlwZXMrcmVhY3RAMTguMy4zX3JlYWN0QDE4LjMuMV9fQGVtb3Rpb24rc3R5bGVkX2JyeGlwbnY0eXZxaGVvc2d4Y2F3ZHhkeWF5L25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0F1dG9jb21wbGV0ZS9BdXRvY29tcGxldGUuanMiLCJ3ZWJwYWNrOi8vbGFsYS1sYW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BtdWkrbWF0ZXJpYWxANS4xNi40X0BlbW90aW9uK3JlYWN0QDExLjEzLjBfQHR5cGVzK3JlYWN0QDE4LjMuM19yZWFjdEAxOC4zLjFfX0BlbW90aW9uK3N0eWxlZF9icnhpcG52NHl2cWhlb3NneGNhd2R4ZHlheS9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9pbnRlcm5hbC9zdmctaWNvbnMvUGVyc29uLmpzIiwid2VicGFjazovL2xhbGEtbGFuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbXVpK21hdGVyaWFsQDUuMTYuNF9AZW1vdGlvbityZWFjdEAxMS4xMy4wX0B0eXBlcytyZWFjdEAxOC4zLjNfcmVhY3RAMTguMy4xX19AZW1vdGlvbitzdHlsZWRfYnJ4aXBudjR5dnFoZW9zZ3hjYXdkeGR5YXkvbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvQXZhdGFyL2F2YXRhckNsYXNzZXMuanMiLCJ3ZWJwYWNrOi8vbGFsYS1sYW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BtdWkrbWF0ZXJpYWxANS4xNi40X0BlbW90aW9uK3JlYWN0QDExLjEzLjBfQHR5cGVzK3JlYWN0QDE4LjMuM19yZWFjdEAxOC4zLjFfX0BlbW90aW9uK3N0eWxlZF9icnhpcG52NHl2cWhlb3NneGNhd2R4ZHlheS9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9BdmF0YXIvQXZhdGFyLmpzIiwid2VicGFjazovL2xhbGEtbGFuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbXVpK21hdGVyaWFsQDUuMTYuNF9AZW1vdGlvbityZWFjdEAxMS4xMy4wX0B0eXBlcytyZWFjdEAxOC4zLjNfcmVhY3RAMTguMy4xX19AZW1vdGlvbitzdHlsZWRfYnJ4aXBudjR5dnFoZW9zZ3hjYXdkeGR5YXkvbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvQXZhdGFyR3JvdXAvYXZhdGFyR3JvdXBDbGFzc2VzLmpzIiwid2VicGFjazovL2xhbGEtbGFuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbXVpK21hdGVyaWFsQDUuMTYuNF9AZW1vdGlvbityZWFjdEAxMS4xMy4wX0B0eXBlcytyZWFjdEAxOC4zLjNfcmVhY3RAMTguMy4xX19AZW1vdGlvbitzdHlsZWRfYnJ4aXBudjR5dnFoZW9zZ3hjYXdkeGR5YXkvbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvQXZhdGFyR3JvdXAvQXZhdGFyR3JvdXAuanMiLCJ3ZWJwYWNrOi8vbGFsYS1sYW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BtdWkrbWF0ZXJpYWxANS4xNi40X0BlbW90aW9uK3JlYWN0QDExLjEzLjBfQHR5cGVzK3JlYWN0QDE4LjMuM19yZWFjdEAxOC4zLjFfX0BlbW90aW9uK3N0eWxlZF9icnhpcG52NHl2cWhlb3NneGNhd2R4ZHlheS9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9CYWRnZS9iYWRnZUNsYXNzZXMuanMiLCJ3ZWJwYWNrOi8vbGFsYS1sYW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BtdWkrbWF0ZXJpYWxANS4xNi40X0BlbW90aW9uK3JlYWN0QDExLjEzLjBfQHR5cGVzK3JlYWN0QDE4LjMuM19yZWFjdEAxOC4zLjFfX0BlbW90aW9uK3N0eWxlZF9icnhpcG52NHl2cWhlb3NneGNhd2R4ZHlheS9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9CYWRnZS9CYWRnZS5qcyIsIndlYnBhY2s6Ly9sYWxhLWxhbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vQG11aSttYXRlcmlhbEA1LjE2LjRfQGVtb3Rpb24rcmVhY3RAMTEuMTMuMF9AdHlwZXMrcmVhY3RAMTguMy4zX3JlYWN0QDE4LjMuMV9fQGVtb3Rpb24rc3R5bGVkX2JyeGlwbnY0eXZxaGVvc2d4Y2F3ZHhkeWF5L25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0JhZGdlL3VzZUJhZGdlLmpzIiwid2VicGFjazovL2xhbGEtbGFuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbXVpK21hdGVyaWFsQDUuMTYuNF9AZW1vdGlvbityZWFjdEAxMS4xMy4wX0B0eXBlcytyZWFjdEAxOC4zLjNfcmVhY3RAMTguMy4xX19AZW1vdGlvbitzdHlsZWRfYnJ4aXBudjR5dnFoZW9zZ3hjYXdkeGR5YXkvbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvQm90dG9tTmF2aWdhdGlvbi9ib3R0b21OYXZpZ2F0aW9uQ2xhc3Nlcy5qcyIsIndlYnBhY2s6Ly9sYWxhLWxhbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vQG11aSttYXRlcmlhbEA1LjE2LjRfQGVtb3Rpb24rcmVhY3RAMTEuMTMuMF9AdHlwZXMrcmVhY3RAMTguMy4zX3JlYWN0QDE4LjMuMV9fQGVtb3Rpb24rc3R5bGVkX2JyeGlwbnY0eXZxaGVvc2d4Y2F3ZHhkeWF5L25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0JvdHRvbU5hdmlnYXRpb24vQm90dG9tTmF2aWdhdGlvbi5qcyIsIndlYnBhY2s6Ly9sYWxhLWxhbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vQG11aSttYXRlcmlhbEA1LjE2LjRfQGVtb3Rpb24rcmVhY3RAMTEuMTMuMF9AdHlwZXMrcmVhY3RAMTguMy4zX3JlYWN0QDE4LjMuMV9fQGVtb3Rpb24rc3R5bGVkX2JyeGlwbnY0eXZxaGVvc2d4Y2F3ZHhkeWF5L25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0JvdHRvbU5hdmlnYXRpb25BY3Rpb24vYm90dG9tTmF2aWdhdGlvbkFjdGlvbkNsYXNzZXMuanMiLCJ3ZWJwYWNrOi8vbGFsYS1sYW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BtdWkrbWF0ZXJpYWxANS4xNi40X0BlbW90aW9uK3JlYWN0QDExLjEzLjBfQHR5cGVzK3JlYWN0QDE4LjMuM19yZWFjdEAxOC4zLjFfX0BlbW90aW9uK3N0eWxlZF9icnhpcG52NHl2cWhlb3NneGNhd2R4ZHlheS9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9Cb3R0b21OYXZpZ2F0aW9uQWN0aW9uL0JvdHRvbU5hdmlnYXRpb25BY3Rpb24uanMiLCJ3ZWJwYWNrOi8vbGFsYS1sYW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BtdWkrbWF0ZXJpYWxANS4xNi40X0BlbW90aW9uK3JlYWN0QDExLjEzLjBfQHR5cGVzK3JlYWN0QDE4LjMuM19yZWFjdEAxOC4zLjFfX0BlbW90aW9uK3N0eWxlZF9icnhpcG52NHl2cWhlb3NneGNhd2R4ZHlheS9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9pbnRlcm5hbC9zdmctaWNvbnMvTW9yZUhvcml6LmpzIiwid2VicGFjazovL2xhbGEtbGFuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbXVpK21hdGVyaWFsQDUuMTYuNF9AZW1vdGlvbityZWFjdEAxMS4xMy4wX0B0eXBlcytyZWFjdEAxOC4zLjNfcmVhY3RAMTguMy4xX19AZW1vdGlvbitzdHlsZWRfYnJ4aXBudjR5dnFoZW9zZ3hjYXdkeGR5YXkvbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvQnJlYWRjcnVtYnMvQnJlYWRjcnVtYkNvbGxhcHNlZC5qcyIsIndlYnBhY2s6Ly9sYWxhLWxhbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vQG11aSttYXRlcmlhbEA1LjE2LjRfQGVtb3Rpb24rcmVhY3RAMTEuMTMuMF9AdHlwZXMrcmVhY3RAMTguMy4zX3JlYWN0QDE4LjMuMV9fQGVtb3Rpb24rc3R5bGVkX2JyeGlwbnY0eXZxaGVvc2d4Y2F3ZHhkeWF5L25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0JyZWFkY3J1bWJzL2JyZWFkY3J1bWJzQ2xhc3Nlcy5qcyIsIndlYnBhY2s6Ly9sYWxhLWxhbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vQG11aSttYXRlcmlhbEA1LjE2LjRfQGVtb3Rpb24rcmVhY3RAMTEuMTMuMF9AdHlwZXMrcmVhY3RAMTguMy4zX3JlYWN0QDE4LjMuMV9fQGVtb3Rpb24rc3R5bGVkX2JyeGlwbnY0eXZxaGVvc2d4Y2F3ZHhkeWF5L25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0JyZWFkY3J1bWJzL0JyZWFkY3J1bWJzLmpzIiwid2VicGFjazovL2xhbGEtbGFuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbXVpK3V0aWxzQDUuMTYuNF9AdHlwZXMrcmVhY3RAMTguMy4zX3JlYWN0QDE4LjMuMS9ub2RlX21vZHVsZXMvQG11aS91dGlscy9lc20vZ2V0VmFsaWRSZWFjdENoaWxkcmVuL2dldFZhbGlkUmVhY3RDaGlsZHJlbi5qcyIsIndlYnBhY2s6Ly9sYWxhLWxhbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vQG11aSttYXRlcmlhbEA1LjE2LjRfQGVtb3Rpb24rcmVhY3RAMTEuMTMuMF9AdHlwZXMrcmVhY3RAMTguMy4zX3JlYWN0QDE4LjMuMV9fQGVtb3Rpb24rc3R5bGVkX2JyeGlwbnY0eXZxaGVvc2d4Y2F3ZHhkeWF5L25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0J1dHRvbkdyb3VwL2J1dHRvbkdyb3VwQ2xhc3Nlcy5qcyIsIndlYnBhY2s6Ly9sYWxhLWxhbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vQG11aSttYXRlcmlhbEA1LjE2LjRfQGVtb3Rpb24rcmVhY3RAMTEuMTMuMF9AdHlwZXMrcmVhY3RAMTguMy4zX3JlYWN0QDE4LjMuMV9fQGVtb3Rpb24rc3R5bGVkX2JyeGlwbnY0eXZxaGVvc2d4Y2F3ZHhkeWF5L25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0J1dHRvbkdyb3VwL0J1dHRvbkdyb3VwLmpzIiwid2VicGFjazovL2xhbGEtbGFuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbXVpK21hdGVyaWFsQDUuMTYuNF9AZW1vdGlvbityZWFjdEAxMS4xMy4wX0B0eXBlcytyZWFjdEAxOC4zLjNfcmVhY3RAMTguMy4xX19AZW1vdGlvbitzdHlsZWRfYnJ4aXBudjR5dnFoZW9zZ3hjYXdkeGR5YXkvbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvQ2FyZC9jYXJkQ2xhc3Nlcy5qcyIsIndlYnBhY2s6Ly9sYWxhLWxhbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vQG11aSttYXRlcmlhbEA1LjE2LjRfQGVtb3Rpb24rcmVhY3RAMTEuMTMuMF9AdHlwZXMrcmVhY3RAMTguMy4zX3JlYWN0QDE4LjMuMV9fQGVtb3Rpb24rc3R5bGVkX2JyeGlwbnY0eXZxaGVvc2d4Y2F3ZHhkeWF5L25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0NhcmQvQ2FyZC5qcyIsIndlYnBhY2s6Ly9sYWxhLWxhbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vQG11aSttYXRlcmlhbEA1LjE2LjRfQGVtb3Rpb24rcmVhY3RAMTEuMTMuMF9AdHlwZXMrcmVhY3RAMTguMy4zX3JlYWN0QDE4LjMuMV9fQGVtb3Rpb24rc3R5bGVkX2JyeGlwbnY0eXZxaGVvc2d4Y2F3ZHhkeWF5L25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0NhcmRBY3Rpb25BcmVhL2NhcmRBY3Rpb25BcmVhQ2xhc3Nlcy5qcyIsIndlYnBhY2s6Ly9sYWxhLWxhbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vQG11aSttYXRlcmlhbEA1LjE2LjRfQGVtb3Rpb24rcmVhY3RAMTEuMTMuMF9AdHlwZXMrcmVhY3RAMTguMy4zX3JlYWN0QDE4LjMuMV9fQGVtb3Rpb24rc3R5bGVkX2JyeGlwbnY0eXZxaGVvc2d4Y2F3ZHhkeWF5L25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0NhcmRBY3Rpb25BcmVhL0NhcmRBY3Rpb25BcmVhLmpzIiwid2VicGFjazovL2xhbGEtbGFuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbXVpK21hdGVyaWFsQDUuMTYuNF9AZW1vdGlvbityZWFjdEAxMS4xMy4wX0B0eXBlcytyZWFjdEAxOC4zLjNfcmVhY3RAMTguMy4xX19AZW1vdGlvbitzdHlsZWRfYnJ4aXBudjR5dnFoZW9zZ3hjYXdkeGR5YXkvbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvQ2FyZEFjdGlvbnMvY2FyZEFjdGlvbnNDbGFzc2VzLmpzIiwid2VicGFjazovL2xhbGEtbGFuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbXVpK21hdGVyaWFsQDUuMTYuNF9AZW1vdGlvbityZWFjdEAxMS4xMy4wX0B0eXBlcytyZWFjdEAxOC4zLjNfcmVhY3RAMTguMy4xX19AZW1vdGlvbitzdHlsZWRfYnJ4aXBudjR5dnFoZW9zZ3hjYXdkeGR5YXkvbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvQ2FyZEFjdGlvbnMvQ2FyZEFjdGlvbnMuanMiLCJ3ZWJwYWNrOi8vbGFsYS1sYW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BtdWkrbWF0ZXJpYWxANS4xNi40X0BlbW90aW9uK3JlYWN0QDExLjEzLjBfQHR5cGVzK3JlYWN0QDE4LjMuM19yZWFjdEAxOC4zLjFfX0BlbW90aW9uK3N0eWxlZF9icnhpcG52NHl2cWhlb3NneGNhd2R4ZHlheS9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9DYXJkQ29udGVudC9jYXJkQ29udGVudENsYXNzZXMuanMiLCJ3ZWJwYWNrOi8vbGFsYS1sYW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BtdWkrbWF0ZXJpYWxANS4xNi40X0BlbW90aW9uK3JlYWN0QDExLjEzLjBfQHR5cGVzK3JlYWN0QDE4LjMuM19yZWFjdEAxOC4zLjFfX0BlbW90aW9uK3N0eWxlZF9icnhpcG52NHl2cWhlb3NneGNhd2R4ZHlheS9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9DYXJkQ29udGVudC9DYXJkQ29udGVudC5qcyIsIndlYnBhY2s6Ly9sYWxhLWxhbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vQG11aSttYXRlcmlhbEA1LjE2LjRfQGVtb3Rpb24rcmVhY3RAMTEuMTMuMF9AdHlwZXMrcmVhY3RAMTguMy4zX3JlYWN0QDE4LjMuMV9fQGVtb3Rpb24rc3R5bGVkX2JyeGlwbnY0eXZxaGVvc2d4Y2F3ZHhkeWF5L25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0NhcmRIZWFkZXIvY2FyZEhlYWRlckNsYXNzZXMuanMiLCJ3ZWJwYWNrOi8vbGFsYS1sYW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BtdWkrbWF0ZXJpYWxANS4xNi40X0BlbW90aW9uK3JlYWN0QDExLjEzLjBfQHR5cGVzK3JlYWN0QDE4LjMuM19yZWFjdEAxOC4zLjFfX0BlbW90aW9uK3N0eWxlZF9icnhpcG52NHl2cWhlb3NneGNhd2R4ZHlheS9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9DYXJkSGVhZGVyL0NhcmRIZWFkZXIuanMiLCJ3ZWJwYWNrOi8vbGFsYS1sYW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BtdWkrbWF0ZXJpYWxANS4xNi40X0BlbW90aW9uK3JlYWN0QDExLjEzLjBfQHR5cGVzK3JlYWN0QDE4LjMuM19yZWFjdEAxOC4zLjFfX0BlbW90aW9uK3N0eWxlZF9icnhpcG52NHl2cWhlb3NneGNhd2R4ZHlheS9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9DYXJkTWVkaWEvY2FyZE1lZGlhQ2xhc3Nlcy5qcyIsIndlYnBhY2s6Ly9sYWxhLWxhbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vQG11aSttYXRlcmlhbEA1LjE2LjRfQGVtb3Rpb24rcmVhY3RAMTEuMTMuMF9AdHlwZXMrcmVhY3RAMTguMy4zX3JlYWN0QDE4LjMuMV9fQGVtb3Rpb24rc3R5bGVkX2JyeGlwbnY0eXZxaGVvc2d4Y2F3ZHhkeWF5L25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0NhcmRNZWRpYS9DYXJkTWVkaWEuanMiLCJ3ZWJwYWNrOi8vbGFsYS1sYW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BtdWkrbWF0ZXJpYWxANS4xNi40X0BlbW90aW9uK3JlYWN0QDExLjEzLjBfQHR5cGVzK3JlYWN0QDE4LjMuM19yZWFjdEAxOC4zLjFfX0BlbW90aW9uK3N0eWxlZF9icnhpcG52NHl2cWhlb3NneGNhd2R4ZHlheS9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9DaXJjdWxhclByb2dyZXNzL2NpcmN1bGFyUHJvZ3Jlc3NDbGFzc2VzLmpzIiwid2VicGFjazovL2xhbGEtbGFuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbXVpK21hdGVyaWFsQDUuMTYuNF9AZW1vdGlvbityZWFjdEAxMS4xMy4wX0B0eXBlcytyZWFjdEAxOC4zLjNfcmVhY3RAMTguMy4xX19AZW1vdGlvbitzdHlsZWRfYnJ4aXBudjR5dnFoZW9zZ3hjYXdkeGR5YXkvbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvQ2lyY3VsYXJQcm9ncmVzcy9DaXJjdWxhclByb2dyZXNzLmpzIiwid2VicGFjazovL2xhbGEtbGFuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbXVpK21hdGVyaWFsQDUuMTYuNF9AZW1vdGlvbityZWFjdEAxMS4xMy4wX0B0eXBlcytyZWFjdEAxOC4zLjNfcmVhY3RAMTguMy4xX19AZW1vdGlvbitzdHlsZWRfYnJ4aXBudjR5dnFoZW9zZ3hjYXdkeGR5YXkvbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvQ2xpY2tBd2F5TGlzdGVuZXIvQ2xpY2tBd2F5TGlzdGVuZXIuanMiLCJ3ZWJwYWNrOi8vbGFsYS1sYW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BtdWkrc3lzdGVtQDUuMTYuNF9AZW1vdGlvbityZWFjdEAxMS4xMy4wX0B0eXBlcytyZWFjdEAxOC4zLjNfcmVhY3RAMTguMy4xX19AZW1vdGlvbitzdHlsZWRAMV82cHhzc2hmNG9wNmNpZXhlc2pnajc3eG9vZS9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL2NyZWF0ZVN0eWxlZC5qcyIsIndlYnBhY2s6Ly9sYWxhLWxhbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vQG11aStzeXN0ZW1ANS4xNi40X0BlbW90aW9uK3JlYWN0QDExLjEzLjBfQHR5cGVzK3JlYWN0QDE4LjMuM19yZWFjdEAxOC4zLjFfX0BlbW90aW9uK3N0eWxlZEAxXzZweHNzaGY0b3A2Y2lleGVzamdqNzd4b29lL25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vc3R5bGVkLmpzIiwid2VicGFjazovL2xhbGEtbGFuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbXVpK3N5c3RlbUA1LjE2LjRfQGVtb3Rpb24rcmVhY3RAMTEuMTMuMF9AdHlwZXMrcmVhY3RAMTguMy4zX3JlYWN0QDE4LjMuMV9fQGVtb3Rpb24rc3R5bGVkQDFfNnB4c3NoZjRvcDZjaWV4ZXNqZ2o3N3hvb2Uvbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS9Db250YWluZXIvY3JlYXRlQ29udGFpbmVyLmpzIiwid2VicGFjazovL2xhbGEtbGFuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbXVpK21hdGVyaWFsQDUuMTYuNF9AZW1vdGlvbityZWFjdEAxMS4xMy4wX0B0eXBlcytyZWFjdEAxOC4zLjNfcmVhY3RAMTguMy4xX19AZW1vdGlvbitzdHlsZWRfYnJ4aXBudjR5dnFoZW9zZ3hjYXdkeGR5YXkvbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvQ29udGFpbmVyL0NvbnRhaW5lci5qcyIsIndlYnBhY2s6Ly9sYWxhLWxhbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vQG11aSttYXRlcmlhbEA1LjE2LjRfQGVtb3Rpb24rcmVhY3RAMTEuMTMuMF9AdHlwZXMrcmVhY3RAMTguMy4zX3JlYWN0QDE4LjMuMV9fQGVtb3Rpb24rc3R5bGVkX2JyeGlwbnY0eXZxaGVvc2d4Y2F3ZHhkeWF5L25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0NvbnRhaW5lci9jb250YWluZXJDbGFzc2VzLmpzIiwid2VicGFjazovL2xhbGEtbGFuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbXVpK21hdGVyaWFsQDUuMTYuNF9AZW1vdGlvbityZWFjdEAxMS4xMy4wX0B0eXBlcytyZWFjdEAxOC4zLjNfcmVhY3RAMTguMy4xX19AZW1vdGlvbitzdHlsZWRfYnJ4aXBudjR5dnFoZW9zZ3hjYXdkeGR5YXkvbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvZGFya1Njcm9sbGJhci9pbmRleC5qcyIsIndlYnBhY2s6Ly9sYWxhLWxhbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vQG11aSttYXRlcmlhbEA1LjE2LjRfQGVtb3Rpb24rcmVhY3RAMTEuMTMuMF9AdHlwZXMrcmVhY3RAMTguMy4zX3JlYWN0QDE4LjMuMV9fQGVtb3Rpb24rc3R5bGVkX2JyeGlwbnY0eXZxaGVvc2d4Y2F3ZHhkeWF5L25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0RpYWxvZy9kaWFsb2dDbGFzc2VzLmpzIiwid2VicGFjazovL2xhbGEtbGFuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbXVpK21hdGVyaWFsQDUuMTYuNF9AZW1vdGlvbityZWFjdEAxMS4xMy4wX0B0eXBlcytyZWFjdEAxOC4zLjNfcmVhY3RAMTguMy4xX19AZW1vdGlvbitzdHlsZWRfYnJ4aXBudjR5dnFoZW9zZ3hjYXdkeGR5YXkvbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvRGlhbG9nL0RpYWxvZ0NvbnRleHQuanMiLCJ3ZWJwYWNrOi8vbGFsYS1sYW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BtdWkrbWF0ZXJpYWxANS4xNi40X0BlbW90aW9uK3JlYWN0QDExLjEzLjBfQHR5cGVzK3JlYWN0QDE4LjMuM19yZWFjdEAxOC4zLjFfX0BlbW90aW9uK3N0eWxlZF9icnhpcG52NHl2cWhlb3NneGNhd2R4ZHlheS9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9EaWFsb2cvRGlhbG9nLmpzIiwid2VicGFjazovL2xhbGEtbGFuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbXVpK21hdGVyaWFsQDUuMTYuNF9AZW1vdGlvbityZWFjdEAxMS4xMy4wX0B0eXBlcytyZWFjdEAxOC4zLjNfcmVhY3RAMTguMy4xX19AZW1vdGlvbitzdHlsZWRfYnJ4aXBudjR5dnFoZW9zZ3hjYXdkeGR5YXkvbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvRGlhbG9nQWN0aW9ucy9kaWFsb2dBY3Rpb25zQ2xhc3Nlcy5qcyIsIndlYnBhY2s6Ly9sYWxhLWxhbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vQG11aSttYXRlcmlhbEA1LjE2LjRfQGVtb3Rpb24rcmVhY3RAMTEuMTMuMF9AdHlwZXMrcmVhY3RAMTguMy4zX3JlYWN0QDE4LjMuMV9fQGVtb3Rpb24rc3R5bGVkX2JyeGlwbnY0eXZxaGVvc2d4Y2F3ZHhkeWF5L25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0RpYWxvZ0FjdGlvbnMvRGlhbG9nQWN0aW9ucy5qcyIsIndlYnBhY2s6Ly9sYWxhLWxhbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vQG11aSttYXRlcmlhbEA1LjE2LjRfQGVtb3Rpb24rcmVhY3RAMTEuMTMuMF9AdHlwZXMrcmVhY3RAMTguMy4zX3JlYWN0QDE4LjMuMV9fQGVtb3Rpb24rc3R5bGVkX2JyeGlwbnY0eXZxaGVvc2d4Y2F3ZHhkeWF5L25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0RpYWxvZ0NvbnRlbnQvZGlhbG9nQ29udGVudENsYXNzZXMuanMiLCJ3ZWJwYWNrOi8vbGFsYS1sYW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BtdWkrbWF0ZXJpYWxANS4xNi40X0BlbW90aW9uK3JlYWN0QDExLjEzLjBfQHR5cGVzK3JlYWN0QDE4LjMuM19yZWFjdEAxOC4zLjFfX0BlbW90aW9uK3N0eWxlZF9icnhpcG52NHl2cWhlb3NneGNhd2R4ZHlheS9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9EaWFsb2dUaXRsZS9kaWFsb2dUaXRsZUNsYXNzZXMuanMiLCJ3ZWJwYWNrOi8vbGFsYS1sYW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BtdWkrbWF0ZXJpYWxANS4xNi40X0BlbW90aW9uK3JlYWN0QDExLjEzLjBfQHR5cGVzK3JlYWN0QDE4LjMuM19yZWFjdEAxOC4zLjFfX0BlbW90aW9uK3N0eWxlZF9icnhpcG52NHl2cWhlb3NneGNhd2R4ZHlheS9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9EaWFsb2dDb250ZW50L0RpYWxvZ0NvbnRlbnQuanMiLCJ3ZWJwYWNrOi8vbGFsYS1sYW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BtdWkrbWF0ZXJpYWxANS4xNi40X0BlbW90aW9uK3JlYWN0QDExLjEzLjBfQHR5cGVzK3JlYWN0QDE4LjMuM19yZWFjdEAxOC4zLjFfX0BlbW90aW9uK3N0eWxlZF9icnhpcG52NHl2cWhlb3NneGNhd2R4ZHlheS9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9EaWFsb2dDb250ZW50VGV4dC9kaWFsb2dDb250ZW50VGV4dENsYXNzZXMuanMiLCJ3ZWJwYWNrOi8vbGFsYS1sYW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BtdWkrbWF0ZXJpYWxANS4xNi40X0BlbW90aW9uK3JlYWN0QDExLjEzLjBfQHR5cGVzK3JlYWN0QDE4LjMuM19yZWFjdEAxOC4zLjFfX0BlbW90aW9uK3N0eWxlZF9icnhpcG52NHl2cWhlb3NneGNhd2R4ZHlheS9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9EaWFsb2dDb250ZW50VGV4dC9EaWFsb2dDb250ZW50VGV4dC5qcyIsIndlYnBhY2s6Ly9sYWxhLWxhbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vQG11aSttYXRlcmlhbEA1LjE2LjRfQGVtb3Rpb24rcmVhY3RAMTEuMTMuMF9AdHlwZXMrcmVhY3RAMTguMy4zX3JlYWN0QDE4LjMuMV9fQGVtb3Rpb24rc3R5bGVkX2JyeGlwbnY0eXZxaGVvc2d4Y2F3ZHhkeWF5L25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0RpYWxvZ1RpdGxlL0RpYWxvZ1RpdGxlLmpzIiwid2VicGFjazovL2xhbGEtbGFuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbXVpK21hdGVyaWFsQDUuMTYuNF9AZW1vdGlvbityZWFjdEAxMS4xMy4wX0B0eXBlcytyZWFjdEAxOC4zLjNfcmVhY3RAMTguMy4xX19AZW1vdGlvbitzdHlsZWRfYnJ4aXBudjR5dnFoZW9zZ3hjYXdkeGR5YXkvbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvRGl2aWRlci9EaXZpZGVyLmpzIiwid2VicGFjazovL2xhbGEtbGFuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbXVpK21hdGVyaWFsQDUuMTYuNF9AZW1vdGlvbityZWFjdEAxMS4xMy4wX0B0eXBlcytyZWFjdEAxOC4zLjNfcmVhY3RAMTguMy4xX19AZW1vdGlvbitzdHlsZWRfYnJ4aXBudjR5dnFoZW9zZ3hjYXdkeGR5YXkvbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvU2xpZGUvU2xpZGUuanMiLCJ3ZWJwYWNrOi8vbGFsYS1sYW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BtdWkrbWF0ZXJpYWxANS4xNi40X0BlbW90aW9uK3JlYWN0QDExLjEzLjBfQHR5cGVzK3JlYWN0QDE4LjMuM19yZWFjdEAxOC4zLjFfX0BlbW90aW9uK3N0eWxlZF9icnhpcG52NHl2cWhlb3NneGNhd2R4ZHlheS9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9EcmF3ZXIvZHJhd2VyQ2xhc3Nlcy5qcyIsIndlYnBhY2s6Ly9sYWxhLWxhbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vQG11aSttYXRlcmlhbEA1LjE2LjRfQGVtb3Rpb24rcmVhY3RAMTEuMTMuMF9AdHlwZXMrcmVhY3RAMTguMy4zX3JlYWN0QDE4LjMuMV9fQGVtb3Rpb24rc3R5bGVkX2JyeGlwbnY0eXZxaGVvc2d4Y2F3ZHhkeWF5L25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0RyYXdlci9EcmF3ZXIuanMiLCJ3ZWJwYWNrOi8vbGFsYS1sYW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BtdWkrbWF0ZXJpYWxANS4xNi40X0BlbW90aW9uK3JlYWN0QDExLjEzLjBfQHR5cGVzK3JlYWN0QDE4LjMuM19yZWFjdEAxOC4zLjFfX0BlbW90aW9uK3N0eWxlZF9icnhpcG52NHl2cWhlb3NneGNhd2R4ZHlheS9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9GYWIvZmFiQ2xhc3Nlcy5qcyIsIndlYnBhY2s6Ly9sYWxhLWxhbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vQG11aSttYXRlcmlhbEA1LjE2LjRfQGVtb3Rpb24rcmVhY3RAMTEuMTMuMF9AdHlwZXMrcmVhY3RAMTguMy4zX3JlYWN0QDE4LjMuMV9fQGVtb3Rpb24rc3R5bGVkX2JyeGlwbnY0eXZxaGVvc2d4Y2F3ZHhkeWF5L25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0ZhYi9GYWIuanMiLCJ3ZWJwYWNrOi8vbGFsYS1sYW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BtdWkrbWF0ZXJpYWxANS4xNi40X0BlbW90aW9uK3JlYWN0QDExLjEzLjBfQHR5cGVzK3JlYWN0QDE4LjMuM19yZWFjdEAxOC4zLjFfX0BlbW90aW9uK3N0eWxlZF9icnhpcG52NHl2cWhlb3NneGNhd2R4ZHlheS9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9UZXh0YXJlYUF1dG9zaXplL1RleHRhcmVhQXV0b3NpemUuanMiLCJ3ZWJwYWNrOi8vbGFsYS1sYW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BtdWkrbWF0ZXJpYWxANS4xNi40X0BlbW90aW9uK3JlYWN0QDExLjEzLjBfQHR5cGVzK3JlYWN0QDE4LjMuM19yZWFjdEAxOC4zLjFfX0BlbW90aW9uK3N0eWxlZF9icnhpcG52NHl2cWhlb3NneGNhd2R4ZHlheS9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9Gb3JtQ29udHJvbC9mb3JtQ29udHJvbFN0YXRlLmpzIiwid2VicGFjazovL2xhbGEtbGFuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbXVpK21hdGVyaWFsQDUuMTYuNF9AZW1vdGlvbityZWFjdEAxMS4xMy4wX0B0eXBlcytyZWFjdEAxOC4zLjNfcmVhY3RAMTguMy4xX19AZW1vdGlvbitzdHlsZWRfYnJ4aXBudjR5dnFoZW9zZ3hjYXdkeGR5YXkvbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvSW5wdXRCYXNlL3V0aWxzLmpzIiwid2VicGFjazovL2xhbGEtbGFuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbXVpK21hdGVyaWFsQDUuMTYuNF9AZW1vdGlvbityZWFjdEAxMS4xMy4wX0B0eXBlcytyZWFjdEAxOC4zLjNfcmVhY3RAMTguMy4xX19AZW1vdGlvbitzdHlsZWRfYnJ4aXBudjR5dnFoZW9zZ3hjYXdkeGR5YXkvbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvSW5wdXRCYXNlL0lucHV0QmFzZS5qcyIsIndlYnBhY2s6Ly9sYWxhLWxhbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vQG11aSttYXRlcmlhbEA1LjE2LjRfQGVtb3Rpb24rcmVhY3RAMTEuMTMuMF9AdHlwZXMrcmVhY3RAMTguMy4zX3JlYWN0QDE4LjMuMV9fQGVtb3Rpb24rc3R5bGVkX2JyeGlwbnY0eXZxaGVvc2d4Y2F3ZHhkeWF5L25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0ZpbGxlZElucHV0L0ZpbGxlZElucHV0LmpzIiwid2VicGFjazovL2xhbGEtbGFuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbXVpK21hdGVyaWFsQDUuMTYuNF9AZW1vdGlvbityZWFjdEAxMS4xMy4wX0B0eXBlcytyZWFjdEAxOC4zLjNfcmVhY3RAMTguMy4xX19AZW1vdGlvbitzdHlsZWRfYnJ4aXBudjR5dnFoZW9zZ3hjYXdkeGR5YXkvbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvRm9ybUNvbnRyb2wvZm9ybUNvbnRyb2xDbGFzc2VzLmpzIiwid2VicGFjazovL2xhbGEtbGFuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbXVpK21hdGVyaWFsQDUuMTYuNF9AZW1vdGlvbityZWFjdEAxMS4xMy4wX0B0eXBlcytyZWFjdEAxOC4zLjNfcmVhY3RAMTguMy4xX19AZW1vdGlvbitzdHlsZWRfYnJ4aXBudjR5dnFoZW9zZ3hjYXdkeGR5YXkvbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvRm9ybUNvbnRyb2wvRm9ybUNvbnRyb2wuanMiLCJ3ZWJwYWNrOi8vbGFsYS1sYW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BtdWkrc3lzdGVtQDUuMTYuNF9AZW1vdGlvbityZWFjdEAxMS4xMy4wX0B0eXBlcytyZWFjdEAxOC4zLjNfcmVhY3RAMTguMy4xX19AZW1vdGlvbitzdHlsZWRAMV82cHhzc2hmNG9wNmNpZXhlc2pnajc3eG9vZS9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL1N0YWNrL2NyZWF0ZVN0YWNrLmpzIiwid2VicGFjazovL2xhbGEtbGFuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbXVpK21hdGVyaWFsQDUuMTYuNF9AZW1vdGlvbityZWFjdEAxMS4xMy4wX0B0eXBlcytyZWFjdEAxOC4zLjNfcmVhY3RAMTguMy4xX19AZW1vdGlvbitzdHlsZWRfYnJ4aXBudjR5dnFoZW9zZ3hjYXdkeGR5YXkvbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvU3RhY2svU3RhY2suanMiLCJ3ZWJwYWNrOi8vbGFsYS1sYW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BtdWkrbWF0ZXJpYWxANS4xNi40X0BlbW90aW9uK3JlYWN0QDExLjEzLjBfQHR5cGVzK3JlYWN0QDE4LjMuM19yZWFjdEAxOC4zLjFfX0BlbW90aW9uK3N0eWxlZF9icnhpcG52NHl2cWhlb3NneGNhd2R4ZHlheS9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9Gb3JtQ29udHJvbExhYmVsL2Zvcm1Db250cm9sTGFiZWxDbGFzc2VzLmpzIiwid2VicGFjazovL2xhbGEtbGFuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbXVpK21hdGVyaWFsQDUuMTYuNF9AZW1vdGlvbityZWFjdEAxMS4xMy4wX0B0eXBlcytyZWFjdEAxOC4zLjNfcmVhY3RAMTguMy4xX19AZW1vdGlvbitzdHlsZWRfYnJ4aXBudjR5dnFoZW9zZ3hjYXdkeGR5YXkvbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvRm9ybUNvbnRyb2xMYWJlbC9Gb3JtQ29udHJvbExhYmVsLmpzIiwid2VicGFjazovL2xhbGEtbGFuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbXVpK21hdGVyaWFsQDUuMTYuNF9AZW1vdGlvbityZWFjdEAxMS4xMy4wX0B0eXBlcytyZWFjdEAxOC4zLjNfcmVhY3RAMTguMy4xX19AZW1vdGlvbitzdHlsZWRfYnJ4aXBudjR5dnFoZW9zZ3hjYXdkeGR5YXkvbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvRm9ybUdyb3VwL2Zvcm1Hcm91cENsYXNzZXMuanMiLCJ3ZWJwYWNrOi8vbGFsYS1sYW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BtdWkrbWF0ZXJpYWxANS4xNi40X0BlbW90aW9uK3JlYWN0QDExLjEzLjBfQHR5cGVzK3JlYWN0QDE4LjMuM19yZWFjdEAxOC4zLjFfX0BlbW90aW9uK3N0eWxlZF9icnhpcG52NHl2cWhlb3NneGNhd2R4ZHlheS9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9Gb3JtR3JvdXAvRm9ybUdyb3VwLmpzIiwid2VicGFjazovL2xhbGEtbGFuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbXVpK21hdGVyaWFsQDUuMTYuNF9AZW1vdGlvbityZWFjdEAxMS4xMy4wX0B0eXBlcytyZWFjdEAxOC4zLjNfcmVhY3RAMTguMy4xX19AZW1vdGlvbitzdHlsZWRfYnJ4aXBudjR5dnFoZW9zZ3hjYXdkeGR5YXkvbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvRm9ybUhlbHBlclRleHQvZm9ybUhlbHBlclRleHRDbGFzc2VzLmpzIiwid2VicGFjazovL2xhbGEtbGFuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbXVpK21hdGVyaWFsQDUuMTYuNF9AZW1vdGlvbityZWFjdEAxMS4xMy4wX0B0eXBlcytyZWFjdEAxOC4zLjNfcmVhY3RAMTguMy4xX19AZW1vdGlvbitzdHlsZWRfYnJ4aXBudjR5dnFoZW9zZ3hjYXdkeGR5YXkvbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvRm9ybUhlbHBlclRleHQvRm9ybUhlbHBlclRleHQuanMiLCJ3ZWJwYWNrOi8vbGFsYS1sYW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BtdWkrbWF0ZXJpYWxANS4xNi40X0BlbW90aW9uK3JlYWN0QDExLjEzLjBfQHR5cGVzK3JlYWN0QDE4LjMuM19yZWFjdEAxOC4zLjFfX0BlbW90aW9uK3N0eWxlZF9icnhpcG52NHl2cWhlb3NneGNhd2R4ZHlheS9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9Gb3JtTGFiZWwvZm9ybUxhYmVsQ2xhc3Nlcy5qcyIsIndlYnBhY2s6Ly9sYWxhLWxhbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vQG11aSttYXRlcmlhbEA1LjE2LjRfQGVtb3Rpb24rcmVhY3RAMTEuMTMuMF9AdHlwZXMrcmVhY3RAMTguMy4zX3JlYWN0QDE4LjMuMV9fQGVtb3Rpb24rc3R5bGVkX2JyeGlwbnY0eXZxaGVvc2d4Y2F3ZHhkeWF5L25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0Zvcm1MYWJlbC9Gb3JtTGFiZWwuanMiLCJ3ZWJwYWNrOi8vbGFsYS1sYW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BtdWkrbWF0ZXJpYWxANS4xNi40X0BlbW90aW9uK3JlYWN0QDExLjEzLjBfQHR5cGVzK3JlYWN0QDE4LjMuM19yZWFjdEAxOC4zLjFfX0BlbW90aW9uK3N0eWxlZF9icnhpcG52NHl2cWhlb3NneGNhd2R4ZHlheS9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9HcmlkL0dyaWRDb250ZXh0LmpzIiwid2VicGFjazovL2xhbGEtbGFuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbXVpK21hdGVyaWFsQDUuMTYuNF9AZW1vdGlvbityZWFjdEAxMS4xMy4wX0B0eXBlcytyZWFjdEAxOC4zLjNfcmVhY3RAMTguMy4xX19AZW1vdGlvbitzdHlsZWRfYnJ4aXBudjR5dnFoZW9zZ3hjYXdkeGR5YXkvbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvR3JpZC9ncmlkQ2xhc3Nlcy5qcyIsIndlYnBhY2s6Ly9sYWxhLWxhbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vQG11aSttYXRlcmlhbEA1LjE2LjRfQGVtb3Rpb24rcmVhY3RAMTEuMTMuMF9AdHlwZXMrcmVhY3RAMTguMy4zX3JlYWN0QDE4LjMuMV9fQGVtb3Rpb24rc3R5bGVkX2JyeGlwbnY0eXZxaGVvc2d4Y2F3ZHhkeWF5L25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0dyaWQvR3JpZC5qcyIsIndlYnBhY2s6Ly9sYWxhLWxhbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vQG11aStzeXN0ZW1ANS4xNi40X0BlbW90aW9uK3JlYWN0QDExLjEzLjBfQHR5cGVzK3JlYWN0QDE4LjMuM19yZWFjdEAxOC4zLjFfX0BlbW90aW9uK3N0eWxlZEAxXzZweHNzaGY0b3A2Y2lleGVzamdqNzd4b29lL25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vVW5zdGFibGVfR3JpZC90cmF2ZXJzZUJyZWFrcG9pbnRzLmpzIiwid2VicGFjazovL2xhbGEtbGFuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbXVpK3N5c3RlbUA1LjE2LjRfQGVtb3Rpb24rcmVhY3RAMTEuMTMuMF9AdHlwZXMrcmVhY3RAMTguMy4zX3JlYWN0QDE4LjMuMV9fQGVtb3Rpb24rc3R5bGVkQDFfNnB4c3NoZjRvcDZjaWV4ZXNqZ2o3N3hvb2Uvbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS9VbnN0YWJsZV9HcmlkL2dyaWRHZW5lcmF0b3IuanMiLCJ3ZWJwYWNrOi8vbGFsYS1sYW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BtdWkrc3lzdGVtQDUuMTYuNF9AZW1vdGlvbityZWFjdEAxMS4xMy4wX0B0eXBlcytyZWFjdEAxOC4zLjNfcmVhY3RAMTguMy4xX19AZW1vdGlvbitzdHlsZWRAMV82cHhzc2hmNG9wNmNpZXhlc2pnajc3eG9vZS9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL1Vuc3RhYmxlX0dyaWQvY3JlYXRlR3JpZC5qcyIsIndlYnBhY2s6Ly9sYWxhLWxhbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vQG11aSttYXRlcmlhbEA1LjE2LjRfQGVtb3Rpb24rcmVhY3RAMTEuMTMuMF9AdHlwZXMrcmVhY3RAMTguMy4zX3JlYWN0QDE4LjMuMV9fQGVtb3Rpb24rc3R5bGVkX2JyeGlwbnY0eXZxaGVvc2d4Y2F3ZHhkeWF5L25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL1Vuc3RhYmxlX0dyaWQyL0dyaWQyLmpzIiwid2VicGFjazovL2xhbGEtbGFuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbXVpK21hdGVyaWFsQDUuMTYuNF9AZW1vdGlvbityZWFjdEAxMS4xMy4wX0B0eXBlcytyZWFjdEAxOC4zLjNfcmVhY3RAMTguMy4xX19AZW1vdGlvbitzdHlsZWRfYnJ4aXBudjR5dnFoZW9zZ3hjYXdkeGR5YXkvbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvVW5zdGFibGVfR3JpZDIvZ3JpZDJDbGFzc2VzLmpzIiwid2VicGFjazovL2xhbGEtbGFuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbXVpK3N5c3RlbUA1LjE2LjRfQGVtb3Rpb24rcmVhY3RAMTEuMTMuMF9AdHlwZXMrcmVhY3RAMTguMy4zX3JlYWN0QDE4LjMuMV9fQGVtb3Rpb24rc3R5bGVkQDFfNnB4c3NoZjRvcDZjaWV4ZXNqZ2o3N3hvb2Uvbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS91c2VNZWRpYVF1ZXJ5L3VzZU1lZGlhUXVlcnkuanMiLCJ3ZWJwYWNrOi8vbGFsYS1sYW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BtdWkrbWF0ZXJpYWxANS4xNi40X0BlbW90aW9uK3JlYWN0QDExLjEzLjBfQHR5cGVzK3JlYWN0QDE4LjMuM19yZWFjdEAxOC4zLjFfX0BlbW90aW9uK3N0eWxlZF9icnhpcG52NHl2cWhlb3NneGNhd2R4ZHlheS9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9IaWRkZW4vd2l0aFdpZHRoLmpzIiwid2VicGFjazovL2xhbGEtbGFuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbXVpK21hdGVyaWFsQDUuMTYuNF9AZW1vdGlvbityZWFjdEAxMS4xMy4wX0B0eXBlcytyZWFjdEAxOC4zLjNfcmVhY3RAMTguMy4xX19AZW1vdGlvbitzdHlsZWRfYnJ4aXBudjR5dnFoZW9zZ3hjYXdkeGR5YXkvbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvSGlkZGVuL0hpZGRlbkpzLmpzIiwid2VicGFjazovL2xhbGEtbGFuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbXVpK21hdGVyaWFsQDUuMTYuNF9AZW1vdGlvbityZWFjdEAxMS4xMy4wX0B0eXBlcytyZWFjdEAxOC4zLjNfcmVhY3RAMTguMy4xX19AZW1vdGlvbitzdHlsZWRfYnJ4aXBudjR5dnFoZW9zZ3hjYXdkeGR5YXkvbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvSGlkZGVuL2hpZGRlbkNzc0NsYXNzZXMuanMiLCJ3ZWJwYWNrOi8vbGFsYS1sYW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BtdWkrbWF0ZXJpYWxANS4xNi40X0BlbW90aW9uK3JlYWN0QDExLjEzLjBfQHR5cGVzK3JlYWN0QDE4LjMuM19yZWFjdEAxOC4zLjFfX0BlbW90aW9uK3N0eWxlZF9icnhpcG52NHl2cWhlb3NneGNhd2R4ZHlheS9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9IaWRkZW4vSGlkZGVuQ3NzLmpzIiwid2VicGFjazovL2xhbGEtbGFuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbXVpK21hdGVyaWFsQDUuMTYuNF9AZW1vdGlvbityZWFjdEAxMS4xMy4wX0B0eXBlcytyZWFjdEAxOC4zLjNfcmVhY3RAMTguMy4xX19AZW1vdGlvbitzdHlsZWRfYnJ4aXBudjR5dnFoZW9zZ3hjYXdkeGR5YXkvbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvSGlkZGVuL0hpZGRlbi5qcyIsIndlYnBhY2s6Ly9sYWxhLWxhbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vQG11aSttYXRlcmlhbEA1LjE2LjRfQGVtb3Rpb24rcmVhY3RAMTEuMTMuMF9AdHlwZXMrcmVhY3RAMTguMy4zX3JlYWN0QDE4LjMuMV9fQGVtb3Rpb24rc3R5bGVkX2JyeGlwbnY0eXZxaGVvc2d4Y2F3ZHhkeWF5L25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0ljb24vaWNvbkNsYXNzZXMuanMiLCJ3ZWJwYWNrOi8vbGFsYS1sYW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BtdWkrbWF0ZXJpYWxANS4xNi40X0BlbW90aW9uK3JlYWN0QDExLjEzLjBfQHR5cGVzK3JlYWN0QDE4LjMuM19yZWFjdEAxOC4zLjFfX0BlbW90aW9uK3N0eWxlZF9icnhpcG52NHl2cWhlb3NneGNhd2R4ZHlheS9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9JY29uL0ljb24uanMiLCJ3ZWJwYWNrOi8vbGFsYS1sYW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BtdWkrbWF0ZXJpYWxANS4xNi40X0BlbW90aW9uK3JlYWN0QDExLjEzLjBfQHR5cGVzK3JlYWN0QDE4LjMuM19yZWFjdEAxOC4zLjFfX0BlbW90aW9uK3N0eWxlZF9icnhpcG52NHl2cWhlb3NneGNhd2R4ZHlheS9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9JbWFnZUxpc3QvaW1hZ2VMaXN0Q2xhc3Nlcy5qcyIsIndlYnBhY2s6Ly9sYWxhLWxhbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vQG11aSttYXRlcmlhbEA1LjE2LjRfQGVtb3Rpb24rcmVhY3RAMTEuMTMuMF9AdHlwZXMrcmVhY3RAMTguMy4zX3JlYWN0QDE4LjMuMV9fQGVtb3Rpb24rc3R5bGVkX2JyeGlwbnY0eXZxaGVvc2d4Y2F3ZHhkeWF5L25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0ltYWdlTGlzdC9JbWFnZUxpc3RDb250ZXh0LmpzIiwid2VicGFjazovL2xhbGEtbGFuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbXVpK21hdGVyaWFsQDUuMTYuNF9AZW1vdGlvbityZWFjdEAxMS4xMy4wX0B0eXBlcytyZWFjdEAxOC4zLjNfcmVhY3RAMTguMy4xX19AZW1vdGlvbitzdHlsZWRfYnJ4aXBudjR5dnFoZW9zZ3hjYXdkeGR5YXkvbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvSW1hZ2VMaXN0L0ltYWdlTGlzdC5qcyIsIndlYnBhY2s6Ly9sYWxhLWxhbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vQG11aSttYXRlcmlhbEA1LjE2LjRfQGVtb3Rpb24rcmVhY3RAMTEuMTMuMF9AdHlwZXMrcmVhY3RAMTguMy4zX3JlYWN0QDE4LjMuMV9fQGVtb3Rpb24rc3R5bGVkX2JyeGlwbnY0eXZxaGVvc2d4Y2F3ZHhkeWF5L25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0ltYWdlTGlzdEl0ZW0vaW1hZ2VMaXN0SXRlbUNsYXNzZXMuanMiLCJ3ZWJwYWNrOi8vbGFsYS1sYW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BtdWkrbWF0ZXJpYWxANS4xNi40X0BlbW90aW9uK3JlYWN0QDExLjEzLjBfQHR5cGVzK3JlYWN0QDE4LjMuM19yZWFjdEAxOC4zLjFfX0BlbW90aW9uK3N0eWxlZF9icnhpcG52NHl2cWhlb3NneGNhd2R4ZHlheS9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9JbWFnZUxpc3RJdGVtL0ltYWdlTGlzdEl0ZW0uanMiLCJ3ZWJwYWNrOi8vbGFsYS1sYW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BtdWkrbWF0ZXJpYWxANS4xNi40X0BlbW90aW9uK3JlYWN0QDExLjEzLjBfQHR5cGVzK3JlYWN0QDE4LjMuM19yZWFjdEAxOC4zLjFfX0BlbW90aW9uK3N0eWxlZF9icnhpcG52NHl2cWhlb3NneGNhd2R4ZHlheS9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9JbWFnZUxpc3RJdGVtQmFyL2ltYWdlTGlzdEl0ZW1CYXJDbGFzc2VzLmpzIiwid2VicGFjazovL2xhbGEtbGFuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbXVpK21hdGVyaWFsQDUuMTYuNF9AZW1vdGlvbityZWFjdEAxMS4xMy4wX0B0eXBlcytyZWFjdEAxOC4zLjNfcmVhY3RAMTguMy4xX19AZW1vdGlvbitzdHlsZWRfYnJ4aXBudjR5dnFoZW9zZ3hjYXdkeGR5YXkvbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvSW1hZ2VMaXN0SXRlbUJhci9JbWFnZUxpc3RJdGVtQmFyLmpzIiwid2VicGFjazovL2xhbGEtbGFuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbXVpK21hdGVyaWFsQDUuMTYuNF9AZW1vdGlvbityZWFjdEAxMS4xMy4wX0B0eXBlcytyZWFjdEAxOC4zLjNfcmVhY3RAMTguMy4xX19AZW1vdGlvbitzdHlsZWRfYnJ4aXBudjR5dnFoZW9zZ3hjYXdkeGR5YXkvbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvSW5wdXQvSW5wdXQuanMiLCJ3ZWJwYWNrOi8vbGFsYS1sYW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BtdWkrbWF0ZXJpYWxANS4xNi40X0BlbW90aW9uK3JlYWN0QDExLjEzLjBfQHR5cGVzK3JlYWN0QDE4LjMuM19yZWFjdEAxOC4zLjFfX0BlbW90aW9uK3N0eWxlZF9icnhpcG52NHl2cWhlb3NneGNhd2R4ZHlheS9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9JbnB1dEFkb3JubWVudC9pbnB1dEFkb3JubWVudENsYXNzZXMuanMiLCJ3ZWJwYWNrOi8vbGFsYS1sYW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BtdWkrbWF0ZXJpYWxANS4xNi40X0BlbW90aW9uK3JlYWN0QDExLjEzLjBfQHR5cGVzK3JlYWN0QDE4LjMuM19yZWFjdEAxOC4zLjFfX0BlbW90aW9uK3N0eWxlZF9icnhpcG52NHl2cWhlb3NneGNhd2R4ZHlheS9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9JbnB1dEFkb3JubWVudC9JbnB1dEFkb3JubWVudC5qcyIsIndlYnBhY2s6Ly9sYWxhLWxhbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vQG11aSttYXRlcmlhbEA1LjE2LjRfQGVtb3Rpb24rcmVhY3RAMTEuMTMuMF9AdHlwZXMrcmVhY3RAMTguMy4zX3JlYWN0QDE4LjMuMV9fQGVtb3Rpb24rc3R5bGVkX2JyeGlwbnY0eXZxaGVvc2d4Y2F3ZHhkeWF5L25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0lucHV0TGFiZWwvaW5wdXRMYWJlbENsYXNzZXMuanMiLCJ3ZWJwYWNrOi8vbGFsYS1sYW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BtdWkrbWF0ZXJpYWxANS4xNi40X0BlbW90aW9uK3JlYWN0QDExLjEzLjBfQHR5cGVzK3JlYWN0QDE4LjMuM19yZWFjdEAxOC4zLjFfX0BlbW90aW9uK3N0eWxlZF9icnhpcG52NHl2cWhlb3NneGNhd2R4ZHlheS9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9JbnB1dExhYmVsL0lucHV0TGFiZWwuanMiLCJ3ZWJwYWNrOi8vbGFsYS1sYW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BtdWkrbWF0ZXJpYWxANS4xNi40X0BlbW90aW9uK3JlYWN0QDExLjEzLjBfQHR5cGVzK3JlYWN0QDE4LjMuM19yZWFjdEAxOC4zLjFfX0BlbW90aW9uK3N0eWxlZF9icnhpcG52NHl2cWhlb3NneGNhd2R4ZHlheS9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9MaW5lYXJQcm9ncmVzcy9saW5lYXJQcm9ncmVzc0NsYXNzZXMuanMiLCJ3ZWJwYWNrOi8vbGFsYS1sYW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BtdWkrbWF0ZXJpYWxANS4xNi40X0BlbW90aW9uK3JlYWN0QDExLjEzLjBfQHR5cGVzK3JlYWN0QDE4LjMuM19yZWFjdEAxOC4zLjFfX0BlbW90aW9uK3N0eWxlZF9icnhpcG52NHl2cWhlb3NneGNhd2R4ZHlheS9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9MaW5lYXJQcm9ncmVzcy9MaW5lYXJQcm9ncmVzcy5qcyIsIndlYnBhY2s6Ly9sYWxhLWxhbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vQG11aSttYXRlcmlhbEA1LjE2LjRfQGVtb3Rpb24rcmVhY3RAMTEuMTMuMF9AdHlwZXMrcmVhY3RAMTguMy4zX3JlYWN0QDE4LjMuMV9fQGVtb3Rpb24rc3R5bGVkX2JyeGlwbnY0eXZxaGVvc2d4Y2F3ZHhkeWF5L25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0xpbmsvbGlua0NsYXNzZXMuanMiLCJ3ZWJwYWNrOi8vbGFsYS1sYW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BtdWkrbWF0ZXJpYWxANS4xNi40X0BlbW90aW9uK3JlYWN0QDExLjEzLjBfQHR5cGVzK3JlYWN0QDE4LjMuM19yZWFjdEAxOC4zLjFfX0BlbW90aW9uK3N0eWxlZF9icnhpcG52NHl2cWhlb3NneGNhd2R4ZHlheS9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9MaW5rL2dldFRleHREZWNvcmF0aW9uLmpzIiwid2VicGFjazovL2xhbGEtbGFuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbXVpK21hdGVyaWFsQDUuMTYuNF9AZW1vdGlvbityZWFjdEAxMS4xMy4wX0B0eXBlcytyZWFjdEAxOC4zLjNfcmVhY3RAMTguMy4xX19AZW1vdGlvbitzdHlsZWRfYnJ4aXBudjR5dnFoZW9zZ3hjYXdkeGR5YXkvbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvTGluay9MaW5rLmpzIiwid2VicGFjazovL2xhbGEtbGFuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbXVpK21hdGVyaWFsQDUuMTYuNF9AZW1vdGlvbityZWFjdEAxMS4xMy4wX0B0eXBlcytyZWFjdEAxOC4zLjNfcmVhY3RAMTguMy4xX19AZW1vdGlvbitzdHlsZWRfYnJ4aXBudjR5dnFoZW9zZ3hjYXdkeGR5YXkvbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvTGlzdEl0ZW0vbGlzdEl0ZW1DbGFzc2VzLmpzIiwid2VicGFjazovL2xhbGEtbGFuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbXVpK21hdGVyaWFsQDUuMTYuNF9AZW1vdGlvbityZWFjdEAxMS4xMy4wX0B0eXBlcytyZWFjdEAxOC4zLjNfcmVhY3RAMTguMy4xX19AZW1vdGlvbitzdHlsZWRfYnJ4aXBudjR5dnFoZW9zZ3hjYXdkeGR5YXkvbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvTGlzdEl0ZW1CdXR0b24vbGlzdEl0ZW1CdXR0b25DbGFzc2VzLmpzIiwid2VicGFjazovL2xhbGEtbGFuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbXVpK21hdGVyaWFsQDUuMTYuNF9AZW1vdGlvbityZWFjdEAxMS4xMy4wX0B0eXBlcytyZWFjdEAxOC4zLjNfcmVhY3RAMTguMy4xX19AZW1vdGlvbitzdHlsZWRfYnJ4aXBudjR5dnFoZW9zZ3hjYXdkeGR5YXkvbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvTGlzdEl0ZW1TZWNvbmRhcnlBY3Rpb24vbGlzdEl0ZW1TZWNvbmRhcnlBY3Rpb25DbGFzc2VzLmpzIiwid2VicGFjazovL2xhbGEtbGFuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbXVpK21hdGVyaWFsQDUuMTYuNF9AZW1vdGlvbityZWFjdEAxMS4xMy4wX0B0eXBlcytyZWFjdEAxOC4zLjNfcmVhY3RAMTguMy4xX19AZW1vdGlvbitzdHlsZWRfYnJ4aXBudjR5dnFoZW9zZ3hjYXdkeGR5YXkvbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvTGlzdEl0ZW1TZWNvbmRhcnlBY3Rpb24vTGlzdEl0ZW1TZWNvbmRhcnlBY3Rpb24uanMiLCJ3ZWJwYWNrOi8vbGFsYS1sYW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BtdWkrbWF0ZXJpYWxANS4xNi40X0BlbW90aW9uK3JlYWN0QDExLjEzLjBfQHR5cGVzK3JlYWN0QDE4LjMuM19yZWFjdEAxOC4zLjFfX0BlbW90aW9uK3N0eWxlZF9icnhpcG52NHl2cWhlb3NneGNhd2R4ZHlheS9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9MaXN0SXRlbS9MaXN0SXRlbS5qcyIsIndlYnBhY2s6Ly9sYWxhLWxhbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vQG11aSttYXRlcmlhbEA1LjE2LjRfQGVtb3Rpb24rcmVhY3RAMTEuMTMuMF9AdHlwZXMrcmVhY3RAMTguMy4zX3JlYWN0QDE4LjMuMV9fQGVtb3Rpb24rc3R5bGVkX2JyeGlwbnY0eXZxaGVvc2d4Y2F3ZHhkeWF5L25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0xpc3RJdGVtQXZhdGFyL2xpc3RJdGVtQXZhdGFyQ2xhc3Nlcy5qcyIsIndlYnBhY2s6Ly9sYWxhLWxhbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vQG11aSttYXRlcmlhbEA1LjE2LjRfQGVtb3Rpb24rcmVhY3RAMTEuMTMuMF9AdHlwZXMrcmVhY3RAMTguMy4zX3JlYWN0QDE4LjMuMV9fQGVtb3Rpb24rc3R5bGVkX2JyeGlwbnY0eXZxaGVvc2d4Y2F3ZHhkeWF5L25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0xpc3RJdGVtQXZhdGFyL0xpc3RJdGVtQXZhdGFyLmpzIiwid2VicGFjazovL2xhbGEtbGFuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbXVpK21hdGVyaWFsQDUuMTYuNF9AZW1vdGlvbityZWFjdEAxMS4xMy4wX0B0eXBlcytyZWFjdEAxOC4zLjNfcmVhY3RAMTguMy4xX19AZW1vdGlvbitzdHlsZWRfYnJ4aXBudjR5dnFoZW9zZ3hjYXdkeGR5YXkvbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvTGlzdEl0ZW1CdXR0b24vTGlzdEl0ZW1CdXR0b24uanMiLCJ3ZWJwYWNrOi8vbGFsYS1sYW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BtdWkrbWF0ZXJpYWxANS4xNi40X0BlbW90aW9uK3JlYWN0QDExLjEzLjBfQHR5cGVzK3JlYWN0QDE4LjMuM19yZWFjdEAxOC4zLjFfX0BlbW90aW9uK3N0eWxlZF9icnhpcG52NHl2cWhlb3NneGNhd2R4ZHlheS9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9MaXN0SXRlbUljb24vTGlzdEl0ZW1JY29uLmpzIiwid2VicGFjazovL2xhbGEtbGFuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbXVpK21hdGVyaWFsQDUuMTYuNF9AZW1vdGlvbityZWFjdEAxMS4xMy4wX0B0eXBlcytyZWFjdEAxOC4zLjNfcmVhY3RAMTguMy4xX19AZW1vdGlvbitzdHlsZWRfYnJ4aXBudjR5dnFoZW9zZ3hjYXdkeGR5YXkvbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvTGlzdEl0ZW1UZXh0L0xpc3RJdGVtVGV4dC5qcyIsIndlYnBhY2s6Ly9sYWxhLWxhbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vQG11aSttYXRlcmlhbEA1LjE2LjRfQGVtb3Rpb24rcmVhY3RAMTEuMTMuMF9AdHlwZXMrcmVhY3RAMTguMy4zX3JlYWN0QDE4LjMuMV9fQGVtb3Rpb24rc3R5bGVkX2JyeGlwbnY0eXZxaGVvc2d4Y2F3ZHhkeWF5L25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL01vYmlsZVN0ZXBwZXIvbW9iaWxlU3RlcHBlckNsYXNzZXMuanMiLCJ3ZWJwYWNrOi8vbGFsYS1sYW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BtdWkrbWF0ZXJpYWxANS4xNi40X0BlbW90aW9uK3JlYWN0QDExLjEzLjBfQHR5cGVzK3JlYWN0QDE4LjMuM19yZWFjdEAxOC4zLjFfX0BlbW90aW9uK3N0eWxlZF9icnhpcG52NHl2cWhlb3NneGNhd2R4ZHlheS9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9Nb2JpbGVTdGVwcGVyL01vYmlsZVN0ZXBwZXIuanMiLCJ3ZWJwYWNrOi8vbGFsYS1sYW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BtdWkrbWF0ZXJpYWxANS4xNi40X0BlbW90aW9uK3JlYWN0QDExLjEzLjBfQHR5cGVzK3JlYWN0QDE4LjMuM19yZWFjdEAxOC4zLjFfX0BlbW90aW9uK3N0eWxlZF9icnhpcG52NHl2cWhlb3NneGNhd2R4ZHlheS9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9OYXRpdmVTZWxlY3QvbmF0aXZlU2VsZWN0Q2xhc3Nlcy5qcyIsIndlYnBhY2s6Ly9sYWxhLWxhbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vQG11aSttYXRlcmlhbEA1LjE2LjRfQGVtb3Rpb24rcmVhY3RAMTEuMTMuMF9AdHlwZXMrcmVhY3RAMTguMy4zX3JlYWN0QDE4LjMuMV9fQGVtb3Rpb24rc3R5bGVkX2JyeGlwbnY0eXZxaGVvc2d4Y2F3ZHhkeWF5L25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL05hdGl2ZVNlbGVjdC9OYXRpdmVTZWxlY3RJbnB1dC5qcyIsIndlYnBhY2s6Ly9sYWxhLWxhbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vQG11aSttYXRlcmlhbEA1LjE2LjRfQGVtb3Rpb24rcmVhY3RAMTEuMTMuMF9AdHlwZXMrcmVhY3RAMTguMy4zX3JlYWN0QDE4LjMuMV9fQGVtb3Rpb24rc3R5bGVkX2JyeGlwbnY0eXZxaGVvc2d4Y2F3ZHhkeWF5L25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL05hdGl2ZVNlbGVjdC9OYXRpdmVTZWxlY3QuanMiLCJ3ZWJwYWNrOi8vbGFsYS1sYW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BtdWkrbWF0ZXJpYWxANS4xNi40X0BlbW90aW9uK3JlYWN0QDExLjEzLjBfQHR5cGVzK3JlYWN0QDE4LjMuM19yZWFjdEAxOC4zLjFfX0BlbW90aW9uK3N0eWxlZF9icnhpcG52NHl2cWhlb3NneGNhd2R4ZHlheS9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9Ob1Nzci9Ob1Nzci5qcyIsIndlYnBhY2s6Ly9sYWxhLWxhbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vQG11aSttYXRlcmlhbEA1LjE2LjRfQGVtb3Rpb24rcmVhY3RAMTEuMTMuMF9AdHlwZXMrcmVhY3RAMTguMy4zX3JlYWN0QDE4LjMuMV9fQGVtb3Rpb24rc3R5bGVkX2JyeGlwbnY0eXZxaGVvc2d4Y2F3ZHhkeWF5L25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL091dGxpbmVkSW5wdXQvTm90Y2hlZE91dGxpbmUuanMiLCJ3ZWJwYWNrOi8vbGFsYS1sYW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BtdWkrbWF0ZXJpYWxANS4xNi40X0BlbW90aW9uK3JlYWN0QDExLjEzLjBfQHR5cGVzK3JlYWN0QDE4LjMuM19yZWFjdEAxOC4zLjFfX0BlbW90aW9uK3N0eWxlZF9icnhpcG52NHl2cWhlb3NneGNhd2R4ZHlheS9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9PdXRsaW5lZElucHV0L091dGxpbmVkSW5wdXQuanMiLCJ3ZWJwYWNrOi8vbGFsYS1sYW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BtdWkrbWF0ZXJpYWxANS4xNi40X0BlbW90aW9uK3JlYWN0QDExLjEzLjBfQHR5cGVzK3JlYWN0QDE4LjMuM19yZWFjdEAxOC4zLjFfX0BlbW90aW9uK3N0eWxlZF9icnhpcG52NHl2cWhlb3NneGNhd2R4ZHlheS9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9QYWdpbmF0aW9uL3BhZ2luYXRpb25DbGFzc2VzLmpzIiwid2VicGFjazovL2xhbGEtbGFuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbXVpK21hdGVyaWFsQDUuMTYuNF9AZW1vdGlvbityZWFjdEAxMS4xMy4wX0B0eXBlcytyZWFjdEAxOC4zLjNfcmVhY3RAMTguMy4xX19AZW1vdGlvbitzdHlsZWRfYnJ4aXBudjR5dnFoZW9zZ3hjYXdkeGR5YXkvbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvdXNlUGFnaW5hdGlvbi91c2VQYWdpbmF0aW9uLmpzIiwid2VicGFjazovL2xhbGEtbGFuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbXVpK21hdGVyaWFsQDUuMTYuNF9AZW1vdGlvbityZWFjdEAxMS4xMy4wX0B0eXBlcytyZWFjdEAxOC4zLjNfcmVhY3RAMTguMy4xX19AZW1vdGlvbitzdHlsZWRfYnJ4aXBudjR5dnFoZW9zZ3hjYXdkeGR5YXkvbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvUGFnaW5hdGlvbkl0ZW0vcGFnaW5hdGlvbkl0ZW1DbGFzc2VzLmpzIiwid2VicGFjazovL2xhbGEtbGFuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbXVpK21hdGVyaWFsQDUuMTYuNF9AZW1vdGlvbityZWFjdEAxMS4xMy4wX0B0eXBlcytyZWFjdEAxOC4zLjNfcmVhY3RAMTguMy4xX19AZW1vdGlvbitzdHlsZWRfYnJ4aXBudjR5dnFoZW9zZ3hjYXdkeGR5YXkvbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvaW50ZXJuYWwvc3ZnLWljb25zL0ZpcnN0UGFnZS5qcyIsIndlYnBhY2s6Ly9sYWxhLWxhbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vQG11aSttYXRlcmlhbEA1LjE2LjRfQGVtb3Rpb24rcmVhY3RAMTEuMTMuMF9AdHlwZXMrcmVhY3RAMTguMy4zX3JlYWN0QDE4LjMuMV9fQGVtb3Rpb24rc3R5bGVkX2JyeGlwbnY0eXZxaGVvc2d4Y2F3ZHhkeWF5L25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL2ludGVybmFsL3N2Zy1pY29ucy9MYXN0UGFnZS5qcyIsIndlYnBhY2s6Ly9sYWxhLWxhbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vQG11aSttYXRlcmlhbEA1LjE2LjRfQGVtb3Rpb24rcmVhY3RAMTEuMTMuMF9AdHlwZXMrcmVhY3RAMTguMy4zX3JlYWN0QDE4LjMuMV9fQGVtb3Rpb24rc3R5bGVkX2JyeGlwbnY0eXZxaGVvc2d4Y2F3ZHhkeWF5L25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL2ludGVybmFsL3N2Zy1pY29ucy9OYXZpZ2F0ZUJlZm9yZS5qcyIsIndlYnBhY2s6Ly9sYWxhLWxhbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vQG11aSttYXRlcmlhbEA1LjE2LjRfQGVtb3Rpb24rcmVhY3RAMTEuMTMuMF9AdHlwZXMrcmVhY3RAMTguMy4zX3JlYWN0QDE4LjMuMV9fQGVtb3Rpb24rc3R5bGVkX2JyeGlwbnY0eXZxaGVvc2d4Y2F3ZHhkeWF5L25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL2ludGVybmFsL3N2Zy1pY29ucy9OYXZpZ2F0ZU5leHQuanMiLCJ3ZWJwYWNrOi8vbGFsYS1sYW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BtdWkrbWF0ZXJpYWxANS4xNi40X0BlbW90aW9uK3JlYWN0QDExLjEzLjBfQHR5cGVzK3JlYWN0QDE4LjMuM19yZWFjdEAxOC4zLjFfX0BlbW90aW9uK3N0eWxlZF9icnhpcG52NHl2cWhlb3NneGNhd2R4ZHlheS9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9QYWdpbmF0aW9uSXRlbS9QYWdpbmF0aW9uSXRlbS5qcyIsIndlYnBhY2s6Ly9sYWxhLWxhbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vQG11aSttYXRlcmlhbEA1LjE2LjRfQGVtb3Rpb24rcmVhY3RAMTEuMTMuMF9AdHlwZXMrcmVhY3RAMTguMy4zX3JlYWN0QDE4LjMuMV9fQGVtb3Rpb24rc3R5bGVkX2JyeGlwbnY0eXZxaGVvc2d4Y2F3ZHhkeWF5L25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL1BhZ2luYXRpb24vUGFnaW5hdGlvbi5qcyIsIndlYnBhY2s6Ly9sYWxhLWxhbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vQG11aSttYXRlcmlhbEA1LjE2LjRfQGVtb3Rpb24rcmVhY3RAMTEuMTMuMF9AdHlwZXMrcmVhY3RAMTguMy4zX3JlYWN0QDE4LjMuMV9fQGVtb3Rpb24rc3R5bGVkX2JyeGlwbnY0eXZxaGVvc2d4Y2F3ZHhkeWF5L25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL2ludGVybmFsL3N2Zy1pY29ucy9SYWRpb0J1dHRvblVuY2hlY2tlZC5qcyIsIndlYnBhY2s6Ly9sYWxhLWxhbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vQG11aSttYXRlcmlhbEA1LjE2LjRfQGVtb3Rpb24rcmVhY3RAMTEuMTMuMF9AdHlwZXMrcmVhY3RAMTguMy4zX3JlYWN0QDE4LjMuMV9fQGVtb3Rpb24rc3R5bGVkX2JyeGlwbnY0eXZxaGVvc2d4Y2F3ZHhkeWF5L25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL2ludGVybmFsL3N2Zy1pY29ucy9SYWRpb0J1dHRvbkNoZWNrZWQuanMiLCJ3ZWJwYWNrOi8vbGFsYS1sYW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BtdWkrbWF0ZXJpYWxANS4xNi40X0BlbW90aW9uK3JlYWN0QDExLjEzLjBfQHR5cGVzK3JlYWN0QDE4LjMuM19yZWFjdEAxOC4zLjFfX0BlbW90aW9uK3N0eWxlZF9icnhpcG52NHl2cWhlb3NneGNhd2R4ZHlheS9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9SYWRpby9SYWRpb0J1dHRvbkljb24uanMiLCJ3ZWJwYWNrOi8vbGFsYS1sYW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BtdWkrbWF0ZXJpYWxANS4xNi40X0BlbW90aW9uK3JlYWN0QDExLjEzLjBfQHR5cGVzK3JlYWN0QDE4LjMuM19yZWFjdEAxOC4zLjFfX0BlbW90aW9uK3N0eWxlZF9icnhpcG52NHl2cWhlb3NneGNhd2R4ZHlheS9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9SYWRpb0dyb3VwL1JhZGlvR3JvdXBDb250ZXh0LmpzIiwid2VicGFjazovL2xhbGEtbGFuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbXVpK21hdGVyaWFsQDUuMTYuNF9AZW1vdGlvbityZWFjdEAxMS4xMy4wX0B0eXBlcytyZWFjdEAxOC4zLjNfcmVhY3RAMTguMy4xX19AZW1vdGlvbitzdHlsZWRfYnJ4aXBudjR5dnFoZW9zZ3hjYXdkeGR5YXkvbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvUmFkaW9Hcm91cC91c2VSYWRpb0dyb3VwLmpzIiwid2VicGFjazovL2xhbGEtbGFuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbXVpK21hdGVyaWFsQDUuMTYuNF9AZW1vdGlvbityZWFjdEAxMS4xMy4wX0B0eXBlcytyZWFjdEAxOC4zLjNfcmVhY3RAMTguMy4xX19AZW1vdGlvbitzdHlsZWRfYnJ4aXBudjR5dnFoZW9zZ3hjYXdkeGR5YXkvbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvUmFkaW8vcmFkaW9DbGFzc2VzLmpzIiwid2VicGFjazovL2xhbGEtbGFuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbXVpK21hdGVyaWFsQDUuMTYuNF9AZW1vdGlvbityZWFjdEAxMS4xMy4wX0B0eXBlcytyZWFjdEAxOC4zLjNfcmVhY3RAMTguMy4xX19AZW1vdGlvbitzdHlsZWRfYnJ4aXBudjR5dnFoZW9zZ3hjYXdkeGR5YXkvbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvUmFkaW8vUmFkaW8uanMiLCJ3ZWJwYWNrOi8vbGFsYS1sYW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BtdWkrbWF0ZXJpYWxANS4xNi40X0BlbW90aW9uK3JlYWN0QDExLjEzLjBfQHR5cGVzK3JlYWN0QDE4LjMuM19yZWFjdEAxOC4zLjFfX0BlbW90aW9uK3N0eWxlZF9icnhpcG52NHl2cWhlb3NneGNhd2R4ZHlheS9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9SYWRpb0dyb3VwL3JhZGlvR3JvdXBDbGFzc2VzLmpzIiwid2VicGFjazovL2xhbGEtbGFuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbXVpK21hdGVyaWFsQDUuMTYuNF9AZW1vdGlvbityZWFjdEAxMS4xMy4wX0B0eXBlcytyZWFjdEAxOC4zLjNfcmVhY3RAMTguMy4xX19AZW1vdGlvbitzdHlsZWRfYnJ4aXBudjR5dnFoZW9zZ3hjYXdkeGR5YXkvbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvUmFkaW9Hcm91cC9SYWRpb0dyb3VwLmpzIiwid2VicGFjazovL2xhbGEtbGFuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbXVpK3V0aWxzQDUuMTYuNF9AdHlwZXMrcmVhY3RAMTguMy4zX3JlYWN0QDE4LjMuMS9ub2RlX21vZHVsZXMvQG11aS91dGlscy9lc20vdmlzdWFsbHlIaWRkZW4vdmlzdWFsbHlIaWRkZW4uanMiLCJ3ZWJwYWNrOi8vbGFsYS1sYW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BtdWkrbWF0ZXJpYWxANS4xNi40X0BlbW90aW9uK3JlYWN0QDExLjEzLjBfQHR5cGVzK3JlYWN0QDE4LjMuM19yZWFjdEAxOC4zLjFfX0BlbW90aW9uK3N0eWxlZF9icnhpcG52NHl2cWhlb3NneGNhd2R4ZHlheS9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9pbnRlcm5hbC9zdmctaWNvbnMvU3Rhci5qcyIsIndlYnBhY2s6Ly9sYWxhLWxhbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vQG11aSttYXRlcmlhbEA1LjE2LjRfQGVtb3Rpb24rcmVhY3RAMTEuMTMuMF9AdHlwZXMrcmVhY3RAMTguMy4zX3JlYWN0QDE4LjMuMV9fQGVtb3Rpb24rc3R5bGVkX2JyeGlwbnY0eXZxaGVvc2d4Y2F3ZHhkeWF5L25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL2ludGVybmFsL3N2Zy1pY29ucy9TdGFyQm9yZGVyLmpzIiwid2VicGFjazovL2xhbGEtbGFuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbXVpK21hdGVyaWFsQDUuMTYuNF9AZW1vdGlvbityZWFjdEAxMS4xMy4wX0B0eXBlcytyZWFjdEAxOC4zLjNfcmVhY3RAMTguMy4xX19AZW1vdGlvbitzdHlsZWRfYnJ4aXBudjR5dnFoZW9zZ3hjYXdkeGR5YXkvbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvUmF0aW5nL3JhdGluZ0NsYXNzZXMuanMiLCJ3ZWJwYWNrOi8vbGFsYS1sYW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BtdWkrbWF0ZXJpYWxANS4xNi40X0BlbW90aW9uK3JlYWN0QDExLjEzLjBfQHR5cGVzK3JlYWN0QDE4LjMuM19yZWFjdEAxOC4zLjFfX0BlbW90aW9uK3N0eWxlZF9icnhpcG52NHl2cWhlb3NneGNhd2R4ZHlheS9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9SYXRpbmcvUmF0aW5nLmpzIiwid2VicGFjazovL2xhbGEtbGFuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbXVpK21hdGVyaWFsQDUuMTYuNF9AZW1vdGlvbityZWFjdEAxMS4xMy4wX0B0eXBlcytyZWFjdEAxOC4zLjNfcmVhY3RAMTguMy4xX19AZW1vdGlvbitzdHlsZWRfYnJ4aXBudjR5dnFoZW9zZ3hjYXdkeGR5YXkvbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvU2NvcGVkQ3NzQmFzZWxpbmUvc2NvcGVkQ3NzQmFzZWxpbmVDbGFzc2VzLmpzIiwid2VicGFjazovL2xhbGEtbGFuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbXVpK21hdGVyaWFsQDUuMTYuNF9AZW1vdGlvbityZWFjdEAxMS4xMy4wX0B0eXBlcytyZWFjdEAxOC4zLjNfcmVhY3RAMTguMy4xX19AZW1vdGlvbitzdHlsZWRfYnJ4aXBudjR5dnFoZW9zZ3hjYXdkeGR5YXkvbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvU2NvcGVkQ3NzQmFzZWxpbmUvU2NvcGVkQ3NzQmFzZWxpbmUuanMiLCJ3ZWJwYWNrOi8vbGFsYS1sYW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BtdWkrbWF0ZXJpYWxANS4xNi40X0BlbW90aW9uK3JlYWN0QDExLjEzLjBfQHR5cGVzK3JlYWN0QDE4LjMuM19yZWFjdEAxOC4zLjFfX0BlbW90aW9uK3N0eWxlZF9icnhpcG52NHl2cWhlb3NneGNhd2R4ZHlheS9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9TZWxlY3Qvc2VsZWN0Q2xhc3Nlcy5qcyIsIndlYnBhY2s6Ly9sYWxhLWxhbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vQG11aSttYXRlcmlhbEA1LjE2LjRfQGVtb3Rpb24rcmVhY3RAMTEuMTMuMF9AdHlwZXMrcmVhY3RAMTguMy4zX3JlYWN0QDE4LjMuMV9fQGVtb3Rpb24rc3R5bGVkX2JyeGlwbnY0eXZxaGVvc2d4Y2F3ZHhkeWF5L25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL1NlbGVjdC9TZWxlY3RJbnB1dC5qcyIsIndlYnBhY2s6Ly9sYWxhLWxhbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vQG11aSttYXRlcmlhbEA1LjE2LjRfQGVtb3Rpb24rcmVhY3RAMTEuMTMuMF9AdHlwZXMrcmVhY3RAMTguMy4zX3JlYWN0QDE4LjMuMV9fQGVtb3Rpb24rc3R5bGVkX2JyeGlwbnY0eXZxaGVvc2d4Y2F3ZHhkeWF5L25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL1NlbGVjdC9TZWxlY3QuanMiLCJ3ZWJwYWNrOi8vbGFsYS1sYW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BtdWkrbWF0ZXJpYWxANS4xNi40X0BlbW90aW9uK3JlYWN0QDExLjEzLjBfQHR5cGVzK3JlYWN0QDE4LjMuM19yZWFjdEAxOC4zLjFfX0BlbW90aW9uK3N0eWxlZF9icnhpcG52NHl2cWhlb3NneGNhd2R4ZHlheS9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9Ta2VsZXRvbi9za2VsZXRvbkNsYXNzZXMuanMiLCJ3ZWJwYWNrOi8vbGFsYS1sYW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BtdWkrbWF0ZXJpYWxANS4xNi40X0BlbW90aW9uK3JlYWN0QDExLjEzLjBfQHR5cGVzK3JlYWN0QDE4LjMuM19yZWFjdEAxOC4zLjFfX0BlbW90aW9uK3N0eWxlZF9icnhpcG52NHl2cWhlb3NneGNhd2R4ZHlheS9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9Ta2VsZXRvbi9Ta2VsZXRvbi5qcyIsIndlYnBhY2s6Ly9sYWxhLWxhbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vQG11aSttYXRlcmlhbEA1LjE2LjRfQGVtb3Rpb24rcmVhY3RAMTEuMTMuMF9AdHlwZXMrcmVhY3RAMTguMy4zX3JlYWN0QDE4LjMuMV9fQGVtb3Rpb24rc3R5bGVkX2JyeGlwbnY0eXZxaGVvc2d4Y2F3ZHhkeWF5L25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL3V0aWxzL2FyZUFycmF5c0VxdWFsLmpzIiwid2VicGFjazovL2xhbGEtbGFuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbXVpK21hdGVyaWFsQDUuMTYuNF9AZW1vdGlvbityZWFjdEAxMS4xMy4wX0B0eXBlcytyZWFjdEAxOC4zLjNfcmVhY3RAMTguMy4xX19AZW1vdGlvbitzdHlsZWRfYnJ4aXBudjR5dnFoZW9zZ3hjYXdkeGR5YXkvbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvU2xpZGVyL3VzZVNsaWRlci5qcyIsIndlYnBhY2s6Ly9sYWxhLWxhbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vQG11aSttYXRlcmlhbEA1LjE2LjRfQGVtb3Rpb24rcmVhY3RAMTEuMTMuMF9AdHlwZXMrcmVhY3RAMTguMy4zX3JlYWN0QDE4LjMuMV9fQGVtb3Rpb24rc3R5bGVkX2JyeGlwbnY0eXZxaGVvc2d4Y2F3ZHhkeWF5L25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL1NsaWRlci9zbGlkZXJDbGFzc2VzLmpzIiwid2VicGFjazovL2xhbGEtbGFuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbXVpK21hdGVyaWFsQDUuMTYuNF9AZW1vdGlvbityZWFjdEAxMS4xMy4wX0B0eXBlcytyZWFjdEAxOC4zLjNfcmVhY3RAMTguMy4xX19AZW1vdGlvbitzdHlsZWRfYnJ4aXBudjR5dnFoZW9zZ3hjYXdkeGR5YXkvbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvU2xpZGVyL1NsaWRlci5qcyIsIndlYnBhY2s6Ly9sYWxhLWxhbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vQG11aSttYXRlcmlhbEA1LjE2LjRfQGVtb3Rpb24rcmVhY3RAMTEuMTMuMF9AdHlwZXMrcmVhY3RAMTguMy4zX3JlYWN0QDE4LjMuMV9fQGVtb3Rpb24rc3R5bGVkX2JyeGlwbnY0eXZxaGVvc2d4Y2F3ZHhkeWF5L25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL1NsaWRlci9TbGlkZXJWYWx1ZUxhYmVsLmpzIiwid2VicGFjazovL2xhbGEtbGFuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbXVpK21hdGVyaWFsQDUuMTYuNF9AZW1vdGlvbityZWFjdEAxMS4xMy4wX0B0eXBlcytyZWFjdEAxOC4zLjNfcmVhY3RAMTguMy4xX19AZW1vdGlvbitzdHlsZWRfYnJ4aXBudjR5dnFoZW9zZ3hjYXdkeGR5YXkvbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvdXRpbHMvc2hvdWxkU3ByZWFkQWRkaXRpb25hbFByb3BzLmpzIiwid2VicGFjazovL2xhbGEtbGFuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbXVpK21hdGVyaWFsQDUuMTYuNF9AZW1vdGlvbityZWFjdEAxMS4xMy4wX0B0eXBlcytyZWFjdEAxOC4zLjNfcmVhY3RAMTguMy4xX19AZW1vdGlvbitzdHlsZWRfYnJ4aXBudjR5dnFoZW9zZ3hjYXdkeGR5YXkvbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvU25hY2tiYXJDb250ZW50L3NuYWNrYmFyQ29udGVudENsYXNzZXMuanMiLCJ3ZWJwYWNrOi8vbGFsYS1sYW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BtdWkrbWF0ZXJpYWxANS4xNi40X0BlbW90aW9uK3JlYWN0QDExLjEzLjBfQHR5cGVzK3JlYWN0QDE4LjMuM19yZWFjdEAxOC4zLjFfX0BlbW90aW9uK3N0eWxlZF9icnhpcG52NHl2cWhlb3NneGNhd2R4ZHlheS9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9TbmFja2JhckNvbnRlbnQvU25hY2tiYXJDb250ZW50LmpzIiwid2VicGFjazovL2xhbGEtbGFuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbXVpK21hdGVyaWFsQDUuMTYuNF9AZW1vdGlvbityZWFjdEAxMS4xMy4wX0B0eXBlcytyZWFjdEAxOC4zLjNfcmVhY3RAMTguMy4xX19AZW1vdGlvbitzdHlsZWRfYnJ4aXBudjR5dnFoZW9zZ3hjYXdkeGR5YXkvbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvU25hY2tiYXIvc25hY2tiYXJDbGFzc2VzLmpzIiwid2VicGFjazovL2xhbGEtbGFuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbXVpK21hdGVyaWFsQDUuMTYuNF9AZW1vdGlvbityZWFjdEAxMS4xMy4wX0B0eXBlcytyZWFjdEAxOC4zLjNfcmVhY3RAMTguMy4xX19AZW1vdGlvbitzdHlsZWRfYnJ4aXBudjR5dnFoZW9zZ3hjYXdkeGR5YXkvbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvU25hY2tiYXIvU25hY2tiYXIuanMiLCJ3ZWJwYWNrOi8vbGFsYS1sYW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BtdWkrbWF0ZXJpYWxANS4xNi40X0BlbW90aW9uK3JlYWN0QDExLjEzLjBfQHR5cGVzK3JlYWN0QDE4LjMuM19yZWFjdEAxOC4zLjFfX0BlbW90aW9uK3N0eWxlZF9icnhpcG52NHl2cWhlb3NneGNhd2R4ZHlheS9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9TbmFja2Jhci91c2VTbmFja2Jhci5qcyIsIndlYnBhY2s6Ly9sYWxhLWxhbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vQG11aSttYXRlcmlhbEA1LjE2LjRfQGVtb3Rpb24rcmVhY3RAMTEuMTMuMF9AdHlwZXMrcmVhY3RAMTguMy4zX3JlYWN0QDE4LjMuMV9fQGVtb3Rpb24rc3R5bGVkX2JyeGlwbnY0eXZxaGVvc2d4Y2F3ZHhkeWF5L25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL1pvb20vWm9vbS5qcyIsIndlYnBhY2s6Ly9sYWxhLWxhbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vQG11aSttYXRlcmlhbEA1LjE2LjRfQGVtb3Rpb24rcmVhY3RAMTEuMTMuMF9AdHlwZXMrcmVhY3RAMTguMy4zX3JlYWN0QDE4LjMuMV9fQGVtb3Rpb24rc3R5bGVkX2JyeGlwbnY0eXZxaGVvc2d4Y2F3ZHhkeWF5L25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL1NwZWVkRGlhbC9zcGVlZERpYWxDbGFzc2VzLmpzIiwid2VicGFjazovL2xhbGEtbGFuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbXVpK21hdGVyaWFsQDUuMTYuNF9AZW1vdGlvbityZWFjdEAxMS4xMy4wX0B0eXBlcytyZWFjdEAxOC4zLjNfcmVhY3RAMTguMy4xX19AZW1vdGlvbitzdHlsZWRfYnJ4aXBudjR5dnFoZW9zZ3hjYXdkeGR5YXkvbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvU3BlZWREaWFsL1NwZWVkRGlhbC5qcyIsIndlYnBhY2s6Ly9sYWxhLWxhbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vQG11aSttYXRlcmlhbEA1LjE2LjRfQGVtb3Rpb24rcmVhY3RAMTEuMTMuMF9AdHlwZXMrcmVhY3RAMTguMy4zX3JlYWN0QDE4LjMuMV9fQGVtb3Rpb24rc3R5bGVkX2JyeGlwbnY0eXZxaGVvc2d4Y2F3ZHhkeWF5L25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL1Rvb2x0aXAvdG9vbHRpcENsYXNzZXMuanMiLCJ3ZWJwYWNrOi8vbGFsYS1sYW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BtdWkrbWF0ZXJpYWxANS4xNi40X0BlbW90aW9uK3JlYWN0QDExLjEzLjBfQHR5cGVzK3JlYWN0QDE4LjMuM19yZWFjdEAxOC4zLjFfX0BlbW90aW9uK3N0eWxlZF9icnhpcG52NHl2cWhlb3NneGNhd2R4ZHlheS9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9Ub29sdGlwL1Rvb2x0aXAuanMiLCJ3ZWJwYWNrOi8vbGFsYS1sYW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BtdWkrbWF0ZXJpYWxANS4xNi40X0BlbW90aW9uK3JlYWN0QDExLjEzLjBfQHR5cGVzK3JlYWN0QDE4LjMuM19yZWFjdEAxOC4zLjFfX0BlbW90aW9uK3N0eWxlZF9icnhpcG52NHl2cWhlb3NneGNhd2R4ZHlheS9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9TcGVlZERpYWxBY3Rpb24vc3BlZWREaWFsQWN0aW9uQ2xhc3Nlcy5qcyIsIndlYnBhY2s6Ly9sYWxhLWxhbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vQG11aSttYXRlcmlhbEA1LjE2LjRfQGVtb3Rpb24rcmVhY3RAMTEuMTMuMF9AdHlwZXMrcmVhY3RAMTguMy4zX3JlYWN0QDE4LjMuMV9fQGVtb3Rpb24rc3R5bGVkX2JyeGlwbnY0eXZxaGVvc2d4Y2F3ZHhkeWF5L25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL1NwZWVkRGlhbEFjdGlvbi9TcGVlZERpYWxBY3Rpb24uanMiLCJ3ZWJwYWNrOi8vbGFsYS1sYW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BtdWkrbWF0ZXJpYWxANS4xNi40X0BlbW90aW9uK3JlYWN0QDExLjEzLjBfQHR5cGVzK3JlYWN0QDE4LjMuM19yZWFjdEAxOC4zLjFfX0BlbW90aW9uK3N0eWxlZF9icnhpcG52NHl2cWhlb3NneGNhd2R4ZHlheS9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9pbnRlcm5hbC9zdmctaWNvbnMvQWRkLmpzIiwid2VicGFjazovL2xhbGEtbGFuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbXVpK21hdGVyaWFsQDUuMTYuNF9AZW1vdGlvbityZWFjdEAxMS4xMy4wX0B0eXBlcytyZWFjdEAxOC4zLjNfcmVhY3RAMTguMy4xX19AZW1vdGlvbitzdHlsZWRfYnJ4aXBudjR5dnFoZW9zZ3hjYXdkeGR5YXkvbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvU3BlZWREaWFsSWNvbi9zcGVlZERpYWxJY29uQ2xhc3Nlcy5qcyIsIndlYnBhY2s6Ly9sYWxhLWxhbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vQG11aSttYXRlcmlhbEA1LjE2LjRfQGVtb3Rpb24rcmVhY3RAMTEuMTMuMF9AdHlwZXMrcmVhY3RAMTguMy4zX3JlYWN0QDE4LjMuMV9fQGVtb3Rpb24rc3R5bGVkX2JyeGlwbnY0eXZxaGVvc2d4Y2F3ZHhkeWF5L25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL1NwZWVkRGlhbEljb24vU3BlZWREaWFsSWNvbi5qcyIsIndlYnBhY2s6Ly9sYWxhLWxhbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vQG11aSttYXRlcmlhbEA1LjE2LjRfQGVtb3Rpb24rcmVhY3RAMTEuMTMuMF9AdHlwZXMrcmVhY3RAMTguMy4zX3JlYWN0QDE4LjMuMV9fQGVtb3Rpb24rc3R5bGVkX2JyeGlwbnY0eXZxaGVvc2d4Y2F3ZHhkeWF5L25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL1N0YWNrL3N0YWNrQ2xhc3Nlcy5qcyIsIndlYnBhY2s6Ly9sYWxhLWxhbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vQG11aSttYXRlcmlhbEA1LjE2LjRfQGVtb3Rpb24rcmVhY3RAMTEuMTMuMF9AdHlwZXMrcmVhY3RAMTguMy4zX3JlYWN0QDE4LjMuMV9fQGVtb3Rpb24rc3R5bGVkX2JyeGlwbnY0eXZxaGVvc2d4Y2F3ZHhkeWF5L25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL1N0ZXBwZXIvU3RlcHBlckNvbnRleHQuanMiLCJ3ZWJwYWNrOi8vbGFsYS1sYW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BtdWkrbWF0ZXJpYWxANS4xNi40X0BlbW90aW9uK3JlYWN0QDExLjEzLjBfQHR5cGVzK3JlYWN0QDE4LjMuM19yZWFjdEAxOC4zLjFfX0BlbW90aW9uK3N0eWxlZF9icnhpcG52NHl2cWhlb3NneGNhd2R4ZHlheS9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9TdGVwL1N0ZXBDb250ZXh0LmpzIiwid2VicGFjazovL2xhbGEtbGFuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbXVpK21hdGVyaWFsQDUuMTYuNF9AZW1vdGlvbityZWFjdEAxMS4xMy4wX0B0eXBlcytyZWFjdEAxOC4zLjNfcmVhY3RAMTguMy4xX19AZW1vdGlvbitzdHlsZWRfYnJ4aXBudjR5dnFoZW9zZ3hjYXdkeGR5YXkvbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvU3RlcC9zdGVwQ2xhc3Nlcy5qcyIsIndlYnBhY2s6Ly9sYWxhLWxhbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vQG11aSttYXRlcmlhbEA1LjE2LjRfQGVtb3Rpb24rcmVhY3RAMTEuMTMuMF9AdHlwZXMrcmVhY3RAMTguMy4zX3JlYWN0QDE4LjMuMV9fQGVtb3Rpb24rc3R5bGVkX2JyeGlwbnY0eXZxaGVvc2d4Y2F3ZHhkeWF5L25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL1N0ZXAvU3RlcC5qcyIsIndlYnBhY2s6Ly9sYWxhLWxhbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vQG11aSttYXRlcmlhbEA1LjE2LjRfQGVtb3Rpb24rcmVhY3RAMTEuMTMuMF9AdHlwZXMrcmVhY3RAMTguMy4zX3JlYWN0QDE4LjMuMV9fQGVtb3Rpb24rc3R5bGVkX2JyeGlwbnY0eXZxaGVvc2d4Y2F3ZHhkeWF5L25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL2ludGVybmFsL3N2Zy1pY29ucy9DaGVja0NpcmNsZS5qcyIsIndlYnBhY2s6Ly9sYWxhLWxhbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vQG11aSttYXRlcmlhbEA1LjE2LjRfQGVtb3Rpb24rcmVhY3RAMTEuMTMuMF9AdHlwZXMrcmVhY3RAMTguMy4zX3JlYWN0QDE4LjMuMV9fQGVtb3Rpb24rc3R5bGVkX2JyeGlwbnY0eXZxaGVvc2d4Y2F3ZHhkeWF5L25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL2ludGVybmFsL3N2Zy1pY29ucy9XYXJuaW5nLmpzIiwid2VicGFjazovL2xhbGEtbGFuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbXVpK21hdGVyaWFsQDUuMTYuNF9AZW1vdGlvbityZWFjdEAxMS4xMy4wX0B0eXBlcytyZWFjdEAxOC4zLjNfcmVhY3RAMTguMy4xX19AZW1vdGlvbitzdHlsZWRfYnJ4aXBudjR5dnFoZW9zZ3hjYXdkeGR5YXkvbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvU3RlcEljb24vc3RlcEljb25DbGFzc2VzLmpzIiwid2VicGFjazovL2xhbGEtbGFuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbXVpK21hdGVyaWFsQDUuMTYuNF9AZW1vdGlvbityZWFjdEAxMS4xMy4wX0B0eXBlcytyZWFjdEAxOC4zLjNfcmVhY3RAMTguMy4xX19AZW1vdGlvbitzdHlsZWRfYnJ4aXBudjR5dnFoZW9zZ3hjYXdkeGR5YXkvbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvU3RlcEljb24vU3RlcEljb24uanMiLCJ3ZWJwYWNrOi8vbGFsYS1sYW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BtdWkrbWF0ZXJpYWxANS4xNi40X0BlbW90aW9uK3JlYWN0QDExLjEzLjBfQHR5cGVzK3JlYWN0QDE4LjMuM19yZWFjdEAxOC4zLjFfX0BlbW90aW9uK3N0eWxlZF9icnhpcG52NHl2cWhlb3NneGNhd2R4ZHlheS9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9TdGVwTGFiZWwvc3RlcExhYmVsQ2xhc3Nlcy5qcyIsIndlYnBhY2s6Ly9sYWxhLWxhbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vQG11aSttYXRlcmlhbEA1LjE2LjRfQGVtb3Rpb24rcmVhY3RAMTEuMTMuMF9AdHlwZXMrcmVhY3RAMTguMy4zX3JlYWN0QDE4LjMuMV9fQGVtb3Rpb24rc3R5bGVkX2JyeGlwbnY0eXZxaGVvc2d4Y2F3ZHhkeWF5L25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL1N0ZXBMYWJlbC9TdGVwTGFiZWwuanMiLCJ3ZWJwYWNrOi8vbGFsYS1sYW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BtdWkrbWF0ZXJpYWxANS4xNi40X0BlbW90aW9uK3JlYWN0QDExLjEzLjBfQHR5cGVzK3JlYWN0QDE4LjMuM19yZWFjdEAxOC4zLjFfX0BlbW90aW9uK3N0eWxlZF9icnhpcG52NHl2cWhlb3NneGNhd2R4ZHlheS9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9TdGVwQnV0dG9uL3N0ZXBCdXR0b25DbGFzc2VzLmpzIiwid2VicGFjazovL2xhbGEtbGFuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbXVpK21hdGVyaWFsQDUuMTYuNF9AZW1vdGlvbityZWFjdEAxMS4xMy4wX0B0eXBlcytyZWFjdEAxOC4zLjNfcmVhY3RAMTguMy4xX19AZW1vdGlvbitzdHlsZWRfYnJ4aXBudjR5dnFoZW9zZ3hjYXdkeGR5YXkvbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvU3RlcEJ1dHRvbi9TdGVwQnV0dG9uLmpzIiwid2VicGFjazovL2xhbGEtbGFuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbXVpK21hdGVyaWFsQDUuMTYuNF9AZW1vdGlvbityZWFjdEAxMS4xMy4wX0B0eXBlcytyZWFjdEAxOC4zLjNfcmVhY3RAMTguMy4xX19AZW1vdGlvbitzdHlsZWRfYnJ4aXBudjR5dnFoZW9zZ3hjYXdkeGR5YXkvbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvU3RlcENvbm5lY3Rvci9zdGVwQ29ubmVjdG9yQ2xhc3Nlcy5qcyIsIndlYnBhY2s6Ly9sYWxhLWxhbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vQG11aSttYXRlcmlhbEA1LjE2LjRfQGVtb3Rpb24rcmVhY3RAMTEuMTMuMF9AdHlwZXMrcmVhY3RAMTguMy4zX3JlYWN0QDE4LjMuMV9fQGVtb3Rpb24rc3R5bGVkX2JyeGlwbnY0eXZxaGVvc2d4Y2F3ZHhkeWF5L25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL1N0ZXBDb25uZWN0b3IvU3RlcENvbm5lY3Rvci5qcyIsIndlYnBhY2s6Ly9sYWxhLWxhbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vQG11aSttYXRlcmlhbEA1LjE2LjRfQGVtb3Rpb24rcmVhY3RAMTEuMTMuMF9AdHlwZXMrcmVhY3RAMTguMy4zX3JlYWN0QDE4LjMuMV9fQGVtb3Rpb24rc3R5bGVkX2JyeGlwbnY0eXZxaGVvc2d4Y2F3ZHhkeWF5L25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL1N0ZXBDb250ZW50L3N0ZXBDb250ZW50Q2xhc3Nlcy5qcyIsIndlYnBhY2s6Ly9sYWxhLWxhbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vQG11aSttYXRlcmlhbEA1LjE2LjRfQGVtb3Rpb24rcmVhY3RAMTEuMTMuMF9AdHlwZXMrcmVhY3RAMTguMy4zX3JlYWN0QDE4LjMuMV9fQGVtb3Rpb24rc3R5bGVkX2JyeGlwbnY0eXZxaGVvc2d4Y2F3ZHhkeWF5L25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL1N0ZXBDb250ZW50L1N0ZXBDb250ZW50LmpzIiwid2VicGFjazovL2xhbGEtbGFuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbXVpK21hdGVyaWFsQDUuMTYuNF9AZW1vdGlvbityZWFjdEAxMS4xMy4wX0B0eXBlcytyZWFjdEAxOC4zLjNfcmVhY3RAMTguMy4xX19AZW1vdGlvbitzdHlsZWRfYnJ4aXBudjR5dnFoZW9zZ3hjYXdkeGR5YXkvbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvU3RlcHBlci9zdGVwcGVyQ2xhc3Nlcy5qcyIsIndlYnBhY2s6Ly9sYWxhLWxhbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vQG11aSttYXRlcmlhbEA1LjE2LjRfQGVtb3Rpb24rcmVhY3RAMTEuMTMuMF9AdHlwZXMrcmVhY3RAMTguMy4zX3JlYWN0QDE4LjMuMV9fQGVtb3Rpb24rc3R5bGVkX2JyeGlwbnY0eXZxaGVvc2d4Y2F3ZHhkeWF5L25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL1N0ZXBwZXIvU3RlcHBlci5qcyIsIndlYnBhY2s6Ly9sYWxhLWxhbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vQG11aSttYXRlcmlhbEA1LjE2LjRfQGVtb3Rpb24rcmVhY3RAMTEuMTMuMF9AdHlwZXMrcmVhY3RAMTguMy4zX3JlYWN0QDE4LjMuMV9fQGVtb3Rpb24rc3R5bGVkX2JyeGlwbnY0eXZxaGVvc2d4Y2F3ZHhkeWF5L25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL1N3aXBlYWJsZURyYXdlci9Td2lwZUFyZWEuanMiLCJ3ZWJwYWNrOi8vbGFsYS1sYW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BtdWkrbWF0ZXJpYWxANS4xNi40X0BlbW90aW9uK3JlYWN0QDExLjEzLjBfQHR5cGVzK3JlYWN0QDE4LjMuM19yZWFjdEAxOC4zLjFfX0BlbW90aW9uK3N0eWxlZF9icnhpcG52NHl2cWhlb3NneGNhd2R4ZHlheS9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9Td2lwZWFibGVEcmF3ZXIvU3dpcGVhYmxlRHJhd2VyLmpzIiwid2VicGFjazovL2xhbGEtbGFuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbXVpK21hdGVyaWFsQDUuMTYuNF9AZW1vdGlvbityZWFjdEAxMS4xMy4wX0B0eXBlcytyZWFjdEAxOC4zLjNfcmVhY3RAMTguMy4xX19AZW1vdGlvbitzdHlsZWRfYnJ4aXBudjR5dnFoZW9zZ3hjYXdkeGR5YXkvbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvU3dpdGNoL3N3aXRjaENsYXNzZXMuanMiLCJ3ZWJwYWNrOi8vbGFsYS1sYW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BtdWkrbWF0ZXJpYWxANS4xNi40X0BlbW90aW9uK3JlYWN0QDExLjEzLjBfQHR5cGVzK3JlYWN0QDE4LjMuM19yZWFjdEAxOC4zLjFfX0BlbW90aW9uK3N0eWxlZF9icnhpcG52NHl2cWhlb3NneGNhd2R4ZHlheS9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9Td2l0Y2gvU3dpdGNoLmpzIiwid2VicGFjazovL2xhbGEtbGFuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbXVpK21hdGVyaWFsQDUuMTYuNF9AZW1vdGlvbityZWFjdEAxMS4xMy4wX0B0eXBlcytyZWFjdEAxOC4zLjNfcmVhY3RAMTguMy4xX19AZW1vdGlvbitzdHlsZWRfYnJ4aXBudjR5dnFoZW9zZ3hjYXdkeGR5YXkvbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvVGFiL3RhYkNsYXNzZXMuanMiLCJ3ZWJwYWNrOi8vbGFsYS1sYW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BtdWkrbWF0ZXJpYWxANS4xNi40X0BlbW90aW9uK3JlYWN0QDExLjEzLjBfQHR5cGVzK3JlYWN0QDE4LjMuM19yZWFjdEAxOC4zLjFfX0BlbW90aW9uK3N0eWxlZF9icnhpcG52NHl2cWhlb3NneGNhd2R4ZHlheS9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9UYWIvVGFiLmpzIiwid2VicGFjazovL2xhbGEtbGFuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbXVpK21hdGVyaWFsQDUuMTYuNF9AZW1vdGlvbityZWFjdEAxMS4xMy4wX0B0eXBlcytyZWFjdEAxOC4zLjNfcmVhY3RAMTguMy4xX19AZW1vdGlvbitzdHlsZWRfYnJ4aXBudjR5dnFoZW9zZ3hjYXdkeGR5YXkvbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvVGFibGUvVGFibGVDb250ZXh0LmpzIiwid2VicGFjazovL2xhbGEtbGFuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbXVpK21hdGVyaWFsQDUuMTYuNF9AZW1vdGlvbityZWFjdEAxMS4xMy4wX0B0eXBlcytyZWFjdEAxOC4zLjNfcmVhY3RAMTguMy4xX19AZW1vdGlvbitzdHlsZWRfYnJ4aXBudjR5dnFoZW9zZ3hjYXdkeGR5YXkvbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvVGFibGUvdGFibGVDbGFzc2VzLmpzIiwid2VicGFjazovL2xhbGEtbGFuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbXVpK21hdGVyaWFsQDUuMTYuNF9AZW1vdGlvbityZWFjdEAxMS4xMy4wX0B0eXBlcytyZWFjdEAxOC4zLjNfcmVhY3RAMTguMy4xX19AZW1vdGlvbitzdHlsZWRfYnJ4aXBudjR5dnFoZW9zZ3hjYXdkeGR5YXkvbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvVGFibGUvVGFibGUuanMiLCJ3ZWJwYWNrOi8vbGFsYS1sYW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BtdWkrbWF0ZXJpYWxANS4xNi40X0BlbW90aW9uK3JlYWN0QDExLjEzLjBfQHR5cGVzK3JlYWN0QDE4LjMuM19yZWFjdEAxOC4zLjFfX0BlbW90aW9uK3N0eWxlZF9icnhpcG52NHl2cWhlb3NneGNhd2R4ZHlheS9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9UYWJsZS9UYWJsZWx2bDJDb250ZXh0LmpzIiwid2VicGFjazovL2xhbGEtbGFuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbXVpK21hdGVyaWFsQDUuMTYuNF9AZW1vdGlvbityZWFjdEAxMS4xMy4wX0B0eXBlcytyZWFjdEAxOC4zLjNfcmVhY3RAMTguMy4xX19AZW1vdGlvbitzdHlsZWRfYnJ4aXBudjR5dnFoZW9zZ3hjYXdkeGR5YXkvbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvVGFibGVCb2R5L3RhYmxlQm9keUNsYXNzZXMuanMiLCJ3ZWJwYWNrOi8vbGFsYS1sYW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BtdWkrbWF0ZXJpYWxANS4xNi40X0BlbW90aW9uK3JlYWN0QDExLjEzLjBfQHR5cGVzK3JlYWN0QDE4LjMuM19yZWFjdEAxOC4zLjFfX0BlbW90aW9uK3N0eWxlZF9icnhpcG52NHl2cWhlb3NneGNhd2R4ZHlheS9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9UYWJsZUJvZHkvVGFibGVCb2R5LmpzIiwid2VicGFjazovL2xhbGEtbGFuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbXVpK21hdGVyaWFsQDUuMTYuNF9AZW1vdGlvbityZWFjdEAxMS4xMy4wX0B0eXBlcytyZWFjdEAxOC4zLjNfcmVhY3RAMTguMy4xX19AZW1vdGlvbitzdHlsZWRfYnJ4aXBudjR5dnFoZW9zZ3hjYXdkeGR5YXkvbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvVGFibGVDZWxsL3RhYmxlQ2VsbENsYXNzZXMuanMiLCJ3ZWJwYWNrOi8vbGFsYS1sYW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BtdWkrbWF0ZXJpYWxANS4xNi40X0BlbW90aW9uK3JlYWN0QDExLjEzLjBfQHR5cGVzK3JlYWN0QDE4LjMuM19yZWFjdEAxOC4zLjFfX0BlbW90aW9uK3N0eWxlZF9icnhpcG52NHl2cWhlb3NneGNhd2R4ZHlheS9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9UYWJsZUNlbGwvVGFibGVDZWxsLmpzIiwid2VicGFjazovL2xhbGEtbGFuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbXVpK21hdGVyaWFsQDUuMTYuNF9AZW1vdGlvbityZWFjdEAxMS4xMy4wX0B0eXBlcytyZWFjdEAxOC4zLjNfcmVhY3RAMTguMy4xX19AZW1vdGlvbitzdHlsZWRfYnJ4aXBudjR5dnFoZW9zZ3hjYXdkeGR5YXkvbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvVGFibGVDb250YWluZXIvdGFibGVDb250YWluZXJDbGFzc2VzLmpzIiwid2VicGFjazovL2xhbGEtbGFuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbXVpK21hdGVyaWFsQDUuMTYuNF9AZW1vdGlvbityZWFjdEAxMS4xMy4wX0B0eXBlcytyZWFjdEAxOC4zLjNfcmVhY3RAMTguMy4xX19AZW1vdGlvbitzdHlsZWRfYnJ4aXBudjR5dnFoZW9zZ3hjYXdkeGR5YXkvbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvVGFibGVDb250YWluZXIvVGFibGVDb250YWluZXIuanMiLCJ3ZWJwYWNrOi8vbGFsYS1sYW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BtdWkrbWF0ZXJpYWxANS4xNi40X0BlbW90aW9uK3JlYWN0QDExLjEzLjBfQHR5cGVzK3JlYWN0QDE4LjMuM19yZWFjdEAxOC4zLjFfX0BlbW90aW9uK3N0eWxlZF9icnhpcG52NHl2cWhlb3NneGNhd2R4ZHlheS9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9UYWJsZUZvb3Rlci90YWJsZUZvb3RlckNsYXNzZXMuanMiLCJ3ZWJwYWNrOi8vbGFsYS1sYW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BtdWkrbWF0ZXJpYWxANS4xNi40X0BlbW90aW9uK3JlYWN0QDExLjEzLjBfQHR5cGVzK3JlYWN0QDE4LjMuM19yZWFjdEAxOC4zLjFfX0BlbW90aW9uK3N0eWxlZF9icnhpcG52NHl2cWhlb3NneGNhd2R4ZHlheS9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9UYWJsZUZvb3Rlci9UYWJsZUZvb3Rlci5qcyIsIndlYnBhY2s6Ly9sYWxhLWxhbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vQG11aSttYXRlcmlhbEA1LjE2LjRfQGVtb3Rpb24rcmVhY3RAMTEuMTMuMF9AdHlwZXMrcmVhY3RAMTguMy4zX3JlYWN0QDE4LjMuMV9fQGVtb3Rpb24rc3R5bGVkX2JyeGlwbnY0eXZxaGVvc2d4Y2F3ZHhkeWF5L25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL1RhYmxlSGVhZC90YWJsZUhlYWRDbGFzc2VzLmpzIiwid2VicGFjazovL2xhbGEtbGFuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbXVpK21hdGVyaWFsQDUuMTYuNF9AZW1vdGlvbityZWFjdEAxMS4xMy4wX0B0eXBlcytyZWFjdEAxOC4zLjNfcmVhY3RAMTguMy4xX19AZW1vdGlvbitzdHlsZWRfYnJ4aXBudjR5dnFoZW9zZ3hjYXdkeGR5YXkvbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvVGFibGVIZWFkL1RhYmxlSGVhZC5qcyIsIndlYnBhY2s6Ly9sYWxhLWxhbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vQG11aSttYXRlcmlhbEA1LjE2LjRfQGVtb3Rpb24rcmVhY3RAMTEuMTMuMF9AdHlwZXMrcmVhY3RAMTguMy4zX3JlYWN0QDE4LjMuMV9fQGVtb3Rpb24rc3R5bGVkX2JyeGlwbnY0eXZxaGVvc2d4Y2F3ZHhkeWF5L25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL2ludGVybmFsL3N2Zy1pY29ucy9LZXlib2FyZEFycm93TGVmdC5qcyIsIndlYnBhY2s6Ly9sYWxhLWxhbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vQG11aSttYXRlcmlhbEA1LjE2LjRfQGVtb3Rpb24rcmVhY3RAMTEuMTMuMF9AdHlwZXMrcmVhY3RAMTguMy4zX3JlYWN0QDE4LjMuMV9fQGVtb3Rpb24rc3R5bGVkX2JyeGlwbnY0eXZxaGVvc2d4Y2F3ZHhkeWF5L25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL2ludGVybmFsL3N2Zy1pY29ucy9LZXlib2FyZEFycm93UmlnaHQuanMiLCJ3ZWJwYWNrOi8vbGFsYS1sYW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BtdWkrbWF0ZXJpYWxANS4xNi40X0BlbW90aW9uK3JlYWN0QDExLjEzLjBfQHR5cGVzK3JlYWN0QDE4LjMuM19yZWFjdEAxOC4zLjFfX0BlbW90aW9uK3N0eWxlZF9icnhpcG52NHl2cWhlb3NneGNhd2R4ZHlheS9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9UYWJsZVBhZ2luYXRpb24vVGFibGVQYWdpbmF0aW9uQWN0aW9ucy5qcyIsIndlYnBhY2s6Ly9sYWxhLWxhbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vQG11aSttYXRlcmlhbEA1LjE2LjRfQGVtb3Rpb24rcmVhY3RAMTEuMTMuMF9AdHlwZXMrcmVhY3RAMTguMy4zX3JlYWN0QDE4LjMuMV9fQGVtb3Rpb24rc3R5bGVkX2JyeGlwbnY0eXZxaGVvc2d4Y2F3ZHhkeWF5L25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL1RhYmxlUGFnaW5hdGlvbi90YWJsZVBhZ2luYXRpb25DbGFzc2VzLmpzIiwid2VicGFjazovL2xhbGEtbGFuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbXVpK21hdGVyaWFsQDUuMTYuNF9AZW1vdGlvbityZWFjdEAxMS4xMy4wX0B0eXBlcytyZWFjdEAxOC4zLjNfcmVhY3RAMTguMy4xX19AZW1vdGlvbitzdHlsZWRfYnJ4aXBudjR5dnFoZW9zZ3hjYXdkeGR5YXkvbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvVGFibGVQYWdpbmF0aW9uL1RhYmxlUGFnaW5hdGlvbi5qcyIsIndlYnBhY2s6Ly9sYWxhLWxhbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vQG11aSttYXRlcmlhbEA1LjE2LjRfQGVtb3Rpb24rcmVhY3RAMTEuMTMuMF9AdHlwZXMrcmVhY3RAMTguMy4zX3JlYWN0QDE4LjMuMV9fQGVtb3Rpb24rc3R5bGVkX2JyeGlwbnY0eXZxaGVvc2d4Y2F3ZHhkeWF5L25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL1RhYmxlUm93L3RhYmxlUm93Q2xhc3Nlcy5qcyIsIndlYnBhY2s6Ly9sYWxhLWxhbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vQG11aSttYXRlcmlhbEA1LjE2LjRfQGVtb3Rpb24rcmVhY3RAMTEuMTMuMF9AdHlwZXMrcmVhY3RAMTguMy4zX3JlYWN0QDE4LjMuMV9fQGVtb3Rpb24rc3R5bGVkX2JyeGlwbnY0eXZxaGVvc2d4Y2F3ZHhkeWF5L25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL1RhYmxlUm93L1RhYmxlUm93LmpzIiwid2VicGFjazovL2xhbGEtbGFuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbXVpK21hdGVyaWFsQDUuMTYuNF9AZW1vdGlvbityZWFjdEAxMS4xMy4wX0B0eXBlcytyZWFjdEAxOC4zLjNfcmVhY3RAMTguMy4xX19AZW1vdGlvbitzdHlsZWRfYnJ4aXBudjR5dnFoZW9zZ3hjYXdkeGR5YXkvbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvaW50ZXJuYWwvc3ZnLWljb25zL0Fycm93RG93bndhcmQuanMiLCJ3ZWJwYWNrOi8vbGFsYS1sYW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BtdWkrbWF0ZXJpYWxANS4xNi40X0BlbW90aW9uK3JlYWN0QDExLjEzLjBfQHR5cGVzK3JlYWN0QDE4LjMuM19yZWFjdEAxOC4zLjFfX0BlbW90aW9uK3N0eWxlZF9icnhpcG52NHl2cWhlb3NneGNhd2R4ZHlheS9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9UYWJsZVNvcnRMYWJlbC90YWJsZVNvcnRMYWJlbENsYXNzZXMuanMiLCJ3ZWJwYWNrOi8vbGFsYS1sYW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BtdWkrbWF0ZXJpYWxANS4xNi40X0BlbW90aW9uK3JlYWN0QDExLjEzLjBfQHR5cGVzK3JlYWN0QDE4LjMuM19yZWFjdEAxOC4zLjFfX0BlbW90aW9uK3N0eWxlZF9icnhpcG52NHl2cWhlb3NneGNhd2R4ZHlheS9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9UYWJsZVNvcnRMYWJlbC9UYWJsZVNvcnRMYWJlbC5qcyIsIndlYnBhY2s6Ly9sYWxhLWxhbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vQG11aSt1dGlsc0A1LjE2LjRfQHR5cGVzK3JlYWN0QDE4LjMuM19yZWFjdEAxOC4zLjEvbm9kZV9tb2R1bGVzL0BtdWkvdXRpbHMvZXNtL3Njcm9sbExlZnQvc2Nyb2xsTGVmdC5qcyIsIndlYnBhY2s6Ly9sYWxhLWxhbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vQG11aSttYXRlcmlhbEA1LjE2LjRfQGVtb3Rpb24rcmVhY3RAMTEuMTMuMF9AdHlwZXMrcmVhY3RAMTguMy4zX3JlYWN0QDE4LjMuMV9fQGVtb3Rpb24rc3R5bGVkX2JyeGlwbnY0eXZxaGVvc2d4Y2F3ZHhkeWF5L25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL2ludGVybmFsL2FuaW1hdGUuanMiLCJ3ZWJwYWNrOi8vbGFsYS1sYW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BtdWkrbWF0ZXJpYWxANS4xNi40X0BlbW90aW9uK3JlYWN0QDExLjEzLjBfQHR5cGVzK3JlYWN0QDE4LjMuM19yZWFjdEAxOC4zLjFfX0BlbW90aW9uK3N0eWxlZF9icnhpcG52NHl2cWhlb3NneGNhd2R4ZHlheS9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9UYWJzL1Njcm9sbGJhclNpemUuanMiLCJ3ZWJwYWNrOi8vbGFsYS1sYW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BtdWkrbWF0ZXJpYWxANS4xNi40X0BlbW90aW9uK3JlYWN0QDExLjEzLjBfQHR5cGVzK3JlYWN0QDE4LjMuM19yZWFjdEAxOC4zLjFfX0BlbW90aW9uK3N0eWxlZF9icnhpcG52NHl2cWhlb3NneGNhd2R4ZHlheS9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9UYWJTY3JvbGxCdXR0b24vdGFiU2Nyb2xsQnV0dG9uQ2xhc3Nlcy5qcyIsIndlYnBhY2s6Ly9sYWxhLWxhbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vQG11aSttYXRlcmlhbEA1LjE2LjRfQGVtb3Rpb24rcmVhY3RAMTEuMTMuMF9AdHlwZXMrcmVhY3RAMTguMy4zX3JlYWN0QDE4LjMuMV9fQGVtb3Rpb24rc3R5bGVkX2JyeGlwbnY0eXZxaGVvc2d4Y2F3ZHhkeWF5L25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL1RhYlNjcm9sbEJ1dHRvbi9UYWJTY3JvbGxCdXR0b24uanMiLCJ3ZWJwYWNrOi8vbGFsYS1sYW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BtdWkrbWF0ZXJpYWxANS4xNi40X0BlbW90aW9uK3JlYWN0QDExLjEzLjBfQHR5cGVzK3JlYWN0QDE4LjMuM19yZWFjdEAxOC4zLjFfX0BlbW90aW9uK3N0eWxlZF9icnhpcG52NHl2cWhlb3NneGNhd2R4ZHlheS9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9UYWJzL3RhYnNDbGFzc2VzLmpzIiwid2VicGFjazovL2xhbGEtbGFuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbXVpK21hdGVyaWFsQDUuMTYuNF9AZW1vdGlvbityZWFjdEAxMS4xMy4wX0B0eXBlcytyZWFjdEAxOC4zLjNfcmVhY3RAMTguMy4xX19AZW1vdGlvbitzdHlsZWRfYnJ4aXBudjR5dnFoZW9zZ3hjYXdkeGR5YXkvbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvVGFicy9UYWJzLmpzIiwid2VicGFjazovL2xhbGEtbGFuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbXVpK21hdGVyaWFsQDUuMTYuNF9AZW1vdGlvbityZWFjdEAxMS4xMy4wX0B0eXBlcytyZWFjdEAxOC4zLjNfcmVhY3RAMTguMy4xX19AZW1vdGlvbitzdHlsZWRfYnJ4aXBudjR5dnFoZW9zZ3hjYXdkeGR5YXkvbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvVGV4dEZpZWxkL3RleHRGaWVsZENsYXNzZXMuanMiLCJ3ZWJwYWNrOi8vbGFsYS1sYW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BtdWkrbWF0ZXJpYWxANS4xNi40X0BlbW90aW9uK3JlYWN0QDExLjEzLjBfQHR5cGVzK3JlYWN0QDE4LjMuM19yZWFjdEAxOC4zLjFfX0BlbW90aW9uK3N0eWxlZF9icnhpcG52NHl2cWhlb3NneGNhd2R4ZHlheS9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9UZXh0RmllbGQvVGV4dEZpZWxkLmpzIiwid2VicGFjazovL2xhbGEtbGFuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbXVpK21hdGVyaWFsQDUuMTYuNF9AZW1vdGlvbityZWFjdEAxMS4xMy4wX0B0eXBlcytyZWFjdEAxOC4zLjNfcmVhY3RAMTguMy4xX19AZW1vdGlvbitzdHlsZWRfYnJ4aXBudjR5dnFoZW9zZ3hjYXdkeGR5YXkvbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvVG9nZ2xlQnV0dG9uL3RvZ2dsZUJ1dHRvbkNsYXNzZXMuanMiLCJ3ZWJwYWNrOi8vbGFsYS1sYW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BtdWkrbWF0ZXJpYWxANS4xNi40X0BlbW90aW9uK3JlYWN0QDExLjEzLjBfQHR5cGVzK3JlYWN0QDE4LjMuM19yZWFjdEAxOC4zLjFfX0BlbW90aW9uK3N0eWxlZF9icnhpcG52NHl2cWhlb3NneGNhd2R4ZHlheS9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9Ub2dnbGVCdXR0b25Hcm91cC9Ub2dnbGVCdXR0b25Hcm91cENvbnRleHQuanMiLCJ3ZWJwYWNrOi8vbGFsYS1sYW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BtdWkrbWF0ZXJpYWxANS4xNi40X0BlbW90aW9uK3JlYWN0QDExLjEzLjBfQHR5cGVzK3JlYWN0QDE4LjMuM19yZWFjdEAxOC4zLjFfX0BlbW90aW9uK3N0eWxlZF9icnhpcG52NHl2cWhlb3NneGNhd2R4ZHlheS9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9Ub2dnbGVCdXR0b25Hcm91cC9Ub2dnbGVCdXR0b25Hcm91cEJ1dHRvbkNvbnRleHQuanMiLCJ3ZWJwYWNrOi8vbGFsYS1sYW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BtdWkrbWF0ZXJpYWxANS4xNi40X0BlbW90aW9uK3JlYWN0QDExLjEzLjBfQHR5cGVzK3JlYWN0QDE4LjMuM19yZWFjdEAxOC4zLjFfX0BlbW90aW9uK3N0eWxlZF9icnhpcG52NHl2cWhlb3NneGNhd2R4ZHlheS9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9Ub2dnbGVCdXR0b25Hcm91cC9pc1ZhbHVlU2VsZWN0ZWQuanMiLCJ3ZWJwYWNrOi8vbGFsYS1sYW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BtdWkrbWF0ZXJpYWxANS4xNi40X0BlbW90aW9uK3JlYWN0QDExLjEzLjBfQHR5cGVzK3JlYWN0QDE4LjMuM19yZWFjdEAxOC4zLjFfX0BlbW90aW9uK3N0eWxlZF9icnhpcG52NHl2cWhlb3NneGNhd2R4ZHlheS9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9Ub2dnbGVCdXR0b24vVG9nZ2xlQnV0dG9uLmpzIiwid2VicGFjazovL2xhbGEtbGFuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbXVpK21hdGVyaWFsQDUuMTYuNF9AZW1vdGlvbityZWFjdEAxMS4xMy4wX0B0eXBlcytyZWFjdEAxOC4zLjNfcmVhY3RAMTguMy4xX19AZW1vdGlvbitzdHlsZWRfYnJ4aXBudjR5dnFoZW9zZ3hjYXdkeGR5YXkvbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvVG9nZ2xlQnV0dG9uR3JvdXAvdG9nZ2xlQnV0dG9uR3JvdXBDbGFzc2VzLmpzIiwid2VicGFjazovL2xhbGEtbGFuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbXVpK21hdGVyaWFsQDUuMTYuNF9AZW1vdGlvbityZWFjdEAxMS4xMy4wX0B0eXBlcytyZWFjdEAxOC4zLjNfcmVhY3RAMTguMy4xX19AZW1vdGlvbitzdHlsZWRfYnJ4aXBudjR5dnFoZW9zZ3hjYXdkeGR5YXkvbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvVG9nZ2xlQnV0dG9uR3JvdXAvVG9nZ2xlQnV0dG9uR3JvdXAuanMiLCJ3ZWJwYWNrOi8vbGFsYS1sYW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BtdWkrbWF0ZXJpYWxANS4xNi40X0BlbW90aW9uK3JlYWN0QDExLjEzLjBfQHR5cGVzK3JlYWN0QDE4LjMuM19yZWFjdEAxOC4zLjFfX0BlbW90aW9uK3N0eWxlZF9icnhpcG52NHl2cWhlb3NneGNhd2R4ZHlheS9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC91c2VTY3JvbGxUcmlnZ2VyL3VzZVNjcm9sbFRyaWdnZXIuanMiLCJ3ZWJwYWNrOi8vbGFsYS1sYW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BtdWkrc3lzdGVtQDUuMTYuNF9AZW1vdGlvbityZWFjdEAxMS4xMy4wX0B0eXBlcytyZWFjdEAxOC4zLjNfcmVhY3RAMTguMy4xX19AZW1vdGlvbitzdHlsZWRAMV82cHhzc2hmNG9wNmNpZXhlc2pnajc3eG9vZS9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vdXNlVGhlbWVXaXRob3V0RGVmYXVsdC5qcyIsIndlYnBhY2s6Ly9sYWxhLWxhbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vZnJhbWVyLW1vdGlvbkA0LjEuMTdfcmVhY3QtZG9tQDE4LjMuMV9yZWFjdEAxOC4zLjFfX3JlYWN0QDE4LjMuMS9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2ZyYW1lci1tb3Rpb24uY2pzLmpzIiwid2VicGFjazovL2xhbGEtbGFuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9mcmFtZXN5bmNANS4zLjAvbm9kZV9tb2R1bGVzL2ZyYW1lc3luYy9kaXN0L2ZyYW1lc3luYy5janMuanMiLCJ3ZWJwYWNrOi8vbGFsYS1sYW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL2hleS1saXN0ZW5AMS4wLjgvbm9kZV9tb2R1bGVzL2hleS1saXN0ZW4vZGlzdC9oZXktbGlzdGVuLmVzLmpzIiwid2VicGFjazovL2xhbGEtbGFuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9wb3Btb3Rpb25AOS4zLjYvbm9kZV9tb2R1bGVzL3BvcG1vdGlvbi9kaXN0L3BvcG1vdGlvbi5janMuanMiLCJ3ZWJwYWNrOi8vbGFsYS1sYW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL3JlYWN0LW1hdGVyaWFsLXVpLWNhcm91c2VsQDMuNC4yX2UzbGVydWR3dDNpcHI3bHBlMnBzY29hZnllL25vZGVfbW9kdWxlcy9yZWFjdC1tYXRlcmlhbC11aS1jYXJvdXNlbC9kaXN0L2NvbXBvbmVudHMvQ2Fyb3VzZWwuanMiLCJ3ZWJwYWNrOi8vbGFsYS1sYW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL3JlYWN0LW1hdGVyaWFsLXVpLWNhcm91c2VsQDMuNC4yX2UzbGVydWR3dDNpcHI3bHBlMnBzY29hZnllL25vZGVfbW9kdWxlcy9yZWFjdC1tYXRlcmlhbC11aS1jYXJvdXNlbC9kaXN0L2NvbXBvbmVudHMvQ2Fyb3VzZWxJdGVtLmpzIiwid2VicGFjazovL2xhbGEtbGFuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9yZWFjdC1tYXRlcmlhbC11aS1jYXJvdXNlbEAzLjQuMl9lM2xlcnVkd3QzaXByN2xwZTJwc2NvYWZ5ZS9ub2RlX21vZHVsZXMvcmVhY3QtbWF0ZXJpYWwtdWktY2Fyb3VzZWwvZGlzdC9jb21wb25lbnRzL0luZGljYXRvcnMuanMiLCJ3ZWJwYWNrOi8vbGFsYS1sYW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL3JlYWN0LW1hdGVyaWFsLXVpLWNhcm91c2VsQDMuNC4yX2UzbGVydWR3dDNpcHI3bHBlMnBzY29hZnllL25vZGVfbW9kdWxlcy9yZWFjdC1tYXRlcmlhbC11aS1jYXJvdXNlbC9kaXN0L2NvbXBvbmVudHMvU3R5bGVkLmpzIiwid2VicGFjazovL2xhbGEtbGFuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9yZWFjdC1tYXRlcmlhbC11aS1jYXJvdXNlbEAzLjQuMl9lM2xlcnVkd3QzaXByN2xwZTJwc2NvYWZ5ZS9ub2RlX21vZHVsZXMvcmVhY3QtbWF0ZXJpYWwtdWktY2Fyb3VzZWwvZGlzdC9jb21wb25lbnRzL3V0aWwuanMiLCJ3ZWJwYWNrOi8vbGFsYS1sYW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzLy5wbnBtL3JlYWN0LW1hdGVyaWFsLXVpLWNhcm91c2VsQDMuNC4yX2UzbGVydWR3dDNpcHI3bHBlMnBzY29hZnllL25vZGVfbW9kdWxlcy9yZWFjdC1tYXRlcmlhbC11aS1jYXJvdXNlbC9kaXN0L2luZGV4LmpzIiwid2VicGFjazovL2xhbGEtbGFuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy8ucG5wbS9zdHlsZS12YWx1ZS10eXBlc0A0LjEuNC9ub2RlX21vZHVsZXMvc3R5bGUtdmFsdWUtdHlwZXMvZGlzdC92YWx1ZVR5cGVzLmNqcy5qcyIsIndlYnBhY2s6Ly9sYWxhLWxhbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvLnBucG0vdHNsaWJAMi42LjMvbm9kZV9tb2R1bGVzL3RzbGliL3RzbGliLmVzNi5tanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IG1lbW9pemUgZnJvbSAnQGVtb3Rpb24vbWVtb2l6ZSc7XG5cbnZhciByZWFjdFByb3BzUmVnZXggPSAvXigoY2hpbGRyZW58ZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUx8a2V5fHJlZnxhdXRvRm9jdXN8ZGVmYXVsdFZhbHVlfGRlZmF1bHRDaGVja2VkfGlubmVySFRNTHxzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmd8c3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nfHZhbHVlTGlua3xhY2NlcHR8YWNjZXB0Q2hhcnNldHxhY2Nlc3NLZXl8YWN0aW9ufGFsbG93fGFsbG93VXNlck1lZGlhfGFsbG93UGF5bWVudFJlcXVlc3R8YWxsb3dGdWxsU2NyZWVufGFsbG93VHJhbnNwYXJlbmN5fGFsdHxhc3luY3xhdXRvQ29tcGxldGV8YXV0b1BsYXl8Y2FwdHVyZXxjZWxsUGFkZGluZ3xjZWxsU3BhY2luZ3xjaGFsbGVuZ2V8Y2hhclNldHxjaGVja2VkfGNpdGV8Y2xhc3NJRHxjbGFzc05hbWV8Y29sc3xjb2xTcGFufGNvbnRlbnR8Y29udGVudEVkaXRhYmxlfGNvbnRleHRNZW51fGNvbnRyb2xzfGNvbnRyb2xzTGlzdHxjb29yZHN8Y3Jvc3NPcmlnaW58ZGF0YXxkYXRlVGltZXxkZWNvZGluZ3xkZWZhdWx0fGRlZmVyfGRpcnxkaXNhYmxlZHxkaXNhYmxlUGljdHVyZUluUGljdHVyZXxkb3dubG9hZHxkcmFnZ2FibGV8ZW5jVHlwZXxmb3JtfGZvcm1BY3Rpb258Zm9ybUVuY1R5cGV8Zm9ybU1ldGhvZHxmb3JtTm9WYWxpZGF0ZXxmb3JtVGFyZ2V0fGZyYW1lQm9yZGVyfGhlYWRlcnN8aGVpZ2h0fGhpZGRlbnxoaWdofGhyZWZ8aHJlZkxhbmd8aHRtbEZvcnxodHRwRXF1aXZ8aWR8aW5wdXRNb2RlfGludGVncml0eXxpc3xrZXlQYXJhbXN8a2V5VHlwZXxraW5kfGxhYmVsfGxhbmd8bGlzdHxsb2FkaW5nfGxvb3B8bG93fG1hcmdpbkhlaWdodHxtYXJnaW5XaWR0aHxtYXh8bWF4TGVuZ3RofG1lZGlhfG1lZGlhR3JvdXB8bWV0aG9kfG1pbnxtaW5MZW5ndGh8bXVsdGlwbGV8bXV0ZWR8bmFtZXxub25jZXxub1ZhbGlkYXRlfG9wZW58b3B0aW11bXxwYXR0ZXJufHBsYWNlaG9sZGVyfHBsYXlzSW5saW5lfHBvc3RlcnxwcmVsb2FkfHByb2ZpbGV8cmFkaW9Hcm91cHxyZWFkT25seXxyZWZlcnJlclBvbGljeXxyZWx8cmVxdWlyZWR8cmV2ZXJzZWR8cm9sZXxyb3dzfHJvd1NwYW58c2FuZGJveHxzY29wZXxzY29wZWR8c2Nyb2xsaW5nfHNlYW1sZXNzfHNlbGVjdGVkfHNoYXBlfHNpemV8c2l6ZXN8c2xvdHxzcGFufHNwZWxsQ2hlY2t8c3JjfHNyY0RvY3xzcmNMYW5nfHNyY1NldHxzdGFydHxzdGVwfHN0eWxlfHN1bW1hcnl8dGFiSW5kZXh8dGFyZ2V0fHRpdGxlfHR5cGV8dXNlTWFwfHZhbHVlfHdpZHRofHdtb2RlfHdyYXB8YWJvdXR8ZGF0YXR5cGV8aW5saXN0fHByZWZpeHxwcm9wZXJ0eXxyZXNvdXJjZXx0eXBlb2Z8dm9jYWJ8YXV0b0NhcGl0YWxpemV8YXV0b0NvcnJlY3R8YXV0b1NhdmV8Y29sb3J8aW5lcnR8aXRlbVByb3B8aXRlbVNjb3BlfGl0ZW1UeXBlfGl0ZW1JRHxpdGVtUmVmfG9ufHJlc3VsdHN8c2VjdXJpdHl8dW5zZWxlY3RhYmxlfGFjY2VudEhlaWdodHxhY2N1bXVsYXRlfGFkZGl0aXZlfGFsaWdubWVudEJhc2VsaW5lfGFsbG93UmVvcmRlcnxhbHBoYWJldGljfGFtcGxpdHVkZXxhcmFiaWNGb3JtfGFzY2VudHxhdHRyaWJ1dGVOYW1lfGF0dHJpYnV0ZVR5cGV8YXV0b1JldmVyc2V8YXppbXV0aHxiYXNlRnJlcXVlbmN5fGJhc2VsaW5lU2hpZnR8YmFzZVByb2ZpbGV8YmJveHxiZWdpbnxiaWFzfGJ5fGNhbGNNb2RlfGNhcEhlaWdodHxjbGlwfGNsaXBQYXRoVW5pdHN8Y2xpcFBhdGh8Y2xpcFJ1bGV8Y29sb3JJbnRlcnBvbGF0aW9ufGNvbG9ySW50ZXJwb2xhdGlvbkZpbHRlcnN8Y29sb3JQcm9maWxlfGNvbG9yUmVuZGVyaW5nfGNvbnRlbnRTY3JpcHRUeXBlfGNvbnRlbnRTdHlsZVR5cGV8Y3Vyc29yfGN4fGN5fGR8ZGVjZWxlcmF0ZXxkZXNjZW50fGRpZmZ1c2VDb25zdGFudHxkaXJlY3Rpb258ZGlzcGxheXxkaXZpc29yfGRvbWluYW50QmFzZWxpbmV8ZHVyfGR4fGR5fGVkZ2VNb2RlfGVsZXZhdGlvbnxlbmFibGVCYWNrZ3JvdW5kfGVuZHxleHBvbmVudHxleHRlcm5hbFJlc291cmNlc1JlcXVpcmVkfGZpbGx8ZmlsbE9wYWNpdHl8ZmlsbFJ1bGV8ZmlsdGVyfGZpbHRlclJlc3xmaWx0ZXJVbml0c3xmbG9vZENvbG9yfGZsb29kT3BhY2l0eXxmb2N1c2FibGV8Zm9udEZhbWlseXxmb250U2l6ZXxmb250U2l6ZUFkanVzdHxmb250U3RyZXRjaHxmb250U3R5bGV8Zm9udFZhcmlhbnR8Zm9udFdlaWdodHxmb3JtYXR8ZnJvbXxmcnxmeHxmeXxnMXxnMnxnbHlwaE5hbWV8Z2x5cGhPcmllbnRhdGlvbkhvcml6b250YWx8Z2x5cGhPcmllbnRhdGlvblZlcnRpY2FsfGdseXBoUmVmfGdyYWRpZW50VHJhbnNmb3JtfGdyYWRpZW50VW5pdHN8aGFuZ2luZ3xob3JpekFkdlh8aG9yaXpPcmlnaW5YfGlkZW9ncmFwaGljfGltYWdlUmVuZGVyaW5nfGlufGluMnxpbnRlcmNlcHR8a3xrMXxrMnxrM3xrNHxrZXJuZWxNYXRyaXh8a2VybmVsVW5pdExlbmd0aHxrZXJuaW5nfGtleVBvaW50c3xrZXlTcGxpbmVzfGtleVRpbWVzfGxlbmd0aEFkanVzdHxsZXR0ZXJTcGFjaW5nfGxpZ2h0aW5nQ29sb3J8bGltaXRpbmdDb25lQW5nbGV8bG9jYWx8bWFya2VyRW5kfG1hcmtlck1pZHxtYXJrZXJTdGFydHxtYXJrZXJIZWlnaHR8bWFya2VyVW5pdHN8bWFya2VyV2lkdGh8bWFza3xtYXNrQ29udGVudFVuaXRzfG1hc2tVbml0c3xtYXRoZW1hdGljYWx8bW9kZXxudW1PY3RhdmVzfG9mZnNldHxvcGFjaXR5fG9wZXJhdG9yfG9yZGVyfG9yaWVudHxvcmllbnRhdGlvbnxvcmlnaW58b3ZlcmZsb3d8b3ZlcmxpbmVQb3NpdGlvbnxvdmVybGluZVRoaWNrbmVzc3xwYW5vc2UxfHBhaW50T3JkZXJ8cGF0aExlbmd0aHxwYXR0ZXJuQ29udGVudFVuaXRzfHBhdHRlcm5UcmFuc2Zvcm18cGF0dGVyblVuaXRzfHBvaW50ZXJFdmVudHN8cG9pbnRzfHBvaW50c0F0WHxwb2ludHNBdFl8cG9pbnRzQXRafHByZXNlcnZlQWxwaGF8cHJlc2VydmVBc3BlY3RSYXRpb3xwcmltaXRpdmVVbml0c3xyfHJhZGl1c3xyZWZYfHJlZll8cmVuZGVyaW5nSW50ZW50fHJlcGVhdENvdW50fHJlcGVhdER1cnxyZXF1aXJlZEV4dGVuc2lvbnN8cmVxdWlyZWRGZWF0dXJlc3xyZXN0YXJ0fHJlc3VsdHxyb3RhdGV8cnh8cnl8c2NhbGV8c2VlZHxzaGFwZVJlbmRlcmluZ3xzbG9wZXxzcGFjaW5nfHNwZWN1bGFyQ29uc3RhbnR8c3BlY3VsYXJFeHBvbmVudHxzcGVlZHxzcHJlYWRNZXRob2R8c3RhcnRPZmZzZXR8c3RkRGV2aWF0aW9ufHN0ZW1ofHN0ZW12fHN0aXRjaFRpbGVzfHN0b3BDb2xvcnxzdG9wT3BhY2l0eXxzdHJpa2V0aHJvdWdoUG9zaXRpb258c3RyaWtldGhyb3VnaFRoaWNrbmVzc3xzdHJpbmd8c3Ryb2tlfHN0cm9rZURhc2hhcnJheXxzdHJva2VEYXNob2Zmc2V0fHN0cm9rZUxpbmVjYXB8c3Ryb2tlTGluZWpvaW58c3Ryb2tlTWl0ZXJsaW1pdHxzdHJva2VPcGFjaXR5fHN0cm9rZVdpZHRofHN1cmZhY2VTY2FsZXxzeXN0ZW1MYW5ndWFnZXx0YWJsZVZhbHVlc3x0YXJnZXRYfHRhcmdldFl8dGV4dEFuY2hvcnx0ZXh0RGVjb3JhdGlvbnx0ZXh0UmVuZGVyaW5nfHRleHRMZW5ndGh8dG98dHJhbnNmb3JtfHUxfHUyfHVuZGVybGluZVBvc2l0aW9ufHVuZGVybGluZVRoaWNrbmVzc3x1bmljb2RlfHVuaWNvZGVCaWRpfHVuaWNvZGVSYW5nZXx1bml0c1BlckVtfHZBbHBoYWJldGljfHZIYW5naW5nfHZJZGVvZ3JhcGhpY3x2TWF0aGVtYXRpY2FsfHZhbHVlc3x2ZWN0b3JFZmZlY3R8dmVyc2lvbnx2ZXJ0QWR2WXx2ZXJ0T3JpZ2luWHx2ZXJ0T3JpZ2luWXx2aWV3Qm94fHZpZXdUYXJnZXR8dmlzaWJpbGl0eXx3aWR0aHN8d29yZFNwYWNpbmd8d3JpdGluZ01vZGV8eHx4SGVpZ2h0fHgxfHgyfHhDaGFubmVsU2VsZWN0b3J8eGxpbmtBY3R1YXRlfHhsaW5rQXJjcm9sZXx4bGlua0hyZWZ8eGxpbmtSb2xlfHhsaW5rU2hvd3x4bGlua1RpdGxlfHhsaW5rVHlwZXx4bWxCYXNlfHhtbG5zfHhtbG5zWGxpbmt8eG1sTGFuZ3x4bWxTcGFjZXx5fHkxfHkyfHlDaGFubmVsU2VsZWN0b3J8enx6b29tQW5kUGFufGZvcnxjbGFzc3xhdXRvZm9jdXMpfCgoW0RkXVtBYV1bVHRdW0FhXXxbQWFdW1JyXVtJaV1bQWFdfHgpLS4qKSkkLzsgLy8gaHR0cHM6Ly9lc2JlbmNoLmNvbS9iZW5jaC81YmZlZTY4YTRjZDdlNjAwOWVmNjFkMjNcblxudmFyIGluZGV4ID0gbWVtb2l6ZShmdW5jdGlvbiAocHJvcCkge1xuICByZXR1cm4gcmVhY3RQcm9wc1JlZ2V4LnRlc3QocHJvcCkgfHwgcHJvcC5jaGFyQ29kZUF0KDApID09PSAxMTFcbiAgLyogbyAqL1xuICAmJiBwcm9wLmNoYXJDb2RlQXQoMSkgPT09IDExMFxuICAvKiBuICovXG4gICYmIHByb3AuY2hhckNvZGVBdCgyKSA8IDkxO1xufVxuLyogWisxICovXG4pO1xuXG5leHBvcnQgZGVmYXVsdCBpbmRleDtcbiIsImZ1bmN0aW9uIG1lbW9pemUoZm4pIHtcbiAgdmFyIGNhY2hlID0ge307XG4gIHJldHVybiBmdW5jdGlvbiAoYXJnKSB7XG4gICAgaWYgKGNhY2hlW2FyZ10gPT09IHVuZGVmaW5lZCkgY2FjaGVbYXJnXSA9IGZuKGFyZyk7XG4gICAgcmV0dXJuIGNhY2hlW2FyZ107XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IG1lbW9pemU7XG4iLCJcInVzZSBzdHJpY3RcIjtcblwidXNlIGNsaWVudFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG52YXIgX2NyZWF0ZVN2Z0ljb24gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWxzL2NyZWF0ZVN2Z0ljb25cIikpO1xudmFyIF9qc3hSdW50aW1lID0gcmVxdWlyZShcInJlYWN0L2pzeC1ydW50aW1lXCIpO1xudmFyIF9kZWZhdWx0ID0gZXhwb3J0cy5kZWZhdWx0ID0gKDAsIF9jcmVhdGVTdmdJY29uLmRlZmF1bHQpKCAvKiNfX1BVUkVfXyovKDAsIF9qc3hSdW50aW1lLmpzeCkoXCJjaXJjbGVcIiwge1xuICBjeDogXCIxMlwiLFxuICBjeTogXCIxMlwiLFxuICByOiBcIjhcIlxufSksICdGaWJlck1hbnVhbFJlY29yZCcpOyIsIlwidXNlIHN0cmljdFwiO1xuXCJ1c2UgY2xpZW50XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcbnZhciBfY3JlYXRlU3ZnSWNvbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbHMvY3JlYXRlU3ZnSWNvblwiKSk7XG52YXIgX2pzeFJ1bnRpbWUgPSByZXF1aXJlKFwicmVhY3QvanN4LXJ1bnRpbWVcIik7XG52YXIgX2RlZmF1bHQgPSBleHBvcnRzLmRlZmF1bHQgPSAoMCwgX2NyZWF0ZVN2Z0ljb24uZGVmYXVsdCkoIC8qI19fUFVSRV9fKi8oMCwgX2pzeFJ1bnRpbWUuanN4KShcInBhdGhcIiwge1xuICBkOiBcIk0xNS40MSA3LjQxIDE0IDZsLTYgNiA2IDYgMS40MS0xLjQxTDEwLjgzIDEyelwiXG59KSwgJ05hdmlnYXRlQmVmb3JlJyk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cInVzZSBjbGllbnRcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xudmFyIF9jcmVhdGVTdmdJY29uID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlscy9jcmVhdGVTdmdJY29uXCIpKTtcbnZhciBfanN4UnVudGltZSA9IHJlcXVpcmUoXCJyZWFjdC9qc3gtcnVudGltZVwiKTtcbnZhciBfZGVmYXVsdCA9IGV4cG9ydHMuZGVmYXVsdCA9ICgwLCBfY3JlYXRlU3ZnSWNvbi5kZWZhdWx0KSggLyojX19QVVJFX18qLygwLCBfanN4UnVudGltZS5qc3gpKFwicGF0aFwiLCB7XG4gIGQ6IFwiTTEwIDYgOC41OSA3LjQxIDEzLjE3IDEybC00LjU4IDQuNTlMMTAgMThsNi02elwiXG59KSwgJ05hdmlnYXRlTmV4dCcpOyIsImNvbnN0IHBpbmsgPSB7XG4gIDUwOiAnI2ZjZTRlYycsXG4gIDEwMDogJyNmOGJiZDAnLFxuICAyMDA6ICcjZjQ4ZmIxJyxcbiAgMzAwOiAnI2YwNjI5MicsXG4gIDQwMDogJyNlYzQwN2EnLFxuICA1MDA6ICcjZTkxZTYzJyxcbiAgNjAwOiAnI2Q4MWI2MCcsXG4gIDcwMDogJyNjMjE4NWInLFxuICA4MDA6ICcjYWQxNDU3JyxcbiAgOTAwOiAnIzg4MGU0ZicsXG4gIEExMDA6ICcjZmY4MGFiJyxcbiAgQTIwMDogJyNmZjQwODEnLFxuICBBNDAwOiAnI2Y1MDA1NycsXG4gIEE3MDA6ICcjYzUxMTYyJ1xufTtcbmV4cG9ydCBkZWZhdWx0IHBpbms7IiwiY29uc3QgZGVlcFB1cnBsZSA9IHtcbiAgNTA6ICcjZWRlN2Y2JyxcbiAgMTAwOiAnI2QxYzRlOScsXG4gIDIwMDogJyNiMzlkZGInLFxuICAzMDA6ICcjOTU3NWNkJyxcbiAgNDAwOiAnIzdlNTdjMicsXG4gIDUwMDogJyM2NzNhYjcnLFxuICA2MDA6ICcjNWUzNWIxJyxcbiAgNzAwOiAnIzUxMmRhOCcsXG4gIDgwMDogJyM0NTI3YTAnLFxuICA5MDA6ICcjMzExYjkyJyxcbiAgQTEwMDogJyNiMzg4ZmYnLFxuICBBMjAwOiAnIzdjNGRmZicsXG4gIEE0MDA6ICcjNjUxZmZmJyxcbiAgQTcwMDogJyM2MjAwZWEnXG59O1xuZXhwb3J0IGRlZmF1bHQgZGVlcFB1cnBsZTsiLCJjb25zdCBpbmRpZ28gPSB7XG4gIDUwOiAnI2U4ZWFmNicsXG4gIDEwMDogJyNjNWNhZTknLFxuICAyMDA6ICcjOWZhOGRhJyxcbiAgMzAwOiAnIzc5ODZjYicsXG4gIDQwMDogJyM1YzZiYzAnLFxuICA1MDA6ICcjM2Y1MWI1JyxcbiAgNjAwOiAnIzM5NDlhYicsXG4gIDcwMDogJyMzMDNmOWYnLFxuICA4MDA6ICcjMjgzNTkzJyxcbiAgOTAwOiAnIzFhMjM3ZScsXG4gIEExMDA6ICcjOGM5ZWZmJyxcbiAgQTIwMDogJyM1MzZkZmUnLFxuICBBNDAwOiAnIzNkNWFmZScsXG4gIEE3MDA6ICcjMzA0ZmZlJ1xufTtcbmV4cG9ydCBkZWZhdWx0IGluZGlnbzsiLCJjb25zdCBjeWFuID0ge1xuICA1MDogJyNlMGY3ZmEnLFxuICAxMDA6ICcjYjJlYmYyJyxcbiAgMjAwOiAnIzgwZGVlYScsXG4gIDMwMDogJyM0ZGQwZTEnLFxuICA0MDA6ICcjMjZjNmRhJyxcbiAgNTAwOiAnIzAwYmNkNCcsXG4gIDYwMDogJyMwMGFjYzEnLFxuICA3MDA6ICcjMDA5N2E3JyxcbiAgODAwOiAnIzAwODM4ZicsXG4gIDkwMDogJyMwMDYwNjQnLFxuICBBMTAwOiAnIzg0ZmZmZicsXG4gIEEyMDA6ICcjMThmZmZmJyxcbiAgQTQwMDogJyMwMGU1ZmYnLFxuICBBNzAwOiAnIzAwYjhkNCdcbn07XG5leHBvcnQgZGVmYXVsdCBjeWFuOyIsImNvbnN0IHRlYWwgPSB7XG4gIDUwOiAnI2UwZjJmMScsXG4gIDEwMDogJyNiMmRmZGInLFxuICAyMDA6ICcjODBjYmM0JyxcbiAgMzAwOiAnIzRkYjZhYycsXG4gIDQwMDogJyMyNmE2OWEnLFxuICA1MDA6ICcjMDA5Njg4JyxcbiAgNjAwOiAnIzAwODk3YicsXG4gIDcwMDogJyMwMDc5NmInLFxuICA4MDA6ICcjMDA2OTVjJyxcbiAgOTAwOiAnIzAwNGQ0MCcsXG4gIEExMDA6ICcjYTdmZmViJyxcbiAgQTIwMDogJyM2NGZmZGEnLFxuICBBNDAwOiAnIzFkZTliNicsXG4gIEE3MDA6ICcjMDBiZmE1J1xufTtcbmV4cG9ydCBkZWZhdWx0IHRlYWw7IiwiY29uc3QgbGlnaHRHcmVlbiA9IHtcbiAgNTA6ICcjZjFmOGU5JyxcbiAgMTAwOiAnI2RjZWRjOCcsXG4gIDIwMDogJyNjNWUxYTUnLFxuICAzMDA6ICcjYWVkNTgxJyxcbiAgNDAwOiAnIzljY2M2NScsXG4gIDUwMDogJyM4YmMzNGEnLFxuICA2MDA6ICcjN2NiMzQyJyxcbiAgNzAwOiAnIzY4OWYzOCcsXG4gIDgwMDogJyM1NThiMmYnLFxuICA5MDA6ICcjMzM2OTFlJyxcbiAgQTEwMDogJyNjY2ZmOTAnLFxuICBBMjAwOiAnI2IyZmY1OScsXG4gIEE0MDA6ICcjNzZmZjAzJyxcbiAgQTcwMDogJyM2NGRkMTcnXG59O1xuZXhwb3J0IGRlZmF1bHQgbGlnaHRHcmVlbjsiLCJjb25zdCBsaW1lID0ge1xuICA1MDogJyNmOWZiZTcnLFxuICAxMDA6ICcjZjBmNGMzJyxcbiAgMjAwOiAnI2U2ZWU5YycsXG4gIDMwMDogJyNkY2U3NzUnLFxuICA0MDA6ICcjZDRlMTU3JyxcbiAgNTAwOiAnI2NkZGMzOScsXG4gIDYwMDogJyNjMGNhMzMnLFxuICA3MDA6ICcjYWZiNDJiJyxcbiAgODAwOiAnIzllOWQyNCcsXG4gIDkwMDogJyM4Mjc3MTcnLFxuICBBMTAwOiAnI2Y0ZmY4MScsXG4gIEEyMDA6ICcjZWVmZjQxJyxcbiAgQTQwMDogJyNjNmZmMDAnLFxuICBBNzAwOiAnI2FlZWEwMCdcbn07XG5leHBvcnQgZGVmYXVsdCBsaW1lOyIsImNvbnN0IHllbGxvdyA9IHtcbiAgNTA6ICcjZmZmZGU3JyxcbiAgMTAwOiAnI2ZmZjljNCcsXG4gIDIwMDogJyNmZmY1OWQnLFxuICAzMDA6ICcjZmZmMTc2JyxcbiAgNDAwOiAnI2ZmZWU1OCcsXG4gIDUwMDogJyNmZmViM2InLFxuICA2MDA6ICcjZmRkODM1JyxcbiAgNzAwOiAnI2ZiYzAyZCcsXG4gIDgwMDogJyNmOWE4MjUnLFxuICA5MDA6ICcjZjU3ZjE3JyxcbiAgQTEwMDogJyNmZmZmOGQnLFxuICBBMjAwOiAnI2ZmZmYwMCcsXG4gIEE0MDA6ICcjZmZlYTAwJyxcbiAgQTcwMDogJyNmZmQ2MDAnXG59O1xuZXhwb3J0IGRlZmF1bHQgeWVsbG93OyIsImNvbnN0IGFtYmVyID0ge1xuICA1MDogJyNmZmY4ZTEnLFxuICAxMDA6ICcjZmZlY2IzJyxcbiAgMjAwOiAnI2ZmZTA4MicsXG4gIDMwMDogJyNmZmQ1NGYnLFxuICA0MDA6ICcjZmZjYTI4JyxcbiAgNTAwOiAnI2ZmYzEwNycsXG4gIDYwMDogJyNmZmIzMDAnLFxuICA3MDA6ICcjZmZhMDAwJyxcbiAgODAwOiAnI2ZmOGYwMCcsXG4gIDkwMDogJyNmZjZmMDAnLFxuICBBMTAwOiAnI2ZmZTU3ZicsXG4gIEEyMDA6ICcjZmZkNzQwJyxcbiAgQTQwMDogJyNmZmM0MDAnLFxuICBBNzAwOiAnI2ZmYWIwMCdcbn07XG5leHBvcnQgZGVmYXVsdCBhbWJlcjsiLCJjb25zdCBkZWVwT3JhbmdlID0ge1xuICA1MDogJyNmYmU5ZTcnLFxuICAxMDA6ICcjZmZjY2JjJyxcbiAgMjAwOiAnI2ZmYWI5MScsXG4gIDMwMDogJyNmZjhhNjUnLFxuICA0MDA6ICcjZmY3MDQzJyxcbiAgNTAwOiAnI2ZmNTcyMicsXG4gIDYwMDogJyNmNDUxMWUnLFxuICA3MDA6ICcjZTY0YTE5JyxcbiAgODAwOiAnI2Q4NDMxNScsXG4gIDkwMDogJyNiZjM2MGMnLFxuICBBMTAwOiAnI2ZmOWU4MCcsXG4gIEEyMDA6ICcjZmY2ZTQwJyxcbiAgQTQwMDogJyNmZjNkMDAnLFxuICBBNzAwOiAnI2RkMmMwMCdcbn07XG5leHBvcnQgZGVmYXVsdCBkZWVwT3JhbmdlOyIsImNvbnN0IGJyb3duID0ge1xuICA1MDogJyNlZmViZTknLFxuICAxMDA6ICcjZDdjY2M4JyxcbiAgMjAwOiAnI2JjYWFhNCcsXG4gIDMwMDogJyNhMTg4N2YnLFxuICA0MDA6ICcjOGQ2ZTYzJyxcbiAgNTAwOiAnIzc5NTU0OCcsXG4gIDYwMDogJyM2ZDRjNDEnLFxuICA3MDA6ICcjNWQ0MDM3JyxcbiAgODAwOiAnIzRlMzQyZScsXG4gIDkwMDogJyMzZTI3MjMnLFxuICBBMTAwOiAnI2Q3Y2NjOCcsXG4gIEEyMDA6ICcjYmNhYWE0JyxcbiAgQTQwMDogJyM4ZDZlNjMnLFxuICBBNzAwOiAnIzVkNDAzNydcbn07XG5leHBvcnQgZGVmYXVsdCBicm93bjsiLCJjb25zdCBibHVlR3JleSA9IHtcbiAgNTA6ICcjZWNlZmYxJyxcbiAgMTAwOiAnI2NmZDhkYycsXG4gIDIwMDogJyNiMGJlYzUnLFxuICAzMDA6ICcjOTBhNGFlJyxcbiAgNDAwOiAnIzc4OTA5YycsXG4gIDUwMDogJyM2MDdkOGInLFxuICA2MDA6ICcjNTQ2ZTdhJyxcbiAgNzAwOiAnIzQ1NWE2NCcsXG4gIDgwMDogJyMzNzQ3NGYnLFxuICA5MDA6ICcjMjYzMjM4JyxcbiAgQTEwMDogJyNjZmQ4ZGMnLFxuICBBMjAwOiAnI2IwYmVjNScsXG4gIEE0MDA6ICcjNzg5MDljJyxcbiAgQTcwMDogJyM0NTVhNjQnXG59O1xuZXhwb3J0IGRlZmF1bHQgYmx1ZUdyZXk7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImRlZmF1bHRQcm9wc1wiLCBcIm1peGluc1wiLCBcIm92ZXJyaWRlc1wiLCBcInBhbGV0dGVcIiwgXCJwcm9wc1wiLCBcInN0eWxlT3ZlcnJpZGVzXCJdLFxuICBfZXhjbHVkZWQyID0gW1widHlwZVwiLCBcIm1vZGVcIl07XG5pbXBvcnQgeyBjcmVhdGVCcmVha3BvaW50cywgY3JlYXRlU3BhY2luZyB9IGZyb20gJ0BtdWkvc3lzdGVtJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGFkYXB0VjRUaGVtZShpbnB1dFRoZW1lKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgY29uc29sZS53YXJuKFsnTVVJOiBhZGFwdFY0VGhlbWUoKSBpcyBkZXByZWNhdGVkLicsICdGb2xsb3cgdGhlIHVwZ3JhZGUgZ3VpZGUgb24gaHR0cHM6Ly9tdWkuY29tL3IvbWlncmF0aW9uLXY0I3RoZW1lLiddLmpvaW4oJ1xcbicpKTtcbiAgfVxuICBjb25zdCB7XG4gICAgICBkZWZhdWx0UHJvcHMgPSB7fSxcbiAgICAgIG1peGlucyA9IHt9LFxuICAgICAgb3ZlcnJpZGVzID0ge30sXG4gICAgICBwYWxldHRlID0ge30sXG4gICAgICBwcm9wcyA9IHt9LFxuICAgICAgc3R5bGVPdmVycmlkZXMgPSB7fVxuICAgIH0gPSBpbnB1dFRoZW1lLFxuICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoaW5wdXRUaGVtZSwgX2V4Y2x1ZGVkKTtcbiAgY29uc3QgdGhlbWUgPSBfZXh0ZW5kcyh7fSwgb3RoZXIsIHtcbiAgICBjb21wb25lbnRzOiB7fVxuICB9KTtcblxuICAvLyBkZWZhdWx0IHByb3BzXG4gIE9iamVjdC5rZXlzKGRlZmF1bHRQcm9wcykuZm9yRWFjaChjb21wb25lbnQgPT4ge1xuICAgIGNvbnN0IGNvbXBvbmVudFZhbHVlID0gdGhlbWUuY29tcG9uZW50c1tjb21wb25lbnRdIHx8IHt9O1xuICAgIGNvbXBvbmVudFZhbHVlLmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wc1tjb21wb25lbnRdO1xuICAgIHRoZW1lLmNvbXBvbmVudHNbY29tcG9uZW50XSA9IGNvbXBvbmVudFZhbHVlO1xuICB9KTtcbiAgT2JqZWN0LmtleXMocHJvcHMpLmZvckVhY2goY29tcG9uZW50ID0+IHtcbiAgICBjb25zdCBjb21wb25lbnRWYWx1ZSA9IHRoZW1lLmNvbXBvbmVudHNbY29tcG9uZW50XSB8fCB7fTtcbiAgICBjb21wb25lbnRWYWx1ZS5kZWZhdWx0UHJvcHMgPSBwcm9wc1tjb21wb25lbnRdO1xuICAgIHRoZW1lLmNvbXBvbmVudHNbY29tcG9uZW50XSA9IGNvbXBvbmVudFZhbHVlO1xuICB9KTtcblxuICAvLyBDU1Mgb3ZlcnJpZGVzXG4gIE9iamVjdC5rZXlzKHN0eWxlT3ZlcnJpZGVzKS5mb3JFYWNoKGNvbXBvbmVudCA9PiB7XG4gICAgY29uc3QgY29tcG9uZW50VmFsdWUgPSB0aGVtZS5jb21wb25lbnRzW2NvbXBvbmVudF0gfHwge307XG4gICAgY29tcG9uZW50VmFsdWUuc3R5bGVPdmVycmlkZXMgPSBzdHlsZU92ZXJyaWRlc1tjb21wb25lbnRdO1xuICAgIHRoZW1lLmNvbXBvbmVudHNbY29tcG9uZW50XSA9IGNvbXBvbmVudFZhbHVlO1xuICB9KTtcbiAgT2JqZWN0LmtleXMob3ZlcnJpZGVzKS5mb3JFYWNoKGNvbXBvbmVudCA9PiB7XG4gICAgY29uc3QgY29tcG9uZW50VmFsdWUgPSB0aGVtZS5jb21wb25lbnRzW2NvbXBvbmVudF0gfHwge307XG4gICAgY29tcG9uZW50VmFsdWUuc3R5bGVPdmVycmlkZXMgPSBvdmVycmlkZXNbY29tcG9uZW50XTtcbiAgICB0aGVtZS5jb21wb25lbnRzW2NvbXBvbmVudF0gPSBjb21wb25lbnRWYWx1ZTtcbiAgfSk7XG5cbiAgLy8gdGhlbWUuc3BhY2luZ1xuICB0aGVtZS5zcGFjaW5nID0gY3JlYXRlU3BhY2luZyhpbnB1dFRoZW1lLnNwYWNpbmcpO1xuXG4gIC8vIHRoZW1lLm1peGlucy5ndXR0ZXJzXG4gIGNvbnN0IGJyZWFrcG9pbnRzID0gY3JlYXRlQnJlYWtwb2ludHMoaW5wdXRUaGVtZS5icmVha3BvaW50cyB8fCB7fSk7XG4gIGNvbnN0IHNwYWNpbmcgPSB0aGVtZS5zcGFjaW5nO1xuICB0aGVtZS5taXhpbnMgPSBfZXh0ZW5kcyh7XG4gICAgZ3V0dGVyczogKHN0eWxlcyA9IHt9KSA9PiB7XG4gICAgICByZXR1cm4gX2V4dGVuZHMoe1xuICAgICAgICBwYWRkaW5nTGVmdDogc3BhY2luZygyKSxcbiAgICAgICAgcGFkZGluZ1JpZ2h0OiBzcGFjaW5nKDIpXG4gICAgICB9LCBzdHlsZXMsIHtcbiAgICAgICAgW2JyZWFrcG9pbnRzLnVwKCdzbScpXTogX2V4dGVuZHMoe1xuICAgICAgICAgIHBhZGRpbmdMZWZ0OiBzcGFjaW5nKDMpLFxuICAgICAgICAgIHBhZGRpbmdSaWdodDogc3BhY2luZygzKVxuICAgICAgICB9LCBzdHlsZXNbYnJlYWtwb2ludHMudXAoJ3NtJyldKVxuICAgICAgfSk7XG4gICAgfVxuICB9LCBtaXhpbnMpO1xuICBjb25zdCB7XG4gICAgICB0eXBlOiB0eXBlSW5wdXQsXG4gICAgICBtb2RlOiBtb2RlSW5wdXRcbiAgICB9ID0gcGFsZXR0ZSxcbiAgICBwYWxldHRlUmVzdCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHBhbGV0dGUsIF9leGNsdWRlZDIpO1xuICBjb25zdCBmaW5hbE1vZGUgPSBtb2RlSW5wdXQgfHwgdHlwZUlucHV0IHx8ICdsaWdodCc7XG4gIHRoZW1lLnBhbGV0dGUgPSBfZXh0ZW5kcyh7XG4gICAgLy8gdGhlbWUucGFsZXR0ZS50ZXh0LmhpbnRcbiAgICB0ZXh0OiB7XG4gICAgICBoaW50OiBmaW5hbE1vZGUgPT09ICdkYXJrJyA/ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNSknIDogJ3JnYmEoMCwgMCwgMCwgMC4zOCknXG4gICAgfSxcbiAgICBtb2RlOiBmaW5hbE1vZGUsXG4gICAgdHlwZTogZmluYWxNb2RlXG4gIH0sIHBhbGV0dGVSZXN0KTtcbiAgcmV0dXJuIHRoZW1lO1xufSIsImltcG9ydCBfZm9ybWF0TXVpRXJyb3JNZXNzYWdlIGZyb20gXCJAbXVpL3V0aWxzL2Zvcm1hdE11aUVycm9yTWVzc2FnZVwiO1xuLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25hbWluZy1jb252ZW50aW9uICovXG5pbXBvcnQgY2xhbXAgZnJvbSAnQG11aS91dGlscy9jbGFtcCc7XG4vKipcbiAqIFJldHVybnMgYSBudW1iZXIgd2hvc2UgdmFsdWUgaXMgbGltaXRlZCB0byB0aGUgZ2l2ZW4gcmFuZ2UuXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgVGhlIHZhbHVlIHRvIGJlIGNsYW1wZWRcbiAqIEBwYXJhbSB7bnVtYmVyfSBtaW4gVGhlIGxvd2VyIGJvdW5kYXJ5IG9mIHRoZSBvdXRwdXQgcmFuZ2VcbiAqIEBwYXJhbSB7bnVtYmVyfSBtYXggVGhlIHVwcGVyIGJvdW5kYXJ5IG9mIHRoZSBvdXRwdXQgcmFuZ2VcbiAqIEByZXR1cm5zIHtudW1iZXJ9IEEgbnVtYmVyIGluIHRoZSByYW5nZSBbbWluLCBtYXhdXG4gKi9cbmZ1bmN0aW9uIGNsYW1wV3JhcHBlcih2YWx1ZSwgbWluID0gMCwgbWF4ID0gMSkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmICh2YWx1ZSA8IG1pbiB8fCB2YWx1ZSA+IG1heCkge1xuICAgICAgY29uc29sZS5lcnJvcihgTVVJOiBUaGUgdmFsdWUgcHJvdmlkZWQgJHt2YWx1ZX0gaXMgb3V0IG9mIHJhbmdlIFske21pbn0sICR7bWF4fV0uYCk7XG4gICAgfVxuICB9XG4gIHJldHVybiBjbGFtcCh2YWx1ZSwgbWluLCBtYXgpO1xufVxuXG4vKipcbiAqIENvbnZlcnRzIGEgY29sb3IgZnJvbSBDU1MgaGV4IGZvcm1hdCB0byBDU1MgcmdiIGZvcm1hdC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBjb2xvciAtIEhleCBjb2xvciwgaS5lLiAjbm5uIG9yICNubm5ubm5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IEEgQ1NTIHJnYiBjb2xvciBzdHJpbmdcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGhleFRvUmdiKGNvbG9yKSB7XG4gIGNvbG9yID0gY29sb3Iuc2xpY2UoMSk7XG4gIGNvbnN0IHJlID0gbmV3IFJlZ0V4cChgLnsxLCR7Y29sb3IubGVuZ3RoID49IDYgPyAyIDogMX19YCwgJ2cnKTtcbiAgbGV0IGNvbG9ycyA9IGNvbG9yLm1hdGNoKHJlKTtcbiAgaWYgKGNvbG9ycyAmJiBjb2xvcnNbMF0ubGVuZ3RoID09PSAxKSB7XG4gICAgY29sb3JzID0gY29sb3JzLm1hcChuID0+IG4gKyBuKTtcbiAgfVxuICByZXR1cm4gY29sb3JzID8gYHJnYiR7Y29sb3JzLmxlbmd0aCA9PT0gNCA/ICdhJyA6ICcnfSgke2NvbG9ycy5tYXAoKG4sIGluZGV4KSA9PiB7XG4gICAgcmV0dXJuIGluZGV4IDwgMyA/IHBhcnNlSW50KG4sIDE2KSA6IE1hdGgucm91bmQocGFyc2VJbnQobiwgMTYpIC8gMjU1ICogMTAwMCkgLyAxMDAwO1xuICB9KS5qb2luKCcsICcpfSlgIDogJyc7XG59XG5mdW5jdGlvbiBpbnRUb0hleChpbnQpIHtcbiAgY29uc3QgaGV4ID0gaW50LnRvU3RyaW5nKDE2KTtcbiAgcmV0dXJuIGhleC5sZW5ndGggPT09IDEgPyBgMCR7aGV4fWAgOiBoZXg7XG59XG5cbi8qKlxuICogUmV0dXJucyBhbiBvYmplY3Qgd2l0aCB0aGUgdHlwZSBhbmQgdmFsdWVzIG9mIGEgY29sb3IuXG4gKlxuICogTm90ZTogRG9lcyBub3Qgc3VwcG9ydCByZ2IgJSB2YWx1ZXMuXG4gKiBAcGFyYW0ge3N0cmluZ30gY29sb3IgLSBDU1MgY29sb3IsIGkuZS4gb25lIG9mOiAjbm5uLCAjbm5ubm5uLCByZ2IoKSwgcmdiYSgpLCBoc2woKSwgaHNsYSgpLCBjb2xvcigpXG4gKiBAcmV0dXJucyB7b2JqZWN0fSAtIEEgTVVJIGNvbG9yIG9iamVjdDoge3R5cGU6IHN0cmluZywgdmFsdWVzOiBudW1iZXJbXX1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlY29tcG9zZUNvbG9yKGNvbG9yKSB7XG4gIC8vIElkZW1wb3RlbnRcbiAgaWYgKGNvbG9yLnR5cGUpIHtcbiAgICByZXR1cm4gY29sb3I7XG4gIH1cbiAgaWYgKGNvbG9yLmNoYXJBdCgwKSA9PT0gJyMnKSB7XG4gICAgcmV0dXJuIGRlY29tcG9zZUNvbG9yKGhleFRvUmdiKGNvbG9yKSk7XG4gIH1cbiAgY29uc3QgbWFya2VyID0gY29sb3IuaW5kZXhPZignKCcpO1xuICBjb25zdCB0eXBlID0gY29sb3Iuc3Vic3RyaW5nKDAsIG1hcmtlcik7XG4gIGlmIChbJ3JnYicsICdyZ2JhJywgJ2hzbCcsICdoc2xhJywgJ2NvbG9yJ10uaW5kZXhPZih0eXBlKSA9PT0gLTEpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gYE1VSTogVW5zdXBwb3J0ZWQgXFxgJHtjb2xvcn1cXGAgY29sb3IuXG5UaGUgZm9sbG93aW5nIGZvcm1hdHMgYXJlIHN1cHBvcnRlZDogI25ubiwgI25ubm5ubiwgcmdiKCksIHJnYmEoKSwgaHNsKCksIGhzbGEoKSwgY29sb3IoKS5gIDogX2Zvcm1hdE11aUVycm9yTWVzc2FnZSg5LCBjb2xvcikpO1xuICB9XG4gIGxldCB2YWx1ZXMgPSBjb2xvci5zdWJzdHJpbmcobWFya2VyICsgMSwgY29sb3IubGVuZ3RoIC0gMSk7XG4gIGxldCBjb2xvclNwYWNlO1xuICBpZiAodHlwZSA9PT0gJ2NvbG9yJykge1xuICAgIHZhbHVlcyA9IHZhbHVlcy5zcGxpdCgnICcpO1xuICAgIGNvbG9yU3BhY2UgPSB2YWx1ZXMuc2hpZnQoKTtcbiAgICBpZiAodmFsdWVzLmxlbmd0aCA9PT0gNCAmJiB2YWx1ZXNbM10uY2hhckF0KDApID09PSAnLycpIHtcbiAgICAgIHZhbHVlc1szXSA9IHZhbHVlc1szXS5zbGljZSgxKTtcbiAgICB9XG4gICAgaWYgKFsnc3JnYicsICdkaXNwbGF5LXAzJywgJ2E5OC1yZ2InLCAncHJvcGhvdG8tcmdiJywgJ3JlYy0yMDIwJ10uaW5kZXhPZihjb2xvclNwYWNlKSA9PT0gLTEpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBgTVVJOiB1bnN1cHBvcnRlZCBcXGAke2NvbG9yU3BhY2V9XFxgIGNvbG9yIHNwYWNlLlxuVGhlIGZvbGxvd2luZyBjb2xvciBzcGFjZXMgYXJlIHN1cHBvcnRlZDogc3JnYiwgZGlzcGxheS1wMywgYTk4LXJnYiwgcHJvcGhvdG8tcmdiLCByZWMtMjAyMC5gIDogX2Zvcm1hdE11aUVycm9yTWVzc2FnZSgxMCwgY29sb3JTcGFjZSkpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB2YWx1ZXMgPSB2YWx1ZXMuc3BsaXQoJywnKTtcbiAgfVxuICB2YWx1ZXMgPSB2YWx1ZXMubWFwKHZhbHVlID0+IHBhcnNlRmxvYXQodmFsdWUpKTtcbiAgcmV0dXJuIHtcbiAgICB0eXBlLFxuICAgIHZhbHVlcyxcbiAgICBjb2xvclNwYWNlXG4gIH07XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGNoYW5uZWwgY3JlYXRlZCBmcm9tIHRoZSBpbnB1dCBjb2xvci5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gY29sb3IgLSBDU1MgY29sb3IsIGkuZS4gb25lIG9mOiAjbm5uLCAjbm5ubm5uLCByZ2IoKSwgcmdiYSgpLCBoc2woKSwgaHNsYSgpLCBjb2xvcigpXG4gKiBAcmV0dXJucyB7c3RyaW5nfSAtIFRoZSBjaGFubmVsIGZvciB0aGUgY29sb3IsIHRoYXQgY2FuIGJlIHVzZWQgaW4gcmdiYSBvciBoc2xhIGNvbG9yc1xuICovXG5leHBvcnQgY29uc3QgY29sb3JDaGFubmVsID0gY29sb3IgPT4ge1xuICBjb25zdCBkZWNvbXBvc2VkQ29sb3IgPSBkZWNvbXBvc2VDb2xvcihjb2xvcik7XG4gIHJldHVybiBkZWNvbXBvc2VkQ29sb3IudmFsdWVzLnNsaWNlKDAsIDMpLm1hcCgodmFsLCBpZHgpID0+IGRlY29tcG9zZWRDb2xvci50eXBlLmluZGV4T2YoJ2hzbCcpICE9PSAtMSAmJiBpZHggIT09IDAgPyBgJHt2YWx9JWAgOiB2YWwpLmpvaW4oJyAnKTtcbn07XG5leHBvcnQgY29uc3QgcHJpdmF0ZV9zYWZlQ29sb3JDaGFubmVsID0gKGNvbG9yLCB3YXJuaW5nKSA9PiB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGNvbG9yQ2hhbm5lbChjb2xvcik7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgaWYgKHdhcm5pbmcgJiYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgY29uc29sZS53YXJuKHdhcm5pbmcpO1xuICAgIH1cbiAgICByZXR1cm4gY29sb3I7XG4gIH1cbn07XG5cbi8qKlxuICogQ29udmVydHMgYSBjb2xvciBvYmplY3Qgd2l0aCB0eXBlIGFuZCB2YWx1ZXMgdG8gYSBzdHJpbmcuXG4gKiBAcGFyYW0ge29iamVjdH0gY29sb3IgLSBEZWNvbXBvc2VkIGNvbG9yXG4gKiBAcGFyYW0ge3N0cmluZ30gY29sb3IudHlwZSAtIE9uZSBvZjogJ3JnYicsICdyZ2JhJywgJ2hzbCcsICdoc2xhJywgJ2NvbG9yJ1xuICogQHBhcmFtIHthcnJheX0gY29sb3IudmFsdWVzIC0gW24sbixuXSBvciBbbixuLG4sbl1cbiAqIEByZXR1cm5zIHtzdHJpbmd9IEEgQ1NTIGNvbG9yIHN0cmluZ1xuICovXG5leHBvcnQgZnVuY3Rpb24gcmVjb21wb3NlQ29sb3IoY29sb3IpIHtcbiAgY29uc3Qge1xuICAgIHR5cGUsXG4gICAgY29sb3JTcGFjZVxuICB9ID0gY29sb3I7XG4gIGxldCB7XG4gICAgdmFsdWVzXG4gIH0gPSBjb2xvcjtcbiAgaWYgKHR5cGUuaW5kZXhPZigncmdiJykgIT09IC0xKSB7XG4gICAgLy8gT25seSBjb252ZXJ0IHRoZSBmaXJzdCAzIHZhbHVlcyB0byBpbnQgKGkuZS4gbm90IGFscGhhKVxuICAgIHZhbHVlcyA9IHZhbHVlcy5tYXAoKG4sIGkpID0+IGkgPCAzID8gcGFyc2VJbnQobiwgMTApIDogbik7XG4gIH0gZWxzZSBpZiAodHlwZS5pbmRleE9mKCdoc2wnKSAhPT0gLTEpIHtcbiAgICB2YWx1ZXNbMV0gPSBgJHt2YWx1ZXNbMV19JWA7XG4gICAgdmFsdWVzWzJdID0gYCR7dmFsdWVzWzJdfSVgO1xuICB9XG4gIGlmICh0eXBlLmluZGV4T2YoJ2NvbG9yJykgIT09IC0xKSB7XG4gICAgdmFsdWVzID0gYCR7Y29sb3JTcGFjZX0gJHt2YWx1ZXMuam9pbignICcpfWA7XG4gIH0gZWxzZSB7XG4gICAgdmFsdWVzID0gYCR7dmFsdWVzLmpvaW4oJywgJyl9YDtcbiAgfVxuICByZXR1cm4gYCR7dHlwZX0oJHt2YWx1ZXN9KWA7XG59XG5cbi8qKlxuICogQ29udmVydHMgYSBjb2xvciBmcm9tIENTUyByZ2IgZm9ybWF0IHRvIENTUyBoZXggZm9ybWF0LlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbG9yIC0gUkdCIGNvbG9yLCBpLmUuIHJnYihuLCBuLCBuKVxuICogQHJldHVybnMge3N0cmluZ30gQSBDU1MgcmdiIGNvbG9yIHN0cmluZywgaS5lLiAjbm5ubm5uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZ2JUb0hleChjb2xvcikge1xuICAvLyBJZGVtcG90ZW50XG4gIGlmIChjb2xvci5pbmRleE9mKCcjJykgPT09IDApIHtcbiAgICByZXR1cm4gY29sb3I7XG4gIH1cbiAgY29uc3Qge1xuICAgIHZhbHVlc1xuICB9ID0gZGVjb21wb3NlQ29sb3IoY29sb3IpO1xuICByZXR1cm4gYCMke3ZhbHVlcy5tYXAoKG4sIGkpID0+IGludFRvSGV4KGkgPT09IDMgPyBNYXRoLnJvdW5kKDI1NSAqIG4pIDogbikpLmpvaW4oJycpfWA7XG59XG5cbi8qKlxuICogQ29udmVydHMgYSBjb2xvciBmcm9tIGhzbCBmb3JtYXQgdG8gcmdiIGZvcm1hdC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBjb2xvciAtIEhTTCBjb2xvciB2YWx1ZXNcbiAqIEByZXR1cm5zIHtzdHJpbmd9IHJnYiBjb2xvciB2YWx1ZXNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGhzbFRvUmdiKGNvbG9yKSB7XG4gIGNvbG9yID0gZGVjb21wb3NlQ29sb3IoY29sb3IpO1xuICBjb25zdCB7XG4gICAgdmFsdWVzXG4gIH0gPSBjb2xvcjtcbiAgY29uc3QgaCA9IHZhbHVlc1swXTtcbiAgY29uc3QgcyA9IHZhbHVlc1sxXSAvIDEwMDtcbiAgY29uc3QgbCA9IHZhbHVlc1syXSAvIDEwMDtcbiAgY29uc3QgYSA9IHMgKiBNYXRoLm1pbihsLCAxIC0gbCk7XG4gIGNvbnN0IGYgPSAobiwgayA9IChuICsgaCAvIDMwKSAlIDEyKSA9PiBsIC0gYSAqIE1hdGgubWF4KE1hdGgubWluKGsgLSAzLCA5IC0gaywgMSksIC0xKTtcbiAgbGV0IHR5cGUgPSAncmdiJztcbiAgY29uc3QgcmdiID0gW01hdGgucm91bmQoZigwKSAqIDI1NSksIE1hdGgucm91bmQoZig4KSAqIDI1NSksIE1hdGgucm91bmQoZig0KSAqIDI1NSldO1xuICBpZiAoY29sb3IudHlwZSA9PT0gJ2hzbGEnKSB7XG4gICAgdHlwZSArPSAnYSc7XG4gICAgcmdiLnB1c2godmFsdWVzWzNdKTtcbiAgfVxuICByZXR1cm4gcmVjb21wb3NlQ29sb3Ioe1xuICAgIHR5cGUsXG4gICAgdmFsdWVzOiByZ2JcbiAgfSk7XG59XG4vKipcbiAqIFRoZSByZWxhdGl2ZSBicmlnaHRuZXNzIG9mIGFueSBwb2ludCBpbiBhIGNvbG9yIHNwYWNlLFxuICogbm9ybWFsaXplZCB0byAwIGZvciBkYXJrZXN0IGJsYWNrIGFuZCAxIGZvciBsaWdodGVzdCB3aGl0ZS5cbiAqXG4gKiBGb3JtdWxhOiBodHRwczovL3d3dy53My5vcmcvVFIvV0NBRzIwLVRFQ0hTL0cxNy5odG1sI0cxNy10ZXN0c1xuICogQHBhcmFtIHtzdHJpbmd9IGNvbG9yIC0gQ1NTIGNvbG9yLCBpLmUuIG9uZSBvZjogI25ubiwgI25ubm5ubiwgcmdiKCksIHJnYmEoKSwgaHNsKCksIGhzbGEoKSwgY29sb3IoKVxuICogQHJldHVybnMge251bWJlcn0gVGhlIHJlbGF0aXZlIGJyaWdodG5lc3Mgb2YgdGhlIGNvbG9yIGluIHRoZSByYW5nZSAwIC0gMVxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0THVtaW5hbmNlKGNvbG9yKSB7XG4gIGNvbG9yID0gZGVjb21wb3NlQ29sb3IoY29sb3IpO1xuICBsZXQgcmdiID0gY29sb3IudHlwZSA9PT0gJ2hzbCcgfHwgY29sb3IudHlwZSA9PT0gJ2hzbGEnID8gZGVjb21wb3NlQ29sb3IoaHNsVG9SZ2IoY29sb3IpKS52YWx1ZXMgOiBjb2xvci52YWx1ZXM7XG4gIHJnYiA9IHJnYi5tYXAodmFsID0+IHtcbiAgICBpZiAoY29sb3IudHlwZSAhPT0gJ2NvbG9yJykge1xuICAgICAgdmFsIC89IDI1NTsgLy8gbm9ybWFsaXplZFxuICAgIH1cbiAgICByZXR1cm4gdmFsIDw9IDAuMDM5MjggPyB2YWwgLyAxMi45MiA6ICgodmFsICsgMC4wNTUpIC8gMS4wNTUpICoqIDIuNDtcbiAgfSk7XG5cbiAgLy8gVHJ1bmNhdGUgYXQgMyBkaWdpdHNcbiAgcmV0dXJuIE51bWJlcigoMC4yMTI2ICogcmdiWzBdICsgMC43MTUyICogcmdiWzFdICsgMC4wNzIyICogcmdiWzJdKS50b0ZpeGVkKDMpKTtcbn1cblxuLyoqXG4gKiBDYWxjdWxhdGVzIHRoZSBjb250cmFzdCByYXRpbyBiZXR3ZWVuIHR3byBjb2xvcnMuXG4gKlxuICogRm9ybXVsYTogaHR0cHM6Ly93d3cudzMub3JnL1RSL1dDQUcyMC1URUNIUy9HMTcuaHRtbCNHMTctdGVzdHNcbiAqIEBwYXJhbSB7c3RyaW5nfSBmb3JlZ3JvdW5kIC0gQ1NTIGNvbG9yLCBpLmUuIG9uZSBvZjogI25ubiwgI25ubm5ubiwgcmdiKCksIHJnYmEoKSwgaHNsKCksIGhzbGEoKVxuICogQHBhcmFtIHtzdHJpbmd9IGJhY2tncm91bmQgLSBDU1MgY29sb3IsIGkuZS4gb25lIG9mOiAjbm5uLCAjbm5ubm5uLCByZ2IoKSwgcmdiYSgpLCBoc2woKSwgaHNsYSgpXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBBIGNvbnRyYXN0IHJhdGlvIHZhbHVlIGluIHRoZSByYW5nZSAwIC0gMjEuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRDb250cmFzdFJhdGlvKGZvcmVncm91bmQsIGJhY2tncm91bmQpIHtcbiAgY29uc3QgbHVtQSA9IGdldEx1bWluYW5jZShmb3JlZ3JvdW5kKTtcbiAgY29uc3QgbHVtQiA9IGdldEx1bWluYW5jZShiYWNrZ3JvdW5kKTtcbiAgcmV0dXJuIChNYXRoLm1heChsdW1BLCBsdW1CKSArIDAuMDUpIC8gKE1hdGgubWluKGx1bUEsIGx1bUIpICsgMC4wNSk7XG59XG5cbi8qKlxuICogU2V0cyB0aGUgYWJzb2x1dGUgdHJhbnNwYXJlbmN5IG9mIGEgY29sb3IuXG4gKiBBbnkgZXhpc3RpbmcgYWxwaGEgdmFsdWVzIGFyZSBvdmVyd3JpdHRlbi5cbiAqIEBwYXJhbSB7c3RyaW5nfSBjb2xvciAtIENTUyBjb2xvciwgaS5lLiBvbmUgb2Y6ICNubm4sICNubm5ubm4sIHJnYigpLCByZ2JhKCksIGhzbCgpLCBoc2xhKCksIGNvbG9yKClcbiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZSAtIHZhbHVlIHRvIHNldCB0aGUgYWxwaGEgY2hhbm5lbCB0byBpbiB0aGUgcmFuZ2UgMCAtIDFcbiAqIEByZXR1cm5zIHtzdHJpbmd9IEEgQ1NTIGNvbG9yIHN0cmluZy4gSGV4IGlucHV0IHZhbHVlcyBhcmUgcmV0dXJuZWQgYXMgcmdiXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhbHBoYShjb2xvciwgdmFsdWUpIHtcbiAgY29sb3IgPSBkZWNvbXBvc2VDb2xvcihjb2xvcik7XG4gIHZhbHVlID0gY2xhbXBXcmFwcGVyKHZhbHVlKTtcbiAgaWYgKGNvbG9yLnR5cGUgPT09ICdyZ2InIHx8IGNvbG9yLnR5cGUgPT09ICdoc2wnKSB7XG4gICAgY29sb3IudHlwZSArPSAnYSc7XG4gIH1cbiAgaWYgKGNvbG9yLnR5cGUgPT09ICdjb2xvcicpIHtcbiAgICBjb2xvci52YWx1ZXNbM10gPSBgLyR7dmFsdWV9YDtcbiAgfSBlbHNlIHtcbiAgICBjb2xvci52YWx1ZXNbM10gPSB2YWx1ZTtcbiAgfVxuICByZXR1cm4gcmVjb21wb3NlQ29sb3IoY29sb3IpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHByaXZhdGVfc2FmZUFscGhhKGNvbG9yLCB2YWx1ZSwgd2FybmluZykge1xuICB0cnkge1xuICAgIHJldHVybiBhbHBoYShjb2xvciwgdmFsdWUpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGlmICh3YXJuaW5nICYmIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGNvbnNvbGUud2Fybih3YXJuaW5nKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbG9yO1xuICB9XG59XG5cbi8qKlxuICogRGFya2VucyBhIGNvbG9yLlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbG9yIC0gQ1NTIGNvbG9yLCBpLmUuIG9uZSBvZjogI25ubiwgI25ubm5ubiwgcmdiKCksIHJnYmEoKSwgaHNsKCksIGhzbGEoKSwgY29sb3IoKVxuICogQHBhcmFtIHtudW1iZXJ9IGNvZWZmaWNpZW50IC0gbXVsdGlwbGllciBpbiB0aGUgcmFuZ2UgMCAtIDFcbiAqIEByZXR1cm5zIHtzdHJpbmd9IEEgQ1NTIGNvbG9yIHN0cmluZy4gSGV4IGlucHV0IHZhbHVlcyBhcmUgcmV0dXJuZWQgYXMgcmdiXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkYXJrZW4oY29sb3IsIGNvZWZmaWNpZW50KSB7XG4gIGNvbG9yID0gZGVjb21wb3NlQ29sb3IoY29sb3IpO1xuICBjb2VmZmljaWVudCA9IGNsYW1wV3JhcHBlcihjb2VmZmljaWVudCk7XG4gIGlmIChjb2xvci50eXBlLmluZGV4T2YoJ2hzbCcpICE9PSAtMSkge1xuICAgIGNvbG9yLnZhbHVlc1syXSAqPSAxIC0gY29lZmZpY2llbnQ7XG4gIH0gZWxzZSBpZiAoY29sb3IudHlwZS5pbmRleE9mKCdyZ2InKSAhPT0gLTEgfHwgY29sb3IudHlwZS5pbmRleE9mKCdjb2xvcicpICE9PSAtMSkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMzsgaSArPSAxKSB7XG4gICAgICBjb2xvci52YWx1ZXNbaV0gKj0gMSAtIGNvZWZmaWNpZW50O1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVjb21wb3NlQ29sb3IoY29sb3IpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHByaXZhdGVfc2FmZURhcmtlbihjb2xvciwgY29lZmZpY2llbnQsIHdhcm5pbmcpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZGFya2VuKGNvbG9yLCBjb2VmZmljaWVudCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgaWYgKHdhcm5pbmcgJiYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgY29uc29sZS53YXJuKHdhcm5pbmcpO1xuICAgIH1cbiAgICByZXR1cm4gY29sb3I7XG4gIH1cbn1cblxuLyoqXG4gKiBMaWdodGVucyBhIGNvbG9yLlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbG9yIC0gQ1NTIGNvbG9yLCBpLmUuIG9uZSBvZjogI25ubiwgI25ubm5ubiwgcmdiKCksIHJnYmEoKSwgaHNsKCksIGhzbGEoKSwgY29sb3IoKVxuICogQHBhcmFtIHtudW1iZXJ9IGNvZWZmaWNpZW50IC0gbXVsdGlwbGllciBpbiB0aGUgcmFuZ2UgMCAtIDFcbiAqIEByZXR1cm5zIHtzdHJpbmd9IEEgQ1NTIGNvbG9yIHN0cmluZy4gSGV4IGlucHV0IHZhbHVlcyBhcmUgcmV0dXJuZWQgYXMgcmdiXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBsaWdodGVuKGNvbG9yLCBjb2VmZmljaWVudCkge1xuICBjb2xvciA9IGRlY29tcG9zZUNvbG9yKGNvbG9yKTtcbiAgY29lZmZpY2llbnQgPSBjbGFtcFdyYXBwZXIoY29lZmZpY2llbnQpO1xuICBpZiAoY29sb3IudHlwZS5pbmRleE9mKCdoc2wnKSAhPT0gLTEpIHtcbiAgICBjb2xvci52YWx1ZXNbMl0gKz0gKDEwMCAtIGNvbG9yLnZhbHVlc1syXSkgKiBjb2VmZmljaWVudDtcbiAgfSBlbHNlIGlmIChjb2xvci50eXBlLmluZGV4T2YoJ3JnYicpICE9PSAtMSkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMzsgaSArPSAxKSB7XG4gICAgICBjb2xvci52YWx1ZXNbaV0gKz0gKDI1NSAtIGNvbG9yLnZhbHVlc1tpXSkgKiBjb2VmZmljaWVudDtcbiAgICB9XG4gIH0gZWxzZSBpZiAoY29sb3IudHlwZS5pbmRleE9mKCdjb2xvcicpICE9PSAtMSkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMzsgaSArPSAxKSB7XG4gICAgICBjb2xvci52YWx1ZXNbaV0gKz0gKDEgLSBjb2xvci52YWx1ZXNbaV0pICogY29lZmZpY2llbnQ7XG4gICAgfVxuICB9XG4gIHJldHVybiByZWNvbXBvc2VDb2xvcihjb2xvcik7XG59XG5leHBvcnQgZnVuY3Rpb24gcHJpdmF0ZV9zYWZlTGlnaHRlbihjb2xvciwgY29lZmZpY2llbnQsIHdhcm5pbmcpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gbGlnaHRlbihjb2xvciwgY29lZmZpY2llbnQpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGlmICh3YXJuaW5nICYmIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGNvbnNvbGUud2Fybih3YXJuaW5nKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbG9yO1xuICB9XG59XG5cbi8qKlxuICogRGFya2VuIG9yIGxpZ2h0ZW4gYSBjb2xvciwgZGVwZW5kaW5nIG9uIGl0cyBsdW1pbmFuY2UuXG4gKiBMaWdodCBjb2xvcnMgYXJlIGRhcmtlbmVkLCBkYXJrIGNvbG9ycyBhcmUgbGlnaHRlbmVkLlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbG9yIC0gQ1NTIGNvbG9yLCBpLmUuIG9uZSBvZjogI25ubiwgI25ubm5ubiwgcmdiKCksIHJnYmEoKSwgaHNsKCksIGhzbGEoKSwgY29sb3IoKVxuICogQHBhcmFtIHtudW1iZXJ9IGNvZWZmaWNpZW50PTAuMTUgLSBtdWx0aXBsaWVyIGluIHRoZSByYW5nZSAwIC0gMVxuICogQHJldHVybnMge3N0cmluZ30gQSBDU1MgY29sb3Igc3RyaW5nLiBIZXggaW5wdXQgdmFsdWVzIGFyZSByZXR1cm5lZCBhcyByZ2JcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGVtcGhhc2l6ZShjb2xvciwgY29lZmZpY2llbnQgPSAwLjE1KSB7XG4gIHJldHVybiBnZXRMdW1pbmFuY2UoY29sb3IpID4gMC41ID8gZGFya2VuKGNvbG9yLCBjb2VmZmljaWVudCkgOiBsaWdodGVuKGNvbG9yLCBjb2VmZmljaWVudCk7XG59XG5leHBvcnQgZnVuY3Rpb24gcHJpdmF0ZV9zYWZlRW1waGFzaXplKGNvbG9yLCBjb2VmZmljaWVudCwgd2FybmluZykge1xuICB0cnkge1xuICAgIHJldHVybiBlbXBoYXNpemUoY29sb3IsIGNvZWZmaWNpZW50KTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBpZiAod2FybmluZyAmJiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBjb25zb2xlLndhcm4od2FybmluZyk7XG4gICAgfVxuICAgIHJldHVybiBjb2xvcjtcbiAgfVxufVxuXG4vKipcbiAqIEJsZW5kIGEgdHJhbnNwYXJlbnQgb3ZlcmxheSBjb2xvciB3aXRoIGEgYmFja2dyb3VuZCBjb2xvciwgcmVzdWx0aW5nIGluIGEgc2luZ2xlXG4gKiBSR0IgY29sb3IuXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFja2dyb3VuZCAtIENTUyBjb2xvclxuICogQHBhcmFtIHtzdHJpbmd9IG92ZXJsYXkgLSBDU1MgY29sb3JcbiAqIEBwYXJhbSB7bnVtYmVyfSBvcGFjaXR5IC0gT3BhY2l0eSBtdWx0aXBsaWVyIGluIHRoZSByYW5nZSAwIC0gMVxuICogQHBhcmFtIHtudW1iZXJ9IFtnYW1tYT0xLjBdIC0gR2FtbWEgY29ycmVjdGlvbiBmYWN0b3IuIEZvciBnYW1tYS1jb3JyZWN0IGJsZW5kaW5nLCAyLjIgaXMgdXN1YWwuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBibGVuZChiYWNrZ3JvdW5kLCBvdmVybGF5LCBvcGFjaXR5LCBnYW1tYSA9IDEuMCkge1xuICBjb25zdCBibGVuZENoYW5uZWwgPSAoYiwgbykgPT4gTWF0aC5yb3VuZCgoYiAqKiAoMSAvIGdhbW1hKSAqICgxIC0gb3BhY2l0eSkgKyBvICoqICgxIC8gZ2FtbWEpICogb3BhY2l0eSkgKiogZ2FtbWEpO1xuICBjb25zdCBiYWNrZ3JvdW5kQ29sb3IgPSBkZWNvbXBvc2VDb2xvcihiYWNrZ3JvdW5kKTtcbiAgY29uc3Qgb3ZlcmxheUNvbG9yID0gZGVjb21wb3NlQ29sb3Iob3ZlcmxheSk7XG4gIGNvbnN0IHJnYiA9IFtibGVuZENoYW5uZWwoYmFja2dyb3VuZENvbG9yLnZhbHVlc1swXSwgb3ZlcmxheUNvbG9yLnZhbHVlc1swXSksIGJsZW5kQ2hhbm5lbChiYWNrZ3JvdW5kQ29sb3IudmFsdWVzWzFdLCBvdmVybGF5Q29sb3IudmFsdWVzWzFdKSwgYmxlbmRDaGFubmVsKGJhY2tncm91bmRDb2xvci52YWx1ZXNbMl0sIG92ZXJsYXlDb2xvci52YWx1ZXNbMl0pXTtcbiAgcmV0dXJuIHJlY29tcG9zZUNvbG9yKHtcbiAgICB0eXBlOiAncmdiJyxcbiAgICB2YWx1ZXM6IHJnYlxuICB9KTtcbn0iLCJpbXBvcnQgZGVlcG1lcmdlIGZyb20gJ0BtdWkvdXRpbHMvZGVlcG1lcmdlJztcbmltcG9ydCBjcmVhdGVUaGVtZSBmcm9tICcuL2NyZWF0ZVRoZW1lJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZU11aVN0cmljdE1vZGVUaGVtZShvcHRpb25zLCAuLi5hcmdzKSB7XG4gIHJldHVybiBjcmVhdGVUaGVtZShkZWVwbWVyZ2Uoe1xuICAgIHVuc3RhYmxlX3N0cmljdE1vZGU6IHRydWVcbiAgfSwgb3B0aW9ucyksIC4uLmFyZ3MpO1xufSIsImxldCB3YXJuZWRPbmNlID0gZmFsc2U7XG5cbi8vIFRvIHJlbW92ZSBpbiB2NlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlU3R5bGVzKHN0eWxlcykge1xuICBpZiAoIXdhcm5lZE9uY2UpIHtcbiAgICBjb25zb2xlLndhcm4oWydNVUk6IGNyZWF0ZVN0eWxlcyBmcm9tIEBtdWkvbWF0ZXJpYWwvc3R5bGVzIGlzIGRlcHJlY2F0ZWQuJywgJ1BsZWFzZSB1c2UgQG11aS9zdHlsZXMvY3JlYXRlU3R5bGVzJ10uam9pbignXFxuJykpO1xuICAgIHdhcm5lZE9uY2UgPSB0cnVlO1xuICB9XG4gIHJldHVybiBzdHlsZXM7XG59IiwiZXhwb3J0IGZ1bmN0aW9uIGlzVW5pdGxlc3ModmFsdWUpIHtcbiAgcmV0dXJuIFN0cmluZyhwYXJzZUZsb2F0KHZhbHVlKSkubGVuZ3RoID09PSBTdHJpbmcodmFsdWUpLmxlbmd0aDtcbn1cblxuLy8gUG9ydGVkIGZyb20gQ29tcGFzc1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL0NvbXBhc3MvY29tcGFzcy9ibG9iL21hc3Rlci9jb3JlL3N0eWxlc2hlZXRzL2NvbXBhc3MvdHlwb2dyYXBoeS9fdW5pdHMuc2Nzc1xuLy8gRW11bGF0ZSB0aGUgc2FzcyBmdW5jdGlvbiBcInVuaXRcIlxuZXhwb3J0IGZ1bmN0aW9uIGdldFVuaXQoaW5wdXQpIHtcbiAgcmV0dXJuIFN0cmluZyhpbnB1dCkubWF0Y2goL1tcXGQuXFwtK10qXFxzKiguKikvKVsxXSB8fCAnJztcbn1cblxuLy8gRW11bGF0ZSB0aGUgc2FzcyBmdW5jdGlvbiBcInVuaXRsZXNzXCJcbmV4cG9ydCBmdW5jdGlvbiB0b1VuaXRsZXNzKGxlbmd0aCkge1xuICByZXR1cm4gcGFyc2VGbG9hdChsZW5ndGgpO1xufVxuXG4vLyBDb252ZXJ0IGFueSBDU1MgPGxlbmd0aD4gb3IgPHBlcmNlbnRhZ2U+IHZhbHVlIHRvIGFueSBhbm90aGVyLlxuLy8gRnJvbSBodHRwczovL2dpdGh1Yi5jb20vS3lsZUFNYXRoZXdzL2NvbnZlcnQtY3NzLWxlbmd0aFxuZXhwb3J0IGZ1bmN0aW9uIGNvbnZlcnRMZW5ndGgoYmFzZUZvbnRTaXplKSB7XG4gIHJldHVybiAobGVuZ3RoLCB0b1VuaXQpID0+IHtcbiAgICBjb25zdCBmcm9tVW5pdCA9IGdldFVuaXQobGVuZ3RoKTtcblxuICAgIC8vIE9wdGltaXplIGZvciBjYXNlcyB3aGVyZSBgZnJvbWAgYW5kIGB0b2AgdW5pdHMgYXJlIGFjY2lkZW50YWxseSB0aGUgc2FtZS5cbiAgICBpZiAoZnJvbVVuaXQgPT09IHRvVW5pdCkge1xuICAgICAgcmV0dXJuIGxlbmd0aDtcbiAgICB9XG5cbiAgICAvLyBDb252ZXJ0IGlucHV0IGxlbmd0aCB0byBwaXhlbHMuXG4gICAgbGV0IHB4TGVuZ3RoID0gdG9Vbml0bGVzcyhsZW5ndGgpO1xuICAgIGlmIChmcm9tVW5pdCAhPT0gJ3B4Jykge1xuICAgICAgaWYgKGZyb21Vbml0ID09PSAnZW0nKSB7XG4gICAgICAgIHB4TGVuZ3RoID0gdG9Vbml0bGVzcyhsZW5ndGgpICogdG9Vbml0bGVzcyhiYXNlRm9udFNpemUpO1xuICAgICAgfSBlbHNlIGlmIChmcm9tVW5pdCA9PT0gJ3JlbScpIHtcbiAgICAgICAgcHhMZW5ndGggPSB0b1VuaXRsZXNzKGxlbmd0aCkgKiB0b1VuaXRsZXNzKGJhc2VGb250U2l6ZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gQ29udmVydCBsZW5ndGggaW4gcGl4ZWxzIHRvIHRoZSBvdXRwdXQgdW5pdFxuICAgIGxldCBvdXRwdXRMZW5ndGggPSBweExlbmd0aDtcbiAgICBpZiAodG9Vbml0ICE9PSAncHgnKSB7XG4gICAgICBpZiAodG9Vbml0ID09PSAnZW0nKSB7XG4gICAgICAgIG91dHB1dExlbmd0aCA9IHB4TGVuZ3RoIC8gdG9Vbml0bGVzcyhiYXNlRm9udFNpemUpO1xuICAgICAgfSBlbHNlIGlmICh0b1VuaXQgPT09ICdyZW0nKSB7XG4gICAgICAgIG91dHB1dExlbmd0aCA9IHB4TGVuZ3RoIC8gdG9Vbml0bGVzcyhiYXNlRm9udFNpemUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGxlbmd0aDtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHBhcnNlRmxvYXQob3V0cHV0TGVuZ3RoLnRvRml4ZWQoNSkpICsgdG9Vbml0O1xuICB9O1xufVxuZXhwb3J0IGZ1bmN0aW9uIGFsaWduUHJvcGVydHkoe1xuICBzaXplLFxuICBncmlkXG59KSB7XG4gIGNvbnN0IHNpemVCZWxvdyA9IHNpemUgLSBzaXplICUgZ3JpZDtcbiAgY29uc3Qgc2l6ZUFib3ZlID0gc2l6ZUJlbG93ICsgZ3JpZDtcbiAgcmV0dXJuIHNpemUgLSBzaXplQmVsb3cgPCBzaXplQWJvdmUgLSBzaXplID8gc2l6ZUJlbG93IDogc2l6ZUFib3ZlO1xufVxuXG4vLyBmb250R3JpZCBmaW5kcyBhIG1pbmltYWwgZ3JpZCAoaW4gcmVtKSBmb3IgdGhlIGZvbnRTaXplIHZhbHVlcyBzbyB0aGF0IHRoZVxuLy8gbGluZUhlaWdodCBmYWxscyB1bmRlciBhIHggcGl4ZWxzIGdyaWQsIDRweCBpbiB0aGUgY2FzZSBvZiBNYXRlcmlhbCBEZXNpZ24sXG4vLyB3aXRob3V0IGNoYW5naW5nIHRoZSByZWxhdGl2ZSBsaW5lIGhlaWdodFxuZXhwb3J0IGZ1bmN0aW9uIGZvbnRHcmlkKHtcbiAgbGluZUhlaWdodCxcbiAgcGl4ZWxzLFxuICBodG1sRm9udFNpemVcbn0pIHtcbiAgcmV0dXJuIHBpeGVscyAvIChsaW5lSGVpZ2h0ICogaHRtbEZvbnRTaXplKTtcbn1cblxuLyoqXG4gKiBnZW5lcmF0ZSBhIHJlc3BvbnNpdmUgdmVyc2lvbiBvZiBhIGdpdmVuIENTUyBwcm9wZXJ0eVxuICogQGV4YW1wbGVcbiAqIHJlc3BvbnNpdmVQcm9wZXJ0eSh7XG4gKiAgIGNzc1Byb3BlcnR5OiAnZm9udFNpemUnLFxuICogICBtaW46IDE1LFxuICogICBtYXg6IDIwLFxuICogICB1bml0OiAncHgnLFxuICogICBicmVha3BvaW50czogWzMwMCwgNjAwXSxcbiAqIH0pXG4gKlxuICogLy8gdGhpcyByZXR1cm5zXG4gKlxuICoge1xuICogICBmb250U2l6ZTogJzE1cHgnLFxuICogICAnQG1lZGlhIChtaW4td2lkdGg6MzAwcHgpJzoge1xuICogICAgIGZvbnRTaXplOiAnMTcuNXB4JyxcbiAqICAgfSxcbiAqICAgJ0BtZWRpYSAobWluLXdpZHRoOjYwMHB4KSc6IHtcbiAqICAgICBmb250U2l6ZTogJzIwcHgnLFxuICogICB9LFxuICogfVxuICogQHBhcmFtIHtPYmplY3R9IHBhcmFtc1xuICogQHBhcmFtIHtzdHJpbmd9IHBhcmFtcy5jc3NQcm9wZXJ0eSAtIFRoZSBDU1MgcHJvcGVydHkgdG8gYmUgbWFkZSByZXNwb25zaXZlXG4gKiBAcGFyYW0ge251bWJlcn0gcGFyYW1zLm1pbiAtIFRoZSBzbWFsbGVzdCB2YWx1ZSBvZiB0aGUgQ1NTIHByb3BlcnR5XG4gKiBAcGFyYW0ge251bWJlcn0gcGFyYW1zLm1heCAtIFRoZSBsYXJnZXN0IHZhbHVlIG9mIHRoZSBDU1MgcHJvcGVydHlcbiAqIEBwYXJhbSB7c3RyaW5nfSBbcGFyYW1zLnVuaXRdIC0gVGhlIHVuaXQgdG8gYmUgdXNlZCBmb3IgdGhlIENTUyBwcm9wZXJ0eVxuICogQHBhcmFtIHtBcnJheS5udW1iZXJ9IFtwYXJhbXMuYnJlYWtwb2ludHNdICAtIEFuIGFycmF5IG9mIGJyZWFrcG9pbnRzXG4gKiBAcGFyYW0ge251bWJlcn0gW3BhcmFtcy5hbGlnblN0ZXBdIC0gUm91bmQgc2NhbGVkIHZhbHVlIHRvIGZhbGwgdW5kZXIgdGhpcyBncmlkXG4gKiBAcmV0dXJucyB7T2JqZWN0fSByZXNwb25zaXZlIHN0eWxlcyBmb3Ige3BhcmFtcy5jc3NQcm9wZXJ0eX1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlc3BvbnNpdmVQcm9wZXJ0eSh7XG4gIGNzc1Byb3BlcnR5LFxuICBtaW4sXG4gIG1heCxcbiAgdW5pdCA9ICdyZW0nLFxuICBicmVha3BvaW50cyA9IFs2MDAsIDkwMCwgMTIwMF0sXG4gIHRyYW5zZm9ybSA9IG51bGxcbn0pIHtcbiAgY29uc3Qgb3V0cHV0ID0ge1xuICAgIFtjc3NQcm9wZXJ0eV06IGAke21pbn0ke3VuaXR9YFxuICB9O1xuICBjb25zdCBmYWN0b3IgPSAobWF4IC0gbWluKSAvIGJyZWFrcG9pbnRzW2JyZWFrcG9pbnRzLmxlbmd0aCAtIDFdO1xuICBicmVha3BvaW50cy5mb3JFYWNoKGJyZWFrcG9pbnQgPT4ge1xuICAgIGxldCB2YWx1ZSA9IG1pbiArIGZhY3RvciAqIGJyZWFrcG9pbnQ7XG4gICAgaWYgKHRyYW5zZm9ybSAhPT0gbnVsbCkge1xuICAgICAgdmFsdWUgPSB0cmFuc2Zvcm0odmFsdWUpO1xuICAgIH1cbiAgICBvdXRwdXRbYEBtZWRpYSAobWluLXdpZHRoOiR7YnJlYWtwb2ludH1weClgXSA9IHtcbiAgICAgIFtjc3NQcm9wZXJ0eV06IGAke01hdGgucm91bmQodmFsdWUgKiAxMDAwMCkgLyAxMDAwMH0ke3VuaXR9YFxuICAgIH07XG4gIH0pO1xuICByZXR1cm4gb3V0cHV0O1xufSIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9mb3JtYXRNdWlFcnJvck1lc3NhZ2UgZnJvbSBcIkBtdWkvdXRpbHMvZm9ybWF0TXVpRXJyb3JNZXNzYWdlXCI7XG5pbXBvcnQgeyBpc1VuaXRsZXNzLCBjb252ZXJ0TGVuZ3RoLCByZXNwb25zaXZlUHJvcGVydHksIGFsaWduUHJvcGVydHksIGZvbnRHcmlkIH0gZnJvbSAnLi9jc3NVdGlscyc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiByZXNwb25zaXZlRm9udFNpemVzKHRoZW1lSW5wdXQsIG9wdGlvbnMgPSB7fSkge1xuICBjb25zdCB7XG4gICAgYnJlYWtwb2ludHMgPSBbJ3NtJywgJ21kJywgJ2xnJ10sXG4gICAgZGlzYWJsZUFsaWduID0gZmFsc2UsXG4gICAgZmFjdG9yID0gMixcbiAgICB2YXJpYW50cyA9IFsnaDEnLCAnaDInLCAnaDMnLCAnaDQnLCAnaDUnLCAnaDYnLCAnc3VidGl0bGUxJywgJ3N1YnRpdGxlMicsICdib2R5MScsICdib2R5MicsICdjYXB0aW9uJywgJ2J1dHRvbicsICdvdmVybGluZSddXG4gIH0gPSBvcHRpb25zO1xuICBjb25zdCB0aGVtZSA9IF9leHRlbmRzKHt9LCB0aGVtZUlucHV0KTtcbiAgdGhlbWUudHlwb2dyYXBoeSA9IF9leHRlbmRzKHt9LCB0aGVtZS50eXBvZ3JhcGh5KTtcbiAgY29uc3QgdHlwb2dyYXBoeSA9IHRoZW1lLnR5cG9ncmFwaHk7XG5cbiAgLy8gQ29udmVydCBiZXR3ZWVuIENTUyBsZW5ndGhzIGUuZy4gZW0tPnB4IG9yIHB4LT5yZW1cbiAgLy8gU2V0IHRoZSBiYXNlRm9udFNpemUgZm9yIHlvdXIgcHJvamVjdC4gRGVmYXVsdHMgdG8gMTZweCAoYWxzbyB0aGUgYnJvd3NlciBkZWZhdWx0KS5cbiAgY29uc3QgY29udmVydCA9IGNvbnZlcnRMZW5ndGgodHlwb2dyYXBoeS5odG1sRm9udFNpemUpO1xuICBjb25zdCBicmVha3BvaW50VmFsdWVzID0gYnJlYWtwb2ludHMubWFwKHggPT4gdGhlbWUuYnJlYWtwb2ludHMudmFsdWVzW3hdKTtcbiAgdmFyaWFudHMuZm9yRWFjaCh2YXJpYW50ID0+IHtcbiAgICBjb25zdCBzdHlsZSA9IHR5cG9ncmFwaHlbdmFyaWFudF07XG4gICAgaWYgKCFzdHlsZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCByZW1Gb250U2l6ZSA9IHBhcnNlRmxvYXQoY29udmVydChzdHlsZS5mb250U2l6ZSwgJ3JlbScpKTtcbiAgICBpZiAocmVtRm9udFNpemUgPD0gMSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBtYXhGb250U2l6ZSA9IHJlbUZvbnRTaXplO1xuICAgIGNvbnN0IG1pbkZvbnRTaXplID0gMSArIChtYXhGb250U2l6ZSAtIDEpIC8gZmFjdG9yO1xuICAgIGxldCB7XG4gICAgICBsaW5lSGVpZ2h0XG4gICAgfSA9IHN0eWxlO1xuICAgIGlmICghaXNVbml0bGVzcyhsaW5lSGVpZ2h0KSAmJiAhZGlzYWJsZUFsaWduKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gYE1VSTogVW5zdXBwb3J0ZWQgbm9uLXVuaXRsZXNzIGxpbmUgaGVpZ2h0IHdpdGggZ3JpZCBhbGlnbm1lbnQuXG5Vc2UgdW5pdGxlc3MgbGluZSBoZWlnaHRzIGluc3RlYWQuYCA6IF9mb3JtYXRNdWlFcnJvck1lc3NhZ2UoNikpO1xuICAgIH1cbiAgICBpZiAoIWlzVW5pdGxlc3MobGluZUhlaWdodCkpIHtcbiAgICAgIC8vIG1ha2UgaXQgdW5pdGxlc3NcbiAgICAgIGxpbmVIZWlnaHQgPSBwYXJzZUZsb2F0KGNvbnZlcnQobGluZUhlaWdodCwgJ3JlbScpKSAvIHBhcnNlRmxvYXQocmVtRm9udFNpemUpO1xuICAgIH1cbiAgICBsZXQgdHJhbnNmb3JtID0gbnVsbDtcbiAgICBpZiAoIWRpc2FibGVBbGlnbikge1xuICAgICAgdHJhbnNmb3JtID0gdmFsdWUgPT4gYWxpZ25Qcm9wZXJ0eSh7XG4gICAgICAgIHNpemU6IHZhbHVlLFxuICAgICAgICBncmlkOiBmb250R3JpZCh7XG4gICAgICAgICAgcGl4ZWxzOiA0LFxuICAgICAgICAgIGxpbmVIZWlnaHQsXG4gICAgICAgICAgaHRtbEZvbnRTaXplOiB0eXBvZ3JhcGh5Lmh0bWxGb250U2l6ZVxuICAgICAgICB9KVxuICAgICAgfSk7XG4gICAgfVxuICAgIHR5cG9ncmFwaHlbdmFyaWFudF0gPSBfZXh0ZW5kcyh7fSwgc3R5bGUsIHJlc3BvbnNpdmVQcm9wZXJ0eSh7XG4gICAgICBjc3NQcm9wZXJ0eTogJ2ZvbnRTaXplJyxcbiAgICAgIG1pbjogbWluRm9udFNpemUsXG4gICAgICBtYXg6IG1heEZvbnRTaXplLFxuICAgICAgdW5pdDogJ3JlbScsXG4gICAgICBicmVha3BvaW50czogYnJlYWtwb2ludFZhbHVlcyxcbiAgICAgIHRyYW5zZm9ybVxuICAgIH0pKTtcbiAgfSk7XG4gIHJldHVybiB0aGVtZTtcbn0iLCJpbXBvcnQgcmVzb2x2ZVByb3BzIGZyb20gJ0BtdWkvdXRpbHMvcmVzb2x2ZVByb3BzJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFRoZW1lUHJvcHMocGFyYW1zKSB7XG4gIGNvbnN0IHtcbiAgICB0aGVtZSxcbiAgICBuYW1lLFxuICAgIHByb3BzXG4gIH0gPSBwYXJhbXM7XG4gIGlmICghdGhlbWUgfHwgIXRoZW1lLmNvbXBvbmVudHMgfHwgIXRoZW1lLmNvbXBvbmVudHNbbmFtZV0gfHwgIXRoZW1lLmNvbXBvbmVudHNbbmFtZV0uZGVmYXVsdFByb3BzKSB7XG4gICAgcmV0dXJuIHByb3BzO1xuICB9XG4gIHJldHVybiByZXNvbHZlUHJvcHModGhlbWUuY29tcG9uZW50c1tuYW1lXS5kZWZhdWx0UHJvcHMsIHByb3BzKTtcbn0iLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCBnZXRUaGVtZVByb3BzIGZyb20gJy4vZ2V0VGhlbWVQcm9wcyc7XG5pbXBvcnQgdXNlVGhlbWUgZnJvbSAnLi4vdXNlVGhlbWUnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXNlVGhlbWVQcm9wcyh7XG4gIHByb3BzLFxuICBuYW1lLFxuICBkZWZhdWx0VGhlbWUsXG4gIHRoZW1lSWRcbn0pIHtcbiAgbGV0IHRoZW1lID0gdXNlVGhlbWUoZGVmYXVsdFRoZW1lKTtcbiAgaWYgKHRoZW1lSWQpIHtcbiAgICB0aGVtZSA9IHRoZW1lW3RoZW1lSWRdIHx8IHRoZW1lO1xuICB9XG4gIGNvbnN0IG1lcmdlZFByb3BzID0gZ2V0VGhlbWVQcm9wcyh7XG4gICAgdGhlbWUsXG4gICAgbmFtZSxcbiAgICBwcm9wc1xuICB9KTtcbiAgcmV0dXJuIG1lcmdlZFByb3BzO1xufSIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0IHN5c3RlbVVzZVRoZW1lUHJvcHMgZnJvbSAnQG11aS9zeXN0ZW0vdXNlVGhlbWVQcm9wcyc7XG5pbXBvcnQgZGVmYXVsdFRoZW1lIGZyb20gJy4vZGVmYXVsdFRoZW1lJztcbmltcG9ydCBUSEVNRV9JRCBmcm9tICcuL2lkZW50aWZpZXInO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXNlVGhlbWVQcm9wcyh7XG4gIHByb3BzLFxuICBuYW1lXG59KSB7XG4gIHJldHVybiBzeXN0ZW1Vc2VUaGVtZVByb3BzKHtcbiAgICBwcm9wcyxcbiAgICBuYW1lLFxuICAgIGRlZmF1bHRUaGVtZSxcbiAgICB0aGVtZUlkOiBUSEVNRV9JRFxuICB9KTtcbn0iLCJpbXBvcnQgX2Zvcm1hdE11aUVycm9yTWVzc2FnZSBmcm9tIFwiQG11aS91dGlscy9mb3JtYXRNdWlFcnJvck1lc3NhZ2VcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG1ha2VTdHlsZXMoKSB7XG4gIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBgTVVJOiBtYWtlU3R5bGVzIGlzIG5vIGxvbmdlciBleHBvcnRlZCBmcm9tIEBtdWkvbWF0ZXJpYWwvc3R5bGVzLlxuWW91IGhhdmUgdG8gaW1wb3J0IGl0IGZyb20gQG11aS9zdHlsZXMuXG5TZWUgaHR0cHM6Ly9tdWkuY29tL3IvbWlncmF0aW9uLXY0LyNtdWktbWF0ZXJpYWwtc3R5bGVzIGZvciBtb3JlIGRldGFpbHMuYCA6IF9mb3JtYXRNdWlFcnJvck1lc3NhZ2UoMTQpKTtcbn0iLCJpbXBvcnQgX2Zvcm1hdE11aUVycm9yTWVzc2FnZSBmcm9tIFwiQG11aS91dGlscy9mb3JtYXRNdWlFcnJvck1lc3NhZ2VcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHdpdGhTdHlsZXMoKSB7XG4gIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBgTVVJOiB3aXRoU3R5bGVzIGlzIG5vIGxvbmdlciBleHBvcnRlZCBmcm9tIEBtdWkvbWF0ZXJpYWwvc3R5bGVzLlxuWW91IGhhdmUgdG8gaW1wb3J0IGl0IGZyb20gQG11aS9zdHlsZXMuXG5TZWUgaHR0cHM6Ly9tdWkuY29tL3IvbWlncmF0aW9uLXY0LyNtdWktbWF0ZXJpYWwtc3R5bGVzIGZvciBtb3JlIGRldGFpbHMuYCA6IF9mb3JtYXRNdWlFcnJvck1lc3NhZ2UoMTUpKTtcbn0iLCJpbXBvcnQgX2Zvcm1hdE11aUVycm9yTWVzc2FnZSBmcm9tIFwiQG11aS91dGlscy9mb3JtYXRNdWlFcnJvck1lc3NhZ2VcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHdpdGhUaGVtZSgpIHtcbiAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGBNVUk6IHdpdGhUaGVtZSBpcyBubyBsb25nZXIgZXhwb3J0ZWQgZnJvbSBAbXVpL21hdGVyaWFsL3N0eWxlcy5cbllvdSBoYXZlIHRvIGltcG9ydCBpdCBmcm9tIEBtdWkvc3R5bGVzLlxuU2VlIGh0dHBzOi8vbXVpLmNvbS9yL21pZ3JhdGlvbi12NC8jbXVpLW1hdGVyaWFsLXN0eWxlcyBmb3IgbW9yZSBkZXRhaWxzLmAgOiBfZm9ybWF0TXVpRXJyb3JNZXNzYWdlKDE2KSk7XG59IiwiLyoqXG4gKiBTcGxpdCB0aGlzIGNvbXBvbmVudCBmb3IgUlNDIGltcG9ydFxuICovXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuZXhwb3J0IGNvbnN0IERFRkFVTFRfTU9ERV9TVE9SQUdFX0tFWSA9ICdtb2RlJztcbmV4cG9ydCBjb25zdCBERUZBVUxUX0NPTE9SX1NDSEVNRV9TVE9SQUdFX0tFWSA9ICdjb2xvci1zY2hlbWUnO1xuZXhwb3J0IGNvbnN0IERFRkFVTFRfQVRUUklCVVRFID0gJ2RhdGEtY29sb3Itc2NoZW1lJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIEluaXRDb2xvclNjaGVtZVNjcmlwdChvcHRpb25zKSB7XG4gIGNvbnN0IHtcbiAgICBkZWZhdWx0TW9kZSA9ICdsaWdodCcsXG4gICAgZGVmYXVsdExpZ2h0Q29sb3JTY2hlbWUgPSAnbGlnaHQnLFxuICAgIGRlZmF1bHREYXJrQ29sb3JTY2hlbWUgPSAnZGFyaycsXG4gICAgbW9kZVN0b3JhZ2VLZXkgPSBERUZBVUxUX01PREVfU1RPUkFHRV9LRVksXG4gICAgY29sb3JTY2hlbWVTdG9yYWdlS2V5ID0gREVGQVVMVF9DT0xPUl9TQ0hFTUVfU1RPUkFHRV9LRVksXG4gICAgYXR0cmlidXRlID0gREVGQVVMVF9BVFRSSUJVVEUsXG4gICAgY29sb3JTY2hlbWVOb2RlID0gJ2RvY3VtZW50LmRvY3VtZW50RWxlbWVudCcsXG4gICAgbm9uY2VcbiAgfSA9IG9wdGlvbnMgfHwge307XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeChcInNjcmlwdFwiLCB7XG4gICAgc3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nOiB0cnVlLFxuICAgIG5vbmNlOiB0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJyA/IG5vbmNlIDogJydcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3Qvbm8tZGFuZ2VyXG4gICAgLFxuICAgIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MOiB7XG4gICAgICBfX2h0bWw6IGAoZnVuY3Rpb24oKSB7XG50cnkge1xuICB2YXIgbW9kZSA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCcke21vZGVTdG9yYWdlS2V5fScpIHx8ICcke2RlZmF1bHRNb2RlfSc7XG4gIHZhciBjb2xvclNjaGVtZSA9ICcnO1xuICBpZiAobW9kZSA9PT0gJ3N5c3RlbScpIHtcbiAgICAvLyBoYW5kbGUgc3lzdGVtIG1vZGVcbiAgICB2YXIgbXFsID0gd2luZG93Lm1hdGNoTWVkaWEoJyhwcmVmZXJzLWNvbG9yLXNjaGVtZTogZGFyayknKTtcbiAgICBpZiAobXFsLm1hdGNoZXMpIHtcbiAgICAgIGNvbG9yU2NoZW1lID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJyR7Y29sb3JTY2hlbWVTdG9yYWdlS2V5fS1kYXJrJykgfHwgJyR7ZGVmYXVsdERhcmtDb2xvclNjaGVtZX0nO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb2xvclNjaGVtZSA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCcke2NvbG9yU2NoZW1lU3RvcmFnZUtleX0tbGlnaHQnKSB8fCAnJHtkZWZhdWx0TGlnaHRDb2xvclNjaGVtZX0nO1xuICAgIH1cbiAgfVxuICBpZiAobW9kZSA9PT0gJ2xpZ2h0Jykge1xuICAgIGNvbG9yU2NoZW1lID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJyR7Y29sb3JTY2hlbWVTdG9yYWdlS2V5fS1saWdodCcpIHx8ICcke2RlZmF1bHRMaWdodENvbG9yU2NoZW1lfSc7XG4gIH1cbiAgaWYgKG1vZGUgPT09ICdkYXJrJykge1xuICAgIGNvbG9yU2NoZW1lID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJyR7Y29sb3JTY2hlbWVTdG9yYWdlS2V5fS1kYXJrJykgfHwgJyR7ZGVmYXVsdERhcmtDb2xvclNjaGVtZX0nO1xuICB9XG4gIGlmIChjb2xvclNjaGVtZSkge1xuICAgICR7Y29sb3JTY2hlbWVOb2RlfS5zZXRBdHRyaWJ1dGUoJyR7YXR0cmlidXRlfScsIGNvbG9yU2NoZW1lKTtcbiAgfVxufSBjYXRjaChlKXt9fSkoKTtgXG4gICAgfVxuICB9LCBcIm11aS1jb2xvci1zY2hlbWUtaW5pdFwiKTtcbn0iLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgREVGQVVMVF9NT0RFX1NUT1JBR0VfS0VZLCBERUZBVUxUX0NPTE9SX1NDSEVNRV9TVE9SQUdFX0tFWSB9IGZyb20gJy4uL0luaXRDb2xvclNjaGVtZVNjcmlwdC9Jbml0Q29sb3JTY2hlbWVTY3JpcHQnO1xuZXhwb3J0IGZ1bmN0aW9uIGdldFN5c3RlbU1vZGUobW9kZSkge1xuICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgbW9kZSA9PT0gJ3N5c3RlbScpIHtcbiAgICBjb25zdCBtcWwgPSB3aW5kb3cubWF0Y2hNZWRpYSgnKHByZWZlcnMtY29sb3Itc2NoZW1lOiBkYXJrKScpO1xuICAgIGlmIChtcWwubWF0Y2hlcykge1xuICAgICAgcmV0dXJuICdkYXJrJztcbiAgICB9XG4gICAgcmV0dXJuICdsaWdodCc7XG4gIH1cbiAgcmV0dXJuIHVuZGVmaW5lZDtcbn1cbmZ1bmN0aW9uIHByb2Nlc3NTdGF0ZShzdGF0ZSwgY2FsbGJhY2spIHtcbiAgaWYgKHN0YXRlLm1vZGUgPT09ICdsaWdodCcgfHwgc3RhdGUubW9kZSA9PT0gJ3N5c3RlbScgJiYgc3RhdGUuc3lzdGVtTW9kZSA9PT0gJ2xpZ2h0Jykge1xuICAgIHJldHVybiBjYWxsYmFjaygnbGlnaHQnKTtcbiAgfVxuICBpZiAoc3RhdGUubW9kZSA9PT0gJ2RhcmsnIHx8IHN0YXRlLm1vZGUgPT09ICdzeXN0ZW0nICYmIHN0YXRlLnN5c3RlbU1vZGUgPT09ICdkYXJrJykge1xuICAgIHJldHVybiBjYWxsYmFjaygnZGFyaycpO1xuICB9XG4gIHJldHVybiB1bmRlZmluZWQ7XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0Q29sb3JTY2hlbWUoc3RhdGUpIHtcbiAgcmV0dXJuIHByb2Nlc3NTdGF0ZShzdGF0ZSwgbW9kZSA9PiB7XG4gICAgaWYgKG1vZGUgPT09ICdsaWdodCcpIHtcbiAgICAgIHJldHVybiBzdGF0ZS5saWdodENvbG9yU2NoZW1lO1xuICAgIH1cbiAgICBpZiAobW9kZSA9PT0gJ2RhcmsnKSB7XG4gICAgICByZXR1cm4gc3RhdGUuZGFya0NvbG9yU2NoZW1lO1xuICAgIH1cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9KTtcbn1cbmZ1bmN0aW9uIGluaXRpYWxpemVWYWx1ZShrZXksIGRlZmF1bHRWYWx1ZSkge1xuICBpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG4gIGxldCB2YWx1ZTtcbiAgdHJ5IHtcbiAgICB2YWx1ZSA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKGtleSkgfHwgdW5kZWZpbmVkO1xuICAgIGlmICghdmFsdWUpIHtcbiAgICAgIC8vIHRoZSBmaXJzdCB0aW1lIHRoYXQgdXNlciBlbnRlcnMgdGhlIHNpdGUuXG4gICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShrZXksIGRlZmF1bHRWYWx1ZSk7XG4gICAgfVxuICB9IGNhdGNoIChlKSB7XG4gICAgLy8gVW5zdXBwb3J0ZWRcbiAgfVxuICByZXR1cm4gdmFsdWUgfHwgZGVmYXVsdFZhbHVlO1xufVxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXNlQ3VycmVudENvbG9yU2NoZW1lKG9wdGlvbnMpIHtcbiAgY29uc3Qge1xuICAgIGRlZmF1bHRNb2RlID0gJ2xpZ2h0JyxcbiAgICBkZWZhdWx0TGlnaHRDb2xvclNjaGVtZSxcbiAgICBkZWZhdWx0RGFya0NvbG9yU2NoZW1lLFxuICAgIHN1cHBvcnRlZENvbG9yU2NoZW1lcyA9IFtdLFxuICAgIG1vZGVTdG9yYWdlS2V5ID0gREVGQVVMVF9NT0RFX1NUT1JBR0VfS0VZLFxuICAgIGNvbG9yU2NoZW1lU3RvcmFnZUtleSA9IERFRkFVTFRfQ09MT1JfU0NIRU1FX1NUT1JBR0VfS0VZLFxuICAgIHN0b3JhZ2VXaW5kb3cgPSB0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IHdpbmRvd1xuICB9ID0gb3B0aW9ucztcbiAgY29uc3Qgam9pbmVkQ29sb3JTY2hlbWVzID0gc3VwcG9ydGVkQ29sb3JTY2hlbWVzLmpvaW4oJywnKTtcbiAgY29uc3QgW3N0YXRlLCBzZXRTdGF0ZV0gPSBSZWFjdC51c2VTdGF0ZSgoKSA9PiB7XG4gICAgY29uc3QgaW5pdGlhbE1vZGUgPSBpbml0aWFsaXplVmFsdWUobW9kZVN0b3JhZ2VLZXksIGRlZmF1bHRNb2RlKTtcbiAgICBjb25zdCBsaWdodENvbG9yU2NoZW1lID0gaW5pdGlhbGl6ZVZhbHVlKGAke2NvbG9yU2NoZW1lU3RvcmFnZUtleX0tbGlnaHRgLCBkZWZhdWx0TGlnaHRDb2xvclNjaGVtZSk7XG4gICAgY29uc3QgZGFya0NvbG9yU2NoZW1lID0gaW5pdGlhbGl6ZVZhbHVlKGAke2NvbG9yU2NoZW1lU3RvcmFnZUtleX0tZGFya2AsIGRlZmF1bHREYXJrQ29sb3JTY2hlbWUpO1xuICAgIHJldHVybiB7XG4gICAgICBtb2RlOiBpbml0aWFsTW9kZSxcbiAgICAgIHN5c3RlbU1vZGU6IGdldFN5c3RlbU1vZGUoaW5pdGlhbE1vZGUpLFxuICAgICAgbGlnaHRDb2xvclNjaGVtZSxcbiAgICAgIGRhcmtDb2xvclNjaGVtZVxuICAgIH07XG4gIH0pO1xuICBjb25zdCBjb2xvclNjaGVtZSA9IGdldENvbG9yU2NoZW1lKHN0YXRlKTtcbiAgY29uc3Qgc2V0TW9kZSA9IFJlYWN0LnVzZUNhbGxiYWNrKG1vZGUgPT4ge1xuICAgIHNldFN0YXRlKGN1cnJlbnRTdGF0ZSA9PiB7XG4gICAgICBpZiAobW9kZSA9PT0gY3VycmVudFN0YXRlLm1vZGUpIHtcbiAgICAgICAgLy8gZG8gbm90aGluZyBpZiBtb2RlIGRvZXMgbm90IGNoYW5nZVxuICAgICAgICByZXR1cm4gY3VycmVudFN0YXRlO1xuICAgICAgfVxuICAgICAgY29uc3QgbmV3TW9kZSA9IG1vZGUgIT0gbnVsbCA/IG1vZGUgOiBkZWZhdWx0TW9kZTtcbiAgICAgIHRyeSB7XG4gICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKG1vZGVTdG9yYWdlS2V5LCBuZXdNb2RlKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gVW5zdXBwb3J0ZWRcbiAgICAgIH1cbiAgICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgY3VycmVudFN0YXRlLCB7XG4gICAgICAgIG1vZGU6IG5ld01vZGUsXG4gICAgICAgIHN5c3RlbU1vZGU6IGdldFN5c3RlbU1vZGUobmV3TW9kZSlcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9LCBbbW9kZVN0b3JhZ2VLZXksIGRlZmF1bHRNb2RlXSk7XG4gIGNvbnN0IHNldENvbG9yU2NoZW1lID0gUmVhY3QudXNlQ2FsbGJhY2sodmFsdWUgPT4ge1xuICAgIGlmICghdmFsdWUpIHtcbiAgICAgIHNldFN0YXRlKGN1cnJlbnRTdGF0ZSA9PiB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oYCR7Y29sb3JTY2hlbWVTdG9yYWdlS2V5fS1saWdodGAsIGRlZmF1bHRMaWdodENvbG9yU2NoZW1lKTtcbiAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShgJHtjb2xvclNjaGVtZVN0b3JhZ2VLZXl9LWRhcmtgLCBkZWZhdWx0RGFya0NvbG9yU2NoZW1lKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIC8vIFVuc3VwcG9ydGVkXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIF9leHRlbmRzKHt9LCBjdXJyZW50U3RhdGUsIHtcbiAgICAgICAgICBsaWdodENvbG9yU2NoZW1lOiBkZWZhdWx0TGlnaHRDb2xvclNjaGVtZSxcbiAgICAgICAgICBkYXJrQ29sb3JTY2hlbWU6IGRlZmF1bHREYXJrQ29sb3JTY2hlbWVcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGlmICh2YWx1ZSAmJiAham9pbmVkQ29sb3JTY2hlbWVzLmluY2x1ZGVzKHZhbHVlKSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKGBcXGAke3ZhbHVlfVxcYCBkb2VzIG5vdCBleGlzdCBpbiBcXGB0aGVtZS5jb2xvclNjaGVtZXNcXGAuYCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzZXRTdGF0ZShjdXJyZW50U3RhdGUgPT4ge1xuICAgICAgICAgIGNvbnN0IG5ld1N0YXRlID0gX2V4dGVuZHMoe30sIGN1cnJlbnRTdGF0ZSk7XG4gICAgICAgICAgcHJvY2Vzc1N0YXRlKGN1cnJlbnRTdGF0ZSwgbW9kZSA9PiB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShgJHtjb2xvclNjaGVtZVN0b3JhZ2VLZXl9LSR7bW9kZX1gLCB2YWx1ZSk7XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgIC8vIFVuc3VwcG9ydGVkXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobW9kZSA9PT0gJ2xpZ2h0Jykge1xuICAgICAgICAgICAgICBuZXdTdGF0ZS5saWdodENvbG9yU2NoZW1lID0gdmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobW9kZSA9PT0gJ2RhcmsnKSB7XG4gICAgICAgICAgICAgIG5ld1N0YXRlLmRhcmtDb2xvclNjaGVtZSA9IHZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHJldHVybiBuZXdTdGF0ZTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHNldFN0YXRlKGN1cnJlbnRTdGF0ZSA9PiB7XG4gICAgICAgIGNvbnN0IG5ld1N0YXRlID0gX2V4dGVuZHMoe30sIGN1cnJlbnRTdGF0ZSk7XG4gICAgICAgIGNvbnN0IG5ld0xpZ2h0Q29sb3JTY2hlbWUgPSB2YWx1ZS5saWdodCA9PT0gbnVsbCA/IGRlZmF1bHRMaWdodENvbG9yU2NoZW1lIDogdmFsdWUubGlnaHQ7XG4gICAgICAgIGNvbnN0IG5ld0RhcmtDb2xvclNjaGVtZSA9IHZhbHVlLmRhcmsgPT09IG51bGwgPyBkZWZhdWx0RGFya0NvbG9yU2NoZW1lIDogdmFsdWUuZGFyaztcbiAgICAgICAgaWYgKG5ld0xpZ2h0Q29sb3JTY2hlbWUpIHtcbiAgICAgICAgICBpZiAoIWpvaW5lZENvbG9yU2NoZW1lcy5pbmNsdWRlcyhuZXdMaWdodENvbG9yU2NoZW1lKSkge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihgXFxgJHtuZXdMaWdodENvbG9yU2NoZW1lfVxcYCBkb2VzIG5vdCBleGlzdCBpbiBcXGB0aGVtZS5jb2xvclNjaGVtZXNcXGAuYCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG5ld1N0YXRlLmxpZ2h0Q29sb3JTY2hlbWUgPSBuZXdMaWdodENvbG9yU2NoZW1lO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oYCR7Y29sb3JTY2hlbWVTdG9yYWdlS2V5fS1saWdodGAsIG5ld0xpZ2h0Q29sb3JTY2hlbWUpO1xuICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgLy8gVW5zdXBwb3J0ZWRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG5ld0RhcmtDb2xvclNjaGVtZSkge1xuICAgICAgICAgIGlmICgham9pbmVkQ29sb3JTY2hlbWVzLmluY2x1ZGVzKG5ld0RhcmtDb2xvclNjaGVtZSkpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYFxcYCR7bmV3RGFya0NvbG9yU2NoZW1lfVxcYCBkb2VzIG5vdCBleGlzdCBpbiBcXGB0aGVtZS5jb2xvclNjaGVtZXNcXGAuYCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG5ld1N0YXRlLmRhcmtDb2xvclNjaGVtZSA9IG5ld0RhcmtDb2xvclNjaGVtZTtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKGAke2NvbG9yU2NoZW1lU3RvcmFnZUtleX0tZGFya2AsIG5ld0RhcmtDb2xvclNjaGVtZSk7XG4gICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAvLyBVbnN1cHBvcnRlZFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3U3RhdGU7XG4gICAgICB9KTtcbiAgICB9XG4gIH0sIFtqb2luZWRDb2xvclNjaGVtZXMsIGNvbG9yU2NoZW1lU3RvcmFnZUtleSwgZGVmYXVsdExpZ2h0Q29sb3JTY2hlbWUsIGRlZmF1bHREYXJrQ29sb3JTY2hlbWVdKTtcbiAgY29uc3QgaGFuZGxlTWVkaWFRdWVyeSA9IFJlYWN0LnVzZUNhbGxiYWNrKGV2ZW50ID0+IHtcbiAgICBpZiAoc3RhdGUubW9kZSA9PT0gJ3N5c3RlbScpIHtcbiAgICAgIHNldFN0YXRlKGN1cnJlbnRTdGF0ZSA9PiB7XG4gICAgICAgIGNvbnN0IHN5c3RlbU1vZGUgPSBldmVudCAhPSBudWxsICYmIGV2ZW50Lm1hdGNoZXMgPyAnZGFyaycgOiAnbGlnaHQnO1xuXG4gICAgICAgIC8vIEVhcmx5IGV4aXQsIG5vdGhpbmcgY2hhbmdlZC5cbiAgICAgICAgaWYgKGN1cnJlbnRTdGF0ZS5zeXN0ZW1Nb2RlID09PSBzeXN0ZW1Nb2RlKSB7XG4gICAgICAgICAgcmV0dXJuIGN1cnJlbnRTdGF0ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gX2V4dGVuZHMoe30sIGN1cnJlbnRTdGF0ZSwge1xuICAgICAgICAgIHN5c3RlbU1vZGVcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH0sIFtzdGF0ZS5tb2RlXSk7XG5cbiAgLy8gUmVmIGhhY2sgdG8gYXZvaWQgYWRkaW5nIGhhbmRsZU1lZGlhUXVlcnkgYXMgYSBkZXBcbiAgY29uc3QgbWVkaWFMaXN0ZW5lciA9IFJlYWN0LnVzZVJlZihoYW5kbGVNZWRpYVF1ZXJ5KTtcbiAgbWVkaWFMaXN0ZW5lci5jdXJyZW50ID0gaGFuZGxlTWVkaWFRdWVyeTtcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBjb25zdCBoYW5kbGVyID0gKC4uLmFyZ3MpID0+IG1lZGlhTGlzdGVuZXIuY3VycmVudCguLi5hcmdzKTtcblxuICAgIC8vIEFsd2F5cyBsaXN0ZW4gdG8gU3lzdGVtIHByZWZlcmVuY2VcbiAgICBjb25zdCBtZWRpYSA9IHdpbmRvdy5tYXRjaE1lZGlhKCcocHJlZmVycy1jb2xvci1zY2hlbWU6IGRhcmspJyk7XG5cbiAgICAvLyBJbnRlbnRpb25hbGx5IHVzZSBkZXByZWNhdGVkIGxpc3RlbmVyIG1ldGhvZHMgdG8gc3VwcG9ydCBpT1MgJiBvbGQgYnJvd3NlcnNcbiAgICBtZWRpYS5hZGRMaXN0ZW5lcihoYW5kbGVyKTtcbiAgICBoYW5kbGVyKG1lZGlhKTtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgbWVkaWEucmVtb3ZlTGlzdGVuZXIoaGFuZGxlcik7XG4gICAgfTtcbiAgfSwgW10pO1xuXG4gIC8vIEhhbmRsZSB3aGVuIGxvY2FsU3RvcmFnZSBoYXMgY2hhbmdlZFxuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChzdG9yYWdlV2luZG93KSB7XG4gICAgICBjb25zdCBoYW5kbGVTdG9yYWdlID0gZXZlbnQgPT4ge1xuICAgICAgICBjb25zdCB2YWx1ZSA9IGV2ZW50Lm5ld1ZhbHVlO1xuICAgICAgICBpZiAodHlwZW9mIGV2ZW50LmtleSA9PT0gJ3N0cmluZycgJiYgZXZlbnQua2V5LnN0YXJ0c1dpdGgoY29sb3JTY2hlbWVTdG9yYWdlS2V5KSAmJiAoIXZhbHVlIHx8IGpvaW5lZENvbG9yU2NoZW1lcy5tYXRjaCh2YWx1ZSkpKSB7XG4gICAgICAgICAgLy8gSWYgdGhlIGtleSBpcyBkZWxldGVkLCB2YWx1ZSB3aWxsIGJlIG51bGwgdGhlbiByZXNldCBjb2xvciBzY2hlbWUgdG8gdGhlIGRlZmF1bHQgb25lLlxuICAgICAgICAgIGlmIChldmVudC5rZXkuZW5kc1dpdGgoJ2xpZ2h0JykpIHtcbiAgICAgICAgICAgIHNldENvbG9yU2NoZW1lKHtcbiAgICAgICAgICAgICAgbGlnaHQ6IHZhbHVlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGV2ZW50LmtleS5lbmRzV2l0aCgnZGFyaycpKSB7XG4gICAgICAgICAgICBzZXRDb2xvclNjaGVtZSh7XG4gICAgICAgICAgICAgIGRhcms6IHZhbHVlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGV2ZW50LmtleSA9PT0gbW9kZVN0b3JhZ2VLZXkgJiYgKCF2YWx1ZSB8fCBbJ2xpZ2h0JywgJ2RhcmsnLCAnc3lzdGVtJ10uaW5jbHVkZXModmFsdWUpKSkge1xuICAgICAgICAgIHNldE1vZGUodmFsdWUgfHwgZGVmYXVsdE1vZGUpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgLy8gRm9yIHN5bmNpbmcgY29sb3Itc2NoZW1lIGNoYW5nZXMgYmV0d2VlbiBpZnJhbWVzXG4gICAgICBzdG9yYWdlV2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3N0b3JhZ2UnLCBoYW5kbGVTdG9yYWdlKTtcbiAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgIHN0b3JhZ2VXaW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignc3RvcmFnZScsIGhhbmRsZVN0b3JhZ2UpO1xuICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfSwgW3NldENvbG9yU2NoZW1lLCBzZXRNb2RlLCBtb2RlU3RvcmFnZUtleSwgY29sb3JTY2hlbWVTdG9yYWdlS2V5LCBqb2luZWRDb2xvclNjaGVtZXMsIGRlZmF1bHRNb2RlLCBzdG9yYWdlV2luZG93XSk7XG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgc3RhdGUsIHtcbiAgICBjb2xvclNjaGVtZSxcbiAgICBzZXRNb2RlLFxuICAgIHNldENvbG9yU2NoZW1lXG4gIH0pO1xufSIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2Zvcm1hdE11aUVycm9yTWVzc2FnZSBmcm9tIFwiQG11aS91dGlscy9mb3JtYXRNdWlFcnJvck1lc3NhZ2VcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImNvbG9yU2NoZW1lc1wiLCBcImNvbXBvbmVudHNcIiwgXCJnZW5lcmF0ZUNzc1ZhcnNcIiwgXCJjc3NWYXJQcmVmaXhcIl07XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGRlZXBtZXJnZSBmcm9tICdAbXVpL3V0aWxzL2RlZXBtZXJnZSc7XG5pbXBvcnQgeyBHbG9iYWxTdHlsZXMgfSBmcm9tICdAbXVpL3N0eWxlZC1lbmdpbmUnO1xuaW1wb3J0IHsgdXNlVGhlbWUgYXMgbXVpVXNlVGhlbWUgfSBmcm9tICdAbXVpL3ByaXZhdGUtdGhlbWluZyc7XG5pbXBvcnQgVGhlbWVQcm92aWRlciBmcm9tICcuLi9UaGVtZVByb3ZpZGVyJztcbmltcG9ydCBJbml0Q29sb3JTY2hlbWVTY3JpcHQsIHsgREVGQVVMVF9BVFRSSUJVVEUsIERFRkFVTFRfQ09MT1JfU0NIRU1FX1NUT1JBR0VfS0VZLCBERUZBVUxUX01PREVfU1RPUkFHRV9LRVkgfSBmcm9tICcuLi9Jbml0Q29sb3JTY2hlbWVTY3JpcHQvSW5pdENvbG9yU2NoZW1lU2NyaXB0JztcbmltcG9ydCB1c2VDdXJyZW50Q29sb3JTY2hlbWUgZnJvbSAnLi91c2VDdXJyZW50Q29sb3JTY2hlbWUnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmltcG9ydCB7IGpzeHMgYXMgX2pzeHMgfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmV4cG9ydCBjb25zdCBESVNBQkxFX0NTU19UUkFOU0lUSU9OID0gJyp7LXdlYmtpdC10cmFuc2l0aW9uOm5vbmUhaW1wb3J0YW50Oy1tb3otdHJhbnNpdGlvbjpub25lIWltcG9ydGFudDstby10cmFuc2l0aW9uOm5vbmUhaW1wb3J0YW50Oy1tcy10cmFuc2l0aW9uOm5vbmUhaW1wb3J0YW50O3RyYW5zaXRpb246bm9uZSFpbXBvcnRhbnR9JztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZUNzc1ZhcnNQcm92aWRlcihvcHRpb25zKSB7XG4gIGNvbnN0IHtcbiAgICB0aGVtZUlkLFxuICAgIC8qKlxuICAgICAqIFRoaXMgYHRoZW1lYCBvYmplY3QgbmVlZHMgdG8gZm9sbG93IGEgY2VydGFpbiBzdHJ1Y3R1cmUgdG9cbiAgICAgKiBiZSB1c2VkIGNvcnJlY3RseSBieSB0aGUgZmluZWwgYENzc1ZhcnNQcm92aWRlcmAuIEl0IHNob3VsZCBoYXZlIGFcbiAgICAgKiBgY29sb3JTY2hlbWVzYCBrZXkgd2l0aCB0aGUgbGlnaHQgYW5kIGRhcmsgKGFuZCBhbnkgb3RoZXIpIHBhbGV0dGUuXG4gICAgICogSXQgc2hvdWxkIGFsc28gaWRlYWxseSBoYXZlIGEgdmFycyBvYmplY3QgY3JlYXRlZCB1c2luZyBgcHJlcGFyZUNzc1ZhcnNgLlxuICAgICAqL1xuICAgIHRoZW1lOiBkZWZhdWx0VGhlbWUgPSB7fSxcbiAgICBhdHRyaWJ1dGU6IGRlZmF1bHRBdHRyaWJ1dGUgPSBERUZBVUxUX0FUVFJJQlVURSxcbiAgICBtb2RlU3RvcmFnZUtleTogZGVmYXVsdE1vZGVTdG9yYWdlS2V5ID0gREVGQVVMVF9NT0RFX1NUT1JBR0VfS0VZLFxuICAgIGNvbG9yU2NoZW1lU3RvcmFnZUtleTogZGVmYXVsdENvbG9yU2NoZW1lU3RvcmFnZUtleSA9IERFRkFVTFRfQ09MT1JfU0NIRU1FX1NUT1JBR0VfS0VZLFxuICAgIGRlZmF1bHRNb2RlOiBkZXNpZ25TeXN0ZW1Nb2RlID0gJ2xpZ2h0JyxcbiAgICBkZWZhdWx0Q29sb3JTY2hlbWU6IGRlc2lnblN5c3RlbUNvbG9yU2NoZW1lLFxuICAgIGRpc2FibGVUcmFuc2l0aW9uT25DaGFuZ2U6IGRlc2lnblN5c3RlbVRyYW5zaXRpb25PbkNoYW5nZSA9IGZhbHNlLFxuICAgIHJlc29sdmVUaGVtZSxcbiAgICBleGNsdWRlVmFyaWFibGVzRnJvbVJvb3RcbiAgfSA9IG9wdGlvbnM7XG4gIGlmICghZGVmYXVsdFRoZW1lLmNvbG9yU2NoZW1lcyB8fCB0eXBlb2YgZGVzaWduU3lzdGVtQ29sb3JTY2hlbWUgPT09ICdzdHJpbmcnICYmICFkZWZhdWx0VGhlbWUuY29sb3JTY2hlbWVzW2Rlc2lnblN5c3RlbUNvbG9yU2NoZW1lXSB8fCB0eXBlb2YgZGVzaWduU3lzdGVtQ29sb3JTY2hlbWUgPT09ICdvYmplY3QnICYmICFkZWZhdWx0VGhlbWUuY29sb3JTY2hlbWVzW2Rlc2lnblN5c3RlbUNvbG9yU2NoZW1lID09IG51bGwgPyB2b2lkIDAgOiBkZXNpZ25TeXN0ZW1Db2xvclNjaGVtZS5saWdodF0gfHwgdHlwZW9mIGRlc2lnblN5c3RlbUNvbG9yU2NoZW1lID09PSAnb2JqZWN0JyAmJiAhZGVmYXVsdFRoZW1lLmNvbG9yU2NoZW1lc1tkZXNpZ25TeXN0ZW1Db2xvclNjaGVtZSA9PSBudWxsID8gdm9pZCAwIDogZGVzaWduU3lzdGVtQ29sb3JTY2hlbWUuZGFya10pIHtcbiAgICBjb25zb2xlLmVycm9yKGBNVUk6IFxcYCR7ZGVzaWduU3lzdGVtQ29sb3JTY2hlbWV9XFxgIGRvZXMgbm90IGV4aXN0IGluIFxcYHRoZW1lLmNvbG9yU2NoZW1lc1xcYC5gKTtcbiAgfVxuICBjb25zdCBDb2xvclNjaGVtZUNvbnRleHQgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlQ29udGV4dCh1bmRlZmluZWQpO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIENvbG9yU2NoZW1lQ29udGV4dC5kaXNwbGF5TmFtZSA9ICdDb2xvclNjaGVtZUNvbnRleHQnO1xuICB9XG4gIGNvbnN0IHVzZUNvbG9yU2NoZW1lID0gKCkgPT4ge1xuICAgIGNvbnN0IHZhbHVlID0gUmVhY3QudXNlQ29udGV4dChDb2xvclNjaGVtZUNvbnRleHQpO1xuICAgIGlmICghdmFsdWUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBgTVVJOiBcXGB1c2VDb2xvclNjaGVtZVxcYCBtdXN0IGJlIGNhbGxlZCB1bmRlciA8Q3NzVmFyc1Byb3ZpZGVyIC8+YCA6IF9mb3JtYXRNdWlFcnJvck1lc3NhZ2UoMTkpKTtcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9O1xuICBmdW5jdGlvbiBDc3NWYXJzUHJvdmlkZXIocHJvcHMpIHtcbiAgICBjb25zdCB7XG4gICAgICBjaGlsZHJlbixcbiAgICAgIHRoZW1lOiB0aGVtZVByb3AgPSBkZWZhdWx0VGhlbWUsXG4gICAgICBtb2RlU3RvcmFnZUtleSA9IGRlZmF1bHRNb2RlU3RvcmFnZUtleSxcbiAgICAgIGNvbG9yU2NoZW1lU3RvcmFnZUtleSA9IGRlZmF1bHRDb2xvclNjaGVtZVN0b3JhZ2VLZXksXG4gICAgICBhdHRyaWJ1dGUgPSBkZWZhdWx0QXR0cmlidXRlLFxuICAgICAgZGVmYXVsdE1vZGUgPSBkZXNpZ25TeXN0ZW1Nb2RlLFxuICAgICAgZGVmYXVsdENvbG9yU2NoZW1lID0gZGVzaWduU3lzdGVtQ29sb3JTY2hlbWUsXG4gICAgICBkaXNhYmxlVHJhbnNpdGlvbk9uQ2hhbmdlID0gZGVzaWduU3lzdGVtVHJhbnNpdGlvbk9uQ2hhbmdlLFxuICAgICAgc3RvcmFnZVdpbmRvdyA9IHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogd2luZG93LFxuICAgICAgZG9jdW1lbnROb2RlID0gdHlwZW9mIGRvY3VtZW50ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IGRvY3VtZW50LFxuICAgICAgY29sb3JTY2hlbWVOb2RlID0gdHlwZW9mIGRvY3VtZW50ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCxcbiAgICAgIGNvbG9yU2NoZW1lU2VsZWN0b3IgPSAnOnJvb3QnLFxuICAgICAgZGlzYWJsZU5lc3RlZENvbnRleHQgPSBmYWxzZSxcbiAgICAgIGRpc2FibGVTdHlsZVNoZWV0R2VuZXJhdGlvbiA9IGZhbHNlXG4gICAgfSA9IHByb3BzO1xuICAgIGNvbnN0IGhhc01vdW50ZWQgPSBSZWFjdC51c2VSZWYoZmFsc2UpO1xuICAgIGNvbnN0IHVwcGVyVGhlbWUgPSBtdWlVc2VUaGVtZSgpO1xuICAgIGNvbnN0IGN0eCA9IFJlYWN0LnVzZUNvbnRleHQoQ29sb3JTY2hlbWVDb250ZXh0KTtcbiAgICBjb25zdCBuZXN0ZWQgPSAhIWN0eCAmJiAhZGlzYWJsZU5lc3RlZENvbnRleHQ7XG4gICAgY29uc3Qgc2NvcGVkVGhlbWUgPSB0aGVtZVByb3BbdGhlbWVJZF07XG4gICAgY29uc3QgX3JlZiA9IHNjb3BlZFRoZW1lIHx8IHRoZW1lUHJvcCxcbiAgICAgIHtcbiAgICAgICAgY29sb3JTY2hlbWVzID0ge30sXG4gICAgICAgIGNvbXBvbmVudHMgPSB7fSxcbiAgICAgICAgZ2VuZXJhdGVDc3NWYXJzID0gKCkgPT4gKHtcbiAgICAgICAgICB2YXJzOiB7fSxcbiAgICAgICAgICBjc3M6IHt9XG4gICAgICAgIH0pLFxuICAgICAgICBjc3NWYXJQcmVmaXhcbiAgICAgIH0gPSBfcmVmLFxuICAgICAgcmVzdFRoZW1lUHJvcCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWYsIF9leGNsdWRlZCk7XG4gICAgY29uc3QgYWxsQ29sb3JTY2hlbWVzID0gT2JqZWN0LmtleXMoY29sb3JTY2hlbWVzKTtcbiAgICBjb25zdCBkZWZhdWx0TGlnaHRDb2xvclNjaGVtZSA9IHR5cGVvZiBkZWZhdWx0Q29sb3JTY2hlbWUgPT09ICdzdHJpbmcnID8gZGVmYXVsdENvbG9yU2NoZW1lIDogZGVmYXVsdENvbG9yU2NoZW1lLmxpZ2h0O1xuICAgIGNvbnN0IGRlZmF1bHREYXJrQ29sb3JTY2hlbWUgPSB0eXBlb2YgZGVmYXVsdENvbG9yU2NoZW1lID09PSAnc3RyaW5nJyA/IGRlZmF1bHRDb2xvclNjaGVtZSA6IGRlZmF1bHRDb2xvclNjaGVtZS5kYXJrO1xuXG4gICAgLy8gMS4gR2V0IHRoZSBkYXRhIGFib3V0IHRoZSBgbW9kZWAsIGBjb2xvclNjaGVtZWAsIGFuZCBzZXR0ZXIgZnVuY3Rpb25zLlxuICAgIGNvbnN0IHtcbiAgICAgIG1vZGU6IHN0YXRlTW9kZSxcbiAgICAgIHNldE1vZGUsXG4gICAgICBzeXN0ZW1Nb2RlLFxuICAgICAgbGlnaHRDb2xvclNjaGVtZSxcbiAgICAgIGRhcmtDb2xvclNjaGVtZSxcbiAgICAgIGNvbG9yU2NoZW1lOiBzdGF0ZUNvbG9yU2NoZW1lLFxuICAgICAgc2V0Q29sb3JTY2hlbWVcbiAgICB9ID0gdXNlQ3VycmVudENvbG9yU2NoZW1lKHtcbiAgICAgIHN1cHBvcnRlZENvbG9yU2NoZW1lczogYWxsQ29sb3JTY2hlbWVzLFxuICAgICAgZGVmYXVsdExpZ2h0Q29sb3JTY2hlbWUsXG4gICAgICBkZWZhdWx0RGFya0NvbG9yU2NoZW1lLFxuICAgICAgbW9kZVN0b3JhZ2VLZXksXG4gICAgICBjb2xvclNjaGVtZVN0b3JhZ2VLZXksXG4gICAgICBkZWZhdWx0TW9kZSxcbiAgICAgIHN0b3JhZ2VXaW5kb3dcbiAgICB9KTtcbiAgICBsZXQgbW9kZSA9IHN0YXRlTW9kZTtcbiAgICBsZXQgY29sb3JTY2hlbWUgPSBzdGF0ZUNvbG9yU2NoZW1lO1xuICAgIGlmIChuZXN0ZWQpIHtcbiAgICAgIG1vZGUgPSBjdHgubW9kZTtcbiAgICAgIGNvbG9yU2NoZW1lID0gY3R4LmNvbG9yU2NoZW1lO1xuICAgIH1cbiAgICBjb25zdCBjYWxjdWxhdGVkTW9kZSA9ICgoKSA9PiB7XG4gICAgICBpZiAobW9kZSkge1xuICAgICAgICByZXR1cm4gbW9kZTtcbiAgICAgIH1cbiAgICAgIC8vIFRoaXMgc2NvcGUgb2NjdXJzIG9uIHRoZSBzZXJ2ZXJcbiAgICAgIGlmIChkZWZhdWx0TW9kZSA9PT0gJ3N5c3RlbScpIHtcbiAgICAgICAgcmV0dXJuIGRlc2lnblN5c3RlbU1vZGU7XG4gICAgICB9XG4gICAgICByZXR1cm4gZGVmYXVsdE1vZGU7XG4gICAgfSkoKTtcbiAgICBjb25zdCBjYWxjdWxhdGVkQ29sb3JTY2hlbWUgPSAoKCkgPT4ge1xuICAgICAgaWYgKCFjb2xvclNjaGVtZSkge1xuICAgICAgICAvLyBUaGlzIHNjb3BlIG9jY3VycyBvbiB0aGUgc2VydmVyXG4gICAgICAgIGlmIChjYWxjdWxhdGVkTW9kZSA9PT0gJ2RhcmsnKSB7XG4gICAgICAgICAgcmV0dXJuIGRlZmF1bHREYXJrQ29sb3JTY2hlbWU7XG4gICAgICAgIH1cbiAgICAgICAgLy8gdXNlIGxpZ2h0IGNvbG9yIHNjaGVtZSwgaWYgZGVmYXVsdCBtb2RlIGlzICdsaWdodCcgfCAnc3lzdGVtJ1xuICAgICAgICByZXR1cm4gZGVmYXVsdExpZ2h0Q29sb3JTY2hlbWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gY29sb3JTY2hlbWU7XG4gICAgfSkoKTtcblxuICAgIC8vIDIuIENyZWF0ZSBDU1MgdmFyaWFibGVzIGFuZCBzdG9yZSB0aGVtIGluIG9iamVjdHMgKHRvIGJlIGdlbmVyYXRlZCBpbiBzdHlsZXNoZWV0cyBpbiB0aGUgZmluYWwgc3RlcClcbiAgICBjb25zdCB7XG4gICAgICBjc3M6IHJvb3RDc3MsXG4gICAgICB2YXJzOiByb290VmFyc1xuICAgIH0gPSBnZW5lcmF0ZUNzc1ZhcnMoKTtcblxuICAgIC8vIDMuIFN0YXJ0IGNvbXBvc2luZyB0aGUgdGhlbWUgb2JqZWN0XG4gICAgY29uc3QgdGhlbWUgPSBfZXh0ZW5kcyh7fSwgcmVzdFRoZW1lUHJvcCwge1xuICAgICAgY29tcG9uZW50cyxcbiAgICAgIGNvbG9yU2NoZW1lcyxcbiAgICAgIGNzc1ZhclByZWZpeCxcbiAgICAgIHZhcnM6IHJvb3RWYXJzLFxuICAgICAgZ2V0Q29sb3JTY2hlbWVTZWxlY3RvcjogdGFyZ2V0Q29sb3JTY2hlbWUgPT4gYFske2F0dHJpYnV0ZX09XCIke3RhcmdldENvbG9yU2NoZW1lfVwiXSAmYFxuICAgIH0pO1xuXG4gICAgLy8gNC4gQ3JlYXRlIGNvbG9yIENTUyB2YXJpYWJsZXMgYW5kIHN0b3JlIHRoZW0gaW4gb2JqZWN0cyAodG8gYmUgZ2VuZXJhdGVkIGluIHN0eWxlc2hlZXRzIGluIHRoZSBmaW5hbCBzdGVwKVxuICAgIC8vICAgIFRoZSBkZWZhdWx0IGNvbG9yIHNjaGVtZSBzdHlsZXNoZWV0IGlzIGNvbnN0cnVjdGVkIHRvIGhhdmUgdGhlIGxlYXN0IENTUyBzcGVjaWZpY2l0eS5cbiAgICAvLyAgICBUaGUgb3RoZXIgY29sb3Igc2NoZW1lcyB1c2VzIHNlbGVjdG9yLCBkZWZhdWx0IGFzIGRhdGEgYXR0cmlidXRlLCB0byBpbmNyZWFzZSB0aGUgQ1NTIHNwZWNpZmljaXR5IHNvIHRoYXQgdGhleSBjYW4gb3ZlcnJpZGUgdGhlIGRlZmF1bHQgY29sb3Igc2NoZW1lIHN0eWxlc2hlZXQuXG4gICAgY29uc3QgZGVmYXVsdENvbG9yU2NoZW1lU3R5bGVTaGVldCA9IHt9O1xuICAgIGNvbnN0IG90aGVyQ29sb3JTY2hlbWVzU3R5bGVTaGVldCA9IHt9O1xuICAgIE9iamVjdC5lbnRyaWVzKGNvbG9yU2NoZW1lcykuZm9yRWFjaCgoW2tleSwgc2NoZW1lXSkgPT4ge1xuICAgICAgY29uc3Qge1xuICAgICAgICBjc3MsXG4gICAgICAgIHZhcnNcbiAgICAgIH0gPSBnZW5lcmF0ZUNzc1ZhcnMoa2V5KTtcbiAgICAgIHRoZW1lLnZhcnMgPSBkZWVwbWVyZ2UodGhlbWUudmFycywgdmFycyk7XG4gICAgICBpZiAoa2V5ID09PSBjYWxjdWxhdGVkQ29sb3JTY2hlbWUpIHtcbiAgICAgICAgLy8gNC4xIE1lcmdlIHRoZSBzZWxlY3RlZCBjb2xvciBzY2hlbWUgdG8gdGhlIHRoZW1lXG4gICAgICAgIE9iamVjdC5rZXlzKHNjaGVtZSkuZm9yRWFjaChzY2hlbWVLZXkgPT4ge1xuICAgICAgICAgIGlmIChzY2hlbWVbc2NoZW1lS2V5XSAmJiB0eXBlb2Ygc2NoZW1lW3NjaGVtZUtleV0gPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAvLyBzaGFsbG93IG1lcmdlIHRoZSAxc3QgbGV2ZWwgc3RydWN0dXJlIG9mIHRoZSB0aGVtZS5cbiAgICAgICAgICAgIHRoZW1lW3NjaGVtZUtleV0gPSBfZXh0ZW5kcyh7fSwgdGhlbWVbc2NoZW1lS2V5XSwgc2NoZW1lW3NjaGVtZUtleV0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGVtZVtzY2hlbWVLZXldID0gc2NoZW1lW3NjaGVtZUtleV07XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKHRoZW1lLnBhbGV0dGUpIHtcbiAgICAgICAgICB0aGVtZS5wYWxldHRlLmNvbG9yU2NoZW1lID0ga2V5O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBjb25zdCByZXNvbHZlZERlZmF1bHRDb2xvclNjaGVtZSA9ICgoKSA9PiB7XG4gICAgICAgIGlmICh0eXBlb2YgZGVmYXVsdENvbG9yU2NoZW1lID09PSAnc3RyaW5nJykge1xuICAgICAgICAgIHJldHVybiBkZWZhdWx0Q29sb3JTY2hlbWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRlZmF1bHRNb2RlID09PSAnZGFyaycpIHtcbiAgICAgICAgICByZXR1cm4gZGVmYXVsdENvbG9yU2NoZW1lLmRhcms7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGRlZmF1bHRDb2xvclNjaGVtZS5saWdodDtcbiAgICAgIH0pKCk7XG4gICAgICBpZiAoa2V5ID09PSByZXNvbHZlZERlZmF1bHRDb2xvclNjaGVtZSkge1xuICAgICAgICBpZiAoZXhjbHVkZVZhcmlhYmxlc0Zyb21Sb290KSB7XG4gICAgICAgICAgY29uc3QgZXhjbHVkZWRWYXJpYWJsZXMgPSB7fTtcbiAgICAgICAgICBleGNsdWRlVmFyaWFibGVzRnJvbVJvb3QoY3NzVmFyUHJlZml4KS5mb3JFYWNoKGNzc1ZhciA9PiB7XG4gICAgICAgICAgICBleGNsdWRlZFZhcmlhYmxlc1tjc3NWYXJdID0gY3NzW2Nzc1Zhcl07XG4gICAgICAgICAgICBkZWxldGUgY3NzW2Nzc1Zhcl07XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgZGVmYXVsdENvbG9yU2NoZW1lU3R5bGVTaGVldFtgWyR7YXR0cmlidXRlfT1cIiR7a2V5fVwiXWBdID0gZXhjbHVkZWRWYXJpYWJsZXM7XG4gICAgICAgIH1cbiAgICAgICAgZGVmYXVsdENvbG9yU2NoZW1lU3R5bGVTaGVldFtgJHtjb2xvclNjaGVtZVNlbGVjdG9yfSwgWyR7YXR0cmlidXRlfT1cIiR7a2V5fVwiXWBdID0gY3NzO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb3RoZXJDb2xvclNjaGVtZXNTdHlsZVNoZWV0W2Ake2NvbG9yU2NoZW1lU2VsZWN0b3IgPT09ICc6cm9vdCcgPyAnJyA6IGNvbG9yU2NoZW1lU2VsZWN0b3J9WyR7YXR0cmlidXRlfT1cIiR7a2V5fVwiXWBdID0gY3NzO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHRoZW1lLnZhcnMgPSBkZWVwbWVyZ2UodGhlbWUudmFycywgcm9vdFZhcnMpO1xuXG4gICAgLy8gNS4gRGVjbGFyaW5nIGVmZmVjdHNcbiAgICAvLyA1LjEgVXBkYXRlcyB0aGUgc2VsZWN0b3IgdmFsdWUgdG8gdXNlIHRoZSBjdXJyZW50IGNvbG9yIHNjaGVtZSB3aGljaCB0ZWxscyBDU1MgdG8gdXNlIHRoZSBwcm9wZXIgc3R5bGVzaGVldC5cbiAgICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgaWYgKGNvbG9yU2NoZW1lICYmIGNvbG9yU2NoZW1lTm9kZSkge1xuICAgICAgICAvLyBhdHRhY2hlcyBhdHRyaWJ1dGUgdG8gPGh0bWw+IGJlY2F1c2UgdGhlIGNzcyB2YXJpYWJsZXMgYXJlIGF0dGFjaGVkIHRvIDpyb290IChodG1sKVxuICAgICAgICBjb2xvclNjaGVtZU5vZGUuc2V0QXR0cmlidXRlKGF0dHJpYnV0ZSwgY29sb3JTY2hlbWUpO1xuICAgICAgfVxuICAgIH0sIFtjb2xvclNjaGVtZSwgYXR0cmlidXRlLCBjb2xvclNjaGVtZU5vZGVdKTtcblxuICAgIC8vIDUuMiBSZW1vdmUgdGhlIENTUyB0cmFuc2l0aW9uIHdoZW4gY29sb3Igc2NoZW1lIGNoYW5nZXMgdG8gY3JlYXRlIGluc3RhbnQgZXhwZXJpZW5jZS5cbiAgICAvLyBjcmVkaXQ6IGh0dHBzOi8vZ2l0aHViLmNvbS9wYWNvY291cnNleS9uZXh0LXRoZW1lcy9ibG9iL2I1YzJiYWQ1MGRlMmQ2MWFkN2I1MmE5YzVjZGM4MDFhNzg1MDdkN2EvaW5kZXgudHN4I0wzMTNcbiAgICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgbGV0IHRpbWVyO1xuICAgICAgaWYgKGRpc2FibGVUcmFuc2l0aW9uT25DaGFuZ2UgJiYgaGFzTW91bnRlZC5jdXJyZW50ICYmIGRvY3VtZW50Tm9kZSkge1xuICAgICAgICBjb25zdCBjc3MgPSBkb2N1bWVudE5vZGUuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcbiAgICAgICAgY3NzLmFwcGVuZENoaWxkKGRvY3VtZW50Tm9kZS5jcmVhdGVUZXh0Tm9kZShESVNBQkxFX0NTU19UUkFOU0lUSU9OKSk7XG4gICAgICAgIGRvY3VtZW50Tm9kZS5oZWFkLmFwcGVuZENoaWxkKGNzcyk7XG5cbiAgICAgICAgLy8gRm9yY2UgYnJvd3NlciByZXBhaW50XG4gICAgICAgICgoKSA9PiB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShkb2N1bWVudE5vZGUuYm9keSkpKCk7XG4gICAgICAgIHRpbWVyID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgZG9jdW1lbnROb2RlLmhlYWQucmVtb3ZlQ2hpbGQoY3NzKTtcbiAgICAgICAgfSwgMSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICBjbGVhclRpbWVvdXQodGltZXIpO1xuICAgICAgfTtcbiAgICB9LCBbY29sb3JTY2hlbWUsIGRpc2FibGVUcmFuc2l0aW9uT25DaGFuZ2UsIGRvY3VtZW50Tm9kZV0pO1xuICAgIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICBoYXNNb3VudGVkLmN1cnJlbnQgPSB0cnVlO1xuICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgaGFzTW91bnRlZC5jdXJyZW50ID0gZmFsc2U7XG4gICAgICB9O1xuICAgIH0sIFtdKTtcbiAgICBjb25zdCBjb250ZXh0VmFsdWUgPSBSZWFjdC51c2VNZW1vKCgpID0+ICh7XG4gICAgICBhbGxDb2xvclNjaGVtZXMsXG4gICAgICBjb2xvclNjaGVtZSxcbiAgICAgIGRhcmtDb2xvclNjaGVtZSxcbiAgICAgIGxpZ2h0Q29sb3JTY2hlbWUsXG4gICAgICBtb2RlLFxuICAgICAgc2V0Q29sb3JTY2hlbWUsXG4gICAgICBzZXRNb2RlLFxuICAgICAgc3lzdGVtTW9kZVxuICAgIH0pLCBbYWxsQ29sb3JTY2hlbWVzLCBjb2xvclNjaGVtZSwgZGFya0NvbG9yU2NoZW1lLCBsaWdodENvbG9yU2NoZW1lLCBtb2RlLCBzZXRDb2xvclNjaGVtZSwgc2V0TW9kZSwgc3lzdGVtTW9kZV0pO1xuICAgIGxldCBzaG91bGRHZW5lcmF0ZVN0eWxlU2hlZXQgPSB0cnVlO1xuICAgIGlmIChkaXNhYmxlU3R5bGVTaGVldEdlbmVyYXRpb24gfHwgbmVzdGVkICYmICh1cHBlclRoZW1lID09IG51bGwgPyB2b2lkIDAgOiB1cHBlclRoZW1lLmNzc1ZhclByZWZpeCkgPT09IGNzc1ZhclByZWZpeCkge1xuICAgICAgc2hvdWxkR2VuZXJhdGVTdHlsZVNoZWV0ID0gZmFsc2U7XG4gICAgfVxuICAgIGNvbnN0IGVsZW1lbnQgPSAvKiNfX1BVUkVfXyovX2pzeHMoUmVhY3QuRnJhZ21lbnQsIHtcbiAgICAgIGNoaWxkcmVuOiBbc2hvdWxkR2VuZXJhdGVTdHlsZVNoZWV0ICYmIC8qI19fUFVSRV9fKi9fanN4cyhSZWFjdC5GcmFnbWVudCwge1xuICAgICAgICBjaGlsZHJlbjogWy8qI19fUFVSRV9fKi9fanN4KEdsb2JhbFN0eWxlcywge1xuICAgICAgICAgIHN0eWxlczoge1xuICAgICAgICAgICAgW2NvbG9yU2NoZW1lU2VsZWN0b3JdOiByb290Q3NzXG4gICAgICAgICAgfVxuICAgICAgICB9KSwgLyojX19QVVJFX18qL19qc3goR2xvYmFsU3R5bGVzLCB7XG4gICAgICAgICAgc3R5bGVzOiBkZWZhdWx0Q29sb3JTY2hlbWVTdHlsZVNoZWV0XG4gICAgICAgIH0pLCAvKiNfX1BVUkVfXyovX2pzeChHbG9iYWxTdHlsZXMsIHtcbiAgICAgICAgICBzdHlsZXM6IG90aGVyQ29sb3JTY2hlbWVzU3R5bGVTaGVldFxuICAgICAgICB9KV1cbiAgICAgIH0pLCAvKiNfX1BVUkVfXyovX2pzeChUaGVtZVByb3ZpZGVyLCB7XG4gICAgICAgIHRoZW1lSWQ6IHNjb3BlZFRoZW1lID8gdGhlbWVJZCA6IHVuZGVmaW5lZCxcbiAgICAgICAgdGhlbWU6IHJlc29sdmVUaGVtZSA/IHJlc29sdmVUaGVtZSh0aGVtZSkgOiB0aGVtZSxcbiAgICAgICAgY2hpbGRyZW46IGNoaWxkcmVuXG4gICAgICB9KV1cbiAgICB9KTtcbiAgICBpZiAobmVzdGVkKSB7XG4gICAgICByZXR1cm4gZWxlbWVudDtcbiAgICB9XG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KENvbG9yU2NoZW1lQ29udGV4dC5Qcm92aWRlciwge1xuICAgICAgdmFsdWU6IGNvbnRleHRWYWx1ZSxcbiAgICAgIGNoaWxkcmVuOiBlbGVtZW50XG4gICAgfSk7XG4gIH1cbiAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gQ3NzVmFyc1Byb3ZpZGVyLnByb3BUeXBlcyA9IHtcbiAgICAvKipcbiAgICAgKiBUaGUgYm9keSBhdHRyaWJ1dGUgbmFtZSB0byBhdHRhY2ggY29sb3JTY2hlbWUuXG4gICAgICovXG4gICAgYXR0cmlidXRlOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIC8qKlxuICAgICAqIFRoZSBjb21wb25lbnQgdHJlZS5cbiAgICAgKi9cbiAgICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gICAgLyoqXG4gICAgICogVGhlIG5vZGUgdXNlZCB0byBhdHRhY2ggdGhlIGNvbG9yLXNjaGVtZSBhdHRyaWJ1dGVcbiAgICAgKi9cbiAgICBjb2xvclNjaGVtZU5vZGU6IFByb3BUeXBlcy5hbnksXG4gICAgLyoqXG4gICAgICogVGhlIENTUyBzZWxlY3RvciBmb3IgYXR0YWNoaW5nIHRoZSBnZW5lcmF0ZWQgY3VzdG9tIHByb3BlcnRpZXNcbiAgICAgKi9cbiAgICBjb2xvclNjaGVtZVNlbGVjdG9yOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIC8qKlxuICAgICAqIGxvY2FsU3RvcmFnZSBrZXkgdXNlZCB0byBzdG9yZSBgY29sb3JTY2hlbWVgXG4gICAgICovXG4gICAgY29sb3JTY2hlbWVTdG9yYWdlS2V5OiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIC8qKlxuICAgICAqIFRoZSBpbml0aWFsIGNvbG9yIHNjaGVtZSB1c2VkLlxuICAgICAqL1xuICAgIGRlZmF1bHRDb2xvclNjaGVtZTogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLm9iamVjdF0pLFxuICAgIC8qKlxuICAgICAqIFRoZSBpbml0aWFsIG1vZGUgdXNlZC5cbiAgICAgKi9cbiAgICBkZWZhdWx0TW9kZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICAvKipcbiAgICAgKiBJZiBgdHJ1ZWAsIHRoZSBwcm92aWRlciBjcmVhdGVzIGl0cyBvd24gY29udGV4dCBhbmQgZ2VuZXJhdGUgc3R5bGVzaGVldCBhcyBpZiBpdCBpcyBhIHJvb3QgYENzc1ZhcnNQcm92aWRlcmAuXG4gICAgICovXG4gICAgZGlzYWJsZU5lc3RlZENvbnRleHQ6IFByb3BUeXBlcy5ib29sLFxuICAgIC8qKlxuICAgICAqIElmIGB0cnVlYCwgdGhlIHN0eWxlIHNoZWV0IHdvbid0IGJlIGdlbmVyYXRlZC5cbiAgICAgKlxuICAgICAqIFRoaXMgaXMgdXNlZnVsIGZvciBjb250cm9sbGluZyBuZXN0ZWQgQ3NzVmFyc1Byb3ZpZGVyIGJlaGF2aW9yLlxuICAgICAqL1xuICAgIGRpc2FibGVTdHlsZVNoZWV0R2VuZXJhdGlvbjogUHJvcFR5cGVzLmJvb2wsXG4gICAgLyoqXG4gICAgICogRGlzYWJsZSBDU1MgdHJhbnNpdGlvbnMgd2hlbiBzd2l0Y2hpbmcgYmV0d2VlbiBtb2RlcyBvciBjb2xvciBzY2hlbWVzLlxuICAgICAqL1xuICAgIGRpc2FibGVUcmFuc2l0aW9uT25DaGFuZ2U6IFByb3BUeXBlcy5ib29sLFxuICAgIC8qKlxuICAgICAqIFRoZSBkb2N1bWVudCB0byBhdHRhY2ggdGhlIGF0dHJpYnV0ZSB0by5cbiAgICAgKi9cbiAgICBkb2N1bWVudE5vZGU6IFByb3BUeXBlcy5hbnksXG4gICAgLyoqXG4gICAgICogVGhlIGtleSBpbiB0aGUgbG9jYWwgc3RvcmFnZSB1c2VkIHRvIHN0b3JlIGN1cnJlbnQgY29sb3Igc2NoZW1lLlxuICAgICAqL1xuICAgIG1vZGVTdG9yYWdlS2V5OiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIC8qKlxuICAgICAqIFRoZSB3aW5kb3cgdGhhdCBhdHRhY2hlcyB0aGUgJ3N0b3JhZ2UnIGV2ZW50IGxpc3RlbmVyLlxuICAgICAqIEBkZWZhdWx0IHdpbmRvd1xuICAgICAqL1xuICAgIHN0b3JhZ2VXaW5kb3c6IFByb3BUeXBlcy5hbnksXG4gICAgLyoqXG4gICAgICogVGhlIGNhbGN1bGF0ZWQgdGhlbWUgb2JqZWN0IHRoYXQgd2lsbCBiZSBwYXNzZWQgdGhyb3VnaCBjb250ZXh0LlxuICAgICAqL1xuICAgIHRoZW1lOiBQcm9wVHlwZXMub2JqZWN0XG4gIH0gOiB2b2lkIDA7XG4gIGNvbnN0IGRlZmF1bHRMaWdodENvbG9yU2NoZW1lID0gdHlwZW9mIGRlc2lnblN5c3RlbUNvbG9yU2NoZW1lID09PSAnc3RyaW5nJyA/IGRlc2lnblN5c3RlbUNvbG9yU2NoZW1lIDogZGVzaWduU3lzdGVtQ29sb3JTY2hlbWUubGlnaHQ7XG4gIGNvbnN0IGRlZmF1bHREYXJrQ29sb3JTY2hlbWUgPSB0eXBlb2YgZGVzaWduU3lzdGVtQ29sb3JTY2hlbWUgPT09ICdzdHJpbmcnID8gZGVzaWduU3lzdGVtQ29sb3JTY2hlbWUgOiBkZXNpZ25TeXN0ZW1Db2xvclNjaGVtZS5kYXJrO1xuICBjb25zdCBnZXRJbml0Q29sb3JTY2hlbWVTY3JpcHQgPSBwYXJhbXMgPT4gSW5pdENvbG9yU2NoZW1lU2NyaXB0KF9leHRlbmRzKHtcbiAgICBhdHRyaWJ1dGU6IGRlZmF1bHRBdHRyaWJ1dGUsXG4gICAgY29sb3JTY2hlbWVTdG9yYWdlS2V5OiBkZWZhdWx0Q29sb3JTY2hlbWVTdG9yYWdlS2V5LFxuICAgIGRlZmF1bHRNb2RlOiBkZXNpZ25TeXN0ZW1Nb2RlLFxuICAgIGRlZmF1bHRMaWdodENvbG9yU2NoZW1lLFxuICAgIGRlZmF1bHREYXJrQ29sb3JTY2hlbWUsXG4gICAgbW9kZVN0b3JhZ2VLZXk6IGRlZmF1bHRNb2RlU3RvcmFnZUtleVxuICB9LCBwYXJhbXMpKTtcbiAgcmV0dXJuIHtcbiAgICBDc3NWYXJzUHJvdmlkZXIsXG4gICAgdXNlQ29sb3JTY2hlbWUsXG4gICAgZ2V0SW5pdENvbG9yU2NoZW1lU2NyaXB0XG4gIH07XG59IiwiLyoqXG4gKiBUaGUgYmVuZWZpdCBvZiB0aGlzIGZ1bmN0aW9uIGlzIHRvIGhlbHAgZGV2ZWxvcGVycyBnZXQgQ1NTIHZhciBmcm9tIHRoZW1lIHdpdGhvdXQgc3BlY2lmeWluZyB0aGUgd2hvbGUgdmFyaWFibGVcbiAqIGFuZCB0aGV5IGRvZXMgbm90IG5lZWQgdG8gcmVtZW1iZXIgdGhlIHByZWZpeCAoZGVmaW5lZCBvbmNlKS5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlR2V0Q3NzVmFyKHByZWZpeCA9ICcnKSB7XG4gIGZ1bmN0aW9uIGFwcGVuZFZhciguLi52YXJzKSB7XG4gICAgaWYgKCF2YXJzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuICcnO1xuICAgIH1cbiAgICBjb25zdCB2YWx1ZSA9IHZhcnNbMF07XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgJiYgIXZhbHVlLm1hdGNoKC8oI3xcXCh8XFwpfCgtPyhcXGQqXFwuKT9cXGQrKShweHxlbXwlfGV4fGNofHJlbXx2d3x2aHx2bWlufHZtYXh8Y218bW18aW58cHR8cGMpKXxeKC0/KFxcZCpcXC4pP1xcZCspJHwoXFxkKyBcXGQrIFxcZCspLykpIHtcbiAgICAgIHJldHVybiBgLCB2YXIoLS0ke3ByZWZpeCA/IGAke3ByZWZpeH0tYCA6ICcnfSR7dmFsdWV9JHthcHBlbmRWYXIoLi4udmFycy5zbGljZSgxKSl9KWA7XG4gICAgfVxuICAgIHJldHVybiBgLCAke3ZhbHVlfWA7XG4gIH1cblxuICAvLyBBZGRpdGlvbmFsVmFycyBtYWtlcyBgZ2V0Q3NzVmFyYCBsZXNzIHN0cmljdCwgc28gaXQgY2FuIGJlIHVzZSBsaWtlIHRoaXMgYGdldENzc1Zhcignbm9uLW11aS12YXJpYWJsZScpYCB3aXRob3V0IHR5cGUgZXJyb3IuXG4gIGNvbnN0IGdldENzc1ZhciA9IChmaWVsZCwgLi4uZmFsbGJhY2tzKSA9PiB7XG4gICAgcmV0dXJuIGB2YXIoLS0ke3ByZWZpeCA/IGAke3ByZWZpeH0tYCA6ICcnfSR7ZmllbGR9JHthcHBlbmRWYXIoLi4uZmFsbGJhY2tzKX0pYDtcbiAgfTtcbiAgcmV0dXJuIGdldENzc1Zhcjtcbn0iLCJmdW5jdGlvbiBfdHlwZW9mKG8pIHtcbiAgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiO1xuXG4gIHJldHVybiBfdHlwZW9mID0gXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgXCJzeW1ib2xcIiA9PSB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID8gZnVuY3Rpb24gKG8pIHtcbiAgICByZXR1cm4gdHlwZW9mIG87XG4gIH0gOiBmdW5jdGlvbiAobykge1xuICAgIHJldHVybiBvICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIG8uY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvO1xuICB9LCBfdHlwZW9mKG8pO1xufVxuZXhwb3J0IHsgX3R5cGVvZiBhcyBkZWZhdWx0IH07IiwiaW1wb3J0IF90eXBlb2YgZnJvbSBcIi4vdHlwZW9mLmpzXCI7XG5pbXBvcnQgdG9QcmltaXRpdmUgZnJvbSBcIi4vdG9QcmltaXRpdmUuanNcIjtcbmZ1bmN0aW9uIHRvUHJvcGVydHlLZXkodCkge1xuICB2YXIgaSA9IHRvUHJpbWl0aXZlKHQsIFwic3RyaW5nXCIpO1xuICByZXR1cm4gXCJzeW1ib2xcIiA9PSBfdHlwZW9mKGkpID8gaSA6IGkgKyBcIlwiO1xufVxuZXhwb3J0IHsgdG9Qcm9wZXJ0eUtleSBhcyBkZWZhdWx0IH07IiwiaW1wb3J0IF90eXBlb2YgZnJvbSBcIi4vdHlwZW9mLmpzXCI7XG5mdW5jdGlvbiB0b1ByaW1pdGl2ZSh0LCByKSB7XG4gIGlmIChcIm9iamVjdFwiICE9IF90eXBlb2YodCkgfHwgIXQpIHJldHVybiB0O1xuICB2YXIgZSA9IHRbU3ltYm9sLnRvUHJpbWl0aXZlXTtcbiAgaWYgKHZvaWQgMCAhPT0gZSkge1xuICAgIHZhciBpID0gZS5jYWxsKHQsIHIgfHwgXCJkZWZhdWx0XCIpO1xuICAgIGlmIChcIm9iamVjdFwiICE9IF90eXBlb2YoaSkpIHJldHVybiBpO1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJAQHRvUHJpbWl0aXZlIG11c3QgcmV0dXJuIGEgcHJpbWl0aXZlIHZhbHVlLlwiKTtcbiAgfVxuICByZXR1cm4gKFwic3RyaW5nXCIgPT09IHIgPyBTdHJpbmcgOiBOdW1iZXIpKHQpO1xufVxuZXhwb3J0IHsgdG9QcmltaXRpdmUgYXMgZGVmYXVsdCB9OyIsIi8qKlxuICogVGhpcyBmdW5jdGlvbiBjcmVhdGUgYW4gb2JqZWN0IGZyb20ga2V5cywgdmFsdWUgYW5kIHRoZW4gYXNzaWduIHRvIHRhcmdldFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmogOiB0aGUgdGFyZ2V0IG9iamVjdCB0byBiZSBhc3NpZ25lZFxuICogQHBhcmFtIHtzdHJpbmdbXX0ga2V5c1xuICogQHBhcmFtIHtzdHJpbmcgfCBudW1iZXJ9IHZhbHVlXG4gKlxuICogQGV4YW1wbGVcbiAqIGNvbnN0IHNvdXJjZSA9IHt9XG4gKiBhc3NpZ25OZXN0ZWRLZXlzKHNvdXJjZSwgWydwYWxldHRlJywgJ3ByaW1hcnknXSwgJ3ZhcigtLXBhbGV0dGUtcHJpbWFyeSknKVxuICogY29uc29sZS5sb2coc291cmNlKSAvLyB7IHBhbGV0dGU6IHsgcHJpbWFyeTogJ3ZhcigtLXBhbGV0dGUtcHJpbWFyeSknIH0gfVxuICpcbiAqIEBleGFtcGxlXG4gKiBjb25zdCBzb3VyY2UgPSB7IHBhbGV0dGU6IHsgcHJpbWFyeTogJ3ZhcigtLXBhbGV0dGUtcHJpbWFyeSknIH0gfVxuICogYXNzaWduTmVzdGVkS2V5cyhzb3VyY2UsIFsncGFsZXR0ZScsICdzZWNvbmRhcnknXSwgJ3ZhcigtLXBhbGV0dGUtc2Vjb25kYXJ5KScpXG4gKiBjb25zb2xlLmxvZyhzb3VyY2UpIC8vIHsgcGFsZXR0ZTogeyBwcmltYXJ5OiAndmFyKC0tcGFsZXR0ZS1wcmltYXJ5KScsIHNlY29uZGFyeTogJ3ZhcigtLXBhbGV0dGUtc2Vjb25kYXJ5KScgfSB9XG4gKi9cbmV4cG9ydCBjb25zdCBhc3NpZ25OZXN0ZWRLZXlzID0gKG9iaiwga2V5cywgdmFsdWUsIGFycmF5S2V5cyA9IFtdKSA9PiB7XG4gIGxldCB0ZW1wID0gb2JqO1xuICBrZXlzLmZvckVhY2goKGssIGluZGV4KSA9PiB7XG4gICAgaWYgKGluZGV4ID09PSBrZXlzLmxlbmd0aCAtIDEpIHtcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KHRlbXApKSB7XG4gICAgICAgIHRlbXBbTnVtYmVyKGspXSA9IHZhbHVlO1xuICAgICAgfSBlbHNlIGlmICh0ZW1wICYmIHR5cGVvZiB0ZW1wID09PSAnb2JqZWN0Jykge1xuICAgICAgICB0ZW1wW2tdID0gdmFsdWU7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh0ZW1wICYmIHR5cGVvZiB0ZW1wID09PSAnb2JqZWN0Jykge1xuICAgICAgaWYgKCF0ZW1wW2tdKSB7XG4gICAgICAgIHRlbXBba10gPSBhcnJheUtleXMuaW5jbHVkZXMoaykgPyBbXSA6IHt9O1xuICAgICAgfVxuICAgICAgdGVtcCA9IHRlbXBba107XG4gICAgfVxuICB9KTtcbn07XG5cbi8qKlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmogOiBzb3VyY2Ugb2JqZWN0XG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayA6IGEgZnVuY3Rpb24gdGhhdCB3aWxsIGJlIGNhbGxlZCB3aGVuXG4gKiAgICAgICAgICAgICAgICAgICAtIHRoZSBkZWVwZXN0IGtleSBpbiBzb3VyY2Ugb2JqZWN0IGlzIHJlYWNoZWRcbiAqICAgICAgICAgICAgICAgICAgIC0gdGhlIHZhbHVlIG9mIHRoZSBkZWVwZXN0IGtleSBpcyBOT1QgYHVuZGVmaW5lZGAgfCBgbnVsbGBcbiAqXG4gKiBAZXhhbXBsZVxuICogd2Fsa09iamVjdERlZXAoeyBwYWxldHRlOiB7IHByaW1hcnk6IHsgbWFpbjogJyMwMDAwMDAnIH0gfSB9LCBjb25zb2xlLmxvZylcbiAqIC8vIFsncGFsZXR0ZScsICdwcmltYXJ5JywgJ21haW4nXSAnIzAwMDAwMCdcbiAqL1xuZXhwb3J0IGNvbnN0IHdhbGtPYmplY3REZWVwID0gKG9iaiwgY2FsbGJhY2ssIHNob3VsZFNraXBQYXRocykgPT4ge1xuICBmdW5jdGlvbiByZWN1cnNlKG9iamVjdCwgcGFyZW50S2V5cyA9IFtdLCBhcnJheUtleXMgPSBbXSkge1xuICAgIE9iamVjdC5lbnRyaWVzKG9iamVjdCkuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICBpZiAoIXNob3VsZFNraXBQYXRocyB8fCBzaG91bGRTa2lwUGF0aHMgJiYgIXNob3VsZFNraXBQYXRocyhbLi4ucGFyZW50S2V5cywga2V5XSkpIHtcbiAgICAgICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQgJiYgdmFsdWUgIT09IG51bGwpIHtcbiAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiBPYmplY3Qua2V5cyh2YWx1ZSkubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgcmVjdXJzZSh2YWx1ZSwgWy4uLnBhcmVudEtleXMsIGtleV0sIEFycmF5LmlzQXJyYXkodmFsdWUpID8gWy4uLmFycmF5S2V5cywga2V5XSA6IGFycmF5S2V5cyk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhbGxiYWNrKFsuLi5wYXJlbnRLZXlzLCBrZXldLCB2YWx1ZSwgYXJyYXlLZXlzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICByZWN1cnNlKG9iaik7XG59O1xuY29uc3QgZ2V0Q3NzVmFsdWUgPSAoa2V5cywgdmFsdWUpID0+IHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICBpZiAoWydsaW5lSGVpZ2h0JywgJ2ZvbnRXZWlnaHQnLCAnb3BhY2l0eScsICd6SW5kZXgnXS5zb21lKHByb3AgPT4ga2V5cy5pbmNsdWRlcyhwcm9wKSkpIHtcbiAgICAgIC8vIENTUyBwcm9wZXJ0eSB0aGF0IGFyZSB1bml0bGVzc1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgICBjb25zdCBsYXN0S2V5ID0ga2V5c1trZXlzLmxlbmd0aCAtIDFdO1xuICAgIGlmIChsYXN0S2V5LnRvTG93ZXJDYXNlKCkuaW5kZXhPZignb3BhY2l0eScpID49IDApIHtcbiAgICAgIC8vIG9wYWNpdHkgdmFsdWVzIGFyZSB1bml0bGVzc1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gYCR7dmFsdWV9cHhgO1xuICB9XG4gIHJldHVybiB2YWx1ZTtcbn07XG5cbi8qKlxuICogYSBmdW5jdGlvbiB0aGF0IHBhcnNlIHRoZW1lIGFuZCByZXR1cm4geyBjc3MsIHZhcnMgfVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB0aGVtZVxuICogQHBhcmFtIHt7XG4gKiAgcHJlZml4Pzogc3RyaW5nLFxuICogIHNob3VsZFNraXBHZW5lcmF0aW5nVmFyPzogKG9iamVjdFBhdGhLZXlzOiBBcnJheTxzdHJpbmc+LCB2YWx1ZTogc3RyaW5nIHwgbnVtYmVyKSA9PiBib29sZWFuXG4gKiB9fSBvcHRpb25zLlxuICogIGBwcmVmaXhgOiBUaGUgcHJlZml4IG9mIHRoZSBnZW5lcmF0ZWQgQ1NTIHZhcmlhYmxlcy4gVGhpcyBmdW5jdGlvbiBkb2VzIG5vdCBjaGFuZ2UgdGhlIHZhbHVlLlxuICpcbiAqIEByZXR1cm5zIHt7IGNzczogT2JqZWN0LCB2YXJzOiBPYmplY3QgfX0gYGNzc2AgaXMgdGhlIHN0eWxlc2hlZXQsIGB2YXJzYCBpcyBhbiBvYmplY3QgdG8gZ2V0IGNzcyB2YXJpYWJsZSAoc2FtZSBzdHJ1Y3R1cmUgYXMgdGhlbWUpLlxuICpcbiAqIEBleGFtcGxlXG4gKiBjb25zdCB7IGNzcywgdmFycyB9ID0gcGFyc2VyKHtcbiAqICAgZm9udFNpemU6IDEyLFxuICogICBsaW5lSGVpZ2h0OiAxLjIsXG4gKiAgIHBhbGV0dGU6IHsgcHJpbWFyeTogeyA1MDA6ICd2YXIoLS1jb2xvciknIH0gfVxuICogfSwgeyBwcmVmaXg6ICdmb28nIH0pXG4gKlxuICogY29uc29sZS5sb2coY3NzKSAvLyB7ICctLWZvby1mb250U2l6ZSc6ICcxMnB4JywgJy0tZm9vLWxpbmVIZWlnaHQnOiAxLjIsICctLWZvby1wYWxldHRlLXByaW1hcnktNTAwJzogJ3ZhcigtLWNvbG9yKScgfVxuICogY29uc29sZS5sb2codmFycykgLy8geyBmb250U2l6ZTogJ3ZhcigtLWZvby1mb250U2l6ZSknLCBsaW5lSGVpZ2h0OiAndmFyKC0tZm9vLWxpbmVIZWlnaHQpJywgcGFsZXR0ZTogeyBwcmltYXJ5OiB7IDUwMDogJ3ZhcigtLWZvby1wYWxldHRlLXByaW1hcnktNTAwKScgfSB9IH1cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3NzVmFyc1BhcnNlcih0aGVtZSwgb3B0aW9ucykge1xuICBjb25zdCB7XG4gICAgcHJlZml4LFxuICAgIHNob3VsZFNraXBHZW5lcmF0aW5nVmFyXG4gIH0gPSBvcHRpb25zIHx8IHt9O1xuICBjb25zdCBjc3MgPSB7fTtcbiAgY29uc3QgdmFycyA9IHt9O1xuICBjb25zdCB2YXJzV2l0aERlZmF1bHRzID0ge307XG4gIHdhbGtPYmplY3REZWVwKHRoZW1lLCAoa2V5cywgdmFsdWUsIGFycmF5S2V5cykgPT4ge1xuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICAgIGlmICghc2hvdWxkU2tpcEdlbmVyYXRpbmdWYXIgfHwgIXNob3VsZFNraXBHZW5lcmF0aW5nVmFyKGtleXMsIHZhbHVlKSkge1xuICAgICAgICAvLyBvbmx5IGNyZWF0ZSBjc3MgJiB2YXIgaWYgYHNob3VsZFNraXBHZW5lcmF0aW5nVmFyYCByZXR1cm4gZmFsc2VcbiAgICAgICAgY29uc3QgY3NzVmFyID0gYC0tJHtwcmVmaXggPyBgJHtwcmVmaXh9LWAgOiAnJ30ke2tleXMuam9pbignLScpfWA7XG4gICAgICAgIE9iamVjdC5hc3NpZ24oY3NzLCB7XG4gICAgICAgICAgW2Nzc1Zhcl06IGdldENzc1ZhbHVlKGtleXMsIHZhbHVlKVxuICAgICAgICB9KTtcbiAgICAgICAgYXNzaWduTmVzdGVkS2V5cyh2YXJzLCBrZXlzLCBgdmFyKCR7Y3NzVmFyfSlgLCBhcnJheUtleXMpO1xuICAgICAgICBhc3NpZ25OZXN0ZWRLZXlzKHZhcnNXaXRoRGVmYXVsdHMsIGtleXMsIGB2YXIoJHtjc3NWYXJ9LCAke3ZhbHVlfSlgLCBhcnJheUtleXMpO1xuICAgICAgfVxuICAgIH1cbiAgfSwga2V5cyA9PiBrZXlzWzBdID09PSAndmFycycgLy8gc2tpcCAndmFycy8qJyBwYXRoc1xuICApO1xuICByZXR1cm4ge1xuICAgIGNzcyxcbiAgICB2YXJzLFxuICAgIHZhcnNXaXRoRGVmYXVsdHNcbiAgfTtcbn0iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfdG9Qcm9wZXJ0eUtleSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdG9Qcm9wZXJ0eUtleVwiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJjb2xvclNjaGVtZXNcIiwgXCJjb21wb25lbnRzXCIsIFwiZGVmYXVsdENvbG9yU2NoZW1lXCJdO1xuaW1wb3J0IGRlZXBtZXJnZSBmcm9tICdAbXVpL3V0aWxzL2RlZXBtZXJnZSc7XG5pbXBvcnQgY3NzVmFyc1BhcnNlciBmcm9tICcuL2Nzc1ZhcnNQYXJzZXInO1xuZnVuY3Rpb24gcHJlcGFyZUNzc1ZhcnModGhlbWUsIHBhcnNlckNvbmZpZykge1xuICAvLyBAdHMtaWdub3JlIC0gaWdub3JlIGNvbXBvbmVudHMgZG8gbm90IGV4aXN0XG4gIGNvbnN0IHtcbiAgICAgIGNvbG9yU2NoZW1lcyA9IHt9LFxuICAgICAgZGVmYXVsdENvbG9yU2NoZW1lID0gJ2xpZ2h0J1xuICAgIH0gPSB0aGVtZSxcbiAgICBvdGhlclRoZW1lID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UodGhlbWUsIF9leGNsdWRlZCk7XG4gIGNvbnN0IHtcbiAgICB2YXJzOiByb290VmFycyxcbiAgICBjc3M6IHJvb3RDc3MsXG4gICAgdmFyc1dpdGhEZWZhdWx0czogcm9vdFZhcnNXaXRoRGVmYXVsdHNcbiAgfSA9IGNzc1ZhcnNQYXJzZXIob3RoZXJUaGVtZSwgcGFyc2VyQ29uZmlnKTtcbiAgbGV0IHRoZW1lVmFycyA9IHJvb3RWYXJzV2l0aERlZmF1bHRzO1xuICBjb25zdCBjb2xvclNjaGVtZXNNYXAgPSB7fTtcbiAgY29uc3Qge1xuICAgICAgW2RlZmF1bHRDb2xvclNjaGVtZV06IGxpZ2h0XG4gICAgfSA9IGNvbG9yU2NoZW1lcyxcbiAgICBvdGhlckNvbG9yU2NoZW1lcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKGNvbG9yU2NoZW1lcywgW2RlZmF1bHRDb2xvclNjaGVtZV0ubWFwKF90b1Byb3BlcnR5S2V5KSk7XG4gIE9iamVjdC5lbnRyaWVzKG90aGVyQ29sb3JTY2hlbWVzIHx8IHt9KS5mb3JFYWNoKChba2V5LCBzY2hlbWVdKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgdmFycyxcbiAgICAgIGNzcyxcbiAgICAgIHZhcnNXaXRoRGVmYXVsdHNcbiAgICB9ID0gY3NzVmFyc1BhcnNlcihzY2hlbWUsIHBhcnNlckNvbmZpZyk7XG4gICAgdGhlbWVWYXJzID0gZGVlcG1lcmdlKHRoZW1lVmFycywgdmFyc1dpdGhEZWZhdWx0cyk7XG4gICAgY29sb3JTY2hlbWVzTWFwW2tleV0gPSB7XG4gICAgICBjc3MsXG4gICAgICB2YXJzXG4gICAgfTtcbiAgfSk7XG4gIGlmIChsaWdodCkge1xuICAgIC8vIGRlZmF1bHQgY29sb3Igc2NoZW1lIHZhcnMgc2hvdWxkIGJlIG1lcmdlZCBsYXN0IHRvIHNldCBhcyBkZWZhdWx0XG4gICAgY29uc3Qge1xuICAgICAgY3NzLFxuICAgICAgdmFycyxcbiAgICAgIHZhcnNXaXRoRGVmYXVsdHNcbiAgICB9ID0gY3NzVmFyc1BhcnNlcihsaWdodCwgcGFyc2VyQ29uZmlnKTtcbiAgICB0aGVtZVZhcnMgPSBkZWVwbWVyZ2UodGhlbWVWYXJzLCB2YXJzV2l0aERlZmF1bHRzKTtcbiAgICBjb2xvclNjaGVtZXNNYXBbZGVmYXVsdENvbG9yU2NoZW1lXSA9IHtcbiAgICAgIGNzcyxcbiAgICAgIHZhcnNcbiAgICB9O1xuICB9XG4gIGNvbnN0IGdlbmVyYXRlQ3NzVmFycyA9IGNvbG9yU2NoZW1lID0+IHtcbiAgICB2YXIgX3BhcnNlckNvbmZpZyRnZXRTZWxlMjtcbiAgICBpZiAoIWNvbG9yU2NoZW1lKSB7XG4gICAgICB2YXIgX3BhcnNlckNvbmZpZyRnZXRTZWxlO1xuICAgICAgY29uc3QgY3NzID0gX2V4dGVuZHMoe30sIHJvb3RDc3MpO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgY3NzLFxuICAgICAgICB2YXJzOiByb290VmFycyxcbiAgICAgICAgc2VsZWN0b3I6IChwYXJzZXJDb25maWcgPT0gbnVsbCB8fCAoX3BhcnNlckNvbmZpZyRnZXRTZWxlID0gcGFyc2VyQ29uZmlnLmdldFNlbGVjdG9yKSA9PSBudWxsID8gdm9pZCAwIDogX3BhcnNlckNvbmZpZyRnZXRTZWxlLmNhbGwocGFyc2VyQ29uZmlnLCBjb2xvclNjaGVtZSwgY3NzKSkgfHwgJzpyb290J1xuICAgICAgfTtcbiAgICB9XG4gICAgY29uc3QgY3NzID0gX2V4dGVuZHMoe30sIGNvbG9yU2NoZW1lc01hcFtjb2xvclNjaGVtZV0uY3NzKTtcbiAgICByZXR1cm4ge1xuICAgICAgY3NzLFxuICAgICAgdmFyczogY29sb3JTY2hlbWVzTWFwW2NvbG9yU2NoZW1lXS52YXJzLFxuICAgICAgc2VsZWN0b3I6IChwYXJzZXJDb25maWcgPT0gbnVsbCB8fCAoX3BhcnNlckNvbmZpZyRnZXRTZWxlMiA9IHBhcnNlckNvbmZpZy5nZXRTZWxlY3RvcikgPT0gbnVsbCA/IHZvaWQgMCA6IF9wYXJzZXJDb25maWckZ2V0U2VsZTIuY2FsbChwYXJzZXJDb25maWcsIGNvbG9yU2NoZW1lLCBjc3MpKSB8fCAnOnJvb3QnXG4gICAgfTtcbiAgfTtcbiAgcmV0dXJuIHtcbiAgICB2YXJzOiB0aGVtZVZhcnMsXG4gICAgZ2VuZXJhdGVDc3NWYXJzXG4gIH07XG59XG5leHBvcnQgZGVmYXVsdCBwcmVwYXJlQ3NzVmFyczsiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzaG91bGRTa2lwR2VuZXJhdGluZ1ZhcihrZXlzKSB7XG4gIHZhciBfa2V5cyQ7XG4gIHJldHVybiAhIWtleXNbMF0ubWF0Y2goLyhjc3NWYXJQcmVmaXh8dHlwb2dyYXBoeXxtaXhpbnN8YnJlYWtwb2ludHN8ZGlyZWN0aW9ufHRyYW5zaXRpb25zKS8pIHx8ICEha2V5c1swXS5tYXRjaCgvc3hDb25maWckLykgfHxcbiAgLy8gZW5kcyB3aXRoIHN4Q29uZmlnXG4gIGtleXNbMF0gPT09ICdwYWxldHRlJyAmJiAhISgoX2tleXMkID0ga2V5c1sxXSkgIT0gbnVsbCAmJiBfa2V5cyQubWF0Y2goLyhtb2RlfGNvbnRyYXN0VGhyZXNob2xkfHRvbmFsT2Zmc2V0KS8pKTtcbn0iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiY29sb3JTY2hlbWVzXCIsIFwiY3NzVmFyUHJlZml4XCIsIFwic2hvdWxkU2tpcEdlbmVyYXRpbmdWYXJcIl0sXG4gIF9leGNsdWRlZDIgPSBbXCJwYWxldHRlXCJdO1xuaW1wb3J0IGRlZXBtZXJnZSBmcm9tICdAbXVpL3V0aWxzL2RlZXBtZXJnZSc7XG5pbXBvcnQgeyB1bnN0YWJsZV9jcmVhdGVHZXRDc3NWYXIgYXMgc3lzdGVtQ3JlYXRlR2V0Q3NzVmFyLCB1bnN0YWJsZV9wcmVwYXJlQ3NzVmFycyBhcyBwcmVwYXJlQ3NzVmFycyB9IGZyb20gJ0BtdWkvc3lzdGVtJztcbmltcG9ydCBzdHlsZUZ1bmN0aW9uU3gsIHsgdW5zdGFibGVfZGVmYXVsdFN4Q29uZmlnIGFzIGRlZmF1bHRTeENvbmZpZyB9IGZyb20gJ0BtdWkvc3lzdGVtL3N0eWxlRnVuY3Rpb25TeCc7XG5pbXBvcnQgeyBwcml2YXRlX3NhZmVDb2xvckNoYW5uZWwgYXMgc2FmZUNvbG9yQ2hhbm5lbCwgcHJpdmF0ZV9zYWZlQWxwaGEgYXMgc2FmZUFscGhhLCBwcml2YXRlX3NhZmVEYXJrZW4gYXMgc2FmZURhcmtlbiwgcHJpdmF0ZV9zYWZlTGlnaHRlbiBhcyBzYWZlTGlnaHRlbiwgcHJpdmF0ZV9zYWZlRW1waGFzaXplIGFzIHNhZmVFbXBoYXNpemUsIGhzbFRvUmdiIH0gZnJvbSAnQG11aS9zeXN0ZW0vY29sb3JNYW5pcHVsYXRvcic7XG5pbXBvcnQgZGVmYXVsdFNob3VsZFNraXBHZW5lcmF0aW5nVmFyIGZyb20gJy4vc2hvdWxkU2tpcEdlbmVyYXRpbmdWYXInO1xuaW1wb3J0IGNyZWF0ZVRoZW1lV2l0aG91dFZhcnMgZnJvbSAnLi9jcmVhdGVUaGVtZSc7XG5pbXBvcnQgZ2V0T3ZlcmxheUFscGhhIGZyb20gJy4vZ2V0T3ZlcmxheUFscGhhJztcbmNvbnN0IGRlZmF1bHREYXJrT3ZlcmxheXMgPSBbLi4uQXJyYXkoMjUpXS5tYXAoKF8sIGluZGV4KSA9PiB7XG4gIGlmIChpbmRleCA9PT0gMCkge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cbiAgY29uc3Qgb3ZlcmxheSA9IGdldE92ZXJsYXlBbHBoYShpbmRleCk7XG4gIHJldHVybiBgbGluZWFyLWdyYWRpZW50KHJnYmEoMjU1IDI1NSAyNTUgLyAke292ZXJsYXl9KSwgcmdiYSgyNTUgMjU1IDI1NSAvICR7b3ZlcmxheX0pKWA7XG59KTtcbmZ1bmN0aW9uIGFzc2lnbk5vZGUob2JqLCBrZXlzKSB7XG4gIGtleXMuZm9yRWFjaChrID0+IHtcbiAgICBpZiAoIW9ialtrXSkge1xuICAgICAgb2JqW2tdID0ge307XG4gICAgfVxuICB9KTtcbn1cbmZ1bmN0aW9uIHNldENvbG9yKG9iaiwga2V5LCBkZWZhdWx0VmFsdWUpIHtcbiAgaWYgKCFvYmpba2V5XSAmJiBkZWZhdWx0VmFsdWUpIHtcbiAgICBvYmpba2V5XSA9IGRlZmF1bHRWYWx1ZTtcbiAgfVxufVxuZnVuY3Rpb24gdG9SZ2IoY29sb3IpIHtcbiAgaWYgKCFjb2xvciB8fCAhY29sb3Iuc3RhcnRzV2l0aCgnaHNsJykpIHtcbiAgICByZXR1cm4gY29sb3I7XG4gIH1cbiAgcmV0dXJuIGhzbFRvUmdiKGNvbG9yKTtcbn1cbmZ1bmN0aW9uIHNldENvbG9yQ2hhbm5lbChvYmosIGtleSkge1xuICBpZiAoIShgJHtrZXl9Q2hhbm5lbGAgaW4gb2JqKSkge1xuICAgIC8vIGN1c3RvbSBjaGFubmVsIHRva2VuIGlzIG5vdCBwcm92aWRlZCwgZ2VuZXJhdGUgb25lLlxuICAgIC8vIGlmIGNoYW5uZWwgdG9rZW4gY2FuJ3QgYmUgZ2VuZXJhdGVkLCBzaG93IGEgd2FybmluZy5cbiAgICBvYmpbYCR7a2V5fUNoYW5uZWxgXSA9IHNhZmVDb2xvckNoYW5uZWwodG9SZ2Iob2JqW2tleV0pLCBgTVVJOiBDYW4ndCBjcmVhdGUgXFxgcGFsZXR0ZS4ke2tleX1DaGFubmVsXFxgIGJlY2F1c2UgXFxgcGFsZXR0ZS4ke2tleX1cXGAgaXMgbm90IG9uZSBvZiB0aGVzZSBmb3JtYXRzOiAjbm5uLCAjbm5ubm5uLCByZ2IoKSwgcmdiYSgpLCBoc2woKSwgaHNsYSgpLCBjb2xvcigpLmAgKyAnXFxuJyArIGBUbyBzdXBwcmVzcyB0aGlzIHdhcm5pbmcsIHlvdSBuZWVkIHRvIGV4cGxpY2l0bHkgcHJvdmlkZSB0aGUgXFxgcGFsZXR0ZS4ke2tleX1DaGFubmVsXFxgIGFzIGEgc3RyaW5nIChpbiByZ2IgZm9ybWF0LCBmb3IgZXhhbXBsZSBcIjEyIDEyIDEyXCIpIG9yIHVuZGVmaW5lZCBpZiB5b3Ugd2FudCB0byByZW1vdmUgdGhlIGNoYW5uZWwgdG9rZW4uYCk7XG4gIH1cbn1cbmNvbnN0IHNpbGVudCA9IGZuID0+IHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZm4oKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAvLyBpZ25vcmUgZXJyb3JcbiAgfVxuICByZXR1cm4gdW5kZWZpbmVkO1xufTtcbmV4cG9ydCBjb25zdCBjcmVhdGVHZXRDc3NWYXIgPSAoY3NzVmFyUHJlZml4ID0gJ211aScpID0+IHN5c3RlbUNyZWF0ZUdldENzc1Zhcihjc3NWYXJQcmVmaXgpO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZXh0ZW5kVGhlbWUob3B0aW9ucyA9IHt9LCAuLi5hcmdzKSB7XG4gIHZhciBfY29sb3JTY2hlbWVzSW5wdXQkbGksIF9jb2xvclNjaGVtZXNJbnB1dCRkYSwgX2NvbG9yU2NoZW1lc0lucHV0JGxpMiwgX2NvbG9yU2NoZW1lc0lucHV0JGxpMywgX2NvbG9yU2NoZW1lc0lucHV0JGRhMiwgX2NvbG9yU2NoZW1lc0lucHV0JGRhMztcbiAgY29uc3Qge1xuICAgICAgY29sb3JTY2hlbWVzOiBjb2xvclNjaGVtZXNJbnB1dCA9IHt9LFxuICAgICAgY3NzVmFyUHJlZml4ID0gJ211aScsXG4gICAgICBzaG91bGRTa2lwR2VuZXJhdGluZ1ZhciA9IGRlZmF1bHRTaG91bGRTa2lwR2VuZXJhdGluZ1ZhclxuICAgIH0gPSBvcHRpb25zLFxuICAgIGlucHV0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uob3B0aW9ucywgX2V4Y2x1ZGVkKTtcbiAgY29uc3QgZ2V0Q3NzVmFyID0gY3JlYXRlR2V0Q3NzVmFyKGNzc1ZhclByZWZpeCk7XG4gIGNvbnN0IF9jcmVhdGVUaGVtZVdpdGhvdXRWYSA9IGNyZWF0ZVRoZW1lV2l0aG91dFZhcnMoX2V4dGVuZHMoe30sIGlucHV0LCBjb2xvclNjaGVtZXNJbnB1dC5saWdodCAmJiB7XG4gICAgICBwYWxldHRlOiAoX2NvbG9yU2NoZW1lc0lucHV0JGxpID0gY29sb3JTY2hlbWVzSW5wdXQubGlnaHQpID09IG51bGwgPyB2b2lkIDAgOiBfY29sb3JTY2hlbWVzSW5wdXQkbGkucGFsZXR0ZVxuICAgIH0pKSxcbiAgICB7XG4gICAgICBwYWxldHRlOiBsaWdodFBhbGV0dGVcbiAgICB9ID0gX2NyZWF0ZVRoZW1lV2l0aG91dFZhLFxuICAgIG11aVRoZW1lID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX2NyZWF0ZVRoZW1lV2l0aG91dFZhLCBfZXhjbHVkZWQyKTtcbiAgY29uc3Qge1xuICAgIHBhbGV0dGU6IGRhcmtQYWxldHRlXG4gIH0gPSBjcmVhdGVUaGVtZVdpdGhvdXRWYXJzKHtcbiAgICBwYWxldHRlOiBfZXh0ZW5kcyh7XG4gICAgICBtb2RlOiAnZGFyaydcbiAgICB9LCAoX2NvbG9yU2NoZW1lc0lucHV0JGRhID0gY29sb3JTY2hlbWVzSW5wdXQuZGFyaykgPT0gbnVsbCA/IHZvaWQgMCA6IF9jb2xvclNjaGVtZXNJbnB1dCRkYS5wYWxldHRlKVxuICB9KTtcbiAgbGV0IHRoZW1lID0gX2V4dGVuZHMoe30sIG11aVRoZW1lLCB7XG4gICAgY3NzVmFyUHJlZml4LFxuICAgIGdldENzc1ZhcixcbiAgICBjb2xvclNjaGVtZXM6IF9leHRlbmRzKHt9LCBjb2xvclNjaGVtZXNJbnB1dCwge1xuICAgICAgbGlnaHQ6IF9leHRlbmRzKHt9LCBjb2xvclNjaGVtZXNJbnB1dC5saWdodCwge1xuICAgICAgICBwYWxldHRlOiBsaWdodFBhbGV0dGUsXG4gICAgICAgIG9wYWNpdHk6IF9leHRlbmRzKHtcbiAgICAgICAgICBpbnB1dFBsYWNlaG9sZGVyOiAwLjQyLFxuICAgICAgICAgIGlucHV0VW5kZXJsaW5lOiAwLjQyLFxuICAgICAgICAgIHN3aXRjaFRyYWNrRGlzYWJsZWQ6IDAuMTIsXG4gICAgICAgICAgc3dpdGNoVHJhY2s6IDAuMzhcbiAgICAgICAgfSwgKF9jb2xvclNjaGVtZXNJbnB1dCRsaTIgPSBjb2xvclNjaGVtZXNJbnB1dC5saWdodCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9jb2xvclNjaGVtZXNJbnB1dCRsaTIub3BhY2l0eSksXG4gICAgICAgIG92ZXJsYXlzOiAoKF9jb2xvclNjaGVtZXNJbnB1dCRsaTMgPSBjb2xvclNjaGVtZXNJbnB1dC5saWdodCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9jb2xvclNjaGVtZXNJbnB1dCRsaTMub3ZlcmxheXMpIHx8IFtdXG4gICAgICB9KSxcbiAgICAgIGRhcms6IF9leHRlbmRzKHt9LCBjb2xvclNjaGVtZXNJbnB1dC5kYXJrLCB7XG4gICAgICAgIHBhbGV0dGU6IGRhcmtQYWxldHRlLFxuICAgICAgICBvcGFjaXR5OiBfZXh0ZW5kcyh7XG4gICAgICAgICAgaW5wdXRQbGFjZWhvbGRlcjogMC41LFxuICAgICAgICAgIGlucHV0VW5kZXJsaW5lOiAwLjcsXG4gICAgICAgICAgc3dpdGNoVHJhY2tEaXNhYmxlZDogMC4yLFxuICAgICAgICAgIHN3aXRjaFRyYWNrOiAwLjNcbiAgICAgICAgfSwgKF9jb2xvclNjaGVtZXNJbnB1dCRkYTIgPSBjb2xvclNjaGVtZXNJbnB1dC5kYXJrKSA9PSBudWxsID8gdm9pZCAwIDogX2NvbG9yU2NoZW1lc0lucHV0JGRhMi5vcGFjaXR5KSxcbiAgICAgICAgb3ZlcmxheXM6ICgoX2NvbG9yU2NoZW1lc0lucHV0JGRhMyA9IGNvbG9yU2NoZW1lc0lucHV0LmRhcmspID09IG51bGwgPyB2b2lkIDAgOiBfY29sb3JTY2hlbWVzSW5wdXQkZGEzLm92ZXJsYXlzKSB8fCBkZWZhdWx0RGFya092ZXJsYXlzXG4gICAgICB9KVxuICAgIH0pXG4gIH0pO1xuICBPYmplY3Qua2V5cyh0aGVtZS5jb2xvclNjaGVtZXMpLmZvckVhY2goa2V5ID0+IHtcbiAgICBjb25zdCBwYWxldHRlID0gdGhlbWUuY29sb3JTY2hlbWVzW2tleV0ucGFsZXR0ZTtcbiAgICBjb25zdCBzZXRDc3NWYXJDb2xvciA9IGNzc1ZhciA9PiB7XG4gICAgICBjb25zdCB0b2tlbnMgPSBjc3NWYXIuc3BsaXQoJy0nKTtcbiAgICAgIGNvbnN0IGNvbG9yID0gdG9rZW5zWzFdO1xuICAgICAgY29uc3QgY29sb3JUb2tlbiA9IHRva2Vuc1syXTtcbiAgICAgIHJldHVybiBnZXRDc3NWYXIoY3NzVmFyLCBwYWxldHRlW2NvbG9yXVtjb2xvclRva2VuXSk7XG4gICAgfTtcblxuICAgIC8vIGF0dGFjaCBibGFjayAmIHdoaXRlIGNoYW5uZWxzIHRvIGNvbW1vbiBub2RlXG4gICAgaWYgKGtleSA9PT0gJ2xpZ2h0Jykge1xuICAgICAgc2V0Q29sb3IocGFsZXR0ZS5jb21tb24sICdiYWNrZ3JvdW5kJywgJyNmZmYnKTtcbiAgICAgIHNldENvbG9yKHBhbGV0dGUuY29tbW9uLCAnb25CYWNrZ3JvdW5kJywgJyMwMDAnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2V0Q29sb3IocGFsZXR0ZS5jb21tb24sICdiYWNrZ3JvdW5kJywgJyMwMDAnKTtcbiAgICAgIHNldENvbG9yKHBhbGV0dGUuY29tbW9uLCAnb25CYWNrZ3JvdW5kJywgJyNmZmYnKTtcbiAgICB9XG5cbiAgICAvLyBhc3NpZ24gY29tcG9uZW50IHZhcmlhYmxlc1xuICAgIGFzc2lnbk5vZGUocGFsZXR0ZSwgWydBbGVydCcsICdBcHBCYXInLCAnQXZhdGFyJywgJ0J1dHRvbicsICdDaGlwJywgJ0ZpbGxlZElucHV0JywgJ0xpbmVhclByb2dyZXNzJywgJ1NrZWxldG9uJywgJ1NsaWRlcicsICdTbmFja2JhckNvbnRlbnQnLCAnU3BlZWREaWFsQWN0aW9uJywgJ1N0ZXBDb25uZWN0b3InLCAnU3RlcENvbnRlbnQnLCAnU3dpdGNoJywgJ1RhYmxlQ2VsbCcsICdUb29sdGlwJ10pO1xuICAgIGlmIChrZXkgPT09ICdsaWdodCcpIHtcbiAgICAgIHNldENvbG9yKHBhbGV0dGUuQWxlcnQsICdlcnJvckNvbG9yJywgc2FmZURhcmtlbihwYWxldHRlLmVycm9yLmxpZ2h0LCAwLjYpKTtcbiAgICAgIHNldENvbG9yKHBhbGV0dGUuQWxlcnQsICdpbmZvQ29sb3InLCBzYWZlRGFya2VuKHBhbGV0dGUuaW5mby5saWdodCwgMC42KSk7XG4gICAgICBzZXRDb2xvcihwYWxldHRlLkFsZXJ0LCAnc3VjY2Vzc0NvbG9yJywgc2FmZURhcmtlbihwYWxldHRlLnN1Y2Nlc3MubGlnaHQsIDAuNikpO1xuICAgICAgc2V0Q29sb3IocGFsZXR0ZS5BbGVydCwgJ3dhcm5pbmdDb2xvcicsIHNhZmVEYXJrZW4ocGFsZXR0ZS53YXJuaW5nLmxpZ2h0LCAwLjYpKTtcbiAgICAgIHNldENvbG9yKHBhbGV0dGUuQWxlcnQsICdlcnJvckZpbGxlZEJnJywgc2V0Q3NzVmFyQ29sb3IoJ3BhbGV0dGUtZXJyb3ItbWFpbicpKTtcbiAgICAgIHNldENvbG9yKHBhbGV0dGUuQWxlcnQsICdpbmZvRmlsbGVkQmcnLCBzZXRDc3NWYXJDb2xvcigncGFsZXR0ZS1pbmZvLW1haW4nKSk7XG4gICAgICBzZXRDb2xvcihwYWxldHRlLkFsZXJ0LCAnc3VjY2Vzc0ZpbGxlZEJnJywgc2V0Q3NzVmFyQ29sb3IoJ3BhbGV0dGUtc3VjY2Vzcy1tYWluJykpO1xuICAgICAgc2V0Q29sb3IocGFsZXR0ZS5BbGVydCwgJ3dhcm5pbmdGaWxsZWRCZycsIHNldENzc1ZhckNvbG9yKCdwYWxldHRlLXdhcm5pbmctbWFpbicpKTtcbiAgICAgIHNldENvbG9yKHBhbGV0dGUuQWxlcnQsICdlcnJvckZpbGxlZENvbG9yJywgc2lsZW50KCgpID0+IGxpZ2h0UGFsZXR0ZS5nZXRDb250cmFzdFRleHQocGFsZXR0ZS5lcnJvci5tYWluKSkpO1xuICAgICAgc2V0Q29sb3IocGFsZXR0ZS5BbGVydCwgJ2luZm9GaWxsZWRDb2xvcicsIHNpbGVudCgoKSA9PiBsaWdodFBhbGV0dGUuZ2V0Q29udHJhc3RUZXh0KHBhbGV0dGUuaW5mby5tYWluKSkpO1xuICAgICAgc2V0Q29sb3IocGFsZXR0ZS5BbGVydCwgJ3N1Y2Nlc3NGaWxsZWRDb2xvcicsIHNpbGVudCgoKSA9PiBsaWdodFBhbGV0dGUuZ2V0Q29udHJhc3RUZXh0KHBhbGV0dGUuc3VjY2Vzcy5tYWluKSkpO1xuICAgICAgc2V0Q29sb3IocGFsZXR0ZS5BbGVydCwgJ3dhcm5pbmdGaWxsZWRDb2xvcicsIHNpbGVudCgoKSA9PiBsaWdodFBhbGV0dGUuZ2V0Q29udHJhc3RUZXh0KHBhbGV0dGUud2FybmluZy5tYWluKSkpO1xuICAgICAgc2V0Q29sb3IocGFsZXR0ZS5BbGVydCwgJ2Vycm9yU3RhbmRhcmRCZycsIHNhZmVMaWdodGVuKHBhbGV0dGUuZXJyb3IubGlnaHQsIDAuOSkpO1xuICAgICAgc2V0Q29sb3IocGFsZXR0ZS5BbGVydCwgJ2luZm9TdGFuZGFyZEJnJywgc2FmZUxpZ2h0ZW4ocGFsZXR0ZS5pbmZvLmxpZ2h0LCAwLjkpKTtcbiAgICAgIHNldENvbG9yKHBhbGV0dGUuQWxlcnQsICdzdWNjZXNzU3RhbmRhcmRCZycsIHNhZmVMaWdodGVuKHBhbGV0dGUuc3VjY2Vzcy5saWdodCwgMC45KSk7XG4gICAgICBzZXRDb2xvcihwYWxldHRlLkFsZXJ0LCAnd2FybmluZ1N0YW5kYXJkQmcnLCBzYWZlTGlnaHRlbihwYWxldHRlLndhcm5pbmcubGlnaHQsIDAuOSkpO1xuICAgICAgc2V0Q29sb3IocGFsZXR0ZS5BbGVydCwgJ2Vycm9ySWNvbkNvbG9yJywgc2V0Q3NzVmFyQ29sb3IoJ3BhbGV0dGUtZXJyb3ItbWFpbicpKTtcbiAgICAgIHNldENvbG9yKHBhbGV0dGUuQWxlcnQsICdpbmZvSWNvbkNvbG9yJywgc2V0Q3NzVmFyQ29sb3IoJ3BhbGV0dGUtaW5mby1tYWluJykpO1xuICAgICAgc2V0Q29sb3IocGFsZXR0ZS5BbGVydCwgJ3N1Y2Nlc3NJY29uQ29sb3InLCBzZXRDc3NWYXJDb2xvcigncGFsZXR0ZS1zdWNjZXNzLW1haW4nKSk7XG4gICAgICBzZXRDb2xvcihwYWxldHRlLkFsZXJ0LCAnd2FybmluZ0ljb25Db2xvcicsIHNldENzc1ZhckNvbG9yKCdwYWxldHRlLXdhcm5pbmctbWFpbicpKTtcbiAgICAgIHNldENvbG9yKHBhbGV0dGUuQXBwQmFyLCAnZGVmYXVsdEJnJywgc2V0Q3NzVmFyQ29sb3IoJ3BhbGV0dGUtZ3JleS0xMDAnKSk7XG4gICAgICBzZXRDb2xvcihwYWxldHRlLkF2YXRhciwgJ2RlZmF1bHRCZycsIHNldENzc1ZhckNvbG9yKCdwYWxldHRlLWdyZXktNDAwJykpO1xuICAgICAgc2V0Q29sb3IocGFsZXR0ZS5CdXR0b24sICdpbmhlcml0Q29udGFpbmVkQmcnLCBzZXRDc3NWYXJDb2xvcigncGFsZXR0ZS1ncmV5LTMwMCcpKTtcbiAgICAgIHNldENvbG9yKHBhbGV0dGUuQnV0dG9uLCAnaW5oZXJpdENvbnRhaW5lZEhvdmVyQmcnLCBzZXRDc3NWYXJDb2xvcigncGFsZXR0ZS1ncmV5LUExMDAnKSk7XG4gICAgICBzZXRDb2xvcihwYWxldHRlLkNoaXAsICdkZWZhdWx0Qm9yZGVyJywgc2V0Q3NzVmFyQ29sb3IoJ3BhbGV0dGUtZ3JleS00MDAnKSk7XG4gICAgICBzZXRDb2xvcihwYWxldHRlLkNoaXAsICdkZWZhdWx0QXZhdGFyQ29sb3InLCBzZXRDc3NWYXJDb2xvcigncGFsZXR0ZS1ncmV5LTcwMCcpKTtcbiAgICAgIHNldENvbG9yKHBhbGV0dGUuQ2hpcCwgJ2RlZmF1bHRJY29uQ29sb3InLCBzZXRDc3NWYXJDb2xvcigncGFsZXR0ZS1ncmV5LTcwMCcpKTtcbiAgICAgIHNldENvbG9yKHBhbGV0dGUuRmlsbGVkSW5wdXQsICdiZycsICdyZ2JhKDAsIDAsIDAsIDAuMDYpJyk7XG4gICAgICBzZXRDb2xvcihwYWxldHRlLkZpbGxlZElucHV0LCAnaG92ZXJCZycsICdyZ2JhKDAsIDAsIDAsIDAuMDkpJyk7XG4gICAgICBzZXRDb2xvcihwYWxldHRlLkZpbGxlZElucHV0LCAnZGlzYWJsZWRCZycsICdyZ2JhKDAsIDAsIDAsIDAuMTIpJyk7XG4gICAgICBzZXRDb2xvcihwYWxldHRlLkxpbmVhclByb2dyZXNzLCAncHJpbWFyeUJnJywgc2FmZUxpZ2h0ZW4ocGFsZXR0ZS5wcmltYXJ5Lm1haW4sIDAuNjIpKTtcbiAgICAgIHNldENvbG9yKHBhbGV0dGUuTGluZWFyUHJvZ3Jlc3MsICdzZWNvbmRhcnlCZycsIHNhZmVMaWdodGVuKHBhbGV0dGUuc2Vjb25kYXJ5Lm1haW4sIDAuNjIpKTtcbiAgICAgIHNldENvbG9yKHBhbGV0dGUuTGluZWFyUHJvZ3Jlc3MsICdlcnJvckJnJywgc2FmZUxpZ2h0ZW4ocGFsZXR0ZS5lcnJvci5tYWluLCAwLjYyKSk7XG4gICAgICBzZXRDb2xvcihwYWxldHRlLkxpbmVhclByb2dyZXNzLCAnaW5mb0JnJywgc2FmZUxpZ2h0ZW4ocGFsZXR0ZS5pbmZvLm1haW4sIDAuNjIpKTtcbiAgICAgIHNldENvbG9yKHBhbGV0dGUuTGluZWFyUHJvZ3Jlc3MsICdzdWNjZXNzQmcnLCBzYWZlTGlnaHRlbihwYWxldHRlLnN1Y2Nlc3MubWFpbiwgMC42MikpO1xuICAgICAgc2V0Q29sb3IocGFsZXR0ZS5MaW5lYXJQcm9ncmVzcywgJ3dhcm5pbmdCZycsIHNhZmVMaWdodGVuKHBhbGV0dGUud2FybmluZy5tYWluLCAwLjYyKSk7XG4gICAgICBzZXRDb2xvcihwYWxldHRlLlNrZWxldG9uLCAnYmcnLCBgcmdiYSgke3NldENzc1ZhckNvbG9yKCdwYWxldHRlLXRleHQtcHJpbWFyeUNoYW5uZWwnKX0gLyAwLjExKWApO1xuICAgICAgc2V0Q29sb3IocGFsZXR0ZS5TbGlkZXIsICdwcmltYXJ5VHJhY2snLCBzYWZlTGlnaHRlbihwYWxldHRlLnByaW1hcnkubWFpbiwgMC42MikpO1xuICAgICAgc2V0Q29sb3IocGFsZXR0ZS5TbGlkZXIsICdzZWNvbmRhcnlUcmFjaycsIHNhZmVMaWdodGVuKHBhbGV0dGUuc2Vjb25kYXJ5Lm1haW4sIDAuNjIpKTtcbiAgICAgIHNldENvbG9yKHBhbGV0dGUuU2xpZGVyLCAnZXJyb3JUcmFjaycsIHNhZmVMaWdodGVuKHBhbGV0dGUuZXJyb3IubWFpbiwgMC42MikpO1xuICAgICAgc2V0Q29sb3IocGFsZXR0ZS5TbGlkZXIsICdpbmZvVHJhY2snLCBzYWZlTGlnaHRlbihwYWxldHRlLmluZm8ubWFpbiwgMC42MikpO1xuICAgICAgc2V0Q29sb3IocGFsZXR0ZS5TbGlkZXIsICdzdWNjZXNzVHJhY2snLCBzYWZlTGlnaHRlbihwYWxldHRlLnN1Y2Nlc3MubWFpbiwgMC42MikpO1xuICAgICAgc2V0Q29sb3IocGFsZXR0ZS5TbGlkZXIsICd3YXJuaW5nVHJhY2snLCBzYWZlTGlnaHRlbihwYWxldHRlLndhcm5pbmcubWFpbiwgMC42MikpO1xuICAgICAgY29uc3Qgc25hY2tiYXJDb250ZW50QmFja2dyb3VuZCA9IHNhZmVFbXBoYXNpemUocGFsZXR0ZS5iYWNrZ3JvdW5kLmRlZmF1bHQsIDAuOCk7XG4gICAgICBzZXRDb2xvcihwYWxldHRlLlNuYWNrYmFyQ29udGVudCwgJ2JnJywgc25hY2tiYXJDb250ZW50QmFja2dyb3VuZCk7XG4gICAgICBzZXRDb2xvcihwYWxldHRlLlNuYWNrYmFyQ29udGVudCwgJ2NvbG9yJywgc2lsZW50KCgpID0+IGxpZ2h0UGFsZXR0ZS5nZXRDb250cmFzdFRleHQoc25hY2tiYXJDb250ZW50QmFja2dyb3VuZCkpKTtcbiAgICAgIHNldENvbG9yKHBhbGV0dGUuU3BlZWREaWFsQWN0aW9uLCAnZmFiSG92ZXJCZycsIHNhZmVFbXBoYXNpemUocGFsZXR0ZS5iYWNrZ3JvdW5kLnBhcGVyLCAwLjE1KSk7XG4gICAgICBzZXRDb2xvcihwYWxldHRlLlN0ZXBDb25uZWN0b3IsICdib3JkZXInLCBzZXRDc3NWYXJDb2xvcigncGFsZXR0ZS1ncmV5LTQwMCcpKTtcbiAgICAgIHNldENvbG9yKHBhbGV0dGUuU3RlcENvbnRlbnQsICdib3JkZXInLCBzZXRDc3NWYXJDb2xvcigncGFsZXR0ZS1ncmV5LTQwMCcpKTtcbiAgICAgIHNldENvbG9yKHBhbGV0dGUuU3dpdGNoLCAnZGVmYXVsdENvbG9yJywgc2V0Q3NzVmFyQ29sb3IoJ3BhbGV0dGUtY29tbW9uLXdoaXRlJykpO1xuICAgICAgc2V0Q29sb3IocGFsZXR0ZS5Td2l0Y2gsICdkZWZhdWx0RGlzYWJsZWRDb2xvcicsIHNldENzc1ZhckNvbG9yKCdwYWxldHRlLWdyZXktMTAwJykpO1xuICAgICAgc2V0Q29sb3IocGFsZXR0ZS5Td2l0Y2gsICdwcmltYXJ5RGlzYWJsZWRDb2xvcicsIHNhZmVMaWdodGVuKHBhbGV0dGUucHJpbWFyeS5tYWluLCAwLjYyKSk7XG4gICAgICBzZXRDb2xvcihwYWxldHRlLlN3aXRjaCwgJ3NlY29uZGFyeURpc2FibGVkQ29sb3InLCBzYWZlTGlnaHRlbihwYWxldHRlLnNlY29uZGFyeS5tYWluLCAwLjYyKSk7XG4gICAgICBzZXRDb2xvcihwYWxldHRlLlN3aXRjaCwgJ2Vycm9yRGlzYWJsZWRDb2xvcicsIHNhZmVMaWdodGVuKHBhbGV0dGUuZXJyb3IubWFpbiwgMC42MikpO1xuICAgICAgc2V0Q29sb3IocGFsZXR0ZS5Td2l0Y2gsICdpbmZvRGlzYWJsZWRDb2xvcicsIHNhZmVMaWdodGVuKHBhbGV0dGUuaW5mby5tYWluLCAwLjYyKSk7XG4gICAgICBzZXRDb2xvcihwYWxldHRlLlN3aXRjaCwgJ3N1Y2Nlc3NEaXNhYmxlZENvbG9yJywgc2FmZUxpZ2h0ZW4ocGFsZXR0ZS5zdWNjZXNzLm1haW4sIDAuNjIpKTtcbiAgICAgIHNldENvbG9yKHBhbGV0dGUuU3dpdGNoLCAnd2FybmluZ0Rpc2FibGVkQ29sb3InLCBzYWZlTGlnaHRlbihwYWxldHRlLndhcm5pbmcubWFpbiwgMC42MikpO1xuICAgICAgc2V0Q29sb3IocGFsZXR0ZS5UYWJsZUNlbGwsICdib3JkZXInLCBzYWZlTGlnaHRlbihzYWZlQWxwaGEocGFsZXR0ZS5kaXZpZGVyLCAxKSwgMC44OCkpO1xuICAgICAgc2V0Q29sb3IocGFsZXR0ZS5Ub29sdGlwLCAnYmcnLCBzYWZlQWxwaGEocGFsZXR0ZS5ncmV5WzcwMF0sIDAuOTIpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2V0Q29sb3IocGFsZXR0ZS5BbGVydCwgJ2Vycm9yQ29sb3InLCBzYWZlTGlnaHRlbihwYWxldHRlLmVycm9yLmxpZ2h0LCAwLjYpKTtcbiAgICAgIHNldENvbG9yKHBhbGV0dGUuQWxlcnQsICdpbmZvQ29sb3InLCBzYWZlTGlnaHRlbihwYWxldHRlLmluZm8ubGlnaHQsIDAuNikpO1xuICAgICAgc2V0Q29sb3IocGFsZXR0ZS5BbGVydCwgJ3N1Y2Nlc3NDb2xvcicsIHNhZmVMaWdodGVuKHBhbGV0dGUuc3VjY2Vzcy5saWdodCwgMC42KSk7XG4gICAgICBzZXRDb2xvcihwYWxldHRlLkFsZXJ0LCAnd2FybmluZ0NvbG9yJywgc2FmZUxpZ2h0ZW4ocGFsZXR0ZS53YXJuaW5nLmxpZ2h0LCAwLjYpKTtcbiAgICAgIHNldENvbG9yKHBhbGV0dGUuQWxlcnQsICdlcnJvckZpbGxlZEJnJywgc2V0Q3NzVmFyQ29sb3IoJ3BhbGV0dGUtZXJyb3ItZGFyaycpKTtcbiAgICAgIHNldENvbG9yKHBhbGV0dGUuQWxlcnQsICdpbmZvRmlsbGVkQmcnLCBzZXRDc3NWYXJDb2xvcigncGFsZXR0ZS1pbmZvLWRhcmsnKSk7XG4gICAgICBzZXRDb2xvcihwYWxldHRlLkFsZXJ0LCAnc3VjY2Vzc0ZpbGxlZEJnJywgc2V0Q3NzVmFyQ29sb3IoJ3BhbGV0dGUtc3VjY2Vzcy1kYXJrJykpO1xuICAgICAgc2V0Q29sb3IocGFsZXR0ZS5BbGVydCwgJ3dhcm5pbmdGaWxsZWRCZycsIHNldENzc1ZhckNvbG9yKCdwYWxldHRlLXdhcm5pbmctZGFyaycpKTtcbiAgICAgIHNldENvbG9yKHBhbGV0dGUuQWxlcnQsICdlcnJvckZpbGxlZENvbG9yJywgc2lsZW50KCgpID0+IGRhcmtQYWxldHRlLmdldENvbnRyYXN0VGV4dChwYWxldHRlLmVycm9yLmRhcmspKSk7XG4gICAgICBzZXRDb2xvcihwYWxldHRlLkFsZXJ0LCAnaW5mb0ZpbGxlZENvbG9yJywgc2lsZW50KCgpID0+IGRhcmtQYWxldHRlLmdldENvbnRyYXN0VGV4dChwYWxldHRlLmluZm8uZGFyaykpKTtcbiAgICAgIHNldENvbG9yKHBhbGV0dGUuQWxlcnQsICdzdWNjZXNzRmlsbGVkQ29sb3InLCBzaWxlbnQoKCkgPT4gZGFya1BhbGV0dGUuZ2V0Q29udHJhc3RUZXh0KHBhbGV0dGUuc3VjY2Vzcy5kYXJrKSkpO1xuICAgICAgc2V0Q29sb3IocGFsZXR0ZS5BbGVydCwgJ3dhcm5pbmdGaWxsZWRDb2xvcicsIHNpbGVudCgoKSA9PiBkYXJrUGFsZXR0ZS5nZXRDb250cmFzdFRleHQocGFsZXR0ZS53YXJuaW5nLmRhcmspKSk7XG4gICAgICBzZXRDb2xvcihwYWxldHRlLkFsZXJ0LCAnZXJyb3JTdGFuZGFyZEJnJywgc2FmZURhcmtlbihwYWxldHRlLmVycm9yLmxpZ2h0LCAwLjkpKTtcbiAgICAgIHNldENvbG9yKHBhbGV0dGUuQWxlcnQsICdpbmZvU3RhbmRhcmRCZycsIHNhZmVEYXJrZW4ocGFsZXR0ZS5pbmZvLmxpZ2h0LCAwLjkpKTtcbiAgICAgIHNldENvbG9yKHBhbGV0dGUuQWxlcnQsICdzdWNjZXNzU3RhbmRhcmRCZycsIHNhZmVEYXJrZW4ocGFsZXR0ZS5zdWNjZXNzLmxpZ2h0LCAwLjkpKTtcbiAgICAgIHNldENvbG9yKHBhbGV0dGUuQWxlcnQsICd3YXJuaW5nU3RhbmRhcmRCZycsIHNhZmVEYXJrZW4ocGFsZXR0ZS53YXJuaW5nLmxpZ2h0LCAwLjkpKTtcbiAgICAgIHNldENvbG9yKHBhbGV0dGUuQWxlcnQsICdlcnJvckljb25Db2xvcicsIHNldENzc1ZhckNvbG9yKCdwYWxldHRlLWVycm9yLW1haW4nKSk7XG4gICAgICBzZXRDb2xvcihwYWxldHRlLkFsZXJ0LCAnaW5mb0ljb25Db2xvcicsIHNldENzc1ZhckNvbG9yKCdwYWxldHRlLWluZm8tbWFpbicpKTtcbiAgICAgIHNldENvbG9yKHBhbGV0dGUuQWxlcnQsICdzdWNjZXNzSWNvbkNvbG9yJywgc2V0Q3NzVmFyQ29sb3IoJ3BhbGV0dGUtc3VjY2Vzcy1tYWluJykpO1xuICAgICAgc2V0Q29sb3IocGFsZXR0ZS5BbGVydCwgJ3dhcm5pbmdJY29uQ29sb3InLCBzZXRDc3NWYXJDb2xvcigncGFsZXR0ZS13YXJuaW5nLW1haW4nKSk7XG4gICAgICBzZXRDb2xvcihwYWxldHRlLkFwcEJhciwgJ2RlZmF1bHRCZycsIHNldENzc1ZhckNvbG9yKCdwYWxldHRlLWdyZXktOTAwJykpO1xuICAgICAgc2V0Q29sb3IocGFsZXR0ZS5BcHBCYXIsICdkYXJrQmcnLCBzZXRDc3NWYXJDb2xvcigncGFsZXR0ZS1iYWNrZ3JvdW5kLXBhcGVyJykpOyAvLyBzcGVjaWZpYyBmb3IgZGFyayBtb2RlXG4gICAgICBzZXRDb2xvcihwYWxldHRlLkFwcEJhciwgJ2RhcmtDb2xvcicsIHNldENzc1ZhckNvbG9yKCdwYWxldHRlLXRleHQtcHJpbWFyeScpKTsgLy8gc3BlY2lmaWMgZm9yIGRhcmsgbW9kZVxuICAgICAgc2V0Q29sb3IocGFsZXR0ZS5BdmF0YXIsICdkZWZhdWx0QmcnLCBzZXRDc3NWYXJDb2xvcigncGFsZXR0ZS1ncmV5LTYwMCcpKTtcbiAgICAgIHNldENvbG9yKHBhbGV0dGUuQnV0dG9uLCAnaW5oZXJpdENvbnRhaW5lZEJnJywgc2V0Q3NzVmFyQ29sb3IoJ3BhbGV0dGUtZ3JleS04MDAnKSk7XG4gICAgICBzZXRDb2xvcihwYWxldHRlLkJ1dHRvbiwgJ2luaGVyaXRDb250YWluZWRIb3ZlckJnJywgc2V0Q3NzVmFyQ29sb3IoJ3BhbGV0dGUtZ3JleS03MDAnKSk7XG4gICAgICBzZXRDb2xvcihwYWxldHRlLkNoaXAsICdkZWZhdWx0Qm9yZGVyJywgc2V0Q3NzVmFyQ29sb3IoJ3BhbGV0dGUtZ3JleS03MDAnKSk7XG4gICAgICBzZXRDb2xvcihwYWxldHRlLkNoaXAsICdkZWZhdWx0QXZhdGFyQ29sb3InLCBzZXRDc3NWYXJDb2xvcigncGFsZXR0ZS1ncmV5LTMwMCcpKTtcbiAgICAgIHNldENvbG9yKHBhbGV0dGUuQ2hpcCwgJ2RlZmF1bHRJY29uQ29sb3InLCBzZXRDc3NWYXJDb2xvcigncGFsZXR0ZS1ncmV5LTMwMCcpKTtcbiAgICAgIHNldENvbG9yKHBhbGV0dGUuRmlsbGVkSW5wdXQsICdiZycsICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMDkpJyk7XG4gICAgICBzZXRDb2xvcihwYWxldHRlLkZpbGxlZElucHV0LCAnaG92ZXJCZycsICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMTMpJyk7XG4gICAgICBzZXRDb2xvcihwYWxldHRlLkZpbGxlZElucHV0LCAnZGlzYWJsZWRCZycsICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMTIpJyk7XG4gICAgICBzZXRDb2xvcihwYWxldHRlLkxpbmVhclByb2dyZXNzLCAncHJpbWFyeUJnJywgc2FmZURhcmtlbihwYWxldHRlLnByaW1hcnkubWFpbiwgMC41KSk7XG4gICAgICBzZXRDb2xvcihwYWxldHRlLkxpbmVhclByb2dyZXNzLCAnc2Vjb25kYXJ5QmcnLCBzYWZlRGFya2VuKHBhbGV0dGUuc2Vjb25kYXJ5Lm1haW4sIDAuNSkpO1xuICAgICAgc2V0Q29sb3IocGFsZXR0ZS5MaW5lYXJQcm9ncmVzcywgJ2Vycm9yQmcnLCBzYWZlRGFya2VuKHBhbGV0dGUuZXJyb3IubWFpbiwgMC41KSk7XG4gICAgICBzZXRDb2xvcihwYWxldHRlLkxpbmVhclByb2dyZXNzLCAnaW5mb0JnJywgc2FmZURhcmtlbihwYWxldHRlLmluZm8ubWFpbiwgMC41KSk7XG4gICAgICBzZXRDb2xvcihwYWxldHRlLkxpbmVhclByb2dyZXNzLCAnc3VjY2Vzc0JnJywgc2FmZURhcmtlbihwYWxldHRlLnN1Y2Nlc3MubWFpbiwgMC41KSk7XG4gICAgICBzZXRDb2xvcihwYWxldHRlLkxpbmVhclByb2dyZXNzLCAnd2FybmluZ0JnJywgc2FmZURhcmtlbihwYWxldHRlLndhcm5pbmcubWFpbiwgMC41KSk7XG4gICAgICBzZXRDb2xvcihwYWxldHRlLlNrZWxldG9uLCAnYmcnLCBgcmdiYSgke3NldENzc1ZhckNvbG9yKCdwYWxldHRlLXRleHQtcHJpbWFyeUNoYW5uZWwnKX0gLyAwLjEzKWApO1xuICAgICAgc2V0Q29sb3IocGFsZXR0ZS5TbGlkZXIsICdwcmltYXJ5VHJhY2snLCBzYWZlRGFya2VuKHBhbGV0dGUucHJpbWFyeS5tYWluLCAwLjUpKTtcbiAgICAgIHNldENvbG9yKHBhbGV0dGUuU2xpZGVyLCAnc2Vjb25kYXJ5VHJhY2snLCBzYWZlRGFya2VuKHBhbGV0dGUuc2Vjb25kYXJ5Lm1haW4sIDAuNSkpO1xuICAgICAgc2V0Q29sb3IocGFsZXR0ZS5TbGlkZXIsICdlcnJvclRyYWNrJywgc2FmZURhcmtlbihwYWxldHRlLmVycm9yLm1haW4sIDAuNSkpO1xuICAgICAgc2V0Q29sb3IocGFsZXR0ZS5TbGlkZXIsICdpbmZvVHJhY2snLCBzYWZlRGFya2VuKHBhbGV0dGUuaW5mby5tYWluLCAwLjUpKTtcbiAgICAgIHNldENvbG9yKHBhbGV0dGUuU2xpZGVyLCAnc3VjY2Vzc1RyYWNrJywgc2FmZURhcmtlbihwYWxldHRlLnN1Y2Nlc3MubWFpbiwgMC41KSk7XG4gICAgICBzZXRDb2xvcihwYWxldHRlLlNsaWRlciwgJ3dhcm5pbmdUcmFjaycsIHNhZmVEYXJrZW4ocGFsZXR0ZS53YXJuaW5nLm1haW4sIDAuNSkpO1xuICAgICAgY29uc3Qgc25hY2tiYXJDb250ZW50QmFja2dyb3VuZCA9IHNhZmVFbXBoYXNpemUocGFsZXR0ZS5iYWNrZ3JvdW5kLmRlZmF1bHQsIDAuOTgpO1xuICAgICAgc2V0Q29sb3IocGFsZXR0ZS5TbmFja2JhckNvbnRlbnQsICdiZycsIHNuYWNrYmFyQ29udGVudEJhY2tncm91bmQpO1xuICAgICAgc2V0Q29sb3IocGFsZXR0ZS5TbmFja2JhckNvbnRlbnQsICdjb2xvcicsIHNpbGVudCgoKSA9PiBkYXJrUGFsZXR0ZS5nZXRDb250cmFzdFRleHQoc25hY2tiYXJDb250ZW50QmFja2dyb3VuZCkpKTtcbiAgICAgIHNldENvbG9yKHBhbGV0dGUuU3BlZWREaWFsQWN0aW9uLCAnZmFiSG92ZXJCZycsIHNhZmVFbXBoYXNpemUocGFsZXR0ZS5iYWNrZ3JvdW5kLnBhcGVyLCAwLjE1KSk7XG4gICAgICBzZXRDb2xvcihwYWxldHRlLlN0ZXBDb25uZWN0b3IsICdib3JkZXInLCBzZXRDc3NWYXJDb2xvcigncGFsZXR0ZS1ncmV5LTYwMCcpKTtcbiAgICAgIHNldENvbG9yKHBhbGV0dGUuU3RlcENvbnRlbnQsICdib3JkZXInLCBzZXRDc3NWYXJDb2xvcigncGFsZXR0ZS1ncmV5LTYwMCcpKTtcbiAgICAgIHNldENvbG9yKHBhbGV0dGUuU3dpdGNoLCAnZGVmYXVsdENvbG9yJywgc2V0Q3NzVmFyQ29sb3IoJ3BhbGV0dGUtZ3JleS0zMDAnKSk7XG4gICAgICBzZXRDb2xvcihwYWxldHRlLlN3aXRjaCwgJ2RlZmF1bHREaXNhYmxlZENvbG9yJywgc2V0Q3NzVmFyQ29sb3IoJ3BhbGV0dGUtZ3JleS02MDAnKSk7XG4gICAgICBzZXRDb2xvcihwYWxldHRlLlN3aXRjaCwgJ3ByaW1hcnlEaXNhYmxlZENvbG9yJywgc2FmZURhcmtlbihwYWxldHRlLnByaW1hcnkubWFpbiwgMC41NSkpO1xuICAgICAgc2V0Q29sb3IocGFsZXR0ZS5Td2l0Y2gsICdzZWNvbmRhcnlEaXNhYmxlZENvbG9yJywgc2FmZURhcmtlbihwYWxldHRlLnNlY29uZGFyeS5tYWluLCAwLjU1KSk7XG4gICAgICBzZXRDb2xvcihwYWxldHRlLlN3aXRjaCwgJ2Vycm9yRGlzYWJsZWRDb2xvcicsIHNhZmVEYXJrZW4ocGFsZXR0ZS5lcnJvci5tYWluLCAwLjU1KSk7XG4gICAgICBzZXRDb2xvcihwYWxldHRlLlN3aXRjaCwgJ2luZm9EaXNhYmxlZENvbG9yJywgc2FmZURhcmtlbihwYWxldHRlLmluZm8ubWFpbiwgMC41NSkpO1xuICAgICAgc2V0Q29sb3IocGFsZXR0ZS5Td2l0Y2gsICdzdWNjZXNzRGlzYWJsZWRDb2xvcicsIHNhZmVEYXJrZW4ocGFsZXR0ZS5zdWNjZXNzLm1haW4sIDAuNTUpKTtcbiAgICAgIHNldENvbG9yKHBhbGV0dGUuU3dpdGNoLCAnd2FybmluZ0Rpc2FibGVkQ29sb3InLCBzYWZlRGFya2VuKHBhbGV0dGUud2FybmluZy5tYWluLCAwLjU1KSk7XG4gICAgICBzZXRDb2xvcihwYWxldHRlLlRhYmxlQ2VsbCwgJ2JvcmRlcicsIHNhZmVEYXJrZW4oc2FmZUFscGhhKHBhbGV0dGUuZGl2aWRlciwgMSksIDAuNjgpKTtcbiAgICAgIHNldENvbG9yKHBhbGV0dGUuVG9vbHRpcCwgJ2JnJywgc2FmZUFscGhhKHBhbGV0dGUuZ3JleVs3MDBdLCAwLjkyKSk7XG4gICAgfVxuXG4gICAgLy8gTVVJIFggLSBEYXRhR3JpZCBuZWVkcyB0aGlzIHRva2VuLlxuICAgIHNldENvbG9yQ2hhbm5lbChwYWxldHRlLmJhY2tncm91bmQsICdkZWZhdWx0Jyk7XG5cbiAgICAvLyBhZGRlZCBmb3IgY29uc2lzdGVuY3kgd2l0aCB0aGUgYGJhY2tncm91bmQuZGVmYXVsdGAgdG9rZW5cbiAgICBzZXRDb2xvckNoYW5uZWwocGFsZXR0ZS5iYWNrZ3JvdW5kLCAncGFwZXInKTtcbiAgICBzZXRDb2xvckNoYW5uZWwocGFsZXR0ZS5jb21tb24sICdiYWNrZ3JvdW5kJyk7XG4gICAgc2V0Q29sb3JDaGFubmVsKHBhbGV0dGUuY29tbW9uLCAnb25CYWNrZ3JvdW5kJyk7XG4gICAgc2V0Q29sb3JDaGFubmVsKHBhbGV0dGUsICdkaXZpZGVyJyk7XG4gICAgT2JqZWN0LmtleXMocGFsZXR0ZSkuZm9yRWFjaChjb2xvciA9PiB7XG4gICAgICBjb25zdCBjb2xvcnMgPSBwYWxldHRlW2NvbG9yXTtcblxuICAgICAgLy8gVGhlIGRlZmF1bHQgcGFsZXR0ZXMgKHByaW1hcnksIHNlY29uZGFyeSwgZXJyb3IsIGluZm8sIHN1Y2Nlc3MsIGFuZCB3YXJuaW5nKSBlcnJvcnMgYXJlIGhhbmRsZWQgYnkgdGhlIGFib3ZlIGBjcmVhdGVUaGVtZSguLi4pYC5cblxuICAgICAgaWYgKGNvbG9ycyAmJiB0eXBlb2YgY29sb3JzID09PSAnb2JqZWN0Jykge1xuICAgICAgICAvLyBTaWxlbnQgdGhlIGVycm9yIGZvciBjdXN0b20gcGFsZXR0ZXMuXG4gICAgICAgIGlmIChjb2xvcnMubWFpbikge1xuICAgICAgICAgIHNldENvbG9yKHBhbGV0dGVbY29sb3JdLCAnbWFpbkNoYW5uZWwnLCBzYWZlQ29sb3JDaGFubmVsKHRvUmdiKGNvbG9ycy5tYWluKSkpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjb2xvcnMubGlnaHQpIHtcbiAgICAgICAgICBzZXRDb2xvcihwYWxldHRlW2NvbG9yXSwgJ2xpZ2h0Q2hhbm5lbCcsIHNhZmVDb2xvckNoYW5uZWwodG9SZ2IoY29sb3JzLmxpZ2h0KSkpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjb2xvcnMuZGFyaykge1xuICAgICAgICAgIHNldENvbG9yKHBhbGV0dGVbY29sb3JdLCAnZGFya0NoYW5uZWwnLCBzYWZlQ29sb3JDaGFubmVsKHRvUmdiKGNvbG9ycy5kYXJrKSkpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjb2xvcnMuY29udHJhc3RUZXh0KSB7XG4gICAgICAgICAgc2V0Q29sb3IocGFsZXR0ZVtjb2xvcl0sICdjb250cmFzdFRleHRDaGFubmVsJywgc2FmZUNvbG9yQ2hhbm5lbCh0b1JnYihjb2xvcnMuY29udHJhc3RUZXh0KSkpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjb2xvciA9PT0gJ3RleHQnKSB7XG4gICAgICAgICAgLy8gVGV4dCBjb2xvcnM6IHRleHQucHJpbWFyeSwgdGV4dC5zZWNvbmRhcnlcbiAgICAgICAgICBzZXRDb2xvckNoYW5uZWwocGFsZXR0ZVtjb2xvcl0sICdwcmltYXJ5Jyk7XG4gICAgICAgICAgc2V0Q29sb3JDaGFubmVsKHBhbGV0dGVbY29sb3JdLCAnc2Vjb25kYXJ5Jyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNvbG9yID09PSAnYWN0aW9uJykge1xuICAgICAgICAgIC8vIEFjdGlvbiBjb2xvcnM6IGFjdGlvbi5hY3RpdmUsIGFjdGlvbi5zZWxlY3RlZFxuICAgICAgICAgIGlmIChjb2xvcnMuYWN0aXZlKSB7XG4gICAgICAgICAgICBzZXRDb2xvckNoYW5uZWwocGFsZXR0ZVtjb2xvcl0sICdhY3RpdmUnKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGNvbG9ycy5zZWxlY3RlZCkge1xuICAgICAgICAgICAgc2V0Q29sb3JDaGFubmVsKHBhbGV0dGVbY29sb3JdLCAnc2VsZWN0ZWQnKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG4gIHRoZW1lID0gYXJncy5yZWR1Y2UoKGFjYywgYXJndW1lbnQpID0+IGRlZXBtZXJnZShhY2MsIGFyZ3VtZW50KSwgdGhlbWUpO1xuICBjb25zdCBwYXJzZXJDb25maWcgPSB7XG4gICAgcHJlZml4OiBjc3NWYXJQcmVmaXgsXG4gICAgc2hvdWxkU2tpcEdlbmVyYXRpbmdWYXJcbiAgfTtcbiAgY29uc3Qge1xuICAgIHZhcnM6IHRoZW1lVmFycyxcbiAgICBnZW5lcmF0ZUNzc1ZhcnNcbiAgfSA9IHByZXBhcmVDc3NWYXJzKHRoZW1lLCBwYXJzZXJDb25maWcpO1xuICB0aGVtZS52YXJzID0gdGhlbWVWYXJzO1xuICB0aGVtZS5nZW5lcmF0ZUNzc1ZhcnMgPSBnZW5lcmF0ZUNzc1ZhcnM7XG4gIHRoZW1lLnNob3VsZFNraXBHZW5lcmF0aW5nVmFyID0gc2hvdWxkU2tpcEdlbmVyYXRpbmdWYXI7XG4gIHRoZW1lLnVuc3RhYmxlX3N4Q29uZmlnID0gX2V4dGVuZHMoe30sIGRlZmF1bHRTeENvbmZpZywgaW5wdXQgPT0gbnVsbCA/IHZvaWQgMCA6IGlucHV0LnVuc3RhYmxlX3N4Q29uZmlnKTtcbiAgdGhlbWUudW5zdGFibGVfc3ggPSBmdW5jdGlvbiBzeChwcm9wcykge1xuICAgIHJldHVybiBzdHlsZUZ1bmN0aW9uU3goe1xuICAgICAgc3g6IHByb3BzLFxuICAgICAgdGhlbWU6IHRoaXNcbiAgICB9KTtcbiAgfTtcbiAgcmV0dXJuIHRoZW1lO1xufSIsIi8qKlxuICogQGludGVybmFsIFRoZXNlIHZhcmlhYmxlcyBzaG91bGQgbm90IGFwcGVhciBpbiB0aGUgOnJvb3Qgc3R5bGVzaGVldCB3aGVuIHRoZSBgZGVmYXVsdE1vZGU9XCJkYXJrXCJgXG4gKi9cbmNvbnN0IGV4Y2x1ZGVWYXJpYWJsZXNGcm9tUm9vdCA9IGNzc1ZhclByZWZpeCA9PiBbLi4uWy4uLkFycmF5KDI0KV0ubWFwKChfLCBpbmRleCkgPT4gYC0tJHtjc3NWYXJQcmVmaXggPyBgJHtjc3NWYXJQcmVmaXh9LWAgOiAnJ31vdmVybGF5cy0ke2luZGV4ICsgMX1gKSwgYC0tJHtjc3NWYXJQcmVmaXggPyBgJHtjc3NWYXJQcmVmaXh9LWAgOiAnJ31wYWxldHRlLUFwcEJhci1kYXJrQmdgLCBgLS0ke2Nzc1ZhclByZWZpeCA/IGAke2Nzc1ZhclByZWZpeH0tYCA6ICcnfXBhbGV0dGUtQXBwQmFyLWRhcmtDb2xvcmBdO1xuZXhwb3J0IGRlZmF1bHQgZXhjbHVkZVZhcmlhYmxlc0Zyb21Sb290OyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFN5c3RlbUluaXRDb2xvclNjaGVtZVNjcmlwdCBmcm9tICdAbXVpL3N5c3RlbS9Jbml0Q29sb3JTY2hlbWVTY3JpcHQnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmV4cG9ydCBjb25zdCBkZWZhdWx0Q29uZmlnID0ge1xuICBhdHRyaWJ1dGU6ICdkYXRhLW11aS1jb2xvci1zY2hlbWUnLFxuICBjb2xvclNjaGVtZVN0b3JhZ2VLZXk6ICdtdWktY29sb3Itc2NoZW1lJyxcbiAgZGVmYXVsdExpZ2h0Q29sb3JTY2hlbWU6ICdsaWdodCcsXG4gIGRlZmF1bHREYXJrQ29sb3JTY2hlbWU6ICdkYXJrJyxcbiAgbW9kZVN0b3JhZ2VLZXk6ICdtdWktbW9kZSdcbn07XG5leHBvcnQgZGVmYXVsdCAoZnVuY3Rpb24gSW5pdENvbG9yU2NoZW1lU2NyaXB0KHByb3BzKSB7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeChTeXN0ZW1Jbml0Q29sb3JTY2hlbWVTY3JpcHQsIF9leHRlbmRzKHt9LCBkZWZhdWx0Q29uZmlnLCBwcm9wcykpO1xufSk7IiwiJ3VzZSBjbGllbnQnO1xuXG4vLyBkbyBub3QgcmVtb3ZlIHRoZSBmb2xsb3dpbmcgaW1wb3J0IChodHRwczovL2dpdGh1Yi5jb20vbWljcm9zb2Z0L1R5cGVTY3JpcHQvaXNzdWVzLzI5ODA4I2lzc3VlY29tbWVudC0xMzIwNzEzMDE4KVxuLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzICovXG4vLyBAdHMtaWdub3JlXG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCB7IHVuc3RhYmxlX2NyZWF0ZUNzc1ZhcnNQcm92aWRlciBhcyBjcmVhdGVDc3NWYXJzUHJvdmlkZXIgfSBmcm9tICdAbXVpL3N5c3RlbSc7XG5pbXBvcnQgc3R5bGVGdW5jdGlvblN4IGZyb20gJ0BtdWkvc3lzdGVtL3N0eWxlRnVuY3Rpb25TeCc7XG5pbXBvcnQgZXhwZXJpbWVudGFsX2V4dGVuZFRoZW1lIGZyb20gJy4vZXhwZXJpbWVudGFsX2V4dGVuZFRoZW1lJztcbmltcG9ydCBjcmVhdGVUeXBvZ3JhcGh5IGZyb20gJy4vY3JlYXRlVHlwb2dyYXBoeSc7XG5pbXBvcnQgZXhjbHVkZVZhcmlhYmxlc0Zyb21Sb290IGZyb20gJy4vZXhjbHVkZVZhcmlhYmxlc0Zyb21Sb290JztcbmltcG9ydCBUSEVNRV9JRCBmcm9tICcuL2lkZW50aWZpZXInO1xuaW1wb3J0IHsgZGVmYXVsdENvbmZpZyB9IGZyb20gJy4uL0luaXRDb2xvclNjaGVtZVNjcmlwdC9Jbml0Q29sb3JTY2hlbWVTY3JpcHQnO1xuY29uc3QgZGVmYXVsdFRoZW1lID0gZXhwZXJpbWVudGFsX2V4dGVuZFRoZW1lKCk7XG5jb25zdCB7XG4gIENzc1ZhcnNQcm92aWRlcixcbiAgdXNlQ29sb3JTY2hlbWUsXG4gIGdldEluaXRDb2xvclNjaGVtZVNjcmlwdDogZ2V0SW5pdENvbG9yU2NoZW1lU2NyaXB0U3lzdGVtXG59ID0gY3JlYXRlQ3NzVmFyc1Byb3ZpZGVyKHtcbiAgdGhlbWVJZDogVEhFTUVfSUQsXG4gIHRoZW1lOiBkZWZhdWx0VGhlbWUsXG4gIGF0dHJpYnV0ZTogZGVmYXVsdENvbmZpZy5hdHRyaWJ1dGUsXG4gIGNvbG9yU2NoZW1lU3RvcmFnZUtleTogZGVmYXVsdENvbmZpZy5jb2xvclNjaGVtZVN0b3JhZ2VLZXksXG4gIG1vZGVTdG9yYWdlS2V5OiBkZWZhdWx0Q29uZmlnLm1vZGVTdG9yYWdlS2V5LFxuICBkZWZhdWx0Q29sb3JTY2hlbWU6IHtcbiAgICBsaWdodDogZGVmYXVsdENvbmZpZy5kZWZhdWx0TGlnaHRDb2xvclNjaGVtZSxcbiAgICBkYXJrOiBkZWZhdWx0Q29uZmlnLmRlZmF1bHREYXJrQ29sb3JTY2hlbWVcbiAgfSxcbiAgcmVzb2x2ZVRoZW1lOiB0aGVtZSA9PiB7XG4gICAgY29uc3QgbmV3VGhlbWUgPSBfZXh0ZW5kcyh7fSwgdGhlbWUsIHtcbiAgICAgIHR5cG9ncmFwaHk6IGNyZWF0ZVR5cG9ncmFwaHkodGhlbWUucGFsZXR0ZSwgdGhlbWUudHlwb2dyYXBoeSlcbiAgICB9KTtcbiAgICBuZXdUaGVtZS51bnN0YWJsZV9zeCA9IGZ1bmN0aW9uIHN4KHByb3BzKSB7XG4gICAgICByZXR1cm4gc3R5bGVGdW5jdGlvblN4KHtcbiAgICAgICAgc3g6IHByb3BzLFxuICAgICAgICB0aGVtZTogdGhpc1xuICAgICAgfSk7XG4gICAgfTtcbiAgICByZXR1cm4gbmV3VGhlbWU7XG4gIH0sXG4gIGV4Y2x1ZGVWYXJpYWJsZXNGcm9tUm9vdFxufSk7XG5cbi8qKlxuICogQGRlcHJlY2F0ZWQgVXNlIGBJbml0Q29sb3JTY2hlbWVTY3JpcHRgIGluc3RlYWRcbiAqIGBgYGRpZmZcbiAqIC0gaW1wb3J0IHsgZ2V0SW5pdENvbG9yU2NoZW1lU2NyaXB0IH0gZnJvbSAnQG11aS9tYXRlcmlhbC9zdHlsZXMnO1xuICogKyBpbXBvcnQgSW5pdENvbG9yU2NoZW1lU2NyaXB0IGZyb20gJ0BtdWkvbWF0ZXJpYWwvSW5pdENvbG9yU2NoZW1lU2NyaXB0JztcbiAqXG4gKiAtIGdldEluaXRDb2xvclNjaGVtZVNjcmlwdCgpO1xuICogKyA8SW5pdENvbG9yU2NoZW1lU2NyaXB0IC8+O1xuICogYGBgXG4gKi9cbmV4cG9ydCBjb25zdCBnZXRJbml0Q29sb3JTY2hlbWVTY3JpcHQgPSBnZXRJbml0Q29sb3JTY2hlbWVTY3JpcHRTeXN0ZW07XG5leHBvcnQgeyB1c2VDb2xvclNjaGVtZSwgQ3NzVmFyc1Byb3ZpZGVyIGFzIEV4cGVyaW1lbnRhbF9Dc3NWYXJzUHJvdmlkZXIgfTsiLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCBfZm9ybWF0TXVpRXJyb3JNZXNzYWdlIGZyb20gXCJAbXVpL3V0aWxzL2Zvcm1hdE11aUVycm9yTWVzc2FnZVwiO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBUSEVNRV9JRCB9IGZyb20gJy4vaWRlbnRpZmllcic7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGFkYXB0VjRUaGVtZSB9IGZyb20gJy4vYWRhcHRWNFRoZW1lJztcbmV4cG9ydCB7IGhleFRvUmdiLCByZ2JUb0hleCwgaHNsVG9SZ2IsIGRlY29tcG9zZUNvbG9yLCByZWNvbXBvc2VDb2xvciwgZ2V0Q29udHJhc3RSYXRpbywgZ2V0THVtaW5hbmNlLCBlbXBoYXNpemUsIGFscGhhLCBkYXJrZW4sIGxpZ2h0ZW4sIGNzcywga2V5ZnJhbWVzIH0gZnJvbSAnQG11aS9zeXN0ZW0nO1xuLy8gVE9ETzogUmVtb3ZlIHRoaXMgZnVuY3Rpb24gaW4gdjYuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25hbWluZy1jb252ZW50aW9uXG5leHBvcnQgZnVuY3Rpb24gZXhwZXJpbWVudGFsX3N4KCkge1xuICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gYE1VSTogVGhlIFxcYGV4cGVyaW1lbnRhbF9zeFxcYCBoYXMgYmVlbiBtb3ZlZCB0byBcXGB0aGVtZS51bnN0YWJsZV9zeFxcYC5Gb3IgbW9yZSBkZXRhaWxzLCBzZWUgaHR0cHM6Ly9naXRodWIuY29tL211aS9tYXRlcmlhbC11aS9wdWxsLzM1MTUwLmAgOiBfZm9ybWF0TXVpRXJyb3JNZXNzYWdlKDIwKSk7XG59XG5leHBvcnQgeyBkZWZhdWx0IGFzIGNyZWF0ZVRoZW1lLCBjcmVhdGVNdWlUaGVtZSB9IGZyb20gJy4vY3JlYXRlVGhlbWUnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyB1bnN0YWJsZV9jcmVhdGVNdWlTdHJpY3RNb2RlVGhlbWUgfSBmcm9tICcuL2NyZWF0ZU11aVN0cmljdE1vZGVUaGVtZSc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGNyZWF0ZVN0eWxlcyB9IGZyb20gJy4vY3JlYXRlU3R5bGVzJztcbmV4cG9ydCB7IGdldFVuaXQgYXMgdW5zdGFibGVfZ2V0VW5pdCwgdG9Vbml0bGVzcyBhcyB1bnN0YWJsZV90b1VuaXRsZXNzIH0gZnJvbSAnLi9jc3NVdGlscyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHJlc3BvbnNpdmVGb250U2l6ZXMgfSBmcm9tICcuL3Jlc3BvbnNpdmVGb250U2l6ZXMnO1xuZXhwb3J0IHsgZHVyYXRpb24sIGVhc2luZyB9IGZyb20gJy4vY3JlYXRlVHJhbnNpdGlvbnMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyB1c2VUaGVtZSB9IGZyb20gJy4vdXNlVGhlbWUnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyB1c2VUaGVtZVByb3BzIH0gZnJvbSAnLi91c2VUaGVtZVByb3BzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgc3R5bGVkIH0gZnJvbSAnLi9zdHlsZWQnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBleHBlcmltZW50YWxTdHlsZWQgfSBmcm9tICcuL3N0eWxlZCc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIFRoZW1lUHJvdmlkZXIgfSBmcm9tICcuL1RoZW1lUHJvdmlkZXInO1xuZXhwb3J0IHsgU3R5bGVkRW5naW5lUHJvdmlkZXIgfSBmcm9tICdAbXVpL3N5c3RlbSc7XG4vLyBUaGUgbGVnYWN5IHV0aWxpdGllcyBmcm9tIEBtdWkvc3R5bGVzXG4vLyBUaGVzZSBhcmUganVzdCBlbXB0eSBmdW5jdGlvbnMgdGhhdCB0aHJvd3Mgd2hlbiBpbnZva2VkXG5leHBvcnQgeyBkZWZhdWx0IGFzIG1ha2VTdHlsZXMgfSBmcm9tICcuL21ha2VTdHlsZXMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyB3aXRoU3R5bGVzIH0gZnJvbSAnLi93aXRoU3R5bGVzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgd2l0aFRoZW1lIH0gZnJvbSAnLi93aXRoVGhlbWUnO1xuZXhwb3J0ICogZnJvbSAnLi9Dc3NWYXJzUHJvdmlkZXInO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBleHBlcmltZW50YWxfZXh0ZW5kVGhlbWUgfSBmcm9tICcuL2V4cGVyaW1lbnRhbF9leHRlbmRUaGVtZSc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGdldE92ZXJsYXlBbHBoYSB9IGZyb20gJy4vZ2V0T3ZlcmxheUFscGhhJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgc2hvdWxkU2tpcEdlbmVyYXRpbmdWYXIgfSBmcm9tICcuL3Nob3VsZFNraXBHZW5lcmF0aW5nVmFyJztcblxuLy8gUHJpdmF0ZSBtZXRob2RzIGZvciBjcmVhdGluZyBwYXJ0cyBvZiB0aGUgdGhlbWVcbmV4cG9ydCB7IGRlZmF1bHQgYXMgcHJpdmF0ZV9jcmVhdGVUeXBvZ3JhcGh5IH0gZnJvbSAnLi9jcmVhdGVUeXBvZ3JhcGh5JztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgcHJpdmF0ZV9jcmVhdGVNaXhpbnMgfSBmcm9tICcuL2NyZWF0ZU1peGlucyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHByaXZhdGVfZXhjbHVkZVZhcmlhYmxlc0Zyb21Sb290IH0gZnJvbSAnLi9leGNsdWRlVmFyaWFibGVzRnJvbVJvb3QnOyIsImltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3Nlcyc7XG5pbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3MgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzcyc7XG5leHBvcnQgZnVuY3Rpb24gZ2V0Q29sbGFwc2VVdGlsaXR5Q2xhc3Moc2xvdCkge1xuICByZXR1cm4gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoJ011aUNvbGxhcHNlJywgc2xvdCk7XG59XG5jb25zdCBjb2xsYXBzZUNsYXNzZXMgPSBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzKCdNdWlDb2xsYXBzZScsIFsncm9vdCcsICdob3Jpem9udGFsJywgJ3ZlcnRpY2FsJywgJ2VudGVyZWQnLCAnaGlkZGVuJywgJ3dyYXBwZXInLCAnd3JhcHBlcklubmVyJ10pO1xuZXhwb3J0IGRlZmF1bHQgY29sbGFwc2VDbGFzc2VzOyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImFkZEVuZExpc3RlbmVyXCIsIFwiY2hpbGRyZW5cIiwgXCJjbGFzc05hbWVcIiwgXCJjb2xsYXBzZWRTaXplXCIsIFwiY29tcG9uZW50XCIsIFwiZWFzaW5nXCIsIFwiaW5cIiwgXCJvbkVudGVyXCIsIFwib25FbnRlcmVkXCIsIFwib25FbnRlcmluZ1wiLCBcIm9uRXhpdFwiLCBcIm9uRXhpdGVkXCIsIFwib25FeGl0aW5nXCIsIFwib3JpZW50YXRpb25cIiwgXCJzdHlsZVwiLCBcInRpbWVvdXRcIiwgXCJUcmFuc2l0aW9uQ29tcG9uZW50XCJdO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgVHJhbnNpdGlvbiB9IGZyb20gJ3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAnO1xuaW1wb3J0IHVzZVRpbWVvdXQgZnJvbSAnQG11aS91dGlscy91c2VUaW1lb3V0JztcbmltcG9ydCBlbGVtZW50VHlwZUFjY2VwdGluZ1JlZiBmcm9tICdAbXVpL3V0aWxzL2VsZW1lbnRUeXBlQWNjZXB0aW5nUmVmJztcbmltcG9ydCBjb21wb3NlQ2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2NvbXBvc2VDbGFzc2VzJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnLi4vc3R5bGVzL3N0eWxlZCc7XG5pbXBvcnQgeyB1c2VEZWZhdWx0UHJvcHMgfSBmcm9tICcuLi9EZWZhdWx0UHJvcHNQcm92aWRlcic7XG5pbXBvcnQgeyBkdXJhdGlvbiB9IGZyb20gJy4uL3N0eWxlcy9jcmVhdGVUcmFuc2l0aW9ucyc7XG5pbXBvcnQgeyBnZXRUcmFuc2l0aW9uUHJvcHMgfSBmcm9tICcuLi90cmFuc2l0aW9ucy91dGlscyc7XG5pbXBvcnQgdXNlVGhlbWUgZnJvbSAnLi4vc3R5bGVzL3VzZVRoZW1lJztcbmltcG9ydCB7IHVzZUZvcmtSZWYgfSBmcm9tICcuLi91dGlscyc7XG5pbXBvcnQgeyBnZXRDb2xsYXBzZVV0aWxpdHlDbGFzcyB9IGZyb20gJy4vY29sbGFwc2VDbGFzc2VzJztcbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5jb25zdCB1c2VVdGlsaXR5Q2xhc3NlcyA9IG93bmVyU3RhdGUgPT4ge1xuICBjb25zdCB7XG4gICAgb3JpZW50YXRpb24sXG4gICAgY2xhc3Nlc1xuICB9ID0gb3duZXJTdGF0ZTtcbiAgY29uc3Qgc2xvdHMgPSB7XG4gICAgcm9vdDogWydyb290JywgYCR7b3JpZW50YXRpb259YF0sXG4gICAgZW50ZXJlZDogWydlbnRlcmVkJ10sXG4gICAgaGlkZGVuOiBbJ2hpZGRlbiddLFxuICAgIHdyYXBwZXI6IFsnd3JhcHBlcicsIGAke29yaWVudGF0aW9ufWBdLFxuICAgIHdyYXBwZXJJbm5lcjogWyd3cmFwcGVySW5uZXInLCBgJHtvcmllbnRhdGlvbn1gXVxuICB9O1xuICByZXR1cm4gY29tcG9zZUNsYXNzZXMoc2xvdHMsIGdldENvbGxhcHNlVXRpbGl0eUNsYXNzLCBjbGFzc2VzKTtcbn07XG5jb25zdCBDb2xsYXBzZVJvb3QgPSBzdHlsZWQoJ2RpdicsIHtcbiAgbmFtZTogJ011aUNvbGxhcHNlJyxcbiAgc2xvdDogJ1Jvb3QnLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBvd25lclN0YXRlXG4gICAgfSA9IHByb3BzO1xuICAgIHJldHVybiBbc3R5bGVzLnJvb3QsIHN0eWxlc1tvd25lclN0YXRlLm9yaWVudGF0aW9uXSwgb3duZXJTdGF0ZS5zdGF0ZSA9PT0gJ2VudGVyZWQnICYmIHN0eWxlcy5lbnRlcmVkLCBvd25lclN0YXRlLnN0YXRlID09PSAnZXhpdGVkJyAmJiAhb3duZXJTdGF0ZS5pbiAmJiBvd25lclN0YXRlLmNvbGxhcHNlZFNpemUgPT09ICcwcHgnICYmIHN0eWxlcy5oaWRkZW5dO1xuICB9XG59KSgoe1xuICB0aGVtZSxcbiAgb3duZXJTdGF0ZVxufSkgPT4gX2V4dGVuZHMoe1xuICBoZWlnaHQ6IDAsXG4gIG92ZXJmbG93OiAnaGlkZGVuJyxcbiAgdHJhbnNpdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCdoZWlnaHQnKVxufSwgb3duZXJTdGF0ZS5vcmllbnRhdGlvbiA9PT0gJ2hvcml6b250YWwnICYmIHtcbiAgaGVpZ2h0OiAnYXV0bycsXG4gIHdpZHRoOiAwLFxuICB0cmFuc2l0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoJ3dpZHRoJylcbn0sIG93bmVyU3RhdGUuc3RhdGUgPT09ICdlbnRlcmVkJyAmJiBfZXh0ZW5kcyh7XG4gIGhlaWdodDogJ2F1dG8nLFxuICBvdmVyZmxvdzogJ3Zpc2libGUnXG59LCBvd25lclN0YXRlLm9yaWVudGF0aW9uID09PSAnaG9yaXpvbnRhbCcgJiYge1xuICB3aWR0aDogJ2F1dG8nXG59KSwgb3duZXJTdGF0ZS5zdGF0ZSA9PT0gJ2V4aXRlZCcgJiYgIW93bmVyU3RhdGUuaW4gJiYgb3duZXJTdGF0ZS5jb2xsYXBzZWRTaXplID09PSAnMHB4JyAmJiB7XG4gIHZpc2liaWxpdHk6ICdoaWRkZW4nXG59KSk7XG5jb25zdCBDb2xsYXBzZVdyYXBwZXIgPSBzdHlsZWQoJ2RpdicsIHtcbiAgbmFtZTogJ011aUNvbGxhcHNlJyxcbiAgc2xvdDogJ1dyYXBwZXInLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHN0eWxlcy53cmFwcGVyXG59KSgoe1xuICBvd25lclN0YXRlXG59KSA9PiBfZXh0ZW5kcyh7XG4gIC8vIEhhY2sgdG8gZ2V0IGNoaWxkcmVuIHdpdGggYSBuZWdhdGl2ZSBtYXJnaW4gdG8gbm90IGZhbHNpZnkgdGhlIGhlaWdodCBjb21wdXRhdGlvbi5cbiAgZGlzcGxheTogJ2ZsZXgnLFxuICB3aWR0aDogJzEwMCUnXG59LCBvd25lclN0YXRlLm9yaWVudGF0aW9uID09PSAnaG9yaXpvbnRhbCcgJiYge1xuICB3aWR0aDogJ2F1dG8nLFxuICBoZWlnaHQ6ICcxMDAlJ1xufSkpO1xuY29uc3QgQ29sbGFwc2VXcmFwcGVySW5uZXIgPSBzdHlsZWQoJ2RpdicsIHtcbiAgbmFtZTogJ011aUNvbGxhcHNlJyxcbiAgc2xvdDogJ1dyYXBwZXJJbm5lcicsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4gc3R5bGVzLndyYXBwZXJJbm5lclxufSkoKHtcbiAgb3duZXJTdGF0ZVxufSkgPT4gX2V4dGVuZHMoe1xuICB3aWR0aDogJzEwMCUnXG59LCBvd25lclN0YXRlLm9yaWVudGF0aW9uID09PSAnaG9yaXpvbnRhbCcgJiYge1xuICB3aWR0aDogJ2F1dG8nLFxuICBoZWlnaHQ6ICcxMDAlJ1xufSkpO1xuXG4vKipcbiAqIFRoZSBDb2xsYXBzZSB0cmFuc2l0aW9uIGlzIHVzZWQgYnkgdGhlXG4gKiBbVmVydGljYWwgU3RlcHBlcl0oL21hdGVyaWFsLXVpL3JlYWN0LXN0ZXBwZXIvI3ZlcnRpY2FsLXN0ZXBwZXIpIFN0ZXBDb250ZW50IGNvbXBvbmVudC5cbiAqIEl0IHVzZXMgW3JlYWN0LXRyYW5zaXRpb24tZ3JvdXBdKGh0dHBzOi8vZ2l0aHViLmNvbS9yZWFjdGpzL3JlYWN0LXRyYW5zaXRpb24tZ3JvdXApIGludGVybmFsbHkuXG4gKi9cbmNvbnN0IENvbGxhcHNlID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gQ29sbGFwc2UoaW5Qcm9wcywgcmVmKSB7XG4gIGNvbnN0IHByb3BzID0gdXNlRGVmYXVsdFByb3BzKHtcbiAgICBwcm9wczogaW5Qcm9wcyxcbiAgICBuYW1lOiAnTXVpQ29sbGFwc2UnXG4gIH0pO1xuICBjb25zdCB7XG4gICAgICBhZGRFbmRMaXN0ZW5lcixcbiAgICAgIGNoaWxkcmVuLFxuICAgICAgY2xhc3NOYW1lLFxuICAgICAgY29sbGFwc2VkU2l6ZTogY29sbGFwc2VkU2l6ZVByb3AgPSAnMHB4JyxcbiAgICAgIGNvbXBvbmVudCxcbiAgICAgIGVhc2luZyxcbiAgICAgIGluOiBpblByb3AsXG4gICAgICBvbkVudGVyLFxuICAgICAgb25FbnRlcmVkLFxuICAgICAgb25FbnRlcmluZyxcbiAgICAgIG9uRXhpdCxcbiAgICAgIG9uRXhpdGVkLFxuICAgICAgb25FeGl0aW5nLFxuICAgICAgb3JpZW50YXRpb24gPSAndmVydGljYWwnLFxuICAgICAgc3R5bGUsXG4gICAgICB0aW1lb3V0ID0gZHVyYXRpb24uc3RhbmRhcmQsXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QvcHJvcC10eXBlc1xuICAgICAgVHJhbnNpdGlvbkNvbXBvbmVudCA9IFRyYW5zaXRpb25cbiAgICB9ID0gcHJvcHMsXG4gICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkKTtcbiAgY29uc3Qgb3duZXJTdGF0ZSA9IF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgIG9yaWVudGF0aW9uLFxuICAgIGNvbGxhcHNlZFNpemU6IGNvbGxhcHNlZFNpemVQcm9wXG4gIH0pO1xuICBjb25zdCBjbGFzc2VzID0gdXNlVXRpbGl0eUNsYXNzZXMob3duZXJTdGF0ZSk7XG4gIGNvbnN0IHRoZW1lID0gdXNlVGhlbWUoKTtcbiAgY29uc3QgdGltZXIgPSB1c2VUaW1lb3V0KCk7XG4gIGNvbnN0IHdyYXBwZXJSZWYgPSBSZWFjdC51c2VSZWYobnVsbCk7XG4gIGNvbnN0IGF1dG9UcmFuc2l0aW9uRHVyYXRpb24gPSBSZWFjdC51c2VSZWYoKTtcbiAgY29uc3QgY29sbGFwc2VkU2l6ZSA9IHR5cGVvZiBjb2xsYXBzZWRTaXplUHJvcCA9PT0gJ251bWJlcicgPyBgJHtjb2xsYXBzZWRTaXplUHJvcH1weGAgOiBjb2xsYXBzZWRTaXplUHJvcDtcbiAgY29uc3QgaXNIb3Jpem9udGFsID0gb3JpZW50YXRpb24gPT09ICdob3Jpem9udGFsJztcbiAgY29uc3Qgc2l6ZSA9IGlzSG9yaXpvbnRhbCA/ICd3aWR0aCcgOiAnaGVpZ2h0JztcbiAgY29uc3Qgbm9kZVJlZiA9IFJlYWN0LnVzZVJlZihudWxsKTtcbiAgY29uc3QgaGFuZGxlUmVmID0gdXNlRm9ya1JlZihyZWYsIG5vZGVSZWYpO1xuICBjb25zdCBub3JtYWxpemVkVHJhbnNpdGlvbkNhbGxiYWNrID0gY2FsbGJhY2sgPT4gbWF5YmVJc0FwcGVhcmluZyA9PiB7XG4gICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICBjb25zdCBub2RlID0gbm9kZVJlZi5jdXJyZW50O1xuXG4gICAgICAvLyBvbkVudGVyWHh4IGFuZCBvbkV4aXRYeHggY2FsbGJhY2tzIGhhdmUgYSBkaWZmZXJlbnQgYXJndW1lbnRzLmxlbmd0aCB2YWx1ZS5cbiAgICAgIGlmIChtYXliZUlzQXBwZWFyaW5nID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgY2FsbGJhY2sobm9kZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjYWxsYmFjayhub2RlLCBtYXliZUlzQXBwZWFyaW5nKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG4gIGNvbnN0IGdldFdyYXBwZXJTaXplID0gKCkgPT4gd3JhcHBlclJlZi5jdXJyZW50ID8gd3JhcHBlclJlZi5jdXJyZW50W2lzSG9yaXpvbnRhbCA/ICdjbGllbnRXaWR0aCcgOiAnY2xpZW50SGVpZ2h0J10gOiAwO1xuICBjb25zdCBoYW5kbGVFbnRlciA9IG5vcm1hbGl6ZWRUcmFuc2l0aW9uQ2FsbGJhY2soKG5vZGUsIGlzQXBwZWFyaW5nKSA9PiB7XG4gICAgaWYgKHdyYXBwZXJSZWYuY3VycmVudCAmJiBpc0hvcml6b250YWwpIHtcbiAgICAgIC8vIFNldCBhYnNvbHV0ZSBwb3NpdGlvbiB0byBnZXQgdGhlIHNpemUgb2YgY29sbGFwc2VkIGNvbnRlbnRcbiAgICAgIHdyYXBwZXJSZWYuY3VycmVudC5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XG4gICAgfVxuICAgIG5vZGUuc3R5bGVbc2l6ZV0gPSBjb2xsYXBzZWRTaXplO1xuICAgIGlmIChvbkVudGVyKSB7XG4gICAgICBvbkVudGVyKG5vZGUsIGlzQXBwZWFyaW5nKTtcbiAgICB9XG4gIH0pO1xuICBjb25zdCBoYW5kbGVFbnRlcmluZyA9IG5vcm1hbGl6ZWRUcmFuc2l0aW9uQ2FsbGJhY2soKG5vZGUsIGlzQXBwZWFyaW5nKSA9PiB7XG4gICAgY29uc3Qgd3JhcHBlclNpemUgPSBnZXRXcmFwcGVyU2l6ZSgpO1xuICAgIGlmICh3cmFwcGVyUmVmLmN1cnJlbnQgJiYgaXNIb3Jpem9udGFsKSB7XG4gICAgICAvLyBBZnRlciB0aGUgc2l6ZSBpcyByZWFkIHJlc2V0IHRoZSBwb3NpdGlvbiBiYWNrIHRvIGRlZmF1bHRcbiAgICAgIHdyYXBwZXJSZWYuY3VycmVudC5zdHlsZS5wb3NpdGlvbiA9ICcnO1xuICAgIH1cbiAgICBjb25zdCB7XG4gICAgICBkdXJhdGlvbjogdHJhbnNpdGlvbkR1cmF0aW9uLFxuICAgICAgZWFzaW5nOiB0cmFuc2l0aW9uVGltaW5nRnVuY3Rpb25cbiAgICB9ID0gZ2V0VHJhbnNpdGlvblByb3BzKHtcbiAgICAgIHN0eWxlLFxuICAgICAgdGltZW91dCxcbiAgICAgIGVhc2luZ1xuICAgIH0sIHtcbiAgICAgIG1vZGU6ICdlbnRlcidcbiAgICB9KTtcbiAgICBpZiAodGltZW91dCA9PT0gJ2F1dG8nKSB7XG4gICAgICBjb25zdCBkdXJhdGlvbjIgPSB0aGVtZS50cmFuc2l0aW9ucy5nZXRBdXRvSGVpZ2h0RHVyYXRpb24od3JhcHBlclNpemUpO1xuICAgICAgbm9kZS5zdHlsZS50cmFuc2l0aW9uRHVyYXRpb24gPSBgJHtkdXJhdGlvbjJ9bXNgO1xuICAgICAgYXV0b1RyYW5zaXRpb25EdXJhdGlvbi5jdXJyZW50ID0gZHVyYXRpb24yO1xuICAgIH0gZWxzZSB7XG4gICAgICBub2RlLnN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbiA9IHR5cGVvZiB0cmFuc2l0aW9uRHVyYXRpb24gPT09ICdzdHJpbmcnID8gdHJhbnNpdGlvbkR1cmF0aW9uIDogYCR7dHJhbnNpdGlvbkR1cmF0aW9ufW1zYDtcbiAgICB9XG4gICAgbm9kZS5zdHlsZVtzaXplXSA9IGAke3dyYXBwZXJTaXplfXB4YDtcbiAgICBub2RlLnN0eWxlLnRyYW5zaXRpb25UaW1pbmdGdW5jdGlvbiA9IHRyYW5zaXRpb25UaW1pbmdGdW5jdGlvbjtcbiAgICBpZiAob25FbnRlcmluZykge1xuICAgICAgb25FbnRlcmluZyhub2RlLCBpc0FwcGVhcmluZyk7XG4gICAgfVxuICB9KTtcbiAgY29uc3QgaGFuZGxlRW50ZXJlZCA9IG5vcm1hbGl6ZWRUcmFuc2l0aW9uQ2FsbGJhY2soKG5vZGUsIGlzQXBwZWFyaW5nKSA9PiB7XG4gICAgbm9kZS5zdHlsZVtzaXplXSA9ICdhdXRvJztcbiAgICBpZiAob25FbnRlcmVkKSB7XG4gICAgICBvbkVudGVyZWQobm9kZSwgaXNBcHBlYXJpbmcpO1xuICAgIH1cbiAgfSk7XG4gIGNvbnN0IGhhbmRsZUV4aXQgPSBub3JtYWxpemVkVHJhbnNpdGlvbkNhbGxiYWNrKG5vZGUgPT4ge1xuICAgIG5vZGUuc3R5bGVbc2l6ZV0gPSBgJHtnZXRXcmFwcGVyU2l6ZSgpfXB4YDtcbiAgICBpZiAob25FeGl0KSB7XG4gICAgICBvbkV4aXQobm9kZSk7XG4gICAgfVxuICB9KTtcbiAgY29uc3QgaGFuZGxlRXhpdGVkID0gbm9ybWFsaXplZFRyYW5zaXRpb25DYWxsYmFjayhvbkV4aXRlZCk7XG4gIGNvbnN0IGhhbmRsZUV4aXRpbmcgPSBub3JtYWxpemVkVHJhbnNpdGlvbkNhbGxiYWNrKG5vZGUgPT4ge1xuICAgIGNvbnN0IHdyYXBwZXJTaXplID0gZ2V0V3JhcHBlclNpemUoKTtcbiAgICBjb25zdCB7XG4gICAgICBkdXJhdGlvbjogdHJhbnNpdGlvbkR1cmF0aW9uLFxuICAgICAgZWFzaW5nOiB0cmFuc2l0aW9uVGltaW5nRnVuY3Rpb25cbiAgICB9ID0gZ2V0VHJhbnNpdGlvblByb3BzKHtcbiAgICAgIHN0eWxlLFxuICAgICAgdGltZW91dCxcbiAgICAgIGVhc2luZ1xuICAgIH0sIHtcbiAgICAgIG1vZGU6ICdleGl0J1xuICAgIH0pO1xuICAgIGlmICh0aW1lb3V0ID09PSAnYXV0bycpIHtcbiAgICAgIC8vIFRPRE86IHJlbmFtZSBnZXRBdXRvSGVpZ2h0RHVyYXRpb24gdG8gc29tZXRoaW5nIG1vcmUgZ2VuZXJpYyAod2lkdGggc3VwcG9ydClcbiAgICAgIC8vIEFjdHVhbGx5IGl0IGp1c3QgY2FsY3VsYXRlcyBhbmltYXRpb24gZHVyYXRpb24gYmFzZWQgb24gc2l6ZVxuICAgICAgY29uc3QgZHVyYXRpb24yID0gdGhlbWUudHJhbnNpdGlvbnMuZ2V0QXV0b0hlaWdodER1cmF0aW9uKHdyYXBwZXJTaXplKTtcbiAgICAgIG5vZGUuc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uID0gYCR7ZHVyYXRpb24yfW1zYDtcbiAgICAgIGF1dG9UcmFuc2l0aW9uRHVyYXRpb24uY3VycmVudCA9IGR1cmF0aW9uMjtcbiAgICB9IGVsc2Uge1xuICAgICAgbm9kZS5zdHlsZS50cmFuc2l0aW9uRHVyYXRpb24gPSB0eXBlb2YgdHJhbnNpdGlvbkR1cmF0aW9uID09PSAnc3RyaW5nJyA/IHRyYW5zaXRpb25EdXJhdGlvbiA6IGAke3RyYW5zaXRpb25EdXJhdGlvbn1tc2A7XG4gICAgfVxuICAgIG5vZGUuc3R5bGVbc2l6ZV0gPSBjb2xsYXBzZWRTaXplO1xuICAgIG5vZGUuc3R5bGUudHJhbnNpdGlvblRpbWluZ0Z1bmN0aW9uID0gdHJhbnNpdGlvblRpbWluZ0Z1bmN0aW9uO1xuICAgIGlmIChvbkV4aXRpbmcpIHtcbiAgICAgIG9uRXhpdGluZyhub2RlKTtcbiAgICB9XG4gIH0pO1xuICBjb25zdCBoYW5kbGVBZGRFbmRMaXN0ZW5lciA9IG5leHQgPT4ge1xuICAgIGlmICh0aW1lb3V0ID09PSAnYXV0bycpIHtcbiAgICAgIHRpbWVyLnN0YXJ0KGF1dG9UcmFuc2l0aW9uRHVyYXRpb24uY3VycmVudCB8fCAwLCBuZXh0KTtcbiAgICB9XG4gICAgaWYgKGFkZEVuZExpc3RlbmVyKSB7XG4gICAgICAvLyBPbGQgY2FsbCBzaWduYXR1cmUgYmVmb3JlIGByZWFjdC10cmFuc2l0aW9uLWdyb3VwYCBpbXBsZW1lbnRlZCBgbm9kZVJlZmBcbiAgICAgIGFkZEVuZExpc3RlbmVyKG5vZGVSZWYuY3VycmVudCwgbmV4dCk7XG4gICAgfVxuICB9O1xuICByZXR1cm4gLyojX19QVVJFX18qL19qc3goVHJhbnNpdGlvbkNvbXBvbmVudCwgX2V4dGVuZHMoe1xuICAgIGluOiBpblByb3AsXG4gICAgb25FbnRlcjogaGFuZGxlRW50ZXIsXG4gICAgb25FbnRlcmVkOiBoYW5kbGVFbnRlcmVkLFxuICAgIG9uRW50ZXJpbmc6IGhhbmRsZUVudGVyaW5nLFxuICAgIG9uRXhpdDogaGFuZGxlRXhpdCxcbiAgICBvbkV4aXRlZDogaGFuZGxlRXhpdGVkLFxuICAgIG9uRXhpdGluZzogaGFuZGxlRXhpdGluZyxcbiAgICBhZGRFbmRMaXN0ZW5lcjogaGFuZGxlQWRkRW5kTGlzdGVuZXIsXG4gICAgbm9kZVJlZjogbm9kZVJlZixcbiAgICB0aW1lb3V0OiB0aW1lb3V0ID09PSAnYXV0bycgPyBudWxsIDogdGltZW91dFxuICB9LCBvdGhlciwge1xuICAgIGNoaWxkcmVuOiAoc3RhdGUsIGNoaWxkUHJvcHMpID0+IC8qI19fUFVSRV9fKi9fanN4KENvbGxhcHNlUm9vdCwgX2V4dGVuZHMoe1xuICAgICAgYXM6IGNvbXBvbmVudCxcbiAgICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSwge1xuICAgICAgICAnZW50ZXJlZCc6IGNsYXNzZXMuZW50ZXJlZCxcbiAgICAgICAgJ2V4aXRlZCc6ICFpblByb3AgJiYgY29sbGFwc2VkU2l6ZSA9PT0gJzBweCcgJiYgY2xhc3Nlcy5oaWRkZW5cbiAgICAgIH1bc3RhdGVdKSxcbiAgICAgIHN0eWxlOiBfZXh0ZW5kcyh7XG4gICAgICAgIFtpc0hvcml6b250YWwgPyAnbWluV2lkdGgnIDogJ21pbkhlaWdodCddOiBjb2xsYXBzZWRTaXplXG4gICAgICB9LCBzdHlsZSksXG4gICAgICByZWY6IGhhbmRsZVJlZlxuICAgIH0sIGNoaWxkUHJvcHMsIHtcbiAgICAgIC8vIGBvd25lclN0YXRlYCBpcyBzZXQgYWZ0ZXIgYGNoaWxkUHJvcHNgIHRvIG92ZXJyaWRlIGFueSBleGlzdGluZyBgb3duZXJTdGF0ZWAgcHJvcGVydHkgaW4gYGNoaWxkUHJvcHNgXG4gICAgICAvLyB0aGF0IG1pZ2h0IGhhdmUgYmVlbiBmb3J3YXJkZWQgZnJvbSB0aGUgVHJhbnNpdGlvbiBjb21wb25lbnQuXG4gICAgICBvd25lclN0YXRlOiBfZXh0ZW5kcyh7fSwgb3duZXJTdGF0ZSwge1xuICAgICAgICBzdGF0ZVxuICAgICAgfSksXG4gICAgICBjaGlsZHJlbjogLyojX19QVVJFX18qL19qc3goQ29sbGFwc2VXcmFwcGVyLCB7XG4gICAgICAgIG93bmVyU3RhdGU6IF9leHRlbmRzKHt9LCBvd25lclN0YXRlLCB7XG4gICAgICAgICAgc3RhdGVcbiAgICAgICAgfSksXG4gICAgICAgIGNsYXNzTmFtZTogY2xhc3Nlcy53cmFwcGVyLFxuICAgICAgICByZWY6IHdyYXBwZXJSZWYsXG4gICAgICAgIGNoaWxkcmVuOiAvKiNfX1BVUkVfXyovX2pzeChDb2xsYXBzZVdyYXBwZXJJbm5lciwge1xuICAgICAgICAgIG93bmVyU3RhdGU6IF9leHRlbmRzKHt9LCBvd25lclN0YXRlLCB7XG4gICAgICAgICAgICBzdGF0ZVxuICAgICAgICAgIH0pLFxuICAgICAgICAgIGNsYXNzTmFtZTogY2xhc3Nlcy53cmFwcGVySW5uZXIsXG4gICAgICAgICAgY2hpbGRyZW46IGNoaWxkcmVuXG4gICAgICAgIH0pXG4gICAgICB9KVxuICAgIH0pKVxuICB9KSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IENvbGxhcHNlLnByb3BUeXBlcyAvKiByZW1vdmUtcHJvcHR5cGVzICovID0ge1xuICAvLyDilIzilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIAgV2FybmluZyDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJBcbiAgLy8g4pSCIFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucy4g4pSCXG4gIC8vIOKUgiAgICBUbyB1cGRhdGUgdGhlbSwgZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gYHBucG0gcHJvcHR5cGVzYC4gICAgIOKUglxuICAvLyDilJTilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJhcbiAgLyoqXG4gICAqIEFkZCBhIGN1c3RvbSB0cmFuc2l0aW9uIGVuZCB0cmlnZ2VyLiBDYWxsZWQgd2l0aCB0aGUgdHJhbnNpdGlvbmluZyBET01cbiAgICogbm9kZSBhbmQgYSBkb25lIGNhbGxiYWNrLiBBbGxvd3MgZm9yIG1vcmUgZmluZSBncmFpbmVkIHRyYW5zaXRpb24gZW5kXG4gICAqIGxvZ2ljLiBOb3RlOiBUaW1lb3V0cyBhcmUgc3RpbGwgdXNlZCBhcyBhIGZhbGxiYWNrIGlmIHByb3ZpZGVkLlxuICAgKi9cbiAgYWRkRW5kTGlzdGVuZXI6IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogVGhlIGNvbnRlbnQgbm9kZSB0byBiZSBjb2xsYXBzZWQuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogVGhlIHdpZHRoIChob3Jpem9udGFsKSBvciBoZWlnaHQgKHZlcnRpY2FsKSBvZiB0aGUgY29udGFpbmVyIHdoZW4gY29sbGFwc2VkLlxuICAgKiBAZGVmYXVsdCAnMHB4J1xuICAgKi9cbiAgY29sbGFwc2VkU2l6ZTogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnN0cmluZ10pLFxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgcm9vdCBub2RlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgSFRNTCBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKi9cbiAgY29tcG9uZW50OiBlbGVtZW50VHlwZUFjY2VwdGluZ1JlZixcbiAgLyoqXG4gICAqIFRoZSB0cmFuc2l0aW9uIHRpbWluZyBmdW5jdGlvbi5cbiAgICogWW91IG1heSBzcGVjaWZ5IGEgc2luZ2xlIGVhc2luZyBvciBhIG9iamVjdCBjb250YWluaW5nIGVudGVyIGFuZCBleGl0IHZhbHVlcy5cbiAgICovXG4gIGVhc2luZzogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBlbnRlcjogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBleGl0OiBQcm9wVHlwZXMuc3RyaW5nXG4gIH0pLCBQcm9wVHlwZXMuc3RyaW5nXSksXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBjb21wb25lbnQgd2lsbCB0cmFuc2l0aW9uIGluLlxuICAgKi9cbiAgaW46IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25FbnRlcjogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkVudGVyZWQ6IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25FbnRlcmluZzogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkV4aXQ6IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25FeGl0ZWQ6IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25FeGl0aW5nOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIFRoZSB0cmFuc2l0aW9uIG9yaWVudGF0aW9uLlxuICAgKiBAZGVmYXVsdCAndmVydGljYWwnXG4gICAqL1xuICBvcmllbnRhdGlvbjogUHJvcFR5cGVzLm9uZU9mKFsnaG9yaXpvbnRhbCcsICd2ZXJ0aWNhbCddKSxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHN0eWxlOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogVGhlIHN5c3RlbSBwcm9wIHRoYXQgYWxsb3dzIGRlZmluaW5nIHN5c3RlbSBvdmVycmlkZXMgYXMgd2VsbCBhcyBhZGRpdGlvbmFsIENTUyBzdHlsZXMuXG4gICAqL1xuICBzeDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5ib29sXSkpLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pLFxuICAvKipcbiAgICogVGhlIGR1cmF0aW9uIGZvciB0aGUgdHJhbnNpdGlvbiwgaW4gbWlsbGlzZWNvbmRzLlxuICAgKiBZb3UgbWF5IHNwZWNpZnkgYSBzaW5nbGUgdGltZW91dCBmb3IgYWxsIHRyYW5zaXRpb25zLCBvciBpbmRpdmlkdWFsbHkgd2l0aCBhbiBvYmplY3QuXG4gICAqXG4gICAqIFNldCB0byAnYXV0bycgdG8gYXV0b21hdGljYWxseSBjYWxjdWxhdGUgdHJhbnNpdGlvbiB0aW1lIGJhc2VkIG9uIGhlaWdodC5cbiAgICogQGRlZmF1bHQgZHVyYXRpb24uc3RhbmRhcmRcbiAgICovXG4gIHRpbWVvdXQ6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ2F1dG8nXSksIFByb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zaGFwZSh7XG4gICAgYXBwZWFyOiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIGVudGVyOiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIGV4aXQ6IFByb3BUeXBlcy5udW1iZXJcbiAgfSldKVxufSA6IHZvaWQgMDtcbkNvbGxhcHNlLm11aVN1cHBvcnRBdXRvID0gdHJ1ZTtcbmV4cG9ydCBkZWZhdWx0IENvbGxhcHNlOyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG4vKipcbiAqIEBpZ25vcmUgLSBpbnRlcm5hbCBjb21wb25lbnQuXG4gKiBAdHlwZSB7UmVhY3QuQ29udGV4dDx7fSB8IHtleHBhbmRlZDogYm9vbGVhbiwgZGlzYWJsZWQ6IGJvb2xlYW4sIHRvZ2dsZTogKCkgPT4gdm9pZH0+fVxuICovXG5jb25zdCBBY2NvcmRpb25Db250ZXh0ID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUNvbnRleHQoe30pO1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgQWNjb3JkaW9uQ29udGV4dC5kaXNwbGF5TmFtZSA9ICdBY2NvcmRpb25Db250ZXh0Jztcbn1cbmV4cG9ydCBkZWZhdWx0IEFjY29yZGlvbkNvbnRleHQ7IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiY2xhc3NOYW1lXCIsIFwiZWxlbWVudFR5cGVcIiwgXCJvd25lclN0YXRlXCIsIFwiZXh0ZXJuYWxGb3J3YXJkZWRQcm9wc1wiLCBcImdldFNsb3RPd25lclN0YXRlXCIsIFwiaW50ZXJuYWxGb3J3YXJkZWRQcm9wc1wiXSxcbiAgX2V4Y2x1ZGVkMiA9IFtcImNvbXBvbmVudFwiLCBcInNsb3RzXCIsIFwic2xvdFByb3BzXCJdLFxuICBfZXhjbHVkZWQzID0gW1wiY29tcG9uZW50XCJdO1xuaW1wb3J0IHVzZUZvcmtSZWYgZnJvbSAnQG11aS91dGlscy91c2VGb3JrUmVmJztcbmltcG9ydCBhcHBlbmRPd25lclN0YXRlIGZyb20gJ0BtdWkvdXRpbHMvYXBwZW5kT3duZXJTdGF0ZSc7XG5pbXBvcnQgcmVzb2x2ZUNvbXBvbmVudFByb3BzIGZyb20gJ0BtdWkvdXRpbHMvcmVzb2x2ZUNvbXBvbmVudFByb3BzJztcbmltcG9ydCBtZXJnZVNsb3RQcm9wcyBmcm9tICdAbXVpL3V0aWxzL21lcmdlU2xvdFByb3BzJztcbi8qKlxuICogQW4gaW50ZXJuYWwgZnVuY3Rpb24gdG8gY3JlYXRlIGEgTWF0ZXJpYWwgVUkgc2xvdC5cbiAqXG4gKiBUaGlzIGlzIGFuIGFkdmFuY2VkIHZlcnNpb24gb2YgQmFzZSBVSSBgdXNlU2xvdFByb3BzYCBiZWNhdXNlIE1hdGVyaWFsIFVJIGFsbG93cyBsZWFmIGNvbXBvbmVudCB0byBiZSBjdXN0b21pemVkIHZpYSBgY29tcG9uZW50YCBwcm9wXG4gKiB3aGlsZSBCYXNlIFVJIGRvZXMgbm90IG5lZWQgdG8gc3VwcG9ydCBsZWFmIGNvbXBvbmVudCBjdXN0b21pemF0aW9uLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lOiBuYW1lIG9mIHRoZSBzbG90XG4gKiBAcGFyYW0ge29iamVjdH0gcGFyYW1ldGVyc1xuICogQHJldHVybnMge1tTbG90LCBzbG90UHJvcHNdfSBUaGUgc2xvdCdzIFJlYWN0IGNvbXBvbmVudCBhbmQgdGhlIHNsb3QncyBwcm9wc1xuICpcbiAqIE5vdGU6IHRoZSByZXR1cm5lZCBzbG90J3MgcHJvcHNcbiAqIC0gd2lsbCBuZXZlciBjb250YWluIGBjb21wb25lbnRgIHByb3AuXG4gKiAtIG1pZ2h0IGNvbnRhaW4gYGFzYCBwcm9wLlxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1c2VTbG90KFxuLyoqXG4gKiBUaGUgc2xvdCdzIG5hbWUuIEFsbCBNYXRlcmlhbCBVSSBjb21wb25lbnRzIHNob3VsZCBoYXZlIGByb290YCBzbG90LlxuICpcbiAqIElmIHRoZSBuYW1lIGlzIGByb290YCwgdGhlIGxvZ2ljIGJlaGF2ZXMgZGlmZmVyZW50bHkgZnJvbSBvdGhlciBzbG90cyxcbiAqIGUuZy4gdGhlIGBleHRlcm5hbEZvcndhcmRlZFByb3BzYCBhcmUgc3ByZWFkIHRvIGByb290YCBzbG90IGJ1dCBub3Qgb3RoZXIgc2xvdHMuXG4gKi9cbm5hbWUsIHBhcmFtZXRlcnMpIHtcbiAgY29uc3Qge1xuICAgICAgY2xhc3NOYW1lLFxuICAgICAgZWxlbWVudFR5cGU6IGluaXRpYWxFbGVtZW50VHlwZSxcbiAgICAgIG93bmVyU3RhdGUsXG4gICAgICBleHRlcm5hbEZvcndhcmRlZFByb3BzLFxuICAgICAgZ2V0U2xvdE93bmVyU3RhdGUsXG4gICAgICBpbnRlcm5hbEZvcndhcmRlZFByb3BzXG4gICAgfSA9IHBhcmFtZXRlcnMsXG4gICAgdXNlU2xvdFByb3BzUGFyYW1zID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocGFyYW1ldGVycywgX2V4Y2x1ZGVkKTtcbiAgY29uc3Qge1xuICAgICAgY29tcG9uZW50OiByb290Q29tcG9uZW50LFxuICAgICAgc2xvdHMgPSB7XG4gICAgICAgIFtuYW1lXTogdW5kZWZpbmVkXG4gICAgICB9LFxuICAgICAgc2xvdFByb3BzID0ge1xuICAgICAgICBbbmFtZV06IHVuZGVmaW5lZFxuICAgICAgfVxuICAgIH0gPSBleHRlcm5hbEZvcndhcmRlZFByb3BzLFxuICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoZXh0ZXJuYWxGb3J3YXJkZWRQcm9wcywgX2V4Y2x1ZGVkMik7XG4gIGNvbnN0IGVsZW1lbnRUeXBlID0gc2xvdHNbbmFtZV0gfHwgaW5pdGlhbEVsZW1lbnRUeXBlO1xuXG4gIC8vIGBzbG90UHJvcHNbbmFtZV1gIGNhbiBiZSBhIGNhbGxiYWNrIHRoYXQgcmVjZWl2ZXMgdGhlIGNvbXBvbmVudCdzIG93bmVyU3RhdGUuXG4gIC8vIGByZXNvbHZlZENvbXBvbmVudHNQcm9wc2AgaXMgYWx3YXlzIGEgcGxhaW4gb2JqZWN0LlxuICBjb25zdCByZXNvbHZlZENvbXBvbmVudHNQcm9wcyA9IHJlc29sdmVDb21wb25lbnRQcm9wcyhzbG90UHJvcHNbbmFtZV0sIG93bmVyU3RhdGUpO1xuICBjb25zdCBfbWVyZ2VTbG90UHJvcHMgPSBtZXJnZVNsb3RQcm9wcyhfZXh0ZW5kcyh7XG4gICAgICBjbGFzc05hbWVcbiAgICB9LCB1c2VTbG90UHJvcHNQYXJhbXMsIHtcbiAgICAgIGV4dGVybmFsRm9yd2FyZGVkUHJvcHM6IG5hbWUgPT09ICdyb290JyA/IG90aGVyIDogdW5kZWZpbmVkLFxuICAgICAgZXh0ZXJuYWxTbG90UHJvcHM6IHJlc29sdmVkQ29tcG9uZW50c1Byb3BzXG4gICAgfSkpLFxuICAgIHtcbiAgICAgIHByb3BzOiB7XG4gICAgICAgIGNvbXBvbmVudDogc2xvdENvbXBvbmVudFxuICAgICAgfSxcbiAgICAgIGludGVybmFsUmVmXG4gICAgfSA9IF9tZXJnZVNsb3RQcm9wcyxcbiAgICBtZXJnZWRQcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9tZXJnZVNsb3RQcm9wcy5wcm9wcywgX2V4Y2x1ZGVkMyk7XG4gIGNvbnN0IHJlZiA9IHVzZUZvcmtSZWYoaW50ZXJuYWxSZWYsIHJlc29sdmVkQ29tcG9uZW50c1Byb3BzID09IG51bGwgPyB2b2lkIDAgOiByZXNvbHZlZENvbXBvbmVudHNQcm9wcy5yZWYsIHBhcmFtZXRlcnMucmVmKTtcbiAgY29uc3Qgc2xvdE93bmVyU3RhdGUgPSBnZXRTbG90T3duZXJTdGF0ZSA/IGdldFNsb3RPd25lclN0YXRlKG1lcmdlZFByb3BzKSA6IHt9O1xuICBjb25zdCBmaW5hbE93bmVyU3RhdGUgPSBfZXh0ZW5kcyh7fSwgb3duZXJTdGF0ZSwgc2xvdE93bmVyU3RhdGUpO1xuICBjb25zdCBMZWFmQ29tcG9uZW50ID0gbmFtZSA9PT0gJ3Jvb3QnID8gc2xvdENvbXBvbmVudCB8fCByb290Q29tcG9uZW50IDogc2xvdENvbXBvbmVudDtcbiAgY29uc3QgcHJvcHMgPSBhcHBlbmRPd25lclN0YXRlKGVsZW1lbnRUeXBlLCBfZXh0ZW5kcyh7fSwgbmFtZSA9PT0gJ3Jvb3QnICYmICFyb290Q29tcG9uZW50ICYmICFzbG90c1tuYW1lXSAmJiBpbnRlcm5hbEZvcndhcmRlZFByb3BzLCBuYW1lICE9PSAncm9vdCcgJiYgIXNsb3RzW25hbWVdICYmIGludGVybmFsRm9yd2FyZGVkUHJvcHMsIG1lcmdlZFByb3BzLCBMZWFmQ29tcG9uZW50ICYmIHtcbiAgICBhczogTGVhZkNvbXBvbmVudFxuICB9LCB7XG4gICAgcmVmXG4gIH0pLCBmaW5hbE93bmVyU3RhdGUpO1xuICBPYmplY3Qua2V5cyhzbG90T3duZXJTdGF0ZSkuZm9yRWFjaChwcm9wTmFtZSA9PiB7XG4gICAgZGVsZXRlIHByb3BzW3Byb3BOYW1lXTtcbiAgfSk7XG4gIHJldHVybiBbZWxlbWVudFR5cGUsIHByb3BzXTtcbn0iLCJpbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzZXMnO1xuaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3MnO1xuZXhwb3J0IGZ1bmN0aW9uIGdldEFjY29yZGlvblV0aWxpdHlDbGFzcyhzbG90KSB7XG4gIHJldHVybiBnZW5lcmF0ZVV0aWxpdHlDbGFzcygnTXVpQWNjb3JkaW9uJywgc2xvdCk7XG59XG5jb25zdCBhY2NvcmRpb25DbGFzc2VzID0gZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcygnTXVpQWNjb3JkaW9uJywgWydyb290JywgJ3JvdW5kZWQnLCAnZXhwYW5kZWQnLCAnZGlzYWJsZWQnLCAnZ3V0dGVycycsICdyZWdpb24nXSk7XG5leHBvcnQgZGVmYXVsdCBhY2NvcmRpb25DbGFzc2VzOyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImNoaWxkcmVuXCIsIFwiY2xhc3NOYW1lXCIsIFwiZGVmYXVsdEV4cGFuZGVkXCIsIFwiZGlzYWJsZWRcIiwgXCJkaXNhYmxlR3V0dGVyc1wiLCBcImV4cGFuZGVkXCIsIFwib25DaGFuZ2VcIiwgXCJzcXVhcmVcIiwgXCJzbG90c1wiLCBcInNsb3RQcm9wc1wiLCBcIlRyYW5zaXRpb25Db21wb25lbnRcIiwgXCJUcmFuc2l0aW9uUHJvcHNcIl07XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBpc0ZyYWdtZW50IH0gZnJvbSAncmVhY3QtaXMnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IGNoYWluUHJvcFR5cGVzIGZyb20gJ0BtdWkvdXRpbHMvY2hhaW5Qcm9wVHlwZXMnO1xuaW1wb3J0IGNvbXBvc2VDbGFzc2VzIGZyb20gJ0BtdWkvdXRpbHMvY29tcG9zZUNsYXNzZXMnO1xuaW1wb3J0IHsgc3R5bGVkIH0gZnJvbSAnLi4vemVyby1zdHlsZWQnO1xuaW1wb3J0IHsgdXNlRGVmYXVsdFByb3BzIH0gZnJvbSAnLi4vRGVmYXVsdFByb3BzUHJvdmlkZXInO1xuaW1wb3J0IENvbGxhcHNlIGZyb20gJy4uL0NvbGxhcHNlJztcbmltcG9ydCBQYXBlciBmcm9tICcuLi9QYXBlcic7XG5pbXBvcnQgQWNjb3JkaW9uQ29udGV4dCBmcm9tICcuL0FjY29yZGlvbkNvbnRleHQnO1xuaW1wb3J0IHVzZUNvbnRyb2xsZWQgZnJvbSAnLi4vdXRpbHMvdXNlQ29udHJvbGxlZCc7XG5pbXBvcnQgdXNlU2xvdCBmcm9tICcuLi91dGlscy91c2VTbG90JztcbmltcG9ydCBhY2NvcmRpb25DbGFzc2VzLCB7IGdldEFjY29yZGlvblV0aWxpdHlDbGFzcyB9IGZyb20gJy4vYWNjb3JkaW9uQ2xhc3Nlcyc7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuaW1wb3J0IHsganN4cyBhcyBfanN4cyB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuY29uc3QgdXNlVXRpbGl0eUNsYXNzZXMgPSBvd25lclN0YXRlID0+IHtcbiAgY29uc3Qge1xuICAgIGNsYXNzZXMsXG4gICAgc3F1YXJlLFxuICAgIGV4cGFuZGVkLFxuICAgIGRpc2FibGVkLFxuICAgIGRpc2FibGVHdXR0ZXJzXG4gIH0gPSBvd25lclN0YXRlO1xuICBjb25zdCBzbG90cyA9IHtcbiAgICByb290OiBbJ3Jvb3QnLCAhc3F1YXJlICYmICdyb3VuZGVkJywgZXhwYW5kZWQgJiYgJ2V4cGFuZGVkJywgZGlzYWJsZWQgJiYgJ2Rpc2FibGVkJywgIWRpc2FibGVHdXR0ZXJzICYmICdndXR0ZXJzJ10sXG4gICAgcmVnaW9uOiBbJ3JlZ2lvbiddXG4gIH07XG4gIHJldHVybiBjb21wb3NlQ2xhc3NlcyhzbG90cywgZ2V0QWNjb3JkaW9uVXRpbGl0eUNsYXNzLCBjbGFzc2VzKTtcbn07XG5jb25zdCBBY2NvcmRpb25Sb290ID0gc3R5bGVkKFBhcGVyLCB7XG4gIG5hbWU6ICdNdWlBY2NvcmRpb24nLFxuICBzbG90OiAnUm9vdCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9ID0gcHJvcHM7XG4gICAgcmV0dXJuIFt7XG4gICAgICBbYCYgLiR7YWNjb3JkaW9uQ2xhc3Nlcy5yZWdpb259YF06IHN0eWxlcy5yZWdpb25cbiAgICB9LCBzdHlsZXMucm9vdCwgIW93bmVyU3RhdGUuc3F1YXJlICYmIHN0eWxlcy5yb3VuZGVkLCAhb3duZXJTdGF0ZS5kaXNhYmxlR3V0dGVycyAmJiBzdHlsZXMuZ3V0dGVyc107XG4gIH1cbn0pKCh7XG4gIHRoZW1lXG59KSA9PiB7XG4gIGNvbnN0IHRyYW5zaXRpb24gPSB7XG4gICAgZHVyYXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmR1cmF0aW9uLnNob3J0ZXN0XG4gIH07XG4gIHJldHVybiB7XG4gICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgdHJhbnNpdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKFsnbWFyZ2luJ10sIHRyYW5zaXRpb24pLFxuICAgIG92ZXJmbG93QW5jaG9yOiAnbm9uZScsXG4gICAgLy8gS2VlcCB0aGUgc2FtZSBzY3JvbGxpbmcgcG9zaXRpb25cbiAgICAnJjo6YmVmb3JlJzoge1xuICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICBsZWZ0OiAwLFxuICAgICAgdG9wOiAtMSxcbiAgICAgIHJpZ2h0OiAwLFxuICAgICAgaGVpZ2h0OiAxLFxuICAgICAgY29udGVudDogJ1wiXCInLFxuICAgICAgb3BhY2l0eTogMSxcbiAgICAgIGJhY2tncm91bmRDb2xvcjogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGUuZGl2aWRlcixcbiAgICAgIHRyYW5zaXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZShbJ29wYWNpdHknLCAnYmFja2dyb3VuZC1jb2xvciddLCB0cmFuc2l0aW9uKVxuICAgIH0sXG4gICAgJyY6Zmlyc3Qtb2YtdHlwZSc6IHtcbiAgICAgICcmOjpiZWZvcmUnOiB7XG4gICAgICAgIGRpc3BsYXk6ICdub25lJ1xuICAgICAgfVxuICAgIH0sXG4gICAgW2AmLiR7YWNjb3JkaW9uQ2xhc3Nlcy5leHBhbmRlZH1gXToge1xuICAgICAgJyY6OmJlZm9yZSc6IHtcbiAgICAgICAgb3BhY2l0eTogMFxuICAgICAgfSxcbiAgICAgICcmOmZpcnN0LW9mLXR5cGUnOiB7XG4gICAgICAgIG1hcmdpblRvcDogMFxuICAgICAgfSxcbiAgICAgICcmOmxhc3Qtb2YtdHlwZSc6IHtcbiAgICAgICAgbWFyZ2luQm90dG9tOiAwXG4gICAgICB9LFxuICAgICAgJyYgKyAmJzoge1xuICAgICAgICAnJjo6YmVmb3JlJzoge1xuICAgICAgICAgIGRpc3BsYXk6ICdub25lJ1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBbYCYuJHthY2NvcmRpb25DbGFzc2VzLmRpc2FibGVkfWBdOiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlLmFjdGlvbi5kaXNhYmxlZEJhY2tncm91bmRcbiAgICB9XG4gIH07XG59LCAoe1xuICB0aGVtZVxufSkgPT4gKHtcbiAgdmFyaWFudHM6IFt7XG4gICAgcHJvcHM6IHByb3BzID0+ICFwcm9wcy5zcXVhcmUsXG4gICAgc3R5bGU6IHtcbiAgICAgIGJvcmRlclJhZGl1czogMCxcbiAgICAgICcmOmZpcnN0LW9mLXR5cGUnOiB7XG4gICAgICAgIGJvcmRlclRvcExlZnRSYWRpdXM6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5zaGFwZS5ib3JkZXJSYWRpdXMsXG4gICAgICAgIGJvcmRlclRvcFJpZ2h0UmFkaXVzOiAodGhlbWUudmFycyB8fCB0aGVtZSkuc2hhcGUuYm9yZGVyUmFkaXVzXG4gICAgICB9LFxuICAgICAgJyY6bGFzdC1vZi10eXBlJzoge1xuICAgICAgICBib3JkZXJCb3R0b21MZWZ0UmFkaXVzOiAodGhlbWUudmFycyB8fCB0aGVtZSkuc2hhcGUuYm9yZGVyUmFkaXVzLFxuICAgICAgICBib3JkZXJCb3R0b21SaWdodFJhZGl1czogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnNoYXBlLmJvcmRlclJhZGl1cyxcbiAgICAgICAgLy8gRml4IGEgcmVuZGVyaW5nIGlzc3VlIG9uIEVkZ2VcbiAgICAgICAgJ0BzdXBwb3J0cyAoLW1zLWltZS1hbGlnbjogYXV0byknOiB7XG4gICAgICAgICAgYm9yZGVyQm90dG9tTGVmdFJhZGl1czogMCxcbiAgICAgICAgICBib3JkZXJCb3R0b21SaWdodFJhZGl1czogMFxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAgcHJvcHM6IHByb3BzID0+ICFwcm9wcy5kaXNhYmxlR3V0dGVycyxcbiAgICBzdHlsZToge1xuICAgICAgW2AmLiR7YWNjb3JkaW9uQ2xhc3Nlcy5leHBhbmRlZH1gXToge1xuICAgICAgICBtYXJnaW46ICcxNnB4IDAnXG4gICAgICB9XG4gICAgfVxuICB9XVxufSkpO1xuY29uc3QgQWNjb3JkaW9uID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gQWNjb3JkaW9uKGluUHJvcHMsIHJlZikge1xuICBjb25zdCBwcm9wcyA9IHVzZURlZmF1bHRQcm9wcyh7XG4gICAgcHJvcHM6IGluUHJvcHMsXG4gICAgbmFtZTogJ011aUFjY29yZGlvbidcbiAgfSk7XG4gIGNvbnN0IHtcbiAgICAgIGNoaWxkcmVuOiBjaGlsZHJlblByb3AsXG4gICAgICBjbGFzc05hbWUsXG4gICAgICBkZWZhdWx0RXhwYW5kZWQgPSBmYWxzZSxcbiAgICAgIGRpc2FibGVkID0gZmFsc2UsXG4gICAgICBkaXNhYmxlR3V0dGVycyA9IGZhbHNlLFxuICAgICAgZXhwYW5kZWQ6IGV4cGFuZGVkUHJvcCxcbiAgICAgIG9uQ2hhbmdlLFxuICAgICAgc3F1YXJlID0gZmFsc2UsXG4gICAgICBzbG90cyA9IHt9LFxuICAgICAgc2xvdFByb3BzID0ge30sXG4gICAgICBUcmFuc2l0aW9uQ29tcG9uZW50OiBUcmFuc2l0aW9uQ29tcG9uZW50UHJvcCxcbiAgICAgIFRyYW5zaXRpb25Qcm9wczogVHJhbnNpdGlvblByb3BzUHJvcFxuICAgIH0gPSBwcm9wcyxcbiAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQpO1xuICBjb25zdCBbZXhwYW5kZWQsIHNldEV4cGFuZGVkU3RhdGVdID0gdXNlQ29udHJvbGxlZCh7XG4gICAgY29udHJvbGxlZDogZXhwYW5kZWRQcm9wLFxuICAgIGRlZmF1bHQ6IGRlZmF1bHRFeHBhbmRlZCxcbiAgICBuYW1lOiAnQWNjb3JkaW9uJyxcbiAgICBzdGF0ZTogJ2V4cGFuZGVkJ1xuICB9KTtcbiAgY29uc3QgaGFuZGxlQ2hhbmdlID0gUmVhY3QudXNlQ2FsbGJhY2soZXZlbnQgPT4ge1xuICAgIHNldEV4cGFuZGVkU3RhdGUoIWV4cGFuZGVkKTtcbiAgICBpZiAob25DaGFuZ2UpIHtcbiAgICAgIG9uQ2hhbmdlKGV2ZW50LCAhZXhwYW5kZWQpO1xuICAgIH1cbiAgfSwgW2V4cGFuZGVkLCBvbkNoYW5nZSwgc2V0RXhwYW5kZWRTdGF0ZV0pO1xuICBjb25zdCBbc3VtbWFyeSwgLi4uY2hpbGRyZW5dID0gUmVhY3QuQ2hpbGRyZW4udG9BcnJheShjaGlsZHJlblByb3ApO1xuICBjb25zdCBjb250ZXh0VmFsdWUgPSBSZWFjdC51c2VNZW1vKCgpID0+ICh7XG4gICAgZXhwYW5kZWQsXG4gICAgZGlzYWJsZWQsXG4gICAgZGlzYWJsZUd1dHRlcnMsXG4gICAgdG9nZ2xlOiBoYW5kbGVDaGFuZ2VcbiAgfSksIFtleHBhbmRlZCwgZGlzYWJsZWQsIGRpc2FibGVHdXR0ZXJzLCBoYW5kbGVDaGFuZ2VdKTtcbiAgY29uc3Qgb3duZXJTdGF0ZSA9IF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgIHNxdWFyZSxcbiAgICBkaXNhYmxlZCxcbiAgICBkaXNhYmxlR3V0dGVycyxcbiAgICBleHBhbmRlZFxuICB9KTtcbiAgY29uc3QgY2xhc3NlcyA9IHVzZVV0aWxpdHlDbGFzc2VzKG93bmVyU3RhdGUpO1xuICBjb25zdCBiYWNrd2FyZENvbXBhdGlibGVTbG90cyA9IF9leHRlbmRzKHtcbiAgICB0cmFuc2l0aW9uOiBUcmFuc2l0aW9uQ29tcG9uZW50UHJvcFxuICB9LCBzbG90cyk7XG4gIGNvbnN0IGJhY2t3YXJkQ29tcGF0aWJsZVNsb3RQcm9wcyA9IF9leHRlbmRzKHtcbiAgICB0cmFuc2l0aW9uOiBUcmFuc2l0aW9uUHJvcHNQcm9wXG4gIH0sIHNsb3RQcm9wcyk7XG4gIGNvbnN0IFtUcmFuc2l0aW9uU2xvdCwgdHJhbnNpdGlvblByb3BzXSA9IHVzZVNsb3QoJ3RyYW5zaXRpb24nLCB7XG4gICAgZWxlbWVudFR5cGU6IENvbGxhcHNlLFxuICAgIGV4dGVybmFsRm9yd2FyZGVkUHJvcHM6IHtcbiAgICAgIHNsb3RzOiBiYWNrd2FyZENvbXBhdGlibGVTbG90cyxcbiAgICAgIHNsb3RQcm9wczogYmFja3dhcmRDb21wYXRpYmxlU2xvdFByb3BzXG4gICAgfSxcbiAgICBvd25lclN0YXRlXG4gIH0pO1xuICByZXR1cm4gLyojX19QVVJFX18qL19qc3hzKEFjY29yZGlvblJvb3QsIF9leHRlbmRzKHtcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWUpLFxuICAgIHJlZjogcmVmLFxuICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGUsXG4gICAgc3F1YXJlOiBzcXVhcmVcbiAgfSwgb3RoZXIsIHtcbiAgICBjaGlsZHJlbjogWy8qI19fUFVSRV9fKi9fanN4KEFjY29yZGlvbkNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICAgIHZhbHVlOiBjb250ZXh0VmFsdWUsXG4gICAgICBjaGlsZHJlbjogc3VtbWFyeVxuICAgIH0pLCAvKiNfX1BVUkVfXyovX2pzeChUcmFuc2l0aW9uU2xvdCwgX2V4dGVuZHMoe1xuICAgICAgaW46IGV4cGFuZGVkLFxuICAgICAgdGltZW91dDogXCJhdXRvXCJcbiAgICB9LCB0cmFuc2l0aW9uUHJvcHMsIHtcbiAgICAgIGNoaWxkcmVuOiAvKiNfX1BVUkVfXyovX2pzeChcImRpdlwiLCB7XG4gICAgICAgIFwiYXJpYS1sYWJlbGxlZGJ5XCI6IHN1bW1hcnkucHJvcHMuaWQsXG4gICAgICAgIGlkOiBzdW1tYXJ5LnByb3BzWydhcmlhLWNvbnRyb2xzJ10sXG4gICAgICAgIHJvbGU6IFwicmVnaW9uXCIsXG4gICAgICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5yZWdpb24sXG4gICAgICAgIGNoaWxkcmVuOiBjaGlsZHJlblxuICAgICAgfSlcbiAgICB9KSldXG4gIH0pKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gQWNjb3JkaW9uLnByb3BUeXBlcyAvKiByZW1vdmUtcHJvcHR5cGVzICovID0ge1xuICAvLyDilIzilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIAgV2FybmluZyDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJBcbiAgLy8g4pSCIFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucy4g4pSCXG4gIC8vIOKUgiAgICBUbyB1cGRhdGUgdGhlbSwgZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gYHBucG0gcHJvcHR5cGVzYC4gICAgIOKUglxuICAvLyDilJTilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJhcbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogY2hhaW5Qcm9wVHlwZXMoUHJvcFR5cGVzLm5vZGUuaXNSZXF1aXJlZCwgcHJvcHMgPT4ge1xuICAgIGNvbnN0IHN1bW1hcnkgPSBSZWFjdC5DaGlsZHJlbi50b0FycmF5KHByb3BzLmNoaWxkcmVuKVswXTtcbiAgICBpZiAoaXNGcmFnbWVudChzdW1tYXJ5KSkge1xuICAgICAgcmV0dXJuIG5ldyBFcnJvcihcIk1VSTogVGhlIEFjY29yZGlvbiBkb2Vzbid0IGFjY2VwdCBhIEZyYWdtZW50IGFzIGEgY2hpbGQuIFwiICsgJ0NvbnNpZGVyIHByb3ZpZGluZyBhbiBhcnJheSBpbnN0ZWFkLicpO1xuICAgIH1cbiAgICBpZiAoISAvKiNfX1BVUkVfXyovUmVhY3QuaXNWYWxpZEVsZW1lbnQoc3VtbWFyeSkpIHtcbiAgICAgIHJldHVybiBuZXcgRXJyb3IoJ01VSTogRXhwZWN0ZWQgdGhlIGZpcnN0IGNoaWxkIG9mIEFjY29yZGlvbiB0byBiZSBhIHZhbGlkIGVsZW1lbnQuJyk7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9KSxcbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIGV4cGFuZHMgdGhlIGFjY29yZGlvbiBieSBkZWZhdWx0LlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZGVmYXVsdEV4cGFuZGVkOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGNvbXBvbmVudCBpcyBkaXNhYmxlZC5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRpc2FibGVkOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgaXQgcmVtb3ZlcyB0aGUgbWFyZ2luIGJldHdlZW4gdHdvIGV4cGFuZGVkIGFjY29yZGlvbiBpdGVtcyBhbmQgdGhlIGluY3JlYXNlIG9mIGhlaWdodC5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRpc2FibGVHdXR0ZXJzOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgZXhwYW5kcyB0aGUgYWNjb3JkaW9uLCBvdGhlcndpc2UgY29sbGFwc2UgaXQuXG4gICAqIFNldHRpbmcgdGhpcyBwcm9wIGVuYWJsZXMgY29udHJvbCBvdmVyIHRoZSBhY2NvcmRpb24uXG4gICAqL1xuICBleHBhbmRlZDogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSBleHBhbmQvY29sbGFwc2Ugc3RhdGUgaXMgY2hhbmdlZC5cbiAgICpcbiAgICogQHBhcmFtIHtSZWFjdC5TeW50aGV0aWNFdmVudH0gZXZlbnQgVGhlIGV2ZW50IHNvdXJjZSBvZiB0aGUgY2FsbGJhY2suICoqV2FybmluZyoqOiBUaGlzIGlzIGEgZ2VuZXJpYyBldmVudCBub3QgYSBjaGFuZ2UgZXZlbnQuXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gZXhwYW5kZWQgVGhlIGBleHBhbmRlZGAgc3RhdGUgb2YgdGhlIGFjY29yZGlvbi5cbiAgICovXG4gIG9uQ2hhbmdlOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIFRoZSBwcm9wcyB1c2VkIGZvciBlYWNoIHNsb3QgaW5zaWRlLlxuICAgKiBAZGVmYXVsdCB7fVxuICAgKi9cbiAgc2xvdFByb3BzOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIHRyYW5zaXRpb246IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSlcbiAgfSksXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50cyB1c2VkIGZvciBlYWNoIHNsb3QgaW5zaWRlLlxuICAgKiBAZGVmYXVsdCB7fVxuICAgKi9cbiAgc2xvdHM6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgdHJhbnNpdGlvbjogUHJvcFR5cGVzLmVsZW1lbnRUeXBlXG4gIH0pLFxuICAvKipcbiAgICogSWYgYHRydWVgLCByb3VuZGVkIGNvcm5lcnMgYXJlIGRpc2FibGVkLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgc3F1YXJlOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIFRoZSBzeXN0ZW0gcHJvcCB0aGF0IGFsbG93cyBkZWZpbmluZyBzeXN0ZW0gb3ZlcnJpZGVzIGFzIHdlbGwgYXMgYWRkaXRpb25hbCBDU1Mgc3R5bGVzLlxuICAgKi9cbiAgc3g6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuYm9vbF0pKSwgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKSxcbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHRyYW5zaXRpb24uXG4gICAqIFtGb2xsb3cgdGhpcyBndWlkZV0oL21hdGVyaWFsLXVpL3RyYW5zaXRpb25zLyN0cmFuc2l0aW9uY29tcG9uZW50LXByb3ApIHRvIGxlYXJuIG1vcmUgYWJvdXQgdGhlIHJlcXVpcmVtZW50cyBmb3IgdGhpcyBjb21wb25lbnQuXG4gICAqIEBkZXByZWNhdGVkIFVzZSBgc2xvdHMudHJhbnNpdGlvbmAgaW5zdGVhZC4gVGhpcyBwcm9wIHdpbGwgYmUgcmVtb3ZlZCBpbiB2Ny4gW0hvdyB0byBtaWdyYXRlXSgvbWF0ZXJpYWwtdWkvbWlncmF0aW9uL21pZ3JhdGluZy1mcm9tLWRlcHJlY2F0ZWQtYXBpcy8pLlxuICAgKi9cbiAgVHJhbnNpdGlvbkNvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuICAvKipcbiAgICogUHJvcHMgYXBwbGllZCB0byB0aGUgdHJhbnNpdGlvbiBlbGVtZW50LlxuICAgKiBCeSBkZWZhdWx0LCB0aGUgZWxlbWVudCBpcyBiYXNlZCBvbiB0aGlzIFtgVHJhbnNpdGlvbmBdKGh0dHBzOi8vcmVhY3Rjb21tdW5pdHkub3JnL3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAvdHJhbnNpdGlvbi8pIGNvbXBvbmVudC5cbiAgICogQGRlcHJlY2F0ZWQgVXNlIGBzbG90UHJvcHMudHJhbnNpdGlvbmAgaW5zdGVhZC4gVGhpcyBwcm9wIHdpbGwgYmUgcmVtb3ZlZCBpbiB2Ny4gW0hvdyB0byBtaWdyYXRlXSgvbWF0ZXJpYWwtdWkvbWlncmF0aW9uL21pZ3JhdGluZy1mcm9tLWRlcHJlY2F0ZWQtYXBpcy8pLlxuICAgKi9cbiAgVHJhbnNpdGlvblByb3BzOiBQcm9wVHlwZXMub2JqZWN0XG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgQWNjb3JkaW9uOyIsImltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3Nlcyc7XG5pbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3MgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzcyc7XG5leHBvcnQgZnVuY3Rpb24gZ2V0QWNjb3JkaW9uQWN0aW9uc1V0aWxpdHlDbGFzcyhzbG90KSB7XG4gIHJldHVybiBnZW5lcmF0ZVV0aWxpdHlDbGFzcygnTXVpQWNjb3JkaW9uQWN0aW9ucycsIHNsb3QpO1xufVxuY29uc3QgYWNjb3JkaW9uQWN0aW9uc0NsYXNzZXMgPSBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzKCdNdWlBY2NvcmRpb25BY3Rpb25zJywgWydyb290JywgJ3NwYWNpbmcnXSk7XG5leHBvcnQgZGVmYXVsdCBhY2NvcmRpb25BY3Rpb25zQ2xhc3NlczsiLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJjbGFzc05hbWVcIiwgXCJkaXNhYmxlU3BhY2luZ1wiXTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCBjb21wb3NlQ2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2NvbXBvc2VDbGFzc2VzJztcbmltcG9ydCB7IHN0eWxlZCB9IGZyb20gJy4uL3plcm8tc3R5bGVkJztcbmltcG9ydCB7IHVzZURlZmF1bHRQcm9wcyB9IGZyb20gJy4uL0RlZmF1bHRQcm9wc1Byb3ZpZGVyJztcbmltcG9ydCB7IGdldEFjY29yZGlvbkFjdGlvbnNVdGlsaXR5Q2xhc3MgfSBmcm9tICcuL2FjY29yZGlvbkFjdGlvbnNDbGFzc2VzJztcbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5jb25zdCB1c2VVdGlsaXR5Q2xhc3NlcyA9IG93bmVyU3RhdGUgPT4ge1xuICBjb25zdCB7XG4gICAgY2xhc3NlcyxcbiAgICBkaXNhYmxlU3BhY2luZ1xuICB9ID0gb3duZXJTdGF0ZTtcbiAgY29uc3Qgc2xvdHMgPSB7XG4gICAgcm9vdDogWydyb290JywgIWRpc2FibGVTcGFjaW5nICYmICdzcGFjaW5nJ11cbiAgfTtcbiAgcmV0dXJuIGNvbXBvc2VDbGFzc2VzKHNsb3RzLCBnZXRBY2NvcmRpb25BY3Rpb25zVXRpbGl0eUNsYXNzLCBjbGFzc2VzKTtcbn07XG5jb25zdCBBY2NvcmRpb25BY3Rpb25zUm9vdCA9IHN0eWxlZCgnZGl2Jywge1xuICBuYW1lOiAnTXVpQWNjb3JkaW9uQWN0aW9ucycsXG4gIHNsb3Q6ICdSb290JyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgb3duZXJTdGF0ZVxuICAgIH0gPSBwcm9wcztcbiAgICByZXR1cm4gW3N0eWxlcy5yb290LCAhb3duZXJTdGF0ZS5kaXNhYmxlU3BhY2luZyAmJiBzdHlsZXMuc3BhY2luZ107XG4gIH1cbn0pKHtcbiAgZGlzcGxheTogJ2ZsZXgnLFxuICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgcGFkZGluZzogOCxcbiAganVzdGlmeUNvbnRlbnQ6ICdmbGV4LWVuZCcsXG4gIHZhcmlhbnRzOiBbe1xuICAgIHByb3BzOiBwcm9wcyA9PiAhcHJvcHMuZGlzYWJsZVNwYWNpbmcsXG4gICAgc3R5bGU6IHtcbiAgICAgICcmID4gOm5vdChzdHlsZSkgfiA6bm90KHN0eWxlKSc6IHtcbiAgICAgICAgbWFyZ2luTGVmdDogOFxuICAgICAgfVxuICAgIH1cbiAgfV1cbn0pO1xuY29uc3QgQWNjb3JkaW9uQWN0aW9ucyA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIEFjY29yZGlvbkFjdGlvbnMoaW5Qcm9wcywgcmVmKSB7XG4gIGNvbnN0IHByb3BzID0gdXNlRGVmYXVsdFByb3BzKHtcbiAgICBwcm9wczogaW5Qcm9wcyxcbiAgICBuYW1lOiAnTXVpQWNjb3JkaW9uQWN0aW9ucydcbiAgfSk7XG4gIGNvbnN0IHtcbiAgICAgIGNsYXNzTmFtZSxcbiAgICAgIGRpc2FibGVTcGFjaW5nID0gZmFsc2VcbiAgICB9ID0gcHJvcHMsXG4gICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkKTtcbiAgY29uc3Qgb3duZXJTdGF0ZSA9IF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgIGRpc2FibGVTcGFjaW5nXG4gIH0pO1xuICBjb25zdCBjbGFzc2VzID0gdXNlVXRpbGl0eUNsYXNzZXMob3duZXJTdGF0ZSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeChBY2NvcmRpb25BY3Rpb25zUm9vdCwgX2V4dGVuZHMoe1xuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSksXG4gICAgcmVmOiByZWYsXG4gICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZVxuICB9LCBvdGhlcikpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBBY2NvcmRpb25BY3Rpb25zLnByb3BUeXBlcyAvKiByZW1vdmUtcHJvcHR5cGVzICovID0ge1xuICAvLyDilIzilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIAgV2FybmluZyDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJBcbiAgLy8g4pSCIFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucy4g4pSCXG4gIC8vIOKUgiAgICBUbyB1cGRhdGUgdGhlbSwgZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gYHBucG0gcHJvcHR5cGVzYC4gICAgIOKUglxuICAvLyDilJTilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJhcbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgYWN0aW9ucyBkbyBub3QgaGF2ZSBhZGRpdGlvbmFsIG1hcmdpbi5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRpc2FibGVTcGFjaW5nOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIFRoZSBzeXN0ZW0gcHJvcCB0aGF0IGFsbG93cyBkZWZpbmluZyBzeXN0ZW0gb3ZlcnJpZGVzIGFzIHdlbGwgYXMgYWRkaXRpb25hbCBDU1Mgc3R5bGVzLlxuICAgKi9cbiAgc3g6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuYm9vbF0pKSwgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IEFjY29yZGlvbkFjdGlvbnM7IiwiaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzc2VzJztcbmltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzJztcbmV4cG9ydCBmdW5jdGlvbiBnZXRBY2NvcmRpb25EZXRhaWxzVXRpbGl0eUNsYXNzKHNsb3QpIHtcbiAgcmV0dXJuIGdlbmVyYXRlVXRpbGl0eUNsYXNzKCdNdWlBY2NvcmRpb25EZXRhaWxzJywgc2xvdCk7XG59XG5jb25zdCBhY2NvcmRpb25EZXRhaWxzQ2xhc3NlcyA9IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMoJ011aUFjY29yZGlvbkRldGFpbHMnLCBbJ3Jvb3QnXSk7XG5leHBvcnQgZGVmYXVsdCBhY2NvcmRpb25EZXRhaWxzQ2xhc3NlczsiLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJjbGFzc05hbWVcIl07XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgY29tcG9zZUNsYXNzZXMgZnJvbSAnQG11aS91dGlscy9jb21wb3NlQ2xhc3Nlcyc7XG5pbXBvcnQgeyBzdHlsZWQgfSBmcm9tICcuLi96ZXJvLXN0eWxlZCc7XG5pbXBvcnQgeyB1c2VEZWZhdWx0UHJvcHMgfSBmcm9tICcuLi9EZWZhdWx0UHJvcHNQcm92aWRlcic7XG5pbXBvcnQgeyBnZXRBY2NvcmRpb25EZXRhaWxzVXRpbGl0eUNsYXNzIH0gZnJvbSAnLi9hY2NvcmRpb25EZXRhaWxzQ2xhc3Nlcyc7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuY29uc3QgdXNlVXRpbGl0eUNsYXNzZXMgPSBvd25lclN0YXRlID0+IHtcbiAgY29uc3Qge1xuICAgIGNsYXNzZXNcbiAgfSA9IG93bmVyU3RhdGU7XG4gIGNvbnN0IHNsb3RzID0ge1xuICAgIHJvb3Q6IFsncm9vdCddXG4gIH07XG4gIHJldHVybiBjb21wb3NlQ2xhc3NlcyhzbG90cywgZ2V0QWNjb3JkaW9uRGV0YWlsc1V0aWxpdHlDbGFzcywgY2xhc3Nlcyk7XG59O1xuY29uc3QgQWNjb3JkaW9uRGV0YWlsc1Jvb3QgPSBzdHlsZWQoJ2RpdicsIHtcbiAgbmFtZTogJ011aUFjY29yZGlvbkRldGFpbHMnLFxuICBzbG90OiAnUm9vdCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4gc3R5bGVzLnJvb3Rcbn0pKCh7XG4gIHRoZW1lXG59KSA9PiAoe1xuICBwYWRkaW5nOiB0aGVtZS5zcGFjaW5nKDEsIDIsIDIpXG59KSk7XG5jb25zdCBBY2NvcmRpb25EZXRhaWxzID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gQWNjb3JkaW9uRGV0YWlscyhpblByb3BzLCByZWYpIHtcbiAgY29uc3QgcHJvcHMgPSB1c2VEZWZhdWx0UHJvcHMoe1xuICAgIHByb3BzOiBpblByb3BzLFxuICAgIG5hbWU6ICdNdWlBY2NvcmRpb25EZXRhaWxzJ1xuICB9KTtcbiAgY29uc3Qge1xuICAgICAgY2xhc3NOYW1lXG4gICAgfSA9IHByb3BzLFxuICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIF9leGNsdWRlZCk7XG4gIGNvbnN0IG93bmVyU3RhdGUgPSBwcm9wcztcbiAgY29uc3QgY2xhc3NlcyA9IHVzZVV0aWxpdHlDbGFzc2VzKG93bmVyU3RhdGUpO1xuICByZXR1cm4gLyojX19QVVJFX18qL19qc3goQWNjb3JkaW9uRGV0YWlsc1Jvb3QsIF9leHRlbmRzKHtcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWUpLFxuICAgIHJlZjogcmVmLFxuICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGVcbiAgfSwgb3RoZXIpKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gQWNjb3JkaW9uRGV0YWlscy5wcm9wVHlwZXMgLyogcmVtb3ZlLXByb3B0eXBlcyAqLyA9IHtcbiAgLy8g4pSM4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAIFdhcm5pbmcg4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSQXG4gIC8vIOKUgiBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMuIOKUglxuICAvLyDilIIgICAgVG8gdXBkYXRlIHRoZW0sIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIGBwbnBtIHByb3B0eXBlc2AuICAgICDilIJcbiAgLy8g4pSU4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSYXG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIFRoZSBzeXN0ZW0gcHJvcCB0aGF0IGFsbG93cyBkZWZpbmluZyBzeXN0ZW0gb3ZlcnJpZGVzIGFzIHdlbGwgYXMgYWRkaXRpb25hbCBDU1Mgc3R5bGVzLlxuICAgKi9cbiAgc3g6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuYm9vbF0pKSwgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IEFjY29yZGlvbkRldGFpbHM7IiwiaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzc2VzJztcbmltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzJztcbmV4cG9ydCBmdW5jdGlvbiBnZXRBY2NvcmRpb25TdW1tYXJ5VXRpbGl0eUNsYXNzKHNsb3QpIHtcbiAgcmV0dXJuIGdlbmVyYXRlVXRpbGl0eUNsYXNzKCdNdWlBY2NvcmRpb25TdW1tYXJ5Jywgc2xvdCk7XG59XG5jb25zdCBhY2NvcmRpb25TdW1tYXJ5Q2xhc3NlcyA9IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMoJ011aUFjY29yZGlvblN1bW1hcnknLCBbJ3Jvb3QnLCAnZXhwYW5kZWQnLCAnZm9jdXNWaXNpYmxlJywgJ2Rpc2FibGVkJywgJ2d1dHRlcnMnLCAnY29udGVudEd1dHRlcnMnLCAnY29udGVudCcsICdleHBhbmRJY29uV3JhcHBlciddKTtcbmV4cG9ydCBkZWZhdWx0IGFjY29yZGlvblN1bW1hcnlDbGFzc2VzOyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImNoaWxkcmVuXCIsIFwiY2xhc3NOYW1lXCIsIFwiZXhwYW5kSWNvblwiLCBcImZvY3VzVmlzaWJsZUNsYXNzTmFtZVwiLCBcIm9uQ2xpY2tcIl07XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgY29tcG9zZUNsYXNzZXMgZnJvbSAnQG11aS91dGlscy9jb21wb3NlQ2xhc3Nlcyc7XG5pbXBvcnQgeyBzdHlsZWQgfSBmcm9tICcuLi96ZXJvLXN0eWxlZCc7XG5pbXBvcnQgeyB1c2VEZWZhdWx0UHJvcHMgfSBmcm9tICcuLi9EZWZhdWx0UHJvcHNQcm92aWRlcic7XG5pbXBvcnQgQnV0dG9uQmFzZSBmcm9tICcuLi9CdXR0b25CYXNlJztcbmltcG9ydCBBY2NvcmRpb25Db250ZXh0IGZyb20gJy4uL0FjY29yZGlvbi9BY2NvcmRpb25Db250ZXh0JztcbmltcG9ydCBhY2NvcmRpb25TdW1tYXJ5Q2xhc3NlcywgeyBnZXRBY2NvcmRpb25TdW1tYXJ5VXRpbGl0eUNsYXNzIH0gZnJvbSAnLi9hY2NvcmRpb25TdW1tYXJ5Q2xhc3Nlcyc7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuaW1wb3J0IHsganN4cyBhcyBfanN4cyB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuY29uc3QgdXNlVXRpbGl0eUNsYXNzZXMgPSBvd25lclN0YXRlID0+IHtcbiAgY29uc3Qge1xuICAgIGNsYXNzZXMsXG4gICAgZXhwYW5kZWQsXG4gICAgZGlzYWJsZWQsXG4gICAgZGlzYWJsZUd1dHRlcnNcbiAgfSA9IG93bmVyU3RhdGU7XG4gIGNvbnN0IHNsb3RzID0ge1xuICAgIHJvb3Q6IFsncm9vdCcsIGV4cGFuZGVkICYmICdleHBhbmRlZCcsIGRpc2FibGVkICYmICdkaXNhYmxlZCcsICFkaXNhYmxlR3V0dGVycyAmJiAnZ3V0dGVycyddLFxuICAgIGZvY3VzVmlzaWJsZTogWydmb2N1c1Zpc2libGUnXSxcbiAgICBjb250ZW50OiBbJ2NvbnRlbnQnLCBleHBhbmRlZCAmJiAnZXhwYW5kZWQnLCAhZGlzYWJsZUd1dHRlcnMgJiYgJ2NvbnRlbnRHdXR0ZXJzJ10sXG4gICAgZXhwYW5kSWNvbldyYXBwZXI6IFsnZXhwYW5kSWNvbldyYXBwZXInLCBleHBhbmRlZCAmJiAnZXhwYW5kZWQnXVxuICB9O1xuICByZXR1cm4gY29tcG9zZUNsYXNzZXMoc2xvdHMsIGdldEFjY29yZGlvblN1bW1hcnlVdGlsaXR5Q2xhc3MsIGNsYXNzZXMpO1xufTtcbmNvbnN0IEFjY29yZGlvblN1bW1hcnlSb290ID0gc3R5bGVkKEJ1dHRvbkJhc2UsIHtcbiAgbmFtZTogJ011aUFjY29yZGlvblN1bW1hcnknLFxuICBzbG90OiAnUm9vdCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4gc3R5bGVzLnJvb3Rcbn0pKCh7XG4gIHRoZW1lXG59KSA9PiB7XG4gIGNvbnN0IHRyYW5zaXRpb24gPSB7XG4gICAgZHVyYXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmR1cmF0aW9uLnNob3J0ZXN0XG4gIH07XG4gIHJldHVybiB7XG4gICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgIG1pbkhlaWdodDogNDgsXG4gICAgcGFkZGluZzogdGhlbWUuc3BhY2luZygwLCAyKSxcbiAgICB0cmFuc2l0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoWydtaW4taGVpZ2h0JywgJ2JhY2tncm91bmQtY29sb3InXSwgdHJhbnNpdGlvbiksXG4gICAgW2AmLiR7YWNjb3JkaW9uU3VtbWFyeUNsYXNzZXMuZm9jdXNWaXNpYmxlfWBdOiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlLmFjdGlvbi5mb2N1c1xuICAgIH0sXG4gICAgW2AmLiR7YWNjb3JkaW9uU3VtbWFyeUNsYXNzZXMuZGlzYWJsZWR9YF06IHtcbiAgICAgIG9wYWNpdHk6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlLmFjdGlvbi5kaXNhYmxlZE9wYWNpdHlcbiAgICB9LFxuICAgIFtgJjpob3Zlcjpub3QoLiR7YWNjb3JkaW9uU3VtbWFyeUNsYXNzZXMuZGlzYWJsZWR9KWBdOiB7XG4gICAgICBjdXJzb3I6ICdwb2ludGVyJ1xuICAgIH0sXG4gICAgdmFyaWFudHM6IFt7XG4gICAgICBwcm9wczogcHJvcHMgPT4gIXByb3BzLmRpc2FibGVHdXR0ZXJzLFxuICAgICAgc3R5bGU6IHtcbiAgICAgICAgW2AmLiR7YWNjb3JkaW9uU3VtbWFyeUNsYXNzZXMuZXhwYW5kZWR9YF06IHtcbiAgICAgICAgICBtaW5IZWlnaHQ6IDY0XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XVxuICB9O1xufSk7XG5jb25zdCBBY2NvcmRpb25TdW1tYXJ5Q29udGVudCA9IHN0eWxlZCgnZGl2Jywge1xuICBuYW1lOiAnTXVpQWNjb3JkaW9uU3VtbWFyeScsXG4gIHNsb3Q6ICdDb250ZW50JyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiBzdHlsZXMuY29udGVudFxufSkoKHtcbiAgdGhlbWVcbn0pID0+ICh7XG4gIGRpc3BsYXk6ICdmbGV4JyxcbiAgZmxleEdyb3c6IDEsXG4gIG1hcmdpbjogJzEycHggMCcsXG4gIHZhcmlhbnRzOiBbe1xuICAgIHByb3BzOiBwcm9wcyA9PiAhcHJvcHMuZGlzYWJsZUd1dHRlcnMsXG4gICAgc3R5bGU6IHtcbiAgICAgIHRyYW5zaXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZShbJ21hcmdpbiddLCB7XG4gICAgICAgIGR1cmF0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5kdXJhdGlvbi5zaG9ydGVzdFxuICAgICAgfSksXG4gICAgICBbYCYuJHthY2NvcmRpb25TdW1tYXJ5Q2xhc3Nlcy5leHBhbmRlZH1gXToge1xuICAgICAgICBtYXJnaW46ICcyMHB4IDAnXG4gICAgICB9XG4gICAgfVxuICB9XVxufSkpO1xuY29uc3QgQWNjb3JkaW9uU3VtbWFyeUV4cGFuZEljb25XcmFwcGVyID0gc3R5bGVkKCdkaXYnLCB7XG4gIG5hbWU6ICdNdWlBY2NvcmRpb25TdW1tYXJ5JyxcbiAgc2xvdDogJ0V4cGFuZEljb25XcmFwcGVyJyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiBzdHlsZXMuZXhwYW5kSWNvbldyYXBwZXJcbn0pKCh7XG4gIHRoZW1lXG59KSA9PiAoe1xuICBkaXNwbGF5OiAnZmxleCcsXG4gIGNvbG9yOiAodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZS5hY3Rpb24uYWN0aXZlLFxuICB0cmFuc2Zvcm06ICdyb3RhdGUoMGRlZyknLFxuICB0cmFuc2l0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoJ3RyYW5zZm9ybScsIHtcbiAgICBkdXJhdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuZHVyYXRpb24uc2hvcnRlc3RcbiAgfSksXG4gIFtgJi4ke2FjY29yZGlvblN1bW1hcnlDbGFzc2VzLmV4cGFuZGVkfWBdOiB7XG4gICAgdHJhbnNmb3JtOiAncm90YXRlKDE4MGRlZyknXG4gIH1cbn0pKTtcbmNvbnN0IEFjY29yZGlvblN1bW1hcnkgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBBY2NvcmRpb25TdW1tYXJ5KGluUHJvcHMsIHJlZikge1xuICBjb25zdCBwcm9wcyA9IHVzZURlZmF1bHRQcm9wcyh7XG4gICAgcHJvcHM6IGluUHJvcHMsXG4gICAgbmFtZTogJ011aUFjY29yZGlvblN1bW1hcnknXG4gIH0pO1xuICBjb25zdCB7XG4gICAgICBjaGlsZHJlbixcbiAgICAgIGNsYXNzTmFtZSxcbiAgICAgIGV4cGFuZEljb24sXG4gICAgICBmb2N1c1Zpc2libGVDbGFzc05hbWUsXG4gICAgICBvbkNsaWNrXG4gICAgfSA9IHByb3BzLFxuICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIF9leGNsdWRlZCk7XG4gIGNvbnN0IHtcbiAgICBkaXNhYmxlZCA9IGZhbHNlLFxuICAgIGRpc2FibGVHdXR0ZXJzLFxuICAgIGV4cGFuZGVkLFxuICAgIHRvZ2dsZVxuICB9ID0gUmVhY3QudXNlQ29udGV4dChBY2NvcmRpb25Db250ZXh0KTtcbiAgY29uc3QgaGFuZGxlQ2hhbmdlID0gZXZlbnQgPT4ge1xuICAgIGlmICh0b2dnbGUpIHtcbiAgICAgIHRvZ2dsZShldmVudCk7XG4gICAgfVxuICAgIGlmIChvbkNsaWNrKSB7XG4gICAgICBvbkNsaWNrKGV2ZW50KTtcbiAgICB9XG4gIH07XG4gIGNvbnN0IG93bmVyU3RhdGUgPSBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICBleHBhbmRlZCxcbiAgICBkaXNhYmxlZCxcbiAgICBkaXNhYmxlR3V0dGVyc1xuICB9KTtcbiAgY29uc3QgY2xhc3NlcyA9IHVzZVV0aWxpdHlDbGFzc2VzKG93bmVyU3RhdGUpO1xuICByZXR1cm4gLyojX19QVVJFX18qL19qc3hzKEFjY29yZGlvblN1bW1hcnlSb290LCBfZXh0ZW5kcyh7XG4gICAgZm9jdXNSaXBwbGU6IGZhbHNlLFxuICAgIGRpc2FibGVSaXBwbGU6IHRydWUsXG4gICAgZGlzYWJsZWQ6IGRpc2FibGVkLFxuICAgIGNvbXBvbmVudDogXCJkaXZcIixcbiAgICBcImFyaWEtZXhwYW5kZWRcIjogZXhwYW5kZWQsXG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lKSxcbiAgICBmb2N1c1Zpc2libGVDbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5mb2N1c1Zpc2libGUsIGZvY3VzVmlzaWJsZUNsYXNzTmFtZSksXG4gICAgb25DbGljazogaGFuZGxlQ2hhbmdlLFxuICAgIHJlZjogcmVmLFxuICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGVcbiAgfSwgb3RoZXIsIHtcbiAgICBjaGlsZHJlbjogWy8qI19fUFVSRV9fKi9fanN4KEFjY29yZGlvblN1bW1hcnlDb250ZW50LCB7XG4gICAgICBjbGFzc05hbWU6IGNsYXNzZXMuY29udGVudCxcbiAgICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGUsXG4gICAgICBjaGlsZHJlbjogY2hpbGRyZW5cbiAgICB9KSwgZXhwYW5kSWNvbiAmJiAvKiNfX1BVUkVfXyovX2pzeChBY2NvcmRpb25TdW1tYXJ5RXhwYW5kSWNvbldyYXBwZXIsIHtcbiAgICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5leHBhbmRJY29uV3JhcHBlcixcbiAgICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGUsXG4gICAgICBjaGlsZHJlbjogZXhwYW5kSWNvblxuICAgIH0pXVxuICB9KSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IEFjY29yZGlvblN1bW1hcnkucHJvcFR5cGVzIC8qIHJlbW92ZS1wcm9wdHlwZXMgKi8gPSB7XG4gIC8vIOKUjOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgCBXYXJuaW5nIOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUkFxuICAvLyDilIIgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zLiDilIJcbiAgLy8g4pSCICAgIFRvIHVwZGF0ZSB0aGVtLCBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBgcG5wbSBwcm9wdHlwZXNgLiAgICAg4pSCXG4gIC8vIOKUlOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUmFxuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBUaGUgaWNvbiB0byBkaXNwbGF5IGFzIHRoZSBleHBhbmQgaW5kaWNhdG9yLlxuICAgKi9cbiAgZXhwYW5kSWNvbjogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBUaGlzIHByb3AgY2FuIGhlbHAgaWRlbnRpZnkgd2hpY2ggZWxlbWVudCBoYXMga2V5Ym9hcmQgZm9jdXMuXG4gICAqIFRoZSBjbGFzcyBuYW1lIHdpbGwgYmUgYXBwbGllZCB3aGVuIHRoZSBlbGVtZW50IGdhaW5zIHRoZSBmb2N1cyB0aHJvdWdoIGtleWJvYXJkIGludGVyYWN0aW9uLlxuICAgKiBJdCdzIGEgcG9seWZpbGwgZm9yIHRoZSBbQ1NTIDpmb2N1cy12aXNpYmxlIHNlbGVjdG9yXShodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvc2VsZWN0b3JzLTQvI3RoZS1mb2N1cy12aXNpYmxlLXBzZXVkbykuXG4gICAqIFRoZSByYXRpb25hbGUgZm9yIHVzaW5nIHRoaXMgZmVhdHVyZSBbaXMgZXhwbGFpbmVkIGhlcmVdKGh0dHBzOi8vZ2l0aHViLmNvbS9XSUNHL2ZvY3VzLXZpc2libGUvYmxvYi9IRUFEL2V4cGxhaW5lci5tZCkuXG4gICAqIEEgW3BvbHlmaWxsIGNhbiBiZSB1c2VkXShodHRwczovL2dpdGh1Yi5jb20vV0lDRy9mb2N1cy12aXNpYmxlKSB0byBhcHBseSBhIGBmb2N1cy12aXNpYmxlYCBjbGFzcyB0byBvdGhlciBjb21wb25lbnRzXG4gICAqIGlmIG5lZWRlZC5cbiAgICovXG4gIGZvY3VzVmlzaWJsZUNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uQ2xpY2s6IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogVGhlIHN5c3RlbSBwcm9wIHRoYXQgYWxsb3dzIGRlZmluaW5nIHN5c3RlbSBvdmVycmlkZXMgYXMgd2VsbCBhcyBhZGRpdGlvbmFsIENTUyBzdHlsZXMuXG4gICAqL1xuICBzeDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5ib29sXSkpLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgQWNjb3JkaW9uU3VtbWFyeTsiLCJpbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzZXMnO1xuaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3MnO1xuZXhwb3J0IGZ1bmN0aW9uIGdldEFsZXJ0VXRpbGl0eUNsYXNzKHNsb3QpIHtcbiAgcmV0dXJuIGdlbmVyYXRlVXRpbGl0eUNsYXNzKCdNdWlBbGVydCcsIHNsb3QpO1xufVxuY29uc3QgYWxlcnRDbGFzc2VzID0gZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcygnTXVpQWxlcnQnLCBbJ3Jvb3QnLCAnYWN0aW9uJywgJ2ljb24nLCAnbWVzc2FnZScsICdmaWxsZWQnLCAnY29sb3JTdWNjZXNzJywgJ2NvbG9ySW5mbycsICdjb2xvcldhcm5pbmcnLCAnY29sb3JFcnJvcicsICdmaWxsZWRTdWNjZXNzJywgJ2ZpbGxlZEluZm8nLCAnZmlsbGVkV2FybmluZycsICdmaWxsZWRFcnJvcicsICdvdXRsaW5lZCcsICdvdXRsaW5lZFN1Y2Nlc3MnLCAnb3V0bGluZWRJbmZvJywgJ291dGxpbmVkV2FybmluZycsICdvdXRsaW5lZEVycm9yJywgJ3N0YW5kYXJkJywgJ3N0YW5kYXJkU3VjY2VzcycsICdzdGFuZGFyZEluZm8nLCAnc3RhbmRhcmRXYXJuaW5nJywgJ3N0YW5kYXJkRXJyb3InXSk7XG5leHBvcnQgZGVmYXVsdCBhbGVydENsYXNzZXM7IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgY3JlYXRlU3ZnSWNvbiBmcm9tICcuLi8uLi91dGlscy9jcmVhdGVTdmdJY29uJztcblxuLyoqXG4gKiBAaWdub3JlIC0gaW50ZXJuYWwgY29tcG9uZW50LlxuICovXG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuZXhwb3J0IGRlZmF1bHQgY3JlYXRlU3ZnSWNvbiggLyojX19QVVJFX18qL19qc3goXCJwYXRoXCIsIHtcbiAgZDogXCJNMjAsMTJBOCw4IDAgMCwxIDEyLDIwQTgsOCAwIDAsMSA0LDEyQTgsOCAwIDAsMSAxMiw0QzEyLjc2LDQgMTMuNSw0LjExIDE0LjIsIDQuMzFMMTUuNzcsMi43NEMxNC42MSwyLjI2IDEzLjM0LDIgMTIsMkExMCwxMCAwIDAsMCAyLDEyQTEwLDEwIDAgMCwwIDEyLDIyQTEwLDEwIDAgMCwgMCAyMiwxMk03LjkxLDEwLjA4TDYuNSwxMS41TDExLDE2TDIxLDZMMTkuNTksNC41OEwxMSwxMy4xN0w3LjkxLDEwLjA4WlwiXG59KSwgJ1N1Y2Nlc3NPdXRsaW5lZCcpOyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNyZWF0ZVN2Z0ljb24gZnJvbSAnLi4vLi4vdXRpbHMvY3JlYXRlU3ZnSWNvbic7XG5cbi8qKlxuICogQGlnbm9yZSAtIGludGVybmFsIGNvbXBvbmVudC5cbiAqL1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZVN2Z0ljb24oIC8qI19fUFVSRV9fKi9fanN4KFwicGF0aFwiLCB7XG4gIGQ6IFwiTTEyIDUuOTlMMTkuNTMgMTlINC40N0wxMiA1Ljk5TTEyIDJMMSAyMWgyMkwxMiAyem0xIDE0aC0ydjJoMnYtMnptMC02aC0ydjRoMnYtNHpcIlxufSksICdSZXBvcnRQcm9ibGVtT3V0bGluZWQnKTsiLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBjcmVhdGVTdmdJY29uIGZyb20gJy4uLy4uL3V0aWxzL2NyZWF0ZVN2Z0ljb24nO1xuXG4vKipcbiAqIEBpZ25vcmUgLSBpbnRlcm5hbCBjb21wb25lbnQuXG4gKi9cbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5leHBvcnQgZGVmYXVsdCBjcmVhdGVTdmdJY29uKCAvKiNfX1BVUkVfXyovX2pzeChcInBhdGhcIiwge1xuICBkOiBcIk0xMSAxNWgydjJoLTJ6bTAtOGgydjZoLTJ6bS45OS01QzYuNDcgMiAyIDYuNDggMiAxMnM0LjQ3IDEwIDkuOTkgMTBDMTcuNTIgMjIgMjIgMTcuNTIgMjIgMTJTMTcuNTIgMiAxMS45OSAyek0xMiAyMGMtNC40MiAwLTgtMy41OC04LThzMy41OC04IDgtOCA4IDMuNTggOCA4LTMuNTggOC04IDh6XCJcbn0pLCAnRXJyb3JPdXRsaW5lJyk7IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgY3JlYXRlU3ZnSWNvbiBmcm9tICcuLi8uLi91dGlscy9jcmVhdGVTdmdJY29uJztcblxuLyoqXG4gKiBAaWdub3JlIC0gaW50ZXJuYWwgY29tcG9uZW50LlxuICovXG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuZXhwb3J0IGRlZmF1bHQgY3JlYXRlU3ZnSWNvbiggLyojX19QVVJFX18qL19qc3goXCJwYXRoXCIsIHtcbiAgZDogXCJNMTEsOUgxM1Y3SDExTTEyLDIwQzcuNTksMjAgNCwxNi40MSA0LDEyQzQsNy41OSA3LjU5LDQgMTIsNEMxNi40MSw0IDIwLDcuNTkgMjAsIDEyQzIwLDE2LjQxIDE2LjQxLDIwIDEyLDIwTTEyLDJBMTAsMTAgMCAwLDAgMiwxMkExMCwxMCAwIDAsMCAxMiwyMkExMCwxMCAwIDAsMCAyMiwxMkExMCwgMTAgMCAwLDAgMTIsMk0xMSwxN0gxM1YxMUgxMVYxN1pcIlxufSksICdJbmZvT3V0bGluZWQnKTsiLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBjcmVhdGVTdmdJY29uIGZyb20gJy4uLy4uL3V0aWxzL2NyZWF0ZVN2Z0ljb24nO1xuXG4vKipcbiAqIEBpZ25vcmUgLSBpbnRlcm5hbCBjb21wb25lbnQuXG4gKlxuICogQWxpYXMgdG8gYENsZWFyYC5cbiAqL1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZVN2Z0ljb24oIC8qI19fUFVSRV9fKi9fanN4KFwicGF0aFwiLCB7XG4gIGQ6IFwiTTE5IDYuNDFMMTcuNTkgNSAxMiAxMC41OSA2LjQxIDUgNSA2LjQxIDEwLjU5IDEyIDUgMTcuNTkgNi40MSAxOSAxMiAxMy40MSAxNy41OSAxOSAxOSAxNy41OSAxMy40MSAxMnpcIlxufSksICdDbG9zZScpOyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImFjdGlvblwiLCBcImNoaWxkcmVuXCIsIFwiY2xhc3NOYW1lXCIsIFwiY2xvc2VUZXh0XCIsIFwiY29sb3JcIiwgXCJjb21wb25lbnRzXCIsIFwiY29tcG9uZW50c1Byb3BzXCIsIFwiaWNvblwiLCBcImljb25NYXBwaW5nXCIsIFwib25DbG9zZVwiLCBcInJvbGVcIiwgXCJzZXZlcml0eVwiLCBcInNsb3RQcm9wc1wiLCBcInNsb3RzXCIsIFwidmFyaWFudFwiXTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCBjb21wb3NlQ2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2NvbXBvc2VDbGFzc2VzJztcbmltcG9ydCB7IGRhcmtlbiwgbGlnaHRlbiB9IGZyb20gJ0BtdWkvc3lzdGVtL2NvbG9yTWFuaXB1bGF0b3InO1xuaW1wb3J0IHsgc3R5bGVkIH0gZnJvbSAnLi4vemVyby1zdHlsZWQnO1xuaW1wb3J0IHsgdXNlRGVmYXVsdFByb3BzIH0gZnJvbSAnLi4vRGVmYXVsdFByb3BzUHJvdmlkZXInO1xuaW1wb3J0IHVzZVNsb3QgZnJvbSAnLi4vdXRpbHMvdXNlU2xvdCc7XG5pbXBvcnQgY2FwaXRhbGl6ZSBmcm9tICcuLi91dGlscy9jYXBpdGFsaXplJztcbmltcG9ydCBQYXBlciBmcm9tICcuLi9QYXBlcic7XG5pbXBvcnQgYWxlcnRDbGFzc2VzLCB7IGdldEFsZXJ0VXRpbGl0eUNsYXNzIH0gZnJvbSAnLi9hbGVydENsYXNzZXMnO1xuaW1wb3J0IEljb25CdXR0b24gZnJvbSAnLi4vSWNvbkJ1dHRvbic7XG5pbXBvcnQgU3VjY2Vzc091dGxpbmVkSWNvbiBmcm9tICcuLi9pbnRlcm5hbC9zdmctaWNvbnMvU3VjY2Vzc091dGxpbmVkJztcbmltcG9ydCBSZXBvcnRQcm9ibGVtT3V0bGluZWRJY29uIGZyb20gJy4uL2ludGVybmFsL3N2Zy1pY29ucy9SZXBvcnRQcm9ibGVtT3V0bGluZWQnO1xuaW1wb3J0IEVycm9yT3V0bGluZUljb24gZnJvbSAnLi4vaW50ZXJuYWwvc3ZnLWljb25zL0Vycm9yT3V0bGluZSc7XG5pbXBvcnQgSW5mb091dGxpbmVkSWNvbiBmcm9tICcuLi9pbnRlcm5hbC9zdmctaWNvbnMvSW5mb091dGxpbmVkJztcbmltcG9ydCBDbG9zZUljb24gZnJvbSAnLi4vaW50ZXJuYWwvc3ZnLWljb25zL0Nsb3NlJztcbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5pbXBvcnQgeyBqc3hzIGFzIF9qc3hzIH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5jb25zdCB1c2VVdGlsaXR5Q2xhc3NlcyA9IG93bmVyU3RhdGUgPT4ge1xuICBjb25zdCB7XG4gICAgdmFyaWFudCxcbiAgICBjb2xvcixcbiAgICBzZXZlcml0eSxcbiAgICBjbGFzc2VzXG4gIH0gPSBvd25lclN0YXRlO1xuICBjb25zdCBzbG90cyA9IHtcbiAgICByb290OiBbJ3Jvb3QnLCBgY29sb3Ike2NhcGl0YWxpemUoY29sb3IgfHwgc2V2ZXJpdHkpfWAsIGAke3ZhcmlhbnR9JHtjYXBpdGFsaXplKGNvbG9yIHx8IHNldmVyaXR5KX1gLCBgJHt2YXJpYW50fWBdLFxuICAgIGljb246IFsnaWNvbiddLFxuICAgIG1lc3NhZ2U6IFsnbWVzc2FnZSddLFxuICAgIGFjdGlvbjogWydhY3Rpb24nXVxuICB9O1xuICByZXR1cm4gY29tcG9zZUNsYXNzZXMoc2xvdHMsIGdldEFsZXJ0VXRpbGl0eUNsYXNzLCBjbGFzc2VzKTtcbn07XG5jb25zdCBBbGVydFJvb3QgPSBzdHlsZWQoUGFwZXIsIHtcbiAgbmFtZTogJ011aUFsZXJ0JyxcbiAgc2xvdDogJ1Jvb3QnLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBvd25lclN0YXRlXG4gICAgfSA9IHByb3BzO1xuICAgIHJldHVybiBbc3R5bGVzLnJvb3QsIHN0eWxlc1tvd25lclN0YXRlLnZhcmlhbnRdLCBzdHlsZXNbYCR7b3duZXJTdGF0ZS52YXJpYW50fSR7Y2FwaXRhbGl6ZShvd25lclN0YXRlLmNvbG9yIHx8IG93bmVyU3RhdGUuc2V2ZXJpdHkpfWBdXTtcbiAgfVxufSkoKHtcbiAgdGhlbWVcbn0pID0+IHtcbiAgY29uc3QgZ2V0Q29sb3IgPSB0aGVtZS5wYWxldHRlLm1vZGUgPT09ICdsaWdodCcgPyBkYXJrZW4gOiBsaWdodGVuO1xuICBjb25zdCBnZXRCYWNrZ3JvdW5kQ29sb3IgPSB0aGVtZS5wYWxldHRlLm1vZGUgPT09ICdsaWdodCcgPyBsaWdodGVuIDogZGFya2VuO1xuICByZXR1cm4gX2V4dGVuZHMoe30sIHRoZW1lLnR5cG9ncmFwaHkuYm9keTIsIHtcbiAgICBiYWNrZ3JvdW5kQ29sb3I6ICd0cmFuc3BhcmVudCcsXG4gICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgIHBhZGRpbmc6ICc2cHggMTZweCcsXG4gICAgdmFyaWFudHM6IFsuLi5PYmplY3QuZW50cmllcyh0aGVtZS5wYWxldHRlKS5maWx0ZXIoKFssIHZhbHVlXSkgPT4gdmFsdWUubWFpbiAmJiB2YWx1ZS5saWdodCkubWFwKChbY29sb3JdKSA9PiAoe1xuICAgICAgcHJvcHM6IHtcbiAgICAgICAgY29sb3JTZXZlcml0eTogY29sb3IsXG4gICAgICAgIHZhcmlhbnQ6ICdzdGFuZGFyZCdcbiAgICAgIH0sXG4gICAgICBzdHlsZToge1xuICAgICAgICBjb2xvcjogdGhlbWUudmFycyA/IHRoZW1lLnZhcnMucGFsZXR0ZS5BbGVydFtgJHtjb2xvcn1Db2xvcmBdIDogZ2V0Q29sb3IodGhlbWUucGFsZXR0ZVtjb2xvcl0ubGlnaHQsIDAuNiksXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUudmFycyA/IHRoZW1lLnZhcnMucGFsZXR0ZS5BbGVydFtgJHtjb2xvcn1TdGFuZGFyZEJnYF0gOiBnZXRCYWNrZ3JvdW5kQ29sb3IodGhlbWUucGFsZXR0ZVtjb2xvcl0ubGlnaHQsIDAuOSksXG4gICAgICAgIFtgJiAuJHthbGVydENsYXNzZXMuaWNvbn1gXTogdGhlbWUudmFycyA/IHtcbiAgICAgICAgICBjb2xvcjogdGhlbWUudmFycy5wYWxldHRlLkFsZXJ0W2Ake2NvbG9yfUljb25Db2xvcmBdXG4gICAgICAgIH0gOiB7XG4gICAgICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGVbY29sb3JdLm1haW5cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pKSwgLi4uT2JqZWN0LmVudHJpZXModGhlbWUucGFsZXR0ZSkuZmlsdGVyKChbLCB2YWx1ZV0pID0+IHZhbHVlLm1haW4gJiYgdmFsdWUubGlnaHQpLm1hcCgoW2NvbG9yXSkgPT4gKHtcbiAgICAgIHByb3BzOiB7XG4gICAgICAgIGNvbG9yU2V2ZXJpdHk6IGNvbG9yLFxuICAgICAgICB2YXJpYW50OiAnb3V0bGluZWQnXG4gICAgICB9LFxuICAgICAgc3R5bGU6IHtcbiAgICAgICAgY29sb3I6IHRoZW1lLnZhcnMgPyB0aGVtZS52YXJzLnBhbGV0dGUuQWxlcnRbYCR7Y29sb3J9Q29sb3JgXSA6IGdldENvbG9yKHRoZW1lLnBhbGV0dGVbY29sb3JdLmxpZ2h0LCAwLjYpLFxuICAgICAgICBib3JkZXI6IGAxcHggc29saWQgJHsodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZVtjb2xvcl0ubGlnaHR9YCxcbiAgICAgICAgW2AmIC4ke2FsZXJ0Q2xhc3Nlcy5pY29ufWBdOiB0aGVtZS52YXJzID8ge1xuICAgICAgICAgIGNvbG9yOiB0aGVtZS52YXJzLnBhbGV0dGUuQWxlcnRbYCR7Y29sb3J9SWNvbkNvbG9yYF1cbiAgICAgICAgfSA6IHtcbiAgICAgICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZVtjb2xvcl0ubWFpblxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSkpLCAuLi5PYmplY3QuZW50cmllcyh0aGVtZS5wYWxldHRlKS5maWx0ZXIoKFssIHZhbHVlXSkgPT4gdmFsdWUubWFpbiAmJiB2YWx1ZS5kYXJrKS5tYXAoKFtjb2xvcl0pID0+ICh7XG4gICAgICBwcm9wczoge1xuICAgICAgICBjb2xvclNldmVyaXR5OiBjb2xvcixcbiAgICAgICAgdmFyaWFudDogJ2ZpbGxlZCdcbiAgICAgIH0sXG4gICAgICBzdHlsZTogX2V4dGVuZHMoe1xuICAgICAgICBmb250V2VpZ2h0OiB0aGVtZS50eXBvZ3JhcGh5LmZvbnRXZWlnaHRNZWRpdW1cbiAgICAgIH0sIHRoZW1lLnZhcnMgPyB7XG4gICAgICAgIGNvbG9yOiB0aGVtZS52YXJzLnBhbGV0dGUuQWxlcnRbYCR7Y29sb3J9RmlsbGVkQ29sb3JgXSxcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS52YXJzLnBhbGV0dGUuQWxlcnRbYCR7Y29sb3J9RmlsbGVkQmdgXVxuICAgICAgfSA6IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLm1vZGUgPT09ICdkYXJrJyA/IHRoZW1lLnBhbGV0dGVbY29sb3JdLmRhcmsgOiB0aGVtZS5wYWxldHRlW2NvbG9yXS5tYWluLFxuICAgICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5nZXRDb250cmFzdFRleHQodGhlbWUucGFsZXR0ZVtjb2xvcl0ubWFpbilcbiAgICAgIH0pXG4gICAgfSkpXVxuICB9KTtcbn0pO1xuY29uc3QgQWxlcnRJY29uID0gc3R5bGVkKCdkaXYnLCB7XG4gIG5hbWU6ICdNdWlBbGVydCcsXG4gIHNsb3Q6ICdJY29uJyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiBzdHlsZXMuaWNvblxufSkoe1xuICBtYXJnaW5SaWdodDogMTIsXG4gIHBhZGRpbmc6ICc3cHggMCcsXG4gIGRpc3BsYXk6ICdmbGV4JyxcbiAgZm9udFNpemU6IDIyLFxuICBvcGFjaXR5OiAwLjlcbn0pO1xuY29uc3QgQWxlcnRNZXNzYWdlID0gc3R5bGVkKCdkaXYnLCB7XG4gIG5hbWU6ICdNdWlBbGVydCcsXG4gIHNsb3Q6ICdNZXNzYWdlJyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiBzdHlsZXMubWVzc2FnZVxufSkoe1xuICBwYWRkaW5nOiAnOHB4IDAnLFxuICBtaW5XaWR0aDogMCxcbiAgb3ZlcmZsb3c6ICdhdXRvJ1xufSk7XG5jb25zdCBBbGVydEFjdGlvbiA9IHN0eWxlZCgnZGl2Jywge1xuICBuYW1lOiAnTXVpQWxlcnQnLFxuICBzbG90OiAnQWN0aW9uJyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiBzdHlsZXMuYWN0aW9uXG59KSh7XG4gIGRpc3BsYXk6ICdmbGV4JyxcbiAgYWxpZ25JdGVtczogJ2ZsZXgtc3RhcnQnLFxuICBwYWRkaW5nOiAnNHB4IDAgMCAxNnB4JyxcbiAgbWFyZ2luTGVmdDogJ2F1dG8nLFxuICBtYXJnaW5SaWdodDogLThcbn0pO1xuY29uc3QgZGVmYXVsdEljb25NYXBwaW5nID0ge1xuICBzdWNjZXNzOiAvKiNfX1BVUkVfXyovX2pzeChTdWNjZXNzT3V0bGluZWRJY29uLCB7XG4gICAgZm9udFNpemU6IFwiaW5oZXJpdFwiXG4gIH0pLFxuICB3YXJuaW5nOiAvKiNfX1BVUkVfXyovX2pzeChSZXBvcnRQcm9ibGVtT3V0bGluZWRJY29uLCB7XG4gICAgZm9udFNpemU6IFwiaW5oZXJpdFwiXG4gIH0pLFxuICBlcnJvcjogLyojX19QVVJFX18qL19qc3goRXJyb3JPdXRsaW5lSWNvbiwge1xuICAgIGZvbnRTaXplOiBcImluaGVyaXRcIlxuICB9KSxcbiAgaW5mbzogLyojX19QVVJFX18qL19qc3goSW5mb091dGxpbmVkSWNvbiwge1xuICAgIGZvbnRTaXplOiBcImluaGVyaXRcIlxuICB9KVxufTtcbmNvbnN0IEFsZXJ0ID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gQWxlcnQoaW5Qcm9wcywgcmVmKSB7XG4gIGNvbnN0IHByb3BzID0gdXNlRGVmYXVsdFByb3BzKHtcbiAgICBwcm9wczogaW5Qcm9wcyxcbiAgICBuYW1lOiAnTXVpQWxlcnQnXG4gIH0pO1xuICBjb25zdCB7XG4gICAgICBhY3Rpb24sXG4gICAgICBjaGlsZHJlbixcbiAgICAgIGNsYXNzTmFtZSxcbiAgICAgIGNsb3NlVGV4dCA9ICdDbG9zZScsXG4gICAgICBjb2xvcixcbiAgICAgIGNvbXBvbmVudHMgPSB7fSxcbiAgICAgIGNvbXBvbmVudHNQcm9wcyA9IHt9LFxuICAgICAgaWNvbixcbiAgICAgIGljb25NYXBwaW5nID0gZGVmYXVsdEljb25NYXBwaW5nLFxuICAgICAgb25DbG9zZSxcbiAgICAgIHJvbGUgPSAnYWxlcnQnLFxuICAgICAgc2V2ZXJpdHkgPSAnc3VjY2VzcycsXG4gICAgICBzbG90UHJvcHMgPSB7fSxcbiAgICAgIHNsb3RzID0ge30sXG4gICAgICB2YXJpYW50ID0gJ3N0YW5kYXJkJ1xuICAgIH0gPSBwcm9wcyxcbiAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQpO1xuICBjb25zdCBvd25lclN0YXRlID0gX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgY29sb3IsXG4gICAgc2V2ZXJpdHksXG4gICAgdmFyaWFudCxcbiAgICBjb2xvclNldmVyaXR5OiBjb2xvciB8fCBzZXZlcml0eVxuICB9KTtcbiAgY29uc3QgY2xhc3NlcyA9IHVzZVV0aWxpdHlDbGFzc2VzKG93bmVyU3RhdGUpO1xuICBjb25zdCBleHRlcm5hbEZvcndhcmRlZFByb3BzID0ge1xuICAgIHNsb3RzOiBfZXh0ZW5kcyh7XG4gICAgICBjbG9zZUJ1dHRvbjogY29tcG9uZW50cy5DbG9zZUJ1dHRvbixcbiAgICAgIGNsb3NlSWNvbjogY29tcG9uZW50cy5DbG9zZUljb25cbiAgICB9LCBzbG90cyksXG4gICAgc2xvdFByb3BzOiBfZXh0ZW5kcyh7fSwgY29tcG9uZW50c1Byb3BzLCBzbG90UHJvcHMpXG4gIH07XG4gIGNvbnN0IFtDbG9zZUJ1dHRvblNsb3QsIGNsb3NlQnV0dG9uUHJvcHNdID0gdXNlU2xvdCgnY2xvc2VCdXR0b24nLCB7XG4gICAgZWxlbWVudFR5cGU6IEljb25CdXR0b24sXG4gICAgZXh0ZXJuYWxGb3J3YXJkZWRQcm9wcyxcbiAgICBvd25lclN0YXRlXG4gIH0pO1xuICBjb25zdCBbQ2xvc2VJY29uU2xvdCwgY2xvc2VJY29uUHJvcHNdID0gdXNlU2xvdCgnY2xvc2VJY29uJywge1xuICAgIGVsZW1lbnRUeXBlOiBDbG9zZUljb24sXG4gICAgZXh0ZXJuYWxGb3J3YXJkZWRQcm9wcyxcbiAgICBvd25lclN0YXRlXG4gIH0pO1xuICByZXR1cm4gLyojX19QVVJFX18qL19qc3hzKEFsZXJ0Um9vdCwgX2V4dGVuZHMoe1xuICAgIHJvbGU6IHJvbGUsXG4gICAgZWxldmF0aW9uOiAwLFxuICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGUsXG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lKSxcbiAgICByZWY6IHJlZlxuICB9LCBvdGhlciwge1xuICAgIGNoaWxkcmVuOiBbaWNvbiAhPT0gZmFsc2UgPyAvKiNfX1BVUkVfXyovX2pzeChBbGVydEljb24sIHtcbiAgICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGUsXG4gICAgICBjbGFzc05hbWU6IGNsYXNzZXMuaWNvbixcbiAgICAgIGNoaWxkcmVuOiBpY29uIHx8IGljb25NYXBwaW5nW3NldmVyaXR5XSB8fCBkZWZhdWx0SWNvbk1hcHBpbmdbc2V2ZXJpdHldXG4gICAgfSkgOiBudWxsLCAvKiNfX1BVUkVfXyovX2pzeChBbGVydE1lc3NhZ2UsIHtcbiAgICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGUsXG4gICAgICBjbGFzc05hbWU6IGNsYXNzZXMubWVzc2FnZSxcbiAgICAgIGNoaWxkcmVuOiBjaGlsZHJlblxuICAgIH0pLCBhY3Rpb24gIT0gbnVsbCA/IC8qI19fUFVSRV9fKi9fanN4KEFsZXJ0QWN0aW9uLCB7XG4gICAgICBvd25lclN0YXRlOiBvd25lclN0YXRlLFxuICAgICAgY2xhc3NOYW1lOiBjbGFzc2VzLmFjdGlvbixcbiAgICAgIGNoaWxkcmVuOiBhY3Rpb25cbiAgICB9KSA6IG51bGwsIGFjdGlvbiA9PSBudWxsICYmIG9uQ2xvc2UgPyAvKiNfX1BVUkVfXyovX2pzeChBbGVydEFjdGlvbiwge1xuICAgICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZSxcbiAgICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5hY3Rpb24sXG4gICAgICBjaGlsZHJlbjogLyojX19QVVJFX18qL19qc3goQ2xvc2VCdXR0b25TbG90LCBfZXh0ZW5kcyh7XG4gICAgICAgIHNpemU6IFwic21hbGxcIixcbiAgICAgICAgXCJhcmlhLWxhYmVsXCI6IGNsb3NlVGV4dCxcbiAgICAgICAgdGl0bGU6IGNsb3NlVGV4dCxcbiAgICAgICAgY29sb3I6IFwiaW5oZXJpdFwiLFxuICAgICAgICBvbkNsaWNrOiBvbkNsb3NlXG4gICAgICB9LCBjbG9zZUJ1dHRvblByb3BzLCB7XG4gICAgICAgIGNoaWxkcmVuOiAvKiNfX1BVUkVfXyovX2pzeChDbG9zZUljb25TbG90LCBfZXh0ZW5kcyh7XG4gICAgICAgICAgZm9udFNpemU6IFwic21hbGxcIlxuICAgICAgICB9LCBjbG9zZUljb25Qcm9wcykpXG4gICAgICB9KSlcbiAgICB9KSA6IG51bGxdXG4gIH0pKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gQWxlcnQucHJvcFR5cGVzIC8qIHJlbW92ZS1wcm9wdHlwZXMgKi8gPSB7XG4gIC8vIOKUjOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgCBXYXJuaW5nIOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUkFxuICAvLyDilIIgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zLiDilIJcbiAgLy8g4pSCICAgIFRvIHVwZGF0ZSB0aGVtLCBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBgcG5wbSBwcm9wdHlwZXNgLiAgICAg4pSCXG4gIC8vIOKUlOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUmFxuICAvKipcbiAgICogVGhlIGFjdGlvbiB0byBkaXNwbGF5LiBJdCByZW5kZXJzIGFmdGVyIHRoZSBtZXNzYWdlLCBhdCB0aGUgZW5kIG9mIHRoZSBhbGVydC5cbiAgICovXG4gIGFjdGlvbjogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIE92ZXJyaWRlIHRoZSBkZWZhdWx0IGxhYmVsIGZvciB0aGUgKmNsb3NlIHBvcHVwKiBpY29uIGJ1dHRvbi5cbiAgICpcbiAgICogRm9yIGxvY2FsaXphdGlvbiBwdXJwb3NlcywgeW91IGNhbiB1c2UgdGhlIHByb3ZpZGVkIFt0cmFuc2xhdGlvbnNdKC9tYXRlcmlhbC11aS9ndWlkZXMvbG9jYWxpemF0aW9uLykuXG4gICAqIEBkZWZhdWx0ICdDbG9zZSdcbiAgICovXG4gIGNsb3NlVGV4dDogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIFRoZSBjb2xvciBvZiB0aGUgY29tcG9uZW50LiBVbmxlc3MgcHJvdmlkZWQsIHRoZSB2YWx1ZSBpcyB0YWtlbiBmcm9tIHRoZSBgc2V2ZXJpdHlgIHByb3AuXG4gICAqIEl0IHN1cHBvcnRzIGJvdGggZGVmYXVsdCBhbmQgY3VzdG9tIHRoZW1lIGNvbG9ycywgd2hpY2ggY2FuIGJlIGFkZGVkIGFzIHNob3duIGluIHRoZVxuICAgKiBbcGFsZXR0ZSBjdXN0b21pemF0aW9uIGd1aWRlXShodHRwczovL211aS5jb20vbWF0ZXJpYWwtdWkvY3VzdG9taXphdGlvbi9wYWxldHRlLyNjdXN0b20tY29sb3JzKS5cbiAgICovXG4gIGNvbG9yOiBQcm9wVHlwZXMgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqLy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ2Vycm9yJywgJ2luZm8nLCAnc3VjY2VzcycsICd3YXJuaW5nJ10pLCBQcm9wVHlwZXMuc3RyaW5nXSksXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50cyB1c2VkIGZvciBlYWNoIHNsb3QgaW5zaWRlLlxuICAgKlxuICAgKiBAZGVwcmVjYXRlZCB1c2UgdGhlIGBzbG90c2AgcHJvcCBpbnN0ZWFkLiBUaGlzIHByb3Agd2lsbCBiZSByZW1vdmVkIGluIHY3LiBbSG93IHRvIG1pZ3JhdGVdKC9tYXRlcmlhbC11aS9taWdyYXRpb24vbWlncmF0aW5nLWZyb20tZGVwcmVjYXRlZC1hcGlzLykuXG4gICAqXG4gICAqIEBkZWZhdWx0IHt9XG4gICAqL1xuICBjb21wb25lbnRzOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIENsb3NlQnV0dG9uOiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG4gICAgQ2xvc2VJY29uOiBQcm9wVHlwZXMuZWxlbWVudFR5cGVcbiAgfSksXG4gIC8qKlxuICAgKiBUaGUgZXh0cmEgcHJvcHMgZm9yIHRoZSBzbG90IGNvbXBvbmVudHMuXG4gICAqIFlvdSBjYW4gb3ZlcnJpZGUgdGhlIGV4aXN0aW5nIHByb3BzIG9yIGFkZCBuZXcgb25lcy5cbiAgICpcbiAgICogQGRlcHJlY2F0ZWQgdXNlIHRoZSBgc2xvdFByb3BzYCBwcm9wIGluc3RlYWQuIFRoaXMgcHJvcCB3aWxsIGJlIHJlbW92ZWQgaW4gdjcuIFtIb3cgdG8gbWlncmF0ZV0oL21hdGVyaWFsLXVpL21pZ3JhdGlvbi9taWdyYXRpbmctZnJvbS1kZXByZWNhdGVkLWFwaXMvKS5cbiAgICpcbiAgICogQGRlZmF1bHQge31cbiAgICovXG4gIGNvbXBvbmVudHNQcm9wczogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBjbG9zZUJ1dHRvbjogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBjbG9zZUljb246IFByb3BUeXBlcy5vYmplY3RcbiAgfSksXG4gIC8qKlxuICAgKiBPdmVycmlkZSB0aGUgaWNvbiBkaXNwbGF5ZWQgYmVmb3JlIHRoZSBjaGlsZHJlbi5cbiAgICogVW5sZXNzIHByb3ZpZGVkLCB0aGUgaWNvbiBpcyBtYXBwZWQgdG8gdGhlIHZhbHVlIG9mIHRoZSBgc2V2ZXJpdHlgIHByb3AuXG4gICAqIFNldCB0byBgZmFsc2VgIHRvIHJlbW92ZSB0aGUgYGljb25gLlxuICAgKi9cbiAgaWNvbjogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IG1hcHMgdGhlIGBzZXZlcml0eWAgcHJvcCB0byBhIHJhbmdlIG9mIGRpZmZlcmVudCBpY29ucyxcbiAgICogZm9yIGluc3RhbmNlIHN1Y2Nlc3MgdG8gYDxTdWNjZXNzT3V0bGluZWQ+YC5cbiAgICogSWYgeW91IHdpc2ggdG8gY2hhbmdlIHRoaXMgbWFwcGluZywgeW91IGNhbiBwcm92aWRlIHlvdXIgb3duLlxuICAgKiBBbHRlcm5hdGl2ZWx5LCB5b3UgY2FuIHVzZSB0aGUgYGljb25gIHByb3AgdG8gb3ZlcnJpZGUgdGhlIGljb24gZGlzcGxheWVkLlxuICAgKi9cbiAgaWNvbk1hcHBpbmc6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgZXJyb3I6IFByb3BUeXBlcy5ub2RlLFxuICAgIGluZm86IFByb3BUeXBlcy5ub2RlLFxuICAgIHN1Y2Nlc3M6IFByb3BUeXBlcy5ub2RlLFxuICAgIHdhcm5pbmc6IFByb3BUeXBlcy5ub2RlXG4gIH0pLFxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgY29tcG9uZW50IHJlcXVlc3RzIHRvIGJlIGNsb3NlZC5cbiAgICogV2hlbiBwcm92aWRlZCBhbmQgbm8gYGFjdGlvbmAgcHJvcCBpcyBzZXQsIGEgY2xvc2UgaWNvbiBidXR0b24gaXMgZGlzcGxheWVkIHRoYXQgdHJpZ2dlcnMgdGhlIGNhbGxiYWNrIHdoZW4gY2xpY2tlZC5cbiAgICogQHBhcmFtIHtSZWFjdC5TeW50aGV0aWNFdmVudH0gZXZlbnQgVGhlIGV2ZW50IHNvdXJjZSBvZiB0aGUgY2FsbGJhY2suXG4gICAqL1xuICBvbkNsb3NlOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIFRoZSBBUklBIHJvbGUgYXR0cmlidXRlIG9mIHRoZSBlbGVtZW50LlxuICAgKiBAZGVmYXVsdCAnYWxlcnQnXG4gICAqL1xuICByb2xlOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogVGhlIHNldmVyaXR5IG9mIHRoZSBhbGVydC4gVGhpcyBkZWZpbmVzIHRoZSBjb2xvciBhbmQgaWNvbiB1c2VkLlxuICAgKiBAZGVmYXVsdCAnc3VjY2VzcydcbiAgICovXG4gIHNldmVyaXR5OiBQcm9wVHlwZXMgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqLy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ2Vycm9yJywgJ2luZm8nLCAnc3VjY2VzcycsICd3YXJuaW5nJ10pLCBQcm9wVHlwZXMuc3RyaW5nXSksXG4gIC8qKlxuICAgKiBUaGUgcHJvcHMgdXNlZCBmb3IgZWFjaCBzbG90IGluc2lkZS5cbiAgICogQGRlZmF1bHQge31cbiAgICovXG4gIHNsb3RQcm9wczogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBjbG9zZUJ1dHRvbjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKSxcbiAgICBjbG9zZUljb246IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSlcbiAgfSksXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50cyB1c2VkIGZvciBlYWNoIHNsb3QgaW5zaWRlLlxuICAgKiBAZGVmYXVsdCB7fVxuICAgKi9cbiAgc2xvdHM6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgY2xvc2VCdXR0b246IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcbiAgICBjbG9zZUljb246IFByb3BUeXBlcy5lbGVtZW50VHlwZVxuICB9KSxcbiAgLyoqXG4gICAqIFRoZSBzeXN0ZW0gcHJvcCB0aGF0IGFsbG93cyBkZWZpbmluZyBzeXN0ZW0gb3ZlcnJpZGVzIGFzIHdlbGwgYXMgYWRkaXRpb25hbCBDU1Mgc3R5bGVzLlxuICAgKi9cbiAgc3g6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuYm9vbF0pKSwgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKSxcbiAgLyoqXG4gICAqIFRoZSB2YXJpYW50IHRvIHVzZS5cbiAgICogQGRlZmF1bHQgJ3N0YW5kYXJkJ1xuICAgKi9cbiAgdmFyaWFudDogUHJvcFR5cGVzIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi8ub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydmaWxsZWQnLCAnb3V0bGluZWQnLCAnc3RhbmRhcmQnXSksIFByb3BUeXBlcy5zdHJpbmddKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IEFsZXJ0OyIsImltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3Nlcyc7XG5pbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3MgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzcyc7XG5leHBvcnQgZnVuY3Rpb24gZ2V0VHlwb2dyYXBoeVV0aWxpdHlDbGFzcyhzbG90KSB7XG4gIHJldHVybiBnZW5lcmF0ZVV0aWxpdHlDbGFzcygnTXVpVHlwb2dyYXBoeScsIHNsb3QpO1xufVxuY29uc3QgdHlwb2dyYXBoeUNsYXNzZXMgPSBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzKCdNdWlUeXBvZ3JhcGh5JywgWydyb290JywgJ2gxJywgJ2gyJywgJ2gzJywgJ2g0JywgJ2g1JywgJ2g2JywgJ3N1YnRpdGxlMScsICdzdWJ0aXRsZTInLCAnYm9keTEnLCAnYm9keTInLCAnaW5oZXJpdCcsICdidXR0b24nLCAnY2FwdGlvbicsICdvdmVybGluZScsICdhbGlnbkxlZnQnLCAnYWxpZ25SaWdodCcsICdhbGlnbkNlbnRlcicsICdhbGlnbkp1c3RpZnknLCAnbm9XcmFwJywgJ2d1dHRlckJvdHRvbScsICdwYXJhZ3JhcGgnXSk7XG5leHBvcnQgZGVmYXVsdCB0eXBvZ3JhcGh5Q2xhc3NlczsiLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJhbGlnblwiLCBcImNsYXNzTmFtZVwiLCBcImNvbXBvbmVudFwiLCBcImd1dHRlckJvdHRvbVwiLCBcIm5vV3JhcFwiLCBcInBhcmFncmFwaFwiLCBcInZhcmlhbnRcIiwgXCJ2YXJpYW50TWFwcGluZ1wiXTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB7IGV4dGVuZFN4UHJvcCB9IGZyb20gJ0BtdWkvc3lzdGVtL3N0eWxlRnVuY3Rpb25TeCc7XG5pbXBvcnQgY29tcG9zZUNsYXNzZXMgZnJvbSAnQG11aS91dGlscy9jb21wb3NlQ2xhc3Nlcyc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJy4uL3N0eWxlcy9zdHlsZWQnO1xuaW1wb3J0IHsgdXNlRGVmYXVsdFByb3BzIH0gZnJvbSAnLi4vRGVmYXVsdFByb3BzUHJvdmlkZXInO1xuaW1wb3J0IGNhcGl0YWxpemUgZnJvbSAnLi4vdXRpbHMvY2FwaXRhbGl6ZSc7XG5pbXBvcnQgeyBnZXRUeXBvZ3JhcGh5VXRpbGl0eUNsYXNzIH0gZnJvbSAnLi90eXBvZ3JhcGh5Q2xhc3Nlcyc7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuY29uc3QgdXNlVXRpbGl0eUNsYXNzZXMgPSBvd25lclN0YXRlID0+IHtcbiAgY29uc3Qge1xuICAgIGFsaWduLFxuICAgIGd1dHRlckJvdHRvbSxcbiAgICBub1dyYXAsXG4gICAgcGFyYWdyYXBoLFxuICAgIHZhcmlhbnQsXG4gICAgY2xhc3Nlc1xuICB9ID0gb3duZXJTdGF0ZTtcbiAgY29uc3Qgc2xvdHMgPSB7XG4gICAgcm9vdDogWydyb290JywgdmFyaWFudCwgb3duZXJTdGF0ZS5hbGlnbiAhPT0gJ2luaGVyaXQnICYmIGBhbGlnbiR7Y2FwaXRhbGl6ZShhbGlnbil9YCwgZ3V0dGVyQm90dG9tICYmICdndXR0ZXJCb3R0b20nLCBub1dyYXAgJiYgJ25vV3JhcCcsIHBhcmFncmFwaCAmJiAncGFyYWdyYXBoJ11cbiAgfTtcbiAgcmV0dXJuIGNvbXBvc2VDbGFzc2VzKHNsb3RzLCBnZXRUeXBvZ3JhcGh5VXRpbGl0eUNsYXNzLCBjbGFzc2VzKTtcbn07XG5leHBvcnQgY29uc3QgVHlwb2dyYXBoeVJvb3QgPSBzdHlsZWQoJ3NwYW4nLCB7XG4gIG5hbWU6ICdNdWlUeXBvZ3JhcGh5JyxcbiAgc2xvdDogJ1Jvb3QnLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBvd25lclN0YXRlXG4gICAgfSA9IHByb3BzO1xuICAgIHJldHVybiBbc3R5bGVzLnJvb3QsIG93bmVyU3RhdGUudmFyaWFudCAmJiBzdHlsZXNbb3duZXJTdGF0ZS52YXJpYW50XSwgb3duZXJTdGF0ZS5hbGlnbiAhPT0gJ2luaGVyaXQnICYmIHN0eWxlc1tgYWxpZ24ke2NhcGl0YWxpemUob3duZXJTdGF0ZS5hbGlnbil9YF0sIG93bmVyU3RhdGUubm9XcmFwICYmIHN0eWxlcy5ub1dyYXAsIG93bmVyU3RhdGUuZ3V0dGVyQm90dG9tICYmIHN0eWxlcy5ndXR0ZXJCb3R0b20sIG93bmVyU3RhdGUucGFyYWdyYXBoICYmIHN0eWxlcy5wYXJhZ3JhcGhdO1xuICB9XG59KSgoe1xuICB0aGVtZSxcbiAgb3duZXJTdGF0ZVxufSkgPT4gX2V4dGVuZHMoe1xuICBtYXJnaW46IDBcbn0sIG93bmVyU3RhdGUudmFyaWFudCA9PT0gJ2luaGVyaXQnICYmIHtcbiAgLy8gU29tZSBlbGVtZW50cywgbGlrZSA8YnV0dG9uPiBvbiBDaHJvbWUgaGF2ZSBkZWZhdWx0IGZvbnQgdGhhdCBkb2Vzbid0IGluaGVyaXQsIHJlc2V0IHRoaXMuXG4gIGZvbnQ6ICdpbmhlcml0J1xufSwgb3duZXJTdGF0ZS52YXJpYW50ICE9PSAnaW5oZXJpdCcgJiYgdGhlbWUudHlwb2dyYXBoeVtvd25lclN0YXRlLnZhcmlhbnRdLCBvd25lclN0YXRlLmFsaWduICE9PSAnaW5oZXJpdCcgJiYge1xuICB0ZXh0QWxpZ246IG93bmVyU3RhdGUuYWxpZ25cbn0sIG93bmVyU3RhdGUubm9XcmFwICYmIHtcbiAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxuICB0ZXh0T3ZlcmZsb3c6ICdlbGxpcHNpcycsXG4gIHdoaXRlU3BhY2U6ICdub3dyYXAnXG59LCBvd25lclN0YXRlLmd1dHRlckJvdHRvbSAmJiB7XG4gIG1hcmdpbkJvdHRvbTogJzAuMzVlbSdcbn0sIG93bmVyU3RhdGUucGFyYWdyYXBoICYmIHtcbiAgbWFyZ2luQm90dG9tOiAxNlxufSkpO1xuY29uc3QgZGVmYXVsdFZhcmlhbnRNYXBwaW5nID0ge1xuICBoMTogJ2gxJyxcbiAgaDI6ICdoMicsXG4gIGgzOiAnaDMnLFxuICBoNDogJ2g0JyxcbiAgaDU6ICdoNScsXG4gIGg2OiAnaDYnLFxuICBzdWJ0aXRsZTE6ICdoNicsXG4gIHN1YnRpdGxlMjogJ2g2JyxcbiAgYm9keTE6ICdwJyxcbiAgYm9keTI6ICdwJyxcbiAgaW5oZXJpdDogJ3AnXG59O1xuXG4vLyBUT0RPIHY2OiBkZXByZWNhdGUgdGhlc2UgY29sb3IgdmFsdWVzIGluIHY1LnggYW5kIHJlbW92ZSB0aGUgdHJhbnNmb3JtYXRpb24gaW4gdjZcbmNvbnN0IGNvbG9yVHJhbnNmb3JtYXRpb25zID0ge1xuICBwcmltYXJ5OiAncHJpbWFyeS5tYWluJyxcbiAgdGV4dFByaW1hcnk6ICd0ZXh0LnByaW1hcnknLFxuICBzZWNvbmRhcnk6ICdzZWNvbmRhcnkubWFpbicsXG4gIHRleHRTZWNvbmRhcnk6ICd0ZXh0LnNlY29uZGFyeScsXG4gIGVycm9yOiAnZXJyb3IubWFpbidcbn07XG5jb25zdCB0cmFuc2Zvcm1EZXByZWNhdGVkQ29sb3JzID0gY29sb3IgPT4ge1xuICByZXR1cm4gY29sb3JUcmFuc2Zvcm1hdGlvbnNbY29sb3JdIHx8IGNvbG9yO1xufTtcbmNvbnN0IFR5cG9ncmFwaHkgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBUeXBvZ3JhcGh5KGluUHJvcHMsIHJlZikge1xuICBjb25zdCB0aGVtZVByb3BzID0gdXNlRGVmYXVsdFByb3BzKHtcbiAgICBwcm9wczogaW5Qcm9wcyxcbiAgICBuYW1lOiAnTXVpVHlwb2dyYXBoeSdcbiAgfSk7XG4gIGNvbnN0IGNvbG9yID0gdHJhbnNmb3JtRGVwcmVjYXRlZENvbG9ycyh0aGVtZVByb3BzLmNvbG9yKTtcbiAgY29uc3QgcHJvcHMgPSBleHRlbmRTeFByb3AoX2V4dGVuZHMoe30sIHRoZW1lUHJvcHMsIHtcbiAgICBjb2xvclxuICB9KSk7XG4gIGNvbnN0IHtcbiAgICAgIGFsaWduID0gJ2luaGVyaXQnLFxuICAgICAgY2xhc3NOYW1lLFxuICAgICAgY29tcG9uZW50LFxuICAgICAgZ3V0dGVyQm90dG9tID0gZmFsc2UsXG4gICAgICBub1dyYXAgPSBmYWxzZSxcbiAgICAgIHBhcmFncmFwaCA9IGZhbHNlLFxuICAgICAgdmFyaWFudCA9ICdib2R5MScsXG4gICAgICB2YXJpYW50TWFwcGluZyA9IGRlZmF1bHRWYXJpYW50TWFwcGluZ1xuICAgIH0gPSBwcm9wcyxcbiAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQpO1xuICBjb25zdCBvd25lclN0YXRlID0gX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgYWxpZ24sXG4gICAgY29sb3IsXG4gICAgY2xhc3NOYW1lLFxuICAgIGNvbXBvbmVudCxcbiAgICBndXR0ZXJCb3R0b20sXG4gICAgbm9XcmFwLFxuICAgIHBhcmFncmFwaCxcbiAgICB2YXJpYW50LFxuICAgIHZhcmlhbnRNYXBwaW5nXG4gIH0pO1xuICBjb25zdCBDb21wb25lbnQgPSBjb21wb25lbnQgfHwgKHBhcmFncmFwaCA/ICdwJyA6IHZhcmlhbnRNYXBwaW5nW3ZhcmlhbnRdIHx8IGRlZmF1bHRWYXJpYW50TWFwcGluZ1t2YXJpYW50XSkgfHwgJ3NwYW4nO1xuICBjb25zdCBjbGFzc2VzID0gdXNlVXRpbGl0eUNsYXNzZXMob3duZXJTdGF0ZSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeChUeXBvZ3JhcGh5Um9vdCwgX2V4dGVuZHMoe1xuICAgIGFzOiBDb21wb25lbnQsXG4gICAgcmVmOiByZWYsXG4gICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZSxcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWUpXG4gIH0sIG90aGVyKSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFR5cG9ncmFwaHkucHJvcFR5cGVzIC8qIHJlbW92ZS1wcm9wdHlwZXMgKi8gPSB7XG4gIC8vIOKUjOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgCBXYXJuaW5nIOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUkFxuICAvLyDilIIgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zLiDilIJcbiAgLy8g4pSCICAgIFRvIHVwZGF0ZSB0aGVtLCBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBgcG5wbSBwcm9wdHlwZXNgLiAgICAg4pSCXG4gIC8vIOKUlOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUmFxuICAvKipcbiAgICogU2V0IHRoZSB0ZXh0LWFsaWduIG9uIHRoZSBjb21wb25lbnQuXG4gICAqIEBkZWZhdWx0ICdpbmhlcml0J1xuICAgKi9cbiAgYWxpZ246IFByb3BUeXBlcy5vbmVPZihbJ2NlbnRlcicsICdpbmhlcml0JywgJ2p1c3RpZnknLCAnbGVmdCcsICdyaWdodCddKSxcbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgcm9vdCBub2RlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgSFRNTCBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKi9cbiAgY29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSB0ZXh0IHdpbGwgaGF2ZSBhIGJvdHRvbSBtYXJnaW4uXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBndXR0ZXJCb3R0b206IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgdGV4dCB3aWxsIG5vdCB3cmFwLCBidXQgaW5zdGVhZCB3aWxsIHRydW5jYXRlIHdpdGggYSB0ZXh0IG92ZXJmbG93IGVsbGlwc2lzLlxuICAgKlxuICAgKiBOb3RlIHRoYXQgdGV4dCBvdmVyZmxvdyBjYW4gb25seSBoYXBwZW4gd2l0aCBibG9jayBvciBpbmxpbmUtYmxvY2sgbGV2ZWwgZWxlbWVudHNcbiAgICogKHRoZSBlbGVtZW50IG5lZWRzIHRvIGhhdmUgYSB3aWR0aCBpbiBvcmRlciB0byBvdmVyZmxvdykuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBub1dyYXA6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgZWxlbWVudCB3aWxsIGJlIGEgcGFyYWdyYXBoIGVsZW1lbnQuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBwYXJhZ3JhcGg6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogVGhlIHN5c3RlbSBwcm9wIHRoYXQgYWxsb3dzIGRlZmluaW5nIHN5c3RlbSBvdmVycmlkZXMgYXMgd2VsbCBhcyBhZGRpdGlvbmFsIENTUyBzdHlsZXMuXG4gICAqL1xuICBzeDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5ib29sXSkpLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pLFxuICAvKipcbiAgICogQXBwbGllcyB0aGUgdGhlbWUgdHlwb2dyYXBoeSBzdHlsZXMuXG4gICAqIEBkZWZhdWx0ICdib2R5MSdcbiAgICovXG4gIHZhcmlhbnQ6IFByb3BUeXBlcyAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsnYm9keTEnLCAnYm9keTInLCAnYnV0dG9uJywgJ2NhcHRpb24nLCAnaDEnLCAnaDInLCAnaDMnLCAnaDQnLCAnaDUnLCAnaDYnLCAnaW5oZXJpdCcsICdvdmVybGluZScsICdzdWJ0aXRsZTEnLCAnc3VidGl0bGUyJ10pLCBQcm9wVHlwZXMuc3RyaW5nXSksXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IG1hcHMgdGhlIHZhcmlhbnQgcHJvcCB0byBhIHJhbmdlIG9mIGRpZmZlcmVudCBIVE1MIGVsZW1lbnQgdHlwZXMuXG4gICAqIEZvciBpbnN0YW5jZSwgc3VidGl0bGUxIHRvIGA8aDY+YC5cbiAgICogSWYgeW91IHdpc2ggdG8gY2hhbmdlIHRoYXQgbWFwcGluZywgeW91IGNhbiBwcm92aWRlIHlvdXIgb3duLlxuICAgKiBBbHRlcm5hdGl2ZWx5LCB5b3UgY2FuIHVzZSB0aGUgYGNvbXBvbmVudGAgcHJvcC5cbiAgICogQGRlZmF1bHQge1xuICAgKiAgIGgxOiAnaDEnLFxuICAgKiAgIGgyOiAnaDInLFxuICAgKiAgIGgzOiAnaDMnLFxuICAgKiAgIGg0OiAnaDQnLFxuICAgKiAgIGg1OiAnaDUnLFxuICAgKiAgIGg2OiAnaDYnLFxuICAgKiAgIHN1YnRpdGxlMTogJ2g2JyxcbiAgICogICBzdWJ0aXRsZTI6ICdoNicsXG4gICAqICAgYm9keTE6ICdwJyxcbiAgICogICBib2R5MjogJ3AnLFxuICAgKiAgIGluaGVyaXQ6ICdwJyxcbiAgICogfVxuICAgKi9cbiAgdmFyaWFudE1hcHBpbmc6IFByb3BUeXBlcyAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovLm9iamVjdFxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IFR5cG9ncmFwaHk7IiwiaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzc2VzJztcbmltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzJztcbmV4cG9ydCBmdW5jdGlvbiBnZXRBbGVydFRpdGxlVXRpbGl0eUNsYXNzKHNsb3QpIHtcbiAgcmV0dXJuIGdlbmVyYXRlVXRpbGl0eUNsYXNzKCdNdWlBbGVydFRpdGxlJywgc2xvdCk7XG59XG5jb25zdCBhbGVydFRpdGxlQ2xhc3NlcyA9IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMoJ011aUFsZXJ0VGl0bGUnLCBbJ3Jvb3QnXSk7XG5leHBvcnQgZGVmYXVsdCBhbGVydFRpdGxlQ2xhc3NlczsiLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJjbGFzc05hbWVcIl07XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgY29tcG9zZUNsYXNzZXMgZnJvbSAnQG11aS91dGlscy9jb21wb3NlQ2xhc3Nlcyc7XG5pbXBvcnQgeyBzdHlsZWQgfSBmcm9tICcuLi96ZXJvLXN0eWxlZCc7XG5pbXBvcnQgeyB1c2VEZWZhdWx0UHJvcHMgfSBmcm9tICcuLi9EZWZhdWx0UHJvcHNQcm92aWRlcic7XG5pbXBvcnQgVHlwb2dyYXBoeSBmcm9tICcuLi9UeXBvZ3JhcGh5JztcbmltcG9ydCB7IGdldEFsZXJ0VGl0bGVVdGlsaXR5Q2xhc3MgfSBmcm9tICcuL2FsZXJ0VGl0bGVDbGFzc2VzJztcbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5jb25zdCB1c2VVdGlsaXR5Q2xhc3NlcyA9IG93bmVyU3RhdGUgPT4ge1xuICBjb25zdCB7XG4gICAgY2xhc3Nlc1xuICB9ID0gb3duZXJTdGF0ZTtcbiAgY29uc3Qgc2xvdHMgPSB7XG4gICAgcm9vdDogWydyb290J11cbiAgfTtcbiAgcmV0dXJuIGNvbXBvc2VDbGFzc2VzKHNsb3RzLCBnZXRBbGVydFRpdGxlVXRpbGl0eUNsYXNzLCBjbGFzc2VzKTtcbn07XG5jb25zdCBBbGVydFRpdGxlUm9vdCA9IHN0eWxlZChUeXBvZ3JhcGh5LCB7XG4gIG5hbWU6ICdNdWlBbGVydFRpdGxlJyxcbiAgc2xvdDogJ1Jvb3QnLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHN0eWxlcy5yb290XG59KSgoe1xuICB0aGVtZVxufSkgPT4ge1xuICByZXR1cm4ge1xuICAgIGZvbnRXZWlnaHQ6IHRoZW1lLnR5cG9ncmFwaHkuZm9udFdlaWdodE1lZGl1bSxcbiAgICBtYXJnaW5Ub3A6IC0yXG4gIH07XG59KTtcbmNvbnN0IEFsZXJ0VGl0bGUgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBBbGVydFRpdGxlKGluUHJvcHMsIHJlZikge1xuICBjb25zdCBwcm9wcyA9IHVzZURlZmF1bHRQcm9wcyh7XG4gICAgcHJvcHM6IGluUHJvcHMsXG4gICAgbmFtZTogJ011aUFsZXJ0VGl0bGUnXG4gIH0pO1xuICBjb25zdCB7XG4gICAgICBjbGFzc05hbWVcbiAgICB9ID0gcHJvcHMsXG4gICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkKTtcbiAgY29uc3Qgb3duZXJTdGF0ZSA9IHByb3BzO1xuICBjb25zdCBjbGFzc2VzID0gdXNlVXRpbGl0eUNsYXNzZXMob3duZXJTdGF0ZSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeChBbGVydFRpdGxlUm9vdCwgX2V4dGVuZHMoe1xuICAgIGd1dHRlckJvdHRvbTogdHJ1ZSxcbiAgICBjb21wb25lbnQ6IFwiZGl2XCIsXG4gICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZSxcbiAgICByZWY6IHJlZixcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWUpXG4gIH0sIG90aGVyKSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IEFsZXJ0VGl0bGUucHJvcFR5cGVzIC8qIHJlbW92ZS1wcm9wdHlwZXMgKi8gPSB7XG4gIC8vIOKUjOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgCBXYXJuaW5nIOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUkFxuICAvLyDilIIgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zLiDilIJcbiAgLy8g4pSCICAgIFRvIHVwZGF0ZSB0aGVtLCBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBgcG5wbSBwcm9wdHlwZXNgLiAgICAg4pSCXG4gIC8vIOKUlOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUmFxuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBUaGUgc3lzdGVtIHByb3AgdGhhdCBhbGxvd3MgZGVmaW5pbmcgc3lzdGVtIG92ZXJyaWRlcyBhcyB3ZWxsIGFzIGFkZGl0aW9uYWwgQ1NTIHN0eWxlcy5cbiAgICovXG4gIHN4OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLmJvb2xdKSksIFByb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCBBbGVydFRpdGxlOyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuY29uc3QgdXNlUHJldmlvdXNQcm9wcyA9IHZhbHVlID0+IHtcbiAgY29uc3QgcmVmID0gUmVhY3QudXNlUmVmKHt9KTtcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICByZWYuY3VycmVudCA9IHZhbHVlO1xuICB9KTtcbiAgcmV0dXJuIHJlZi5jdXJyZW50O1xufTtcbmV4cG9ydCBkZWZhdWx0IHVzZVByZXZpb3VzUHJvcHM7IiwiJ3VzZSBjbGllbnQnO1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1jb25zdGFudC1jb25kaXRpb24gKi9cbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgdW5zdGFibGVfc2V0UmVmIGFzIHNldFJlZiwgdW5zdGFibGVfdXNlRXZlbnRDYWxsYmFjayBhcyB1c2VFdmVudENhbGxiYWNrLCB1bnN0YWJsZV91c2VDb250cm9sbGVkIGFzIHVzZUNvbnRyb2xsZWQsIHVuc3RhYmxlX3VzZUlkIGFzIHVzZUlkLCB1c2VQcmV2aW91c1Byb3BzIH0gZnJvbSAnQG11aS91dGlscyc7XG5cbi8vIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzk5MDkwNC9yZW1vdmUtYWNjZW50cy1kaWFjcml0aWNzLWluLWEtc3RyaW5nLWluLWphdmFzY3JpcHRcbi8vIEdpdmUgdXAgb24gSUUxMSBzdXBwb3J0IGZvciB0aGlzIGZlYXR1cmVcbmZ1bmN0aW9uIHN0cmlwRGlhY3JpdGljcyhzdHJpbmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBzdHJpbmcubm9ybWFsaXplICE9PSAndW5kZWZpbmVkJyA/IHN0cmluZy5ub3JtYWxpemUoJ05GRCcpLnJlcGxhY2UoL1tcXHUwMzAwLVxcdTAzNmZdL2csICcnKSA6IHN0cmluZztcbn1cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVGaWx0ZXJPcHRpb25zKGNvbmZpZyA9IHt9KSB7XG4gIGNvbnN0IHtcbiAgICBpZ25vcmVBY2NlbnRzID0gdHJ1ZSxcbiAgICBpZ25vcmVDYXNlID0gdHJ1ZSxcbiAgICBsaW1pdCxcbiAgICBtYXRjaEZyb20gPSAnYW55JyxcbiAgICBzdHJpbmdpZnksXG4gICAgdHJpbSA9IGZhbHNlXG4gIH0gPSBjb25maWc7XG4gIHJldHVybiAob3B0aW9ucywge1xuICAgIGlucHV0VmFsdWUsXG4gICAgZ2V0T3B0aW9uTGFiZWxcbiAgfSkgPT4ge1xuICAgIGxldCBpbnB1dCA9IHRyaW0gPyBpbnB1dFZhbHVlLnRyaW0oKSA6IGlucHV0VmFsdWU7XG4gICAgaWYgKGlnbm9yZUNhc2UpIHtcbiAgICAgIGlucHV0ID0gaW5wdXQudG9Mb3dlckNhc2UoKTtcbiAgICB9XG4gICAgaWYgKGlnbm9yZUFjY2VudHMpIHtcbiAgICAgIGlucHV0ID0gc3RyaXBEaWFjcml0aWNzKGlucHV0KTtcbiAgICB9XG4gICAgY29uc3QgZmlsdGVyZWRPcHRpb25zID0gIWlucHV0ID8gb3B0aW9ucyA6IG9wdGlvbnMuZmlsdGVyKG9wdGlvbiA9PiB7XG4gICAgICBsZXQgY2FuZGlkYXRlID0gKHN0cmluZ2lmeSB8fCBnZXRPcHRpb25MYWJlbCkob3B0aW9uKTtcbiAgICAgIGlmIChpZ25vcmVDYXNlKSB7XG4gICAgICAgIGNhbmRpZGF0ZSA9IGNhbmRpZGF0ZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgfVxuICAgICAgaWYgKGlnbm9yZUFjY2VudHMpIHtcbiAgICAgICAgY2FuZGlkYXRlID0gc3RyaXBEaWFjcml0aWNzKGNhbmRpZGF0ZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbWF0Y2hGcm9tID09PSAnc3RhcnQnID8gY2FuZGlkYXRlLmluZGV4T2YoaW5wdXQpID09PSAwIDogY2FuZGlkYXRlLmluZGV4T2YoaW5wdXQpID4gLTE7XG4gICAgfSk7XG4gICAgcmV0dXJuIHR5cGVvZiBsaW1pdCA9PT0gJ251bWJlcicgPyBmaWx0ZXJlZE9wdGlvbnMuc2xpY2UoMCwgbGltaXQpIDogZmlsdGVyZWRPcHRpb25zO1xuICB9O1xufVxuXG4vLyBUbyByZXBsYWNlIHdpdGggLmZpbmRJbmRleCgpIG9uY2Ugd2Ugc3RvcCBJRTExIHN1cHBvcnQuXG5mdW5jdGlvbiBmaW5kSW5kZXgoYXJyYXksIGNvbXApIHtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcnJheS5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGlmIChjb21wKGFycmF5W2ldKSkge1xuICAgICAgcmV0dXJuIGk7XG4gICAgfVxuICB9XG4gIHJldHVybiAtMTtcbn1cbmNvbnN0IGRlZmF1bHRGaWx0ZXJPcHRpb25zID0gY3JlYXRlRmlsdGVyT3B0aW9ucygpO1xuXG4vLyBOdW1iZXIgb2Ygb3B0aW9ucyB0byBqdW1wIGluIGxpc3QgYm94IHdoZW4gYFBhZ2UgVXBgIGFuZCBgUGFnZSBEb3duYCBrZXlzIGFyZSB1c2VkLlxuY29uc3QgcGFnZVNpemUgPSA1O1xuY29uc3QgZGVmYXVsdElzQWN0aXZlRWxlbWVudEluTGlzdGJveCA9IGxpc3Rib3hSZWYgPT4ge1xuICB2YXIgX2xpc3Rib3hSZWYkY3VycmVudCRwO1xuICByZXR1cm4gbGlzdGJveFJlZi5jdXJyZW50ICE9PSBudWxsICYmICgoX2xpc3Rib3hSZWYkY3VycmVudCRwID0gbGlzdGJveFJlZi5jdXJyZW50LnBhcmVudEVsZW1lbnQpID09IG51bGwgPyB2b2lkIDAgOiBfbGlzdGJveFJlZiRjdXJyZW50JHAuY29udGFpbnMoZG9jdW1lbnQuYWN0aXZlRWxlbWVudCkpO1xufTtcbmZ1bmN0aW9uIHVzZUF1dG9jb21wbGV0ZShwcm9wcykge1xuICBjb25zdCB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uYW1pbmctY29udmVudGlvblxuICAgIHVuc3RhYmxlX2lzQWN0aXZlRWxlbWVudEluTGlzdGJveCA9IGRlZmF1bHRJc0FjdGl2ZUVsZW1lbnRJbkxpc3Rib3gsXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uYW1pbmctY29udmVudGlvblxuICAgIHVuc3RhYmxlX2NsYXNzTmFtZVByZWZpeCA9ICdNdWknLFxuICAgIGF1dG9Db21wbGV0ZSA9IGZhbHNlLFxuICAgIGF1dG9IaWdobGlnaHQgPSBmYWxzZSxcbiAgICBhdXRvU2VsZWN0ID0gZmFsc2UsXG4gICAgYmx1ck9uU2VsZWN0ID0gZmFsc2UsXG4gICAgY2xlYXJPbkJsdXIgPSAhcHJvcHMuZnJlZVNvbG8sXG4gICAgY2xlYXJPbkVzY2FwZSA9IGZhbHNlLFxuICAgIGNvbXBvbmVudE5hbWUgPSAndXNlQXV0b2NvbXBsZXRlJyxcbiAgICBkZWZhdWx0VmFsdWUgPSBwcm9wcy5tdWx0aXBsZSA/IFtdIDogbnVsbCxcbiAgICBkaXNhYmxlQ2xlYXJhYmxlID0gZmFsc2UsXG4gICAgZGlzYWJsZUNsb3NlT25TZWxlY3QgPSBmYWxzZSxcbiAgICBkaXNhYmxlZDogZGlzYWJsZWRQcm9wLFxuICAgIGRpc2FibGVkSXRlbXNGb2N1c2FibGUgPSBmYWxzZSxcbiAgICBkaXNhYmxlTGlzdFdyYXAgPSBmYWxzZSxcbiAgICBmaWx0ZXJPcHRpb25zID0gZGVmYXVsdEZpbHRlck9wdGlvbnMsXG4gICAgZmlsdGVyU2VsZWN0ZWRPcHRpb25zID0gZmFsc2UsXG4gICAgZnJlZVNvbG8gPSBmYWxzZSxcbiAgICBnZXRPcHRpb25EaXNhYmxlZCxcbiAgICBnZXRPcHRpb25LZXksXG4gICAgZ2V0T3B0aW9uTGFiZWw6IGdldE9wdGlvbkxhYmVsUHJvcCA9IG9wdGlvbiA9PiB7XG4gICAgICB2YXIgX29wdGlvbiRsYWJlbDtcbiAgICAgIHJldHVybiAoX29wdGlvbiRsYWJlbCA9IG9wdGlvbi5sYWJlbCkgIT0gbnVsbCA/IF9vcHRpb24kbGFiZWwgOiBvcHRpb247XG4gICAgfSxcbiAgICBncm91cEJ5LFxuICAgIGhhbmRsZUhvbWVFbmRLZXlzID0gIXByb3BzLmZyZWVTb2xvLFxuICAgIGlkOiBpZFByb3AsXG4gICAgaW5jbHVkZUlucHV0SW5MaXN0ID0gZmFsc2UsXG4gICAgaW5wdXRWYWx1ZTogaW5wdXRWYWx1ZVByb3AsXG4gICAgaXNPcHRpb25FcXVhbFRvVmFsdWUgPSAob3B0aW9uLCB2YWx1ZSkgPT4gb3B0aW9uID09PSB2YWx1ZSxcbiAgICBtdWx0aXBsZSA9IGZhbHNlLFxuICAgIG9uQ2hhbmdlLFxuICAgIG9uQ2xvc2UsXG4gICAgb25IaWdobGlnaHRDaGFuZ2UsXG4gICAgb25JbnB1dENoYW5nZSxcbiAgICBvbk9wZW4sXG4gICAgb3Blbjogb3BlblByb3AsXG4gICAgb3Blbk9uRm9jdXMgPSBmYWxzZSxcbiAgICBvcHRpb25zLFxuICAgIHJlYWRPbmx5ID0gZmFsc2UsXG4gICAgc2VsZWN0T25Gb2N1cyA9ICFwcm9wcy5mcmVlU29sbyxcbiAgICB2YWx1ZTogdmFsdWVQcm9wXG4gIH0gPSBwcm9wcztcbiAgY29uc3QgaWQgPSB1c2VJZChpZFByb3ApO1xuICBsZXQgZ2V0T3B0aW9uTGFiZWwgPSBnZXRPcHRpb25MYWJlbFByb3A7XG4gIGdldE9wdGlvbkxhYmVsID0gb3B0aW9uID0+IHtcbiAgICBjb25zdCBvcHRpb25MYWJlbCA9IGdldE9wdGlvbkxhYmVsUHJvcChvcHRpb24pO1xuICAgIGlmICh0eXBlb2Ygb3B0aW9uTGFiZWwgIT09ICdzdHJpbmcnKSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBjb25zdCBlcnJvbmVvdXNSZXR1cm4gPSBvcHRpb25MYWJlbCA9PT0gdW5kZWZpbmVkID8gJ3VuZGVmaW5lZCcgOiBgJHt0eXBlb2Ygb3B0aW9uTGFiZWx9ICgke29wdGlvbkxhYmVsfSlgO1xuICAgICAgICBjb25zb2xlLmVycm9yKGBNVUk6IFRoZSBcXGBnZXRPcHRpb25MYWJlbFxcYCBtZXRob2Qgb2YgJHtjb21wb25lbnROYW1lfSByZXR1cm5lZCAke2Vycm9uZW91c1JldHVybn0gaW5zdGVhZCBvZiBhIHN0cmluZyBmb3IgJHtKU09OLnN0cmluZ2lmeShvcHRpb24pfS5gKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBTdHJpbmcob3B0aW9uTGFiZWwpO1xuICAgIH1cbiAgICByZXR1cm4gb3B0aW9uTGFiZWw7XG4gIH07XG4gIGNvbnN0IGlnbm9yZUZvY3VzID0gUmVhY3QudXNlUmVmKGZhbHNlKTtcbiAgY29uc3QgZmlyc3RGb2N1cyA9IFJlYWN0LnVzZVJlZih0cnVlKTtcbiAgY29uc3QgaW5wdXRSZWYgPSBSZWFjdC51c2VSZWYobnVsbCk7XG4gIGNvbnN0IGxpc3Rib3hSZWYgPSBSZWFjdC51c2VSZWYobnVsbCk7XG4gIGNvbnN0IFthbmNob3JFbCwgc2V0QW5jaG9yRWxdID0gUmVhY3QudXNlU3RhdGUobnVsbCk7XG4gIGNvbnN0IFtmb2N1c2VkVGFnLCBzZXRGb2N1c2VkVGFnXSA9IFJlYWN0LnVzZVN0YXRlKC0xKTtcbiAgY29uc3QgZGVmYXVsdEhpZ2hsaWdodGVkID0gYXV0b0hpZ2hsaWdodCA/IDAgOiAtMTtcbiAgY29uc3QgaGlnaGxpZ2h0ZWRJbmRleFJlZiA9IFJlYWN0LnVzZVJlZihkZWZhdWx0SGlnaGxpZ2h0ZWQpO1xuICBjb25zdCBbdmFsdWUsIHNldFZhbHVlU3RhdGVdID0gdXNlQ29udHJvbGxlZCh7XG4gICAgY29udHJvbGxlZDogdmFsdWVQcm9wLFxuICAgIGRlZmF1bHQ6IGRlZmF1bHRWYWx1ZSxcbiAgICBuYW1lOiBjb21wb25lbnROYW1lXG4gIH0pO1xuICBjb25zdCBbaW5wdXRWYWx1ZSwgc2V0SW5wdXRWYWx1ZVN0YXRlXSA9IHVzZUNvbnRyb2xsZWQoe1xuICAgIGNvbnRyb2xsZWQ6IGlucHV0VmFsdWVQcm9wLFxuICAgIGRlZmF1bHQ6ICcnLFxuICAgIG5hbWU6IGNvbXBvbmVudE5hbWUsXG4gICAgc3RhdGU6ICdpbnB1dFZhbHVlJ1xuICB9KTtcbiAgY29uc3QgW2ZvY3VzZWQsIHNldEZvY3VzZWRdID0gUmVhY3QudXNlU3RhdGUoZmFsc2UpO1xuICBjb25zdCByZXNldElucHV0VmFsdWUgPSBSZWFjdC51c2VDYWxsYmFjaygoZXZlbnQsIG5ld1ZhbHVlKSA9PiB7XG4gICAgLy8gcmV0YWluIGN1cnJlbnQgYGlucHV0VmFsdWVgIGlmIG5ldyBvcHRpb24gaXNuJ3Qgc2VsZWN0ZWQgYW5kIGBjbGVhck9uQmx1cmAgaXMgZmFsc2VcbiAgICAvLyBXaGVuIGBtdWx0aXBsZWAgaXMgZW5hYmxlZCwgYG5ld1ZhbHVlYCBpcyBhbiBhcnJheSBvZiBhbGwgc2VsZWN0ZWQgaXRlbXMgaW5jbHVkaW5nIHRoZSBuZXdseSBzZWxlY3RlZCBpdGVtXG4gICAgY29uc3QgaXNPcHRpb25TZWxlY3RlZCA9IG11bHRpcGxlID8gdmFsdWUubGVuZ3RoIDwgbmV3VmFsdWUubGVuZ3RoIDogbmV3VmFsdWUgIT09IG51bGw7XG4gICAgaWYgKCFpc09wdGlvblNlbGVjdGVkICYmICFjbGVhck9uQmx1cikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBsZXQgbmV3SW5wdXRWYWx1ZTtcbiAgICBpZiAobXVsdGlwbGUpIHtcbiAgICAgIG5ld0lucHV0VmFsdWUgPSAnJztcbiAgICB9IGVsc2UgaWYgKG5ld1ZhbHVlID09IG51bGwpIHtcbiAgICAgIG5ld0lucHV0VmFsdWUgPSAnJztcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3Qgb3B0aW9uTGFiZWwgPSBnZXRPcHRpb25MYWJlbChuZXdWYWx1ZSk7XG4gICAgICBuZXdJbnB1dFZhbHVlID0gdHlwZW9mIG9wdGlvbkxhYmVsID09PSAnc3RyaW5nJyA/IG9wdGlvbkxhYmVsIDogJyc7XG4gICAgfVxuICAgIGlmIChpbnB1dFZhbHVlID09PSBuZXdJbnB1dFZhbHVlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHNldElucHV0VmFsdWVTdGF0ZShuZXdJbnB1dFZhbHVlKTtcbiAgICBpZiAob25JbnB1dENoYW5nZSkge1xuICAgICAgb25JbnB1dENoYW5nZShldmVudCwgbmV3SW5wdXRWYWx1ZSwgJ3Jlc2V0Jyk7XG4gICAgfVxuICB9LCBbZ2V0T3B0aW9uTGFiZWwsIGlucHV0VmFsdWUsIG11bHRpcGxlLCBvbklucHV0Q2hhbmdlLCBzZXRJbnB1dFZhbHVlU3RhdGUsIGNsZWFyT25CbHVyLCB2YWx1ZV0pO1xuICBjb25zdCBbb3Blbiwgc2V0T3BlblN0YXRlXSA9IHVzZUNvbnRyb2xsZWQoe1xuICAgIGNvbnRyb2xsZWQ6IG9wZW5Qcm9wLFxuICAgIGRlZmF1bHQ6IGZhbHNlLFxuICAgIG5hbWU6IGNvbXBvbmVudE5hbWUsXG4gICAgc3RhdGU6ICdvcGVuJ1xuICB9KTtcbiAgY29uc3QgW2lucHV0UHJpc3RpbmUsIHNldElucHV0UHJpc3RpbmVdID0gUmVhY3QudXNlU3RhdGUodHJ1ZSk7XG4gIGNvbnN0IGlucHV0VmFsdWVJc1NlbGVjdGVkVmFsdWUgPSAhbXVsdGlwbGUgJiYgdmFsdWUgIT0gbnVsbCAmJiBpbnB1dFZhbHVlID09PSBnZXRPcHRpb25MYWJlbCh2YWx1ZSk7XG4gIGNvbnN0IHBvcHVwT3BlbiA9IG9wZW4gJiYgIXJlYWRPbmx5O1xuICBjb25zdCBmaWx0ZXJlZE9wdGlvbnMgPSBwb3B1cE9wZW4gPyBmaWx0ZXJPcHRpb25zKG9wdGlvbnMuZmlsdGVyKG9wdGlvbiA9PiB7XG4gICAgaWYgKGZpbHRlclNlbGVjdGVkT3B0aW9ucyAmJiAobXVsdGlwbGUgPyB2YWx1ZSA6IFt2YWx1ZV0pLnNvbWUodmFsdWUyID0+IHZhbHVlMiAhPT0gbnVsbCAmJiBpc09wdGlvbkVxdWFsVG9WYWx1ZShvcHRpb24sIHZhbHVlMikpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9KSxcbiAgLy8gd2UgdXNlIHRoZSBlbXB0eSBzdHJpbmcgdG8gbWFuaXB1bGF0ZSBgZmlsdGVyT3B0aW9uc2AgdG8gbm90IGZpbHRlciBhbnkgb3B0aW9uc1xuICAvLyBpLmUuIHRoZSBmaWx0ZXIgcHJlZGljYXRlIGFsd2F5cyByZXR1cm5zIHRydWVcbiAge1xuICAgIGlucHV0VmFsdWU6IGlucHV0VmFsdWVJc1NlbGVjdGVkVmFsdWUgJiYgaW5wdXRQcmlzdGluZSA/ICcnIDogaW5wdXRWYWx1ZSxcbiAgICBnZXRPcHRpb25MYWJlbFxuICB9KSA6IFtdO1xuICBjb25zdCBwcmV2aW91c1Byb3BzID0gdXNlUHJldmlvdXNQcm9wcyh7XG4gICAgZmlsdGVyZWRPcHRpb25zLFxuICAgIHZhbHVlLFxuICAgIGlucHV0VmFsdWVcbiAgfSk7XG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgY29uc3QgdmFsdWVDaGFuZ2UgPSB2YWx1ZSAhPT0gcHJldmlvdXNQcm9wcy52YWx1ZTtcbiAgICBpZiAoZm9jdXNlZCAmJiAhdmFsdWVDaGFuZ2UpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBPbmx5IHJlc2V0IHRoZSBpbnB1dCdzIHZhbHVlIHdoZW4gZnJlZVNvbG8gaWYgdGhlIGNvbXBvbmVudCdzIHZhbHVlIGNoYW5nZXMuXG4gICAgaWYgKGZyZWVTb2xvICYmICF2YWx1ZUNoYW5nZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICByZXNldElucHV0VmFsdWUobnVsbCwgdmFsdWUpO1xuICB9LCBbdmFsdWUsIHJlc2V0SW5wdXRWYWx1ZSwgZm9jdXNlZCwgcHJldmlvdXNQcm9wcy52YWx1ZSwgZnJlZVNvbG9dKTtcbiAgY29uc3QgbGlzdGJveEF2YWlsYWJsZSA9IG9wZW4gJiYgZmlsdGVyZWRPcHRpb25zLmxlbmd0aCA+IDAgJiYgIXJlYWRPbmx5O1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmICh2YWx1ZSAhPT0gbnVsbCAmJiAhZnJlZVNvbG8gJiYgb3B0aW9ucy5sZW5ndGggPiAwKSB7XG4gICAgICBjb25zdCBtaXNzaW5nVmFsdWUgPSAobXVsdGlwbGUgPyB2YWx1ZSA6IFt2YWx1ZV0pLmZpbHRlcih2YWx1ZTIgPT4gIW9wdGlvbnMuc29tZShvcHRpb24gPT4gaXNPcHRpb25FcXVhbFRvVmFsdWUob3B0aW9uLCB2YWx1ZTIpKSk7XG4gICAgICBpZiAobWlzc2luZ1ZhbHVlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgY29uc29sZS53YXJuKFtgTVVJOiBUaGUgdmFsdWUgcHJvdmlkZWQgdG8gJHtjb21wb25lbnROYW1lfSBpcyBpbnZhbGlkLmAsIGBOb25lIG9mIHRoZSBvcHRpb25zIG1hdGNoIHdpdGggXFxgJHttaXNzaW5nVmFsdWUubGVuZ3RoID4gMSA/IEpTT04uc3RyaW5naWZ5KG1pc3NpbmdWYWx1ZSkgOiBKU09OLnN0cmluZ2lmeShtaXNzaW5nVmFsdWVbMF0pfVxcYC5gLCAnWW91IGNhbiB1c2UgdGhlIGBpc09wdGlvbkVxdWFsVG9WYWx1ZWAgcHJvcCB0byBjdXN0b21pemUgdGhlIGVxdWFsaXR5IHRlc3QuJ10uam9pbignXFxuJykpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBjb25zdCBmb2N1c1RhZyA9IHVzZUV2ZW50Q2FsbGJhY2sodGFnVG9Gb2N1cyA9PiB7XG4gICAgaWYgKHRhZ1RvRm9jdXMgPT09IC0xKSB7XG4gICAgICBpbnB1dFJlZi5jdXJyZW50LmZvY3VzKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFuY2hvckVsLnF1ZXJ5U2VsZWN0b3IoYFtkYXRhLXRhZy1pbmRleD1cIiR7dGFnVG9Gb2N1c31cIl1gKS5mb2N1cygpO1xuICAgIH1cbiAgfSk7XG5cbiAgLy8gRW5zdXJlIHRoZSBmb2N1c2VkVGFnIGlzIG5ldmVyIGluY29uc2lzdGVudFxuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChtdWx0aXBsZSAmJiBmb2N1c2VkVGFnID4gdmFsdWUubGVuZ3RoIC0gMSkge1xuICAgICAgc2V0Rm9jdXNlZFRhZygtMSk7XG4gICAgICBmb2N1c1RhZygtMSk7XG4gICAgfVxuICB9LCBbdmFsdWUsIG11bHRpcGxlLCBmb2N1c2VkVGFnLCBmb2N1c1RhZ10pO1xuICBmdW5jdGlvbiB2YWxpZE9wdGlvbkluZGV4KGluZGV4LCBkaXJlY3Rpb24pIHtcbiAgICBpZiAoIWxpc3Rib3hSZWYuY3VycmVudCB8fCBpbmRleCA8IDAgfHwgaW5kZXggPj0gZmlsdGVyZWRPcHRpb25zLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIC0xO1xuICAgIH1cbiAgICBsZXQgbmV4dEZvY3VzID0gaW5kZXg7XG4gICAgd2hpbGUgKHRydWUpIHtcbiAgICAgIGNvbnN0IG9wdGlvbiA9IGxpc3Rib3hSZWYuY3VycmVudC5xdWVyeVNlbGVjdG9yKGBbZGF0YS1vcHRpb24taW5kZXg9XCIke25leHRGb2N1c31cIl1gKTtcblxuICAgICAgLy8gU2FtZSBsb2dpYyBhcyBNZW51TGlzdC5qc1xuICAgICAgY29uc3QgbmV4dEZvY3VzRGlzYWJsZWQgPSBkaXNhYmxlZEl0ZW1zRm9jdXNhYmxlID8gZmFsc2UgOiAhb3B0aW9uIHx8IG9wdGlvbi5kaXNhYmxlZCB8fCBvcHRpb24uZ2V0QXR0cmlidXRlKCdhcmlhLWRpc2FibGVkJykgPT09ICd0cnVlJztcbiAgICAgIGlmIChvcHRpb24gJiYgb3B0aW9uLmhhc0F0dHJpYnV0ZSgndGFiaW5kZXgnKSAmJiAhbmV4dEZvY3VzRGlzYWJsZWQpIHtcbiAgICAgICAgLy8gVGhlIG5leHQgb3B0aW9uIGlzIGF2YWlsYWJsZVxuICAgICAgICByZXR1cm4gbmV4dEZvY3VzO1xuICAgICAgfVxuXG4gICAgICAvLyBUaGUgbmV4dCBvcHRpb24gaXMgZGlzYWJsZWQsIG1vdmUgdG8gdGhlIG5leHQgZWxlbWVudC5cbiAgICAgIC8vIHdpdGggbG9vcGVkIGluZGV4XG4gICAgICBpZiAoZGlyZWN0aW9uID09PSAnbmV4dCcpIHtcbiAgICAgICAgbmV4dEZvY3VzID0gKG5leHRGb2N1cyArIDEpICUgZmlsdGVyZWRPcHRpb25zLmxlbmd0aDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5leHRGb2N1cyA9IChuZXh0Rm9jdXMgLSAxICsgZmlsdGVyZWRPcHRpb25zLmxlbmd0aCkgJSBmaWx0ZXJlZE9wdGlvbnMubGVuZ3RoO1xuICAgICAgfVxuXG4gICAgICAvLyBXZSBlbmQgdXAgd2l0aCBpbml0aWFsIGluZGV4LCB0aGF0IG1lYW5zIHdlIGRvbid0IGhhdmUgYXZhaWxhYmxlIG9wdGlvbnMuXG4gICAgICAvLyBBbGwgb2YgdGhlbSBhcmUgZGlzYWJsZWRcbiAgICAgIGlmIChuZXh0Rm9jdXMgPT09IGluZGV4KSB7XG4gICAgICAgIHJldHVybiAtMTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgY29uc3Qgc2V0SGlnaGxpZ2h0ZWRJbmRleCA9IHVzZUV2ZW50Q2FsbGJhY2soKHtcbiAgICBldmVudCxcbiAgICBpbmRleCxcbiAgICByZWFzb24gPSAnYXV0bydcbiAgfSkgPT4ge1xuICAgIGhpZ2hsaWdodGVkSW5kZXhSZWYuY3VycmVudCA9IGluZGV4O1xuXG4gICAgLy8gZG9lcyB0aGUgaW5kZXggZXhpc3Q/XG4gICAgaWYgKGluZGV4ID09PSAtMSkge1xuICAgICAgaW5wdXRSZWYuY3VycmVudC5yZW1vdmVBdHRyaWJ1dGUoJ2FyaWEtYWN0aXZlZGVzY2VuZGFudCcpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpbnB1dFJlZi5jdXJyZW50LnNldEF0dHJpYnV0ZSgnYXJpYS1hY3RpdmVkZXNjZW5kYW50JywgYCR7aWR9LW9wdGlvbi0ke2luZGV4fWApO1xuICAgIH1cbiAgICBpZiAob25IaWdobGlnaHRDaGFuZ2UpIHtcbiAgICAgIG9uSGlnaGxpZ2h0Q2hhbmdlKGV2ZW50LCBpbmRleCA9PT0gLTEgPyBudWxsIDogZmlsdGVyZWRPcHRpb25zW2luZGV4XSwgcmVhc29uKTtcbiAgICB9XG4gICAgaWYgKCFsaXN0Ym94UmVmLmN1cnJlbnQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgcHJldiA9IGxpc3Rib3hSZWYuY3VycmVudC5xdWVyeVNlbGVjdG9yKGBbcm9sZT1cIm9wdGlvblwiXS4ke3Vuc3RhYmxlX2NsYXNzTmFtZVByZWZpeH0tZm9jdXNlZGApO1xuICAgIGlmIChwcmV2KSB7XG4gICAgICBwcmV2LmNsYXNzTGlzdC5yZW1vdmUoYCR7dW5zdGFibGVfY2xhc3NOYW1lUHJlZml4fS1mb2N1c2VkYCk7XG4gICAgICBwcmV2LmNsYXNzTGlzdC5yZW1vdmUoYCR7dW5zdGFibGVfY2xhc3NOYW1lUHJlZml4fS1mb2N1c1Zpc2libGVgKTtcbiAgICB9XG4gICAgbGV0IGxpc3Rib3hOb2RlID0gbGlzdGJveFJlZi5jdXJyZW50O1xuICAgIGlmIChsaXN0Ym94UmVmLmN1cnJlbnQuZ2V0QXR0cmlidXRlKCdyb2xlJykgIT09ICdsaXN0Ym94Jykge1xuICAgICAgbGlzdGJveE5vZGUgPSBsaXN0Ym94UmVmLmN1cnJlbnQucGFyZW50RWxlbWVudC5xdWVyeVNlbGVjdG9yKCdbcm9sZT1cImxpc3Rib3hcIl0nKTtcbiAgICB9XG5cbiAgICAvLyBcIk5vIHJlc3VsdHNcIlxuICAgIGlmICghbGlzdGJveE5vZGUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGluZGV4ID09PSAtMSkge1xuICAgICAgbGlzdGJveE5vZGUuc2Nyb2xsVG9wID0gMDtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3Qgb3B0aW9uID0gbGlzdGJveFJlZi5jdXJyZW50LnF1ZXJ5U2VsZWN0b3IoYFtkYXRhLW9wdGlvbi1pbmRleD1cIiR7aW5kZXh9XCJdYCk7XG4gICAgaWYgKCFvcHRpb24pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgb3B0aW9uLmNsYXNzTGlzdC5hZGQoYCR7dW5zdGFibGVfY2xhc3NOYW1lUHJlZml4fS1mb2N1c2VkYCk7XG4gICAgaWYgKHJlYXNvbiA9PT0gJ2tleWJvYXJkJykge1xuICAgICAgb3B0aW9uLmNsYXNzTGlzdC5hZGQoYCR7dW5zdGFibGVfY2xhc3NOYW1lUHJlZml4fS1mb2N1c1Zpc2libGVgKTtcbiAgICB9XG5cbiAgICAvLyBTY3JvbGwgYWN0aXZlIGRlc2NlbmRhbnQgaW50byB2aWV3LlxuICAgIC8vIExvZ2ljIGNvcGllZCBmcm9tIGh0dHBzOi8vd3d3LnczLm9yZy9XQUkvY29udGVudC1hc3NldHMvd2FpLWFyaWEtcHJhY3RpY2VzL3BhdHRlcm5zL2NvbWJvYm94L2V4YW1wbGVzL2pzL3NlbGVjdC1vbmx5LmpzXG4gICAgLy8gSW4gY2FzZSBvZiBtb3VzZSBjbGlja3MgYW5kIHRvdWNoIChpbiBtb2JpbGUgZGV2aWNlcykgd2UgYXZvaWQgc2Nyb2xsaW5nIHRoZSBlbGVtZW50IGFuZCBrZWVwIGJvdGggYmVoYXZpb3JzIHNhbWUuXG4gICAgLy8gQ29uc2lkZXIgdGhpcyBBUEkgaW5zdGVhZCBvbmNlIGl0IGhhcyBhIGJldHRlciBicm93c2VyIHN1cHBvcnQ6XG4gICAgLy8gLnNjcm9sbEludG9WaWV3KHsgc2Nyb2xsTW9kZTogJ2lmLW5lZWRlZCcsIGJsb2NrOiAnbmVhcmVzdCcgfSk7XG4gICAgaWYgKGxpc3Rib3hOb2RlLnNjcm9sbEhlaWdodCA+IGxpc3Rib3hOb2RlLmNsaWVudEhlaWdodCAmJiByZWFzb24gIT09ICdtb3VzZScgJiYgcmVhc29uICE9PSAndG91Y2gnKSB7XG4gICAgICBjb25zdCBlbGVtZW50ID0gb3B0aW9uO1xuICAgICAgY29uc3Qgc2Nyb2xsQm90dG9tID0gbGlzdGJveE5vZGUuY2xpZW50SGVpZ2h0ICsgbGlzdGJveE5vZGUuc2Nyb2xsVG9wO1xuICAgICAgY29uc3QgZWxlbWVudEJvdHRvbSA9IGVsZW1lbnQub2Zmc2V0VG9wICsgZWxlbWVudC5vZmZzZXRIZWlnaHQ7XG4gICAgICBpZiAoZWxlbWVudEJvdHRvbSA+IHNjcm9sbEJvdHRvbSkge1xuICAgICAgICBsaXN0Ym94Tm9kZS5zY3JvbGxUb3AgPSBlbGVtZW50Qm90dG9tIC0gbGlzdGJveE5vZGUuY2xpZW50SGVpZ2h0O1xuICAgICAgfSBlbHNlIGlmIChlbGVtZW50Lm9mZnNldFRvcCAtIGVsZW1lbnQub2Zmc2V0SGVpZ2h0ICogKGdyb3VwQnkgPyAxLjMgOiAwKSA8IGxpc3Rib3hOb2RlLnNjcm9sbFRvcCkge1xuICAgICAgICBsaXN0Ym94Tm9kZS5zY3JvbGxUb3AgPSBlbGVtZW50Lm9mZnNldFRvcCAtIGVsZW1lbnQub2Zmc2V0SGVpZ2h0ICogKGdyb3VwQnkgPyAxLjMgOiAwKTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuICBjb25zdCBjaGFuZ2VIaWdobGlnaHRlZEluZGV4ID0gdXNlRXZlbnRDYWxsYmFjaygoe1xuICAgIGV2ZW50LFxuICAgIGRpZmYsXG4gICAgZGlyZWN0aW9uID0gJ25leHQnLFxuICAgIHJlYXNvbiA9ICdhdXRvJ1xuICB9KSA9PiB7XG4gICAgaWYgKCFwb3B1cE9wZW4pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgZ2V0TmV4dEluZGV4ID0gKCkgPT4ge1xuICAgICAgY29uc3QgbWF4SW5kZXggPSBmaWx0ZXJlZE9wdGlvbnMubGVuZ3RoIC0gMTtcbiAgICAgIGlmIChkaWZmID09PSAncmVzZXQnKSB7XG4gICAgICAgIHJldHVybiBkZWZhdWx0SGlnaGxpZ2h0ZWQ7XG4gICAgICB9XG4gICAgICBpZiAoZGlmZiA9PT0gJ3N0YXJ0Jykge1xuICAgICAgICByZXR1cm4gMDtcbiAgICAgIH1cbiAgICAgIGlmIChkaWZmID09PSAnZW5kJykge1xuICAgICAgICByZXR1cm4gbWF4SW5kZXg7XG4gICAgICB9XG4gICAgICBjb25zdCBuZXdJbmRleCA9IGhpZ2hsaWdodGVkSW5kZXhSZWYuY3VycmVudCArIGRpZmY7XG4gICAgICBpZiAobmV3SW5kZXggPCAwKSB7XG4gICAgICAgIGlmIChuZXdJbmRleCA9PT0gLTEgJiYgaW5jbHVkZUlucHV0SW5MaXN0KSB7XG4gICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkaXNhYmxlTGlzdFdyYXAgJiYgaGlnaGxpZ2h0ZWRJbmRleFJlZi5jdXJyZW50ICE9PSAtMSB8fCBNYXRoLmFicyhkaWZmKSA+IDEpIHtcbiAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWF4SW5kZXg7XG4gICAgICB9XG4gICAgICBpZiAobmV3SW5kZXggPiBtYXhJbmRleCkge1xuICAgICAgICBpZiAobmV3SW5kZXggPT09IG1heEluZGV4ICsgMSAmJiBpbmNsdWRlSW5wdXRJbkxpc3QpIHtcbiAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRpc2FibGVMaXN0V3JhcCB8fCBNYXRoLmFicyhkaWZmKSA+IDEpIHtcbiAgICAgICAgICByZXR1cm4gbWF4SW5kZXg7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIDA7XG4gICAgICB9XG4gICAgICByZXR1cm4gbmV3SW5kZXg7XG4gICAgfTtcbiAgICBjb25zdCBuZXh0SW5kZXggPSB2YWxpZE9wdGlvbkluZGV4KGdldE5leHRJbmRleCgpLCBkaXJlY3Rpb24pO1xuICAgIHNldEhpZ2hsaWdodGVkSW5kZXgoe1xuICAgICAgaW5kZXg6IG5leHRJbmRleCxcbiAgICAgIHJlYXNvbixcbiAgICAgIGV2ZW50XG4gICAgfSk7XG5cbiAgICAvLyBTeW5jIHRoZSBjb250ZW50IG9mIHRoZSBpbnB1dCB3aXRoIHRoZSBoaWdobGlnaHRlZCBvcHRpb24uXG4gICAgaWYgKGF1dG9Db21wbGV0ZSAmJiBkaWZmICE9PSAncmVzZXQnKSB7XG4gICAgICBpZiAobmV4dEluZGV4ID09PSAtMSkge1xuICAgICAgICBpbnB1dFJlZi5jdXJyZW50LnZhbHVlID0gaW5wdXRWYWx1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbiA9IGdldE9wdGlvbkxhYmVsKGZpbHRlcmVkT3B0aW9uc1tuZXh0SW5kZXhdKTtcbiAgICAgICAgaW5wdXRSZWYuY3VycmVudC52YWx1ZSA9IG9wdGlvbjtcblxuICAgICAgICAvLyBUaGUgcG9ydGlvbiBvZiB0aGUgc2VsZWN0ZWQgc3VnZ2VzdGlvbiB0aGF0IGhhcyBub3QgYmVlbiB0eXBlZCBieSB0aGUgdXNlcixcbiAgICAgICAgLy8gYSBjb21wbGV0aW9uIHN0cmluZywgYXBwZWFycyBpbmxpbmUgYWZ0ZXIgdGhlIGlucHV0IGN1cnNvciBpbiB0aGUgdGV4dGJveC5cbiAgICAgICAgY29uc3QgaW5kZXggPSBvcHRpb24udG9Mb3dlckNhc2UoKS5pbmRleE9mKGlucHV0VmFsdWUudG9Mb3dlckNhc2UoKSk7XG4gICAgICAgIGlmIChpbmRleCA9PT0gMCAmJiBpbnB1dFZhbHVlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICBpbnB1dFJlZi5jdXJyZW50LnNldFNlbGVjdGlvblJhbmdlKGlucHV0VmFsdWUubGVuZ3RoLCBvcHRpb24ubGVuZ3RoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSk7XG4gIGNvbnN0IGdldFByZXZpb3VzSGlnaGxpZ2h0ZWRPcHRpb25JbmRleCA9ICgpID0+IHtcbiAgICBjb25zdCBpc1NhbWVWYWx1ZSA9ICh2YWx1ZTEsIHZhbHVlMikgPT4ge1xuICAgICAgY29uc3QgbGFiZWwxID0gdmFsdWUxID8gZ2V0T3B0aW9uTGFiZWwodmFsdWUxKSA6ICcnO1xuICAgICAgY29uc3QgbGFiZWwyID0gdmFsdWUyID8gZ2V0T3B0aW9uTGFiZWwodmFsdWUyKSA6ICcnO1xuICAgICAgcmV0dXJuIGxhYmVsMSA9PT0gbGFiZWwyO1xuICAgIH07XG4gICAgaWYgKGhpZ2hsaWdodGVkSW5kZXhSZWYuY3VycmVudCAhPT0gLTEgJiYgcHJldmlvdXNQcm9wcy5maWx0ZXJlZE9wdGlvbnMgJiYgcHJldmlvdXNQcm9wcy5maWx0ZXJlZE9wdGlvbnMubGVuZ3RoICE9PSBmaWx0ZXJlZE9wdGlvbnMubGVuZ3RoICYmIHByZXZpb3VzUHJvcHMuaW5wdXRWYWx1ZSA9PT0gaW5wdXRWYWx1ZSAmJiAobXVsdGlwbGUgPyB2YWx1ZS5sZW5ndGggPT09IHByZXZpb3VzUHJvcHMudmFsdWUubGVuZ3RoICYmIHByZXZpb3VzUHJvcHMudmFsdWUuZXZlcnkoKHZhbCwgaSkgPT4gZ2V0T3B0aW9uTGFiZWwodmFsdWVbaV0pID09PSBnZXRPcHRpb25MYWJlbCh2YWwpKSA6IGlzU2FtZVZhbHVlKHByZXZpb3VzUHJvcHMudmFsdWUsIHZhbHVlKSkpIHtcbiAgICAgIGNvbnN0IHByZXZpb3VzSGlnaGxpZ2h0ZWRPcHRpb24gPSBwcmV2aW91c1Byb3BzLmZpbHRlcmVkT3B0aW9uc1toaWdobGlnaHRlZEluZGV4UmVmLmN1cnJlbnRdO1xuICAgICAgaWYgKHByZXZpb3VzSGlnaGxpZ2h0ZWRPcHRpb24pIHtcbiAgICAgICAgcmV0dXJuIGZpbmRJbmRleChmaWx0ZXJlZE9wdGlvbnMsIG9wdGlvbiA9PiB7XG4gICAgICAgICAgcmV0dXJuIGdldE9wdGlvbkxhYmVsKG9wdGlvbikgPT09IGdldE9wdGlvbkxhYmVsKHByZXZpb3VzSGlnaGxpZ2h0ZWRPcHRpb24pO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIC0xO1xuICB9O1xuICBjb25zdCBzeW5jSGlnaGxpZ2h0ZWRJbmRleCA9IFJlYWN0LnVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICBpZiAoIXBvcHVwT3Blbikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIENoZWNrIGlmIHRoZSBwcmV2aW91c2x5IGhpZ2hsaWdodGVkIG9wdGlvbiBzdGlsbCBleGlzdHMgaW4gdGhlIHVwZGF0ZWQgZmlsdGVyZWQgb3B0aW9ucyBsaXN0IGFuZCBpZiB0aGUgdmFsdWUgYW5kIGlucHV0VmFsdWUgaGF2ZW4ndCBjaGFuZ2VkXG4gICAgLy8gSWYgaXQgZXhpc3RzIGFuZCB0aGUgdmFsdWUgYW5kIHRoZSBpbnB1dFZhbHVlIGhhdmVuJ3QgY2hhbmdlZCwganVzdCB1cGRhdGUgaXRzIGluZGV4LCBvdGhlcndpc2UgY29udGludWUgZXhlY3V0aW9uXG4gICAgY29uc3QgcHJldmlvdXNIaWdobGlnaHRlZE9wdGlvbkluZGV4ID0gZ2V0UHJldmlvdXNIaWdobGlnaHRlZE9wdGlvbkluZGV4KCk7XG4gICAgaWYgKHByZXZpb3VzSGlnaGxpZ2h0ZWRPcHRpb25JbmRleCAhPT0gLTEpIHtcbiAgICAgIGhpZ2hsaWdodGVkSW5kZXhSZWYuY3VycmVudCA9IHByZXZpb3VzSGlnaGxpZ2h0ZWRPcHRpb25JbmRleDtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgdmFsdWVJdGVtID0gbXVsdGlwbGUgPyB2YWx1ZVswXSA6IHZhbHVlO1xuXG4gICAgLy8gVGhlIHBvcHVwIGlzIGVtcHR5LCByZXNldFxuICAgIGlmIChmaWx0ZXJlZE9wdGlvbnMubGVuZ3RoID09PSAwIHx8IHZhbHVlSXRlbSA9PSBudWxsKSB7XG4gICAgICBjaGFuZ2VIaWdobGlnaHRlZEluZGV4KHtcbiAgICAgICAgZGlmZjogJ3Jlc2V0J1xuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICghbGlzdGJveFJlZi5jdXJyZW50KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gU3luY2hyb25pemUgdGhlIHZhbHVlIHdpdGggdGhlIGhpZ2hsaWdodGVkIGluZGV4XG4gICAgaWYgKHZhbHVlSXRlbSAhPSBudWxsKSB7XG4gICAgICBjb25zdCBjdXJyZW50T3B0aW9uID0gZmlsdGVyZWRPcHRpb25zW2hpZ2hsaWdodGVkSW5kZXhSZWYuY3VycmVudF07XG5cbiAgICAgIC8vIEtlZXAgdGhlIGN1cnJlbnQgaGlnaGxpZ2h0ZWQgaW5kZXggaWYgcG9zc2libGVcbiAgICAgIGlmIChtdWx0aXBsZSAmJiBjdXJyZW50T3B0aW9uICYmIGZpbmRJbmRleCh2YWx1ZSwgdmFsID0+IGlzT3B0aW9uRXF1YWxUb1ZhbHVlKGN1cnJlbnRPcHRpb24sIHZhbCkpICE9PSAtMSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBjb25zdCBpdGVtSW5kZXggPSBmaW5kSW5kZXgoZmlsdGVyZWRPcHRpb25zLCBvcHRpb25JdGVtID0+IGlzT3B0aW9uRXF1YWxUb1ZhbHVlKG9wdGlvbkl0ZW0sIHZhbHVlSXRlbSkpO1xuICAgICAgaWYgKGl0ZW1JbmRleCA9PT0gLTEpIHtcbiAgICAgICAgY2hhbmdlSGlnaGxpZ2h0ZWRJbmRleCh7XG4gICAgICAgICAgZGlmZjogJ3Jlc2V0J1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNldEhpZ2hsaWdodGVkSW5kZXgoe1xuICAgICAgICAgIGluZGV4OiBpdGVtSW5kZXhcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gUHJldmVudCB0aGUgaGlnaGxpZ2h0ZWQgaW5kZXggdG8gbGVhayBvdXRzaWRlIHRoZSBib3VuZGFyaWVzLlxuICAgIGlmIChoaWdobGlnaHRlZEluZGV4UmVmLmN1cnJlbnQgPj0gZmlsdGVyZWRPcHRpb25zLmxlbmd0aCAtIDEpIHtcbiAgICAgIHNldEhpZ2hsaWdodGVkSW5kZXgoe1xuICAgICAgICBpbmRleDogZmlsdGVyZWRPcHRpb25zLmxlbmd0aCAtIDFcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIFJlc3RvcmUgdGhlIGZvY3VzIHRvIHRoZSBwcmV2aW91cyBpbmRleC5cbiAgICBzZXRIaWdobGlnaHRlZEluZGV4KHtcbiAgICAgIGluZGV4OiBoaWdobGlnaHRlZEluZGV4UmVmLmN1cnJlbnRcbiAgICB9KTtcbiAgICAvLyBJZ25vcmUgZmlsdGVyZWRPcHRpb25zIChhbmQgb3B0aW9ucywgaXNPcHRpb25FcXVhbFRvVmFsdWUsIGdldE9wdGlvbkxhYmVsKSBub3QgdG8gYnJlYWsgdGhlIHNjcm9sbCBwb3NpdGlvblxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9leGhhdXN0aXZlLWRlcHNcbiAgfSwgW1xuICAvLyBPbmx5IHN5bmMgdGhlIGhpZ2hsaWdodGVkIGluZGV4IHdoZW4gdGhlIG9wdGlvbiBzd2l0Y2ggYmV0d2VlbiBlbXB0eSBhbmQgbm90XG4gIGZpbHRlcmVkT3B0aW9ucy5sZW5ndGgsXG4gIC8vIERvbid0IHN5bmMgdGhlIGhpZ2hsaWdodGVkIGluZGV4IHdpdGggdGhlIHZhbHVlIHdoZW4gbXVsdGlwbGVcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL2V4aGF1c3RpdmUtZGVwc1xuICBtdWx0aXBsZSA/IGZhbHNlIDogdmFsdWUsIGZpbHRlclNlbGVjdGVkT3B0aW9ucywgY2hhbmdlSGlnaGxpZ2h0ZWRJbmRleCwgc2V0SGlnaGxpZ2h0ZWRJbmRleCwgcG9wdXBPcGVuLCBpbnB1dFZhbHVlLCBtdWx0aXBsZV0pO1xuICBjb25zdCBoYW5kbGVMaXN0Ym94UmVmID0gdXNlRXZlbnRDYWxsYmFjayhub2RlID0+IHtcbiAgICBzZXRSZWYobGlzdGJveFJlZiwgbm9kZSk7XG4gICAgaWYgKCFub2RlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHN5bmNIaWdobGlnaHRlZEluZGV4KCk7XG4gIH0pO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9ydWxlcy1vZi1ob29rc1xuICAgIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICBpZiAoIWlucHV0UmVmLmN1cnJlbnQgfHwgaW5wdXRSZWYuY3VycmVudC5ub2RlTmFtZSAhPT0gJ0lOUFVUJykge1xuICAgICAgICBpZiAoaW5wdXRSZWYuY3VycmVudCAmJiBpbnB1dFJlZi5jdXJyZW50Lm5vZGVOYW1lID09PSAnVEVYVEFSRUEnKSB7XG4gICAgICAgICAgY29uc29sZS53YXJuKFtgQSB0ZXh0YXJlYSBlbGVtZW50IHdhcyBwcm92aWRlZCB0byAke2NvbXBvbmVudE5hbWV9IHdoZXJlIGlucHV0IHdhcyBleHBlY3RlZC5gLCBgVGhpcyBpcyBub3QgYSBzdXBwb3J0ZWQgc2NlbmFyaW8gYnV0IGl0IG1heSB3b3JrIHVuZGVyIGNlcnRhaW4gY29uZGl0aW9ucy5gLCBgQSB0ZXh0YXJlYSBrZXlib2FyZCBuYXZpZ2F0aW9uIG1heSBjb25mbGljdCB3aXRoIEF1dG9jb21wbGV0ZSBjb250cm9scyAoZm9yIGV4YW1wbGUgZW50ZXIgYW5kIGFycm93IGtleXMpLmAsIGBNYWtlIHN1cmUgdG8gdGVzdCBrZXlib2FyZCBuYXZpZ2F0aW9uIGFuZCBhZGQgY3VzdG9tIGV2ZW50IGhhbmRsZXJzIGlmIG5lY2Vzc2FyeS5gXS5qb2luKCdcXG4nKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihbYE1VSTogVW5hYmxlIHRvIGZpbmQgdGhlIGlucHV0IGVsZW1lbnQuIEl0IHdhcyByZXNvbHZlZCB0byAke2lucHV0UmVmLmN1cnJlbnR9IHdoaWxlIGFuIEhUTUxJbnB1dEVsZW1lbnQgd2FzIGV4cGVjdGVkLmAsIGBJbnN0ZWFkLCAke2NvbXBvbmVudE5hbWV9IGV4cGVjdHMgYW4gaW5wdXQgZWxlbWVudC5gLCAnJywgY29tcG9uZW50TmFtZSA9PT0gJ3VzZUF1dG9jb21wbGV0ZScgPyAnTWFrZSBzdXJlIHlvdSBoYXZlIGJvdW5kIGdldElucHV0UHJvcHMgY29ycmVjdGx5IGFuZCB0aGF0IHRoZSBub3JtYWwgcmVmL2VmZmVjdCByZXNvbHV0aW9ucyBvcmRlciBpcyBndWFyYW50ZWVkLicgOiAnTWFrZSBzdXJlIHlvdSBoYXZlIGN1c3RvbWl6ZWQgdGhlIGlucHV0IGNvbXBvbmVudCBjb3JyZWN0bHkuJ10uam9pbignXFxuJykpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwgW2NvbXBvbmVudE5hbWVdKTtcbiAgfVxuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIHN5bmNIaWdobGlnaHRlZEluZGV4KCk7XG4gIH0sIFtzeW5jSGlnaGxpZ2h0ZWRJbmRleF0pO1xuICBjb25zdCBoYW5kbGVPcGVuID0gZXZlbnQgPT4ge1xuICAgIGlmIChvcGVuKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHNldE9wZW5TdGF0ZSh0cnVlKTtcbiAgICBzZXRJbnB1dFByaXN0aW5lKHRydWUpO1xuICAgIGlmIChvbk9wZW4pIHtcbiAgICAgIG9uT3BlbihldmVudCk7XG4gICAgfVxuICB9O1xuICBjb25zdCBoYW5kbGVDbG9zZSA9IChldmVudCwgcmVhc29uKSA9PiB7XG4gICAgaWYgKCFvcGVuKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHNldE9wZW5TdGF0ZShmYWxzZSk7XG4gICAgaWYgKG9uQ2xvc2UpIHtcbiAgICAgIG9uQ2xvc2UoZXZlbnQsIHJlYXNvbik7XG4gICAgfVxuICB9O1xuICBjb25zdCBoYW5kbGVWYWx1ZSA9IChldmVudCwgbmV3VmFsdWUsIHJlYXNvbiwgZGV0YWlscykgPT4ge1xuICAgIGlmIChtdWx0aXBsZSkge1xuICAgICAgaWYgKHZhbHVlLmxlbmd0aCA9PT0gbmV3VmFsdWUubGVuZ3RoICYmIHZhbHVlLmV2ZXJ5KCh2YWwsIGkpID0+IHZhbCA9PT0gbmV3VmFsdWVbaV0pKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHZhbHVlID09PSBuZXdWYWx1ZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAob25DaGFuZ2UpIHtcbiAgICAgIG9uQ2hhbmdlKGV2ZW50LCBuZXdWYWx1ZSwgcmVhc29uLCBkZXRhaWxzKTtcbiAgICB9XG4gICAgc2V0VmFsdWVTdGF0ZShuZXdWYWx1ZSk7XG4gIH07XG4gIGNvbnN0IGlzVG91Y2ggPSBSZWFjdC51c2VSZWYoZmFsc2UpO1xuICBjb25zdCBzZWxlY3ROZXdWYWx1ZSA9IChldmVudCwgb3B0aW9uLCByZWFzb25Qcm9wID0gJ3NlbGVjdE9wdGlvbicsIG9yaWdpbiA9ICdvcHRpb25zJykgPT4ge1xuICAgIGxldCByZWFzb24gPSByZWFzb25Qcm9wO1xuICAgIGxldCBuZXdWYWx1ZSA9IG9wdGlvbjtcbiAgICBpZiAobXVsdGlwbGUpIHtcbiAgICAgIG5ld1ZhbHVlID0gQXJyYXkuaXNBcnJheSh2YWx1ZSkgPyB2YWx1ZS5zbGljZSgpIDogW107XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBjb25zdCBtYXRjaGVzID0gbmV3VmFsdWUuZmlsdGVyKHZhbCA9PiBpc09wdGlvbkVxdWFsVG9WYWx1ZShvcHRpb24sIHZhbCkpO1xuICAgICAgICBpZiAobWF0Y2hlcy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihbYE1VSTogVGhlIFxcYGlzT3B0aW9uRXF1YWxUb1ZhbHVlXFxgIG1ldGhvZCBvZiAke2NvbXBvbmVudE5hbWV9IGRvZXMgbm90IGhhbmRsZSB0aGUgYXJndW1lbnRzIGNvcnJlY3RseS5gLCBgVGhlIGNvbXBvbmVudCBleHBlY3RzIGEgc2luZ2xlIHZhbHVlIHRvIG1hdGNoIGEgZ2l2ZW4gb3B0aW9uIGJ1dCBmb3VuZCAke21hdGNoZXMubGVuZ3RofSBtYXRjaGVzLmBdLmpvaW4oJ1xcbicpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgY29uc3QgaXRlbUluZGV4ID0gZmluZEluZGV4KG5ld1ZhbHVlLCB2YWx1ZUl0ZW0gPT4gaXNPcHRpb25FcXVhbFRvVmFsdWUob3B0aW9uLCB2YWx1ZUl0ZW0pKTtcbiAgICAgIGlmIChpdGVtSW5kZXggPT09IC0xKSB7XG4gICAgICAgIG5ld1ZhbHVlLnB1c2gob3B0aW9uKTtcbiAgICAgIH0gZWxzZSBpZiAob3JpZ2luICE9PSAnZnJlZVNvbG8nKSB7XG4gICAgICAgIG5ld1ZhbHVlLnNwbGljZShpdGVtSW5kZXgsIDEpO1xuICAgICAgICByZWFzb24gPSAncmVtb3ZlT3B0aW9uJztcbiAgICAgIH1cbiAgICB9XG4gICAgcmVzZXRJbnB1dFZhbHVlKGV2ZW50LCBuZXdWYWx1ZSk7XG4gICAgaGFuZGxlVmFsdWUoZXZlbnQsIG5ld1ZhbHVlLCByZWFzb24sIHtcbiAgICAgIG9wdGlvblxuICAgIH0pO1xuICAgIGlmICghZGlzYWJsZUNsb3NlT25TZWxlY3QgJiYgKCFldmVudCB8fCAhZXZlbnQuY3RybEtleSAmJiAhZXZlbnQubWV0YUtleSkpIHtcbiAgICAgIGhhbmRsZUNsb3NlKGV2ZW50LCByZWFzb24pO1xuICAgIH1cbiAgICBpZiAoYmx1ck9uU2VsZWN0ID09PSB0cnVlIHx8IGJsdXJPblNlbGVjdCA9PT0gJ3RvdWNoJyAmJiBpc1RvdWNoLmN1cnJlbnQgfHwgYmx1ck9uU2VsZWN0ID09PSAnbW91c2UnICYmICFpc1RvdWNoLmN1cnJlbnQpIHtcbiAgICAgIGlucHV0UmVmLmN1cnJlbnQuYmx1cigpO1xuICAgIH1cbiAgfTtcbiAgZnVuY3Rpb24gdmFsaWRUYWdJbmRleChpbmRleCwgZGlyZWN0aW9uKSB7XG4gICAgaWYgKGluZGV4ID09PSAtMSkge1xuICAgICAgcmV0dXJuIC0xO1xuICAgIH1cbiAgICBsZXQgbmV4dEZvY3VzID0gaW5kZXg7XG4gICAgd2hpbGUgKHRydWUpIHtcbiAgICAgIC8vIE91dCBvZiByYW5nZVxuICAgICAgaWYgKGRpcmVjdGlvbiA9PT0gJ25leHQnICYmIG5leHRGb2N1cyA9PT0gdmFsdWUubGVuZ3RoIHx8IGRpcmVjdGlvbiA9PT0gJ3ByZXZpb3VzJyAmJiBuZXh0Rm9jdXMgPT09IC0xKSB7XG4gICAgICAgIHJldHVybiAtMTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IG9wdGlvbiA9IGFuY2hvckVsLnF1ZXJ5U2VsZWN0b3IoYFtkYXRhLXRhZy1pbmRleD1cIiR7bmV4dEZvY3VzfVwiXWApO1xuXG4gICAgICAvLyBTYW1lIGxvZ2ljIGFzIE1lbnVMaXN0LmpzXG4gICAgICBpZiAoIW9wdGlvbiB8fCAhb3B0aW9uLmhhc0F0dHJpYnV0ZSgndGFiaW5kZXgnKSB8fCBvcHRpb24uZGlzYWJsZWQgfHwgb3B0aW9uLmdldEF0dHJpYnV0ZSgnYXJpYS1kaXNhYmxlZCcpID09PSAndHJ1ZScpIHtcbiAgICAgICAgbmV4dEZvY3VzICs9IGRpcmVjdGlvbiA9PT0gJ25leHQnID8gMSA6IC0xO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIG5leHRGb2N1cztcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgY29uc3QgaGFuZGxlRm9jdXNUYWcgPSAoZXZlbnQsIGRpcmVjdGlvbikgPT4ge1xuICAgIGlmICghbXVsdGlwbGUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGlucHV0VmFsdWUgPT09ICcnKSB7XG4gICAgICBoYW5kbGVDbG9zZShldmVudCwgJ3RvZ2dsZUlucHV0Jyk7XG4gICAgfVxuICAgIGxldCBuZXh0VGFnID0gZm9jdXNlZFRhZztcbiAgICBpZiAoZm9jdXNlZFRhZyA9PT0gLTEpIHtcbiAgICAgIGlmIChpbnB1dFZhbHVlID09PSAnJyAmJiBkaXJlY3Rpb24gPT09ICdwcmV2aW91cycpIHtcbiAgICAgICAgbmV4dFRhZyA9IHZhbHVlLmxlbmd0aCAtIDE7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIG5leHRUYWcgKz0gZGlyZWN0aW9uID09PSAnbmV4dCcgPyAxIDogLTE7XG4gICAgICBpZiAobmV4dFRhZyA8IDApIHtcbiAgICAgICAgbmV4dFRhZyA9IDA7XG4gICAgICB9XG4gICAgICBpZiAobmV4dFRhZyA9PT0gdmFsdWUubGVuZ3RoKSB7XG4gICAgICAgIG5leHRUYWcgPSAtMTtcbiAgICAgIH1cbiAgICB9XG4gICAgbmV4dFRhZyA9IHZhbGlkVGFnSW5kZXgobmV4dFRhZywgZGlyZWN0aW9uKTtcbiAgICBzZXRGb2N1c2VkVGFnKG5leHRUYWcpO1xuICAgIGZvY3VzVGFnKG5leHRUYWcpO1xuICB9O1xuICBjb25zdCBoYW5kbGVDbGVhciA9IGV2ZW50ID0+IHtcbiAgICBpZ25vcmVGb2N1cy5jdXJyZW50ID0gdHJ1ZTtcbiAgICBzZXRJbnB1dFZhbHVlU3RhdGUoJycpO1xuICAgIGlmIChvbklucHV0Q2hhbmdlKSB7XG4gICAgICBvbklucHV0Q2hhbmdlKGV2ZW50LCAnJywgJ2NsZWFyJyk7XG4gICAgfVxuICAgIGhhbmRsZVZhbHVlKGV2ZW50LCBtdWx0aXBsZSA/IFtdIDogbnVsbCwgJ2NsZWFyJyk7XG4gIH07XG4gIGNvbnN0IGhhbmRsZUtleURvd24gPSBvdGhlciA9PiBldmVudCA9PiB7XG4gICAgaWYgKG90aGVyLm9uS2V5RG93bikge1xuICAgICAgb3RoZXIub25LZXlEb3duKGV2ZW50KTtcbiAgICB9XG4gICAgaWYgKGV2ZW50LmRlZmF1bHRNdWlQcmV2ZW50ZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGZvY3VzZWRUYWcgIT09IC0xICYmIFsnQXJyb3dMZWZ0JywgJ0Fycm93UmlnaHQnXS5pbmRleE9mKGV2ZW50LmtleSkgPT09IC0xKSB7XG4gICAgICBzZXRGb2N1c2VkVGFnKC0xKTtcbiAgICAgIGZvY3VzVGFnKC0xKTtcbiAgICB9XG5cbiAgICAvLyBXYWl0IHVudGlsIElNRSBpcyBzZXR0bGVkLlxuICAgIGlmIChldmVudC53aGljaCAhPT0gMjI5KSB7XG4gICAgICBzd2l0Y2ggKGV2ZW50LmtleSkge1xuICAgICAgICBjYXNlICdIb21lJzpcbiAgICAgICAgICBpZiAocG9wdXBPcGVuICYmIGhhbmRsZUhvbWVFbmRLZXlzKSB7XG4gICAgICAgICAgICAvLyBQcmV2ZW50IHNjcm9sbCBvZiB0aGUgcGFnZVxuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIGNoYW5nZUhpZ2hsaWdodGVkSW5kZXgoe1xuICAgICAgICAgICAgICBkaWZmOiAnc3RhcnQnLFxuICAgICAgICAgICAgICBkaXJlY3Rpb246ICduZXh0JyxcbiAgICAgICAgICAgICAgcmVhc29uOiAna2V5Ym9hcmQnLFxuICAgICAgICAgICAgICBldmVudFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdFbmQnOlxuICAgICAgICAgIGlmIChwb3B1cE9wZW4gJiYgaGFuZGxlSG9tZUVuZEtleXMpIHtcbiAgICAgICAgICAgIC8vIFByZXZlbnQgc2Nyb2xsIG9mIHRoZSBwYWdlXG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgY2hhbmdlSGlnaGxpZ2h0ZWRJbmRleCh7XG4gICAgICAgICAgICAgIGRpZmY6ICdlbmQnLFxuICAgICAgICAgICAgICBkaXJlY3Rpb246ICdwcmV2aW91cycsXG4gICAgICAgICAgICAgIHJlYXNvbjogJ2tleWJvYXJkJyxcbiAgICAgICAgICAgICAgZXZlbnRcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnUGFnZVVwJzpcbiAgICAgICAgICAvLyBQcmV2ZW50IHNjcm9sbCBvZiB0aGUgcGFnZVxuICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgY2hhbmdlSGlnaGxpZ2h0ZWRJbmRleCh7XG4gICAgICAgICAgICBkaWZmOiAtcGFnZVNpemUsXG4gICAgICAgICAgICBkaXJlY3Rpb246ICdwcmV2aW91cycsXG4gICAgICAgICAgICByZWFzb246ICdrZXlib2FyZCcsXG4gICAgICAgICAgICBldmVudFxuICAgICAgICAgIH0pO1xuICAgICAgICAgIGhhbmRsZU9wZW4oZXZlbnQpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdQYWdlRG93bic6XG4gICAgICAgICAgLy8gUHJldmVudCBzY3JvbGwgb2YgdGhlIHBhZ2VcbiAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIGNoYW5nZUhpZ2hsaWdodGVkSW5kZXgoe1xuICAgICAgICAgICAgZGlmZjogcGFnZVNpemUsXG4gICAgICAgICAgICBkaXJlY3Rpb246ICduZXh0JyxcbiAgICAgICAgICAgIHJlYXNvbjogJ2tleWJvYXJkJyxcbiAgICAgICAgICAgIGV2ZW50XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgaGFuZGxlT3BlbihldmVudCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ0Fycm93RG93bic6XG4gICAgICAgICAgLy8gUHJldmVudCBjdXJzb3IgbW92ZVxuICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgY2hhbmdlSGlnaGxpZ2h0ZWRJbmRleCh7XG4gICAgICAgICAgICBkaWZmOiAxLFxuICAgICAgICAgICAgZGlyZWN0aW9uOiAnbmV4dCcsXG4gICAgICAgICAgICByZWFzb246ICdrZXlib2FyZCcsXG4gICAgICAgICAgICBldmVudFxuICAgICAgICAgIH0pO1xuICAgICAgICAgIGhhbmRsZU9wZW4oZXZlbnQpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdBcnJvd1VwJzpcbiAgICAgICAgICAvLyBQcmV2ZW50IGN1cnNvciBtb3ZlXG4gICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICBjaGFuZ2VIaWdobGlnaHRlZEluZGV4KHtcbiAgICAgICAgICAgIGRpZmY6IC0xLFxuICAgICAgICAgICAgZGlyZWN0aW9uOiAncHJldmlvdXMnLFxuICAgICAgICAgICAgcmVhc29uOiAna2V5Ym9hcmQnLFxuICAgICAgICAgICAgZXZlbnRcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBoYW5kbGVPcGVuKGV2ZW50KTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnQXJyb3dMZWZ0JzpcbiAgICAgICAgICBoYW5kbGVGb2N1c1RhZyhldmVudCwgJ3ByZXZpb3VzJyk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ0Fycm93UmlnaHQnOlxuICAgICAgICAgIGhhbmRsZUZvY3VzVGFnKGV2ZW50LCAnbmV4dCcpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdFbnRlcic6XG4gICAgICAgICAgaWYgKGhpZ2hsaWdodGVkSW5kZXhSZWYuY3VycmVudCAhPT0gLTEgJiYgcG9wdXBPcGVuKSB7XG4gICAgICAgICAgICBjb25zdCBvcHRpb24gPSBmaWx0ZXJlZE9wdGlvbnNbaGlnaGxpZ2h0ZWRJbmRleFJlZi5jdXJyZW50XTtcbiAgICAgICAgICAgIGNvbnN0IGRpc2FibGVkID0gZ2V0T3B0aW9uRGlzYWJsZWQgPyBnZXRPcHRpb25EaXNhYmxlZChvcHRpb24pIDogZmFsc2U7XG5cbiAgICAgICAgICAgIC8vIEF2b2lkIGVhcmx5IGZvcm0gdmFsaWRhdGlvbiwgbGV0IHRoZSBlbmQtdXNlcnMgY29udGludWUgZmlsbGluZyB0aGUgZm9ybS5cbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICBpZiAoZGlzYWJsZWQpIHtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc2VsZWN0TmV3VmFsdWUoZXZlbnQsIG9wdGlvbiwgJ3NlbGVjdE9wdGlvbicpO1xuXG4gICAgICAgICAgICAvLyBNb3ZlIHRoZSBzZWxlY3Rpb24gdG8gdGhlIGVuZC5cbiAgICAgICAgICAgIGlmIChhdXRvQ29tcGxldGUpIHtcbiAgICAgICAgICAgICAgaW5wdXRSZWYuY3VycmVudC5zZXRTZWxlY3Rpb25SYW5nZShpbnB1dFJlZi5jdXJyZW50LnZhbHVlLmxlbmd0aCwgaW5wdXRSZWYuY3VycmVudC52YWx1ZS5sZW5ndGgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSBpZiAoZnJlZVNvbG8gJiYgaW5wdXRWYWx1ZSAhPT0gJycgJiYgaW5wdXRWYWx1ZUlzU2VsZWN0ZWRWYWx1ZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIGlmIChtdWx0aXBsZSkge1xuICAgICAgICAgICAgICAvLyBBbGxvdyBwZW9wbGUgdG8gYWRkIG5ldyB2YWx1ZXMgYmVmb3JlIHRoZXkgc3VibWl0IHRoZSBmb3JtLlxuICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc2VsZWN0TmV3VmFsdWUoZXZlbnQsIGlucHV0VmFsdWUsICdjcmVhdGVPcHRpb24nLCAnZnJlZVNvbG8nKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ0VzY2FwZSc6XG4gICAgICAgICAgaWYgKHBvcHVwT3Blbikge1xuICAgICAgICAgICAgLy8gQXZvaWQgT3BlcmEgdG8gZXhpdCBmdWxsc2NyZWVuIG1vZGUuXG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgLy8gQXZvaWQgdGhlIE1vZGFsIHRvIGhhbmRsZSB0aGUgZXZlbnQuXG4gICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgIGhhbmRsZUNsb3NlKGV2ZW50LCAnZXNjYXBlJyk7XG4gICAgICAgICAgfSBlbHNlIGlmIChjbGVhck9uRXNjYXBlICYmIChpbnB1dFZhbHVlICE9PSAnJyB8fCBtdWx0aXBsZSAmJiB2YWx1ZS5sZW5ndGggPiAwKSkge1xuICAgICAgICAgICAgLy8gQXZvaWQgT3BlcmEgdG8gZXhpdCBmdWxsc2NyZWVuIG1vZGUuXG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgLy8gQXZvaWQgdGhlIE1vZGFsIHRvIGhhbmRsZSB0aGUgZXZlbnQuXG4gICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgIGhhbmRsZUNsZWFyKGV2ZW50KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ0JhY2tzcGFjZSc6XG4gICAgICAgICAgLy8gUmVtb3ZlIHRoZSB2YWx1ZSBvbiB0aGUgbGVmdCBvZiB0aGUgXCJjdXJzb3JcIlxuICAgICAgICAgIGlmIChtdWx0aXBsZSAmJiAhcmVhZE9ubHkgJiYgaW5wdXRWYWx1ZSA9PT0gJycgJiYgdmFsdWUubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgY29uc3QgaW5kZXggPSBmb2N1c2VkVGFnID09PSAtMSA/IHZhbHVlLmxlbmd0aCAtIDEgOiBmb2N1c2VkVGFnO1xuICAgICAgICAgICAgY29uc3QgbmV3VmFsdWUgPSB2YWx1ZS5zbGljZSgpO1xuICAgICAgICAgICAgbmV3VmFsdWUuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICAgIGhhbmRsZVZhbHVlKGV2ZW50LCBuZXdWYWx1ZSwgJ3JlbW92ZU9wdGlvbicsIHtcbiAgICAgICAgICAgICAgb3B0aW9uOiB2YWx1ZVtpbmRleF1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnRGVsZXRlJzpcbiAgICAgICAgICAvLyBSZW1vdmUgdGhlIHZhbHVlIG9uIHRoZSByaWdodCBvZiB0aGUgXCJjdXJzb3JcIlxuICAgICAgICAgIGlmIChtdWx0aXBsZSAmJiAhcmVhZE9ubHkgJiYgaW5wdXRWYWx1ZSA9PT0gJycgJiYgdmFsdWUubGVuZ3RoID4gMCAmJiBmb2N1c2VkVGFnICE9PSAtMSkge1xuICAgICAgICAgICAgY29uc3QgaW5kZXggPSBmb2N1c2VkVGFnO1xuICAgICAgICAgICAgY29uc3QgbmV3VmFsdWUgPSB2YWx1ZS5zbGljZSgpO1xuICAgICAgICAgICAgbmV3VmFsdWUuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICAgIGhhbmRsZVZhbHVlKGV2ZW50LCBuZXdWYWx1ZSwgJ3JlbW92ZU9wdGlvbicsIHtcbiAgICAgICAgICAgICAgb3B0aW9uOiB2YWx1ZVtpbmRleF1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgIH1cbiAgICB9XG4gIH07XG4gIGNvbnN0IGhhbmRsZUZvY3VzID0gZXZlbnQgPT4ge1xuICAgIHNldEZvY3VzZWQodHJ1ZSk7XG4gICAgaWYgKG9wZW5PbkZvY3VzICYmICFpZ25vcmVGb2N1cy5jdXJyZW50KSB7XG4gICAgICBoYW5kbGVPcGVuKGV2ZW50KTtcbiAgICB9XG4gIH07XG4gIGNvbnN0IGhhbmRsZUJsdXIgPSBldmVudCA9PiB7XG4gICAgLy8gSWdub3JlIHRoZSBldmVudCB3aGVuIHVzaW5nIHRoZSBzY3JvbGxiYXIgd2l0aCBJRTExXG4gICAgaWYgKHVuc3RhYmxlX2lzQWN0aXZlRWxlbWVudEluTGlzdGJveChsaXN0Ym94UmVmKSkge1xuICAgICAgaW5wdXRSZWYuY3VycmVudC5mb2N1cygpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBzZXRGb2N1c2VkKGZhbHNlKTtcbiAgICBmaXJzdEZvY3VzLmN1cnJlbnQgPSB0cnVlO1xuICAgIGlnbm9yZUZvY3VzLmN1cnJlbnQgPSBmYWxzZTtcbiAgICBpZiAoYXV0b1NlbGVjdCAmJiBoaWdobGlnaHRlZEluZGV4UmVmLmN1cnJlbnQgIT09IC0xICYmIHBvcHVwT3Blbikge1xuICAgICAgc2VsZWN0TmV3VmFsdWUoZXZlbnQsIGZpbHRlcmVkT3B0aW9uc1toaWdobGlnaHRlZEluZGV4UmVmLmN1cnJlbnRdLCAnYmx1cicpO1xuICAgIH0gZWxzZSBpZiAoYXV0b1NlbGVjdCAmJiBmcmVlU29sbyAmJiBpbnB1dFZhbHVlICE9PSAnJykge1xuICAgICAgc2VsZWN0TmV3VmFsdWUoZXZlbnQsIGlucHV0VmFsdWUsICdibHVyJywgJ2ZyZWVTb2xvJyk7XG4gICAgfSBlbHNlIGlmIChjbGVhck9uQmx1cikge1xuICAgICAgcmVzZXRJbnB1dFZhbHVlKGV2ZW50LCB2YWx1ZSk7XG4gICAgfVxuICAgIGhhbmRsZUNsb3NlKGV2ZW50LCAnYmx1cicpO1xuICB9O1xuICBjb25zdCBoYW5kbGVJbnB1dENoYW5nZSA9IGV2ZW50ID0+IHtcbiAgICBjb25zdCBuZXdWYWx1ZSA9IGV2ZW50LnRhcmdldC52YWx1ZTtcbiAgICBpZiAoaW5wdXRWYWx1ZSAhPT0gbmV3VmFsdWUpIHtcbiAgICAgIHNldElucHV0VmFsdWVTdGF0ZShuZXdWYWx1ZSk7XG4gICAgICBzZXRJbnB1dFByaXN0aW5lKGZhbHNlKTtcbiAgICAgIGlmIChvbklucHV0Q2hhbmdlKSB7XG4gICAgICAgIG9uSW5wdXRDaGFuZ2UoZXZlbnQsIG5ld1ZhbHVlLCAnaW5wdXQnKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKG5ld1ZhbHVlID09PSAnJykge1xuICAgICAgaWYgKCFkaXNhYmxlQ2xlYXJhYmxlICYmICFtdWx0aXBsZSkge1xuICAgICAgICBoYW5kbGVWYWx1ZShldmVudCwgbnVsbCwgJ2NsZWFyJyk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGhhbmRsZU9wZW4oZXZlbnQpO1xuICAgIH1cbiAgfTtcbiAgY29uc3QgaGFuZGxlT3B0aW9uTW91c2VNb3ZlID0gZXZlbnQgPT4ge1xuICAgIGNvbnN0IGluZGV4ID0gTnVtYmVyKGV2ZW50LmN1cnJlbnRUYXJnZXQuZ2V0QXR0cmlidXRlKCdkYXRhLW9wdGlvbi1pbmRleCcpKTtcbiAgICBpZiAoaGlnaGxpZ2h0ZWRJbmRleFJlZi5jdXJyZW50ICE9PSBpbmRleCkge1xuICAgICAgc2V0SGlnaGxpZ2h0ZWRJbmRleCh7XG4gICAgICAgIGV2ZW50LFxuICAgICAgICBpbmRleCxcbiAgICAgICAgcmVhc29uOiAnbW91c2UnXG4gICAgICB9KTtcbiAgICB9XG4gIH07XG4gIGNvbnN0IGhhbmRsZU9wdGlvblRvdWNoU3RhcnQgPSBldmVudCA9PiB7XG4gICAgc2V0SGlnaGxpZ2h0ZWRJbmRleCh7XG4gICAgICBldmVudCxcbiAgICAgIGluZGV4OiBOdW1iZXIoZXZlbnQuY3VycmVudFRhcmdldC5nZXRBdHRyaWJ1dGUoJ2RhdGEtb3B0aW9uLWluZGV4JykpLFxuICAgICAgcmVhc29uOiAndG91Y2gnXG4gICAgfSk7XG4gICAgaXNUb3VjaC5jdXJyZW50ID0gdHJ1ZTtcbiAgfTtcbiAgY29uc3QgaGFuZGxlT3B0aW9uQ2xpY2sgPSBldmVudCA9PiB7XG4gICAgY29uc3QgaW5kZXggPSBOdW1iZXIoZXZlbnQuY3VycmVudFRhcmdldC5nZXRBdHRyaWJ1dGUoJ2RhdGEtb3B0aW9uLWluZGV4JykpO1xuICAgIHNlbGVjdE5ld1ZhbHVlKGV2ZW50LCBmaWx0ZXJlZE9wdGlvbnNbaW5kZXhdLCAnc2VsZWN0T3B0aW9uJyk7XG4gICAgaXNUb3VjaC5jdXJyZW50ID0gZmFsc2U7XG4gIH07XG4gIGNvbnN0IGhhbmRsZVRhZ0RlbGV0ZSA9IGluZGV4ID0+IGV2ZW50ID0+IHtcbiAgICBjb25zdCBuZXdWYWx1ZSA9IHZhbHVlLnNsaWNlKCk7XG4gICAgbmV3VmFsdWUuc3BsaWNlKGluZGV4LCAxKTtcbiAgICBoYW5kbGVWYWx1ZShldmVudCwgbmV3VmFsdWUsICdyZW1vdmVPcHRpb24nLCB7XG4gICAgICBvcHRpb246IHZhbHVlW2luZGV4XVxuICAgIH0pO1xuICB9O1xuICBjb25zdCBoYW5kbGVQb3B1cEluZGljYXRvciA9IGV2ZW50ID0+IHtcbiAgICBpZiAob3Blbikge1xuICAgICAgaGFuZGxlQ2xvc2UoZXZlbnQsICd0b2dnbGVJbnB1dCcpO1xuICAgIH0gZWxzZSB7XG4gICAgICBoYW5kbGVPcGVuKGV2ZW50KTtcbiAgICB9XG4gIH07XG5cbiAgLy8gUHJldmVudCBpbnB1dCBibHVyIHdoZW4gaW50ZXJhY3Rpbmcgd2l0aCB0aGUgY29tYm9ib3hcbiAgY29uc3QgaGFuZGxlTW91c2VEb3duID0gZXZlbnQgPT4ge1xuICAgIC8vIFByZXZlbnQgZm9jdXNpbmcgdGhlIGlucHV0IGlmIGNsaWNrIGlzIGFueXdoZXJlIG91dHNpZGUgdGhlIEF1dG9jb21wbGV0ZVxuICAgIGlmICghZXZlbnQuY3VycmVudFRhcmdldC5jb250YWlucyhldmVudC50YXJnZXQpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChldmVudC50YXJnZXQuZ2V0QXR0cmlidXRlKCdpZCcpICE9PSBpZCkge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICB9XG4gIH07XG5cbiAgLy8gRm9jdXMgdGhlIGlucHV0IHdoZW4gaW50ZXJhY3Rpbmcgd2l0aCB0aGUgY29tYm9ib3hcbiAgY29uc3QgaGFuZGxlQ2xpY2sgPSBldmVudCA9PiB7XG4gICAgLy8gUHJldmVudCBmb2N1c2luZyB0aGUgaW5wdXQgaWYgY2xpY2sgaXMgYW55d2hlcmUgb3V0c2lkZSB0aGUgQXV0b2NvbXBsZXRlXG4gICAgaWYgKCFldmVudC5jdXJyZW50VGFyZ2V0LmNvbnRhaW5zKGV2ZW50LnRhcmdldCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaW5wdXRSZWYuY3VycmVudC5mb2N1cygpO1xuICAgIGlmIChzZWxlY3RPbkZvY3VzICYmIGZpcnN0Rm9jdXMuY3VycmVudCAmJiBpbnB1dFJlZi5jdXJyZW50LnNlbGVjdGlvbkVuZCAtIGlucHV0UmVmLmN1cnJlbnQuc2VsZWN0aW9uU3RhcnQgPT09IDApIHtcbiAgICAgIGlucHV0UmVmLmN1cnJlbnQuc2VsZWN0KCk7XG4gICAgfVxuICAgIGZpcnN0Rm9jdXMuY3VycmVudCA9IGZhbHNlO1xuICB9O1xuICBjb25zdCBoYW5kbGVJbnB1dE1vdXNlRG93biA9IGV2ZW50ID0+IHtcbiAgICBpZiAoIWRpc2FibGVkUHJvcCAmJiAoaW5wdXRWYWx1ZSA9PT0gJycgfHwgIW9wZW4pKSB7XG4gICAgICBoYW5kbGVQb3B1cEluZGljYXRvcihldmVudCk7XG4gICAgfVxuICB9O1xuICBsZXQgZGlydHkgPSBmcmVlU29sbyAmJiBpbnB1dFZhbHVlLmxlbmd0aCA+IDA7XG4gIGRpcnR5ID0gZGlydHkgfHwgKG11bHRpcGxlID8gdmFsdWUubGVuZ3RoID4gMCA6IHZhbHVlICE9PSBudWxsKTtcbiAgbGV0IGdyb3VwZWRPcHRpb25zID0gZmlsdGVyZWRPcHRpb25zO1xuICBpZiAoZ3JvdXBCeSkge1xuICAgIC8vIHVzZWQgdG8ga2VlcCB0cmFjayBvZiBrZXkgYW5kIGluZGV4ZXMgaW4gdGhlIHJlc3VsdCBhcnJheVxuICAgIGNvbnN0IGluZGV4QnkgPSBuZXcgTWFwKCk7XG4gICAgbGV0IHdhcm4gPSBmYWxzZTtcbiAgICBncm91cGVkT3B0aW9ucyA9IGZpbHRlcmVkT3B0aW9ucy5yZWR1Y2UoKGFjYywgb3B0aW9uLCBpbmRleCkgPT4ge1xuICAgICAgY29uc3QgZ3JvdXAgPSBncm91cEJ5KG9wdGlvbik7XG4gICAgICBpZiAoYWNjLmxlbmd0aCA+IDAgJiYgYWNjW2FjYy5sZW5ndGggLSAxXS5ncm91cCA9PT0gZ3JvdXApIHtcbiAgICAgICAgYWNjW2FjYy5sZW5ndGggLSAxXS5vcHRpb25zLnB1c2gob3B0aW9uKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgaWYgKGluZGV4QnkuZ2V0KGdyb3VwKSAmJiAhd2Fybikge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKGBNVUk6IFRoZSBvcHRpb25zIHByb3ZpZGVkIGNvbWJpbmVkIHdpdGggdGhlIFxcYGdyb3VwQnlcXGAgbWV0aG9kIG9mICR7Y29tcG9uZW50TmFtZX0gcmV0dXJucyBkdXBsaWNhdGVkIGhlYWRlcnMuYCwgJ1lvdSBjYW4gc29sdmUgdGhlIGlzc3VlIGJ5IHNvcnRpbmcgdGhlIG9wdGlvbnMgd2l0aCB0aGUgb3V0cHV0IG9mIGBncm91cEJ5YC4nKTtcbiAgICAgICAgICAgIHdhcm4gPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpbmRleEJ5LnNldChncm91cCwgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgYWNjLnB1c2goe1xuICAgICAgICAgIGtleTogaW5kZXgsXG4gICAgICAgICAgaW5kZXgsXG4gICAgICAgICAgZ3JvdXAsXG4gICAgICAgICAgb3B0aW9uczogW29wdGlvbl1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gYWNjO1xuICAgIH0sIFtdKTtcbiAgfVxuICBpZiAoZGlzYWJsZWRQcm9wICYmIGZvY3VzZWQpIHtcbiAgICBoYW5kbGVCbHVyKCk7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBnZXRSb290UHJvcHM6IChvdGhlciA9IHt9KSA9PiBfZXh0ZW5kcyh7XG4gICAgICAnYXJpYS1vd25zJzogbGlzdGJveEF2YWlsYWJsZSA/IGAke2lkfS1saXN0Ym94YCA6IG51bGxcbiAgICB9LCBvdGhlciwge1xuICAgICAgb25LZXlEb3duOiBoYW5kbGVLZXlEb3duKG90aGVyKSxcbiAgICAgIG9uTW91c2VEb3duOiBoYW5kbGVNb3VzZURvd24sXG4gICAgICBvbkNsaWNrOiBoYW5kbGVDbGlja1xuICAgIH0pLFxuICAgIGdldElucHV0TGFiZWxQcm9wczogKCkgPT4gKHtcbiAgICAgIGlkOiBgJHtpZH0tbGFiZWxgLFxuICAgICAgaHRtbEZvcjogaWRcbiAgICB9KSxcbiAgICBnZXRJbnB1dFByb3BzOiAoKSA9PiAoe1xuICAgICAgaWQsXG4gICAgICB2YWx1ZTogaW5wdXRWYWx1ZSxcbiAgICAgIG9uQmx1cjogaGFuZGxlQmx1cixcbiAgICAgIG9uRm9jdXM6IGhhbmRsZUZvY3VzLFxuICAgICAgb25DaGFuZ2U6IGhhbmRsZUlucHV0Q2hhbmdlLFxuICAgICAgb25Nb3VzZURvd246IGhhbmRsZUlucHV0TW91c2VEb3duLFxuICAgICAgLy8gaWYgb3BlbiB0aGVuIHRoaXMgaXMgaGFuZGxlZCBpbXBlcmF0aXZlbHkgc28gZG9uJ3QgbGV0IHJlYWN0IG92ZXJyaWRlXG4gICAgICAvLyBvbmx5IGhhdmUgYW4gb3BpbmlvbiBhYm91dCB0aGlzIHdoZW4gY2xvc2VkXG4gICAgICAnYXJpYS1hY3RpdmVkZXNjZW5kYW50JzogcG9wdXBPcGVuID8gJycgOiBudWxsLFxuICAgICAgJ2FyaWEtYXV0b2NvbXBsZXRlJzogYXV0b0NvbXBsZXRlID8gJ2JvdGgnIDogJ2xpc3QnLFxuICAgICAgJ2FyaWEtY29udHJvbHMnOiBsaXN0Ym94QXZhaWxhYmxlID8gYCR7aWR9LWxpc3Rib3hgIDogdW5kZWZpbmVkLFxuICAgICAgJ2FyaWEtZXhwYW5kZWQnOiBsaXN0Ym94QXZhaWxhYmxlLFxuICAgICAgLy8gRGlzYWJsZSBicm93c2VyJ3Mgc3VnZ2VzdGlvbiB0aGF0IG1pZ2h0IG92ZXJsYXAgd2l0aCB0aGUgcG9wdXAuXG4gICAgICAvLyBIYW5kbGUgYXV0b2NvbXBsZXRlIGJ1dCBub3QgYXV0b2ZpbGwuXG4gICAgICBhdXRvQ29tcGxldGU6ICdvZmYnLFxuICAgICAgcmVmOiBpbnB1dFJlZixcbiAgICAgIGF1dG9DYXBpdGFsaXplOiAnbm9uZScsXG4gICAgICBzcGVsbENoZWNrOiAnZmFsc2UnLFxuICAgICAgcm9sZTogJ2NvbWJvYm94JyxcbiAgICAgIGRpc2FibGVkOiBkaXNhYmxlZFByb3BcbiAgICB9KSxcbiAgICBnZXRDbGVhclByb3BzOiAoKSA9PiAoe1xuICAgICAgdGFiSW5kZXg6IC0xLFxuICAgICAgdHlwZTogJ2J1dHRvbicsXG4gICAgICBvbkNsaWNrOiBoYW5kbGVDbGVhclxuICAgIH0pLFxuICAgIGdldFBvcHVwSW5kaWNhdG9yUHJvcHM6ICgpID0+ICh7XG4gICAgICB0YWJJbmRleDogLTEsXG4gICAgICB0eXBlOiAnYnV0dG9uJyxcbiAgICAgIG9uQ2xpY2s6IGhhbmRsZVBvcHVwSW5kaWNhdG9yXG4gICAgfSksXG4gICAgZ2V0VGFnUHJvcHM6ICh7XG4gICAgICBpbmRleFxuICAgIH0pID0+IF9leHRlbmRzKHtcbiAgICAgIGtleTogaW5kZXgsXG4gICAgICAnZGF0YS10YWctaW5kZXgnOiBpbmRleCxcbiAgICAgIHRhYkluZGV4OiAtMVxuICAgIH0sICFyZWFkT25seSAmJiB7XG4gICAgICBvbkRlbGV0ZTogaGFuZGxlVGFnRGVsZXRlKGluZGV4KVxuICAgIH0pLFxuICAgIGdldExpc3Rib3hQcm9wczogKCkgPT4gKHtcbiAgICAgIHJvbGU6ICdsaXN0Ym94JyxcbiAgICAgIGlkOiBgJHtpZH0tbGlzdGJveGAsXG4gICAgICAnYXJpYS1sYWJlbGxlZGJ5JzogYCR7aWR9LWxhYmVsYCxcbiAgICAgIHJlZjogaGFuZGxlTGlzdGJveFJlZixcbiAgICAgIG9uTW91c2VEb3duOiBldmVudCA9PiB7XG4gICAgICAgIC8vIFByZXZlbnQgYmx1clxuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgfVxuICAgIH0pLFxuICAgIGdldE9wdGlvblByb3BzOiAoe1xuICAgICAgaW5kZXgsXG4gICAgICBvcHRpb25cbiAgICB9KSA9PiB7XG4gICAgICB2YXIgX2dldE9wdGlvbktleTtcbiAgICAgIGNvbnN0IHNlbGVjdGVkID0gKG11bHRpcGxlID8gdmFsdWUgOiBbdmFsdWVdKS5zb21lKHZhbHVlMiA9PiB2YWx1ZTIgIT0gbnVsbCAmJiBpc09wdGlvbkVxdWFsVG9WYWx1ZShvcHRpb24sIHZhbHVlMikpO1xuICAgICAgY29uc3QgZGlzYWJsZWQgPSBnZXRPcHRpb25EaXNhYmxlZCA/IGdldE9wdGlvbkRpc2FibGVkKG9wdGlvbikgOiBmYWxzZTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGtleTogKF9nZXRPcHRpb25LZXkgPSBnZXRPcHRpb25LZXkgPT0gbnVsbCA/IHZvaWQgMCA6IGdldE9wdGlvbktleShvcHRpb24pKSAhPSBudWxsID8gX2dldE9wdGlvbktleSA6IGdldE9wdGlvbkxhYmVsKG9wdGlvbiksXG4gICAgICAgIHRhYkluZGV4OiAtMSxcbiAgICAgICAgcm9sZTogJ29wdGlvbicsXG4gICAgICAgIGlkOiBgJHtpZH0tb3B0aW9uLSR7aW5kZXh9YCxcbiAgICAgICAgb25Nb3VzZU1vdmU6IGhhbmRsZU9wdGlvbk1vdXNlTW92ZSxcbiAgICAgICAgb25DbGljazogaGFuZGxlT3B0aW9uQ2xpY2ssXG4gICAgICAgIG9uVG91Y2hTdGFydDogaGFuZGxlT3B0aW9uVG91Y2hTdGFydCxcbiAgICAgICAgJ2RhdGEtb3B0aW9uLWluZGV4JzogaW5kZXgsXG4gICAgICAgICdhcmlhLWRpc2FibGVkJzogZGlzYWJsZWQsXG4gICAgICAgICdhcmlhLXNlbGVjdGVkJzogc2VsZWN0ZWRcbiAgICAgIH07XG4gICAgfSxcbiAgICBpZCxcbiAgICBpbnB1dFZhbHVlLFxuICAgIHZhbHVlLFxuICAgIGRpcnR5LFxuICAgIGV4cGFuZGVkOiBwb3B1cE9wZW4gJiYgYW5jaG9yRWwsXG4gICAgcG9wdXBPcGVuLFxuICAgIGZvY3VzZWQ6IGZvY3VzZWQgfHwgZm9jdXNlZFRhZyAhPT0gLTEsXG4gICAgYW5jaG9yRWwsXG4gICAgc2V0QW5jaG9yRWwsXG4gICAgZm9jdXNlZFRhZyxcbiAgICBncm91cGVkT3B0aW9uc1xuICB9O1xufVxuZXhwb3J0IGRlZmF1bHQgdXNlQXV0b2NvbXBsZXRlOyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFdpbmRvdyhub2RlKSB7XG4gIGlmIChub2RlID09IG51bGwpIHtcbiAgICByZXR1cm4gd2luZG93O1xuICB9XG5cbiAgaWYgKG5vZGUudG9TdHJpbmcoKSAhPT0gJ1tvYmplY3QgV2luZG93XScpIHtcbiAgICB2YXIgb3duZXJEb2N1bWVudCA9IG5vZGUub3duZXJEb2N1bWVudDtcbiAgICByZXR1cm4gb3duZXJEb2N1bWVudCA/IG93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXcgfHwgd2luZG93IDogd2luZG93O1xuICB9XG5cbiAgcmV0dXJuIG5vZGU7XG59IiwiaW1wb3J0IGdldFdpbmRvdyBmcm9tIFwiLi9nZXRXaW5kb3cuanNcIjtcblxuZnVuY3Rpb24gaXNFbGVtZW50KG5vZGUpIHtcbiAgdmFyIE93bkVsZW1lbnQgPSBnZXRXaW5kb3cobm9kZSkuRWxlbWVudDtcbiAgcmV0dXJuIG5vZGUgaW5zdGFuY2VvZiBPd25FbGVtZW50IHx8IG5vZGUgaW5zdGFuY2VvZiBFbGVtZW50O1xufVxuXG5mdW5jdGlvbiBpc0hUTUxFbGVtZW50KG5vZGUpIHtcbiAgdmFyIE93bkVsZW1lbnQgPSBnZXRXaW5kb3cobm9kZSkuSFRNTEVsZW1lbnQ7XG4gIHJldHVybiBub2RlIGluc3RhbmNlb2YgT3duRWxlbWVudCB8fCBub2RlIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQ7XG59XG5cbmZ1bmN0aW9uIGlzU2hhZG93Um9vdChub2RlKSB7XG4gIC8vIElFIDExIGhhcyBubyBTaGFkb3dSb290XG4gIGlmICh0eXBlb2YgU2hhZG93Um9vdCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIgT3duRWxlbWVudCA9IGdldFdpbmRvdyhub2RlKS5TaGFkb3dSb290O1xuICByZXR1cm4gbm9kZSBpbnN0YW5jZW9mIE93bkVsZW1lbnQgfHwgbm9kZSBpbnN0YW5jZW9mIFNoYWRvd1Jvb3Q7XG59XG5cbmV4cG9ydCB7IGlzRWxlbWVudCwgaXNIVE1MRWxlbWVudCwgaXNTaGFkb3dSb290IH07IiwiZXhwb3J0IHZhciBtYXggPSBNYXRoLm1heDtcbmV4cG9ydCB2YXIgbWluID0gTWF0aC5taW47XG5leHBvcnQgdmFyIHJvdW5kID0gTWF0aC5yb3VuZDsiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRVQVN0cmluZygpIHtcbiAgdmFyIHVhRGF0YSA9IG5hdmlnYXRvci51c2VyQWdlbnREYXRhO1xuXG4gIGlmICh1YURhdGEgIT0gbnVsbCAmJiB1YURhdGEuYnJhbmRzICYmIEFycmF5LmlzQXJyYXkodWFEYXRhLmJyYW5kcykpIHtcbiAgICByZXR1cm4gdWFEYXRhLmJyYW5kcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHJldHVybiBpdGVtLmJyYW5kICsgXCIvXCIgKyBpdGVtLnZlcnNpb247XG4gICAgfSkuam9pbignICcpO1xuICB9XG5cbiAgcmV0dXJuIG5hdmlnYXRvci51c2VyQWdlbnQ7XG59IiwiaW1wb3J0IGdldFVBU3RyaW5nIGZyb20gXCIuLi91dGlscy91c2VyQWdlbnQuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzTGF5b3V0Vmlld3BvcnQoKSB7XG4gIHJldHVybiAhL14oKD8hY2hyb21lfGFuZHJvaWQpLikqc2FmYXJpL2kudGVzdChnZXRVQVN0cmluZygpKTtcbn0iLCJpbXBvcnQgeyBpc0VsZW1lbnQsIGlzSFRNTEVsZW1lbnQgfSBmcm9tIFwiLi9pbnN0YW5jZU9mLmpzXCI7XG5pbXBvcnQgeyByb3VuZCB9IGZyb20gXCIuLi91dGlscy9tYXRoLmpzXCI7XG5pbXBvcnQgZ2V0V2luZG93IGZyb20gXCIuL2dldFdpbmRvdy5qc1wiO1xuaW1wb3J0IGlzTGF5b3V0Vmlld3BvcnQgZnJvbSBcIi4vaXNMYXlvdXRWaWV3cG9ydC5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KGVsZW1lbnQsIGluY2x1ZGVTY2FsZSwgaXNGaXhlZFN0cmF0ZWd5KSB7XG4gIGlmIChpbmNsdWRlU2NhbGUgPT09IHZvaWQgMCkge1xuICAgIGluY2x1ZGVTY2FsZSA9IGZhbHNlO1xuICB9XG5cbiAgaWYgKGlzRml4ZWRTdHJhdGVneSA9PT0gdm9pZCAwKSB7XG4gICAgaXNGaXhlZFN0cmF0ZWd5ID0gZmFsc2U7XG4gIH1cblxuICB2YXIgY2xpZW50UmVjdCA9IGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gIHZhciBzY2FsZVggPSAxO1xuICB2YXIgc2NhbGVZID0gMTtcblxuICBpZiAoaW5jbHVkZVNjYWxlICYmIGlzSFRNTEVsZW1lbnQoZWxlbWVudCkpIHtcbiAgICBzY2FsZVggPSBlbGVtZW50Lm9mZnNldFdpZHRoID4gMCA/IHJvdW5kKGNsaWVudFJlY3Qud2lkdGgpIC8gZWxlbWVudC5vZmZzZXRXaWR0aCB8fCAxIDogMTtcbiAgICBzY2FsZVkgPSBlbGVtZW50Lm9mZnNldEhlaWdodCA+IDAgPyByb3VuZChjbGllbnRSZWN0LmhlaWdodCkgLyBlbGVtZW50Lm9mZnNldEhlaWdodCB8fCAxIDogMTtcbiAgfVxuXG4gIHZhciBfcmVmID0gaXNFbGVtZW50KGVsZW1lbnQpID8gZ2V0V2luZG93KGVsZW1lbnQpIDogd2luZG93LFxuICAgICAgdmlzdWFsVmlld3BvcnQgPSBfcmVmLnZpc3VhbFZpZXdwb3J0O1xuXG4gIHZhciBhZGRWaXN1YWxPZmZzZXRzID0gIWlzTGF5b3V0Vmlld3BvcnQoKSAmJiBpc0ZpeGVkU3RyYXRlZ3k7XG4gIHZhciB4ID0gKGNsaWVudFJlY3QubGVmdCArIChhZGRWaXN1YWxPZmZzZXRzICYmIHZpc3VhbFZpZXdwb3J0ID8gdmlzdWFsVmlld3BvcnQub2Zmc2V0TGVmdCA6IDApKSAvIHNjYWxlWDtcbiAgdmFyIHkgPSAoY2xpZW50UmVjdC50b3AgKyAoYWRkVmlzdWFsT2Zmc2V0cyAmJiB2aXN1YWxWaWV3cG9ydCA/IHZpc3VhbFZpZXdwb3J0Lm9mZnNldFRvcCA6IDApKSAvIHNjYWxlWTtcbiAgdmFyIHdpZHRoID0gY2xpZW50UmVjdC53aWR0aCAvIHNjYWxlWDtcbiAgdmFyIGhlaWdodCA9IGNsaWVudFJlY3QuaGVpZ2h0IC8gc2NhbGVZO1xuICByZXR1cm4ge1xuICAgIHdpZHRoOiB3aWR0aCxcbiAgICBoZWlnaHQ6IGhlaWdodCxcbiAgICB0b3A6IHksXG4gICAgcmlnaHQ6IHggKyB3aWR0aCxcbiAgICBib3R0b206IHkgKyBoZWlnaHQsXG4gICAgbGVmdDogeCxcbiAgICB4OiB4LFxuICAgIHk6IHlcbiAgfTtcbn0iLCJpbXBvcnQgZ2V0V2luZG93IGZyb20gXCIuL2dldFdpbmRvdy5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0V2luZG93U2Nyb2xsKG5vZGUpIHtcbiAgdmFyIHdpbiA9IGdldFdpbmRvdyhub2RlKTtcbiAgdmFyIHNjcm9sbExlZnQgPSB3aW4ucGFnZVhPZmZzZXQ7XG4gIHZhciBzY3JvbGxUb3AgPSB3aW4ucGFnZVlPZmZzZXQ7XG4gIHJldHVybiB7XG4gICAgc2Nyb2xsTGVmdDogc2Nyb2xsTGVmdCxcbiAgICBzY3JvbGxUb3A6IHNjcm9sbFRvcFxuICB9O1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldE5vZGVOYW1lKGVsZW1lbnQpIHtcbiAgcmV0dXJuIGVsZW1lbnQgPyAoZWxlbWVudC5ub2RlTmFtZSB8fCAnJykudG9Mb3dlckNhc2UoKSA6IG51bGw7XG59IiwiaW1wb3J0IHsgaXNFbGVtZW50IH0gZnJvbSBcIi4vaW5zdGFuY2VPZi5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0RG9jdW1lbnRFbGVtZW50KGVsZW1lbnQpIHtcbiAgLy8gJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtcmV0dXJuXTogYXNzdW1lIGJvZHkgaXMgYWx3YXlzIGF2YWlsYWJsZVxuICByZXR1cm4gKChpc0VsZW1lbnQoZWxlbWVudCkgPyBlbGVtZW50Lm93bmVyRG9jdW1lbnQgOiAvLyAkRmxvd0ZpeE1lW3Byb3AtbWlzc2luZ11cbiAgZWxlbWVudC5kb2N1bWVudCkgfHwgd2luZG93LmRvY3VtZW50KS5kb2N1bWVudEVsZW1lbnQ7XG59IiwiaW1wb3J0IGdldEJvdW5kaW5nQ2xpZW50UmVjdCBmcm9tIFwiLi9nZXRCb3VuZGluZ0NsaWVudFJlY3QuanNcIjtcbmltcG9ydCBnZXREb2N1bWVudEVsZW1lbnQgZnJvbSBcIi4vZ2V0RG9jdW1lbnRFbGVtZW50LmpzXCI7XG5pbXBvcnQgZ2V0V2luZG93U2Nyb2xsIGZyb20gXCIuL2dldFdpbmRvd1Njcm9sbC5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0V2luZG93U2Nyb2xsQmFyWChlbGVtZW50KSB7XG4gIC8vIElmIDxodG1sPiBoYXMgYSBDU1Mgd2lkdGggZ3JlYXRlciB0aGFuIHRoZSB2aWV3cG9ydCwgdGhlbiB0aGlzIHdpbGwgYmVcbiAgLy8gaW5jb3JyZWN0IGZvciBSVEwuXG4gIC8vIFBvcHBlciAxIGlzIGJyb2tlbiBpbiB0aGlzIGNhc2UgYW5kIG5ldmVyIGhhZCBhIGJ1ZyByZXBvcnQgc28gbGV0J3MgYXNzdW1lXG4gIC8vIGl0J3Mgbm90IGFuIGlzc3VlLiBJIGRvbid0IHRoaW5rIGFueW9uZSBldmVyIHNwZWNpZmllcyB3aWR0aCBvbiA8aHRtbD5cbiAgLy8gYW55d2F5LlxuICAvLyBCcm93c2VycyB3aGVyZSB0aGUgbGVmdCBzY3JvbGxiYXIgZG9lc24ndCBjYXVzZSBhbiBpc3N1ZSByZXBvcnQgYDBgIGZvclxuICAvLyB0aGlzIChlLmcuIEVkZ2UgMjAxOSwgSUUxMSwgU2FmYXJpKVxuICByZXR1cm4gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KGdldERvY3VtZW50RWxlbWVudChlbGVtZW50KSkubGVmdCArIGdldFdpbmRvd1Njcm9sbChlbGVtZW50KS5zY3JvbGxMZWZ0O1xufSIsImltcG9ydCBnZXRXaW5kb3cgZnJvbSBcIi4vZ2V0V2luZG93LmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpIHtcbiAgcmV0dXJuIGdldFdpbmRvdyhlbGVtZW50KS5nZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpO1xufSIsImltcG9ydCBnZXRDb21wdXRlZFN0eWxlIGZyb20gXCIuL2dldENvbXB1dGVkU3R5bGUuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzU2Nyb2xsUGFyZW50KGVsZW1lbnQpIHtcbiAgLy8gRmlyZWZveCB3YW50cyB1cyB0byBjaGVjayBgLXhgIGFuZCBgLXlgIHZhcmlhdGlvbnMgYXMgd2VsbFxuICB2YXIgX2dldENvbXB1dGVkU3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpLFxuICAgICAgb3ZlcmZsb3cgPSBfZ2V0Q29tcHV0ZWRTdHlsZS5vdmVyZmxvdyxcbiAgICAgIG92ZXJmbG93WCA9IF9nZXRDb21wdXRlZFN0eWxlLm92ZXJmbG93WCxcbiAgICAgIG92ZXJmbG93WSA9IF9nZXRDb21wdXRlZFN0eWxlLm92ZXJmbG93WTtcblxuICByZXR1cm4gL2F1dG98c2Nyb2xsfG92ZXJsYXl8aGlkZGVuLy50ZXN0KG92ZXJmbG93ICsgb3ZlcmZsb3dZICsgb3ZlcmZsb3dYKTtcbn0iLCJpbXBvcnQgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IGZyb20gXCIuL2dldEJvdW5kaW5nQ2xpZW50UmVjdC5qc1wiO1xuaW1wb3J0IGdldE5vZGVTY3JvbGwgZnJvbSBcIi4vZ2V0Tm9kZVNjcm9sbC5qc1wiO1xuaW1wb3J0IGdldE5vZGVOYW1lIGZyb20gXCIuL2dldE5vZGVOYW1lLmpzXCI7XG5pbXBvcnQgeyBpc0hUTUxFbGVtZW50IH0gZnJvbSBcIi4vaW5zdGFuY2VPZi5qc1wiO1xuaW1wb3J0IGdldFdpbmRvd1Njcm9sbEJhclggZnJvbSBcIi4vZ2V0V2luZG93U2Nyb2xsQmFyWC5qc1wiO1xuaW1wb3J0IGdldERvY3VtZW50RWxlbWVudCBmcm9tIFwiLi9nZXREb2N1bWVudEVsZW1lbnQuanNcIjtcbmltcG9ydCBpc1Njcm9sbFBhcmVudCBmcm9tIFwiLi9pc1Njcm9sbFBhcmVudC5qc1wiO1xuaW1wb3J0IHsgcm91bmQgfSBmcm9tIFwiLi4vdXRpbHMvbWF0aC5qc1wiO1xuXG5mdW5jdGlvbiBpc0VsZW1lbnRTY2FsZWQoZWxlbWVudCkge1xuICB2YXIgcmVjdCA9IGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gIHZhciBzY2FsZVggPSByb3VuZChyZWN0LndpZHRoKSAvIGVsZW1lbnQub2Zmc2V0V2lkdGggfHwgMTtcbiAgdmFyIHNjYWxlWSA9IHJvdW5kKHJlY3QuaGVpZ2h0KSAvIGVsZW1lbnQub2Zmc2V0SGVpZ2h0IHx8IDE7XG4gIHJldHVybiBzY2FsZVggIT09IDEgfHwgc2NhbGVZICE9PSAxO1xufSAvLyBSZXR1cm5zIHRoZSBjb21wb3NpdGUgcmVjdCBvZiBhbiBlbGVtZW50IHJlbGF0aXZlIHRvIGl0cyBvZmZzZXRQYXJlbnQuXG4vLyBDb21wb3NpdGUgbWVhbnMgaXQgdGFrZXMgaW50byBhY2NvdW50IHRyYW5zZm9ybXMgYXMgd2VsbCBhcyBsYXlvdXQuXG5cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0Q29tcG9zaXRlUmVjdChlbGVtZW50T3JWaXJ0dWFsRWxlbWVudCwgb2Zmc2V0UGFyZW50LCBpc0ZpeGVkKSB7XG4gIGlmIChpc0ZpeGVkID09PSB2b2lkIDApIHtcbiAgICBpc0ZpeGVkID0gZmFsc2U7XG4gIH1cblxuICB2YXIgaXNPZmZzZXRQYXJlbnRBbkVsZW1lbnQgPSBpc0hUTUxFbGVtZW50KG9mZnNldFBhcmVudCk7XG4gIHZhciBvZmZzZXRQYXJlbnRJc1NjYWxlZCA9IGlzSFRNTEVsZW1lbnQob2Zmc2V0UGFyZW50KSAmJiBpc0VsZW1lbnRTY2FsZWQob2Zmc2V0UGFyZW50KTtcbiAgdmFyIGRvY3VtZW50RWxlbWVudCA9IGdldERvY3VtZW50RWxlbWVudChvZmZzZXRQYXJlbnQpO1xuICB2YXIgcmVjdCA9IGdldEJvdW5kaW5nQ2xpZW50UmVjdChlbGVtZW50T3JWaXJ0dWFsRWxlbWVudCwgb2Zmc2V0UGFyZW50SXNTY2FsZWQsIGlzRml4ZWQpO1xuICB2YXIgc2Nyb2xsID0ge1xuICAgIHNjcm9sbExlZnQ6IDAsXG4gICAgc2Nyb2xsVG9wOiAwXG4gIH07XG4gIHZhciBvZmZzZXRzID0ge1xuICAgIHg6IDAsXG4gICAgeTogMFxuICB9O1xuXG4gIGlmIChpc09mZnNldFBhcmVudEFuRWxlbWVudCB8fCAhaXNPZmZzZXRQYXJlbnRBbkVsZW1lbnQgJiYgIWlzRml4ZWQpIHtcbiAgICBpZiAoZ2V0Tm9kZU5hbWUob2Zmc2V0UGFyZW50KSAhPT0gJ2JvZHknIHx8IC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9wb3BwZXJqcy9wb3BwZXItY29yZS9pc3N1ZXMvMTA3OFxuICAgIGlzU2Nyb2xsUGFyZW50KGRvY3VtZW50RWxlbWVudCkpIHtcbiAgICAgIHNjcm9sbCA9IGdldE5vZGVTY3JvbGwob2Zmc2V0UGFyZW50KTtcbiAgICB9XG5cbiAgICBpZiAoaXNIVE1MRWxlbWVudChvZmZzZXRQYXJlbnQpKSB7XG4gICAgICBvZmZzZXRzID0gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KG9mZnNldFBhcmVudCwgdHJ1ZSk7XG4gICAgICBvZmZzZXRzLnggKz0gb2Zmc2V0UGFyZW50LmNsaWVudExlZnQ7XG4gICAgICBvZmZzZXRzLnkgKz0gb2Zmc2V0UGFyZW50LmNsaWVudFRvcDtcbiAgICB9IGVsc2UgaWYgKGRvY3VtZW50RWxlbWVudCkge1xuICAgICAgb2Zmc2V0cy54ID0gZ2V0V2luZG93U2Nyb2xsQmFyWChkb2N1bWVudEVsZW1lbnQpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgeDogcmVjdC5sZWZ0ICsgc2Nyb2xsLnNjcm9sbExlZnQgLSBvZmZzZXRzLngsXG4gICAgeTogcmVjdC50b3AgKyBzY3JvbGwuc2Nyb2xsVG9wIC0gb2Zmc2V0cy55LFxuICAgIHdpZHRoOiByZWN0LndpZHRoLFxuICAgIGhlaWdodDogcmVjdC5oZWlnaHRcbiAgfTtcbn0iLCJpbXBvcnQgZ2V0V2luZG93U2Nyb2xsIGZyb20gXCIuL2dldFdpbmRvd1Njcm9sbC5qc1wiO1xuaW1wb3J0IGdldFdpbmRvdyBmcm9tIFwiLi9nZXRXaW5kb3cuanNcIjtcbmltcG9ydCB7IGlzSFRNTEVsZW1lbnQgfSBmcm9tIFwiLi9pbnN0YW5jZU9mLmpzXCI7XG5pbXBvcnQgZ2V0SFRNTEVsZW1lbnRTY3JvbGwgZnJvbSBcIi4vZ2V0SFRNTEVsZW1lbnRTY3JvbGwuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldE5vZGVTY3JvbGwobm9kZSkge1xuICBpZiAobm9kZSA9PT0gZ2V0V2luZG93KG5vZGUpIHx8ICFpc0hUTUxFbGVtZW50KG5vZGUpKSB7XG4gICAgcmV0dXJuIGdldFdpbmRvd1Njcm9sbChub2RlKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZ2V0SFRNTEVsZW1lbnRTY3JvbGwobm9kZSk7XG4gIH1cbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRIVE1MRWxlbWVudFNjcm9sbChlbGVtZW50KSB7XG4gIHJldHVybiB7XG4gICAgc2Nyb2xsTGVmdDogZWxlbWVudC5zY3JvbGxMZWZ0LFxuICAgIHNjcm9sbFRvcDogZWxlbWVudC5zY3JvbGxUb3BcbiAgfTtcbn0iLCJpbXBvcnQgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IGZyb20gXCIuL2dldEJvdW5kaW5nQ2xpZW50UmVjdC5qc1wiOyAvLyBSZXR1cm5zIHRoZSBsYXlvdXQgcmVjdCBvZiBhbiBlbGVtZW50IHJlbGF0aXZlIHRvIGl0cyBvZmZzZXRQYXJlbnQuIExheW91dFxuLy8gbWVhbnMgaXQgZG9lc24ndCB0YWtlIGludG8gYWNjb3VudCB0cmFuc2Zvcm1zLlxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRMYXlvdXRSZWN0KGVsZW1lbnQpIHtcbiAgdmFyIGNsaWVudFJlY3QgPSBnZXRCb3VuZGluZ0NsaWVudFJlY3QoZWxlbWVudCk7IC8vIFVzZSB0aGUgY2xpZW50UmVjdCBzaXplcyBpZiBpdCdzIG5vdCBiZWVuIHRyYW5zZm9ybWVkLlxuICAvLyBGaXhlcyBodHRwczovL2dpdGh1Yi5jb20vcG9wcGVyanMvcG9wcGVyLWNvcmUvaXNzdWVzLzEyMjNcblxuICB2YXIgd2lkdGggPSBlbGVtZW50Lm9mZnNldFdpZHRoO1xuICB2YXIgaGVpZ2h0ID0gZWxlbWVudC5vZmZzZXRIZWlnaHQ7XG5cbiAgaWYgKE1hdGguYWJzKGNsaWVudFJlY3Qud2lkdGggLSB3aWR0aCkgPD0gMSkge1xuICAgIHdpZHRoID0gY2xpZW50UmVjdC53aWR0aDtcbiAgfVxuXG4gIGlmIChNYXRoLmFicyhjbGllbnRSZWN0LmhlaWdodCAtIGhlaWdodCkgPD0gMSkge1xuICAgIGhlaWdodCA9IGNsaWVudFJlY3QuaGVpZ2h0O1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICB4OiBlbGVtZW50Lm9mZnNldExlZnQsXG4gICAgeTogZWxlbWVudC5vZmZzZXRUb3AsXG4gICAgd2lkdGg6IHdpZHRoLFxuICAgIGhlaWdodDogaGVpZ2h0XG4gIH07XG59IiwiaW1wb3J0IGdldE5vZGVOYW1lIGZyb20gXCIuL2dldE5vZGVOYW1lLmpzXCI7XG5pbXBvcnQgZ2V0RG9jdW1lbnRFbGVtZW50IGZyb20gXCIuL2dldERvY3VtZW50RWxlbWVudC5qc1wiO1xuaW1wb3J0IHsgaXNTaGFkb3dSb290IH0gZnJvbSBcIi4vaW5zdGFuY2VPZi5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0UGFyZW50Tm9kZShlbGVtZW50KSB7XG4gIGlmIChnZXROb2RlTmFtZShlbGVtZW50KSA9PT0gJ2h0bWwnKSB7XG4gICAgcmV0dXJuIGVsZW1lbnQ7XG4gIH1cblxuICByZXR1cm4gKC8vIHRoaXMgaXMgYSBxdWlja2VyIChidXQgbGVzcyB0eXBlIHNhZmUpIHdheSB0byBzYXZlIHF1aXRlIHNvbWUgYnl0ZXMgZnJvbSB0aGUgYnVuZGxlXG4gICAgLy8gJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtcmV0dXJuXVxuICAgIC8vICRGbG93Rml4TWVbcHJvcC1taXNzaW5nXVxuICAgIGVsZW1lbnQuYXNzaWduZWRTbG90IHx8IC8vIHN0ZXAgaW50byB0aGUgc2hhZG93IERPTSBvZiB0aGUgcGFyZW50IG9mIGEgc2xvdHRlZCBub2RlXG4gICAgZWxlbWVudC5wYXJlbnROb2RlIHx8ICggLy8gRE9NIEVsZW1lbnQgZGV0ZWN0ZWRcbiAgICBpc1NoYWRvd1Jvb3QoZWxlbWVudCkgPyBlbGVtZW50Lmhvc3QgOiBudWxsKSB8fCAvLyBTaGFkb3dSb290IGRldGVjdGVkXG4gICAgLy8gJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtY2FsbF06IEhUTUxFbGVtZW50IGlzIGEgTm9kZVxuICAgIGdldERvY3VtZW50RWxlbWVudChlbGVtZW50KSAvLyBmYWxsYmFja1xuXG4gICk7XG59IiwiaW1wb3J0IGdldFBhcmVudE5vZGUgZnJvbSBcIi4vZ2V0UGFyZW50Tm9kZS5qc1wiO1xuaW1wb3J0IGlzU2Nyb2xsUGFyZW50IGZyb20gXCIuL2lzU2Nyb2xsUGFyZW50LmpzXCI7XG5pbXBvcnQgZ2V0Tm9kZU5hbWUgZnJvbSBcIi4vZ2V0Tm9kZU5hbWUuanNcIjtcbmltcG9ydCB7IGlzSFRNTEVsZW1lbnQgfSBmcm9tIFwiLi9pbnN0YW5jZU9mLmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRTY3JvbGxQYXJlbnQobm9kZSkge1xuICBpZiAoWydodG1sJywgJ2JvZHknLCAnI2RvY3VtZW50J10uaW5kZXhPZihnZXROb2RlTmFtZShub2RlKSkgPj0gMCkge1xuICAgIC8vICRGbG93Rml4TWVbaW5jb21wYXRpYmxlLXJldHVybl06IGFzc3VtZSBib2R5IGlzIGFsd2F5cyBhdmFpbGFibGVcbiAgICByZXR1cm4gbm9kZS5vd25lckRvY3VtZW50LmJvZHk7XG4gIH1cblxuICBpZiAoaXNIVE1MRWxlbWVudChub2RlKSAmJiBpc1Njcm9sbFBhcmVudChub2RlKSkge1xuICAgIHJldHVybiBub2RlO1xuICB9XG5cbiAgcmV0dXJuIGdldFNjcm9sbFBhcmVudChnZXRQYXJlbnROb2RlKG5vZGUpKTtcbn0iLCJpbXBvcnQgZ2V0U2Nyb2xsUGFyZW50IGZyb20gXCIuL2dldFNjcm9sbFBhcmVudC5qc1wiO1xuaW1wb3J0IGdldFBhcmVudE5vZGUgZnJvbSBcIi4vZ2V0UGFyZW50Tm9kZS5qc1wiO1xuaW1wb3J0IGdldFdpbmRvdyBmcm9tIFwiLi9nZXRXaW5kb3cuanNcIjtcbmltcG9ydCBpc1Njcm9sbFBhcmVudCBmcm9tIFwiLi9pc1Njcm9sbFBhcmVudC5qc1wiO1xuLypcbmdpdmVuIGEgRE9NIGVsZW1lbnQsIHJldHVybiB0aGUgbGlzdCBvZiBhbGwgc2Nyb2xsIHBhcmVudHMsIHVwIHRoZSBsaXN0IG9mIGFuY2Vzb3JzXG51bnRpbCB3ZSBnZXQgdG8gdGhlIHRvcCB3aW5kb3cgb2JqZWN0LiBUaGlzIGxpc3QgaXMgd2hhdCB3ZSBhdHRhY2ggc2Nyb2xsIGxpc3RlbmVyc1xudG8sIGJlY2F1c2UgaWYgYW55IG9mIHRoZXNlIHBhcmVudCBlbGVtZW50cyBzY3JvbGwsIHdlJ2xsIG5lZWQgdG8gcmUtY2FsY3VsYXRlIHRoZVxucmVmZXJlbmNlIGVsZW1lbnQncyBwb3NpdGlvbi5cbiovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGxpc3RTY3JvbGxQYXJlbnRzKGVsZW1lbnQsIGxpc3QpIHtcbiAgdmFyIF9lbGVtZW50JG93bmVyRG9jdW1lbjtcblxuICBpZiAobGlzdCA9PT0gdm9pZCAwKSB7XG4gICAgbGlzdCA9IFtdO1xuICB9XG5cbiAgdmFyIHNjcm9sbFBhcmVudCA9IGdldFNjcm9sbFBhcmVudChlbGVtZW50KTtcbiAgdmFyIGlzQm9keSA9IHNjcm9sbFBhcmVudCA9PT0gKChfZWxlbWVudCRvd25lckRvY3VtZW4gPSBlbGVtZW50Lm93bmVyRG9jdW1lbnQpID09IG51bGwgPyB2b2lkIDAgOiBfZWxlbWVudCRvd25lckRvY3VtZW4uYm9keSk7XG4gIHZhciB3aW4gPSBnZXRXaW5kb3coc2Nyb2xsUGFyZW50KTtcbiAgdmFyIHRhcmdldCA9IGlzQm9keSA/IFt3aW5dLmNvbmNhdCh3aW4udmlzdWFsVmlld3BvcnQgfHwgW10sIGlzU2Nyb2xsUGFyZW50KHNjcm9sbFBhcmVudCkgPyBzY3JvbGxQYXJlbnQgOiBbXSkgOiBzY3JvbGxQYXJlbnQ7XG4gIHZhciB1cGRhdGVkTGlzdCA9IGxpc3QuY29uY2F0KHRhcmdldCk7XG4gIHJldHVybiBpc0JvZHkgPyB1cGRhdGVkTGlzdCA6IC8vICRGbG93Rml4TWVbaW5jb21wYXRpYmxlLWNhbGxdOiBpc0JvZHkgdGVsbHMgdXMgdGFyZ2V0IHdpbGwgYmUgYW4gSFRNTEVsZW1lbnQgaGVyZVxuICB1cGRhdGVkTGlzdC5jb25jYXQobGlzdFNjcm9sbFBhcmVudHMoZ2V0UGFyZW50Tm9kZSh0YXJnZXQpKSk7XG59IiwiaW1wb3J0IGdldE5vZGVOYW1lIGZyb20gXCIuL2dldE5vZGVOYW1lLmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc1RhYmxlRWxlbWVudChlbGVtZW50KSB7XG4gIHJldHVybiBbJ3RhYmxlJywgJ3RkJywgJ3RoJ10uaW5kZXhPZihnZXROb2RlTmFtZShlbGVtZW50KSkgPj0gMDtcbn0iLCJpbXBvcnQgZ2V0V2luZG93IGZyb20gXCIuL2dldFdpbmRvdy5qc1wiO1xuaW1wb3J0IGdldE5vZGVOYW1lIGZyb20gXCIuL2dldE5vZGVOYW1lLmpzXCI7XG5pbXBvcnQgZ2V0Q29tcHV0ZWRTdHlsZSBmcm9tIFwiLi9nZXRDb21wdXRlZFN0eWxlLmpzXCI7XG5pbXBvcnQgeyBpc0hUTUxFbGVtZW50LCBpc1NoYWRvd1Jvb3QgfSBmcm9tIFwiLi9pbnN0YW5jZU9mLmpzXCI7XG5pbXBvcnQgaXNUYWJsZUVsZW1lbnQgZnJvbSBcIi4vaXNUYWJsZUVsZW1lbnQuanNcIjtcbmltcG9ydCBnZXRQYXJlbnROb2RlIGZyb20gXCIuL2dldFBhcmVudE5vZGUuanNcIjtcbmltcG9ydCBnZXRVQVN0cmluZyBmcm9tIFwiLi4vdXRpbHMvdXNlckFnZW50LmpzXCI7XG5cbmZ1bmN0aW9uIGdldFRydWVPZmZzZXRQYXJlbnQoZWxlbWVudCkge1xuICBpZiAoIWlzSFRNTEVsZW1lbnQoZWxlbWVudCkgfHwgLy8gaHR0cHM6Ly9naXRodWIuY29tL3BvcHBlcmpzL3BvcHBlci1jb3JlL2lzc3Vlcy84MzdcbiAgZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KS5wb3NpdGlvbiA9PT0gJ2ZpeGVkJykge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcmV0dXJuIGVsZW1lbnQub2Zmc2V0UGFyZW50O1xufSAvLyBgLm9mZnNldFBhcmVudGAgcmVwb3J0cyBgbnVsbGAgZm9yIGZpeGVkIGVsZW1lbnRzLCB3aGlsZSBhYnNvbHV0ZSBlbGVtZW50c1xuLy8gcmV0dXJuIHRoZSBjb250YWluaW5nIGJsb2NrXG5cblxuZnVuY3Rpb24gZ2V0Q29udGFpbmluZ0Jsb2NrKGVsZW1lbnQpIHtcbiAgdmFyIGlzRmlyZWZveCA9IC9maXJlZm94L2kudGVzdChnZXRVQVN0cmluZygpKTtcbiAgdmFyIGlzSUUgPSAvVHJpZGVudC9pLnRlc3QoZ2V0VUFTdHJpbmcoKSk7XG5cbiAgaWYgKGlzSUUgJiYgaXNIVE1MRWxlbWVudChlbGVtZW50KSkge1xuICAgIC8vIEluIElFIDksIDEwIGFuZCAxMSBmaXhlZCBlbGVtZW50cyBjb250YWluaW5nIGJsb2NrIGlzIGFsd2F5cyBlc3RhYmxpc2hlZCBieSB0aGUgdmlld3BvcnRcbiAgICB2YXIgZWxlbWVudENzcyA9IGdldENvbXB1dGVkU3R5bGUoZWxlbWVudCk7XG5cbiAgICBpZiAoZWxlbWVudENzcy5wb3NpdGlvbiA9PT0gJ2ZpeGVkJykge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9XG5cbiAgdmFyIGN1cnJlbnROb2RlID0gZ2V0UGFyZW50Tm9kZShlbGVtZW50KTtcblxuICBpZiAoaXNTaGFkb3dSb290KGN1cnJlbnROb2RlKSkge1xuICAgIGN1cnJlbnROb2RlID0gY3VycmVudE5vZGUuaG9zdDtcbiAgfVxuXG4gIHdoaWxlIChpc0hUTUxFbGVtZW50KGN1cnJlbnROb2RlKSAmJiBbJ2h0bWwnLCAnYm9keSddLmluZGV4T2YoZ2V0Tm9kZU5hbWUoY3VycmVudE5vZGUpKSA8IDApIHtcbiAgICB2YXIgY3NzID0gZ2V0Q29tcHV0ZWRTdHlsZShjdXJyZW50Tm9kZSk7IC8vIFRoaXMgaXMgbm9uLWV4aGF1c3RpdmUgYnV0IGNvdmVycyB0aGUgbW9zdCBjb21tb24gQ1NTIHByb3BlcnRpZXMgdGhhdFxuICAgIC8vIGNyZWF0ZSBhIGNvbnRhaW5pbmcgYmxvY2suXG4gICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL0NvbnRhaW5pbmdfYmxvY2sjaWRlbnRpZnlpbmdfdGhlX2NvbnRhaW5pbmdfYmxvY2tcblxuICAgIGlmIChjc3MudHJhbnNmb3JtICE9PSAnbm9uZScgfHwgY3NzLnBlcnNwZWN0aXZlICE9PSAnbm9uZScgfHwgY3NzLmNvbnRhaW4gPT09ICdwYWludCcgfHwgWyd0cmFuc2Zvcm0nLCAncGVyc3BlY3RpdmUnXS5pbmRleE9mKGNzcy53aWxsQ2hhbmdlKSAhPT0gLTEgfHwgaXNGaXJlZm94ICYmIGNzcy53aWxsQ2hhbmdlID09PSAnZmlsdGVyJyB8fCBpc0ZpcmVmb3ggJiYgY3NzLmZpbHRlciAmJiBjc3MuZmlsdGVyICE9PSAnbm9uZScpIHtcbiAgICAgIHJldHVybiBjdXJyZW50Tm9kZTtcbiAgICB9IGVsc2Uge1xuICAgICAgY3VycmVudE5vZGUgPSBjdXJyZW50Tm9kZS5wYXJlbnROb2RlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBudWxsO1xufSAvLyBHZXRzIHRoZSBjbG9zZXN0IGFuY2VzdG9yIHBvc2l0aW9uZWQgZWxlbWVudC4gSGFuZGxlcyBzb21lIGVkZ2UgY2FzZXMsXG4vLyBzdWNoIGFzIHRhYmxlIGFuY2VzdG9ycyBhbmQgY3Jvc3MgYnJvd3NlciBidWdzLlxuXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldE9mZnNldFBhcmVudChlbGVtZW50KSB7XG4gIHZhciB3aW5kb3cgPSBnZXRXaW5kb3coZWxlbWVudCk7XG4gIHZhciBvZmZzZXRQYXJlbnQgPSBnZXRUcnVlT2Zmc2V0UGFyZW50KGVsZW1lbnQpO1xuXG4gIHdoaWxlIChvZmZzZXRQYXJlbnQgJiYgaXNUYWJsZUVsZW1lbnQob2Zmc2V0UGFyZW50KSAmJiBnZXRDb21wdXRlZFN0eWxlKG9mZnNldFBhcmVudCkucG9zaXRpb24gPT09ICdzdGF0aWMnKSB7XG4gICAgb2Zmc2V0UGFyZW50ID0gZ2V0VHJ1ZU9mZnNldFBhcmVudChvZmZzZXRQYXJlbnQpO1xuICB9XG5cbiAgaWYgKG9mZnNldFBhcmVudCAmJiAoZ2V0Tm9kZU5hbWUob2Zmc2V0UGFyZW50KSA9PT0gJ2h0bWwnIHx8IGdldE5vZGVOYW1lKG9mZnNldFBhcmVudCkgPT09ICdib2R5JyAmJiBnZXRDb21wdXRlZFN0eWxlKG9mZnNldFBhcmVudCkucG9zaXRpb24gPT09ICdzdGF0aWMnKSkge1xuICAgIHJldHVybiB3aW5kb3c7XG4gIH1cblxuICByZXR1cm4gb2Zmc2V0UGFyZW50IHx8IGdldENvbnRhaW5pbmdCbG9jayhlbGVtZW50KSB8fCB3aW5kb3c7XG59IiwiZXhwb3J0IHZhciB0b3AgPSAndG9wJztcbmV4cG9ydCB2YXIgYm90dG9tID0gJ2JvdHRvbSc7XG5leHBvcnQgdmFyIHJpZ2h0ID0gJ3JpZ2h0JztcbmV4cG9ydCB2YXIgbGVmdCA9ICdsZWZ0JztcbmV4cG9ydCB2YXIgYXV0byA9ICdhdXRvJztcbmV4cG9ydCB2YXIgYmFzZVBsYWNlbWVudHMgPSBbdG9wLCBib3R0b20sIHJpZ2h0LCBsZWZ0XTtcbmV4cG9ydCB2YXIgc3RhcnQgPSAnc3RhcnQnO1xuZXhwb3J0IHZhciBlbmQgPSAnZW5kJztcbmV4cG9ydCB2YXIgY2xpcHBpbmdQYXJlbnRzID0gJ2NsaXBwaW5nUGFyZW50cyc7XG5leHBvcnQgdmFyIHZpZXdwb3J0ID0gJ3ZpZXdwb3J0JztcbmV4cG9ydCB2YXIgcG9wcGVyID0gJ3BvcHBlcic7XG5leHBvcnQgdmFyIHJlZmVyZW5jZSA9ICdyZWZlcmVuY2UnO1xuZXhwb3J0IHZhciB2YXJpYXRpb25QbGFjZW1lbnRzID0gLyojX19QVVJFX18qL2Jhc2VQbGFjZW1lbnRzLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBwbGFjZW1lbnQpIHtcbiAgcmV0dXJuIGFjYy5jb25jYXQoW3BsYWNlbWVudCArIFwiLVwiICsgc3RhcnQsIHBsYWNlbWVudCArIFwiLVwiICsgZW5kXSk7XG59LCBbXSk7XG5leHBvcnQgdmFyIHBsYWNlbWVudHMgPSAvKiNfX1BVUkVfXyovW10uY29uY2F0KGJhc2VQbGFjZW1lbnRzLCBbYXV0b10pLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBwbGFjZW1lbnQpIHtcbiAgcmV0dXJuIGFjYy5jb25jYXQoW3BsYWNlbWVudCwgcGxhY2VtZW50ICsgXCItXCIgKyBzdGFydCwgcGxhY2VtZW50ICsgXCItXCIgKyBlbmRdKTtcbn0sIFtdKTsgLy8gbW9kaWZpZXJzIHRoYXQgbmVlZCB0byByZWFkIHRoZSBET01cblxuZXhwb3J0IHZhciBiZWZvcmVSZWFkID0gJ2JlZm9yZVJlYWQnO1xuZXhwb3J0IHZhciByZWFkID0gJ3JlYWQnO1xuZXhwb3J0IHZhciBhZnRlclJlYWQgPSAnYWZ0ZXJSZWFkJzsgLy8gcHVyZS1sb2dpYyBtb2RpZmllcnNcblxuZXhwb3J0IHZhciBiZWZvcmVNYWluID0gJ2JlZm9yZU1haW4nO1xuZXhwb3J0IHZhciBtYWluID0gJ21haW4nO1xuZXhwb3J0IHZhciBhZnRlck1haW4gPSAnYWZ0ZXJNYWluJzsgLy8gbW9kaWZpZXIgd2l0aCB0aGUgcHVycG9zZSB0byB3cml0ZSB0byB0aGUgRE9NIChvciB3cml0ZSBpbnRvIGEgZnJhbWV3b3JrIHN0YXRlKVxuXG5leHBvcnQgdmFyIGJlZm9yZVdyaXRlID0gJ2JlZm9yZVdyaXRlJztcbmV4cG9ydCB2YXIgd3JpdGUgPSAnd3JpdGUnO1xuZXhwb3J0IHZhciBhZnRlcldyaXRlID0gJ2FmdGVyV3JpdGUnO1xuZXhwb3J0IHZhciBtb2RpZmllclBoYXNlcyA9IFtiZWZvcmVSZWFkLCByZWFkLCBhZnRlclJlYWQsIGJlZm9yZU1haW4sIG1haW4sIGFmdGVyTWFpbiwgYmVmb3JlV3JpdGUsIHdyaXRlLCBhZnRlcldyaXRlXTsiLCJpbXBvcnQgeyBtb2RpZmllclBoYXNlcyB9IGZyb20gXCIuLi9lbnVtcy5qc1wiOyAvLyBzb3VyY2U6IGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzQ5ODc1MjU1XG5cbmZ1bmN0aW9uIG9yZGVyKG1vZGlmaWVycykge1xuICB2YXIgbWFwID0gbmV3IE1hcCgpO1xuICB2YXIgdmlzaXRlZCA9IG5ldyBTZXQoKTtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICBtb2RpZmllcnMuZm9yRWFjaChmdW5jdGlvbiAobW9kaWZpZXIpIHtcbiAgICBtYXAuc2V0KG1vZGlmaWVyLm5hbWUsIG1vZGlmaWVyKTtcbiAgfSk7IC8vIE9uIHZpc2l0aW5nIG9iamVjdCwgY2hlY2sgZm9yIGl0cyBkZXBlbmRlbmNpZXMgYW5kIHZpc2l0IHRoZW0gcmVjdXJzaXZlbHlcblxuICBmdW5jdGlvbiBzb3J0KG1vZGlmaWVyKSB7XG4gICAgdmlzaXRlZC5hZGQobW9kaWZpZXIubmFtZSk7XG4gICAgdmFyIHJlcXVpcmVzID0gW10uY29uY2F0KG1vZGlmaWVyLnJlcXVpcmVzIHx8IFtdLCBtb2RpZmllci5yZXF1aXJlc0lmRXhpc3RzIHx8IFtdKTtcbiAgICByZXF1aXJlcy5mb3JFYWNoKGZ1bmN0aW9uIChkZXApIHtcbiAgICAgIGlmICghdmlzaXRlZC5oYXMoZGVwKSkge1xuICAgICAgICB2YXIgZGVwTW9kaWZpZXIgPSBtYXAuZ2V0KGRlcCk7XG5cbiAgICAgICAgaWYgKGRlcE1vZGlmaWVyKSB7XG4gICAgICAgICAgc29ydChkZXBNb2RpZmllcik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXN1bHQucHVzaChtb2RpZmllcik7XG4gIH1cblxuICBtb2RpZmllcnMuZm9yRWFjaChmdW5jdGlvbiAobW9kaWZpZXIpIHtcbiAgICBpZiAoIXZpc2l0ZWQuaGFzKG1vZGlmaWVyLm5hbWUpKSB7XG4gICAgICAvLyBjaGVjayBmb3IgdmlzaXRlZCBvYmplY3RcbiAgICAgIHNvcnQobW9kaWZpZXIpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG9yZGVyTW9kaWZpZXJzKG1vZGlmaWVycykge1xuICAvLyBvcmRlciBiYXNlZCBvbiBkZXBlbmRlbmNpZXNcbiAgdmFyIG9yZGVyZWRNb2RpZmllcnMgPSBvcmRlcihtb2RpZmllcnMpOyAvLyBvcmRlciBiYXNlZCBvbiBwaGFzZVxuXG4gIHJldHVybiBtb2RpZmllclBoYXNlcy5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgcGhhc2UpIHtcbiAgICByZXR1cm4gYWNjLmNvbmNhdChvcmRlcmVkTW9kaWZpZXJzLmZpbHRlcihmdW5jdGlvbiAobW9kaWZpZXIpIHtcbiAgICAgIHJldHVybiBtb2RpZmllci5waGFzZSA9PT0gcGhhc2U7XG4gICAgfSkpO1xuICB9LCBbXSk7XG59IiwiaW1wb3J0IGdldENvbXBvc2l0ZVJlY3QgZnJvbSBcIi4vZG9tLXV0aWxzL2dldENvbXBvc2l0ZVJlY3QuanNcIjtcbmltcG9ydCBnZXRMYXlvdXRSZWN0IGZyb20gXCIuL2RvbS11dGlscy9nZXRMYXlvdXRSZWN0LmpzXCI7XG5pbXBvcnQgbGlzdFNjcm9sbFBhcmVudHMgZnJvbSBcIi4vZG9tLXV0aWxzL2xpc3RTY3JvbGxQYXJlbnRzLmpzXCI7XG5pbXBvcnQgZ2V0T2Zmc2V0UGFyZW50IGZyb20gXCIuL2RvbS11dGlscy9nZXRPZmZzZXRQYXJlbnQuanNcIjtcbmltcG9ydCBvcmRlck1vZGlmaWVycyBmcm9tIFwiLi91dGlscy9vcmRlck1vZGlmaWVycy5qc1wiO1xuaW1wb3J0IGRlYm91bmNlIGZyb20gXCIuL3V0aWxzL2RlYm91bmNlLmpzXCI7XG5pbXBvcnQgbWVyZ2VCeU5hbWUgZnJvbSBcIi4vdXRpbHMvbWVyZ2VCeU5hbWUuanNcIjtcbmltcG9ydCBkZXRlY3RPdmVyZmxvdyBmcm9tIFwiLi91dGlscy9kZXRlY3RPdmVyZmxvdy5qc1wiO1xuaW1wb3J0IHsgaXNFbGVtZW50IH0gZnJvbSBcIi4vZG9tLXV0aWxzL2luc3RhbmNlT2YuanNcIjtcbnZhciBERUZBVUxUX09QVElPTlMgPSB7XG4gIHBsYWNlbWVudDogJ2JvdHRvbScsXG4gIG1vZGlmaWVyczogW10sXG4gIHN0cmF0ZWd5OiAnYWJzb2x1dGUnXG59O1xuXG5mdW5jdGlvbiBhcmVWYWxpZEVsZW1lbnRzKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgcmV0dXJuICFhcmdzLnNvbWUoZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICByZXR1cm4gIShlbGVtZW50ICYmIHR5cGVvZiBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCA9PT0gJ2Z1bmN0aW9uJyk7XG4gIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcG9wcGVyR2VuZXJhdG9yKGdlbmVyYXRvck9wdGlvbnMpIHtcbiAgaWYgKGdlbmVyYXRvck9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgIGdlbmVyYXRvck9wdGlvbnMgPSB7fTtcbiAgfVxuXG4gIHZhciBfZ2VuZXJhdG9yT3B0aW9ucyA9IGdlbmVyYXRvck9wdGlvbnMsXG4gICAgICBfZ2VuZXJhdG9yT3B0aW9ucyRkZWYgPSBfZ2VuZXJhdG9yT3B0aW9ucy5kZWZhdWx0TW9kaWZpZXJzLFxuICAgICAgZGVmYXVsdE1vZGlmaWVycyA9IF9nZW5lcmF0b3JPcHRpb25zJGRlZiA9PT0gdm9pZCAwID8gW10gOiBfZ2VuZXJhdG9yT3B0aW9ucyRkZWYsXG4gICAgICBfZ2VuZXJhdG9yT3B0aW9ucyRkZWYyID0gX2dlbmVyYXRvck9wdGlvbnMuZGVmYXVsdE9wdGlvbnMsXG4gICAgICBkZWZhdWx0T3B0aW9ucyA9IF9nZW5lcmF0b3JPcHRpb25zJGRlZjIgPT09IHZvaWQgMCA/IERFRkFVTFRfT1BUSU9OUyA6IF9nZW5lcmF0b3JPcHRpb25zJGRlZjI7XG4gIHJldHVybiBmdW5jdGlvbiBjcmVhdGVQb3BwZXIocmVmZXJlbmNlLCBwb3BwZXIsIG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgICBvcHRpb25zID0gZGVmYXVsdE9wdGlvbnM7XG4gICAgfVxuXG4gICAgdmFyIHN0YXRlID0ge1xuICAgICAgcGxhY2VtZW50OiAnYm90dG9tJyxcbiAgICAgIG9yZGVyZWRNb2RpZmllcnM6IFtdLFxuICAgICAgb3B0aW9uczogT2JqZWN0LmFzc2lnbih7fSwgREVGQVVMVF9PUFRJT05TLCBkZWZhdWx0T3B0aW9ucyksXG4gICAgICBtb2RpZmllcnNEYXRhOiB7fSxcbiAgICAgIGVsZW1lbnRzOiB7XG4gICAgICAgIHJlZmVyZW5jZTogcmVmZXJlbmNlLFxuICAgICAgICBwb3BwZXI6IHBvcHBlclxuICAgICAgfSxcbiAgICAgIGF0dHJpYnV0ZXM6IHt9LFxuICAgICAgc3R5bGVzOiB7fVxuICAgIH07XG4gICAgdmFyIGVmZmVjdENsZWFudXBGbnMgPSBbXTtcbiAgICB2YXIgaXNEZXN0cm95ZWQgPSBmYWxzZTtcbiAgICB2YXIgaW5zdGFuY2UgPSB7XG4gICAgICBzdGF0ZTogc3RhdGUsXG4gICAgICBzZXRPcHRpb25zOiBmdW5jdGlvbiBzZXRPcHRpb25zKHNldE9wdGlvbnNBY3Rpb24pIHtcbiAgICAgICAgdmFyIG9wdGlvbnMgPSB0eXBlb2Ygc2V0T3B0aW9uc0FjdGlvbiA9PT0gJ2Z1bmN0aW9uJyA/IHNldE9wdGlvbnNBY3Rpb24oc3RhdGUub3B0aW9ucykgOiBzZXRPcHRpb25zQWN0aW9uO1xuICAgICAgICBjbGVhbnVwTW9kaWZpZXJFZmZlY3RzKCk7XG4gICAgICAgIHN0YXRlLm9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHt9LCBkZWZhdWx0T3B0aW9ucywgc3RhdGUub3B0aW9ucywgb3B0aW9ucyk7XG4gICAgICAgIHN0YXRlLnNjcm9sbFBhcmVudHMgPSB7XG4gICAgICAgICAgcmVmZXJlbmNlOiBpc0VsZW1lbnQocmVmZXJlbmNlKSA/IGxpc3RTY3JvbGxQYXJlbnRzKHJlZmVyZW5jZSkgOiByZWZlcmVuY2UuY29udGV4dEVsZW1lbnQgPyBsaXN0U2Nyb2xsUGFyZW50cyhyZWZlcmVuY2UuY29udGV4dEVsZW1lbnQpIDogW10sXG4gICAgICAgICAgcG9wcGVyOiBsaXN0U2Nyb2xsUGFyZW50cyhwb3BwZXIpXG4gICAgICAgIH07IC8vIE9yZGVycyB0aGUgbW9kaWZpZXJzIGJhc2VkIG9uIHRoZWlyIGRlcGVuZGVuY2llcyBhbmQgYHBoYXNlYFxuICAgICAgICAvLyBwcm9wZXJ0aWVzXG5cbiAgICAgICAgdmFyIG9yZGVyZWRNb2RpZmllcnMgPSBvcmRlck1vZGlmaWVycyhtZXJnZUJ5TmFtZShbXS5jb25jYXQoZGVmYXVsdE1vZGlmaWVycywgc3RhdGUub3B0aW9ucy5tb2RpZmllcnMpKSk7IC8vIFN0cmlwIG91dCBkaXNhYmxlZCBtb2RpZmllcnNcblxuICAgICAgICBzdGF0ZS5vcmRlcmVkTW9kaWZpZXJzID0gb3JkZXJlZE1vZGlmaWVycy5maWx0ZXIoZnVuY3Rpb24gKG0pIHtcbiAgICAgICAgICByZXR1cm4gbS5lbmFibGVkO1xuICAgICAgICB9KTtcbiAgICAgICAgcnVuTW9kaWZpZXJFZmZlY3RzKCk7XG4gICAgICAgIHJldHVybiBpbnN0YW5jZS51cGRhdGUoKTtcbiAgICAgIH0sXG4gICAgICAvLyBTeW5jIHVwZGF0ZSDigJMgaXQgd2lsbCBhbHdheXMgYmUgZXhlY3V0ZWQsIGV2ZW4gaWYgbm90IG5lY2Vzc2FyeS4gVGhpc1xuICAgICAgLy8gaXMgdXNlZnVsIGZvciBsb3cgZnJlcXVlbmN5IHVwZGF0ZXMgd2hlcmUgc3luYyBiZWhhdmlvciBzaW1wbGlmaWVzIHRoZVxuICAgICAgLy8gbG9naWMuXG4gICAgICAvLyBGb3IgaGlnaCBmcmVxdWVuY3kgdXBkYXRlcyAoZS5nLiBgcmVzaXplYCBhbmQgYHNjcm9sbGAgZXZlbnRzKSwgYWx3YXlzXG4gICAgICAvLyBwcmVmZXIgdGhlIGFzeW5jIFBvcHBlciN1cGRhdGUgbWV0aG9kXG4gICAgICBmb3JjZVVwZGF0ZTogZnVuY3Rpb24gZm9yY2VVcGRhdGUoKSB7XG4gICAgICAgIGlmIChpc0Rlc3Ryb3llZCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBfc3RhdGUkZWxlbWVudHMgPSBzdGF0ZS5lbGVtZW50cyxcbiAgICAgICAgICAgIHJlZmVyZW5jZSA9IF9zdGF0ZSRlbGVtZW50cy5yZWZlcmVuY2UsXG4gICAgICAgICAgICBwb3BwZXIgPSBfc3RhdGUkZWxlbWVudHMucG9wcGVyOyAvLyBEb24ndCBwcm9jZWVkIGlmIGByZWZlcmVuY2VgIG9yIGBwb3BwZXJgIGFyZSBub3QgdmFsaWQgZWxlbWVudHNcbiAgICAgICAgLy8gYW55bW9yZVxuXG4gICAgICAgIGlmICghYXJlVmFsaWRFbGVtZW50cyhyZWZlcmVuY2UsIHBvcHBlcikpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH0gLy8gU3RvcmUgdGhlIHJlZmVyZW5jZSBhbmQgcG9wcGVyIHJlY3RzIHRvIGJlIHJlYWQgYnkgbW9kaWZpZXJzXG5cblxuICAgICAgICBzdGF0ZS5yZWN0cyA9IHtcbiAgICAgICAgICByZWZlcmVuY2U6IGdldENvbXBvc2l0ZVJlY3QocmVmZXJlbmNlLCBnZXRPZmZzZXRQYXJlbnQocG9wcGVyKSwgc3RhdGUub3B0aW9ucy5zdHJhdGVneSA9PT0gJ2ZpeGVkJyksXG4gICAgICAgICAgcG9wcGVyOiBnZXRMYXlvdXRSZWN0KHBvcHBlcilcbiAgICAgICAgfTsgLy8gTW9kaWZpZXJzIGhhdmUgdGhlIGFiaWxpdHkgdG8gcmVzZXQgdGhlIGN1cnJlbnQgdXBkYXRlIGN5Y2xlLiBUaGVcbiAgICAgICAgLy8gbW9zdCBjb21tb24gdXNlIGNhc2UgZm9yIHRoaXMgaXMgdGhlIGBmbGlwYCBtb2RpZmllciBjaGFuZ2luZyB0aGVcbiAgICAgICAgLy8gcGxhY2VtZW50LCB3aGljaCB0aGVuIG5lZWRzIHRvIHJlLXJ1biBhbGwgdGhlIG1vZGlmaWVycywgYmVjYXVzZSB0aGVcbiAgICAgICAgLy8gbG9naWMgd2FzIHByZXZpb3VzbHkgcmFuIGZvciB0aGUgcHJldmlvdXMgcGxhY2VtZW50IGFuZCBpcyB0aGVyZWZvcmVcbiAgICAgICAgLy8gc3RhbGUvaW5jb3JyZWN0XG5cbiAgICAgICAgc3RhdGUucmVzZXQgPSBmYWxzZTtcbiAgICAgICAgc3RhdGUucGxhY2VtZW50ID0gc3RhdGUub3B0aW9ucy5wbGFjZW1lbnQ7IC8vIE9uIGVhY2ggdXBkYXRlIGN5Y2xlLCB0aGUgYG1vZGlmaWVyc0RhdGFgIHByb3BlcnR5IGZvciBlYWNoIG1vZGlmaWVyXG4gICAgICAgIC8vIGlzIGZpbGxlZCB3aXRoIHRoZSBpbml0aWFsIGRhdGEgc3BlY2lmaWVkIGJ5IHRoZSBtb2RpZmllci4gVGhpcyBtZWFuc1xuICAgICAgICAvLyBpdCBkb2Vzbid0IHBlcnNpc3QgYW5kIGlzIGZyZXNoIG9uIGVhY2ggdXBkYXRlLlxuICAgICAgICAvLyBUbyBlbnN1cmUgcGVyc2lzdGVudCBkYXRhLCB1c2UgYCR7bmFtZX0jcGVyc2lzdGVudGBcblxuICAgICAgICBzdGF0ZS5vcmRlcmVkTW9kaWZpZXJzLmZvckVhY2goZnVuY3Rpb24gKG1vZGlmaWVyKSB7XG4gICAgICAgICAgcmV0dXJuIHN0YXRlLm1vZGlmaWVyc0RhdGFbbW9kaWZpZXIubmFtZV0gPSBPYmplY3QuYXNzaWduKHt9LCBtb2RpZmllci5kYXRhKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IHN0YXRlLm9yZGVyZWRNb2RpZmllcnMubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgICAgaWYgKHN0YXRlLnJlc2V0ID09PSB0cnVlKSB7XG4gICAgICAgICAgICBzdGF0ZS5yZXNldCA9IGZhbHNlO1xuICAgICAgICAgICAgaW5kZXggPSAtMTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciBfc3RhdGUkb3JkZXJlZE1vZGlmaWUgPSBzdGF0ZS5vcmRlcmVkTW9kaWZpZXJzW2luZGV4XSxcbiAgICAgICAgICAgICAgZm4gPSBfc3RhdGUkb3JkZXJlZE1vZGlmaWUuZm4sXG4gICAgICAgICAgICAgIF9zdGF0ZSRvcmRlcmVkTW9kaWZpZTIgPSBfc3RhdGUkb3JkZXJlZE1vZGlmaWUub3B0aW9ucyxcbiAgICAgICAgICAgICAgX29wdGlvbnMgPSBfc3RhdGUkb3JkZXJlZE1vZGlmaWUyID09PSB2b2lkIDAgPyB7fSA6IF9zdGF0ZSRvcmRlcmVkTW9kaWZpZTIsXG4gICAgICAgICAgICAgIG5hbWUgPSBfc3RhdGUkb3JkZXJlZE1vZGlmaWUubmFtZTtcblxuICAgICAgICAgIGlmICh0eXBlb2YgZm4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHN0YXRlID0gZm4oe1xuICAgICAgICAgICAgICBzdGF0ZTogc3RhdGUsXG4gICAgICAgICAgICAgIG9wdGlvbnM6IF9vcHRpb25zLFxuICAgICAgICAgICAgICBuYW1lOiBuYW1lLFxuICAgICAgICAgICAgICBpbnN0YW5jZTogaW5zdGFuY2VcbiAgICAgICAgICAgIH0pIHx8IHN0YXRlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIC8vIEFzeW5jIGFuZCBvcHRpbWlzdGljYWxseSBvcHRpbWl6ZWQgdXBkYXRlIOKAkyBpdCB3aWxsIG5vdCBiZSBleGVjdXRlZCBpZlxuICAgICAgLy8gbm90IG5lY2Vzc2FyeSAoZGVib3VuY2VkIHRvIHJ1biBhdCBtb3N0IG9uY2UtcGVyLXRpY2spXG4gICAgICB1cGRhdGU6IGRlYm91bmNlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICAgICAgICAgaW5zdGFuY2UuZm9yY2VVcGRhdGUoKTtcbiAgICAgICAgICByZXNvbHZlKHN0YXRlKTtcbiAgICAgICAgfSk7XG4gICAgICB9KSxcbiAgICAgIGRlc3Ryb3k6IGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgICAgIGNsZWFudXBNb2RpZmllckVmZmVjdHMoKTtcbiAgICAgICAgaXNEZXN0cm95ZWQgPSB0cnVlO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBpZiAoIWFyZVZhbGlkRWxlbWVudHMocmVmZXJlbmNlLCBwb3BwZXIpKSB7XG4gICAgICByZXR1cm4gaW5zdGFuY2U7XG4gICAgfVxuXG4gICAgaW5zdGFuY2Uuc2V0T3B0aW9ucyhvcHRpb25zKS50aGVuKGZ1bmN0aW9uIChzdGF0ZSkge1xuICAgICAgaWYgKCFpc0Rlc3Ryb3llZCAmJiBvcHRpb25zLm9uRmlyc3RVcGRhdGUpIHtcbiAgICAgICAgb3B0aW9ucy5vbkZpcnN0VXBkYXRlKHN0YXRlKTtcbiAgICAgIH1cbiAgICB9KTsgLy8gTW9kaWZpZXJzIGhhdmUgdGhlIGFiaWxpdHkgdG8gZXhlY3V0ZSBhcmJpdHJhcnkgY29kZSBiZWZvcmUgdGhlIGZpcnN0XG4gICAgLy8gdXBkYXRlIGN5Y2xlIHJ1bnMuIFRoZXkgd2lsbCBiZSBleGVjdXRlZCBpbiB0aGUgc2FtZSBvcmRlciBhcyB0aGUgdXBkYXRlXG4gICAgLy8gY3ljbGUuIFRoaXMgaXMgdXNlZnVsIHdoZW4gYSBtb2RpZmllciBhZGRzIHNvbWUgcGVyc2lzdGVudCBkYXRhIHRoYXRcbiAgICAvLyBvdGhlciBtb2RpZmllcnMgbmVlZCB0byB1c2UsIGJ1dCB0aGUgbW9kaWZpZXIgaXMgcnVuIGFmdGVyIHRoZSBkZXBlbmRlbnRcbiAgICAvLyBvbmUuXG5cbiAgICBmdW5jdGlvbiBydW5Nb2RpZmllckVmZmVjdHMoKSB7XG4gICAgICBzdGF0ZS5vcmRlcmVkTW9kaWZpZXJzLmZvckVhY2goZnVuY3Rpb24gKF9yZWYpIHtcbiAgICAgICAgdmFyIG5hbWUgPSBfcmVmLm5hbWUsXG4gICAgICAgICAgICBfcmVmJG9wdGlvbnMgPSBfcmVmLm9wdGlvbnMsXG4gICAgICAgICAgICBvcHRpb25zID0gX3JlZiRvcHRpb25zID09PSB2b2lkIDAgPyB7fSA6IF9yZWYkb3B0aW9ucyxcbiAgICAgICAgICAgIGVmZmVjdCA9IF9yZWYuZWZmZWN0O1xuXG4gICAgICAgIGlmICh0eXBlb2YgZWZmZWN0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgdmFyIGNsZWFudXBGbiA9IGVmZmVjdCh7XG4gICAgICAgICAgICBzdGF0ZTogc3RhdGUsXG4gICAgICAgICAgICBuYW1lOiBuYW1lLFxuICAgICAgICAgICAgaW5zdGFuY2U6IGluc3RhbmNlLFxuICAgICAgICAgICAgb3B0aW9uczogb3B0aW9uc1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgdmFyIG5vb3BGbiA9IGZ1bmN0aW9uIG5vb3BGbigpIHt9O1xuXG4gICAgICAgICAgZWZmZWN0Q2xlYW51cEZucy5wdXNoKGNsZWFudXBGbiB8fCBub29wRm4pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjbGVhbnVwTW9kaWZpZXJFZmZlY3RzKCkge1xuICAgICAgZWZmZWN0Q2xlYW51cEZucy5mb3JFYWNoKGZ1bmN0aW9uIChmbikge1xuICAgICAgICByZXR1cm4gZm4oKTtcbiAgICAgIH0pO1xuICAgICAgZWZmZWN0Q2xlYW51cEZucyA9IFtdO1xuICAgIH1cblxuICAgIHJldHVybiBpbnN0YW5jZTtcbiAgfTtcbn1cbmV4cG9ydCB2YXIgY3JlYXRlUG9wcGVyID0gLyojX19QVVJFX18qL3BvcHBlckdlbmVyYXRvcigpOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cbmV4cG9ydCB7IGRldGVjdE92ZXJmbG93IH07IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZGVib3VuY2UoZm4pIHtcbiAgdmFyIHBlbmRpbmc7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFwZW5kaW5nKSB7XG4gICAgICBwZW5kaW5nID0gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICAgICAgUHJvbWlzZS5yZXNvbHZlKCkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcGVuZGluZyA9IHVuZGVmaW5lZDtcbiAgICAgICAgICByZXNvbHZlKGZuKCkpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBwZW5kaW5nO1xuICB9O1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG1lcmdlQnlOYW1lKG1vZGlmaWVycykge1xuICB2YXIgbWVyZ2VkID0gbW9kaWZpZXJzLnJlZHVjZShmdW5jdGlvbiAobWVyZ2VkLCBjdXJyZW50KSB7XG4gICAgdmFyIGV4aXN0aW5nID0gbWVyZ2VkW2N1cnJlbnQubmFtZV07XG4gICAgbWVyZ2VkW2N1cnJlbnQubmFtZV0gPSBleGlzdGluZyA/IE9iamVjdC5hc3NpZ24oe30sIGV4aXN0aW5nLCBjdXJyZW50LCB7XG4gICAgICBvcHRpb25zOiBPYmplY3QuYXNzaWduKHt9LCBleGlzdGluZy5vcHRpb25zLCBjdXJyZW50Lm9wdGlvbnMpLFxuICAgICAgZGF0YTogT2JqZWN0LmFzc2lnbih7fSwgZXhpc3RpbmcuZGF0YSwgY3VycmVudC5kYXRhKVxuICAgIH0pIDogY3VycmVudDtcbiAgICByZXR1cm4gbWVyZ2VkO1xuICB9LCB7fSk7IC8vIElFMTEgZG9lcyBub3Qgc3VwcG9ydCBPYmplY3QudmFsdWVzXG5cbiAgcmV0dXJuIE9iamVjdC5rZXlzKG1lcmdlZCkubWFwKGZ1bmN0aW9uIChrZXkpIHtcbiAgICByZXR1cm4gbWVyZ2VkW2tleV07XG4gIH0pO1xufSIsImltcG9ydCBnZXRXaW5kb3cgZnJvbSBcIi4uL2RvbS11dGlscy9nZXRXaW5kb3cuanNcIjsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuXG52YXIgcGFzc2l2ZSA9IHtcbiAgcGFzc2l2ZTogdHJ1ZVxufTtcblxuZnVuY3Rpb24gZWZmZWN0KF9yZWYpIHtcbiAgdmFyIHN0YXRlID0gX3JlZi5zdGF0ZSxcbiAgICAgIGluc3RhbmNlID0gX3JlZi5pbnN0YW5jZSxcbiAgICAgIG9wdGlvbnMgPSBfcmVmLm9wdGlvbnM7XG4gIHZhciBfb3B0aW9ucyRzY3JvbGwgPSBvcHRpb25zLnNjcm9sbCxcbiAgICAgIHNjcm9sbCA9IF9vcHRpb25zJHNjcm9sbCA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9vcHRpb25zJHNjcm9sbCxcbiAgICAgIF9vcHRpb25zJHJlc2l6ZSA9IG9wdGlvbnMucmVzaXplLFxuICAgICAgcmVzaXplID0gX29wdGlvbnMkcmVzaXplID09PSB2b2lkIDAgPyB0cnVlIDogX29wdGlvbnMkcmVzaXplO1xuICB2YXIgd2luZG93ID0gZ2V0V2luZG93KHN0YXRlLmVsZW1lbnRzLnBvcHBlcik7XG4gIHZhciBzY3JvbGxQYXJlbnRzID0gW10uY29uY2F0KHN0YXRlLnNjcm9sbFBhcmVudHMucmVmZXJlbmNlLCBzdGF0ZS5zY3JvbGxQYXJlbnRzLnBvcHBlcik7XG5cbiAgaWYgKHNjcm9sbCkge1xuICAgIHNjcm9sbFBhcmVudHMuZm9yRWFjaChmdW5jdGlvbiAoc2Nyb2xsUGFyZW50KSB7XG4gICAgICBzY3JvbGxQYXJlbnQuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgaW5zdGFuY2UudXBkYXRlLCBwYXNzaXZlKTtcbiAgICB9KTtcbiAgfVxuXG4gIGlmIChyZXNpemUpIHtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgaW5zdGFuY2UudXBkYXRlLCBwYXNzaXZlKTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHNjcm9sbCkge1xuICAgICAgc2Nyb2xsUGFyZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChzY3JvbGxQYXJlbnQpIHtcbiAgICAgICAgc2Nyb2xsUGFyZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIGluc3RhbmNlLnVwZGF0ZSwgcGFzc2l2ZSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAocmVzaXplKSB7XG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigncmVzaXplJywgaW5zdGFuY2UudXBkYXRlLCBwYXNzaXZlKTtcbiAgICB9XG4gIH07XG59IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcblxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIG5hbWU6ICdldmVudExpc3RlbmVycycsXG4gIGVuYWJsZWQ6IHRydWUsXG4gIHBoYXNlOiAnd3JpdGUnLFxuICBmbjogZnVuY3Rpb24gZm4oKSB7fSxcbiAgZWZmZWN0OiBlZmZlY3QsXG4gIGRhdGE6IHt9XG59OyIsImltcG9ydCB7IGF1dG8gfSBmcm9tIFwiLi4vZW51bXMuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldEJhc2VQbGFjZW1lbnQocGxhY2VtZW50KSB7XG4gIHJldHVybiBwbGFjZW1lbnQuc3BsaXQoJy0nKVswXTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRWYXJpYXRpb24ocGxhY2VtZW50KSB7XG4gIHJldHVybiBwbGFjZW1lbnQuc3BsaXQoJy0nKVsxXTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRNYWluQXhpc0Zyb21QbGFjZW1lbnQocGxhY2VtZW50KSB7XG4gIHJldHVybiBbJ3RvcCcsICdib3R0b20nXS5pbmRleE9mKHBsYWNlbWVudCkgPj0gMCA/ICd4JyA6ICd5Jztcbn0iLCJpbXBvcnQgZ2V0QmFzZVBsYWNlbWVudCBmcm9tIFwiLi9nZXRCYXNlUGxhY2VtZW50LmpzXCI7XG5pbXBvcnQgZ2V0VmFyaWF0aW9uIGZyb20gXCIuL2dldFZhcmlhdGlvbi5qc1wiO1xuaW1wb3J0IGdldE1haW5BeGlzRnJvbVBsYWNlbWVudCBmcm9tIFwiLi9nZXRNYWluQXhpc0Zyb21QbGFjZW1lbnQuanNcIjtcbmltcG9ydCB7IHRvcCwgcmlnaHQsIGJvdHRvbSwgbGVmdCwgc3RhcnQsIGVuZCB9IGZyb20gXCIuLi9lbnVtcy5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY29tcHV0ZU9mZnNldHMoX3JlZikge1xuICB2YXIgcmVmZXJlbmNlID0gX3JlZi5yZWZlcmVuY2UsXG4gICAgICBlbGVtZW50ID0gX3JlZi5lbGVtZW50LFxuICAgICAgcGxhY2VtZW50ID0gX3JlZi5wbGFjZW1lbnQ7XG4gIHZhciBiYXNlUGxhY2VtZW50ID0gcGxhY2VtZW50ID8gZ2V0QmFzZVBsYWNlbWVudChwbGFjZW1lbnQpIDogbnVsbDtcbiAgdmFyIHZhcmlhdGlvbiA9IHBsYWNlbWVudCA/IGdldFZhcmlhdGlvbihwbGFjZW1lbnQpIDogbnVsbDtcbiAgdmFyIGNvbW1vblggPSByZWZlcmVuY2UueCArIHJlZmVyZW5jZS53aWR0aCAvIDIgLSBlbGVtZW50LndpZHRoIC8gMjtcbiAgdmFyIGNvbW1vblkgPSByZWZlcmVuY2UueSArIHJlZmVyZW5jZS5oZWlnaHQgLyAyIC0gZWxlbWVudC5oZWlnaHQgLyAyO1xuICB2YXIgb2Zmc2V0cztcblxuICBzd2l0Y2ggKGJhc2VQbGFjZW1lbnQpIHtcbiAgICBjYXNlIHRvcDpcbiAgICAgIG9mZnNldHMgPSB7XG4gICAgICAgIHg6IGNvbW1vblgsXG4gICAgICAgIHk6IHJlZmVyZW5jZS55IC0gZWxlbWVudC5oZWlnaHRcbiAgICAgIH07XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgYm90dG9tOlxuICAgICAgb2Zmc2V0cyA9IHtcbiAgICAgICAgeDogY29tbW9uWCxcbiAgICAgICAgeTogcmVmZXJlbmNlLnkgKyByZWZlcmVuY2UuaGVpZ2h0XG4gICAgICB9O1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlIHJpZ2h0OlxuICAgICAgb2Zmc2V0cyA9IHtcbiAgICAgICAgeDogcmVmZXJlbmNlLnggKyByZWZlcmVuY2Uud2lkdGgsXG4gICAgICAgIHk6IGNvbW1vbllcbiAgICAgIH07XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgbGVmdDpcbiAgICAgIG9mZnNldHMgPSB7XG4gICAgICAgIHg6IHJlZmVyZW5jZS54IC0gZWxlbWVudC53aWR0aCxcbiAgICAgICAgeTogY29tbW9uWVxuICAgICAgfTtcbiAgICAgIGJyZWFrO1xuXG4gICAgZGVmYXVsdDpcbiAgICAgIG9mZnNldHMgPSB7XG4gICAgICAgIHg6IHJlZmVyZW5jZS54LFxuICAgICAgICB5OiByZWZlcmVuY2UueVxuICAgICAgfTtcbiAgfVxuXG4gIHZhciBtYWluQXhpcyA9IGJhc2VQbGFjZW1lbnQgPyBnZXRNYWluQXhpc0Zyb21QbGFjZW1lbnQoYmFzZVBsYWNlbWVudCkgOiBudWxsO1xuXG4gIGlmIChtYWluQXhpcyAhPSBudWxsKSB7XG4gICAgdmFyIGxlbiA9IG1haW5BeGlzID09PSAneScgPyAnaGVpZ2h0JyA6ICd3aWR0aCc7XG5cbiAgICBzd2l0Y2ggKHZhcmlhdGlvbikge1xuICAgICAgY2FzZSBzdGFydDpcbiAgICAgICAgb2Zmc2V0c1ttYWluQXhpc10gPSBvZmZzZXRzW21haW5BeGlzXSAtIChyZWZlcmVuY2VbbGVuXSAvIDIgLSBlbGVtZW50W2xlbl0gLyAyKTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgZW5kOlxuICAgICAgICBvZmZzZXRzW21haW5BeGlzXSA9IG9mZnNldHNbbWFpbkF4aXNdICsgKHJlZmVyZW5jZVtsZW5dIC8gMiAtIGVsZW1lbnRbbGVuXSAvIDIpO1xuICAgICAgICBicmVhaztcblxuICAgICAgZGVmYXVsdDpcbiAgICB9XG4gIH1cblxuICByZXR1cm4gb2Zmc2V0cztcbn0iLCJpbXBvcnQgeyB0b3AsIGxlZnQsIHJpZ2h0LCBib3R0b20sIGVuZCB9IGZyb20gXCIuLi9lbnVtcy5qc1wiO1xuaW1wb3J0IGdldE9mZnNldFBhcmVudCBmcm9tIFwiLi4vZG9tLXV0aWxzL2dldE9mZnNldFBhcmVudC5qc1wiO1xuaW1wb3J0IGdldFdpbmRvdyBmcm9tIFwiLi4vZG9tLXV0aWxzL2dldFdpbmRvdy5qc1wiO1xuaW1wb3J0IGdldERvY3VtZW50RWxlbWVudCBmcm9tIFwiLi4vZG9tLXV0aWxzL2dldERvY3VtZW50RWxlbWVudC5qc1wiO1xuaW1wb3J0IGdldENvbXB1dGVkU3R5bGUgZnJvbSBcIi4uL2RvbS11dGlscy9nZXRDb21wdXRlZFN0eWxlLmpzXCI7XG5pbXBvcnQgZ2V0QmFzZVBsYWNlbWVudCBmcm9tIFwiLi4vdXRpbHMvZ2V0QmFzZVBsYWNlbWVudC5qc1wiO1xuaW1wb3J0IGdldFZhcmlhdGlvbiBmcm9tIFwiLi4vdXRpbHMvZ2V0VmFyaWF0aW9uLmpzXCI7XG5pbXBvcnQgeyByb3VuZCB9IGZyb20gXCIuLi91dGlscy9tYXRoLmpzXCI7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcblxudmFyIHVuc2V0U2lkZXMgPSB7XG4gIHRvcDogJ2F1dG8nLFxuICByaWdodDogJ2F1dG8nLFxuICBib3R0b206ICdhdXRvJyxcbiAgbGVmdDogJ2F1dG8nXG59OyAvLyBSb3VuZCB0aGUgb2Zmc2V0cyB0byB0aGUgbmVhcmVzdCBzdWl0YWJsZSBzdWJwaXhlbCBiYXNlZCBvbiB0aGUgRFBSLlxuLy8gWm9vbWluZyBjYW4gY2hhbmdlIHRoZSBEUFIsIGJ1dCBpdCBzZWVtcyB0byByZXBvcnQgYSB2YWx1ZSB0aGF0IHdpbGxcbi8vIGNsZWFubHkgZGl2aWRlIHRoZSB2YWx1ZXMgaW50byB0aGUgYXBwcm9wcmlhdGUgc3VicGl4ZWxzLlxuXG5mdW5jdGlvbiByb3VuZE9mZnNldHNCeURQUihfcmVmLCB3aW4pIHtcbiAgdmFyIHggPSBfcmVmLngsXG4gICAgICB5ID0gX3JlZi55O1xuICB2YXIgZHByID0gd2luLmRldmljZVBpeGVsUmF0aW8gfHwgMTtcbiAgcmV0dXJuIHtcbiAgICB4OiByb3VuZCh4ICogZHByKSAvIGRwciB8fCAwLFxuICAgIHk6IHJvdW5kKHkgKiBkcHIpIC8gZHByIHx8IDBcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1hcFRvU3R5bGVzKF9yZWYyKSB7XG4gIHZhciBfT2JqZWN0JGFzc2lnbjI7XG5cbiAgdmFyIHBvcHBlciA9IF9yZWYyLnBvcHBlcixcbiAgICAgIHBvcHBlclJlY3QgPSBfcmVmMi5wb3BwZXJSZWN0LFxuICAgICAgcGxhY2VtZW50ID0gX3JlZjIucGxhY2VtZW50LFxuICAgICAgdmFyaWF0aW9uID0gX3JlZjIudmFyaWF0aW9uLFxuICAgICAgb2Zmc2V0cyA9IF9yZWYyLm9mZnNldHMsXG4gICAgICBwb3NpdGlvbiA9IF9yZWYyLnBvc2l0aW9uLFxuICAgICAgZ3B1QWNjZWxlcmF0aW9uID0gX3JlZjIuZ3B1QWNjZWxlcmF0aW9uLFxuICAgICAgYWRhcHRpdmUgPSBfcmVmMi5hZGFwdGl2ZSxcbiAgICAgIHJvdW5kT2Zmc2V0cyA9IF9yZWYyLnJvdW5kT2Zmc2V0cyxcbiAgICAgIGlzRml4ZWQgPSBfcmVmMi5pc0ZpeGVkO1xuICB2YXIgX29mZnNldHMkeCA9IG9mZnNldHMueCxcbiAgICAgIHggPSBfb2Zmc2V0cyR4ID09PSB2b2lkIDAgPyAwIDogX29mZnNldHMkeCxcbiAgICAgIF9vZmZzZXRzJHkgPSBvZmZzZXRzLnksXG4gICAgICB5ID0gX29mZnNldHMkeSA9PT0gdm9pZCAwID8gMCA6IF9vZmZzZXRzJHk7XG5cbiAgdmFyIF9yZWYzID0gdHlwZW9mIHJvdW5kT2Zmc2V0cyA9PT0gJ2Z1bmN0aW9uJyA/IHJvdW5kT2Zmc2V0cyh7XG4gICAgeDogeCxcbiAgICB5OiB5XG4gIH0pIDoge1xuICAgIHg6IHgsXG4gICAgeTogeVxuICB9O1xuXG4gIHggPSBfcmVmMy54O1xuICB5ID0gX3JlZjMueTtcbiAgdmFyIGhhc1ggPSBvZmZzZXRzLmhhc093blByb3BlcnR5KCd4Jyk7XG4gIHZhciBoYXNZID0gb2Zmc2V0cy5oYXNPd25Qcm9wZXJ0eSgneScpO1xuICB2YXIgc2lkZVggPSBsZWZ0O1xuICB2YXIgc2lkZVkgPSB0b3A7XG4gIHZhciB3aW4gPSB3aW5kb3c7XG5cbiAgaWYgKGFkYXB0aXZlKSB7XG4gICAgdmFyIG9mZnNldFBhcmVudCA9IGdldE9mZnNldFBhcmVudChwb3BwZXIpO1xuICAgIHZhciBoZWlnaHRQcm9wID0gJ2NsaWVudEhlaWdodCc7XG4gICAgdmFyIHdpZHRoUHJvcCA9ICdjbGllbnRXaWR0aCc7XG5cbiAgICBpZiAob2Zmc2V0UGFyZW50ID09PSBnZXRXaW5kb3cocG9wcGVyKSkge1xuICAgICAgb2Zmc2V0UGFyZW50ID0gZ2V0RG9jdW1lbnRFbGVtZW50KHBvcHBlcik7XG5cbiAgICAgIGlmIChnZXRDb21wdXRlZFN0eWxlKG9mZnNldFBhcmVudCkucG9zaXRpb24gIT09ICdzdGF0aWMnICYmIHBvc2l0aW9uID09PSAnYWJzb2x1dGUnKSB7XG4gICAgICAgIGhlaWdodFByb3AgPSAnc2Nyb2xsSGVpZ2h0JztcbiAgICAgICAgd2lkdGhQcm9wID0gJ3Njcm9sbFdpZHRoJztcbiAgICAgIH1cbiAgICB9IC8vICRGbG93Rml4TWVbaW5jb21wYXRpYmxlLWNhc3RdOiBmb3JjZSB0eXBlIHJlZmluZW1lbnQsIHdlIGNvbXBhcmUgb2Zmc2V0UGFyZW50IHdpdGggd2luZG93IGFib3ZlLCBidXQgRmxvdyBkb2Vzbid0IGRldGVjdCBpdFxuXG5cbiAgICBvZmZzZXRQYXJlbnQgPSBvZmZzZXRQYXJlbnQ7XG5cbiAgICBpZiAocGxhY2VtZW50ID09PSB0b3AgfHwgKHBsYWNlbWVudCA9PT0gbGVmdCB8fCBwbGFjZW1lbnQgPT09IHJpZ2h0KSAmJiB2YXJpYXRpb24gPT09IGVuZCkge1xuICAgICAgc2lkZVkgPSBib3R0b207XG4gICAgICB2YXIgb2Zmc2V0WSA9IGlzRml4ZWQgJiYgb2Zmc2V0UGFyZW50ID09PSB3aW4gJiYgd2luLnZpc3VhbFZpZXdwb3J0ID8gd2luLnZpc3VhbFZpZXdwb3J0LmhlaWdodCA6IC8vICRGbG93Rml4TWVbcHJvcC1taXNzaW5nXVxuICAgICAgb2Zmc2V0UGFyZW50W2hlaWdodFByb3BdO1xuICAgICAgeSAtPSBvZmZzZXRZIC0gcG9wcGVyUmVjdC5oZWlnaHQ7XG4gICAgICB5ICo9IGdwdUFjY2VsZXJhdGlvbiA/IDEgOiAtMTtcbiAgICB9XG5cbiAgICBpZiAocGxhY2VtZW50ID09PSBsZWZ0IHx8IChwbGFjZW1lbnQgPT09IHRvcCB8fCBwbGFjZW1lbnQgPT09IGJvdHRvbSkgJiYgdmFyaWF0aW9uID09PSBlbmQpIHtcbiAgICAgIHNpZGVYID0gcmlnaHQ7XG4gICAgICB2YXIgb2Zmc2V0WCA9IGlzRml4ZWQgJiYgb2Zmc2V0UGFyZW50ID09PSB3aW4gJiYgd2luLnZpc3VhbFZpZXdwb3J0ID8gd2luLnZpc3VhbFZpZXdwb3J0LndpZHRoIDogLy8gJEZsb3dGaXhNZVtwcm9wLW1pc3NpbmddXG4gICAgICBvZmZzZXRQYXJlbnRbd2lkdGhQcm9wXTtcbiAgICAgIHggLT0gb2Zmc2V0WCAtIHBvcHBlclJlY3Qud2lkdGg7XG4gICAgICB4ICo9IGdwdUFjY2VsZXJhdGlvbiA/IDEgOiAtMTtcbiAgICB9XG4gIH1cblxuICB2YXIgY29tbW9uU3R5bGVzID0gT2JqZWN0LmFzc2lnbih7XG4gICAgcG9zaXRpb246IHBvc2l0aW9uXG4gIH0sIGFkYXB0aXZlICYmIHVuc2V0U2lkZXMpO1xuXG4gIHZhciBfcmVmNCA9IHJvdW5kT2Zmc2V0cyA9PT0gdHJ1ZSA/IHJvdW5kT2Zmc2V0c0J5RFBSKHtcbiAgICB4OiB4LFxuICAgIHk6IHlcbiAgfSwgZ2V0V2luZG93KHBvcHBlcikpIDoge1xuICAgIHg6IHgsXG4gICAgeTogeVxuICB9O1xuXG4gIHggPSBfcmVmNC54O1xuICB5ID0gX3JlZjQueTtcblxuICBpZiAoZ3B1QWNjZWxlcmF0aW9uKSB7XG4gICAgdmFyIF9PYmplY3QkYXNzaWduO1xuXG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIGNvbW1vblN0eWxlcywgKF9PYmplY3QkYXNzaWduID0ge30sIF9PYmplY3QkYXNzaWduW3NpZGVZXSA9IGhhc1kgPyAnMCcgOiAnJywgX09iamVjdCRhc3NpZ25bc2lkZVhdID0gaGFzWCA/ICcwJyA6ICcnLCBfT2JqZWN0JGFzc2lnbi50cmFuc2Zvcm0gPSAod2luLmRldmljZVBpeGVsUmF0aW8gfHwgMSkgPD0gMSA/IFwidHJhbnNsYXRlKFwiICsgeCArIFwicHgsIFwiICsgeSArIFwicHgpXCIgOiBcInRyYW5zbGF0ZTNkKFwiICsgeCArIFwicHgsIFwiICsgeSArIFwicHgsIDApXCIsIF9PYmplY3QkYXNzaWduKSk7XG4gIH1cblxuICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgY29tbW9uU3R5bGVzLCAoX09iamVjdCRhc3NpZ24yID0ge30sIF9PYmplY3QkYXNzaWduMltzaWRlWV0gPSBoYXNZID8geSArIFwicHhcIiA6ICcnLCBfT2JqZWN0JGFzc2lnbjJbc2lkZVhdID0gaGFzWCA/IHggKyBcInB4XCIgOiAnJywgX09iamVjdCRhc3NpZ24yLnRyYW5zZm9ybSA9ICcnLCBfT2JqZWN0JGFzc2lnbjIpKTtcbn1cblxuZnVuY3Rpb24gY29tcHV0ZVN0eWxlcyhfcmVmNSkge1xuICB2YXIgc3RhdGUgPSBfcmVmNS5zdGF0ZSxcbiAgICAgIG9wdGlvbnMgPSBfcmVmNS5vcHRpb25zO1xuICB2YXIgX29wdGlvbnMkZ3B1QWNjZWxlcmF0ID0gb3B0aW9ucy5ncHVBY2NlbGVyYXRpb24sXG4gICAgICBncHVBY2NlbGVyYXRpb24gPSBfb3B0aW9ucyRncHVBY2NlbGVyYXQgPT09IHZvaWQgMCA/IHRydWUgOiBfb3B0aW9ucyRncHVBY2NlbGVyYXQsXG4gICAgICBfb3B0aW9ucyRhZGFwdGl2ZSA9IG9wdGlvbnMuYWRhcHRpdmUsXG4gICAgICBhZGFwdGl2ZSA9IF9vcHRpb25zJGFkYXB0aXZlID09PSB2b2lkIDAgPyB0cnVlIDogX29wdGlvbnMkYWRhcHRpdmUsXG4gICAgICBfb3B0aW9ucyRyb3VuZE9mZnNldHMgPSBvcHRpb25zLnJvdW5kT2Zmc2V0cyxcbiAgICAgIHJvdW5kT2Zmc2V0cyA9IF9vcHRpb25zJHJvdW5kT2Zmc2V0cyA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9vcHRpb25zJHJvdW5kT2Zmc2V0cztcbiAgdmFyIGNvbW1vblN0eWxlcyA9IHtcbiAgICBwbGFjZW1lbnQ6IGdldEJhc2VQbGFjZW1lbnQoc3RhdGUucGxhY2VtZW50KSxcbiAgICB2YXJpYXRpb246IGdldFZhcmlhdGlvbihzdGF0ZS5wbGFjZW1lbnQpLFxuICAgIHBvcHBlcjogc3RhdGUuZWxlbWVudHMucG9wcGVyLFxuICAgIHBvcHBlclJlY3Q6IHN0YXRlLnJlY3RzLnBvcHBlcixcbiAgICBncHVBY2NlbGVyYXRpb246IGdwdUFjY2VsZXJhdGlvbixcbiAgICBpc0ZpeGVkOiBzdGF0ZS5vcHRpb25zLnN0cmF0ZWd5ID09PSAnZml4ZWQnXG4gIH07XG5cbiAgaWYgKHN0YXRlLm1vZGlmaWVyc0RhdGEucG9wcGVyT2Zmc2V0cyAhPSBudWxsKSB7XG4gICAgc3RhdGUuc3R5bGVzLnBvcHBlciA9IE9iamVjdC5hc3NpZ24oe30sIHN0YXRlLnN0eWxlcy5wb3BwZXIsIG1hcFRvU3R5bGVzKE9iamVjdC5hc3NpZ24oe30sIGNvbW1vblN0eWxlcywge1xuICAgICAgb2Zmc2V0czogc3RhdGUubW9kaWZpZXJzRGF0YS5wb3BwZXJPZmZzZXRzLFxuICAgICAgcG9zaXRpb246IHN0YXRlLm9wdGlvbnMuc3RyYXRlZ3ksXG4gICAgICBhZGFwdGl2ZTogYWRhcHRpdmUsXG4gICAgICByb3VuZE9mZnNldHM6IHJvdW5kT2Zmc2V0c1xuICAgIH0pKSk7XG4gIH1cblxuICBpZiAoc3RhdGUubW9kaWZpZXJzRGF0YS5hcnJvdyAhPSBudWxsKSB7XG4gICAgc3RhdGUuc3R5bGVzLmFycm93ID0gT2JqZWN0LmFzc2lnbih7fSwgc3RhdGUuc3R5bGVzLmFycm93LCBtYXBUb1N0eWxlcyhPYmplY3QuYXNzaWduKHt9LCBjb21tb25TdHlsZXMsIHtcbiAgICAgIG9mZnNldHM6IHN0YXRlLm1vZGlmaWVyc0RhdGEuYXJyb3csXG4gICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgIGFkYXB0aXZlOiBmYWxzZSxcbiAgICAgIHJvdW5kT2Zmc2V0czogcm91bmRPZmZzZXRzXG4gICAgfSkpKTtcbiAgfVxuXG4gIHN0YXRlLmF0dHJpYnV0ZXMucG9wcGVyID0gT2JqZWN0LmFzc2lnbih7fSwgc3RhdGUuYXR0cmlidXRlcy5wb3BwZXIsIHtcbiAgICAnZGF0YS1wb3BwZXItcGxhY2VtZW50Jzogc3RhdGUucGxhY2VtZW50XG4gIH0pO1xufSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cblxuZXhwb3J0IGRlZmF1bHQge1xuICBuYW1lOiAnY29tcHV0ZVN0eWxlcycsXG4gIGVuYWJsZWQ6IHRydWUsXG4gIHBoYXNlOiAnYmVmb3JlV3JpdGUnLFxuICBmbjogY29tcHV0ZVN0eWxlcyxcbiAgZGF0YToge31cbn07IiwiaW1wb3J0IGdldE5vZGVOYW1lIGZyb20gXCIuLi9kb20tdXRpbHMvZ2V0Tm9kZU5hbWUuanNcIjtcbmltcG9ydCB7IGlzSFRNTEVsZW1lbnQgfSBmcm9tIFwiLi4vZG9tLXV0aWxzL2luc3RhbmNlT2YuanNcIjsgLy8gVGhpcyBtb2RpZmllciB0YWtlcyB0aGUgc3R5bGVzIHByZXBhcmVkIGJ5IHRoZSBgY29tcHV0ZVN0eWxlc2AgbW9kaWZpZXJcbi8vIGFuZCBhcHBsaWVzIHRoZW0gdG8gdGhlIEhUTUxFbGVtZW50cyBzdWNoIGFzIHBvcHBlciBhbmQgYXJyb3dcblxuZnVuY3Rpb24gYXBwbHlTdHlsZXMoX3JlZikge1xuICB2YXIgc3RhdGUgPSBfcmVmLnN0YXRlO1xuICBPYmplY3Qua2V5cyhzdGF0ZS5lbGVtZW50cykuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuICAgIHZhciBzdHlsZSA9IHN0YXRlLnN0eWxlc1tuYW1lXSB8fCB7fTtcbiAgICB2YXIgYXR0cmlidXRlcyA9IHN0YXRlLmF0dHJpYnV0ZXNbbmFtZV0gfHwge307XG4gICAgdmFyIGVsZW1lbnQgPSBzdGF0ZS5lbGVtZW50c1tuYW1lXTsgLy8gYXJyb3cgaXMgb3B0aW9uYWwgKyB2aXJ0dWFsIGVsZW1lbnRzXG5cbiAgICBpZiAoIWlzSFRNTEVsZW1lbnQoZWxlbWVudCkgfHwgIWdldE5vZGVOYW1lKGVsZW1lbnQpKSB7XG4gICAgICByZXR1cm47XG4gICAgfSAvLyBGbG93IGRvZXNuJ3Qgc3VwcG9ydCB0byBleHRlbmQgdGhpcyBwcm9wZXJ0eSwgYnV0IGl0J3MgdGhlIG1vc3RcbiAgICAvLyBlZmZlY3RpdmUgd2F5IHRvIGFwcGx5IHN0eWxlcyB0byBhbiBIVE1MRWxlbWVudFxuICAgIC8vICRGbG93Rml4TWVbY2Fubm90LXdyaXRlXVxuXG5cbiAgICBPYmplY3QuYXNzaWduKGVsZW1lbnQuc3R5bGUsIHN0eWxlKTtcbiAgICBPYmplY3Qua2V5cyhhdHRyaWJ1dGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICB2YXIgdmFsdWUgPSBhdHRyaWJ1dGVzW25hbWVdO1xuXG4gICAgICBpZiAodmFsdWUgPT09IGZhbHNlKSB7XG4gICAgICAgIGVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKG5hbWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUobmFtZSwgdmFsdWUgPT09IHRydWUgPyAnJyA6IHZhbHVlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGVmZmVjdChfcmVmMikge1xuICB2YXIgc3RhdGUgPSBfcmVmMi5zdGF0ZTtcbiAgdmFyIGluaXRpYWxTdHlsZXMgPSB7XG4gICAgcG9wcGVyOiB7XG4gICAgICBwb3NpdGlvbjogc3RhdGUub3B0aW9ucy5zdHJhdGVneSxcbiAgICAgIGxlZnQ6ICcwJyxcbiAgICAgIHRvcDogJzAnLFxuICAgICAgbWFyZ2luOiAnMCdcbiAgICB9LFxuICAgIGFycm93OiB7XG4gICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJ1xuICAgIH0sXG4gICAgcmVmZXJlbmNlOiB7fVxuICB9O1xuICBPYmplY3QuYXNzaWduKHN0YXRlLmVsZW1lbnRzLnBvcHBlci5zdHlsZSwgaW5pdGlhbFN0eWxlcy5wb3BwZXIpO1xuICBzdGF0ZS5zdHlsZXMgPSBpbml0aWFsU3R5bGVzO1xuXG4gIGlmIChzdGF0ZS5lbGVtZW50cy5hcnJvdykge1xuICAgIE9iamVjdC5hc3NpZ24oc3RhdGUuZWxlbWVudHMuYXJyb3cuc3R5bGUsIGluaXRpYWxTdHlsZXMuYXJyb3cpO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBPYmplY3Qua2V5cyhzdGF0ZS5lbGVtZW50cykuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuICAgICAgdmFyIGVsZW1lbnQgPSBzdGF0ZS5lbGVtZW50c1tuYW1lXTtcbiAgICAgIHZhciBhdHRyaWJ1dGVzID0gc3RhdGUuYXR0cmlidXRlc1tuYW1lXSB8fCB7fTtcbiAgICAgIHZhciBzdHlsZVByb3BlcnRpZXMgPSBPYmplY3Qua2V5cyhzdGF0ZS5zdHlsZXMuaGFzT3duUHJvcGVydHkobmFtZSkgPyBzdGF0ZS5zdHlsZXNbbmFtZV0gOiBpbml0aWFsU3R5bGVzW25hbWVdKTsgLy8gU2V0IGFsbCB2YWx1ZXMgdG8gYW4gZW1wdHkgc3RyaW5nIHRvIHVuc2V0IHRoZW1cblxuICAgICAgdmFyIHN0eWxlID0gc3R5bGVQcm9wZXJ0aWVzLnJlZHVjZShmdW5jdGlvbiAoc3R5bGUsIHByb3BlcnR5KSB7XG4gICAgICAgIHN0eWxlW3Byb3BlcnR5XSA9ICcnO1xuICAgICAgICByZXR1cm4gc3R5bGU7XG4gICAgICB9LCB7fSk7IC8vIGFycm93IGlzIG9wdGlvbmFsICsgdmlydHVhbCBlbGVtZW50c1xuXG4gICAgICBpZiAoIWlzSFRNTEVsZW1lbnQoZWxlbWVudCkgfHwgIWdldE5vZGVOYW1lKGVsZW1lbnQpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgT2JqZWN0LmFzc2lnbihlbGVtZW50LnN0eWxlLCBzdHlsZSk7XG4gICAgICBPYmplY3Qua2V5cyhhdHRyaWJ1dGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChhdHRyaWJ1dGUpIHtcbiAgICAgICAgZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoYXR0cmlidXRlKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9O1xufSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cblxuZXhwb3J0IGRlZmF1bHQge1xuICBuYW1lOiAnYXBwbHlTdHlsZXMnLFxuICBlbmFibGVkOiB0cnVlLFxuICBwaGFzZTogJ3dyaXRlJyxcbiAgZm46IGFwcGx5U3R5bGVzLFxuICBlZmZlY3Q6IGVmZmVjdCxcbiAgcmVxdWlyZXM6IFsnY29tcHV0ZVN0eWxlcyddXG59OyIsInZhciBoYXNoID0ge1xuICBsZWZ0OiAncmlnaHQnLFxuICByaWdodDogJ2xlZnQnLFxuICBib3R0b206ICd0b3AnLFxuICB0b3A6ICdib3R0b20nXG59O1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0T3Bwb3NpdGVQbGFjZW1lbnQocGxhY2VtZW50KSB7XG4gIHJldHVybiBwbGFjZW1lbnQucmVwbGFjZSgvbGVmdHxyaWdodHxib3R0b218dG9wL2csIGZ1bmN0aW9uIChtYXRjaGVkKSB7XG4gICAgcmV0dXJuIGhhc2hbbWF0Y2hlZF07XG4gIH0pO1xufSIsInZhciBoYXNoID0ge1xuICBzdGFydDogJ2VuZCcsXG4gIGVuZDogJ3N0YXJ0J1xufTtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldE9wcG9zaXRlVmFyaWF0aW9uUGxhY2VtZW50KHBsYWNlbWVudCkge1xuICByZXR1cm4gcGxhY2VtZW50LnJlcGxhY2UoL3N0YXJ0fGVuZC9nLCBmdW5jdGlvbiAobWF0Y2hlZCkge1xuICAgIHJldHVybiBoYXNoW21hdGNoZWRdO1xuICB9KTtcbn0iLCJpbXBvcnQgeyBpc1NoYWRvd1Jvb3QgfSBmcm9tIFwiLi9pbnN0YW5jZU9mLmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjb250YWlucyhwYXJlbnQsIGNoaWxkKSB7XG4gIHZhciByb290Tm9kZSA9IGNoaWxkLmdldFJvb3ROb2RlICYmIGNoaWxkLmdldFJvb3ROb2RlKCk7IC8vIEZpcnN0LCBhdHRlbXB0IHdpdGggZmFzdGVyIG5hdGl2ZSBtZXRob2RcblxuICBpZiAocGFyZW50LmNvbnRhaW5zKGNoaWxkKSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9IC8vIHRoZW4gZmFsbGJhY2sgdG8gY3VzdG9tIGltcGxlbWVudGF0aW9uIHdpdGggU2hhZG93IERPTSBzdXBwb3J0XG4gIGVsc2UgaWYgKHJvb3ROb2RlICYmIGlzU2hhZG93Um9vdChyb290Tm9kZSkpIHtcbiAgICAgIHZhciBuZXh0ID0gY2hpbGQ7XG5cbiAgICAgIGRvIHtcbiAgICAgICAgaWYgKG5leHQgJiYgcGFyZW50LmlzU2FtZU5vZGUobmV4dCkpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSAvLyAkRmxvd0ZpeE1lW3Byb3AtbWlzc2luZ106IG5lZWQgYSBiZXR0ZXIgd2F5IHRvIGhhbmRsZSB0aGlzLi4uXG5cblxuICAgICAgICBuZXh0ID0gbmV4dC5wYXJlbnROb2RlIHx8IG5leHQuaG9zdDtcbiAgICAgIH0gd2hpbGUgKG5leHQpO1xuICAgIH0gLy8gR2l2ZSB1cCwgdGhlIHJlc3VsdCBpcyBmYWxzZVxuXG5cbiAgcmV0dXJuIGZhbHNlO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJlY3RUb0NsaWVudFJlY3QocmVjdCkge1xuICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgcmVjdCwge1xuICAgIGxlZnQ6IHJlY3QueCxcbiAgICB0b3A6IHJlY3QueSxcbiAgICByaWdodDogcmVjdC54ICsgcmVjdC53aWR0aCxcbiAgICBib3R0b206IHJlY3QueSArIHJlY3QuaGVpZ2h0XG4gIH0pO1xufSIsImltcG9ydCB7IHZpZXdwb3J0IH0gZnJvbSBcIi4uL2VudW1zLmpzXCI7XG5pbXBvcnQgZ2V0Vmlld3BvcnRSZWN0IGZyb20gXCIuL2dldFZpZXdwb3J0UmVjdC5qc1wiO1xuaW1wb3J0IGdldERvY3VtZW50UmVjdCBmcm9tIFwiLi9nZXREb2N1bWVudFJlY3QuanNcIjtcbmltcG9ydCBsaXN0U2Nyb2xsUGFyZW50cyBmcm9tIFwiLi9saXN0U2Nyb2xsUGFyZW50cy5qc1wiO1xuaW1wb3J0IGdldE9mZnNldFBhcmVudCBmcm9tIFwiLi9nZXRPZmZzZXRQYXJlbnQuanNcIjtcbmltcG9ydCBnZXREb2N1bWVudEVsZW1lbnQgZnJvbSBcIi4vZ2V0RG9jdW1lbnRFbGVtZW50LmpzXCI7XG5pbXBvcnQgZ2V0Q29tcHV0ZWRTdHlsZSBmcm9tIFwiLi9nZXRDb21wdXRlZFN0eWxlLmpzXCI7XG5pbXBvcnQgeyBpc0VsZW1lbnQsIGlzSFRNTEVsZW1lbnQgfSBmcm9tIFwiLi9pbnN0YW5jZU9mLmpzXCI7XG5pbXBvcnQgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IGZyb20gXCIuL2dldEJvdW5kaW5nQ2xpZW50UmVjdC5qc1wiO1xuaW1wb3J0IGdldFBhcmVudE5vZGUgZnJvbSBcIi4vZ2V0UGFyZW50Tm9kZS5qc1wiO1xuaW1wb3J0IGNvbnRhaW5zIGZyb20gXCIuL2NvbnRhaW5zLmpzXCI7XG5pbXBvcnQgZ2V0Tm9kZU5hbWUgZnJvbSBcIi4vZ2V0Tm9kZU5hbWUuanNcIjtcbmltcG9ydCByZWN0VG9DbGllbnRSZWN0IGZyb20gXCIuLi91dGlscy9yZWN0VG9DbGllbnRSZWN0LmpzXCI7XG5pbXBvcnQgeyBtYXgsIG1pbiB9IGZyb20gXCIuLi91dGlscy9tYXRoLmpzXCI7XG5cbmZ1bmN0aW9uIGdldElubmVyQm91bmRpbmdDbGllbnRSZWN0KGVsZW1lbnQsIHN0cmF0ZWd5KSB7XG4gIHZhciByZWN0ID0gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KGVsZW1lbnQsIGZhbHNlLCBzdHJhdGVneSA9PT0gJ2ZpeGVkJyk7XG4gIHJlY3QudG9wID0gcmVjdC50b3AgKyBlbGVtZW50LmNsaWVudFRvcDtcbiAgcmVjdC5sZWZ0ID0gcmVjdC5sZWZ0ICsgZWxlbWVudC5jbGllbnRMZWZ0O1xuICByZWN0LmJvdHRvbSA9IHJlY3QudG9wICsgZWxlbWVudC5jbGllbnRIZWlnaHQ7XG4gIHJlY3QucmlnaHQgPSByZWN0LmxlZnQgKyBlbGVtZW50LmNsaWVudFdpZHRoO1xuICByZWN0LndpZHRoID0gZWxlbWVudC5jbGllbnRXaWR0aDtcbiAgcmVjdC5oZWlnaHQgPSBlbGVtZW50LmNsaWVudEhlaWdodDtcbiAgcmVjdC54ID0gcmVjdC5sZWZ0O1xuICByZWN0LnkgPSByZWN0LnRvcDtcbiAgcmV0dXJuIHJlY3Q7XG59XG5cbmZ1bmN0aW9uIGdldENsaWVudFJlY3RGcm9tTWl4ZWRUeXBlKGVsZW1lbnQsIGNsaXBwaW5nUGFyZW50LCBzdHJhdGVneSkge1xuICByZXR1cm4gY2xpcHBpbmdQYXJlbnQgPT09IHZpZXdwb3J0ID8gcmVjdFRvQ2xpZW50UmVjdChnZXRWaWV3cG9ydFJlY3QoZWxlbWVudCwgc3RyYXRlZ3kpKSA6IGlzRWxlbWVudChjbGlwcGluZ1BhcmVudCkgPyBnZXRJbm5lckJvdW5kaW5nQ2xpZW50UmVjdChjbGlwcGluZ1BhcmVudCwgc3RyYXRlZ3kpIDogcmVjdFRvQ2xpZW50UmVjdChnZXREb2N1bWVudFJlY3QoZ2V0RG9jdW1lbnRFbGVtZW50KGVsZW1lbnQpKSk7XG59IC8vIEEgXCJjbGlwcGluZyBwYXJlbnRcIiBpcyBhbiBvdmVyZmxvd2FibGUgY29udGFpbmVyIHdpdGggdGhlIGNoYXJhY3RlcmlzdGljIG9mXG4vLyBjbGlwcGluZyAob3IgaGlkaW5nKSBvdmVyZmxvd2luZyBlbGVtZW50cyB3aXRoIGEgcG9zaXRpb24gZGlmZmVyZW50IGZyb21cbi8vIGBpbml0aWFsYFxuXG5cbmZ1bmN0aW9uIGdldENsaXBwaW5nUGFyZW50cyhlbGVtZW50KSB7XG4gIHZhciBjbGlwcGluZ1BhcmVudHMgPSBsaXN0U2Nyb2xsUGFyZW50cyhnZXRQYXJlbnROb2RlKGVsZW1lbnQpKTtcbiAgdmFyIGNhbkVzY2FwZUNsaXBwaW5nID0gWydhYnNvbHV0ZScsICdmaXhlZCddLmluZGV4T2YoZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KS5wb3NpdGlvbikgPj0gMDtcbiAgdmFyIGNsaXBwZXJFbGVtZW50ID0gY2FuRXNjYXBlQ2xpcHBpbmcgJiYgaXNIVE1MRWxlbWVudChlbGVtZW50KSA/IGdldE9mZnNldFBhcmVudChlbGVtZW50KSA6IGVsZW1lbnQ7XG5cbiAgaWYgKCFpc0VsZW1lbnQoY2xpcHBlckVsZW1lbnQpKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9IC8vICRGbG93Rml4TWVbaW5jb21wYXRpYmxlLXJldHVybl06IGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9mbG93L2lzc3Vlcy8xNDE0XG5cblxuICByZXR1cm4gY2xpcHBpbmdQYXJlbnRzLmZpbHRlcihmdW5jdGlvbiAoY2xpcHBpbmdQYXJlbnQpIHtcbiAgICByZXR1cm4gaXNFbGVtZW50KGNsaXBwaW5nUGFyZW50KSAmJiBjb250YWlucyhjbGlwcGluZ1BhcmVudCwgY2xpcHBlckVsZW1lbnQpICYmIGdldE5vZGVOYW1lKGNsaXBwaW5nUGFyZW50KSAhPT0gJ2JvZHknO1xuICB9KTtcbn0gLy8gR2V0cyB0aGUgbWF4aW11bSBhcmVhIHRoYXQgdGhlIGVsZW1lbnQgaXMgdmlzaWJsZSBpbiBkdWUgdG8gYW55IG51bWJlciBvZlxuLy8gY2xpcHBpbmcgcGFyZW50c1xuXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldENsaXBwaW5nUmVjdChlbGVtZW50LCBib3VuZGFyeSwgcm9vdEJvdW5kYXJ5LCBzdHJhdGVneSkge1xuICB2YXIgbWFpbkNsaXBwaW5nUGFyZW50cyA9IGJvdW5kYXJ5ID09PSAnY2xpcHBpbmdQYXJlbnRzJyA/IGdldENsaXBwaW5nUGFyZW50cyhlbGVtZW50KSA6IFtdLmNvbmNhdChib3VuZGFyeSk7XG4gIHZhciBjbGlwcGluZ1BhcmVudHMgPSBbXS5jb25jYXQobWFpbkNsaXBwaW5nUGFyZW50cywgW3Jvb3RCb3VuZGFyeV0pO1xuICB2YXIgZmlyc3RDbGlwcGluZ1BhcmVudCA9IGNsaXBwaW5nUGFyZW50c1swXTtcbiAgdmFyIGNsaXBwaW5nUmVjdCA9IGNsaXBwaW5nUGFyZW50cy5yZWR1Y2UoZnVuY3Rpb24gKGFjY1JlY3QsIGNsaXBwaW5nUGFyZW50KSB7XG4gICAgdmFyIHJlY3QgPSBnZXRDbGllbnRSZWN0RnJvbU1peGVkVHlwZShlbGVtZW50LCBjbGlwcGluZ1BhcmVudCwgc3RyYXRlZ3kpO1xuICAgIGFjY1JlY3QudG9wID0gbWF4KHJlY3QudG9wLCBhY2NSZWN0LnRvcCk7XG4gICAgYWNjUmVjdC5yaWdodCA9IG1pbihyZWN0LnJpZ2h0LCBhY2NSZWN0LnJpZ2h0KTtcbiAgICBhY2NSZWN0LmJvdHRvbSA9IG1pbihyZWN0LmJvdHRvbSwgYWNjUmVjdC5ib3R0b20pO1xuICAgIGFjY1JlY3QubGVmdCA9IG1heChyZWN0LmxlZnQsIGFjY1JlY3QubGVmdCk7XG4gICAgcmV0dXJuIGFjY1JlY3Q7XG4gIH0sIGdldENsaWVudFJlY3RGcm9tTWl4ZWRUeXBlKGVsZW1lbnQsIGZpcnN0Q2xpcHBpbmdQYXJlbnQsIHN0cmF0ZWd5KSk7XG4gIGNsaXBwaW5nUmVjdC53aWR0aCA9IGNsaXBwaW5nUmVjdC5yaWdodCAtIGNsaXBwaW5nUmVjdC5sZWZ0O1xuICBjbGlwcGluZ1JlY3QuaGVpZ2h0ID0gY2xpcHBpbmdSZWN0LmJvdHRvbSAtIGNsaXBwaW5nUmVjdC50b3A7XG4gIGNsaXBwaW5nUmVjdC54ID0gY2xpcHBpbmdSZWN0LmxlZnQ7XG4gIGNsaXBwaW5nUmVjdC55ID0gY2xpcHBpbmdSZWN0LnRvcDtcbiAgcmV0dXJuIGNsaXBwaW5nUmVjdDtcbn0iLCJpbXBvcnQgZ2V0V2luZG93IGZyb20gXCIuL2dldFdpbmRvdy5qc1wiO1xuaW1wb3J0IGdldERvY3VtZW50RWxlbWVudCBmcm9tIFwiLi9nZXREb2N1bWVudEVsZW1lbnQuanNcIjtcbmltcG9ydCBnZXRXaW5kb3dTY3JvbGxCYXJYIGZyb20gXCIuL2dldFdpbmRvd1Njcm9sbEJhclguanNcIjtcbmltcG9ydCBpc0xheW91dFZpZXdwb3J0IGZyb20gXCIuL2lzTGF5b3V0Vmlld3BvcnQuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFZpZXdwb3J0UmVjdChlbGVtZW50LCBzdHJhdGVneSkge1xuICB2YXIgd2luID0gZ2V0V2luZG93KGVsZW1lbnQpO1xuICB2YXIgaHRtbCA9IGdldERvY3VtZW50RWxlbWVudChlbGVtZW50KTtcbiAgdmFyIHZpc3VhbFZpZXdwb3J0ID0gd2luLnZpc3VhbFZpZXdwb3J0O1xuICB2YXIgd2lkdGggPSBodG1sLmNsaWVudFdpZHRoO1xuICB2YXIgaGVpZ2h0ID0gaHRtbC5jbGllbnRIZWlnaHQ7XG4gIHZhciB4ID0gMDtcbiAgdmFyIHkgPSAwO1xuXG4gIGlmICh2aXN1YWxWaWV3cG9ydCkge1xuICAgIHdpZHRoID0gdmlzdWFsVmlld3BvcnQud2lkdGg7XG4gICAgaGVpZ2h0ID0gdmlzdWFsVmlld3BvcnQuaGVpZ2h0O1xuICAgIHZhciBsYXlvdXRWaWV3cG9ydCA9IGlzTGF5b3V0Vmlld3BvcnQoKTtcblxuICAgIGlmIChsYXlvdXRWaWV3cG9ydCB8fCAhbGF5b3V0Vmlld3BvcnQgJiYgc3RyYXRlZ3kgPT09ICdmaXhlZCcpIHtcbiAgICAgIHggPSB2aXN1YWxWaWV3cG9ydC5vZmZzZXRMZWZ0O1xuICAgICAgeSA9IHZpc3VhbFZpZXdwb3J0Lm9mZnNldFRvcDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHdpZHRoOiB3aWR0aCxcbiAgICBoZWlnaHQ6IGhlaWdodCxcbiAgICB4OiB4ICsgZ2V0V2luZG93U2Nyb2xsQmFyWChlbGVtZW50KSxcbiAgICB5OiB5XG4gIH07XG59IiwiaW1wb3J0IGdldERvY3VtZW50RWxlbWVudCBmcm9tIFwiLi9nZXREb2N1bWVudEVsZW1lbnQuanNcIjtcbmltcG9ydCBnZXRDb21wdXRlZFN0eWxlIGZyb20gXCIuL2dldENvbXB1dGVkU3R5bGUuanNcIjtcbmltcG9ydCBnZXRXaW5kb3dTY3JvbGxCYXJYIGZyb20gXCIuL2dldFdpbmRvd1Njcm9sbEJhclguanNcIjtcbmltcG9ydCBnZXRXaW5kb3dTY3JvbGwgZnJvbSBcIi4vZ2V0V2luZG93U2Nyb2xsLmpzXCI7XG5pbXBvcnQgeyBtYXggfSBmcm9tIFwiLi4vdXRpbHMvbWF0aC5qc1wiOyAvLyBHZXRzIHRoZSBlbnRpcmUgc2l6ZSBvZiB0aGUgc2Nyb2xsYWJsZSBkb2N1bWVudCBhcmVhLCBldmVuIGV4dGVuZGluZyBvdXRzaWRlXG4vLyBvZiB0aGUgYDxodG1sPmAgYW5kIGA8Ym9keT5gIHJlY3QgYm91bmRzIGlmIGhvcml6b250YWxseSBzY3JvbGxhYmxlXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldERvY3VtZW50UmVjdChlbGVtZW50KSB7XG4gIHZhciBfZWxlbWVudCRvd25lckRvY3VtZW47XG5cbiAgdmFyIGh0bWwgPSBnZXREb2N1bWVudEVsZW1lbnQoZWxlbWVudCk7XG4gIHZhciB3aW5TY3JvbGwgPSBnZXRXaW5kb3dTY3JvbGwoZWxlbWVudCk7XG4gIHZhciBib2R5ID0gKF9lbGVtZW50JG93bmVyRG9jdW1lbiA9IGVsZW1lbnQub3duZXJEb2N1bWVudCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9lbGVtZW50JG93bmVyRG9jdW1lbi5ib2R5O1xuICB2YXIgd2lkdGggPSBtYXgoaHRtbC5zY3JvbGxXaWR0aCwgaHRtbC5jbGllbnRXaWR0aCwgYm9keSA/IGJvZHkuc2Nyb2xsV2lkdGggOiAwLCBib2R5ID8gYm9keS5jbGllbnRXaWR0aCA6IDApO1xuICB2YXIgaGVpZ2h0ID0gbWF4KGh0bWwuc2Nyb2xsSGVpZ2h0LCBodG1sLmNsaWVudEhlaWdodCwgYm9keSA/IGJvZHkuc2Nyb2xsSGVpZ2h0IDogMCwgYm9keSA/IGJvZHkuY2xpZW50SGVpZ2h0IDogMCk7XG4gIHZhciB4ID0gLXdpblNjcm9sbC5zY3JvbGxMZWZ0ICsgZ2V0V2luZG93U2Nyb2xsQmFyWChlbGVtZW50KTtcbiAgdmFyIHkgPSAtd2luU2Nyb2xsLnNjcm9sbFRvcDtcblxuICBpZiAoZ2V0Q29tcHV0ZWRTdHlsZShib2R5IHx8IGh0bWwpLmRpcmVjdGlvbiA9PT0gJ3J0bCcpIHtcbiAgICB4ICs9IG1heChodG1sLmNsaWVudFdpZHRoLCBib2R5ID8gYm9keS5jbGllbnRXaWR0aCA6IDApIC0gd2lkdGg7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHdpZHRoOiB3aWR0aCxcbiAgICBoZWlnaHQ6IGhlaWdodCxcbiAgICB4OiB4LFxuICAgIHk6IHlcbiAgfTtcbn0iLCJpbXBvcnQgZ2V0RnJlc2hTaWRlT2JqZWN0IGZyb20gXCIuL2dldEZyZXNoU2lkZU9iamVjdC5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbWVyZ2VQYWRkaW5nT2JqZWN0KHBhZGRpbmdPYmplY3QpIHtcbiAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIGdldEZyZXNoU2lkZU9iamVjdCgpLCBwYWRkaW5nT2JqZWN0KTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRGcmVzaFNpZGVPYmplY3QoKSB7XG4gIHJldHVybiB7XG4gICAgdG9wOiAwLFxuICAgIHJpZ2h0OiAwLFxuICAgIGJvdHRvbTogMCxcbiAgICBsZWZ0OiAwXG4gIH07XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZXhwYW5kVG9IYXNoTWFwKHZhbHVlLCBrZXlzKSB7XG4gIHJldHVybiBrZXlzLnJlZHVjZShmdW5jdGlvbiAoaGFzaE1hcCwga2V5KSB7XG4gICAgaGFzaE1hcFtrZXldID0gdmFsdWU7XG4gICAgcmV0dXJuIGhhc2hNYXA7XG4gIH0sIHt9KTtcbn0iLCJpbXBvcnQgZ2V0Q2xpcHBpbmdSZWN0IGZyb20gXCIuLi9kb20tdXRpbHMvZ2V0Q2xpcHBpbmdSZWN0LmpzXCI7XG5pbXBvcnQgZ2V0RG9jdW1lbnRFbGVtZW50IGZyb20gXCIuLi9kb20tdXRpbHMvZ2V0RG9jdW1lbnRFbGVtZW50LmpzXCI7XG5pbXBvcnQgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IGZyb20gXCIuLi9kb20tdXRpbHMvZ2V0Qm91bmRpbmdDbGllbnRSZWN0LmpzXCI7XG5pbXBvcnQgY29tcHV0ZU9mZnNldHMgZnJvbSBcIi4vY29tcHV0ZU9mZnNldHMuanNcIjtcbmltcG9ydCByZWN0VG9DbGllbnRSZWN0IGZyb20gXCIuL3JlY3RUb0NsaWVudFJlY3QuanNcIjtcbmltcG9ydCB7IGNsaXBwaW5nUGFyZW50cywgcmVmZXJlbmNlLCBwb3BwZXIsIGJvdHRvbSwgdG9wLCByaWdodCwgYmFzZVBsYWNlbWVudHMsIHZpZXdwb3J0IH0gZnJvbSBcIi4uL2VudW1zLmpzXCI7XG5pbXBvcnQgeyBpc0VsZW1lbnQgfSBmcm9tIFwiLi4vZG9tLXV0aWxzL2luc3RhbmNlT2YuanNcIjtcbmltcG9ydCBtZXJnZVBhZGRpbmdPYmplY3QgZnJvbSBcIi4vbWVyZ2VQYWRkaW5nT2JqZWN0LmpzXCI7XG5pbXBvcnQgZXhwYW5kVG9IYXNoTWFwIGZyb20gXCIuL2V4cGFuZFRvSGFzaE1hcC5qc1wiOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGRldGVjdE92ZXJmbG93KHN0YXRlLCBvcHRpb25zKSB7XG4gIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICBvcHRpb25zID0ge307XG4gIH1cblxuICB2YXIgX29wdGlvbnMgPSBvcHRpb25zLFxuICAgICAgX29wdGlvbnMkcGxhY2VtZW50ID0gX29wdGlvbnMucGxhY2VtZW50LFxuICAgICAgcGxhY2VtZW50ID0gX29wdGlvbnMkcGxhY2VtZW50ID09PSB2b2lkIDAgPyBzdGF0ZS5wbGFjZW1lbnQgOiBfb3B0aW9ucyRwbGFjZW1lbnQsXG4gICAgICBfb3B0aW9ucyRzdHJhdGVneSA9IF9vcHRpb25zLnN0cmF0ZWd5LFxuICAgICAgc3RyYXRlZ3kgPSBfb3B0aW9ucyRzdHJhdGVneSA9PT0gdm9pZCAwID8gc3RhdGUuc3RyYXRlZ3kgOiBfb3B0aW9ucyRzdHJhdGVneSxcbiAgICAgIF9vcHRpb25zJGJvdW5kYXJ5ID0gX29wdGlvbnMuYm91bmRhcnksXG4gICAgICBib3VuZGFyeSA9IF9vcHRpb25zJGJvdW5kYXJ5ID09PSB2b2lkIDAgPyBjbGlwcGluZ1BhcmVudHMgOiBfb3B0aW9ucyRib3VuZGFyeSxcbiAgICAgIF9vcHRpb25zJHJvb3RCb3VuZGFyeSA9IF9vcHRpb25zLnJvb3RCb3VuZGFyeSxcbiAgICAgIHJvb3RCb3VuZGFyeSA9IF9vcHRpb25zJHJvb3RCb3VuZGFyeSA9PT0gdm9pZCAwID8gdmlld3BvcnQgOiBfb3B0aW9ucyRyb290Qm91bmRhcnksXG4gICAgICBfb3B0aW9ucyRlbGVtZW50Q29udGUgPSBfb3B0aW9ucy5lbGVtZW50Q29udGV4dCxcbiAgICAgIGVsZW1lbnRDb250ZXh0ID0gX29wdGlvbnMkZWxlbWVudENvbnRlID09PSB2b2lkIDAgPyBwb3BwZXIgOiBfb3B0aW9ucyRlbGVtZW50Q29udGUsXG4gICAgICBfb3B0aW9ucyRhbHRCb3VuZGFyeSA9IF9vcHRpb25zLmFsdEJvdW5kYXJ5LFxuICAgICAgYWx0Qm91bmRhcnkgPSBfb3B0aW9ucyRhbHRCb3VuZGFyeSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfb3B0aW9ucyRhbHRCb3VuZGFyeSxcbiAgICAgIF9vcHRpb25zJHBhZGRpbmcgPSBfb3B0aW9ucy5wYWRkaW5nLFxuICAgICAgcGFkZGluZyA9IF9vcHRpb25zJHBhZGRpbmcgPT09IHZvaWQgMCA/IDAgOiBfb3B0aW9ucyRwYWRkaW5nO1xuICB2YXIgcGFkZGluZ09iamVjdCA9IG1lcmdlUGFkZGluZ09iamVjdCh0eXBlb2YgcGFkZGluZyAhPT0gJ251bWJlcicgPyBwYWRkaW5nIDogZXhwYW5kVG9IYXNoTWFwKHBhZGRpbmcsIGJhc2VQbGFjZW1lbnRzKSk7XG4gIHZhciBhbHRDb250ZXh0ID0gZWxlbWVudENvbnRleHQgPT09IHBvcHBlciA/IHJlZmVyZW5jZSA6IHBvcHBlcjtcbiAgdmFyIHBvcHBlclJlY3QgPSBzdGF0ZS5yZWN0cy5wb3BwZXI7XG4gIHZhciBlbGVtZW50ID0gc3RhdGUuZWxlbWVudHNbYWx0Qm91bmRhcnkgPyBhbHRDb250ZXh0IDogZWxlbWVudENvbnRleHRdO1xuICB2YXIgY2xpcHBpbmdDbGllbnRSZWN0ID0gZ2V0Q2xpcHBpbmdSZWN0KGlzRWxlbWVudChlbGVtZW50KSA/IGVsZW1lbnQgOiBlbGVtZW50LmNvbnRleHRFbGVtZW50IHx8IGdldERvY3VtZW50RWxlbWVudChzdGF0ZS5lbGVtZW50cy5wb3BwZXIpLCBib3VuZGFyeSwgcm9vdEJvdW5kYXJ5LCBzdHJhdGVneSk7XG4gIHZhciByZWZlcmVuY2VDbGllbnRSZWN0ID0gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KHN0YXRlLmVsZW1lbnRzLnJlZmVyZW5jZSk7XG4gIHZhciBwb3BwZXJPZmZzZXRzID0gY29tcHV0ZU9mZnNldHMoe1xuICAgIHJlZmVyZW5jZTogcmVmZXJlbmNlQ2xpZW50UmVjdCxcbiAgICBlbGVtZW50OiBwb3BwZXJSZWN0LFxuICAgIHN0cmF0ZWd5OiAnYWJzb2x1dGUnLFxuICAgIHBsYWNlbWVudDogcGxhY2VtZW50XG4gIH0pO1xuICB2YXIgcG9wcGVyQ2xpZW50UmVjdCA9IHJlY3RUb0NsaWVudFJlY3QoT2JqZWN0LmFzc2lnbih7fSwgcG9wcGVyUmVjdCwgcG9wcGVyT2Zmc2V0cykpO1xuICB2YXIgZWxlbWVudENsaWVudFJlY3QgPSBlbGVtZW50Q29udGV4dCA9PT0gcG9wcGVyID8gcG9wcGVyQ2xpZW50UmVjdCA6IHJlZmVyZW5jZUNsaWVudFJlY3Q7IC8vIHBvc2l0aXZlID0gb3ZlcmZsb3dpbmcgdGhlIGNsaXBwaW5nIHJlY3RcbiAgLy8gMCBvciBuZWdhdGl2ZSA9IHdpdGhpbiB0aGUgY2xpcHBpbmcgcmVjdFxuXG4gIHZhciBvdmVyZmxvd09mZnNldHMgPSB7XG4gICAgdG9wOiBjbGlwcGluZ0NsaWVudFJlY3QudG9wIC0gZWxlbWVudENsaWVudFJlY3QudG9wICsgcGFkZGluZ09iamVjdC50b3AsXG4gICAgYm90dG9tOiBlbGVtZW50Q2xpZW50UmVjdC5ib3R0b20gLSBjbGlwcGluZ0NsaWVudFJlY3QuYm90dG9tICsgcGFkZGluZ09iamVjdC5ib3R0b20sXG4gICAgbGVmdDogY2xpcHBpbmdDbGllbnRSZWN0LmxlZnQgLSBlbGVtZW50Q2xpZW50UmVjdC5sZWZ0ICsgcGFkZGluZ09iamVjdC5sZWZ0LFxuICAgIHJpZ2h0OiBlbGVtZW50Q2xpZW50UmVjdC5yaWdodCAtIGNsaXBwaW5nQ2xpZW50UmVjdC5yaWdodCArIHBhZGRpbmdPYmplY3QucmlnaHRcbiAgfTtcbiAgdmFyIG9mZnNldERhdGEgPSBzdGF0ZS5tb2RpZmllcnNEYXRhLm9mZnNldDsgLy8gT2Zmc2V0cyBjYW4gYmUgYXBwbGllZCBvbmx5IHRvIHRoZSBwb3BwZXIgZWxlbWVudFxuXG4gIGlmIChlbGVtZW50Q29udGV4dCA9PT0gcG9wcGVyICYmIG9mZnNldERhdGEpIHtcbiAgICB2YXIgb2Zmc2V0ID0gb2Zmc2V0RGF0YVtwbGFjZW1lbnRdO1xuICAgIE9iamVjdC5rZXlzKG92ZXJmbG93T2Zmc2V0cykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICB2YXIgbXVsdGlwbHkgPSBbcmlnaHQsIGJvdHRvbV0uaW5kZXhPZihrZXkpID49IDAgPyAxIDogLTE7XG4gICAgICB2YXIgYXhpcyA9IFt0b3AsIGJvdHRvbV0uaW5kZXhPZihrZXkpID49IDAgPyAneScgOiAneCc7XG4gICAgICBvdmVyZmxvd09mZnNldHNba2V5XSArPSBvZmZzZXRbYXhpc10gKiBtdWx0aXBseTtcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBvdmVyZmxvd09mZnNldHM7XG59IiwiaW1wb3J0IHsgbWF4IGFzIG1hdGhNYXgsIG1pbiBhcyBtYXRoTWluIH0gZnJvbSBcIi4vbWF0aC5qc1wiO1xuZXhwb3J0IGZ1bmN0aW9uIHdpdGhpbihtaW4sIHZhbHVlLCBtYXgpIHtcbiAgcmV0dXJuIG1hdGhNYXgobWluLCBtYXRoTWluKHZhbHVlLCBtYXgpKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiB3aXRoaW5NYXhDbGFtcChtaW4sIHZhbHVlLCBtYXgpIHtcbiAgdmFyIHYgPSB3aXRoaW4obWluLCB2YWx1ZSwgbWF4KTtcbiAgcmV0dXJuIHYgPiBtYXggPyBtYXggOiB2O1xufSIsImltcG9ydCB7IHRvcCwgYm90dG9tLCBsZWZ0LCByaWdodCB9IGZyb20gXCIuLi9lbnVtcy5qc1wiO1xuaW1wb3J0IGRldGVjdE92ZXJmbG93IGZyb20gXCIuLi91dGlscy9kZXRlY3RPdmVyZmxvdy5qc1wiO1xuXG5mdW5jdGlvbiBnZXRTaWRlT2Zmc2V0cyhvdmVyZmxvdywgcmVjdCwgcHJldmVudGVkT2Zmc2V0cykge1xuICBpZiAocHJldmVudGVkT2Zmc2V0cyA9PT0gdm9pZCAwKSB7XG4gICAgcHJldmVudGVkT2Zmc2V0cyA9IHtcbiAgICAgIHg6IDAsXG4gICAgICB5OiAwXG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgdG9wOiBvdmVyZmxvdy50b3AgLSByZWN0LmhlaWdodCAtIHByZXZlbnRlZE9mZnNldHMueSxcbiAgICByaWdodDogb3ZlcmZsb3cucmlnaHQgLSByZWN0LndpZHRoICsgcHJldmVudGVkT2Zmc2V0cy54LFxuICAgIGJvdHRvbTogb3ZlcmZsb3cuYm90dG9tIC0gcmVjdC5oZWlnaHQgKyBwcmV2ZW50ZWRPZmZzZXRzLnksXG4gICAgbGVmdDogb3ZlcmZsb3cubGVmdCAtIHJlY3Qud2lkdGggLSBwcmV2ZW50ZWRPZmZzZXRzLnhcbiAgfTtcbn1cblxuZnVuY3Rpb24gaXNBbnlTaWRlRnVsbHlDbGlwcGVkKG92ZXJmbG93KSB7XG4gIHJldHVybiBbdG9wLCByaWdodCwgYm90dG9tLCBsZWZ0XS5zb21lKGZ1bmN0aW9uIChzaWRlKSB7XG4gICAgcmV0dXJuIG92ZXJmbG93W3NpZGVdID49IDA7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBoaWRlKF9yZWYpIHtcbiAgdmFyIHN0YXRlID0gX3JlZi5zdGF0ZSxcbiAgICAgIG5hbWUgPSBfcmVmLm5hbWU7XG4gIHZhciByZWZlcmVuY2VSZWN0ID0gc3RhdGUucmVjdHMucmVmZXJlbmNlO1xuICB2YXIgcG9wcGVyUmVjdCA9IHN0YXRlLnJlY3RzLnBvcHBlcjtcbiAgdmFyIHByZXZlbnRlZE9mZnNldHMgPSBzdGF0ZS5tb2RpZmllcnNEYXRhLnByZXZlbnRPdmVyZmxvdztcbiAgdmFyIHJlZmVyZW5jZU92ZXJmbG93ID0gZGV0ZWN0T3ZlcmZsb3coc3RhdGUsIHtcbiAgICBlbGVtZW50Q29udGV4dDogJ3JlZmVyZW5jZSdcbiAgfSk7XG4gIHZhciBwb3BwZXJBbHRPdmVyZmxvdyA9IGRldGVjdE92ZXJmbG93KHN0YXRlLCB7XG4gICAgYWx0Qm91bmRhcnk6IHRydWVcbiAgfSk7XG4gIHZhciByZWZlcmVuY2VDbGlwcGluZ09mZnNldHMgPSBnZXRTaWRlT2Zmc2V0cyhyZWZlcmVuY2VPdmVyZmxvdywgcmVmZXJlbmNlUmVjdCk7XG4gIHZhciBwb3BwZXJFc2NhcGVPZmZzZXRzID0gZ2V0U2lkZU9mZnNldHMocG9wcGVyQWx0T3ZlcmZsb3csIHBvcHBlclJlY3QsIHByZXZlbnRlZE9mZnNldHMpO1xuICB2YXIgaXNSZWZlcmVuY2VIaWRkZW4gPSBpc0FueVNpZGVGdWxseUNsaXBwZWQocmVmZXJlbmNlQ2xpcHBpbmdPZmZzZXRzKTtcbiAgdmFyIGhhc1BvcHBlckVzY2FwZWQgPSBpc0FueVNpZGVGdWxseUNsaXBwZWQocG9wcGVyRXNjYXBlT2Zmc2V0cyk7XG4gIHN0YXRlLm1vZGlmaWVyc0RhdGFbbmFtZV0gPSB7XG4gICAgcmVmZXJlbmNlQ2xpcHBpbmdPZmZzZXRzOiByZWZlcmVuY2VDbGlwcGluZ09mZnNldHMsXG4gICAgcG9wcGVyRXNjYXBlT2Zmc2V0czogcG9wcGVyRXNjYXBlT2Zmc2V0cyxcbiAgICBpc1JlZmVyZW5jZUhpZGRlbjogaXNSZWZlcmVuY2VIaWRkZW4sXG4gICAgaGFzUG9wcGVyRXNjYXBlZDogaGFzUG9wcGVyRXNjYXBlZFxuICB9O1xuICBzdGF0ZS5hdHRyaWJ1dGVzLnBvcHBlciA9IE9iamVjdC5hc3NpZ24oe30sIHN0YXRlLmF0dHJpYnV0ZXMucG9wcGVyLCB7XG4gICAgJ2RhdGEtcG9wcGVyLXJlZmVyZW5jZS1oaWRkZW4nOiBpc1JlZmVyZW5jZUhpZGRlbixcbiAgICAnZGF0YS1wb3BwZXItZXNjYXBlZCc6IGhhc1BvcHBlckVzY2FwZWRcbiAgfSk7XG59IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcblxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIG5hbWU6ICdoaWRlJyxcbiAgZW5hYmxlZDogdHJ1ZSxcbiAgcGhhc2U6ICdtYWluJyxcbiAgcmVxdWlyZXNJZkV4aXN0czogWydwcmV2ZW50T3ZlcmZsb3cnXSxcbiAgZm46IGhpZGVcbn07IiwiaW1wb3J0IHsgcG9wcGVyR2VuZXJhdG9yLCBkZXRlY3RPdmVyZmxvdyB9IGZyb20gXCIuL2NyZWF0ZVBvcHBlci5qc1wiO1xuaW1wb3J0IGV2ZW50TGlzdGVuZXJzIGZyb20gXCIuL21vZGlmaWVycy9ldmVudExpc3RlbmVycy5qc1wiO1xuaW1wb3J0IHBvcHBlck9mZnNldHMgZnJvbSBcIi4vbW9kaWZpZXJzL3BvcHBlck9mZnNldHMuanNcIjtcbmltcG9ydCBjb21wdXRlU3R5bGVzIGZyb20gXCIuL21vZGlmaWVycy9jb21wdXRlU3R5bGVzLmpzXCI7XG5pbXBvcnQgYXBwbHlTdHlsZXMgZnJvbSBcIi4vbW9kaWZpZXJzL2FwcGx5U3R5bGVzLmpzXCI7XG5pbXBvcnQgb2Zmc2V0IGZyb20gXCIuL21vZGlmaWVycy9vZmZzZXQuanNcIjtcbmltcG9ydCBmbGlwIGZyb20gXCIuL21vZGlmaWVycy9mbGlwLmpzXCI7XG5pbXBvcnQgcHJldmVudE92ZXJmbG93IGZyb20gXCIuL21vZGlmaWVycy9wcmV2ZW50T3ZlcmZsb3cuanNcIjtcbmltcG9ydCBhcnJvdyBmcm9tIFwiLi9tb2RpZmllcnMvYXJyb3cuanNcIjtcbmltcG9ydCBoaWRlIGZyb20gXCIuL21vZGlmaWVycy9oaWRlLmpzXCI7XG52YXIgZGVmYXVsdE1vZGlmaWVycyA9IFtldmVudExpc3RlbmVycywgcG9wcGVyT2Zmc2V0cywgY29tcHV0ZVN0eWxlcywgYXBwbHlTdHlsZXMsIG9mZnNldCwgZmxpcCwgcHJldmVudE92ZXJmbG93LCBhcnJvdywgaGlkZV07XG52YXIgY3JlYXRlUG9wcGVyID0gLyojX19QVVJFX18qL3BvcHBlckdlbmVyYXRvcih7XG4gIGRlZmF1bHRNb2RpZmllcnM6IGRlZmF1bHRNb2RpZmllcnNcbn0pOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cbmV4cG9ydCB7IGNyZWF0ZVBvcHBlciwgcG9wcGVyR2VuZXJhdG9yLCBkZWZhdWx0TW9kaWZpZXJzLCBkZXRlY3RPdmVyZmxvdyB9OyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cbmV4cG9ydCB7IGNyZWF0ZVBvcHBlciBhcyBjcmVhdGVQb3BwZXJMaXRlIH0gZnJvbSBcIi4vcG9wcGVyLWxpdGUuanNcIjsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuXG5leHBvcnQgKiBmcm9tIFwiLi9tb2RpZmllcnMvaW5kZXguanNcIjsiLCJpbXBvcnQgY29tcHV0ZU9mZnNldHMgZnJvbSBcIi4uL3V0aWxzL2NvbXB1dGVPZmZzZXRzLmpzXCI7XG5cbmZ1bmN0aW9uIHBvcHBlck9mZnNldHMoX3JlZikge1xuICB2YXIgc3RhdGUgPSBfcmVmLnN0YXRlLFxuICAgICAgbmFtZSA9IF9yZWYubmFtZTtcbiAgLy8gT2Zmc2V0cyBhcmUgdGhlIGFjdHVhbCBwb3NpdGlvbiB0aGUgcG9wcGVyIG5lZWRzIHRvIGhhdmUgdG8gYmVcbiAgLy8gcHJvcGVybHkgcG9zaXRpb25lZCBuZWFyIGl0cyByZWZlcmVuY2UgZWxlbWVudFxuICAvLyBUaGlzIGlzIHRoZSBtb3N0IGJhc2ljIHBsYWNlbWVudCwgYW5kIHdpbGwgYmUgYWRqdXN0ZWQgYnlcbiAgLy8gdGhlIG1vZGlmaWVycyBpbiB0aGUgbmV4dCBzdGVwXG4gIHN0YXRlLm1vZGlmaWVyc0RhdGFbbmFtZV0gPSBjb21wdXRlT2Zmc2V0cyh7XG4gICAgcmVmZXJlbmNlOiBzdGF0ZS5yZWN0cy5yZWZlcmVuY2UsXG4gICAgZWxlbWVudDogc3RhdGUucmVjdHMucG9wcGVyLFxuICAgIHN0cmF0ZWd5OiAnYWJzb2x1dGUnLFxuICAgIHBsYWNlbWVudDogc3RhdGUucGxhY2VtZW50XG4gIH0pO1xufSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cblxuZXhwb3J0IGRlZmF1bHQge1xuICBuYW1lOiAncG9wcGVyT2Zmc2V0cycsXG4gIGVuYWJsZWQ6IHRydWUsXG4gIHBoYXNlOiAncmVhZCcsXG4gIGZuOiBwb3BwZXJPZmZzZXRzLFxuICBkYXRhOiB7fVxufTsiLCJpbXBvcnQgZ2V0QmFzZVBsYWNlbWVudCBmcm9tIFwiLi4vdXRpbHMvZ2V0QmFzZVBsYWNlbWVudC5qc1wiO1xuaW1wb3J0IHsgdG9wLCBsZWZ0LCByaWdodCwgcGxhY2VtZW50cyB9IGZyb20gXCIuLi9lbnVtcy5qc1wiOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cbmV4cG9ydCBmdW5jdGlvbiBkaXN0YW5jZUFuZFNraWRkaW5nVG9YWShwbGFjZW1lbnQsIHJlY3RzLCBvZmZzZXQpIHtcbiAgdmFyIGJhc2VQbGFjZW1lbnQgPSBnZXRCYXNlUGxhY2VtZW50KHBsYWNlbWVudCk7XG4gIHZhciBpbnZlcnREaXN0YW5jZSA9IFtsZWZ0LCB0b3BdLmluZGV4T2YoYmFzZVBsYWNlbWVudCkgPj0gMCA/IC0xIDogMTtcblxuICB2YXIgX3JlZiA9IHR5cGVvZiBvZmZzZXQgPT09ICdmdW5jdGlvbicgPyBvZmZzZXQoT2JqZWN0LmFzc2lnbih7fSwgcmVjdHMsIHtcbiAgICBwbGFjZW1lbnQ6IHBsYWNlbWVudFxuICB9KSkgOiBvZmZzZXQsXG4gICAgICBza2lkZGluZyA9IF9yZWZbMF0sXG4gICAgICBkaXN0YW5jZSA9IF9yZWZbMV07XG5cbiAgc2tpZGRpbmcgPSBza2lkZGluZyB8fCAwO1xuICBkaXN0YW5jZSA9IChkaXN0YW5jZSB8fCAwKSAqIGludmVydERpc3RhbmNlO1xuICByZXR1cm4gW2xlZnQsIHJpZ2h0XS5pbmRleE9mKGJhc2VQbGFjZW1lbnQpID49IDAgPyB7XG4gICAgeDogZGlzdGFuY2UsXG4gICAgeTogc2tpZGRpbmdcbiAgfSA6IHtcbiAgICB4OiBza2lkZGluZyxcbiAgICB5OiBkaXN0YW5jZVxuICB9O1xufVxuXG5mdW5jdGlvbiBvZmZzZXQoX3JlZjIpIHtcbiAgdmFyIHN0YXRlID0gX3JlZjIuc3RhdGUsXG4gICAgICBvcHRpb25zID0gX3JlZjIub3B0aW9ucyxcbiAgICAgIG5hbWUgPSBfcmVmMi5uYW1lO1xuICB2YXIgX29wdGlvbnMkb2Zmc2V0ID0gb3B0aW9ucy5vZmZzZXQsXG4gICAgICBvZmZzZXQgPSBfb3B0aW9ucyRvZmZzZXQgPT09IHZvaWQgMCA/IFswLCAwXSA6IF9vcHRpb25zJG9mZnNldDtcbiAgdmFyIGRhdGEgPSBwbGFjZW1lbnRzLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBwbGFjZW1lbnQpIHtcbiAgICBhY2NbcGxhY2VtZW50XSA9IGRpc3RhbmNlQW5kU2tpZGRpbmdUb1hZKHBsYWNlbWVudCwgc3RhdGUucmVjdHMsIG9mZnNldCk7XG4gICAgcmV0dXJuIGFjYztcbiAgfSwge30pO1xuICB2YXIgX2RhdGEkc3RhdGUkcGxhY2VtZW50ID0gZGF0YVtzdGF0ZS5wbGFjZW1lbnRdLFxuICAgICAgeCA9IF9kYXRhJHN0YXRlJHBsYWNlbWVudC54LFxuICAgICAgeSA9IF9kYXRhJHN0YXRlJHBsYWNlbWVudC55O1xuXG4gIGlmIChzdGF0ZS5tb2RpZmllcnNEYXRhLnBvcHBlck9mZnNldHMgIT0gbnVsbCkge1xuICAgIHN0YXRlLm1vZGlmaWVyc0RhdGEucG9wcGVyT2Zmc2V0cy54ICs9IHg7XG4gICAgc3RhdGUubW9kaWZpZXJzRGF0YS5wb3BwZXJPZmZzZXRzLnkgKz0geTtcbiAgfVxuXG4gIHN0YXRlLm1vZGlmaWVyc0RhdGFbbmFtZV0gPSBkYXRhO1xufSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cblxuZXhwb3J0IGRlZmF1bHQge1xuICBuYW1lOiAnb2Zmc2V0JyxcbiAgZW5hYmxlZDogdHJ1ZSxcbiAgcGhhc2U6ICdtYWluJyxcbiAgcmVxdWlyZXM6IFsncG9wcGVyT2Zmc2V0cyddLFxuICBmbjogb2Zmc2V0XG59OyIsImltcG9ydCBnZXRPcHBvc2l0ZVBsYWNlbWVudCBmcm9tIFwiLi4vdXRpbHMvZ2V0T3Bwb3NpdGVQbGFjZW1lbnQuanNcIjtcbmltcG9ydCBnZXRCYXNlUGxhY2VtZW50IGZyb20gXCIuLi91dGlscy9nZXRCYXNlUGxhY2VtZW50LmpzXCI7XG5pbXBvcnQgZ2V0T3Bwb3NpdGVWYXJpYXRpb25QbGFjZW1lbnQgZnJvbSBcIi4uL3V0aWxzL2dldE9wcG9zaXRlVmFyaWF0aW9uUGxhY2VtZW50LmpzXCI7XG5pbXBvcnQgZGV0ZWN0T3ZlcmZsb3cgZnJvbSBcIi4uL3V0aWxzL2RldGVjdE92ZXJmbG93LmpzXCI7XG5pbXBvcnQgY29tcHV0ZUF1dG9QbGFjZW1lbnQgZnJvbSBcIi4uL3V0aWxzL2NvbXB1dGVBdXRvUGxhY2VtZW50LmpzXCI7XG5pbXBvcnQgeyBib3R0b20sIHRvcCwgc3RhcnQsIHJpZ2h0LCBsZWZ0LCBhdXRvIH0gZnJvbSBcIi4uL2VudW1zLmpzXCI7XG5pbXBvcnQgZ2V0VmFyaWF0aW9uIGZyb20gXCIuLi91dGlscy9nZXRWYXJpYXRpb24uanNcIjsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuXG5mdW5jdGlvbiBnZXRFeHBhbmRlZEZhbGxiYWNrUGxhY2VtZW50cyhwbGFjZW1lbnQpIHtcbiAgaWYgKGdldEJhc2VQbGFjZW1lbnQocGxhY2VtZW50KSA9PT0gYXV0bykge1xuICAgIHJldHVybiBbXTtcbiAgfVxuXG4gIHZhciBvcHBvc2l0ZVBsYWNlbWVudCA9IGdldE9wcG9zaXRlUGxhY2VtZW50KHBsYWNlbWVudCk7XG4gIHJldHVybiBbZ2V0T3Bwb3NpdGVWYXJpYXRpb25QbGFjZW1lbnQocGxhY2VtZW50KSwgb3Bwb3NpdGVQbGFjZW1lbnQsIGdldE9wcG9zaXRlVmFyaWF0aW9uUGxhY2VtZW50KG9wcG9zaXRlUGxhY2VtZW50KV07XG59XG5cbmZ1bmN0aW9uIGZsaXAoX3JlZikge1xuICB2YXIgc3RhdGUgPSBfcmVmLnN0YXRlLFxuICAgICAgb3B0aW9ucyA9IF9yZWYub3B0aW9ucyxcbiAgICAgIG5hbWUgPSBfcmVmLm5hbWU7XG5cbiAgaWYgKHN0YXRlLm1vZGlmaWVyc0RhdGFbbmFtZV0uX3NraXApIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgX29wdGlvbnMkbWFpbkF4aXMgPSBvcHRpb25zLm1haW5BeGlzLFxuICAgICAgY2hlY2tNYWluQXhpcyA9IF9vcHRpb25zJG1haW5BeGlzID09PSB2b2lkIDAgPyB0cnVlIDogX29wdGlvbnMkbWFpbkF4aXMsXG4gICAgICBfb3B0aW9ucyRhbHRBeGlzID0gb3B0aW9ucy5hbHRBeGlzLFxuICAgICAgY2hlY2tBbHRBeGlzID0gX29wdGlvbnMkYWx0QXhpcyA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9vcHRpb25zJGFsdEF4aXMsXG4gICAgICBzcGVjaWZpZWRGYWxsYmFja1BsYWNlbWVudHMgPSBvcHRpb25zLmZhbGxiYWNrUGxhY2VtZW50cyxcbiAgICAgIHBhZGRpbmcgPSBvcHRpb25zLnBhZGRpbmcsXG4gICAgICBib3VuZGFyeSA9IG9wdGlvbnMuYm91bmRhcnksXG4gICAgICByb290Qm91bmRhcnkgPSBvcHRpb25zLnJvb3RCb3VuZGFyeSxcbiAgICAgIGFsdEJvdW5kYXJ5ID0gb3B0aW9ucy5hbHRCb3VuZGFyeSxcbiAgICAgIF9vcHRpb25zJGZsaXBWYXJpYXRpbyA9IG9wdGlvbnMuZmxpcFZhcmlhdGlvbnMsXG4gICAgICBmbGlwVmFyaWF0aW9ucyA9IF9vcHRpb25zJGZsaXBWYXJpYXRpbyA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9vcHRpb25zJGZsaXBWYXJpYXRpbyxcbiAgICAgIGFsbG93ZWRBdXRvUGxhY2VtZW50cyA9IG9wdGlvbnMuYWxsb3dlZEF1dG9QbGFjZW1lbnRzO1xuICB2YXIgcHJlZmVycmVkUGxhY2VtZW50ID0gc3RhdGUub3B0aW9ucy5wbGFjZW1lbnQ7XG4gIHZhciBiYXNlUGxhY2VtZW50ID0gZ2V0QmFzZVBsYWNlbWVudChwcmVmZXJyZWRQbGFjZW1lbnQpO1xuICB2YXIgaXNCYXNlUGxhY2VtZW50ID0gYmFzZVBsYWNlbWVudCA9PT0gcHJlZmVycmVkUGxhY2VtZW50O1xuICB2YXIgZmFsbGJhY2tQbGFjZW1lbnRzID0gc3BlY2lmaWVkRmFsbGJhY2tQbGFjZW1lbnRzIHx8IChpc0Jhc2VQbGFjZW1lbnQgfHwgIWZsaXBWYXJpYXRpb25zID8gW2dldE9wcG9zaXRlUGxhY2VtZW50KHByZWZlcnJlZFBsYWNlbWVudCldIDogZ2V0RXhwYW5kZWRGYWxsYmFja1BsYWNlbWVudHMocHJlZmVycmVkUGxhY2VtZW50KSk7XG4gIHZhciBwbGFjZW1lbnRzID0gW3ByZWZlcnJlZFBsYWNlbWVudF0uY29uY2F0KGZhbGxiYWNrUGxhY2VtZW50cykucmVkdWNlKGZ1bmN0aW9uIChhY2MsIHBsYWNlbWVudCkge1xuICAgIHJldHVybiBhY2MuY29uY2F0KGdldEJhc2VQbGFjZW1lbnQocGxhY2VtZW50KSA9PT0gYXV0byA/IGNvbXB1dGVBdXRvUGxhY2VtZW50KHN0YXRlLCB7XG4gICAgICBwbGFjZW1lbnQ6IHBsYWNlbWVudCxcbiAgICAgIGJvdW5kYXJ5OiBib3VuZGFyeSxcbiAgICAgIHJvb3RCb3VuZGFyeTogcm9vdEJvdW5kYXJ5LFxuICAgICAgcGFkZGluZzogcGFkZGluZyxcbiAgICAgIGZsaXBWYXJpYXRpb25zOiBmbGlwVmFyaWF0aW9ucyxcbiAgICAgIGFsbG93ZWRBdXRvUGxhY2VtZW50czogYWxsb3dlZEF1dG9QbGFjZW1lbnRzXG4gICAgfSkgOiBwbGFjZW1lbnQpO1xuICB9LCBbXSk7XG4gIHZhciByZWZlcmVuY2VSZWN0ID0gc3RhdGUucmVjdHMucmVmZXJlbmNlO1xuICB2YXIgcG9wcGVyUmVjdCA9IHN0YXRlLnJlY3RzLnBvcHBlcjtcbiAgdmFyIGNoZWNrc01hcCA9IG5ldyBNYXAoKTtcbiAgdmFyIG1ha2VGYWxsYmFja0NoZWNrcyA9IHRydWU7XG4gIHZhciBmaXJzdEZpdHRpbmdQbGFjZW1lbnQgPSBwbGFjZW1lbnRzWzBdO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcGxhY2VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBwbGFjZW1lbnQgPSBwbGFjZW1lbnRzW2ldO1xuXG4gICAgdmFyIF9iYXNlUGxhY2VtZW50ID0gZ2V0QmFzZVBsYWNlbWVudChwbGFjZW1lbnQpO1xuXG4gICAgdmFyIGlzU3RhcnRWYXJpYXRpb24gPSBnZXRWYXJpYXRpb24ocGxhY2VtZW50KSA9PT0gc3RhcnQ7XG4gICAgdmFyIGlzVmVydGljYWwgPSBbdG9wLCBib3R0b21dLmluZGV4T2YoX2Jhc2VQbGFjZW1lbnQpID49IDA7XG4gICAgdmFyIGxlbiA9IGlzVmVydGljYWwgPyAnd2lkdGgnIDogJ2hlaWdodCc7XG4gICAgdmFyIG92ZXJmbG93ID0gZGV0ZWN0T3ZlcmZsb3coc3RhdGUsIHtcbiAgICAgIHBsYWNlbWVudDogcGxhY2VtZW50LFxuICAgICAgYm91bmRhcnk6IGJvdW5kYXJ5LFxuICAgICAgcm9vdEJvdW5kYXJ5OiByb290Qm91bmRhcnksXG4gICAgICBhbHRCb3VuZGFyeTogYWx0Qm91bmRhcnksXG4gICAgICBwYWRkaW5nOiBwYWRkaW5nXG4gICAgfSk7XG4gICAgdmFyIG1haW5WYXJpYXRpb25TaWRlID0gaXNWZXJ0aWNhbCA/IGlzU3RhcnRWYXJpYXRpb24gPyByaWdodCA6IGxlZnQgOiBpc1N0YXJ0VmFyaWF0aW9uID8gYm90dG9tIDogdG9wO1xuXG4gICAgaWYgKHJlZmVyZW5jZVJlY3RbbGVuXSA+IHBvcHBlclJlY3RbbGVuXSkge1xuICAgICAgbWFpblZhcmlhdGlvblNpZGUgPSBnZXRPcHBvc2l0ZVBsYWNlbWVudChtYWluVmFyaWF0aW9uU2lkZSk7XG4gICAgfVxuXG4gICAgdmFyIGFsdFZhcmlhdGlvblNpZGUgPSBnZXRPcHBvc2l0ZVBsYWNlbWVudChtYWluVmFyaWF0aW9uU2lkZSk7XG4gICAgdmFyIGNoZWNrcyA9IFtdO1xuXG4gICAgaWYgKGNoZWNrTWFpbkF4aXMpIHtcbiAgICAgIGNoZWNrcy5wdXNoKG92ZXJmbG93W19iYXNlUGxhY2VtZW50XSA8PSAwKTtcbiAgICB9XG5cbiAgICBpZiAoY2hlY2tBbHRBeGlzKSB7XG4gICAgICBjaGVja3MucHVzaChvdmVyZmxvd1ttYWluVmFyaWF0aW9uU2lkZV0gPD0gMCwgb3ZlcmZsb3dbYWx0VmFyaWF0aW9uU2lkZV0gPD0gMCk7XG4gICAgfVxuXG4gICAgaWYgKGNoZWNrcy5ldmVyeShmdW5jdGlvbiAoY2hlY2spIHtcbiAgICAgIHJldHVybiBjaGVjaztcbiAgICB9KSkge1xuICAgICAgZmlyc3RGaXR0aW5nUGxhY2VtZW50ID0gcGxhY2VtZW50O1xuICAgICAgbWFrZUZhbGxiYWNrQ2hlY2tzID0gZmFsc2U7XG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICBjaGVja3NNYXAuc2V0KHBsYWNlbWVudCwgY2hlY2tzKTtcbiAgfVxuXG4gIGlmIChtYWtlRmFsbGJhY2tDaGVja3MpIHtcbiAgICAvLyBgMmAgbWF5IGJlIGRlc2lyZWQgaW4gc29tZSBjYXNlcyDigJMgcmVzZWFyY2ggbGF0ZXJcbiAgICB2YXIgbnVtYmVyT2ZDaGVja3MgPSBmbGlwVmFyaWF0aW9ucyA/IDMgOiAxO1xuXG4gICAgdmFyIF9sb29wID0gZnVuY3Rpb24gX2xvb3AoX2kpIHtcbiAgICAgIHZhciBmaXR0aW5nUGxhY2VtZW50ID0gcGxhY2VtZW50cy5maW5kKGZ1bmN0aW9uIChwbGFjZW1lbnQpIHtcbiAgICAgICAgdmFyIGNoZWNrcyA9IGNoZWNrc01hcC5nZXQocGxhY2VtZW50KTtcblxuICAgICAgICBpZiAoY2hlY2tzKSB7XG4gICAgICAgICAgcmV0dXJuIGNoZWNrcy5zbGljZSgwLCBfaSkuZXZlcnkoZnVuY3Rpb24gKGNoZWNrKSB7XG4gICAgICAgICAgICByZXR1cm4gY2hlY2s7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICBpZiAoZml0dGluZ1BsYWNlbWVudCkge1xuICAgICAgICBmaXJzdEZpdHRpbmdQbGFjZW1lbnQgPSBmaXR0aW5nUGxhY2VtZW50O1xuICAgICAgICByZXR1cm4gXCJicmVha1wiO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBmb3IgKHZhciBfaSA9IG51bWJlck9mQ2hlY2tzOyBfaSA+IDA7IF9pLS0pIHtcbiAgICAgIHZhciBfcmV0ID0gX2xvb3AoX2kpO1xuXG4gICAgICBpZiAoX3JldCA9PT0gXCJicmVha1wiKSBicmVhaztcbiAgICB9XG4gIH1cblxuICBpZiAoc3RhdGUucGxhY2VtZW50ICE9PSBmaXJzdEZpdHRpbmdQbGFjZW1lbnQpIHtcbiAgICBzdGF0ZS5tb2RpZmllcnNEYXRhW25hbWVdLl9za2lwID0gdHJ1ZTtcbiAgICBzdGF0ZS5wbGFjZW1lbnQgPSBmaXJzdEZpdHRpbmdQbGFjZW1lbnQ7XG4gICAgc3RhdGUucmVzZXQgPSB0cnVlO1xuICB9XG59IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcblxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIG5hbWU6ICdmbGlwJyxcbiAgZW5hYmxlZDogdHJ1ZSxcbiAgcGhhc2U6ICdtYWluJyxcbiAgZm46IGZsaXAsXG4gIHJlcXVpcmVzSWZFeGlzdHM6IFsnb2Zmc2V0J10sXG4gIGRhdGE6IHtcbiAgICBfc2tpcDogZmFsc2VcbiAgfVxufTsiLCJpbXBvcnQgZ2V0VmFyaWF0aW9uIGZyb20gXCIuL2dldFZhcmlhdGlvbi5qc1wiO1xuaW1wb3J0IHsgdmFyaWF0aW9uUGxhY2VtZW50cywgYmFzZVBsYWNlbWVudHMsIHBsYWNlbWVudHMgYXMgYWxsUGxhY2VtZW50cyB9IGZyb20gXCIuLi9lbnVtcy5qc1wiO1xuaW1wb3J0IGRldGVjdE92ZXJmbG93IGZyb20gXCIuL2RldGVjdE92ZXJmbG93LmpzXCI7XG5pbXBvcnQgZ2V0QmFzZVBsYWNlbWVudCBmcm9tIFwiLi9nZXRCYXNlUGxhY2VtZW50LmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjb21wdXRlQXV0b1BsYWNlbWVudChzdGF0ZSwgb3B0aW9ucykge1xuICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG5cbiAgdmFyIF9vcHRpb25zID0gb3B0aW9ucyxcbiAgICAgIHBsYWNlbWVudCA9IF9vcHRpb25zLnBsYWNlbWVudCxcbiAgICAgIGJvdW5kYXJ5ID0gX29wdGlvbnMuYm91bmRhcnksXG4gICAgICByb290Qm91bmRhcnkgPSBfb3B0aW9ucy5yb290Qm91bmRhcnksXG4gICAgICBwYWRkaW5nID0gX29wdGlvbnMucGFkZGluZyxcbiAgICAgIGZsaXBWYXJpYXRpb25zID0gX29wdGlvbnMuZmxpcFZhcmlhdGlvbnMsXG4gICAgICBfb3B0aW9ucyRhbGxvd2VkQXV0b1AgPSBfb3B0aW9ucy5hbGxvd2VkQXV0b1BsYWNlbWVudHMsXG4gICAgICBhbGxvd2VkQXV0b1BsYWNlbWVudHMgPSBfb3B0aW9ucyRhbGxvd2VkQXV0b1AgPT09IHZvaWQgMCA/IGFsbFBsYWNlbWVudHMgOiBfb3B0aW9ucyRhbGxvd2VkQXV0b1A7XG4gIHZhciB2YXJpYXRpb24gPSBnZXRWYXJpYXRpb24ocGxhY2VtZW50KTtcbiAgdmFyIHBsYWNlbWVudHMgPSB2YXJpYXRpb24gPyBmbGlwVmFyaWF0aW9ucyA/IHZhcmlhdGlvblBsYWNlbWVudHMgOiB2YXJpYXRpb25QbGFjZW1lbnRzLmZpbHRlcihmdW5jdGlvbiAocGxhY2VtZW50KSB7XG4gICAgcmV0dXJuIGdldFZhcmlhdGlvbihwbGFjZW1lbnQpID09PSB2YXJpYXRpb247XG4gIH0pIDogYmFzZVBsYWNlbWVudHM7XG4gIHZhciBhbGxvd2VkUGxhY2VtZW50cyA9IHBsYWNlbWVudHMuZmlsdGVyKGZ1bmN0aW9uIChwbGFjZW1lbnQpIHtcbiAgICByZXR1cm4gYWxsb3dlZEF1dG9QbGFjZW1lbnRzLmluZGV4T2YocGxhY2VtZW50KSA+PSAwO1xuICB9KTtcblxuICBpZiAoYWxsb3dlZFBsYWNlbWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgYWxsb3dlZFBsYWNlbWVudHMgPSBwbGFjZW1lbnRzO1xuICB9IC8vICRGbG93Rml4TWVbaW5jb21wYXRpYmxlLXR5cGVdOiBGbG93IHNlZW1zIHRvIGhhdmUgcHJvYmxlbXMgd2l0aCB0d28gYXJyYXkgdW5pb25zLi4uXG5cblxuICB2YXIgb3ZlcmZsb3dzID0gYWxsb3dlZFBsYWNlbWVudHMucmVkdWNlKGZ1bmN0aW9uIChhY2MsIHBsYWNlbWVudCkge1xuICAgIGFjY1twbGFjZW1lbnRdID0gZGV0ZWN0T3ZlcmZsb3coc3RhdGUsIHtcbiAgICAgIHBsYWNlbWVudDogcGxhY2VtZW50LFxuICAgICAgYm91bmRhcnk6IGJvdW5kYXJ5LFxuICAgICAgcm9vdEJvdW5kYXJ5OiByb290Qm91bmRhcnksXG4gICAgICBwYWRkaW5nOiBwYWRkaW5nXG4gICAgfSlbZ2V0QmFzZVBsYWNlbWVudChwbGFjZW1lbnQpXTtcbiAgICByZXR1cm4gYWNjO1xuICB9LCB7fSk7XG4gIHJldHVybiBPYmplY3Qua2V5cyhvdmVyZmxvd3MpLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICByZXR1cm4gb3ZlcmZsb3dzW2FdIC0gb3ZlcmZsb3dzW2JdO1xuICB9KTtcbn0iLCJpbXBvcnQgeyB0b3AsIGxlZnQsIHJpZ2h0LCBib3R0b20sIHN0YXJ0IH0gZnJvbSBcIi4uL2VudW1zLmpzXCI7XG5pbXBvcnQgZ2V0QmFzZVBsYWNlbWVudCBmcm9tIFwiLi4vdXRpbHMvZ2V0QmFzZVBsYWNlbWVudC5qc1wiO1xuaW1wb3J0IGdldE1haW5BeGlzRnJvbVBsYWNlbWVudCBmcm9tIFwiLi4vdXRpbHMvZ2V0TWFpbkF4aXNGcm9tUGxhY2VtZW50LmpzXCI7XG5pbXBvcnQgZ2V0QWx0QXhpcyBmcm9tIFwiLi4vdXRpbHMvZ2V0QWx0QXhpcy5qc1wiO1xuaW1wb3J0IHsgd2l0aGluLCB3aXRoaW5NYXhDbGFtcCB9IGZyb20gXCIuLi91dGlscy93aXRoaW4uanNcIjtcbmltcG9ydCBnZXRMYXlvdXRSZWN0IGZyb20gXCIuLi9kb20tdXRpbHMvZ2V0TGF5b3V0UmVjdC5qc1wiO1xuaW1wb3J0IGdldE9mZnNldFBhcmVudCBmcm9tIFwiLi4vZG9tLXV0aWxzL2dldE9mZnNldFBhcmVudC5qc1wiO1xuaW1wb3J0IGRldGVjdE92ZXJmbG93IGZyb20gXCIuLi91dGlscy9kZXRlY3RPdmVyZmxvdy5qc1wiO1xuaW1wb3J0IGdldFZhcmlhdGlvbiBmcm9tIFwiLi4vdXRpbHMvZ2V0VmFyaWF0aW9uLmpzXCI7XG5pbXBvcnQgZ2V0RnJlc2hTaWRlT2JqZWN0IGZyb20gXCIuLi91dGlscy9nZXRGcmVzaFNpZGVPYmplY3QuanNcIjtcbmltcG9ydCB7IG1pbiBhcyBtYXRoTWluLCBtYXggYXMgbWF0aE1heCB9IGZyb20gXCIuLi91dGlscy9tYXRoLmpzXCI7XG5cbmZ1bmN0aW9uIHByZXZlbnRPdmVyZmxvdyhfcmVmKSB7XG4gIHZhciBzdGF0ZSA9IF9yZWYuc3RhdGUsXG4gICAgICBvcHRpb25zID0gX3JlZi5vcHRpb25zLFxuICAgICAgbmFtZSA9IF9yZWYubmFtZTtcbiAgdmFyIF9vcHRpb25zJG1haW5BeGlzID0gb3B0aW9ucy5tYWluQXhpcyxcbiAgICAgIGNoZWNrTWFpbkF4aXMgPSBfb3B0aW9ucyRtYWluQXhpcyA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9vcHRpb25zJG1haW5BeGlzLFxuICAgICAgX29wdGlvbnMkYWx0QXhpcyA9IG9wdGlvbnMuYWx0QXhpcyxcbiAgICAgIGNoZWNrQWx0QXhpcyA9IF9vcHRpb25zJGFsdEF4aXMgPT09IHZvaWQgMCA/IGZhbHNlIDogX29wdGlvbnMkYWx0QXhpcyxcbiAgICAgIGJvdW5kYXJ5ID0gb3B0aW9ucy5ib3VuZGFyeSxcbiAgICAgIHJvb3RCb3VuZGFyeSA9IG9wdGlvbnMucm9vdEJvdW5kYXJ5LFxuICAgICAgYWx0Qm91bmRhcnkgPSBvcHRpb25zLmFsdEJvdW5kYXJ5LFxuICAgICAgcGFkZGluZyA9IG9wdGlvbnMucGFkZGluZyxcbiAgICAgIF9vcHRpb25zJHRldGhlciA9IG9wdGlvbnMudGV0aGVyLFxuICAgICAgdGV0aGVyID0gX29wdGlvbnMkdGV0aGVyID09PSB2b2lkIDAgPyB0cnVlIDogX29wdGlvbnMkdGV0aGVyLFxuICAgICAgX29wdGlvbnMkdGV0aGVyT2Zmc2V0ID0gb3B0aW9ucy50ZXRoZXJPZmZzZXQsXG4gICAgICB0ZXRoZXJPZmZzZXQgPSBfb3B0aW9ucyR0ZXRoZXJPZmZzZXQgPT09IHZvaWQgMCA/IDAgOiBfb3B0aW9ucyR0ZXRoZXJPZmZzZXQ7XG4gIHZhciBvdmVyZmxvdyA9IGRldGVjdE92ZXJmbG93KHN0YXRlLCB7XG4gICAgYm91bmRhcnk6IGJvdW5kYXJ5LFxuICAgIHJvb3RCb3VuZGFyeTogcm9vdEJvdW5kYXJ5LFxuICAgIHBhZGRpbmc6IHBhZGRpbmcsXG4gICAgYWx0Qm91bmRhcnk6IGFsdEJvdW5kYXJ5XG4gIH0pO1xuICB2YXIgYmFzZVBsYWNlbWVudCA9IGdldEJhc2VQbGFjZW1lbnQoc3RhdGUucGxhY2VtZW50KTtcbiAgdmFyIHZhcmlhdGlvbiA9IGdldFZhcmlhdGlvbihzdGF0ZS5wbGFjZW1lbnQpO1xuICB2YXIgaXNCYXNlUGxhY2VtZW50ID0gIXZhcmlhdGlvbjtcbiAgdmFyIG1haW5BeGlzID0gZ2V0TWFpbkF4aXNGcm9tUGxhY2VtZW50KGJhc2VQbGFjZW1lbnQpO1xuICB2YXIgYWx0QXhpcyA9IGdldEFsdEF4aXMobWFpbkF4aXMpO1xuICB2YXIgcG9wcGVyT2Zmc2V0cyA9IHN0YXRlLm1vZGlmaWVyc0RhdGEucG9wcGVyT2Zmc2V0cztcbiAgdmFyIHJlZmVyZW5jZVJlY3QgPSBzdGF0ZS5yZWN0cy5yZWZlcmVuY2U7XG4gIHZhciBwb3BwZXJSZWN0ID0gc3RhdGUucmVjdHMucG9wcGVyO1xuICB2YXIgdGV0aGVyT2Zmc2V0VmFsdWUgPSB0eXBlb2YgdGV0aGVyT2Zmc2V0ID09PSAnZnVuY3Rpb24nID8gdGV0aGVyT2Zmc2V0KE9iamVjdC5hc3NpZ24oe30sIHN0YXRlLnJlY3RzLCB7XG4gICAgcGxhY2VtZW50OiBzdGF0ZS5wbGFjZW1lbnRcbiAgfSkpIDogdGV0aGVyT2Zmc2V0O1xuICB2YXIgbm9ybWFsaXplZFRldGhlck9mZnNldFZhbHVlID0gdHlwZW9mIHRldGhlck9mZnNldFZhbHVlID09PSAnbnVtYmVyJyA/IHtcbiAgICBtYWluQXhpczogdGV0aGVyT2Zmc2V0VmFsdWUsXG4gICAgYWx0QXhpczogdGV0aGVyT2Zmc2V0VmFsdWVcbiAgfSA6IE9iamVjdC5hc3NpZ24oe1xuICAgIG1haW5BeGlzOiAwLFxuICAgIGFsdEF4aXM6IDBcbiAgfSwgdGV0aGVyT2Zmc2V0VmFsdWUpO1xuICB2YXIgb2Zmc2V0TW9kaWZpZXJTdGF0ZSA9IHN0YXRlLm1vZGlmaWVyc0RhdGEub2Zmc2V0ID8gc3RhdGUubW9kaWZpZXJzRGF0YS5vZmZzZXRbc3RhdGUucGxhY2VtZW50XSA6IG51bGw7XG4gIHZhciBkYXRhID0ge1xuICAgIHg6IDAsXG4gICAgeTogMFxuICB9O1xuXG4gIGlmICghcG9wcGVyT2Zmc2V0cykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChjaGVja01haW5BeGlzKSB7XG4gICAgdmFyIF9vZmZzZXRNb2RpZmllclN0YXRlJDtcblxuICAgIHZhciBtYWluU2lkZSA9IG1haW5BeGlzID09PSAneScgPyB0b3AgOiBsZWZ0O1xuICAgIHZhciBhbHRTaWRlID0gbWFpbkF4aXMgPT09ICd5JyA/IGJvdHRvbSA6IHJpZ2h0O1xuICAgIHZhciBsZW4gPSBtYWluQXhpcyA9PT0gJ3knID8gJ2hlaWdodCcgOiAnd2lkdGgnO1xuICAgIHZhciBvZmZzZXQgPSBwb3BwZXJPZmZzZXRzW21haW5BeGlzXTtcbiAgICB2YXIgbWluID0gb2Zmc2V0ICsgb3ZlcmZsb3dbbWFpblNpZGVdO1xuICAgIHZhciBtYXggPSBvZmZzZXQgLSBvdmVyZmxvd1thbHRTaWRlXTtcbiAgICB2YXIgYWRkaXRpdmUgPSB0ZXRoZXIgPyAtcG9wcGVyUmVjdFtsZW5dIC8gMiA6IDA7XG4gICAgdmFyIG1pbkxlbiA9IHZhcmlhdGlvbiA9PT0gc3RhcnQgPyByZWZlcmVuY2VSZWN0W2xlbl0gOiBwb3BwZXJSZWN0W2xlbl07XG4gICAgdmFyIG1heExlbiA9IHZhcmlhdGlvbiA9PT0gc3RhcnQgPyAtcG9wcGVyUmVjdFtsZW5dIDogLXJlZmVyZW5jZVJlY3RbbGVuXTsgLy8gV2UgbmVlZCB0byBpbmNsdWRlIHRoZSBhcnJvdyBpbiB0aGUgY2FsY3VsYXRpb24gc28gdGhlIGFycm93IGRvZXNuJ3QgZ29cbiAgICAvLyBvdXRzaWRlIHRoZSByZWZlcmVuY2UgYm91bmRzXG5cbiAgICB2YXIgYXJyb3dFbGVtZW50ID0gc3RhdGUuZWxlbWVudHMuYXJyb3c7XG4gICAgdmFyIGFycm93UmVjdCA9IHRldGhlciAmJiBhcnJvd0VsZW1lbnQgPyBnZXRMYXlvdXRSZWN0KGFycm93RWxlbWVudCkgOiB7XG4gICAgICB3aWR0aDogMCxcbiAgICAgIGhlaWdodDogMFxuICAgIH07XG4gICAgdmFyIGFycm93UGFkZGluZ09iamVjdCA9IHN0YXRlLm1vZGlmaWVyc0RhdGFbJ2Fycm93I3BlcnNpc3RlbnQnXSA/IHN0YXRlLm1vZGlmaWVyc0RhdGFbJ2Fycm93I3BlcnNpc3RlbnQnXS5wYWRkaW5nIDogZ2V0RnJlc2hTaWRlT2JqZWN0KCk7XG4gICAgdmFyIGFycm93UGFkZGluZ01pbiA9IGFycm93UGFkZGluZ09iamVjdFttYWluU2lkZV07XG4gICAgdmFyIGFycm93UGFkZGluZ01heCA9IGFycm93UGFkZGluZ09iamVjdFthbHRTaWRlXTsgLy8gSWYgdGhlIHJlZmVyZW5jZSBsZW5ndGggaXMgc21hbGxlciB0aGFuIHRoZSBhcnJvdyBsZW5ndGgsIHdlIGRvbid0IHdhbnRcbiAgICAvLyB0byBpbmNsdWRlIGl0cyBmdWxsIHNpemUgaW4gdGhlIGNhbGN1bGF0aW9uLiBJZiB0aGUgcmVmZXJlbmNlIGlzIHNtYWxsXG4gICAgLy8gYW5kIG5lYXIgdGhlIGVkZ2Ugb2YgYSBib3VuZGFyeSwgdGhlIHBvcHBlciBjYW4gb3ZlcmZsb3cgZXZlbiBpZiB0aGVcbiAgICAvLyByZWZlcmVuY2UgaXMgbm90IG92ZXJmbG93aW5nIGFzIHdlbGwgKGUuZy4gdmlydHVhbCBlbGVtZW50cyB3aXRoIG5vXG4gICAgLy8gd2lkdGggb3IgaGVpZ2h0KVxuXG4gICAgdmFyIGFycm93TGVuID0gd2l0aGluKDAsIHJlZmVyZW5jZVJlY3RbbGVuXSwgYXJyb3dSZWN0W2xlbl0pO1xuICAgIHZhciBtaW5PZmZzZXQgPSBpc0Jhc2VQbGFjZW1lbnQgPyByZWZlcmVuY2VSZWN0W2xlbl0gLyAyIC0gYWRkaXRpdmUgLSBhcnJvd0xlbiAtIGFycm93UGFkZGluZ01pbiAtIG5vcm1hbGl6ZWRUZXRoZXJPZmZzZXRWYWx1ZS5tYWluQXhpcyA6IG1pbkxlbiAtIGFycm93TGVuIC0gYXJyb3dQYWRkaW5nTWluIC0gbm9ybWFsaXplZFRldGhlck9mZnNldFZhbHVlLm1haW5BeGlzO1xuICAgIHZhciBtYXhPZmZzZXQgPSBpc0Jhc2VQbGFjZW1lbnQgPyAtcmVmZXJlbmNlUmVjdFtsZW5dIC8gMiArIGFkZGl0aXZlICsgYXJyb3dMZW4gKyBhcnJvd1BhZGRpbmdNYXggKyBub3JtYWxpemVkVGV0aGVyT2Zmc2V0VmFsdWUubWFpbkF4aXMgOiBtYXhMZW4gKyBhcnJvd0xlbiArIGFycm93UGFkZGluZ01heCArIG5vcm1hbGl6ZWRUZXRoZXJPZmZzZXRWYWx1ZS5tYWluQXhpcztcbiAgICB2YXIgYXJyb3dPZmZzZXRQYXJlbnQgPSBzdGF0ZS5lbGVtZW50cy5hcnJvdyAmJiBnZXRPZmZzZXRQYXJlbnQoc3RhdGUuZWxlbWVudHMuYXJyb3cpO1xuICAgIHZhciBjbGllbnRPZmZzZXQgPSBhcnJvd09mZnNldFBhcmVudCA/IG1haW5BeGlzID09PSAneScgPyBhcnJvd09mZnNldFBhcmVudC5jbGllbnRUb3AgfHwgMCA6IGFycm93T2Zmc2V0UGFyZW50LmNsaWVudExlZnQgfHwgMCA6IDA7XG4gICAgdmFyIG9mZnNldE1vZGlmaWVyVmFsdWUgPSAoX29mZnNldE1vZGlmaWVyU3RhdGUkID0gb2Zmc2V0TW9kaWZpZXJTdGF0ZSA9PSBudWxsID8gdm9pZCAwIDogb2Zmc2V0TW9kaWZpZXJTdGF0ZVttYWluQXhpc10pICE9IG51bGwgPyBfb2Zmc2V0TW9kaWZpZXJTdGF0ZSQgOiAwO1xuICAgIHZhciB0ZXRoZXJNaW4gPSBvZmZzZXQgKyBtaW5PZmZzZXQgLSBvZmZzZXRNb2RpZmllclZhbHVlIC0gY2xpZW50T2Zmc2V0O1xuICAgIHZhciB0ZXRoZXJNYXggPSBvZmZzZXQgKyBtYXhPZmZzZXQgLSBvZmZzZXRNb2RpZmllclZhbHVlO1xuICAgIHZhciBwcmV2ZW50ZWRPZmZzZXQgPSB3aXRoaW4odGV0aGVyID8gbWF0aE1pbihtaW4sIHRldGhlck1pbikgOiBtaW4sIG9mZnNldCwgdGV0aGVyID8gbWF0aE1heChtYXgsIHRldGhlck1heCkgOiBtYXgpO1xuICAgIHBvcHBlck9mZnNldHNbbWFpbkF4aXNdID0gcHJldmVudGVkT2Zmc2V0O1xuICAgIGRhdGFbbWFpbkF4aXNdID0gcHJldmVudGVkT2Zmc2V0IC0gb2Zmc2V0O1xuICB9XG5cbiAgaWYgKGNoZWNrQWx0QXhpcykge1xuICAgIHZhciBfb2Zmc2V0TW9kaWZpZXJTdGF0ZSQyO1xuXG4gICAgdmFyIF9tYWluU2lkZSA9IG1haW5BeGlzID09PSAneCcgPyB0b3AgOiBsZWZ0O1xuXG4gICAgdmFyIF9hbHRTaWRlID0gbWFpbkF4aXMgPT09ICd4JyA/IGJvdHRvbSA6IHJpZ2h0O1xuXG4gICAgdmFyIF9vZmZzZXQgPSBwb3BwZXJPZmZzZXRzW2FsdEF4aXNdO1xuXG4gICAgdmFyIF9sZW4gPSBhbHRBeGlzID09PSAneScgPyAnaGVpZ2h0JyA6ICd3aWR0aCc7XG5cbiAgICB2YXIgX21pbiA9IF9vZmZzZXQgKyBvdmVyZmxvd1tfbWFpblNpZGVdO1xuXG4gICAgdmFyIF9tYXggPSBfb2Zmc2V0IC0gb3ZlcmZsb3dbX2FsdFNpZGVdO1xuXG4gICAgdmFyIGlzT3JpZ2luU2lkZSA9IFt0b3AsIGxlZnRdLmluZGV4T2YoYmFzZVBsYWNlbWVudCkgIT09IC0xO1xuXG4gICAgdmFyIF9vZmZzZXRNb2RpZmllclZhbHVlID0gKF9vZmZzZXRNb2RpZmllclN0YXRlJDIgPSBvZmZzZXRNb2RpZmllclN0YXRlID09IG51bGwgPyB2b2lkIDAgOiBvZmZzZXRNb2RpZmllclN0YXRlW2FsdEF4aXNdKSAhPSBudWxsID8gX29mZnNldE1vZGlmaWVyU3RhdGUkMiA6IDA7XG5cbiAgICB2YXIgX3RldGhlck1pbiA9IGlzT3JpZ2luU2lkZSA/IF9taW4gOiBfb2Zmc2V0IC0gcmVmZXJlbmNlUmVjdFtfbGVuXSAtIHBvcHBlclJlY3RbX2xlbl0gLSBfb2Zmc2V0TW9kaWZpZXJWYWx1ZSArIG5vcm1hbGl6ZWRUZXRoZXJPZmZzZXRWYWx1ZS5hbHRBeGlzO1xuXG4gICAgdmFyIF90ZXRoZXJNYXggPSBpc09yaWdpblNpZGUgPyBfb2Zmc2V0ICsgcmVmZXJlbmNlUmVjdFtfbGVuXSArIHBvcHBlclJlY3RbX2xlbl0gLSBfb2Zmc2V0TW9kaWZpZXJWYWx1ZSAtIG5vcm1hbGl6ZWRUZXRoZXJPZmZzZXRWYWx1ZS5hbHRBeGlzIDogX21heDtcblxuICAgIHZhciBfcHJldmVudGVkT2Zmc2V0ID0gdGV0aGVyICYmIGlzT3JpZ2luU2lkZSA/IHdpdGhpbk1heENsYW1wKF90ZXRoZXJNaW4sIF9vZmZzZXQsIF90ZXRoZXJNYXgpIDogd2l0aGluKHRldGhlciA/IF90ZXRoZXJNaW4gOiBfbWluLCBfb2Zmc2V0LCB0ZXRoZXIgPyBfdGV0aGVyTWF4IDogX21heCk7XG5cbiAgICBwb3BwZXJPZmZzZXRzW2FsdEF4aXNdID0gX3ByZXZlbnRlZE9mZnNldDtcbiAgICBkYXRhW2FsdEF4aXNdID0gX3ByZXZlbnRlZE9mZnNldCAtIF9vZmZzZXQ7XG4gIH1cblxuICBzdGF0ZS5tb2RpZmllcnNEYXRhW25hbWVdID0gZGF0YTtcbn0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuXG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgbmFtZTogJ3ByZXZlbnRPdmVyZmxvdycsXG4gIGVuYWJsZWQ6IHRydWUsXG4gIHBoYXNlOiAnbWFpbicsXG4gIGZuOiBwcmV2ZW50T3ZlcmZsb3csXG4gIHJlcXVpcmVzSWZFeGlzdHM6IFsnb2Zmc2V0J11cbn07IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0QWx0QXhpcyhheGlzKSB7XG4gIHJldHVybiBheGlzID09PSAneCcgPyAneScgOiAneCc7XG59IiwiaW1wb3J0IGdldEJhc2VQbGFjZW1lbnQgZnJvbSBcIi4uL3V0aWxzL2dldEJhc2VQbGFjZW1lbnQuanNcIjtcbmltcG9ydCBnZXRMYXlvdXRSZWN0IGZyb20gXCIuLi9kb20tdXRpbHMvZ2V0TGF5b3V0UmVjdC5qc1wiO1xuaW1wb3J0IGNvbnRhaW5zIGZyb20gXCIuLi9kb20tdXRpbHMvY29udGFpbnMuanNcIjtcbmltcG9ydCBnZXRPZmZzZXRQYXJlbnQgZnJvbSBcIi4uL2RvbS11dGlscy9nZXRPZmZzZXRQYXJlbnQuanNcIjtcbmltcG9ydCBnZXRNYWluQXhpc0Zyb21QbGFjZW1lbnQgZnJvbSBcIi4uL3V0aWxzL2dldE1haW5BeGlzRnJvbVBsYWNlbWVudC5qc1wiO1xuaW1wb3J0IHsgd2l0aGluIH0gZnJvbSBcIi4uL3V0aWxzL3dpdGhpbi5qc1wiO1xuaW1wb3J0IG1lcmdlUGFkZGluZ09iamVjdCBmcm9tIFwiLi4vdXRpbHMvbWVyZ2VQYWRkaW5nT2JqZWN0LmpzXCI7XG5pbXBvcnQgZXhwYW5kVG9IYXNoTWFwIGZyb20gXCIuLi91dGlscy9leHBhbmRUb0hhc2hNYXAuanNcIjtcbmltcG9ydCB7IGxlZnQsIHJpZ2h0LCBiYXNlUGxhY2VtZW50cywgdG9wLCBib3R0b20gfSBmcm9tIFwiLi4vZW51bXMuanNcIjsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuXG52YXIgdG9QYWRkaW5nT2JqZWN0ID0gZnVuY3Rpb24gdG9QYWRkaW5nT2JqZWN0KHBhZGRpbmcsIHN0YXRlKSB7XG4gIHBhZGRpbmcgPSB0eXBlb2YgcGFkZGluZyA9PT0gJ2Z1bmN0aW9uJyA/IHBhZGRpbmcoT2JqZWN0LmFzc2lnbih7fSwgc3RhdGUucmVjdHMsIHtcbiAgICBwbGFjZW1lbnQ6IHN0YXRlLnBsYWNlbWVudFxuICB9KSkgOiBwYWRkaW5nO1xuICByZXR1cm4gbWVyZ2VQYWRkaW5nT2JqZWN0KHR5cGVvZiBwYWRkaW5nICE9PSAnbnVtYmVyJyA/IHBhZGRpbmcgOiBleHBhbmRUb0hhc2hNYXAocGFkZGluZywgYmFzZVBsYWNlbWVudHMpKTtcbn07XG5cbmZ1bmN0aW9uIGFycm93KF9yZWYpIHtcbiAgdmFyIF9zdGF0ZSRtb2RpZmllcnNEYXRhJDtcblxuICB2YXIgc3RhdGUgPSBfcmVmLnN0YXRlLFxuICAgICAgbmFtZSA9IF9yZWYubmFtZSxcbiAgICAgIG9wdGlvbnMgPSBfcmVmLm9wdGlvbnM7XG4gIHZhciBhcnJvd0VsZW1lbnQgPSBzdGF0ZS5lbGVtZW50cy5hcnJvdztcbiAgdmFyIHBvcHBlck9mZnNldHMgPSBzdGF0ZS5tb2RpZmllcnNEYXRhLnBvcHBlck9mZnNldHM7XG4gIHZhciBiYXNlUGxhY2VtZW50ID0gZ2V0QmFzZVBsYWNlbWVudChzdGF0ZS5wbGFjZW1lbnQpO1xuICB2YXIgYXhpcyA9IGdldE1haW5BeGlzRnJvbVBsYWNlbWVudChiYXNlUGxhY2VtZW50KTtcbiAgdmFyIGlzVmVydGljYWwgPSBbbGVmdCwgcmlnaHRdLmluZGV4T2YoYmFzZVBsYWNlbWVudCkgPj0gMDtcbiAgdmFyIGxlbiA9IGlzVmVydGljYWwgPyAnaGVpZ2h0JyA6ICd3aWR0aCc7XG5cbiAgaWYgKCFhcnJvd0VsZW1lbnQgfHwgIXBvcHBlck9mZnNldHMpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgcGFkZGluZ09iamVjdCA9IHRvUGFkZGluZ09iamVjdChvcHRpb25zLnBhZGRpbmcsIHN0YXRlKTtcbiAgdmFyIGFycm93UmVjdCA9IGdldExheW91dFJlY3QoYXJyb3dFbGVtZW50KTtcbiAgdmFyIG1pblByb3AgPSBheGlzID09PSAneScgPyB0b3AgOiBsZWZ0O1xuICB2YXIgbWF4UHJvcCA9IGF4aXMgPT09ICd5JyA/IGJvdHRvbSA6IHJpZ2h0O1xuICB2YXIgZW5kRGlmZiA9IHN0YXRlLnJlY3RzLnJlZmVyZW5jZVtsZW5dICsgc3RhdGUucmVjdHMucmVmZXJlbmNlW2F4aXNdIC0gcG9wcGVyT2Zmc2V0c1theGlzXSAtIHN0YXRlLnJlY3RzLnBvcHBlcltsZW5dO1xuICB2YXIgc3RhcnREaWZmID0gcG9wcGVyT2Zmc2V0c1theGlzXSAtIHN0YXRlLnJlY3RzLnJlZmVyZW5jZVtheGlzXTtcbiAgdmFyIGFycm93T2Zmc2V0UGFyZW50ID0gZ2V0T2Zmc2V0UGFyZW50KGFycm93RWxlbWVudCk7XG4gIHZhciBjbGllbnRTaXplID0gYXJyb3dPZmZzZXRQYXJlbnQgPyBheGlzID09PSAneScgPyBhcnJvd09mZnNldFBhcmVudC5jbGllbnRIZWlnaHQgfHwgMCA6IGFycm93T2Zmc2V0UGFyZW50LmNsaWVudFdpZHRoIHx8IDAgOiAwO1xuICB2YXIgY2VudGVyVG9SZWZlcmVuY2UgPSBlbmREaWZmIC8gMiAtIHN0YXJ0RGlmZiAvIDI7IC8vIE1ha2Ugc3VyZSB0aGUgYXJyb3cgZG9lc24ndCBvdmVyZmxvdyB0aGUgcG9wcGVyIGlmIHRoZSBjZW50ZXIgcG9pbnQgaXNcbiAgLy8gb3V0c2lkZSBvZiB0aGUgcG9wcGVyIGJvdW5kc1xuXG4gIHZhciBtaW4gPSBwYWRkaW5nT2JqZWN0W21pblByb3BdO1xuICB2YXIgbWF4ID0gY2xpZW50U2l6ZSAtIGFycm93UmVjdFtsZW5dIC0gcGFkZGluZ09iamVjdFttYXhQcm9wXTtcbiAgdmFyIGNlbnRlciA9IGNsaWVudFNpemUgLyAyIC0gYXJyb3dSZWN0W2xlbl0gLyAyICsgY2VudGVyVG9SZWZlcmVuY2U7XG4gIHZhciBvZmZzZXQgPSB3aXRoaW4obWluLCBjZW50ZXIsIG1heCk7IC8vIFByZXZlbnRzIGJyZWFraW5nIHN5bnRheCBoaWdobGlnaHRpbmcuLi5cblxuICB2YXIgYXhpc1Byb3AgPSBheGlzO1xuICBzdGF0ZS5tb2RpZmllcnNEYXRhW25hbWVdID0gKF9zdGF0ZSRtb2RpZmllcnNEYXRhJCA9IHt9LCBfc3RhdGUkbW9kaWZpZXJzRGF0YSRbYXhpc1Byb3BdID0gb2Zmc2V0LCBfc3RhdGUkbW9kaWZpZXJzRGF0YSQuY2VudGVyT2Zmc2V0ID0gb2Zmc2V0IC0gY2VudGVyLCBfc3RhdGUkbW9kaWZpZXJzRGF0YSQpO1xufVxuXG5mdW5jdGlvbiBlZmZlY3QoX3JlZjIpIHtcbiAgdmFyIHN0YXRlID0gX3JlZjIuc3RhdGUsXG4gICAgICBvcHRpb25zID0gX3JlZjIub3B0aW9ucztcbiAgdmFyIF9vcHRpb25zJGVsZW1lbnQgPSBvcHRpb25zLmVsZW1lbnQsXG4gICAgICBhcnJvd0VsZW1lbnQgPSBfb3B0aW9ucyRlbGVtZW50ID09PSB2b2lkIDAgPyAnW2RhdGEtcG9wcGVyLWFycm93XScgOiBfb3B0aW9ucyRlbGVtZW50O1xuXG4gIGlmIChhcnJvd0VsZW1lbnQgPT0gbnVsbCkge1xuICAgIHJldHVybjtcbiAgfSAvLyBDU1Mgc2VsZWN0b3JcblxuXG4gIGlmICh0eXBlb2YgYXJyb3dFbGVtZW50ID09PSAnc3RyaW5nJykge1xuICAgIGFycm93RWxlbWVudCA9IHN0YXRlLmVsZW1lbnRzLnBvcHBlci5xdWVyeVNlbGVjdG9yKGFycm93RWxlbWVudCk7XG5cbiAgICBpZiAoIWFycm93RWxlbWVudCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfVxuXG4gIGlmICghY29udGFpbnMoc3RhdGUuZWxlbWVudHMucG9wcGVyLCBhcnJvd0VsZW1lbnQpKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgc3RhdGUuZWxlbWVudHMuYXJyb3cgPSBhcnJvd0VsZW1lbnQ7XG59IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcblxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIG5hbWU6ICdhcnJvdycsXG4gIGVuYWJsZWQ6IHRydWUsXG4gIHBoYXNlOiAnbWFpbicsXG4gIGZuOiBhcnJvdyxcbiAgZWZmZWN0OiBlZmZlY3QsXG4gIHJlcXVpcmVzOiBbJ3BvcHBlck9mZnNldHMnXSxcbiAgcmVxdWlyZXNJZkV4aXN0czogWydwcmV2ZW50T3ZlcmZsb3cnXVxufTsiLCJpbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzZXMnO1xuaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3MnO1xuZXhwb3J0IGZ1bmN0aW9uIGdldFBvcHBlclV0aWxpdHlDbGFzcyhzbG90KSB7XG4gIHJldHVybiBnZW5lcmF0ZVV0aWxpdHlDbGFzcygnTXVpUG9wcGVyJywgc2xvdCk7XG59XG5jb25zdCBwb3BwZXJDbGFzc2VzID0gZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcygnTXVpUG9wcGVyJywgWydyb290J10pO1xuZXhwb3J0IGRlZmF1bHQgcG9wcGVyQ2xhc3NlczsiLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJhbmNob3JFbFwiLCBcImNoaWxkcmVuXCIsIFwiZGlyZWN0aW9uXCIsIFwiZGlzYWJsZVBvcnRhbFwiLCBcIm1vZGlmaWVyc1wiLCBcIm9wZW5cIiwgXCJwbGFjZW1lbnRcIiwgXCJwb3BwZXJPcHRpb25zXCIsIFwicG9wcGVyUmVmXCIsIFwic2xvdFByb3BzXCIsIFwic2xvdHNcIiwgXCJUcmFuc2l0aW9uUHJvcHNcIiwgXCJvd25lclN0YXRlXCJdLFxuICBfZXhjbHVkZWQyID0gW1wiYW5jaG9yRWxcIiwgXCJjaGlsZHJlblwiLCBcImNvbnRhaW5lclwiLCBcImRpcmVjdGlvblwiLCBcImRpc2FibGVQb3J0YWxcIiwgXCJrZWVwTW91bnRlZFwiLCBcIm1vZGlmaWVyc1wiLCBcIm9wZW5cIiwgXCJwbGFjZW1lbnRcIiwgXCJwb3BwZXJPcHRpb25zXCIsIFwicG9wcGVyUmVmXCIsIFwic3R5bGVcIiwgXCJ0cmFuc2l0aW9uXCIsIFwic2xvdFByb3BzXCIsIFwic2xvdHNcIl07XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjaGFpblByb3BUeXBlcywgSFRNTEVsZW1lbnRUeXBlLCByZWZUeXBlLCB1bnN0YWJsZV9vd25lckRvY3VtZW50IGFzIG93bmVyRG9jdW1lbnQsIHVuc3RhYmxlX3VzZUVuaGFuY2VkRWZmZWN0IGFzIHVzZUVuaGFuY2VkRWZmZWN0LCB1bnN0YWJsZV91c2VGb3JrUmVmIGFzIHVzZUZvcmtSZWYgfSBmcm9tICdAbXVpL3V0aWxzJztcbmltcG9ydCB7IGNyZWF0ZVBvcHBlciB9IGZyb20gJ0Bwb3BwZXJqcy9jb3JlJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY29tcG9zZUNsYXNzZXMgZnJvbSAnQG11aS91dGlscy9jb21wb3NlQ2xhc3Nlcyc7XG5pbXBvcnQgdXNlU2xvdFByb3BzIGZyb20gJ0BtdWkvdXRpbHMvdXNlU2xvdFByb3BzJztcbmltcG9ydCBQb3J0YWwgZnJvbSAnLi4vUG9ydGFsJztcbmltcG9ydCB7IGdldFBvcHBlclV0aWxpdHlDbGFzcyB9IGZyb20gJy4vcG9wcGVyQ2xhc3Nlcyc7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuZnVuY3Rpb24gZmxpcFBsYWNlbWVudChwbGFjZW1lbnQsIGRpcmVjdGlvbikge1xuICBpZiAoZGlyZWN0aW9uID09PSAnbHRyJykge1xuICAgIHJldHVybiBwbGFjZW1lbnQ7XG4gIH1cbiAgc3dpdGNoIChwbGFjZW1lbnQpIHtcbiAgICBjYXNlICdib3R0b20tZW5kJzpcbiAgICAgIHJldHVybiAnYm90dG9tLXN0YXJ0JztcbiAgICBjYXNlICdib3R0b20tc3RhcnQnOlxuICAgICAgcmV0dXJuICdib3R0b20tZW5kJztcbiAgICBjYXNlICd0b3AtZW5kJzpcbiAgICAgIHJldHVybiAndG9wLXN0YXJ0JztcbiAgICBjYXNlICd0b3Atc3RhcnQnOlxuICAgICAgcmV0dXJuICd0b3AtZW5kJztcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHBsYWNlbWVudDtcbiAgfVxufVxuZnVuY3Rpb24gcmVzb2x2ZUFuY2hvckVsKGFuY2hvckVsKSB7XG4gIHJldHVybiB0eXBlb2YgYW5jaG9yRWwgPT09ICdmdW5jdGlvbicgPyBhbmNob3JFbCgpIDogYW5jaG9yRWw7XG59XG5mdW5jdGlvbiBpc0hUTUxFbGVtZW50KGVsZW1lbnQpIHtcbiAgcmV0dXJuIGVsZW1lbnQubm9kZVR5cGUgIT09IHVuZGVmaW5lZDtcbn1cbmZ1bmN0aW9uIGlzVmlydHVhbEVsZW1lbnQoZWxlbWVudCkge1xuICByZXR1cm4gIWlzSFRNTEVsZW1lbnQoZWxlbWVudCk7XG59XG5jb25zdCB1c2VVdGlsaXR5Q2xhc3NlcyA9IG93bmVyU3RhdGUgPT4ge1xuICBjb25zdCB7XG4gICAgY2xhc3Nlc1xuICB9ID0gb3duZXJTdGF0ZTtcbiAgY29uc3Qgc2xvdHMgPSB7XG4gICAgcm9vdDogWydyb290J11cbiAgfTtcbiAgcmV0dXJuIGNvbXBvc2VDbGFzc2VzKHNsb3RzLCBnZXRQb3BwZXJVdGlsaXR5Q2xhc3MsIGNsYXNzZXMpO1xufTtcbmNvbnN0IGRlZmF1bHRQb3BwZXJPcHRpb25zID0ge307XG5jb25zdCBQb3BwZXJUb29sdGlwID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gUG9wcGVyVG9vbHRpcChwcm9wcywgZm9yd2FyZGVkUmVmKSB7XG4gIHZhciBfc2xvdHMkcm9vdDtcbiAgY29uc3Qge1xuICAgICAgYW5jaG9yRWwsXG4gICAgICBjaGlsZHJlbixcbiAgICAgIGRpcmVjdGlvbixcbiAgICAgIGRpc2FibGVQb3J0YWwsXG4gICAgICBtb2RpZmllcnMsXG4gICAgICBvcGVuLFxuICAgICAgcGxhY2VtZW50OiBpbml0aWFsUGxhY2VtZW50LFxuICAgICAgcG9wcGVyT3B0aW9ucyxcbiAgICAgIHBvcHBlclJlZjogcG9wcGVyUmVmUHJvcCxcbiAgICAgIHNsb3RQcm9wcyA9IHt9LFxuICAgICAgc2xvdHMgPSB7fSxcbiAgICAgIFRyYW5zaXRpb25Qcm9wc1xuICAgICAgLy8gQHRzLWlnbm9yZSBpbnRlcm5hbCBsb2dpY1xuICAgICAgLy8gcHJldmVudCBmcm9tIHNwcmVhZGluZyB0byBET00sIGl0IGNhbiBjb21lIGZyb20gdGhlIHBhcmVudCBjb21wb25lbnQgZS5nLiBTZWxlY3QuXG4gICAgfSA9IHByb3BzLFxuICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIF9leGNsdWRlZCk7XG4gIGNvbnN0IHRvb2x0aXBSZWYgPSBSZWFjdC51c2VSZWYobnVsbCk7XG4gIGNvbnN0IG93blJlZiA9IHVzZUZvcmtSZWYodG9vbHRpcFJlZiwgZm9yd2FyZGVkUmVmKTtcbiAgY29uc3QgcG9wcGVyUmVmID0gUmVhY3QudXNlUmVmKG51bGwpO1xuICBjb25zdCBoYW5kbGVQb3BwZXJSZWYgPSB1c2VGb3JrUmVmKHBvcHBlclJlZiwgcG9wcGVyUmVmUHJvcCk7XG4gIGNvbnN0IGhhbmRsZVBvcHBlclJlZlJlZiA9IFJlYWN0LnVzZVJlZihoYW5kbGVQb3BwZXJSZWYpO1xuICB1c2VFbmhhbmNlZEVmZmVjdCgoKSA9PiB7XG4gICAgaGFuZGxlUG9wcGVyUmVmUmVmLmN1cnJlbnQgPSBoYW5kbGVQb3BwZXJSZWY7XG4gIH0sIFtoYW5kbGVQb3BwZXJSZWZdKTtcbiAgUmVhY3QudXNlSW1wZXJhdGl2ZUhhbmRsZShwb3BwZXJSZWZQcm9wLCAoKSA9PiBwb3BwZXJSZWYuY3VycmVudCwgW10pO1xuICBjb25zdCBydGxQbGFjZW1lbnQgPSBmbGlwUGxhY2VtZW50KGluaXRpYWxQbGFjZW1lbnQsIGRpcmVjdGlvbik7XG4gIC8qKlxuICAgKiBwbGFjZW1lbnQgaW5pdGlhbGl6ZWQgZnJvbSBwcm9wIGJ1dCBjYW4gY2hhbmdlIGR1cmluZyBsaWZldGltZSBpZiBtb2RpZmllcnMuZmxpcC5cbiAgICogbW9kaWZpZXJzLmZsaXAgaXMgZXNzZW50aWFsbHkgYSBmbGlwIGZvciBjb250cm9sbGVkL3VuY29udHJvbGxlZCBiZWhhdmlvclxuICAgKi9cbiAgY29uc3QgW3BsYWNlbWVudCwgc2V0UGxhY2VtZW50XSA9IFJlYWN0LnVzZVN0YXRlKHJ0bFBsYWNlbWVudCk7XG4gIGNvbnN0IFtyZXNvbHZlZEFuY2hvckVsZW1lbnQsIHNldFJlc29sdmVkQW5jaG9yRWxlbWVudF0gPSBSZWFjdC51c2VTdGF0ZShyZXNvbHZlQW5jaG9yRWwoYW5jaG9yRWwpKTtcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAocG9wcGVyUmVmLmN1cnJlbnQpIHtcbiAgICAgIHBvcHBlclJlZi5jdXJyZW50LmZvcmNlVXBkYXRlKCk7XG4gICAgfVxuICB9KTtcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoYW5jaG9yRWwpIHtcbiAgICAgIHNldFJlc29sdmVkQW5jaG9yRWxlbWVudChyZXNvbHZlQW5jaG9yRWwoYW5jaG9yRWwpKTtcbiAgICB9XG4gIH0sIFthbmNob3JFbF0pO1xuICB1c2VFbmhhbmNlZEVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKCFyZXNvbHZlZEFuY2hvckVsZW1lbnQgfHwgIW9wZW4pIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGNvbnN0IGhhbmRsZVBvcHBlclVwZGF0ZSA9IGRhdGEgPT4ge1xuICAgICAgc2V0UGxhY2VtZW50KGRhdGEucGxhY2VtZW50KTtcbiAgICB9O1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAocmVzb2x2ZWRBbmNob3JFbGVtZW50ICYmIGlzSFRNTEVsZW1lbnQocmVzb2x2ZWRBbmNob3JFbGVtZW50KSAmJiByZXNvbHZlZEFuY2hvckVsZW1lbnQubm9kZVR5cGUgPT09IDEpIHtcbiAgICAgICAgY29uc3QgYm94ID0gcmVzb2x2ZWRBbmNob3JFbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICd0ZXN0JyAmJiBib3gudG9wID09PSAwICYmIGJveC5sZWZ0ID09PSAwICYmIGJveC5yaWdodCA9PT0gMCAmJiBib3guYm90dG9tID09PSAwKSB7XG4gICAgICAgICAgY29uc29sZS53YXJuKFsnTVVJOiBUaGUgYGFuY2hvckVsYCBwcm9wIHByb3ZpZGVkIHRvIHRoZSBjb21wb25lbnQgaXMgaW52YWxpZC4nLCAnVGhlIGFuY2hvciBlbGVtZW50IHNob3VsZCBiZSBwYXJ0IG9mIHRoZSBkb2N1bWVudCBsYXlvdXQuJywgXCJNYWtlIHN1cmUgdGhlIGVsZW1lbnQgaXMgcHJlc2VudCBpbiB0aGUgZG9jdW1lbnQgb3IgdGhhdCBpdCdzIG5vdCBkaXNwbGF5IG5vbmUuXCJdLmpvaW4oJ1xcbicpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBsZXQgcG9wcGVyTW9kaWZpZXJzID0gW3tcbiAgICAgIG5hbWU6ICdwcmV2ZW50T3ZlcmZsb3cnLFxuICAgICAgb3B0aW9uczoge1xuICAgICAgICBhbHRCb3VuZGFyeTogZGlzYWJsZVBvcnRhbFxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIG5hbWU6ICdmbGlwJyxcbiAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgYWx0Qm91bmRhcnk6IGRpc2FibGVQb3J0YWxcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBuYW1lOiAnb25VcGRhdGUnLFxuICAgICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAgIHBoYXNlOiAnYWZ0ZXJXcml0ZScsXG4gICAgICBmbjogKHtcbiAgICAgICAgc3RhdGVcbiAgICAgIH0pID0+IHtcbiAgICAgICAgaGFuZGxlUG9wcGVyVXBkYXRlKHN0YXRlKTtcbiAgICAgIH1cbiAgICB9XTtcbiAgICBpZiAobW9kaWZpZXJzICE9IG51bGwpIHtcbiAgICAgIHBvcHBlck1vZGlmaWVycyA9IHBvcHBlck1vZGlmaWVycy5jb25jYXQobW9kaWZpZXJzKTtcbiAgICB9XG4gICAgaWYgKHBvcHBlck9wdGlvbnMgJiYgcG9wcGVyT3B0aW9ucy5tb2RpZmllcnMgIT0gbnVsbCkge1xuICAgICAgcG9wcGVyTW9kaWZpZXJzID0gcG9wcGVyTW9kaWZpZXJzLmNvbmNhdChwb3BwZXJPcHRpb25zLm1vZGlmaWVycyk7XG4gICAgfVxuICAgIGNvbnN0IHBvcHBlciA9IGNyZWF0ZVBvcHBlcihyZXNvbHZlZEFuY2hvckVsZW1lbnQsIHRvb2x0aXBSZWYuY3VycmVudCwgX2V4dGVuZHMoe1xuICAgICAgcGxhY2VtZW50OiBydGxQbGFjZW1lbnRcbiAgICB9LCBwb3BwZXJPcHRpb25zLCB7XG4gICAgICBtb2RpZmllcnM6IHBvcHBlck1vZGlmaWVyc1xuICAgIH0pKTtcbiAgICBoYW5kbGVQb3BwZXJSZWZSZWYuY3VycmVudChwb3BwZXIpO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBwb3BwZXIuZGVzdHJveSgpO1xuICAgICAgaGFuZGxlUG9wcGVyUmVmUmVmLmN1cnJlbnQobnVsbCk7XG4gICAgfTtcbiAgfSwgW3Jlc29sdmVkQW5jaG9yRWxlbWVudCwgZGlzYWJsZVBvcnRhbCwgbW9kaWZpZXJzLCBvcGVuLCBwb3BwZXJPcHRpb25zLCBydGxQbGFjZW1lbnRdKTtcbiAgY29uc3QgY2hpbGRQcm9wcyA9IHtcbiAgICBwbGFjZW1lbnQ6IHBsYWNlbWVudFxuICB9O1xuICBpZiAoVHJhbnNpdGlvblByb3BzICE9PSBudWxsKSB7XG4gICAgY2hpbGRQcm9wcy5UcmFuc2l0aW9uUHJvcHMgPSBUcmFuc2l0aW9uUHJvcHM7XG4gIH1cbiAgY29uc3QgY2xhc3NlcyA9IHVzZVV0aWxpdHlDbGFzc2VzKHByb3BzKTtcbiAgY29uc3QgUm9vdCA9IChfc2xvdHMkcm9vdCA9IHNsb3RzLnJvb3QpICE9IG51bGwgPyBfc2xvdHMkcm9vdCA6ICdkaXYnO1xuICBjb25zdCByb290UHJvcHMgPSB1c2VTbG90UHJvcHMoe1xuICAgIGVsZW1lbnRUeXBlOiBSb290LFxuICAgIGV4dGVybmFsU2xvdFByb3BzOiBzbG90UHJvcHMucm9vdCxcbiAgICBleHRlcm5hbEZvcndhcmRlZFByb3BzOiBvdGhlcixcbiAgICBhZGRpdGlvbmFsUHJvcHM6IHtcbiAgICAgIHJvbGU6ICd0b29sdGlwJyxcbiAgICAgIHJlZjogb3duUmVmXG4gICAgfSxcbiAgICBvd25lclN0YXRlOiBwcm9wcyxcbiAgICBjbGFzc05hbWU6IGNsYXNzZXMucm9vdFxuICB9KTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KFJvb3QsIF9leHRlbmRzKHt9LCByb290UHJvcHMsIHtcbiAgICBjaGlsZHJlbjogdHlwZW9mIGNoaWxkcmVuID09PSAnZnVuY3Rpb24nID8gY2hpbGRyZW4oY2hpbGRQcm9wcykgOiBjaGlsZHJlblxuICB9KSk7XG59KTtcblxuLyoqXG4gKiBAaWdub3JlIC0gaW50ZXJuYWwgY29tcG9uZW50LlxuICovXG5jb25zdCBQb3BwZXIgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBQb3BwZXIocHJvcHMsIGZvcndhcmRlZFJlZikge1xuICBjb25zdCB7XG4gICAgICBhbmNob3JFbCxcbiAgICAgIGNoaWxkcmVuLFxuICAgICAgY29udGFpbmVyOiBjb250YWluZXJQcm9wLFxuICAgICAgZGlyZWN0aW9uID0gJ2x0cicsXG4gICAgICBkaXNhYmxlUG9ydGFsID0gZmFsc2UsXG4gICAgICBrZWVwTW91bnRlZCA9IGZhbHNlLFxuICAgICAgbW9kaWZpZXJzLFxuICAgICAgb3BlbixcbiAgICAgIHBsYWNlbWVudCA9ICdib3R0b20nLFxuICAgICAgcG9wcGVyT3B0aW9ucyA9IGRlZmF1bHRQb3BwZXJPcHRpb25zLFxuICAgICAgcG9wcGVyUmVmLFxuICAgICAgc3R5bGUsXG4gICAgICB0cmFuc2l0aW9uID0gZmFsc2UsXG4gICAgICBzbG90UHJvcHMgPSB7fSxcbiAgICAgIHNsb3RzID0ge31cbiAgICB9ID0gcHJvcHMsXG4gICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkMik7XG4gIGNvbnN0IFtleGl0ZWQsIHNldEV4aXRlZF0gPSBSZWFjdC51c2VTdGF0ZSh0cnVlKTtcbiAgY29uc3QgaGFuZGxlRW50ZXIgPSAoKSA9PiB7XG4gICAgc2V0RXhpdGVkKGZhbHNlKTtcbiAgfTtcbiAgY29uc3QgaGFuZGxlRXhpdGVkID0gKCkgPT4ge1xuICAgIHNldEV4aXRlZCh0cnVlKTtcbiAgfTtcbiAgaWYgKCFrZWVwTW91bnRlZCAmJiAhb3BlbiAmJiAoIXRyYW5zaXRpb24gfHwgZXhpdGVkKSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgLy8gSWYgdGhlIGNvbnRhaW5lciBwcm9wIGlzIHByb3ZpZGVkLCB1c2UgdGhhdFxuICAvLyBJZiB0aGUgYW5jaG9yRWwgcHJvcCBpcyBwcm92aWRlZCwgdXNlIGl0cyBwYXJlbnQgYm9keSBlbGVtZW50IGFzIHRoZSBjb250YWluZXJcbiAgLy8gSWYgbmVpdGhlciBhcmUgcHJvdmlkZWQgbGV0IHRoZSBNb2RhbCB0YWtlIGNhcmUgb2YgY2hvb3NpbmcgdGhlIGNvbnRhaW5lclxuICBsZXQgY29udGFpbmVyO1xuICBpZiAoY29udGFpbmVyUHJvcCkge1xuICAgIGNvbnRhaW5lciA9IGNvbnRhaW5lclByb3A7XG4gIH0gZWxzZSBpZiAoYW5jaG9yRWwpIHtcbiAgICBjb25zdCByZXNvbHZlZEFuY2hvckVsID0gcmVzb2x2ZUFuY2hvckVsKGFuY2hvckVsKTtcbiAgICBjb250YWluZXIgPSByZXNvbHZlZEFuY2hvckVsICYmIGlzSFRNTEVsZW1lbnQocmVzb2x2ZWRBbmNob3JFbCkgPyBvd25lckRvY3VtZW50KHJlc29sdmVkQW5jaG9yRWwpLmJvZHkgOiBvd25lckRvY3VtZW50KG51bGwpLmJvZHk7XG4gIH1cbiAgY29uc3QgZGlzcGxheSA9ICFvcGVuICYmIGtlZXBNb3VudGVkICYmICghdHJhbnNpdGlvbiB8fCBleGl0ZWQpID8gJ25vbmUnIDogdW5kZWZpbmVkO1xuICBjb25zdCB0cmFuc2l0aW9uUHJvcHMgPSB0cmFuc2l0aW9uID8ge1xuICAgIGluOiBvcGVuLFxuICAgIG9uRW50ZXI6IGhhbmRsZUVudGVyLFxuICAgIG9uRXhpdGVkOiBoYW5kbGVFeGl0ZWRcbiAgfSA6IHVuZGVmaW5lZDtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KFBvcnRhbCwge1xuICAgIGRpc2FibGVQb3J0YWw6IGRpc2FibGVQb3J0YWwsXG4gICAgY29udGFpbmVyOiBjb250YWluZXIsXG4gICAgY2hpbGRyZW46IC8qI19fUFVSRV9fKi9fanN4KFBvcHBlclRvb2x0aXAsIF9leHRlbmRzKHtcbiAgICAgIGFuY2hvckVsOiBhbmNob3JFbCxcbiAgICAgIGRpcmVjdGlvbjogZGlyZWN0aW9uLFxuICAgICAgZGlzYWJsZVBvcnRhbDogZGlzYWJsZVBvcnRhbCxcbiAgICAgIG1vZGlmaWVyczogbW9kaWZpZXJzLFxuICAgICAgcmVmOiBmb3J3YXJkZWRSZWYsXG4gICAgICBvcGVuOiB0cmFuc2l0aW9uID8gIWV4aXRlZCA6IG9wZW4sXG4gICAgICBwbGFjZW1lbnQ6IHBsYWNlbWVudCxcbiAgICAgIHBvcHBlck9wdGlvbnM6IHBvcHBlck9wdGlvbnMsXG4gICAgICBwb3BwZXJSZWY6IHBvcHBlclJlZixcbiAgICAgIHNsb3RQcm9wczogc2xvdFByb3BzLFxuICAgICAgc2xvdHM6IHNsb3RzXG4gICAgfSwgb3RoZXIsIHtcbiAgICAgIHN0eWxlOiBfZXh0ZW5kcyh7XG4gICAgICAgIC8vIFByZXZlbnRzIHNjcm9sbCBpc3N1ZSwgd2FpdGluZyBmb3IgUG9wcGVyLmpzIHRvIGFkZCB0aGlzIHN0eWxlIG9uY2UgaW5pdGlhdGVkLlxuICAgICAgICBwb3NpdGlvbjogJ2ZpeGVkJyxcbiAgICAgICAgLy8gRml4IFBvcHBlci5qcyBkaXNwbGF5IGlzc3VlXG4gICAgICAgIHRvcDogMCxcbiAgICAgICAgbGVmdDogMCxcbiAgICAgICAgZGlzcGxheVxuICAgICAgfSwgc3R5bGUpLFxuICAgICAgVHJhbnNpdGlvblByb3BzOiB0cmFuc2l0aW9uUHJvcHMsXG4gICAgICBjaGlsZHJlbjogY2hpbGRyZW5cbiAgICB9KSlcbiAgfSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFBvcHBlci5wcm9wVHlwZXMgLyogcmVtb3ZlLXByb3B0eXBlcyAqLyA9IHtcbiAgLy8g4pSM4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAIFdhcm5pbmcg4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSQXG4gIC8vIOKUgiBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMuIOKUglxuICAvLyDilIIgVG8gdXBkYXRlIHRoZW0sIGVkaXQgdGhlIFR5cGVTY3JpcHQgdHlwZXMgYW5kIHJ1biBgcG5wbSBwcm9wdHlwZXNgLiDilIJcbiAgLy8g4pSU4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSYXG4gIC8qKlxuICAgKiBBbiBIVE1MIGVsZW1lbnQsIFt2aXJ0dWFsRWxlbWVudF0oaHR0cHM6Ly9wb3BwZXIuanMub3JnL2RvY3MvdjIvdmlydHVhbC1lbGVtZW50cy8pLFxuICAgKiBvciBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBlaXRoZXIuXG4gICAqIEl0J3MgdXNlZCB0byBzZXQgdGhlIHBvc2l0aW9uIG9mIHRoZSBwb3BwZXIuXG4gICAqIFRoZSByZXR1cm4gdmFsdWUgd2lsbCBwYXNzZWQgYXMgdGhlIHJlZmVyZW5jZSBvYmplY3Qgb2YgdGhlIFBvcHBlciBpbnN0YW5jZS5cbiAgICovXG4gIGFuY2hvckVsOiBjaGFpblByb3BUeXBlcyhQcm9wVHlwZXMub25lT2ZUeXBlKFtIVE1MRWxlbWVudFR5cGUsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5mdW5jXSksIHByb3BzID0+IHtcbiAgICBpZiAocHJvcHMub3Blbikge1xuICAgICAgY29uc3QgcmVzb2x2ZWRBbmNob3JFbCA9IHJlc29sdmVBbmNob3JFbChwcm9wcy5hbmNob3JFbCk7XG4gICAgICBpZiAocmVzb2x2ZWRBbmNob3JFbCAmJiBpc0hUTUxFbGVtZW50KHJlc29sdmVkQW5jaG9yRWwpICYmIHJlc29sdmVkQW5jaG9yRWwubm9kZVR5cGUgPT09IDEpIHtcbiAgICAgICAgY29uc3QgYm94ID0gcmVzb2x2ZWRBbmNob3JFbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAndGVzdCcgJiYgYm94LnRvcCA9PT0gMCAmJiBib3gubGVmdCA9PT0gMCAmJiBib3gucmlnaHQgPT09IDAgJiYgYm94LmJvdHRvbSA9PT0gMCkge1xuICAgICAgICAgIHJldHVybiBuZXcgRXJyb3IoWydNVUk6IFRoZSBgYW5jaG9yRWxgIHByb3AgcHJvdmlkZWQgdG8gdGhlIGNvbXBvbmVudCBpcyBpbnZhbGlkLicsICdUaGUgYW5jaG9yIGVsZW1lbnQgc2hvdWxkIGJlIHBhcnQgb2YgdGhlIGRvY3VtZW50IGxheW91dC4nLCBcIk1ha2Ugc3VyZSB0aGUgZWxlbWVudCBpcyBwcmVzZW50IGluIHRoZSBkb2N1bWVudCBvciB0aGF0IGl0J3Mgbm90IGRpc3BsYXkgbm9uZS5cIl0uam9pbignXFxuJykpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKCFyZXNvbHZlZEFuY2hvckVsIHx8IHR5cGVvZiByZXNvbHZlZEFuY2hvckVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCAhPT0gJ2Z1bmN0aW9uJyB8fCBpc1ZpcnR1YWxFbGVtZW50KHJlc29sdmVkQW5jaG9yRWwpICYmIHJlc29sdmVkQW5jaG9yRWwuY29udGV4dEVsZW1lbnQgIT0gbnVsbCAmJiByZXNvbHZlZEFuY2hvckVsLmNvbnRleHRFbGVtZW50Lm5vZGVUeXBlICE9PSAxKSB7XG4gICAgICAgIHJldHVybiBuZXcgRXJyb3IoWydNVUk6IFRoZSBgYW5jaG9yRWxgIHByb3AgcHJvdmlkZWQgdG8gdGhlIGNvbXBvbmVudCBpcyBpbnZhbGlkLicsICdJdCBzaG91bGQgYmUgYW4gSFRNTCBlbGVtZW50IGluc3RhbmNlIG9yIGEgdmlydHVhbEVsZW1lbnQgJywgJyhodHRwczovL3BvcHBlci5qcy5vcmcvZG9jcy92Mi92aXJ0dWFsLWVsZW1lbnRzLykuJ10uam9pbignXFxuJykpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfSksXG4gIC8qKlxuICAgKiBQb3BwZXIgcmVuZGVyIGZ1bmN0aW9uIG9yIG5vZGUuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi8ub25lT2ZUeXBlKFtQcm9wVHlwZXMubm9kZSwgUHJvcFR5cGVzLmZ1bmNdKSxcbiAgLyoqXG4gICAqIEFuIEhUTUwgZWxlbWVudCBvciBmdW5jdGlvbiB0aGF0IHJldHVybnMgb25lLlxuICAgKiBUaGUgYGNvbnRhaW5lcmAgd2lsbCBoYXZlIHRoZSBwb3J0YWwgY2hpbGRyZW4gYXBwZW5kZWQgdG8gaXQuXG4gICAqXG4gICAqIFlvdSBjYW4gYWxzbyBwcm92aWRlIGEgY2FsbGJhY2ssIHdoaWNoIGlzIGNhbGxlZCBpbiBhIFJlYWN0IGxheW91dCBlZmZlY3QuXG4gICAqIFRoaXMgbGV0cyB5b3Ugc2V0IHRoZSBjb250YWluZXIgZnJvbSBhIHJlZiwgYW5kIGFsc28gbWFrZXMgc2VydmVyLXNpZGUgcmVuZGVyaW5nIHBvc3NpYmxlLlxuICAgKlxuICAgKiBCeSBkZWZhdWx0LCBpdCB1c2VzIHRoZSBib2R5IG9mIHRoZSB0b3AtbGV2ZWwgZG9jdW1lbnQgb2JqZWN0LFxuICAgKiBzbyBpdCdzIHNpbXBseSBgZG9jdW1lbnQuYm9keWAgbW9zdCBvZiB0aGUgdGltZS5cbiAgICovXG4gIGNvbnRhaW5lcjogUHJvcFR5cGVzIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi8ub25lT2ZUeXBlKFtIVE1MRWxlbWVudFR5cGUsIFByb3BUeXBlcy5mdW5jXSksXG4gIC8qKlxuICAgKiBEaXJlY3Rpb24gb2YgdGhlIHRleHQuXG4gICAqIEBkZWZhdWx0ICdsdHInXG4gICAqL1xuICBkaXJlY3Rpb246IFByb3BUeXBlcy5vbmVPZihbJ2x0cicsICdydGwnXSksXG4gIC8qKlxuICAgKiBUaGUgYGNoaWxkcmVuYCB3aWxsIGJlIHVuZGVyIHRoZSBET00gaGllcmFyY2h5IG9mIHRoZSBwYXJlbnQgY29tcG9uZW50LlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZGlzYWJsZVBvcnRhbDogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBBbHdheXMga2VlcCB0aGUgY2hpbGRyZW4gaW4gdGhlIERPTS5cbiAgICogVGhpcyBwcm9wIGNhbiBiZSB1c2VmdWwgaW4gU0VPIHNpdHVhdGlvbiBvclxuICAgKiB3aGVuIHlvdSB3YW50IHRvIG1heGltaXplIHRoZSByZXNwb25zaXZlbmVzcyBvZiB0aGUgUG9wcGVyLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAga2VlcE1vdW50ZWQ6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogUG9wcGVyLmpzIGlzIGJhc2VkIG9uIGEgXCJwbHVnaW4tbGlrZVwiIGFyY2hpdGVjdHVyZSxcbiAgICogbW9zdCBvZiBpdHMgZmVhdHVyZXMgYXJlIGZ1bGx5IGVuY2Fwc3VsYXRlZCBcIm1vZGlmaWVyc1wiLlxuICAgKlxuICAgKiBBIG1vZGlmaWVyIGlzIGEgZnVuY3Rpb24gdGhhdCBpcyBjYWxsZWQgZWFjaCB0aW1lIFBvcHBlci5qcyBuZWVkcyB0b1xuICAgKiBjb21wdXRlIHRoZSBwb3NpdGlvbiBvZiB0aGUgcG9wcGVyLlxuICAgKiBGb3IgdGhpcyByZWFzb24sIG1vZGlmaWVycyBzaG91bGQgYmUgdmVyeSBwZXJmb3JtYW50IHRvIGF2b2lkIGJvdHRsZW5lY2tzLlxuICAgKiBUbyBsZWFybiBob3cgdG8gY3JlYXRlIGEgbW9kaWZpZXIsIFtyZWFkIHRoZSBtb2RpZmllcnMgZG9jdW1lbnRhdGlvbl0oaHR0cHM6Ly9wb3BwZXIuanMub3JnL2RvY3MvdjIvbW9kaWZpZXJzLykuXG4gICAqL1xuICBtb2RpZmllcnM6IFByb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5zaGFwZSh7XG4gICAgZGF0YTogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBlZmZlY3Q6IFByb3BUeXBlcy5mdW5jLFxuICAgIGVuYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuICAgIGZuOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBuYW1lOiBQcm9wVHlwZXMuYW55LFxuICAgIG9wdGlvbnM6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgcGhhc2U6IFByb3BUeXBlcy5vbmVPZihbJ2FmdGVyTWFpbicsICdhZnRlclJlYWQnLCAnYWZ0ZXJXcml0ZScsICdiZWZvcmVNYWluJywgJ2JlZm9yZVJlYWQnLCAnYmVmb3JlV3JpdGUnLCAnbWFpbicsICdyZWFkJywgJ3dyaXRlJ10pLFxuICAgIHJlcXVpcmVzOiBQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMuc3RyaW5nKSxcbiAgICByZXF1aXJlc0lmRXhpc3RzOiBQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMuc3RyaW5nKVxuICB9KSksXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBjb21wb25lbnQgaXMgc2hvd24uXG4gICAqL1xuICBvcGVuOiBQcm9wVHlwZXMuYm9vbC5pc1JlcXVpcmVkLFxuICAvKipcbiAgICogUG9wcGVyIHBsYWNlbWVudC5cbiAgICogQGRlZmF1bHQgJ2JvdHRvbSdcbiAgICovXG4gIHBsYWNlbWVudDogUHJvcFR5cGVzLm9uZU9mKFsnYXV0by1lbmQnLCAnYXV0by1zdGFydCcsICdhdXRvJywgJ2JvdHRvbS1lbmQnLCAnYm90dG9tLXN0YXJ0JywgJ2JvdHRvbScsICdsZWZ0LWVuZCcsICdsZWZ0LXN0YXJ0JywgJ2xlZnQnLCAncmlnaHQtZW5kJywgJ3JpZ2h0LXN0YXJ0JywgJ3JpZ2h0JywgJ3RvcC1lbmQnLCAndG9wLXN0YXJ0JywgJ3RvcCddKSxcbiAgLyoqXG4gICAqIE9wdGlvbnMgcHJvdmlkZWQgdG8gdGhlIFtgUG9wcGVyLmpzYF0oaHR0cHM6Ly9wb3BwZXIuanMub3JnL2RvY3MvdjIvY29uc3RydWN0b3JzLyNvcHRpb25zKSBpbnN0YW5jZS5cbiAgICogQGRlZmF1bHQge31cbiAgICovXG4gIHBvcHBlck9wdGlvbnM6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgbW9kaWZpZXJzOiBQcm9wVHlwZXMuYXJyYXksXG4gICAgb25GaXJzdFVwZGF0ZTogUHJvcFR5cGVzLmZ1bmMsXG4gICAgcGxhY2VtZW50OiBQcm9wVHlwZXMub25lT2YoWydhdXRvLWVuZCcsICdhdXRvLXN0YXJ0JywgJ2F1dG8nLCAnYm90dG9tLWVuZCcsICdib3R0b20tc3RhcnQnLCAnYm90dG9tJywgJ2xlZnQtZW5kJywgJ2xlZnQtc3RhcnQnLCAnbGVmdCcsICdyaWdodC1lbmQnLCAncmlnaHQtc3RhcnQnLCAncmlnaHQnLCAndG9wLWVuZCcsICd0b3Atc3RhcnQnLCAndG9wJ10pLFxuICAgIHN0cmF0ZWd5OiBQcm9wVHlwZXMub25lT2YoWydhYnNvbHV0ZScsICdmaXhlZCddKVxuICB9KSxcbiAgLyoqXG4gICAqIEEgcmVmIHRoYXQgcG9pbnRzIHRvIHRoZSB1c2VkIHBvcHBlciBpbnN0YW5jZS5cbiAgICovXG4gIHBvcHBlclJlZjogcmVmVHlwZSxcbiAgLyoqXG4gICAqIFRoZSBwcm9wcyB1c2VkIGZvciBlYWNoIHNsb3QgaW5zaWRlIHRoZSBQb3BwZXIuXG4gICAqIEBkZWZhdWx0IHt9XG4gICAqL1xuICBzbG90UHJvcHM6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgcm9vdDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKVxuICB9KSxcbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnRzIHVzZWQgZm9yIGVhY2ggc2xvdCBpbnNpZGUgdGhlIFBvcHBlci5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIEhUTUwgZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICogQGRlZmF1bHQge31cbiAgICovXG4gIHNsb3RzOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIHJvb3Q6IFByb3BUeXBlcy5lbGVtZW50VHlwZVxuICB9KSxcbiAgLyoqXG4gICAqIEhlbHAgc3VwcG9ydGluZyBhIHJlYWN0LXRyYW5zaXRpb24tZ3JvdXAvVHJhbnNpdGlvbiBjb21wb25lbnQuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICB0cmFuc2l0aW9uOiBQcm9wVHlwZXMuYm9vbFxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IFBvcHBlcjsiLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJhbmNob3JFbFwiLCBcImNvbXBvbmVudFwiLCBcImNvbXBvbmVudHNcIiwgXCJjb21wb25lbnRzUHJvcHNcIiwgXCJjb250YWluZXJcIiwgXCJkaXNhYmxlUG9ydGFsXCIsIFwia2VlcE1vdW50ZWRcIiwgXCJtb2RpZmllcnNcIiwgXCJvcGVuXCIsIFwicGxhY2VtZW50XCIsIFwicG9wcGVyT3B0aW9uc1wiLCBcInBvcHBlclJlZlwiLCBcInRyYW5zaXRpb25cIiwgXCJzbG90c1wiLCBcInNsb3RQcm9wc1wiXTtcbmltcG9ydCB1c2VUaGVtZSBmcm9tICdAbXVpL3N5c3RlbS91c2VUaGVtZVdpdGhvdXREZWZhdWx0JztcbmltcG9ydCByZWZUeXBlIGZyb20gJ0BtdWkvdXRpbHMvcmVmVHlwZSc7XG5pbXBvcnQgSFRNTEVsZW1lbnRUeXBlIGZyb20gJ0BtdWkvdXRpbHMvSFRNTEVsZW1lbnRUeXBlJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgQmFzZVBvcHBlciBmcm9tICcuL0Jhc2VQb3BwZXInO1xuaW1wb3J0IHsgc3R5bGVkIH0gZnJvbSAnLi4vc3R5bGVzJztcbmltcG9ydCB7IHVzZURlZmF1bHRQcm9wcyB9IGZyb20gJy4uL0RlZmF1bHRQcm9wc1Byb3ZpZGVyJztcbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5jb25zdCBQb3BwZXJSb290ID0gc3R5bGVkKEJhc2VQb3BwZXIsIHtcbiAgbmFtZTogJ011aVBvcHBlcicsXG4gIHNsb3Q6ICdSb290JyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiBzdHlsZXMucm9vdFxufSkoe30pO1xuXG4vKipcbiAqXG4gKiBEZW1vczpcbiAqXG4gKiAtIFtBdXRvY29tcGxldGVdKGh0dHBzOi8vbXVpLmNvbS9tYXRlcmlhbC11aS9yZWFjdC1hdXRvY29tcGxldGUvKVxuICogLSBbTWVudV0oaHR0cHM6Ly9tdWkuY29tL21hdGVyaWFsLXVpL3JlYWN0LW1lbnUvKVxuICogLSBbUG9wcGVyXShodHRwczovL211aS5jb20vbWF0ZXJpYWwtdWkvcmVhY3QtcG9wcGVyLylcbiAqXG4gKiBBUEk6XG4gKlxuICogLSBbUG9wcGVyIEFQSV0oaHR0cHM6Ly9tdWkuY29tL21hdGVyaWFsLXVpL2FwaS9wb3BwZXIvKVxuICovXG5jb25zdCBQb3BwZXIgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBQb3BwZXIoaW5Qcm9wcywgcmVmKSB7XG4gIHZhciBfc2xvdHMkcm9vdDtcbiAgY29uc3QgdGhlbWUgPSB1c2VUaGVtZSgpO1xuICBjb25zdCBwcm9wcyA9IHVzZURlZmF1bHRQcm9wcyh7XG4gICAgcHJvcHM6IGluUHJvcHMsXG4gICAgbmFtZTogJ011aVBvcHBlcidcbiAgfSk7XG4gIGNvbnN0IHtcbiAgICAgIGFuY2hvckVsLFxuICAgICAgY29tcG9uZW50LFxuICAgICAgY29tcG9uZW50cyxcbiAgICAgIGNvbXBvbmVudHNQcm9wcyxcbiAgICAgIGNvbnRhaW5lcixcbiAgICAgIGRpc2FibGVQb3J0YWwsXG4gICAgICBrZWVwTW91bnRlZCxcbiAgICAgIG1vZGlmaWVycyxcbiAgICAgIG9wZW4sXG4gICAgICBwbGFjZW1lbnQsXG4gICAgICBwb3BwZXJPcHRpb25zLFxuICAgICAgcG9wcGVyUmVmLFxuICAgICAgdHJhbnNpdGlvbixcbiAgICAgIHNsb3RzLFxuICAgICAgc2xvdFByb3BzXG4gICAgfSA9IHByb3BzLFxuICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIF9leGNsdWRlZCk7XG4gIGNvbnN0IFJvb3RDb21wb25lbnQgPSAoX3Nsb3RzJHJvb3QgPSBzbG90cyA9PSBudWxsID8gdm9pZCAwIDogc2xvdHMucm9vdCkgIT0gbnVsbCA/IF9zbG90cyRyb290IDogY29tcG9uZW50cyA9PSBudWxsID8gdm9pZCAwIDogY29tcG9uZW50cy5Sb290O1xuICBjb25zdCBvdGhlclByb3BzID0gX2V4dGVuZHMoe1xuICAgIGFuY2hvckVsLFxuICAgIGNvbnRhaW5lcixcbiAgICBkaXNhYmxlUG9ydGFsLFxuICAgIGtlZXBNb3VudGVkLFxuICAgIG1vZGlmaWVycyxcbiAgICBvcGVuLFxuICAgIHBsYWNlbWVudCxcbiAgICBwb3BwZXJPcHRpb25zLFxuICAgIHBvcHBlclJlZixcbiAgICB0cmFuc2l0aW9uXG4gIH0sIG90aGVyKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KFBvcHBlclJvb3QsIF9leHRlbmRzKHtcbiAgICBhczogY29tcG9uZW50LFxuICAgIGRpcmVjdGlvbjogdGhlbWUgPT0gbnVsbCA/IHZvaWQgMCA6IHRoZW1lLmRpcmVjdGlvbixcbiAgICBzbG90czoge1xuICAgICAgcm9vdDogUm9vdENvbXBvbmVudFxuICAgIH0sXG4gICAgc2xvdFByb3BzOiBzbG90UHJvcHMgIT0gbnVsbCA/IHNsb3RQcm9wcyA6IGNvbXBvbmVudHNQcm9wc1xuICB9LCBvdGhlclByb3BzLCB7XG4gICAgcmVmOiByZWZcbiAgfSkpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBQb3BwZXIucHJvcFR5cGVzIC8qIHJlbW92ZS1wcm9wdHlwZXMgKi8gPSB7XG4gIC8vIOKUjOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgCBXYXJuaW5nIOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUkFxuICAvLyDilIIgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zLiDilIJcbiAgLy8g4pSCIFRvIHVwZGF0ZSB0aGVtLCBlZGl0IHRoZSBUeXBlU2NyaXB0IHR5cGVzIGFuZCBydW4gYHBucG0gcHJvcHR5cGVzYC4g4pSCXG4gIC8vIOKUlOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUmFxuICAvKipcbiAgICogQW4gSFRNTCBlbGVtZW50LCBbdmlydHVhbEVsZW1lbnRdKGh0dHBzOi8vcG9wcGVyLmpzLm9yZy9kb2NzL3YyL3ZpcnR1YWwtZWxlbWVudHMvKSxcbiAgICogb3IgYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgZWl0aGVyLlxuICAgKiBJdCdzIHVzZWQgdG8gc2V0IHRoZSBwb3NpdGlvbiBvZiB0aGUgcG9wcGVyLlxuICAgKiBUaGUgcmV0dXJuIHZhbHVlIHdpbGwgcGFzc2VkIGFzIHRoZSByZWZlcmVuY2Ugb2JqZWN0IG9mIHRoZSBQb3BwZXIgaW5zdGFuY2UuXG4gICAqL1xuICBhbmNob3JFbDogUHJvcFR5cGVzIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi8ub25lT2ZUeXBlKFtIVE1MRWxlbWVudFR5cGUsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5mdW5jXSksXG4gIC8qKlxuICAgKiBQb3BwZXIgcmVuZGVyIGZ1bmN0aW9uIG9yIG5vZGUuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi8ub25lT2ZUeXBlKFtQcm9wVHlwZXMubm9kZSwgUHJvcFR5cGVzLmZ1bmNdKSxcbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHJvb3Qgbm9kZS5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIEhUTUwgZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudHMgdXNlZCBmb3IgZWFjaCBzbG90IGluc2lkZSB0aGUgUG9wcGVyLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgSFRNTCBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKiBAZGVmYXVsdCB7fVxuICAgKi9cbiAgY29tcG9uZW50czogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBSb290OiBQcm9wVHlwZXMuZWxlbWVudFR5cGVcbiAgfSksXG4gIC8qKlxuICAgKiBUaGUgcHJvcHMgdXNlZCBmb3IgZWFjaCBzbG90IGluc2lkZSB0aGUgUG9wcGVyLlxuICAgKiBAZGVmYXVsdCB7fVxuICAgKi9cbiAgY29tcG9uZW50c1Byb3BzOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIHJvb3Q6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSlcbiAgfSksXG4gIC8qKlxuICAgKiBBbiBIVE1MIGVsZW1lbnQgb3IgZnVuY3Rpb24gdGhhdCByZXR1cm5zIG9uZS5cbiAgICogVGhlIGBjb250YWluZXJgIHdpbGwgaGF2ZSB0aGUgcG9ydGFsIGNoaWxkcmVuIGFwcGVuZGVkIHRvIGl0LlxuICAgKlxuICAgKiBZb3UgY2FuIGFsc28gcHJvdmlkZSBhIGNhbGxiYWNrLCB3aGljaCBpcyBjYWxsZWQgaW4gYSBSZWFjdCBsYXlvdXQgZWZmZWN0LlxuICAgKiBUaGlzIGxldHMgeW91IHNldCB0aGUgY29udGFpbmVyIGZyb20gYSByZWYsIGFuZCBhbHNvIG1ha2VzIHNlcnZlci1zaWRlIHJlbmRlcmluZyBwb3NzaWJsZS5cbiAgICpcbiAgICogQnkgZGVmYXVsdCwgaXQgdXNlcyB0aGUgYm9keSBvZiB0aGUgdG9wLWxldmVsIGRvY3VtZW50IG9iamVjdCxcbiAgICogc28gaXQncyBzaW1wbHkgYGRvY3VtZW50LmJvZHlgIG1vc3Qgb2YgdGhlIHRpbWUuXG4gICAqL1xuICBjb250YWluZXI6IFByb3BUeXBlcyAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovLm9uZU9mVHlwZShbSFRNTEVsZW1lbnRUeXBlLCBQcm9wVHlwZXMuZnVuY10pLFxuICAvKipcbiAgICogVGhlIGBjaGlsZHJlbmAgd2lsbCBiZSB1bmRlciB0aGUgRE9NIGhpZXJhcmNoeSBvZiB0aGUgcGFyZW50IGNvbXBvbmVudC5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRpc2FibGVQb3J0YWw6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogQWx3YXlzIGtlZXAgdGhlIGNoaWxkcmVuIGluIHRoZSBET00uXG4gICAqIFRoaXMgcHJvcCBjYW4gYmUgdXNlZnVsIGluIFNFTyBzaXR1YXRpb24gb3JcbiAgICogd2hlbiB5b3Ugd2FudCB0byBtYXhpbWl6ZSB0aGUgcmVzcG9uc2l2ZW5lc3Mgb2YgdGhlIFBvcHBlci5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGtlZXBNb3VudGVkOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIFBvcHBlci5qcyBpcyBiYXNlZCBvbiBhIFwicGx1Z2luLWxpa2VcIiBhcmNoaXRlY3R1cmUsXG4gICAqIG1vc3Qgb2YgaXRzIGZlYXR1cmVzIGFyZSBmdWxseSBlbmNhcHN1bGF0ZWQgXCJtb2RpZmllcnNcIi5cbiAgICpcbiAgICogQSBtb2RpZmllciBpcyBhIGZ1bmN0aW9uIHRoYXQgaXMgY2FsbGVkIGVhY2ggdGltZSBQb3BwZXIuanMgbmVlZHMgdG9cbiAgICogY29tcHV0ZSB0aGUgcG9zaXRpb24gb2YgdGhlIHBvcHBlci5cbiAgICogRm9yIHRoaXMgcmVhc29uLCBtb2RpZmllcnMgc2hvdWxkIGJlIHZlcnkgcGVyZm9ybWFudCB0byBhdm9pZCBib3R0bGVuZWNrcy5cbiAgICogVG8gbGVhcm4gaG93IHRvIGNyZWF0ZSBhIG1vZGlmaWVyLCBbcmVhZCB0aGUgbW9kaWZpZXJzIGRvY3VtZW50YXRpb25dKGh0dHBzOi8vcG9wcGVyLmpzLm9yZy9kb2NzL3YyL21vZGlmaWVycy8pLlxuICAgKi9cbiAgbW9kaWZpZXJzOiBQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGRhdGE6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgZWZmZWN0OiBQcm9wVHlwZXMuZnVuYyxcbiAgICBlbmFibGVkOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBmbjogUHJvcFR5cGVzLmZ1bmMsXG4gICAgbmFtZTogUHJvcFR5cGVzLmFueSxcbiAgICBvcHRpb25zOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIHBoYXNlOiBQcm9wVHlwZXMub25lT2YoWydhZnRlck1haW4nLCAnYWZ0ZXJSZWFkJywgJ2FmdGVyV3JpdGUnLCAnYmVmb3JlTWFpbicsICdiZWZvcmVSZWFkJywgJ2JlZm9yZVdyaXRlJywgJ21haW4nLCAncmVhZCcsICd3cml0ZSddKSxcbiAgICByZXF1aXJlczogUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLnN0cmluZyksXG4gICAgcmVxdWlyZXNJZkV4aXN0czogUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLnN0cmluZylcbiAgfSkpLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgY29tcG9uZW50IGlzIHNob3duLlxuICAgKi9cbiAgb3BlbjogUHJvcFR5cGVzLmJvb2wuaXNSZXF1aXJlZCxcbiAgLyoqXG4gICAqIFBvcHBlciBwbGFjZW1lbnQuXG4gICAqIEBkZWZhdWx0ICdib3R0b20nXG4gICAqL1xuICBwbGFjZW1lbnQ6IFByb3BUeXBlcy5vbmVPZihbJ2F1dG8tZW5kJywgJ2F1dG8tc3RhcnQnLCAnYXV0bycsICdib3R0b20tZW5kJywgJ2JvdHRvbS1zdGFydCcsICdib3R0b20nLCAnbGVmdC1lbmQnLCAnbGVmdC1zdGFydCcsICdsZWZ0JywgJ3JpZ2h0LWVuZCcsICdyaWdodC1zdGFydCcsICdyaWdodCcsICd0b3AtZW5kJywgJ3RvcC1zdGFydCcsICd0b3AnXSksXG4gIC8qKlxuICAgKiBPcHRpb25zIHByb3ZpZGVkIHRvIHRoZSBbYFBvcHBlci5qc2BdKGh0dHBzOi8vcG9wcGVyLmpzLm9yZy9kb2NzL3YyL2NvbnN0cnVjdG9ycy8jb3B0aW9ucykgaW5zdGFuY2UuXG4gICAqIEBkZWZhdWx0IHt9XG4gICAqL1xuICBwb3BwZXJPcHRpb25zOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIG1vZGlmaWVyczogUHJvcFR5cGVzLmFycmF5LFxuICAgIG9uRmlyc3RVcGRhdGU6IFByb3BUeXBlcy5mdW5jLFxuICAgIHBsYWNlbWVudDogUHJvcFR5cGVzLm9uZU9mKFsnYXV0by1lbmQnLCAnYXV0by1zdGFydCcsICdhdXRvJywgJ2JvdHRvbS1lbmQnLCAnYm90dG9tLXN0YXJ0JywgJ2JvdHRvbScsICdsZWZ0LWVuZCcsICdsZWZ0LXN0YXJ0JywgJ2xlZnQnLCAncmlnaHQtZW5kJywgJ3JpZ2h0LXN0YXJ0JywgJ3JpZ2h0JywgJ3RvcC1lbmQnLCAndG9wLXN0YXJ0JywgJ3RvcCddKSxcbiAgICBzdHJhdGVneTogUHJvcFR5cGVzLm9uZU9mKFsnYWJzb2x1dGUnLCAnZml4ZWQnXSlcbiAgfSksXG4gIC8qKlxuICAgKiBBIHJlZiB0aGF0IHBvaW50cyB0byB0aGUgdXNlZCBwb3BwZXIgaW5zdGFuY2UuXG4gICAqL1xuICBwb3BwZXJSZWY6IHJlZlR5cGUsXG4gIC8qKlxuICAgKiBUaGUgcHJvcHMgdXNlZCBmb3IgZWFjaCBzbG90IGluc2lkZSB0aGUgUG9wcGVyLlxuICAgKiBAZGVmYXVsdCB7fVxuICAgKi9cbiAgc2xvdFByb3BzOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIHJvb3Q6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSlcbiAgfSksXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50cyB1c2VkIGZvciBlYWNoIHNsb3QgaW5zaWRlIHRoZSBQb3BwZXIuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBIVE1MIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqIEBkZWZhdWx0IHt9XG4gICAqL1xuICBzbG90czogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICByb290OiBQcm9wVHlwZXMuZWxlbWVudFR5cGVcbiAgfSksXG4gIC8qKlxuICAgKiBUaGUgc3lzdGVtIHByb3AgdGhhdCBhbGxvd3MgZGVmaW5pbmcgc3lzdGVtIG92ZXJyaWRlcyBhcyB3ZWxsIGFzIGFkZGl0aW9uYWwgQ1NTIHN0eWxlcy5cbiAgICovXG4gIHN4OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLmJvb2xdKSksIFByb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSksXG4gIC8qKlxuICAgKiBIZWxwIHN1cHBvcnRpbmcgYSByZWFjdC10cmFuc2l0aW9uLWdyb3VwL1RyYW5zaXRpb24gY29tcG9uZW50LlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgdHJhbnNpdGlvbjogUHJvcFR5cGVzLmJvb2xcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCBQb3BwZXI7IiwiaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzc2VzJztcbmltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzJztcbmV4cG9ydCBmdW5jdGlvbiBnZXRMaXN0U3ViaGVhZGVyVXRpbGl0eUNsYXNzKHNsb3QpIHtcbiAgcmV0dXJuIGdlbmVyYXRlVXRpbGl0eUNsYXNzKCdNdWlMaXN0U3ViaGVhZGVyJywgc2xvdCk7XG59XG5jb25zdCBsaXN0U3ViaGVhZGVyQ2xhc3NlcyA9IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMoJ011aUxpc3RTdWJoZWFkZXInLCBbJ3Jvb3QnLCAnY29sb3JQcmltYXJ5JywgJ2NvbG9ySW5oZXJpdCcsICdndXR0ZXJzJywgJ2luc2V0JywgJ3N0aWNreSddKTtcbmV4cG9ydCBkZWZhdWx0IGxpc3RTdWJoZWFkZXJDbGFzc2VzOyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImNsYXNzTmFtZVwiLCBcImNvbG9yXCIsIFwiY29tcG9uZW50XCIsIFwiZGlzYWJsZUd1dHRlcnNcIiwgXCJkaXNhYmxlU3RpY2t5XCIsIFwiaW5zZXRcIl07XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgY29tcG9zZUNsYXNzZXMgZnJvbSAnQG11aS91dGlscy9jb21wb3NlQ2xhc3Nlcyc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJy4uL3N0eWxlcy9zdHlsZWQnO1xuaW1wb3J0IHsgdXNlRGVmYXVsdFByb3BzIH0gZnJvbSAnLi4vRGVmYXVsdFByb3BzUHJvdmlkZXInO1xuaW1wb3J0IGNhcGl0YWxpemUgZnJvbSAnLi4vdXRpbHMvY2FwaXRhbGl6ZSc7XG5pbXBvcnQgeyBnZXRMaXN0U3ViaGVhZGVyVXRpbGl0eUNsYXNzIH0gZnJvbSAnLi9saXN0U3ViaGVhZGVyQ2xhc3Nlcyc7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuY29uc3QgdXNlVXRpbGl0eUNsYXNzZXMgPSBvd25lclN0YXRlID0+IHtcbiAgY29uc3Qge1xuICAgIGNsYXNzZXMsXG4gICAgY29sb3IsXG4gICAgZGlzYWJsZUd1dHRlcnMsXG4gICAgaW5zZXQsXG4gICAgZGlzYWJsZVN0aWNreVxuICB9ID0gb3duZXJTdGF0ZTtcbiAgY29uc3Qgc2xvdHMgPSB7XG4gICAgcm9vdDogWydyb290JywgY29sb3IgIT09ICdkZWZhdWx0JyAmJiBgY29sb3Ike2NhcGl0YWxpemUoY29sb3IpfWAsICFkaXNhYmxlR3V0dGVycyAmJiAnZ3V0dGVycycsIGluc2V0ICYmICdpbnNldCcsICFkaXNhYmxlU3RpY2t5ICYmICdzdGlja3knXVxuICB9O1xuICByZXR1cm4gY29tcG9zZUNsYXNzZXMoc2xvdHMsIGdldExpc3RTdWJoZWFkZXJVdGlsaXR5Q2xhc3MsIGNsYXNzZXMpO1xufTtcbmNvbnN0IExpc3RTdWJoZWFkZXJSb290ID0gc3R5bGVkKCdsaScsIHtcbiAgbmFtZTogJ011aUxpc3RTdWJoZWFkZXInLFxuICBzbG90OiAnUm9vdCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9ID0gcHJvcHM7XG4gICAgcmV0dXJuIFtzdHlsZXMucm9vdCwgb3duZXJTdGF0ZS5jb2xvciAhPT0gJ2RlZmF1bHQnICYmIHN0eWxlc1tgY29sb3Ike2NhcGl0YWxpemUob3duZXJTdGF0ZS5jb2xvcil9YF0sICFvd25lclN0YXRlLmRpc2FibGVHdXR0ZXJzICYmIHN0eWxlcy5ndXR0ZXJzLCBvd25lclN0YXRlLmluc2V0ICYmIHN0eWxlcy5pbnNldCwgIW93bmVyU3RhdGUuZGlzYWJsZVN0aWNreSAmJiBzdHlsZXMuc3RpY2t5XTtcbiAgfVxufSkoKHtcbiAgdGhlbWUsXG4gIG93bmVyU3RhdGVcbn0pID0+IF9leHRlbmRzKHtcbiAgYm94U2l6aW5nOiAnYm9yZGVyLWJveCcsXG4gIGxpbmVIZWlnaHQ6ICc0OHB4JyxcbiAgbGlzdFN0eWxlOiAnbm9uZScsXG4gIGNvbG9yOiAodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZS50ZXh0LnNlY29uZGFyeSxcbiAgZm9udEZhbWlseTogdGhlbWUudHlwb2dyYXBoeS5mb250RmFtaWx5LFxuICBmb250V2VpZ2h0OiB0aGVtZS50eXBvZ3JhcGh5LmZvbnRXZWlnaHRNZWRpdW0sXG4gIGZvbnRTaXplOiB0aGVtZS50eXBvZ3JhcGh5LnB4VG9SZW0oMTQpXG59LCBvd25lclN0YXRlLmNvbG9yID09PSAncHJpbWFyeScgJiYge1xuICBjb2xvcjogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGUucHJpbWFyeS5tYWluXG59LCBvd25lclN0YXRlLmNvbG9yID09PSAnaW5oZXJpdCcgJiYge1xuICBjb2xvcjogJ2luaGVyaXQnXG59LCAhb3duZXJTdGF0ZS5kaXNhYmxlR3V0dGVycyAmJiB7XG4gIHBhZGRpbmdMZWZ0OiAxNixcbiAgcGFkZGluZ1JpZ2h0OiAxNlxufSwgb3duZXJTdGF0ZS5pbnNldCAmJiB7XG4gIHBhZGRpbmdMZWZ0OiA3MlxufSwgIW93bmVyU3RhdGUuZGlzYWJsZVN0aWNreSAmJiB7XG4gIHBvc2l0aW9uOiAnc3RpY2t5JyxcbiAgdG9wOiAwLFxuICB6SW5kZXg6IDEsXG4gIGJhY2tncm91bmRDb2xvcjogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGUuYmFja2dyb3VuZC5wYXBlclxufSkpO1xuY29uc3QgTGlzdFN1YmhlYWRlciA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIExpc3RTdWJoZWFkZXIoaW5Qcm9wcywgcmVmKSB7XG4gIGNvbnN0IHByb3BzID0gdXNlRGVmYXVsdFByb3BzKHtcbiAgICBwcm9wczogaW5Qcm9wcyxcbiAgICBuYW1lOiAnTXVpTGlzdFN1YmhlYWRlcidcbiAgfSk7XG4gIGNvbnN0IHtcbiAgICAgIGNsYXNzTmFtZSxcbiAgICAgIGNvbG9yID0gJ2RlZmF1bHQnLFxuICAgICAgY29tcG9uZW50ID0gJ2xpJyxcbiAgICAgIGRpc2FibGVHdXR0ZXJzID0gZmFsc2UsXG4gICAgICBkaXNhYmxlU3RpY2t5ID0gZmFsc2UsXG4gICAgICBpbnNldCA9IGZhbHNlXG4gICAgfSA9IHByb3BzLFxuICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIF9leGNsdWRlZCk7XG4gIGNvbnN0IG93bmVyU3RhdGUgPSBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICBjb2xvcixcbiAgICBjb21wb25lbnQsXG4gICAgZGlzYWJsZUd1dHRlcnMsXG4gICAgZGlzYWJsZVN0aWNreSxcbiAgICBpbnNldFxuICB9KTtcbiAgY29uc3QgY2xhc3NlcyA9IHVzZVV0aWxpdHlDbGFzc2VzKG93bmVyU3RhdGUpO1xuICByZXR1cm4gLyojX19QVVJFX18qL19qc3goTGlzdFN1YmhlYWRlclJvb3QsIF9leHRlbmRzKHtcbiAgICBhczogY29tcG9uZW50LFxuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSksXG4gICAgcmVmOiByZWYsXG4gICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZVxuICB9LCBvdGhlcikpO1xufSk7XG5MaXN0U3ViaGVhZGVyLm11aVNraXBMaXN0SGlnaGxpZ2h0ID0gdHJ1ZTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IExpc3RTdWJoZWFkZXIucHJvcFR5cGVzIC8qIHJlbW92ZS1wcm9wdHlwZXMgKi8gPSB7XG4gIC8vIOKUjOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgCBXYXJuaW5nIOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUkFxuICAvLyDilIIgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zLiDilIJcbiAgLy8g4pSCICAgIFRvIHVwZGF0ZSB0aGVtLCBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBgcG5wbSBwcm9wdHlwZXNgLiAgICAg4pSCXG4gIC8vIOKUlOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUmFxuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBUaGUgY29sb3Igb2YgdGhlIGNvbXBvbmVudC4gSXQgc3VwcG9ydHMgdGhvc2UgdGhlbWUgY29sb3JzIHRoYXQgbWFrZSBzZW5zZSBmb3IgdGhpcyBjb21wb25lbnQuXG4gICAqIEBkZWZhdWx0ICdkZWZhdWx0J1xuICAgKi9cbiAgY29sb3I6IFByb3BUeXBlcy5vbmVPZihbJ2RlZmF1bHQnLCAnaW5oZXJpdCcsICdwcmltYXJ5J10pLFxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgcm9vdCBub2RlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgSFRNTCBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKi9cbiAgY29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBMaXN0IFN1YmhlYWRlciB3aWxsIG5vdCBoYXZlIGd1dHRlcnMuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkaXNhYmxlR3V0dGVyczogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBMaXN0IFN1YmhlYWRlciB3aWxsIG5vdCBzdGljayB0byB0aGUgdG9wIGR1cmluZyBzY3JvbGwuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkaXNhYmxlU3RpY2t5OiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIExpc3QgU3ViaGVhZGVyIGlzIGluZGVudGVkLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgaW5zZXQ6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogVGhlIHN5c3RlbSBwcm9wIHRoYXQgYWxsb3dzIGRlZmluaW5nIHN5c3RlbSBvdmVycmlkZXMgYXMgd2VsbCBhcyBhZGRpdGlvbmFsIENTUyBzdHlsZXMuXG4gICAqL1xuICBzeDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5ib29sXSkpLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgTGlzdFN1YmhlYWRlcjsiLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBjcmVhdGVTdmdJY29uIGZyb20gJy4uLy4uL3V0aWxzL2NyZWF0ZVN2Z0ljb24nO1xuXG4vKipcbiAqIEBpZ25vcmUgLSBpbnRlcm5hbCBjb21wb25lbnQuXG4gKi9cbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5leHBvcnQgZGVmYXVsdCBjcmVhdGVTdmdJY29uKCAvKiNfX1BVUkVfXyovX2pzeChcInBhdGhcIiwge1xuICBkOiBcIk0xMiAyQzYuNDcgMiAyIDYuNDcgMiAxMnM0LjQ3IDEwIDEwIDEwIDEwLTQuNDcgMTAtMTBTMTcuNTMgMiAxMiAyem01IDEzLjU5TDE1LjU5IDE3IDEyIDEzLjQxIDguNDEgMTcgNyAxNS41OSAxMC41OSAxMiA3IDguNDEgOC40MSA3IDEyIDEwLjU5IDE1LjU5IDcgMTcgOC40MSAxMy40MSAxMiAxNyAxNS41OXpcIlxufSksICdDYW5jZWwnKTsiLCJpbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzZXMnO1xuaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3MnO1xuZXhwb3J0IGZ1bmN0aW9uIGdldENoaXBVdGlsaXR5Q2xhc3Moc2xvdCkge1xuICByZXR1cm4gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoJ011aUNoaXAnLCBzbG90KTtcbn1cbmNvbnN0IGNoaXBDbGFzc2VzID0gZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcygnTXVpQ2hpcCcsIFsncm9vdCcsICdzaXplU21hbGwnLCAnc2l6ZU1lZGl1bScsICdjb2xvckVycm9yJywgJ2NvbG9ySW5mbycsICdjb2xvclByaW1hcnknLCAnY29sb3JTZWNvbmRhcnknLCAnY29sb3JTdWNjZXNzJywgJ2NvbG9yV2FybmluZycsICdkaXNhYmxlZCcsICdjbGlja2FibGUnLCAnY2xpY2thYmxlQ29sb3JQcmltYXJ5JywgJ2NsaWNrYWJsZUNvbG9yU2Vjb25kYXJ5JywgJ2RlbGV0YWJsZScsICdkZWxldGFibGVDb2xvclByaW1hcnknLCAnZGVsZXRhYmxlQ29sb3JTZWNvbmRhcnknLCAnb3V0bGluZWQnLCAnZmlsbGVkJywgJ291dGxpbmVkUHJpbWFyeScsICdvdXRsaW5lZFNlY29uZGFyeScsICdmaWxsZWRQcmltYXJ5JywgJ2ZpbGxlZFNlY29uZGFyeScsICdhdmF0YXInLCAnYXZhdGFyU21hbGwnLCAnYXZhdGFyTWVkaXVtJywgJ2F2YXRhckNvbG9yUHJpbWFyeScsICdhdmF0YXJDb2xvclNlY29uZGFyeScsICdpY29uJywgJ2ljb25TbWFsbCcsICdpY29uTWVkaXVtJywgJ2ljb25Db2xvclByaW1hcnknLCAnaWNvbkNvbG9yU2Vjb25kYXJ5JywgJ2xhYmVsJywgJ2xhYmVsU21hbGwnLCAnbGFiZWxNZWRpdW0nLCAnZGVsZXRlSWNvbicsICdkZWxldGVJY29uU21hbGwnLCAnZGVsZXRlSWNvbk1lZGl1bScsICdkZWxldGVJY29uQ29sb3JQcmltYXJ5JywgJ2RlbGV0ZUljb25Db2xvclNlY29uZGFyeScsICdkZWxldGVJY29uT3V0bGluZWRDb2xvclByaW1hcnknLCAnZGVsZXRlSWNvbk91dGxpbmVkQ29sb3JTZWNvbmRhcnknLCAnZGVsZXRlSWNvbkZpbGxlZENvbG9yUHJpbWFyeScsICdkZWxldGVJY29uRmlsbGVkQ29sb3JTZWNvbmRhcnknLCAnZm9jdXNWaXNpYmxlJ10pO1xuZXhwb3J0IGRlZmF1bHQgY2hpcENsYXNzZXM7IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiYXZhdGFyXCIsIFwiY2xhc3NOYW1lXCIsIFwiY2xpY2thYmxlXCIsIFwiY29sb3JcIiwgXCJjb21wb25lbnRcIiwgXCJkZWxldGVJY29uXCIsIFwiZGlzYWJsZWRcIiwgXCJpY29uXCIsIFwibGFiZWxcIiwgXCJvbkNsaWNrXCIsIFwib25EZWxldGVcIiwgXCJvbktleURvd25cIiwgXCJvbktleVVwXCIsIFwic2l6ZVwiLCBcInZhcmlhbnRcIiwgXCJ0YWJJbmRleFwiLCBcInNraXBGb2N1c1doZW5EaXNhYmxlZFwiXTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCBjb21wb3NlQ2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2NvbXBvc2VDbGFzc2VzJztcbmltcG9ydCB7IGFscGhhIH0gZnJvbSAnQG11aS9zeXN0ZW0vY29sb3JNYW5pcHVsYXRvcic7XG5pbXBvcnQgQ2FuY2VsSWNvbiBmcm9tICcuLi9pbnRlcm5hbC9zdmctaWNvbnMvQ2FuY2VsJztcbmltcG9ydCB1c2VGb3JrUmVmIGZyb20gJy4uL3V0aWxzL3VzZUZvcmtSZWYnO1xuaW1wb3J0IHVuc3VwcG9ydGVkUHJvcCBmcm9tICcuLi91dGlscy91bnN1cHBvcnRlZFByb3AnO1xuaW1wb3J0IGNhcGl0YWxpemUgZnJvbSAnLi4vdXRpbHMvY2FwaXRhbGl6ZSc7XG5pbXBvcnQgQnV0dG9uQmFzZSBmcm9tICcuLi9CdXR0b25CYXNlJztcbmltcG9ydCB7IHVzZURlZmF1bHRQcm9wcyB9IGZyb20gJy4uL0RlZmF1bHRQcm9wc1Byb3ZpZGVyJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnLi4vc3R5bGVzL3N0eWxlZCc7XG5pbXBvcnQgY2hpcENsYXNzZXMsIHsgZ2V0Q2hpcFV0aWxpdHlDbGFzcyB9IGZyb20gJy4vY2hpcENsYXNzZXMnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmltcG9ydCB7IGpzeHMgYXMgX2pzeHMgfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmNvbnN0IHVzZVV0aWxpdHlDbGFzc2VzID0gb3duZXJTdGF0ZSA9PiB7XG4gIGNvbnN0IHtcbiAgICBjbGFzc2VzLFxuICAgIGRpc2FibGVkLFxuICAgIHNpemUsXG4gICAgY29sb3IsXG4gICAgaWNvbkNvbG9yLFxuICAgIG9uRGVsZXRlLFxuICAgIGNsaWNrYWJsZSxcbiAgICB2YXJpYW50XG4gIH0gPSBvd25lclN0YXRlO1xuICBjb25zdCBzbG90cyA9IHtcbiAgICByb290OiBbJ3Jvb3QnLCB2YXJpYW50LCBkaXNhYmxlZCAmJiAnZGlzYWJsZWQnLCBgc2l6ZSR7Y2FwaXRhbGl6ZShzaXplKX1gLCBgY29sb3Ike2NhcGl0YWxpemUoY29sb3IpfWAsIGNsaWNrYWJsZSAmJiAnY2xpY2thYmxlJywgY2xpY2thYmxlICYmIGBjbGlja2FibGVDb2xvciR7Y2FwaXRhbGl6ZShjb2xvcil9YCwgb25EZWxldGUgJiYgJ2RlbGV0YWJsZScsIG9uRGVsZXRlICYmIGBkZWxldGFibGVDb2xvciR7Y2FwaXRhbGl6ZShjb2xvcil9YCwgYCR7dmFyaWFudH0ke2NhcGl0YWxpemUoY29sb3IpfWBdLFxuICAgIGxhYmVsOiBbJ2xhYmVsJywgYGxhYmVsJHtjYXBpdGFsaXplKHNpemUpfWBdLFxuICAgIGF2YXRhcjogWydhdmF0YXInLCBgYXZhdGFyJHtjYXBpdGFsaXplKHNpemUpfWAsIGBhdmF0YXJDb2xvciR7Y2FwaXRhbGl6ZShjb2xvcil9YF0sXG4gICAgaWNvbjogWydpY29uJywgYGljb24ke2NhcGl0YWxpemUoc2l6ZSl9YCwgYGljb25Db2xvciR7Y2FwaXRhbGl6ZShpY29uQ29sb3IpfWBdLFxuICAgIGRlbGV0ZUljb246IFsnZGVsZXRlSWNvbicsIGBkZWxldGVJY29uJHtjYXBpdGFsaXplKHNpemUpfWAsIGBkZWxldGVJY29uQ29sb3Ike2NhcGl0YWxpemUoY29sb3IpfWAsIGBkZWxldGVJY29uJHtjYXBpdGFsaXplKHZhcmlhbnQpfUNvbG9yJHtjYXBpdGFsaXplKGNvbG9yKX1gXVxuICB9O1xuICByZXR1cm4gY29tcG9zZUNsYXNzZXMoc2xvdHMsIGdldENoaXBVdGlsaXR5Q2xhc3MsIGNsYXNzZXMpO1xufTtcbmNvbnN0IENoaXBSb290ID0gc3R5bGVkKCdkaXYnLCB7XG4gIG5hbWU6ICdNdWlDaGlwJyxcbiAgc2xvdDogJ1Jvb3QnLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBvd25lclN0YXRlXG4gICAgfSA9IHByb3BzO1xuICAgIGNvbnN0IHtcbiAgICAgIGNvbG9yLFxuICAgICAgaWNvbkNvbG9yLFxuICAgICAgY2xpY2thYmxlLFxuICAgICAgb25EZWxldGUsXG4gICAgICBzaXplLFxuICAgICAgdmFyaWFudFxuICAgIH0gPSBvd25lclN0YXRlO1xuICAgIHJldHVybiBbe1xuICAgICAgW2AmIC4ke2NoaXBDbGFzc2VzLmF2YXRhcn1gXTogc3R5bGVzLmF2YXRhclxuICAgIH0sIHtcbiAgICAgIFtgJiAuJHtjaGlwQ2xhc3Nlcy5hdmF0YXJ9YF06IHN0eWxlc1tgYXZhdGFyJHtjYXBpdGFsaXplKHNpemUpfWBdXG4gICAgfSwge1xuICAgICAgW2AmIC4ke2NoaXBDbGFzc2VzLmF2YXRhcn1gXTogc3R5bGVzW2BhdmF0YXJDb2xvciR7Y2FwaXRhbGl6ZShjb2xvcil9YF1cbiAgICB9LCB7XG4gICAgICBbYCYgLiR7Y2hpcENsYXNzZXMuaWNvbn1gXTogc3R5bGVzLmljb25cbiAgICB9LCB7XG4gICAgICBbYCYgLiR7Y2hpcENsYXNzZXMuaWNvbn1gXTogc3R5bGVzW2BpY29uJHtjYXBpdGFsaXplKHNpemUpfWBdXG4gICAgfSwge1xuICAgICAgW2AmIC4ke2NoaXBDbGFzc2VzLmljb259YF06IHN0eWxlc1tgaWNvbkNvbG9yJHtjYXBpdGFsaXplKGljb25Db2xvcil9YF1cbiAgICB9LCB7XG4gICAgICBbYCYgLiR7Y2hpcENsYXNzZXMuZGVsZXRlSWNvbn1gXTogc3R5bGVzLmRlbGV0ZUljb25cbiAgICB9LCB7XG4gICAgICBbYCYgLiR7Y2hpcENsYXNzZXMuZGVsZXRlSWNvbn1gXTogc3R5bGVzW2BkZWxldGVJY29uJHtjYXBpdGFsaXplKHNpemUpfWBdXG4gICAgfSwge1xuICAgICAgW2AmIC4ke2NoaXBDbGFzc2VzLmRlbGV0ZUljb259YF06IHN0eWxlc1tgZGVsZXRlSWNvbkNvbG9yJHtjYXBpdGFsaXplKGNvbG9yKX1gXVxuICAgIH0sIHtcbiAgICAgIFtgJiAuJHtjaGlwQ2xhc3Nlcy5kZWxldGVJY29ufWBdOiBzdHlsZXNbYGRlbGV0ZUljb24ke2NhcGl0YWxpemUodmFyaWFudCl9Q29sb3Ike2NhcGl0YWxpemUoY29sb3IpfWBdXG4gICAgfSwgc3R5bGVzLnJvb3QsIHN0eWxlc1tgc2l6ZSR7Y2FwaXRhbGl6ZShzaXplKX1gXSwgc3R5bGVzW2Bjb2xvciR7Y2FwaXRhbGl6ZShjb2xvcil9YF0sIGNsaWNrYWJsZSAmJiBzdHlsZXMuY2xpY2thYmxlLCBjbGlja2FibGUgJiYgY29sb3IgIT09ICdkZWZhdWx0JyAmJiBzdHlsZXNbYGNsaWNrYWJsZUNvbG9yJHtjYXBpdGFsaXplKGNvbG9yKX0pYF0sIG9uRGVsZXRlICYmIHN0eWxlcy5kZWxldGFibGUsIG9uRGVsZXRlICYmIGNvbG9yICE9PSAnZGVmYXVsdCcgJiYgc3R5bGVzW2BkZWxldGFibGVDb2xvciR7Y2FwaXRhbGl6ZShjb2xvcil9YF0sIHN0eWxlc1t2YXJpYW50XSwgc3R5bGVzW2Ake3ZhcmlhbnR9JHtjYXBpdGFsaXplKGNvbG9yKX1gXV07XG4gIH1cbn0pKCh7XG4gIHRoZW1lLFxuICBvd25lclN0YXRlXG59KSA9PiB7XG4gIGNvbnN0IHRleHRDb2xvciA9IHRoZW1lLnBhbGV0dGUubW9kZSA9PT0gJ2xpZ2h0JyA/IHRoZW1lLnBhbGV0dGUuZ3JleVs3MDBdIDogdGhlbWUucGFsZXR0ZS5ncmV5WzMwMF07XG4gIHJldHVybiBfZXh0ZW5kcyh7XG4gICAgbWF4V2lkdGg6ICcxMDAlJyxcbiAgICBmb250RmFtaWx5OiB0aGVtZS50eXBvZ3JhcGh5LmZvbnRGYW1pbHksXG4gICAgZm9udFNpemU6IHRoZW1lLnR5cG9ncmFwaHkucHhUb1JlbSgxMyksXG4gICAgZGlzcGxheTogJ2lubGluZS1mbGV4JyxcbiAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICBqdXN0aWZ5Q29udGVudDogJ2NlbnRlcicsXG4gICAgaGVpZ2h0OiAzMixcbiAgICBjb2xvcjogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGUudGV4dC5wcmltYXJ5LFxuICAgIGJhY2tncm91bmRDb2xvcjogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGUuYWN0aW9uLnNlbGVjdGVkLFxuICAgIGJvcmRlclJhZGl1czogMzIgLyAyLFxuICAgIHdoaXRlU3BhY2U6ICdub3dyYXAnLFxuICAgIHRyYW5zaXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZShbJ2JhY2tncm91bmQtY29sb3InLCAnYm94LXNoYWRvdyddKSxcbiAgICAvLyByZXNldCBjdXJzb3IgZXhwbGljaXRseSBpbiBjYXNlIEJ1dHRvbkJhc2UgaXMgdXNlZFxuICAgIGN1cnNvcjogJ3Vuc2V0JyxcbiAgICAvLyBXZSBkaXNhYmxlIHRoZSBmb2N1cyByaW5nIGZvciBtb3VzZSwgdG91Y2ggYW5kIGtleWJvYXJkIHVzZXJzLlxuICAgIG91dGxpbmU6IDAsXG4gICAgdGV4dERlY29yYXRpb246ICdub25lJyxcbiAgICBib3JkZXI6IDAsXG4gICAgLy8gUmVtb3ZlIGBidXR0b25gIGJvcmRlclxuICAgIHBhZGRpbmc6IDAsXG4gICAgLy8gUmVtb3ZlIGBidXR0b25gIHBhZGRpbmdcbiAgICB2ZXJ0aWNhbEFsaWduOiAnbWlkZGxlJyxcbiAgICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcbiAgICBbYCYuJHtjaGlwQ2xhc3Nlcy5kaXNhYmxlZH1gXToge1xuICAgICAgb3BhY2l0eTogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGUuYWN0aW9uLmRpc2FibGVkT3BhY2l0eSxcbiAgICAgIHBvaW50ZXJFdmVudHM6ICdub25lJ1xuICAgIH0sXG4gICAgW2AmIC4ke2NoaXBDbGFzc2VzLmF2YXRhcn1gXToge1xuICAgICAgbWFyZ2luTGVmdDogNSxcbiAgICAgIG1hcmdpblJpZ2h0OiAtNixcbiAgICAgIHdpZHRoOiAyNCxcbiAgICAgIGhlaWdodDogMjQsXG4gICAgICBjb2xvcjogdGhlbWUudmFycyA/IHRoZW1lLnZhcnMucGFsZXR0ZS5DaGlwLmRlZmF1bHRBdmF0YXJDb2xvciA6IHRleHRDb2xvcixcbiAgICAgIGZvbnRTaXplOiB0aGVtZS50eXBvZ3JhcGh5LnB4VG9SZW0oMTIpXG4gICAgfSxcbiAgICBbYCYgLiR7Y2hpcENsYXNzZXMuYXZhdGFyQ29sb3JQcmltYXJ5fWBdOiB7XG4gICAgICBjb2xvcjogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGUucHJpbWFyeS5jb250cmFzdFRleHQsXG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlLnByaW1hcnkuZGFya1xuICAgIH0sXG4gICAgW2AmIC4ke2NoaXBDbGFzc2VzLmF2YXRhckNvbG9yU2Vjb25kYXJ5fWBdOiB7XG4gICAgICBjb2xvcjogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGUuc2Vjb25kYXJ5LmNvbnRyYXN0VGV4dCxcbiAgICAgIGJhY2tncm91bmRDb2xvcjogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGUuc2Vjb25kYXJ5LmRhcmtcbiAgICB9LFxuICAgIFtgJiAuJHtjaGlwQ2xhc3Nlcy5hdmF0YXJTbWFsbH1gXToge1xuICAgICAgbWFyZ2luTGVmdDogNCxcbiAgICAgIG1hcmdpblJpZ2h0OiAtNCxcbiAgICAgIHdpZHRoOiAxOCxcbiAgICAgIGhlaWdodDogMTgsXG4gICAgICBmb250U2l6ZTogdGhlbWUudHlwb2dyYXBoeS5weFRvUmVtKDEwKVxuICAgIH0sXG4gICAgW2AmIC4ke2NoaXBDbGFzc2VzLmljb259YF06IF9leHRlbmRzKHtcbiAgICAgIG1hcmdpbkxlZnQ6IDUsXG4gICAgICBtYXJnaW5SaWdodDogLTZcbiAgICB9LCBvd25lclN0YXRlLnNpemUgPT09ICdzbWFsbCcgJiYge1xuICAgICAgZm9udFNpemU6IDE4LFxuICAgICAgbWFyZ2luTGVmdDogNCxcbiAgICAgIG1hcmdpblJpZ2h0OiAtNFxuICAgIH0sIG93bmVyU3RhdGUuaWNvbkNvbG9yID09PSBvd25lclN0YXRlLmNvbG9yICYmIF9leHRlbmRzKHtcbiAgICAgIGNvbG9yOiB0aGVtZS52YXJzID8gdGhlbWUudmFycy5wYWxldHRlLkNoaXAuZGVmYXVsdEljb25Db2xvciA6IHRleHRDb2xvclxuICAgIH0sIG93bmVyU3RhdGUuY29sb3IgIT09ICdkZWZhdWx0JyAmJiB7XG4gICAgICBjb2xvcjogJ2luaGVyaXQnXG4gICAgfSkpLFxuICAgIFtgJiAuJHtjaGlwQ2xhc3Nlcy5kZWxldGVJY29ufWBdOiBfZXh0ZW5kcyh7XG4gICAgICBXZWJraXRUYXBIaWdobGlnaHRDb2xvcjogJ3RyYW5zcGFyZW50JyxcbiAgICAgIGNvbG9yOiB0aGVtZS52YXJzID8gYHJnYmEoJHt0aGVtZS52YXJzLnBhbGV0dGUudGV4dC5wcmltYXJ5Q2hhbm5lbH0gLyAwLjI2KWAgOiBhbHBoYSh0aGVtZS5wYWxldHRlLnRleHQucHJpbWFyeSwgMC4yNiksXG4gICAgICBmb250U2l6ZTogMjIsXG4gICAgICBjdXJzb3I6ICdwb2ludGVyJyxcbiAgICAgIG1hcmdpbjogJzAgNXB4IDAgLTZweCcsXG4gICAgICAnJjpob3Zlcic6IHtcbiAgICAgICAgY29sb3I6IHRoZW1lLnZhcnMgPyBgcmdiYSgke3RoZW1lLnZhcnMucGFsZXR0ZS50ZXh0LnByaW1hcnlDaGFubmVsfSAvIDAuNClgIDogYWxwaGEodGhlbWUucGFsZXR0ZS50ZXh0LnByaW1hcnksIDAuNClcbiAgICAgIH1cbiAgICB9LCBvd25lclN0YXRlLnNpemUgPT09ICdzbWFsbCcgJiYge1xuICAgICAgZm9udFNpemU6IDE2LFxuICAgICAgbWFyZ2luUmlnaHQ6IDQsXG4gICAgICBtYXJnaW5MZWZ0OiAtNFxuICAgIH0sIG93bmVyU3RhdGUuY29sb3IgIT09ICdkZWZhdWx0JyAmJiB7XG4gICAgICBjb2xvcjogdGhlbWUudmFycyA/IGByZ2JhKCR7dGhlbWUudmFycy5wYWxldHRlW293bmVyU3RhdGUuY29sb3JdLmNvbnRyYXN0VGV4dENoYW5uZWx9IC8gMC43KWAgOiBhbHBoYSh0aGVtZS5wYWxldHRlW293bmVyU3RhdGUuY29sb3JdLmNvbnRyYXN0VGV4dCwgMC43KSxcbiAgICAgICcmOmhvdmVyLCAmOmFjdGl2ZSc6IHtcbiAgICAgICAgY29sb3I6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlW293bmVyU3RhdGUuY29sb3JdLmNvbnRyYXN0VGV4dFxuICAgICAgfVxuICAgIH0pXG4gIH0sIG93bmVyU3RhdGUuc2l6ZSA9PT0gJ3NtYWxsJyAmJiB7XG4gICAgaGVpZ2h0OiAyNFxuICB9LCBvd25lclN0YXRlLmNvbG9yICE9PSAnZGVmYXVsdCcgJiYge1xuICAgIGJhY2tncm91bmRDb2xvcjogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGVbb3duZXJTdGF0ZS5jb2xvcl0ubWFpbixcbiAgICBjb2xvcjogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGVbb3duZXJTdGF0ZS5jb2xvcl0uY29udHJhc3RUZXh0XG4gIH0sIG93bmVyU3RhdGUub25EZWxldGUgJiYge1xuICAgIFtgJi4ke2NoaXBDbGFzc2VzLmZvY3VzVmlzaWJsZX1gXToge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS52YXJzID8gYHJnYmEoJHt0aGVtZS52YXJzLnBhbGV0dGUuYWN0aW9uLnNlbGVjdGVkQ2hhbm5lbH0gLyBjYWxjKCR7dGhlbWUudmFycy5wYWxldHRlLmFjdGlvbi5zZWxlY3RlZE9wYWNpdHl9ICsgJHt0aGVtZS52YXJzLnBhbGV0dGUuYWN0aW9uLmZvY3VzT3BhY2l0eX0pKWAgOiBhbHBoYSh0aGVtZS5wYWxldHRlLmFjdGlvbi5zZWxlY3RlZCwgdGhlbWUucGFsZXR0ZS5hY3Rpb24uc2VsZWN0ZWRPcGFjaXR5ICsgdGhlbWUucGFsZXR0ZS5hY3Rpb24uZm9jdXNPcGFjaXR5KVxuICAgIH1cbiAgfSwgb3duZXJTdGF0ZS5vbkRlbGV0ZSAmJiBvd25lclN0YXRlLmNvbG9yICE9PSAnZGVmYXVsdCcgJiYge1xuICAgIFtgJi4ke2NoaXBDbGFzc2VzLmZvY3VzVmlzaWJsZX1gXToge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiAodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZVtvd25lclN0YXRlLmNvbG9yXS5kYXJrXG4gICAgfVxuICB9KTtcbn0sICh7XG4gIHRoZW1lLFxuICBvd25lclN0YXRlXG59KSA9PiBfZXh0ZW5kcyh7fSwgb3duZXJTdGF0ZS5jbGlja2FibGUgJiYge1xuICB1c2VyU2VsZWN0OiAnbm9uZScsXG4gIFdlYmtpdFRhcEhpZ2hsaWdodENvbG9yOiAndHJhbnNwYXJlbnQnLFxuICBjdXJzb3I6ICdwb2ludGVyJyxcbiAgJyY6aG92ZXInOiB7XG4gICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS52YXJzID8gYHJnYmEoJHt0aGVtZS52YXJzLnBhbGV0dGUuYWN0aW9uLnNlbGVjdGVkQ2hhbm5lbH0gLyBjYWxjKCR7dGhlbWUudmFycy5wYWxldHRlLmFjdGlvbi5zZWxlY3RlZE9wYWNpdHl9ICsgJHt0aGVtZS52YXJzLnBhbGV0dGUuYWN0aW9uLmhvdmVyT3BhY2l0eX0pKWAgOiBhbHBoYSh0aGVtZS5wYWxldHRlLmFjdGlvbi5zZWxlY3RlZCwgdGhlbWUucGFsZXR0ZS5hY3Rpb24uc2VsZWN0ZWRPcGFjaXR5ICsgdGhlbWUucGFsZXR0ZS5hY3Rpb24uaG92ZXJPcGFjaXR5KVxuICB9LFxuICBbYCYuJHtjaGlwQ2xhc3Nlcy5mb2N1c1Zpc2libGV9YF06IHtcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnZhcnMgPyBgcmdiYSgke3RoZW1lLnZhcnMucGFsZXR0ZS5hY3Rpb24uc2VsZWN0ZWRDaGFubmVsfSAvIGNhbGMoJHt0aGVtZS52YXJzLnBhbGV0dGUuYWN0aW9uLnNlbGVjdGVkT3BhY2l0eX0gKyAke3RoZW1lLnZhcnMucGFsZXR0ZS5hY3Rpb24uZm9jdXNPcGFjaXR5fSkpYCA6IGFscGhhKHRoZW1lLnBhbGV0dGUuYWN0aW9uLnNlbGVjdGVkLCB0aGVtZS5wYWxldHRlLmFjdGlvbi5zZWxlY3RlZE9wYWNpdHkgKyB0aGVtZS5wYWxldHRlLmFjdGlvbi5mb2N1c09wYWNpdHkpXG4gIH0sXG4gICcmOmFjdGl2ZSc6IHtcbiAgICBib3hTaGFkb3c6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5zaGFkb3dzWzFdXG4gIH1cbn0sIG93bmVyU3RhdGUuY2xpY2thYmxlICYmIG93bmVyU3RhdGUuY29sb3IgIT09ICdkZWZhdWx0JyAmJiB7XG4gIFtgJjpob3ZlciwgJi4ke2NoaXBDbGFzc2VzLmZvY3VzVmlzaWJsZX1gXToge1xuICAgIGJhY2tncm91bmRDb2xvcjogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGVbb3duZXJTdGF0ZS5jb2xvcl0uZGFya1xuICB9XG59KSwgKHtcbiAgdGhlbWUsXG4gIG93bmVyU3RhdGVcbn0pID0+IF9leHRlbmRzKHt9LCBvd25lclN0YXRlLnZhcmlhbnQgPT09ICdvdXRsaW5lZCcgJiYge1xuICBiYWNrZ3JvdW5kQ29sb3I6ICd0cmFuc3BhcmVudCcsXG4gIGJvcmRlcjogdGhlbWUudmFycyA/IGAxcHggc29saWQgJHt0aGVtZS52YXJzLnBhbGV0dGUuQ2hpcC5kZWZhdWx0Qm9yZGVyfWAgOiBgMXB4IHNvbGlkICR7dGhlbWUucGFsZXR0ZS5tb2RlID09PSAnbGlnaHQnID8gdGhlbWUucGFsZXR0ZS5ncmV5WzQwMF0gOiB0aGVtZS5wYWxldHRlLmdyZXlbNzAwXX1gLFxuICBbYCYuJHtjaGlwQ2xhc3Nlcy5jbGlja2FibGV9OmhvdmVyYF06IHtcbiAgICBiYWNrZ3JvdW5kQ29sb3I6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlLmFjdGlvbi5ob3ZlclxuICB9LFxuICBbYCYuJHtjaGlwQ2xhc3Nlcy5mb2N1c1Zpc2libGV9YF06IHtcbiAgICBiYWNrZ3JvdW5kQ29sb3I6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlLmFjdGlvbi5mb2N1c1xuICB9LFxuICBbYCYgLiR7Y2hpcENsYXNzZXMuYXZhdGFyfWBdOiB7XG4gICAgbWFyZ2luTGVmdDogNFxuICB9LFxuICBbYCYgLiR7Y2hpcENsYXNzZXMuYXZhdGFyU21hbGx9YF06IHtcbiAgICBtYXJnaW5MZWZ0OiAyXG4gIH0sXG4gIFtgJiAuJHtjaGlwQ2xhc3Nlcy5pY29ufWBdOiB7XG4gICAgbWFyZ2luTGVmdDogNFxuICB9LFxuICBbYCYgLiR7Y2hpcENsYXNzZXMuaWNvblNtYWxsfWBdOiB7XG4gICAgbWFyZ2luTGVmdDogMlxuICB9LFxuICBbYCYgLiR7Y2hpcENsYXNzZXMuZGVsZXRlSWNvbn1gXToge1xuICAgIG1hcmdpblJpZ2h0OiA1XG4gIH0sXG4gIFtgJiAuJHtjaGlwQ2xhc3Nlcy5kZWxldGVJY29uU21hbGx9YF06IHtcbiAgICBtYXJnaW5SaWdodDogM1xuICB9XG59LCBvd25lclN0YXRlLnZhcmlhbnQgPT09ICdvdXRsaW5lZCcgJiYgb3duZXJTdGF0ZS5jb2xvciAhPT0gJ2RlZmF1bHQnICYmIHtcbiAgY29sb3I6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlW293bmVyU3RhdGUuY29sb3JdLm1haW4sXG4gIGJvcmRlcjogYDFweCBzb2xpZCAke3RoZW1lLnZhcnMgPyBgcmdiYSgke3RoZW1lLnZhcnMucGFsZXR0ZVtvd25lclN0YXRlLmNvbG9yXS5tYWluQ2hhbm5lbH0gLyAwLjcpYCA6IGFscGhhKHRoZW1lLnBhbGV0dGVbb3duZXJTdGF0ZS5jb2xvcl0ubWFpbiwgMC43KX1gLFxuICBbYCYuJHtjaGlwQ2xhc3Nlcy5jbGlja2FibGV9OmhvdmVyYF06IHtcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnZhcnMgPyBgcmdiYSgke3RoZW1lLnZhcnMucGFsZXR0ZVtvd25lclN0YXRlLmNvbG9yXS5tYWluQ2hhbm5lbH0gLyAke3RoZW1lLnZhcnMucGFsZXR0ZS5hY3Rpb24uaG92ZXJPcGFjaXR5fSlgIDogYWxwaGEodGhlbWUucGFsZXR0ZVtvd25lclN0YXRlLmNvbG9yXS5tYWluLCB0aGVtZS5wYWxldHRlLmFjdGlvbi5ob3Zlck9wYWNpdHkpXG4gIH0sXG4gIFtgJi4ke2NoaXBDbGFzc2VzLmZvY3VzVmlzaWJsZX1gXToge1xuICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUudmFycyA/IGByZ2JhKCR7dGhlbWUudmFycy5wYWxldHRlW293bmVyU3RhdGUuY29sb3JdLm1haW5DaGFubmVsfSAvICR7dGhlbWUudmFycy5wYWxldHRlLmFjdGlvbi5mb2N1c09wYWNpdHl9KWAgOiBhbHBoYSh0aGVtZS5wYWxldHRlW293bmVyU3RhdGUuY29sb3JdLm1haW4sIHRoZW1lLnBhbGV0dGUuYWN0aW9uLmZvY3VzT3BhY2l0eSlcbiAgfSxcbiAgW2AmIC4ke2NoaXBDbGFzc2VzLmRlbGV0ZUljb259YF06IHtcbiAgICBjb2xvcjogdGhlbWUudmFycyA/IGByZ2JhKCR7dGhlbWUudmFycy5wYWxldHRlW293bmVyU3RhdGUuY29sb3JdLm1haW5DaGFubmVsfSAvIDAuNylgIDogYWxwaGEodGhlbWUucGFsZXR0ZVtvd25lclN0YXRlLmNvbG9yXS5tYWluLCAwLjcpLFxuICAgICcmOmhvdmVyLCAmOmFjdGl2ZSc6IHtcbiAgICAgIGNvbG9yOiAodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZVtvd25lclN0YXRlLmNvbG9yXS5tYWluXG4gICAgfVxuICB9XG59KSk7XG5jb25zdCBDaGlwTGFiZWwgPSBzdHlsZWQoJ3NwYW4nLCB7XG4gIG5hbWU6ICdNdWlDaGlwJyxcbiAgc2xvdDogJ0xhYmVsJyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgb3duZXJTdGF0ZVxuICAgIH0gPSBwcm9wcztcbiAgICBjb25zdCB7XG4gICAgICBzaXplXG4gICAgfSA9IG93bmVyU3RhdGU7XG4gICAgcmV0dXJuIFtzdHlsZXMubGFiZWwsIHN0eWxlc1tgbGFiZWwke2NhcGl0YWxpemUoc2l6ZSl9YF1dO1xuICB9XG59KSgoe1xuICBvd25lclN0YXRlXG59KSA9PiBfZXh0ZW5kcyh7XG4gIG92ZXJmbG93OiAnaGlkZGVuJyxcbiAgdGV4dE92ZXJmbG93OiAnZWxsaXBzaXMnLFxuICBwYWRkaW5nTGVmdDogMTIsXG4gIHBhZGRpbmdSaWdodDogMTIsXG4gIHdoaXRlU3BhY2U6ICdub3dyYXAnXG59LCBvd25lclN0YXRlLnZhcmlhbnQgPT09ICdvdXRsaW5lZCcgJiYge1xuICBwYWRkaW5nTGVmdDogMTEsXG4gIHBhZGRpbmdSaWdodDogMTFcbn0sIG93bmVyU3RhdGUuc2l6ZSA9PT0gJ3NtYWxsJyAmJiB7XG4gIHBhZGRpbmdMZWZ0OiA4LFxuICBwYWRkaW5nUmlnaHQ6IDhcbn0sIG93bmVyU3RhdGUuc2l6ZSA9PT0gJ3NtYWxsJyAmJiBvd25lclN0YXRlLnZhcmlhbnQgPT09ICdvdXRsaW5lZCcgJiYge1xuICBwYWRkaW5nTGVmdDogNyxcbiAgcGFkZGluZ1JpZ2h0OiA3XG59KSk7XG5mdW5jdGlvbiBpc0RlbGV0ZUtleWJvYXJkRXZlbnQoa2V5Ym9hcmRFdmVudCkge1xuICByZXR1cm4ga2V5Ym9hcmRFdmVudC5rZXkgPT09ICdCYWNrc3BhY2UnIHx8IGtleWJvYXJkRXZlbnQua2V5ID09PSAnRGVsZXRlJztcbn1cblxuLyoqXG4gKiBDaGlwcyByZXByZXNlbnQgY29tcGxleCBlbnRpdGllcyBpbiBzbWFsbCBibG9ja3MsIHN1Y2ggYXMgYSBjb250YWN0LlxuICovXG5jb25zdCBDaGlwID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gQ2hpcChpblByb3BzLCByZWYpIHtcbiAgY29uc3QgcHJvcHMgPSB1c2VEZWZhdWx0UHJvcHMoe1xuICAgIHByb3BzOiBpblByb3BzLFxuICAgIG5hbWU6ICdNdWlDaGlwJ1xuICB9KTtcbiAgY29uc3Qge1xuICAgICAgYXZhdGFyOiBhdmF0YXJQcm9wLFxuICAgICAgY2xhc3NOYW1lLFxuICAgICAgY2xpY2thYmxlOiBjbGlja2FibGVQcm9wLFxuICAgICAgY29sb3IgPSAnZGVmYXVsdCcsXG4gICAgICBjb21wb25lbnQ6IENvbXBvbmVudFByb3AsXG4gICAgICBkZWxldGVJY29uOiBkZWxldGVJY29uUHJvcCxcbiAgICAgIGRpc2FibGVkID0gZmFsc2UsXG4gICAgICBpY29uOiBpY29uUHJvcCxcbiAgICAgIGxhYmVsLFxuICAgICAgb25DbGljayxcbiAgICAgIG9uRGVsZXRlLFxuICAgICAgb25LZXlEb3duLFxuICAgICAgb25LZXlVcCxcbiAgICAgIHNpemUgPSAnbWVkaXVtJyxcbiAgICAgIHZhcmlhbnQgPSAnZmlsbGVkJyxcbiAgICAgIHRhYkluZGV4LFxuICAgICAgc2tpcEZvY3VzV2hlbkRpc2FibGVkID0gZmFsc2UgLy8gVE9ETyB2NjogUmVuYW1lIHRvIGBmb2N1c2FibGVXaGVuRGlzYWJsZWRgLlxuICAgIH0gPSBwcm9wcyxcbiAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQpO1xuICBjb25zdCBjaGlwUmVmID0gUmVhY3QudXNlUmVmKG51bGwpO1xuICBjb25zdCBoYW5kbGVSZWYgPSB1c2VGb3JrUmVmKGNoaXBSZWYsIHJlZik7XG4gIGNvbnN0IGhhbmRsZURlbGV0ZUljb25DbGljayA9IGV2ZW50ID0+IHtcbiAgICAvLyBTdG9wIHRoZSBldmVudCBmcm9tIGJ1YmJsaW5nIHVwIHRvIHRoZSBgQ2hpcGBcbiAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICBpZiAob25EZWxldGUpIHtcbiAgICAgIG9uRGVsZXRlKGV2ZW50KTtcbiAgICB9XG4gIH07XG4gIGNvbnN0IGhhbmRsZUtleURvd24gPSBldmVudCA9PiB7XG4gICAgLy8gSWdub3JlIGV2ZW50cyBmcm9tIGNoaWxkcmVuIG9mIGBDaGlwYC5cbiAgICBpZiAoZXZlbnQuY3VycmVudFRhcmdldCA9PT0gZXZlbnQudGFyZ2V0ICYmIGlzRGVsZXRlS2V5Ym9hcmRFdmVudChldmVudCkpIHtcbiAgICAgIC8vIFdpbGwgYmUgaGFuZGxlZCBpbiBrZXlVcCwgb3RoZXJ3aXNlIHNvbWUgYnJvd3NlcnNcbiAgICAgIC8vIG1pZ2h0IGluaXQgbmF2aWdhdGlvblxuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICB9XG4gICAgaWYgKG9uS2V5RG93bikge1xuICAgICAgb25LZXlEb3duKGV2ZW50KTtcbiAgICB9XG4gIH07XG4gIGNvbnN0IGhhbmRsZUtleVVwID0gZXZlbnQgPT4ge1xuICAgIC8vIElnbm9yZSBldmVudHMgZnJvbSBjaGlsZHJlbiBvZiBgQ2hpcGAuXG4gICAgaWYgKGV2ZW50LmN1cnJlbnRUYXJnZXQgPT09IGV2ZW50LnRhcmdldCkge1xuICAgICAgaWYgKG9uRGVsZXRlICYmIGlzRGVsZXRlS2V5Ym9hcmRFdmVudChldmVudCkpIHtcbiAgICAgICAgb25EZWxldGUoZXZlbnQpO1xuICAgICAgfSBlbHNlIGlmIChldmVudC5rZXkgPT09ICdFc2NhcGUnICYmIGNoaXBSZWYuY3VycmVudCkge1xuICAgICAgICBjaGlwUmVmLmN1cnJlbnQuYmx1cigpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAob25LZXlVcCkge1xuICAgICAgb25LZXlVcChldmVudCk7XG4gICAgfVxuICB9O1xuICBjb25zdCBjbGlja2FibGUgPSBjbGlja2FibGVQcm9wICE9PSBmYWxzZSAmJiBvbkNsaWNrID8gdHJ1ZSA6IGNsaWNrYWJsZVByb3A7XG4gIGNvbnN0IGNvbXBvbmVudCA9IGNsaWNrYWJsZSB8fCBvbkRlbGV0ZSA/IEJ1dHRvbkJhc2UgOiBDb21wb25lbnRQcm9wIHx8ICdkaXYnO1xuICBjb25zdCBvd25lclN0YXRlID0gX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgY29tcG9uZW50LFxuICAgIGRpc2FibGVkLFxuICAgIHNpemUsXG4gICAgY29sb3IsXG4gICAgaWNvbkNvbG9yOiAvKiNfX1BVUkVfXyovUmVhY3QuaXNWYWxpZEVsZW1lbnQoaWNvblByb3ApID8gaWNvblByb3AucHJvcHMuY29sb3IgfHwgY29sb3IgOiBjb2xvcixcbiAgICBvbkRlbGV0ZTogISFvbkRlbGV0ZSxcbiAgICBjbGlja2FibGUsXG4gICAgdmFyaWFudFxuICB9KTtcbiAgY29uc3QgY2xhc3NlcyA9IHVzZVV0aWxpdHlDbGFzc2VzKG93bmVyU3RhdGUpO1xuICBjb25zdCBtb3JlUHJvcHMgPSBjb21wb25lbnQgPT09IEJ1dHRvbkJhc2UgPyBfZXh0ZW5kcyh7XG4gICAgY29tcG9uZW50OiBDb21wb25lbnRQcm9wIHx8ICdkaXYnLFxuICAgIGZvY3VzVmlzaWJsZUNsYXNzTmFtZTogY2xhc3Nlcy5mb2N1c1Zpc2libGVcbiAgfSwgb25EZWxldGUgJiYge1xuICAgIGRpc2FibGVSaXBwbGU6IHRydWVcbiAgfSkgOiB7fTtcbiAgbGV0IGRlbGV0ZUljb24gPSBudWxsO1xuICBpZiAob25EZWxldGUpIHtcbiAgICBkZWxldGVJY29uID0gZGVsZXRlSWNvblByb3AgJiYgLyojX19QVVJFX18qL1JlYWN0LmlzVmFsaWRFbGVtZW50KGRlbGV0ZUljb25Qcm9wKSA/ICggLyojX19QVVJFX18qL1JlYWN0LmNsb25lRWxlbWVudChkZWxldGVJY29uUHJvcCwge1xuICAgICAgY2xhc3NOYW1lOiBjbHN4KGRlbGV0ZUljb25Qcm9wLnByb3BzLmNsYXNzTmFtZSwgY2xhc3Nlcy5kZWxldGVJY29uKSxcbiAgICAgIG9uQ2xpY2s6IGhhbmRsZURlbGV0ZUljb25DbGlja1xuICAgIH0pKSA6IC8qI19fUFVSRV9fKi9fanN4KENhbmNlbEljb24sIHtcbiAgICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLmRlbGV0ZUljb24pLFxuICAgICAgb25DbGljazogaGFuZGxlRGVsZXRlSWNvbkNsaWNrXG4gICAgfSk7XG4gIH1cbiAgbGV0IGF2YXRhciA9IG51bGw7XG4gIGlmIChhdmF0YXJQcm9wICYmIC8qI19fUFVSRV9fKi9SZWFjdC5pc1ZhbGlkRWxlbWVudChhdmF0YXJQcm9wKSkge1xuICAgIGF2YXRhciA9IC8qI19fUFVSRV9fKi9SZWFjdC5jbG9uZUVsZW1lbnQoYXZhdGFyUHJvcCwge1xuICAgICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMuYXZhdGFyLCBhdmF0YXJQcm9wLnByb3BzLmNsYXNzTmFtZSlcbiAgICB9KTtcbiAgfVxuICBsZXQgaWNvbiA9IG51bGw7XG4gIGlmIChpY29uUHJvcCAmJiAvKiNfX1BVUkVfXyovUmVhY3QuaXNWYWxpZEVsZW1lbnQoaWNvblByb3ApKSB7XG4gICAgaWNvbiA9IC8qI19fUFVSRV9fKi9SZWFjdC5jbG9uZUVsZW1lbnQoaWNvblByb3AsIHtcbiAgICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLmljb24sIGljb25Qcm9wLnByb3BzLmNsYXNzTmFtZSlcbiAgICB9KTtcbiAgfVxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmIChhdmF0YXIgJiYgaWNvbikge1xuICAgICAgY29uc29sZS5lcnJvcignTVVJOiBUaGUgQ2hpcCBjb21wb25lbnQgY2FuIG5vdCBoYW5kbGUgdGhlIGF2YXRhciAnICsgJ2FuZCB0aGUgaWNvbiBwcm9wIGF0IHRoZSBzYW1lIHRpbWUuIFBpY2sgb25lLicpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gLyojX19QVVJFX18qL19qc3hzKENoaXBSb290LCBfZXh0ZW5kcyh7XG4gICAgYXM6IGNvbXBvbmVudCxcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWUpLFxuICAgIGRpc2FibGVkOiBjbGlja2FibGUgJiYgZGlzYWJsZWQgPyB0cnVlIDogdW5kZWZpbmVkLFxuICAgIG9uQ2xpY2s6IG9uQ2xpY2ssXG4gICAgb25LZXlEb3duOiBoYW5kbGVLZXlEb3duLFxuICAgIG9uS2V5VXA6IGhhbmRsZUtleVVwLFxuICAgIHJlZjogaGFuZGxlUmVmLFxuICAgIHRhYkluZGV4OiBza2lwRm9jdXNXaGVuRGlzYWJsZWQgJiYgZGlzYWJsZWQgPyAtMSA6IHRhYkluZGV4LFxuICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGVcbiAgfSwgbW9yZVByb3BzLCBvdGhlciwge1xuICAgIGNoaWxkcmVuOiBbYXZhdGFyIHx8IGljb24sIC8qI19fUFVSRV9fKi9fanN4KENoaXBMYWJlbCwge1xuICAgICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMubGFiZWwpLFxuICAgICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZSxcbiAgICAgIGNoaWxkcmVuOiBsYWJlbFxuICAgIH0pLCBkZWxldGVJY29uXVxuICB9KSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IENoaXAucHJvcFR5cGVzIC8qIHJlbW92ZS1wcm9wdHlwZXMgKi8gPSB7XG4gIC8vIOKUjOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgCBXYXJuaW5nIOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUkFxuICAvLyDilIIgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zLiDilIJcbiAgLy8g4pSCICAgIFRvIHVwZGF0ZSB0aGVtLCBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBgcG5wbSBwcm9wdHlwZXNgLiAgICAg4pSCXG4gIC8vIOKUlOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUmFxuICAvKipcbiAgICogVGhlIEF2YXRhciBlbGVtZW50IHRvIGRpc3BsYXkuXG4gICAqL1xuICBhdmF0YXI6IFByb3BUeXBlcy5lbGVtZW50LFxuICAvKipcbiAgICogVGhpcyBwcm9wIGlzbid0IHN1cHBvcnRlZC5cbiAgICogVXNlIHRoZSBgY29tcG9uZW50YCBwcm9wIGlmIHlvdSBuZWVkIHRvIGNoYW5nZSB0aGUgY2hpbGRyZW4gc3RydWN0dXJlLlxuICAgKi9cbiAgY2hpbGRyZW46IHVuc3VwcG9ydGVkUHJvcCxcbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBjaGlwIHdpbGwgYXBwZWFyIGNsaWNrYWJsZSwgYW5kIHdpbGwgcmFpc2Ugd2hlbiBwcmVzc2VkLFxuICAgKiBldmVuIGlmIHRoZSBvbkNsaWNrIHByb3AgaXMgbm90IGRlZmluZWQuXG4gICAqIElmIGBmYWxzZWAsIHRoZSBjaGlwIHdpbGwgbm90IGFwcGVhciBjbGlja2FibGUsIGV2ZW4gaWYgb25DbGljayBwcm9wIGlzIGRlZmluZWQuXG4gICAqIFRoaXMgY2FuIGJlIHVzZWQsIGZvciBleGFtcGxlLFxuICAgKiBhbG9uZyB3aXRoIHRoZSBjb21wb25lbnQgcHJvcCB0byBpbmRpY2F0ZSBhbiBhbmNob3IgQ2hpcCBpcyBjbGlja2FibGUuXG4gICAqIE5vdGU6IHRoaXMgY29udHJvbHMgdGhlIFVJIGFuZCBkb2VzIG5vdCBhZmZlY3QgdGhlIG9uQ2xpY2sgZXZlbnQuXG4gICAqL1xuICBjbGlja2FibGU6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogVGhlIGNvbG9yIG9mIHRoZSBjb21wb25lbnQuXG4gICAqIEl0IHN1cHBvcnRzIGJvdGggZGVmYXVsdCBhbmQgY3VzdG9tIHRoZW1lIGNvbG9ycywgd2hpY2ggY2FuIGJlIGFkZGVkIGFzIHNob3duIGluIHRoZVxuICAgKiBbcGFsZXR0ZSBjdXN0b21pemF0aW9uIGd1aWRlXShodHRwczovL211aS5jb20vbWF0ZXJpYWwtdWkvY3VzdG9taXphdGlvbi9wYWxldHRlLyNjdXN0b20tY29sb3JzKS5cbiAgICogQGRlZmF1bHQgJ2RlZmF1bHQnXG4gICAqL1xuICBjb2xvcjogUHJvcFR5cGVzIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi8ub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydkZWZhdWx0JywgJ3ByaW1hcnknLCAnc2Vjb25kYXJ5JywgJ2Vycm9yJywgJ2luZm8nLCAnc3VjY2VzcycsICd3YXJuaW5nJ10pLCBQcm9wVHlwZXMuc3RyaW5nXSksXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBIVE1MIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBjb21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcbiAgLyoqXG4gICAqIE92ZXJyaWRlIHRoZSBkZWZhdWx0IGRlbGV0ZSBpY29uIGVsZW1lbnQuIFNob3duIG9ubHkgaWYgYG9uRGVsZXRlYCBpcyBzZXQuXG4gICAqL1xuICBkZWxldGVJY29uOiBQcm9wVHlwZXMuZWxlbWVudCxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGNvbXBvbmVudCBpcyBkaXNhYmxlZC5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRpc2FibGVkOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIEljb24gZWxlbWVudC5cbiAgICovXG4gIGljb246IFByb3BUeXBlcy5lbGVtZW50LFxuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGxhYmVsOiBQcm9wVHlwZXMubm9kZSxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uQ2xpY2s6IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgZGVsZXRlIGljb24gaXMgY2xpY2tlZC5cbiAgICogSWYgc2V0LCB0aGUgZGVsZXRlIGljb24gd2lsbCBiZSBzaG93bi5cbiAgICovXG4gIG9uRGVsZXRlOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uS2V5RG93bjogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbktleVVwOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIFRoZSBzaXplIG9mIHRoZSBjb21wb25lbnQuXG4gICAqIEBkZWZhdWx0ICdtZWRpdW0nXG4gICAqL1xuICBzaXplOiBQcm9wVHlwZXMgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqLy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ21lZGl1bScsICdzbWFsbCddKSwgUHJvcFR5cGVzLnN0cmluZ10pLFxuICAvKipcbiAgICogSWYgYHRydWVgLCBhbGxvd3MgdGhlIGRpc2FibGVkIGNoaXAgdG8gZXNjYXBlIGZvY3VzLlxuICAgKiBJZiBgZmFsc2VgLCBhbGxvd3MgdGhlIGRpc2FibGVkIGNoaXAgdG8gcmVjZWl2ZSBmb2N1cy5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIHNraXBGb2N1c1doZW5EaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBUaGUgc3lzdGVtIHByb3AgdGhhdCBhbGxvd3MgZGVmaW5pbmcgc3lzdGVtIG92ZXJyaWRlcyBhcyB3ZWxsIGFzIGFkZGl0aW9uYWwgQ1NTIHN0eWxlcy5cbiAgICovXG4gIHN4OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLmJvb2xdKSksIFByb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSksXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICB0YWJJbmRleDogUHJvcFR5cGVzLm51bWJlcixcbiAgLyoqXG4gICAqIFRoZSB2YXJpYW50IHRvIHVzZS5cbiAgICogQGRlZmF1bHQgJ2ZpbGxlZCdcbiAgICovXG4gIHZhcmlhbnQ6IFByb3BUeXBlcyAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsnZmlsbGVkJywgJ291dGxpbmVkJ10pLCBQcm9wVHlwZXMuc3RyaW5nXSlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCBDaGlwOyIsImltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3Nlcyc7XG5pbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3MgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzcyc7XG5leHBvcnQgZnVuY3Rpb24gZ2V0SW5wdXRCYXNlVXRpbGl0eUNsYXNzKHNsb3QpIHtcbiAgcmV0dXJuIGdlbmVyYXRlVXRpbGl0eUNsYXNzKCdNdWlJbnB1dEJhc2UnLCBzbG90KTtcbn1cbmNvbnN0IGlucHV0QmFzZUNsYXNzZXMgPSBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzKCdNdWlJbnB1dEJhc2UnLCBbJ3Jvb3QnLCAnZm9ybUNvbnRyb2wnLCAnZm9jdXNlZCcsICdkaXNhYmxlZCcsICdhZG9ybmVkU3RhcnQnLCAnYWRvcm5lZEVuZCcsICdlcnJvcicsICdzaXplU21hbGwnLCAnbXVsdGlsaW5lJywgJ2NvbG9yU2Vjb25kYXJ5JywgJ2Z1bGxXaWR0aCcsICdoaWRkZW5MYWJlbCcsICdyZWFkT25seScsICdpbnB1dCcsICdpbnB1dFNpemVTbWFsbCcsICdpbnB1dE11bHRpbGluZScsICdpbnB1dFR5cGVTZWFyY2gnLCAnaW5wdXRBZG9ybmVkU3RhcnQnLCAnaW5wdXRBZG9ybmVkRW5kJywgJ2lucHV0SGlkZGVuTGFiZWwnXSk7XG5leHBvcnQgZGVmYXVsdCBpbnB1dEJhc2VDbGFzc2VzOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzc2VzJztcbmltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzJztcbmltcG9ydCB7IGlucHV0QmFzZUNsYXNzZXMgfSBmcm9tICcuLi9JbnB1dEJhc2UnO1xuZXhwb3J0IGZ1bmN0aW9uIGdldElucHV0VXRpbGl0eUNsYXNzKHNsb3QpIHtcbiAgcmV0dXJuIGdlbmVyYXRlVXRpbGl0eUNsYXNzKCdNdWlJbnB1dCcsIHNsb3QpO1xufVxuY29uc3QgaW5wdXRDbGFzc2VzID0gX2V4dGVuZHMoe30sIGlucHV0QmFzZUNsYXNzZXMsIGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMoJ011aUlucHV0JywgWydyb290JywgJ3VuZGVybGluZScsICdpbnB1dCddKSk7XG5leHBvcnQgZGVmYXVsdCBpbnB1dENsYXNzZXM7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzZXMnO1xuaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3MnO1xuaW1wb3J0IHsgaW5wdXRCYXNlQ2xhc3NlcyB9IGZyb20gJy4uL0lucHV0QmFzZSc7XG5leHBvcnQgZnVuY3Rpb24gZ2V0T3V0bGluZWRJbnB1dFV0aWxpdHlDbGFzcyhzbG90KSB7XG4gIHJldHVybiBnZW5lcmF0ZVV0aWxpdHlDbGFzcygnTXVpT3V0bGluZWRJbnB1dCcsIHNsb3QpO1xufVxuY29uc3Qgb3V0bGluZWRJbnB1dENsYXNzZXMgPSBfZXh0ZW5kcyh7fSwgaW5wdXRCYXNlQ2xhc3NlcywgZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcygnTXVpT3V0bGluZWRJbnB1dCcsIFsncm9vdCcsICdub3RjaGVkT3V0bGluZScsICdpbnB1dCddKSk7XG5leHBvcnQgZGVmYXVsdCBvdXRsaW5lZElucHV0Q2xhc3NlczsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3Nlcyc7XG5pbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3MgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzcyc7XG5pbXBvcnQgeyBpbnB1dEJhc2VDbGFzc2VzIH0gZnJvbSAnLi4vSW5wdXRCYXNlJztcbmV4cG9ydCBmdW5jdGlvbiBnZXRGaWxsZWRJbnB1dFV0aWxpdHlDbGFzcyhzbG90KSB7XG4gIHJldHVybiBnZW5lcmF0ZVV0aWxpdHlDbGFzcygnTXVpRmlsbGVkSW5wdXQnLCBzbG90KTtcbn1cbmNvbnN0IGZpbGxlZElucHV0Q2xhc3NlcyA9IF9leHRlbmRzKHt9LCBpbnB1dEJhc2VDbGFzc2VzLCBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzKCdNdWlGaWxsZWRJbnB1dCcsIFsncm9vdCcsICd1bmRlcmxpbmUnLCAnaW5wdXQnXSkpO1xuZXhwb3J0IGRlZmF1bHQgZmlsbGVkSW5wdXRDbGFzc2VzOyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNyZWF0ZVN2Z0ljb24gZnJvbSAnLi4vLi4vdXRpbHMvY3JlYXRlU3ZnSWNvbic7XG5cbi8qKlxuICogQGlnbm9yZSAtIGludGVybmFsIGNvbXBvbmVudC5cbiAqL1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZVN2Z0ljb24oIC8qI19fUFVSRV9fKi9fanN4KFwicGF0aFwiLCB7XG4gIGQ6IFwiTTcgMTBsNSA1IDUtNXpcIlxufSksICdBcnJvd0Ryb3BEb3duJyk7IiwiaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzc2VzJztcbmltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzJztcbmV4cG9ydCBmdW5jdGlvbiBnZXRBdXRvY29tcGxldGVVdGlsaXR5Q2xhc3Moc2xvdCkge1xuICByZXR1cm4gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoJ011aUF1dG9jb21wbGV0ZScsIHNsb3QpO1xufVxuY29uc3QgYXV0b2NvbXBsZXRlQ2xhc3NlcyA9IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMoJ011aUF1dG9jb21wbGV0ZScsIFsncm9vdCcsICdleHBhbmRlZCcsICdmdWxsV2lkdGgnLCAnZm9jdXNlZCcsICdmb2N1c1Zpc2libGUnLCAndGFnJywgJ3RhZ1NpemVTbWFsbCcsICd0YWdTaXplTWVkaXVtJywgJ2hhc1BvcHVwSWNvbicsICdoYXNDbGVhckljb24nLCAnaW5wdXRSb290JywgJ2lucHV0JywgJ2lucHV0Rm9jdXNlZCcsICdlbmRBZG9ybm1lbnQnLCAnY2xlYXJJbmRpY2F0b3InLCAncG9wdXBJbmRpY2F0b3InLCAncG9wdXBJbmRpY2F0b3JPcGVuJywgJ3BvcHBlcicsICdwb3BwZXJEaXNhYmxlUG9ydGFsJywgJ3BhcGVyJywgJ2xpc3Rib3gnLCAnbG9hZGluZycsICdub09wdGlvbnMnLCAnb3B0aW9uJywgJ2dyb3VwTGFiZWwnLCAnZ3JvdXBVbCddKTtcbmV4cG9ydCBkZWZhdWx0IGF1dG9jb21wbGV0ZUNsYXNzZXM7IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xudmFyIF9DbGVhckljb24sIF9BcnJvd0Ryb3BEb3duSWNvbjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImF1dG9Db21wbGV0ZVwiLCBcImF1dG9IaWdobGlnaHRcIiwgXCJhdXRvU2VsZWN0XCIsIFwiYmx1ck9uU2VsZWN0XCIsIFwiQ2hpcFByb3BzXCIsIFwiY2xhc3NOYW1lXCIsIFwiY2xlYXJJY29uXCIsIFwiY2xlYXJPbkJsdXJcIiwgXCJjbGVhck9uRXNjYXBlXCIsIFwiY2xlYXJUZXh0XCIsIFwiY2xvc2VUZXh0XCIsIFwiY29tcG9uZW50c1Byb3BzXCIsIFwiZGVmYXVsdFZhbHVlXCIsIFwiZGlzYWJsZUNsZWFyYWJsZVwiLCBcImRpc2FibGVDbG9zZU9uU2VsZWN0XCIsIFwiZGlzYWJsZWRcIiwgXCJkaXNhYmxlZEl0ZW1zRm9jdXNhYmxlXCIsIFwiZGlzYWJsZUxpc3RXcmFwXCIsIFwiZGlzYWJsZVBvcnRhbFwiLCBcImZpbHRlck9wdGlvbnNcIiwgXCJmaWx0ZXJTZWxlY3RlZE9wdGlvbnNcIiwgXCJmb3JjZVBvcHVwSWNvblwiLCBcImZyZWVTb2xvXCIsIFwiZnVsbFdpZHRoXCIsIFwiZ2V0TGltaXRUYWdzVGV4dFwiLCBcImdldE9wdGlvbkRpc2FibGVkXCIsIFwiZ2V0T3B0aW9uS2V5XCIsIFwiZ2V0T3B0aW9uTGFiZWxcIiwgXCJpc09wdGlvbkVxdWFsVG9WYWx1ZVwiLCBcImdyb3VwQnlcIiwgXCJoYW5kbGVIb21lRW5kS2V5c1wiLCBcImlkXCIsIFwiaW5jbHVkZUlucHV0SW5MaXN0XCIsIFwiaW5wdXRWYWx1ZVwiLCBcImxpbWl0VGFnc1wiLCBcIkxpc3Rib3hDb21wb25lbnRcIiwgXCJMaXN0Ym94UHJvcHNcIiwgXCJsb2FkaW5nXCIsIFwibG9hZGluZ1RleHRcIiwgXCJtdWx0aXBsZVwiLCBcIm5vT3B0aW9uc1RleHRcIiwgXCJvbkNoYW5nZVwiLCBcIm9uQ2xvc2VcIiwgXCJvbkhpZ2hsaWdodENoYW5nZVwiLCBcIm9uSW5wdXRDaGFuZ2VcIiwgXCJvbk9wZW5cIiwgXCJvcGVuXCIsIFwib3Blbk9uRm9jdXNcIiwgXCJvcGVuVGV4dFwiLCBcIm9wdGlvbnNcIiwgXCJQYXBlckNvbXBvbmVudFwiLCBcIlBvcHBlckNvbXBvbmVudFwiLCBcInBvcHVwSWNvblwiLCBcInJlYWRPbmx5XCIsIFwicmVuZGVyR3JvdXBcIiwgXCJyZW5kZXJJbnB1dFwiLCBcInJlbmRlck9wdGlvblwiLCBcInJlbmRlclRhZ3NcIiwgXCJzZWxlY3RPbkZvY3VzXCIsIFwic2l6ZVwiLCBcInNsb3RQcm9wc1wiLCBcInZhbHVlXCJdLFxuICBfZXhjbHVkZWQyID0gW1wicmVmXCJdLFxuICBfZXhjbHVkZWQzID0gW1wia2V5XCJdLFxuICBfZXhjbHVkZWQ0ID0gW1wia2V5XCJdO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IGludGVnZXJQcm9wVHlwZSBmcm9tICdAbXVpL3V0aWxzL2ludGVnZXJQcm9wVHlwZSc7XG5pbXBvcnQgY2hhaW5Qcm9wVHlwZXMgZnJvbSAnQG11aS91dGlscy9jaGFpblByb3BUeXBlcyc7XG5pbXBvcnQgY29tcG9zZUNsYXNzZXMgZnJvbSAnQG11aS91dGlscy9jb21wb3NlQ2xhc3Nlcyc7XG5pbXBvcnQgeyBhbHBoYSB9IGZyb20gJ0BtdWkvc3lzdGVtL2NvbG9yTWFuaXB1bGF0b3InO1xuaW1wb3J0IHVzZUF1dG9jb21wbGV0ZSwgeyBjcmVhdGVGaWx0ZXJPcHRpb25zIH0gZnJvbSAnLi4vdXNlQXV0b2NvbXBsZXRlJztcbmltcG9ydCBQb3BwZXIgZnJvbSAnLi4vUG9wcGVyJztcbmltcG9ydCBMaXN0U3ViaGVhZGVyIGZyb20gJy4uL0xpc3RTdWJoZWFkZXInO1xuaW1wb3J0IFBhcGVyIGZyb20gJy4uL1BhcGVyJztcbmltcG9ydCBJY29uQnV0dG9uIGZyb20gJy4uL0ljb25CdXR0b24nO1xuaW1wb3J0IENoaXAgZnJvbSAnLi4vQ2hpcCc7XG5pbXBvcnQgaW5wdXRDbGFzc2VzIGZyb20gJy4uL0lucHV0L2lucHV0Q2xhc3Nlcyc7XG5pbXBvcnQgaW5wdXRCYXNlQ2xhc3NlcyBmcm9tICcuLi9JbnB1dEJhc2UvaW5wdXRCYXNlQ2xhc3Nlcyc7XG5pbXBvcnQgb3V0bGluZWRJbnB1dENsYXNzZXMgZnJvbSAnLi4vT3V0bGluZWRJbnB1dC9vdXRsaW5lZElucHV0Q2xhc3Nlcyc7XG5pbXBvcnQgZmlsbGVkSW5wdXRDbGFzc2VzIGZyb20gJy4uL0ZpbGxlZElucHV0L2ZpbGxlZElucHV0Q2xhc3Nlcyc7XG5pbXBvcnQgQ2xlYXJJY29uIGZyb20gJy4uL2ludGVybmFsL3N2Zy1pY29ucy9DbG9zZSc7XG5pbXBvcnQgQXJyb3dEcm9wRG93bkljb24gZnJvbSAnLi4vaW50ZXJuYWwvc3ZnLWljb25zL0Fycm93RHJvcERvd24nO1xuaW1wb3J0IHsgc3R5bGVkIH0gZnJvbSAnLi4vemVyby1zdHlsZWQnO1xuaW1wb3J0IHsgdXNlRGVmYXVsdFByb3BzIH0gZnJvbSAnLi4vRGVmYXVsdFByb3BzUHJvdmlkZXInO1xuaW1wb3J0IGF1dG9jb21wbGV0ZUNsYXNzZXMsIHsgZ2V0QXV0b2NvbXBsZXRlVXRpbGl0eUNsYXNzIH0gZnJvbSAnLi9hdXRvY29tcGxldGVDbGFzc2VzJztcbmltcG9ydCBjYXBpdGFsaXplIGZyb20gJy4uL3V0aWxzL2NhcGl0YWxpemUnO1xuaW1wb3J0IHVzZUZvcmtSZWYgZnJvbSAnLi4vdXRpbHMvdXNlRm9ya1JlZic7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuaW1wb3J0IHsganN4cyBhcyBfanN4cyB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuY29uc3QgdXNlVXRpbGl0eUNsYXNzZXMgPSBvd25lclN0YXRlID0+IHtcbiAgY29uc3Qge1xuICAgIGNsYXNzZXMsXG4gICAgZGlzYWJsZVBvcnRhbCxcbiAgICBleHBhbmRlZCxcbiAgICBmb2N1c2VkLFxuICAgIGZ1bGxXaWR0aCxcbiAgICBoYXNDbGVhckljb24sXG4gICAgaGFzUG9wdXBJY29uLFxuICAgIGlucHV0Rm9jdXNlZCxcbiAgICBwb3B1cE9wZW4sXG4gICAgc2l6ZVxuICB9ID0gb3duZXJTdGF0ZTtcbiAgY29uc3Qgc2xvdHMgPSB7XG4gICAgcm9vdDogWydyb290JywgZXhwYW5kZWQgJiYgJ2V4cGFuZGVkJywgZm9jdXNlZCAmJiAnZm9jdXNlZCcsIGZ1bGxXaWR0aCAmJiAnZnVsbFdpZHRoJywgaGFzQ2xlYXJJY29uICYmICdoYXNDbGVhckljb24nLCBoYXNQb3B1cEljb24gJiYgJ2hhc1BvcHVwSWNvbiddLFxuICAgIGlucHV0Um9vdDogWydpbnB1dFJvb3QnXSxcbiAgICBpbnB1dDogWydpbnB1dCcsIGlucHV0Rm9jdXNlZCAmJiAnaW5wdXRGb2N1c2VkJ10sXG4gICAgdGFnOiBbJ3RhZycsIGB0YWdTaXplJHtjYXBpdGFsaXplKHNpemUpfWBdLFxuICAgIGVuZEFkb3JubWVudDogWydlbmRBZG9ybm1lbnQnXSxcbiAgICBjbGVhckluZGljYXRvcjogWydjbGVhckluZGljYXRvciddLFxuICAgIHBvcHVwSW5kaWNhdG9yOiBbJ3BvcHVwSW5kaWNhdG9yJywgcG9wdXBPcGVuICYmICdwb3B1cEluZGljYXRvck9wZW4nXSxcbiAgICBwb3BwZXI6IFsncG9wcGVyJywgZGlzYWJsZVBvcnRhbCAmJiAncG9wcGVyRGlzYWJsZVBvcnRhbCddLFxuICAgIHBhcGVyOiBbJ3BhcGVyJ10sXG4gICAgbGlzdGJveDogWydsaXN0Ym94J10sXG4gICAgbG9hZGluZzogWydsb2FkaW5nJ10sXG4gICAgbm9PcHRpb25zOiBbJ25vT3B0aW9ucyddLFxuICAgIG9wdGlvbjogWydvcHRpb24nXSxcbiAgICBncm91cExhYmVsOiBbJ2dyb3VwTGFiZWwnXSxcbiAgICBncm91cFVsOiBbJ2dyb3VwVWwnXVxuICB9O1xuICByZXR1cm4gY29tcG9zZUNsYXNzZXMoc2xvdHMsIGdldEF1dG9jb21wbGV0ZVV0aWxpdHlDbGFzcywgY2xhc3Nlcyk7XG59O1xuY29uc3QgQXV0b2NvbXBsZXRlUm9vdCA9IHN0eWxlZCgnZGl2Jywge1xuICBuYW1lOiAnTXVpQXV0b2NvbXBsZXRlJyxcbiAgc2xvdDogJ1Jvb3QnLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBvd25lclN0YXRlXG4gICAgfSA9IHByb3BzO1xuICAgIGNvbnN0IHtcbiAgICAgIGZ1bGxXaWR0aCxcbiAgICAgIGhhc0NsZWFySWNvbixcbiAgICAgIGhhc1BvcHVwSWNvbixcbiAgICAgIGlucHV0Rm9jdXNlZCxcbiAgICAgIHNpemVcbiAgICB9ID0gb3duZXJTdGF0ZTtcbiAgICByZXR1cm4gW3tcbiAgICAgIFtgJiAuJHthdXRvY29tcGxldGVDbGFzc2VzLnRhZ31gXTogc3R5bGVzLnRhZ1xuICAgIH0sIHtcbiAgICAgIFtgJiAuJHthdXRvY29tcGxldGVDbGFzc2VzLnRhZ31gXTogc3R5bGVzW2B0YWdTaXplJHtjYXBpdGFsaXplKHNpemUpfWBdXG4gICAgfSwge1xuICAgICAgW2AmIC4ke2F1dG9jb21wbGV0ZUNsYXNzZXMuaW5wdXRSb290fWBdOiBzdHlsZXMuaW5wdXRSb290XG4gICAgfSwge1xuICAgICAgW2AmIC4ke2F1dG9jb21wbGV0ZUNsYXNzZXMuaW5wdXR9YF06IHN0eWxlcy5pbnB1dFxuICAgIH0sIHtcbiAgICAgIFtgJiAuJHthdXRvY29tcGxldGVDbGFzc2VzLmlucHV0fWBdOiBpbnB1dEZvY3VzZWQgJiYgc3R5bGVzLmlucHV0Rm9jdXNlZFxuICAgIH0sIHN0eWxlcy5yb290LCBmdWxsV2lkdGggJiYgc3R5bGVzLmZ1bGxXaWR0aCwgaGFzUG9wdXBJY29uICYmIHN0eWxlcy5oYXNQb3B1cEljb24sIGhhc0NsZWFySWNvbiAmJiBzdHlsZXMuaGFzQ2xlYXJJY29uXTtcbiAgfVxufSkoe1xuICBbYCYuJHthdXRvY29tcGxldGVDbGFzc2VzLmZvY3VzZWR9IC4ke2F1dG9jb21wbGV0ZUNsYXNzZXMuY2xlYXJJbmRpY2F0b3J9YF06IHtcbiAgICB2aXNpYmlsaXR5OiAndmlzaWJsZSdcbiAgfSxcbiAgLyogQXZvaWQgZG91YmxlIHRhcCBpc3N1ZSBvbiBpT1MgKi9cbiAgJ0BtZWRpYSAocG9pbnRlcjogZmluZSknOiB7XG4gICAgW2AmOmhvdmVyIC4ke2F1dG9jb21wbGV0ZUNsYXNzZXMuY2xlYXJJbmRpY2F0b3J9YF06IHtcbiAgICAgIHZpc2liaWxpdHk6ICd2aXNpYmxlJ1xuICAgIH1cbiAgfSxcbiAgW2AmIC4ke2F1dG9jb21wbGV0ZUNsYXNzZXMudGFnfWBdOiB7XG4gICAgbWFyZ2luOiAzLFxuICAgIG1heFdpZHRoOiAnY2FsYygxMDAlIC0gNnB4KSdcbiAgfSxcbiAgW2AmIC4ke2F1dG9jb21wbGV0ZUNsYXNzZXMuaW5wdXRSb290fWBdOiB7XG4gICAgW2AuJHthdXRvY29tcGxldGVDbGFzc2VzLmhhc1BvcHVwSWNvbn0mLCAuJHthdXRvY29tcGxldGVDbGFzc2VzLmhhc0NsZWFySWNvbn0mYF06IHtcbiAgICAgIHBhZGRpbmdSaWdodDogMjYgKyA0XG4gICAgfSxcbiAgICBbYC4ke2F1dG9jb21wbGV0ZUNsYXNzZXMuaGFzUG9wdXBJY29ufS4ke2F1dG9jb21wbGV0ZUNsYXNzZXMuaGFzQ2xlYXJJY29ufSZgXToge1xuICAgICAgcGFkZGluZ1JpZ2h0OiA1MiArIDRcbiAgICB9LFxuICAgIFtgJiAuJHthdXRvY29tcGxldGVDbGFzc2VzLmlucHV0fWBdOiB7XG4gICAgICB3aWR0aDogMCxcbiAgICAgIG1pbldpZHRoOiAzMFxuICAgIH1cbiAgfSxcbiAgW2AmIC4ke2lucHV0Q2xhc3Nlcy5yb290fWBdOiB7XG4gICAgcGFkZGluZ0JvdHRvbTogMSxcbiAgICAnJiAuTXVpSW5wdXQtaW5wdXQnOiB7XG4gICAgICBwYWRkaW5nOiAnNHB4IDRweCA0cHggMHB4J1xuICAgIH1cbiAgfSxcbiAgW2AmIC4ke2lucHV0Q2xhc3Nlcy5yb290fS4ke2lucHV0QmFzZUNsYXNzZXMuc2l6ZVNtYWxsfWBdOiB7XG4gICAgW2AmIC4ke2lucHV0Q2xhc3Nlcy5pbnB1dH1gXToge1xuICAgICAgcGFkZGluZzogJzJweCA0cHggM3B4IDAnXG4gICAgfVxuICB9LFxuICBbYCYgLiR7b3V0bGluZWRJbnB1dENsYXNzZXMucm9vdH1gXToge1xuICAgIHBhZGRpbmc6IDksXG4gICAgW2AuJHthdXRvY29tcGxldGVDbGFzc2VzLmhhc1BvcHVwSWNvbn0mLCAuJHthdXRvY29tcGxldGVDbGFzc2VzLmhhc0NsZWFySWNvbn0mYF06IHtcbiAgICAgIHBhZGRpbmdSaWdodDogMjYgKyA0ICsgOVxuICAgIH0sXG4gICAgW2AuJHthdXRvY29tcGxldGVDbGFzc2VzLmhhc1BvcHVwSWNvbn0uJHthdXRvY29tcGxldGVDbGFzc2VzLmhhc0NsZWFySWNvbn0mYF06IHtcbiAgICAgIHBhZGRpbmdSaWdodDogNTIgKyA0ICsgOVxuICAgIH0sXG4gICAgW2AmIC4ke2F1dG9jb21wbGV0ZUNsYXNzZXMuaW5wdXR9YF06IHtcbiAgICAgIHBhZGRpbmc6ICc3LjVweCA0cHggNy41cHggNXB4J1xuICAgIH0sXG4gICAgW2AmIC4ke2F1dG9jb21wbGV0ZUNsYXNzZXMuZW5kQWRvcm5tZW50fWBdOiB7XG4gICAgICByaWdodDogOVxuICAgIH1cbiAgfSxcbiAgW2AmIC4ke291dGxpbmVkSW5wdXRDbGFzc2VzLnJvb3R9LiR7aW5wdXRCYXNlQ2xhc3Nlcy5zaXplU21hbGx9YF06IHtcbiAgICAvLyBEb24ndCBzcGVjaWZ5IHBhZGRpbmdSaWdodCwgYXMgaXQgb3ZlcnJpZGVzIHRoZSBkZWZhdWx0IHZhbHVlIHNldCB3aGVuIHRoZXJlIGlzIG9ubHlcbiAgICAvLyBvbmUgb2YgdGhlIHBvcHVwIG9yIGNsZWFyIGljb24gYXMgdGhlIHNwZWNpZmljaXR5IGlzIGVxdWFsIHNvIHRoZSBsYXR0ZXIgb25lIHdpbnNcbiAgICBwYWRkaW5nVG9wOiA2LFxuICAgIHBhZGRpbmdCb3R0b206IDYsXG4gICAgcGFkZGluZ0xlZnQ6IDYsXG4gICAgW2AmIC4ke2F1dG9jb21wbGV0ZUNsYXNzZXMuaW5wdXR9YF06IHtcbiAgICAgIHBhZGRpbmc6ICcyLjVweCA0cHggMi41cHggOHB4J1xuICAgIH1cbiAgfSxcbiAgW2AmIC4ke2ZpbGxlZElucHV0Q2xhc3Nlcy5yb290fWBdOiB7XG4gICAgcGFkZGluZ1RvcDogMTksXG4gICAgcGFkZGluZ0xlZnQ6IDgsXG4gICAgW2AuJHthdXRvY29tcGxldGVDbGFzc2VzLmhhc1BvcHVwSWNvbn0mLCAuJHthdXRvY29tcGxldGVDbGFzc2VzLmhhc0NsZWFySWNvbn0mYF06IHtcbiAgICAgIHBhZGRpbmdSaWdodDogMjYgKyA0ICsgOVxuICAgIH0sXG4gICAgW2AuJHthdXRvY29tcGxldGVDbGFzc2VzLmhhc1BvcHVwSWNvbn0uJHthdXRvY29tcGxldGVDbGFzc2VzLmhhc0NsZWFySWNvbn0mYF06IHtcbiAgICAgIHBhZGRpbmdSaWdodDogNTIgKyA0ICsgOVxuICAgIH0sXG4gICAgW2AmIC4ke2ZpbGxlZElucHV0Q2xhc3Nlcy5pbnB1dH1gXToge1xuICAgICAgcGFkZGluZzogJzdweCA0cHgnXG4gICAgfSxcbiAgICBbYCYgLiR7YXV0b2NvbXBsZXRlQ2xhc3Nlcy5lbmRBZG9ybm1lbnR9YF06IHtcbiAgICAgIHJpZ2h0OiA5XG4gICAgfVxuICB9LFxuICBbYCYgLiR7ZmlsbGVkSW5wdXRDbGFzc2VzLnJvb3R9LiR7aW5wdXRCYXNlQ2xhc3Nlcy5zaXplU21hbGx9YF06IHtcbiAgICBwYWRkaW5nQm90dG9tOiAxLFxuICAgIFtgJiAuJHtmaWxsZWRJbnB1dENsYXNzZXMuaW5wdXR9YF06IHtcbiAgICAgIHBhZGRpbmc6ICcyLjVweCA0cHgnXG4gICAgfVxuICB9LFxuICBbYCYgLiR7aW5wdXRCYXNlQ2xhc3Nlcy5oaWRkZW5MYWJlbH1gXToge1xuICAgIHBhZGRpbmdUb3A6IDhcbiAgfSxcbiAgW2AmIC4ke2ZpbGxlZElucHV0Q2xhc3Nlcy5yb290fS4ke2lucHV0QmFzZUNsYXNzZXMuaGlkZGVuTGFiZWx9YF06IHtcbiAgICBwYWRkaW5nVG9wOiAwLFxuICAgIHBhZGRpbmdCb3R0b206IDAsXG4gICAgW2AmIC4ke2F1dG9jb21wbGV0ZUNsYXNzZXMuaW5wdXR9YF06IHtcbiAgICAgIHBhZGRpbmdUb3A6IDE2LFxuICAgICAgcGFkZGluZ0JvdHRvbTogMTdcbiAgICB9XG4gIH0sXG4gIFtgJiAuJHtmaWxsZWRJbnB1dENsYXNzZXMucm9vdH0uJHtpbnB1dEJhc2VDbGFzc2VzLmhpZGRlbkxhYmVsfS4ke2lucHV0QmFzZUNsYXNzZXMuc2l6ZVNtYWxsfWBdOiB7XG4gICAgW2AmIC4ke2F1dG9jb21wbGV0ZUNsYXNzZXMuaW5wdXR9YF06IHtcbiAgICAgIHBhZGRpbmdUb3A6IDgsXG4gICAgICBwYWRkaW5nQm90dG9tOiA5XG4gICAgfVxuICB9LFxuICBbYCYgLiR7YXV0b2NvbXBsZXRlQ2xhc3Nlcy5pbnB1dH1gXToge1xuICAgIGZsZXhHcm93OiAxLFxuICAgIHRleHRPdmVyZmxvdzogJ2VsbGlwc2lzJyxcbiAgICBvcGFjaXR5OiAwXG4gIH0sXG4gIHZhcmlhbnRzOiBbe1xuICAgIHByb3BzOiB7XG4gICAgICBmdWxsV2lkdGg6IHRydWVcbiAgICB9LFxuICAgIHN0eWxlOiB7XG4gICAgICB3aWR0aDogJzEwMCUnXG4gICAgfVxuICB9LCB7XG4gICAgcHJvcHM6IHtcbiAgICAgIHNpemU6ICdzbWFsbCdcbiAgICB9LFxuICAgIHN0eWxlOiB7XG4gICAgICBbYCYgLiR7YXV0b2NvbXBsZXRlQ2xhc3Nlcy50YWd9YF06IHtcbiAgICAgICAgbWFyZ2luOiAyLFxuICAgICAgICBtYXhXaWR0aDogJ2NhbGMoMTAwJSAtIDRweCknXG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAgcHJvcHM6IHtcbiAgICAgIGlucHV0Rm9jdXNlZDogdHJ1ZVxuICAgIH0sXG4gICAgc3R5bGU6IHtcbiAgICAgIFtgJiAuJHthdXRvY29tcGxldGVDbGFzc2VzLmlucHV0fWBdOiB7XG4gICAgICAgIG9wYWNpdHk6IDFcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBwcm9wczoge1xuICAgICAgbXVsdGlwbGU6IHRydWVcbiAgICB9LFxuICAgIHN0eWxlOiB7XG4gICAgICBbYCYgLiR7YXV0b2NvbXBsZXRlQ2xhc3Nlcy5pbnB1dFJvb3R9YF06IHtcbiAgICAgICAgZmxleFdyYXA6ICd3cmFwJ1xuICAgICAgfVxuICAgIH1cbiAgfV1cbn0pO1xuY29uc3QgQXV0b2NvbXBsZXRlRW5kQWRvcm5tZW50ID0gc3R5bGVkKCdkaXYnLCB7XG4gIG5hbWU6ICdNdWlBdXRvY29tcGxldGUnLFxuICBzbG90OiAnRW5kQWRvcm5tZW50JyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiBzdHlsZXMuZW5kQWRvcm5tZW50XG59KSh7XG4gIC8vIFdlIHVzZSBhIHBvc2l0aW9uIGFic29sdXRlIHRvIHN1cHBvcnQgd3JhcHBpbmcgdGFncy5cbiAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gIHJpZ2h0OiAwLFxuICB0b3A6ICc1MCUnLFxuICB0cmFuc2Zvcm06ICd0cmFuc2xhdGUoMCwgLTUwJSknXG59KTtcbmNvbnN0IEF1dG9jb21wbGV0ZUNsZWFySW5kaWNhdG9yID0gc3R5bGVkKEljb25CdXR0b24sIHtcbiAgbmFtZTogJ011aUF1dG9jb21wbGV0ZScsXG4gIHNsb3Q6ICdDbGVhckluZGljYXRvcicsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4gc3R5bGVzLmNsZWFySW5kaWNhdG9yXG59KSh7XG4gIG1hcmdpblJpZ2h0OiAtMixcbiAgcGFkZGluZzogNCxcbiAgdmlzaWJpbGl0eTogJ2hpZGRlbidcbn0pO1xuY29uc3QgQXV0b2NvbXBsZXRlUG9wdXBJbmRpY2F0b3IgPSBzdHlsZWQoSWNvbkJ1dHRvbiwge1xuICBuYW1lOiAnTXVpQXV0b2NvbXBsZXRlJyxcbiAgc2xvdDogJ1BvcHVwSW5kaWNhdG9yJyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6ICh7XG4gICAgb3duZXJTdGF0ZVxuICB9LCBzdHlsZXMpID0+IF9leHRlbmRzKHt9LCBzdHlsZXMucG9wdXBJbmRpY2F0b3IsIG93bmVyU3RhdGUucG9wdXBPcGVuICYmIHN0eWxlcy5wb3B1cEluZGljYXRvck9wZW4pXG59KSh7XG4gIHBhZGRpbmc6IDIsXG4gIG1hcmdpblJpZ2h0OiAtMixcbiAgdmFyaWFudHM6IFt7XG4gICAgcHJvcHM6IHtcbiAgICAgIHBvcHVwT3BlbjogdHJ1ZVxuICAgIH0sXG4gICAgc3R5bGU6IHtcbiAgICAgIHRyYW5zZm9ybTogJ3JvdGF0ZSgxODBkZWcpJ1xuICAgIH1cbiAgfV1cbn0pO1xuY29uc3QgQXV0b2NvbXBsZXRlUG9wcGVyID0gc3R5bGVkKFBvcHBlciwge1xuICBuYW1lOiAnTXVpQXV0b2NvbXBsZXRlJyxcbiAgc2xvdDogJ1BvcHBlcicsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9ID0gcHJvcHM7XG4gICAgcmV0dXJuIFt7XG4gICAgICBbYCYgLiR7YXV0b2NvbXBsZXRlQ2xhc3Nlcy5vcHRpb259YF06IHN0eWxlcy5vcHRpb25cbiAgICB9LCBzdHlsZXMucG9wcGVyLCBvd25lclN0YXRlLmRpc2FibGVQb3J0YWwgJiYgc3R5bGVzLnBvcHBlckRpc2FibGVQb3J0YWxdO1xuICB9XG59KSgoe1xuICB0aGVtZVxufSkgPT4gKHtcbiAgekluZGV4OiAodGhlbWUudmFycyB8fCB0aGVtZSkuekluZGV4Lm1vZGFsLFxuICB2YXJpYW50czogW3tcbiAgICBwcm9wczoge1xuICAgICAgZGlzYWJsZVBvcnRhbDogdHJ1ZVxuICAgIH0sXG4gICAgc3R5bGU6IHtcbiAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnXG4gICAgfVxuICB9XVxufSkpO1xuY29uc3QgQXV0b2NvbXBsZXRlUGFwZXIgPSBzdHlsZWQoUGFwZXIsIHtcbiAgbmFtZTogJ011aUF1dG9jb21wbGV0ZScsXG4gIHNsb3Q6ICdQYXBlcicsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4gc3R5bGVzLnBhcGVyXG59KSgoe1xuICB0aGVtZVxufSkgPT4gX2V4dGVuZHMoe30sIHRoZW1lLnR5cG9ncmFwaHkuYm9keTEsIHtcbiAgb3ZlcmZsb3c6ICdhdXRvJ1xufSkpO1xuY29uc3QgQXV0b2NvbXBsZXRlTG9hZGluZyA9IHN0eWxlZCgnZGl2Jywge1xuICBuYW1lOiAnTXVpQXV0b2NvbXBsZXRlJyxcbiAgc2xvdDogJ0xvYWRpbmcnLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHN0eWxlcy5sb2FkaW5nXG59KSgoe1xuICB0aGVtZVxufSkgPT4gKHtcbiAgY29sb3I6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlLnRleHQuc2Vjb25kYXJ5LFxuICBwYWRkaW5nOiAnMTRweCAxNnB4J1xufSkpO1xuY29uc3QgQXV0b2NvbXBsZXRlTm9PcHRpb25zID0gc3R5bGVkKCdkaXYnLCB7XG4gIG5hbWU6ICdNdWlBdXRvY29tcGxldGUnLFxuICBzbG90OiAnTm9PcHRpb25zJyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiBzdHlsZXMubm9PcHRpb25zXG59KSgoe1xuICB0aGVtZVxufSkgPT4gKHtcbiAgY29sb3I6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlLnRleHQuc2Vjb25kYXJ5LFxuICBwYWRkaW5nOiAnMTRweCAxNnB4J1xufSkpO1xuY29uc3QgQXV0b2NvbXBsZXRlTGlzdGJveCA9IHN0eWxlZCgnZGl2Jywge1xuICBuYW1lOiAnTXVpQXV0b2NvbXBsZXRlJyxcbiAgc2xvdDogJ0xpc3Rib3gnLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHN0eWxlcy5saXN0Ym94XG59KSgoe1xuICB0aGVtZVxufSkgPT4gKHtcbiAgbGlzdFN0eWxlOiAnbm9uZScsXG4gIG1hcmdpbjogMCxcbiAgcGFkZGluZzogJzhweCAwJyxcbiAgbWF4SGVpZ2h0OiAnNDB2aCcsXG4gIG92ZXJmbG93OiAnYXV0bycsXG4gIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICBbYCYgLiR7YXV0b2NvbXBsZXRlQ2xhc3Nlcy5vcHRpb259YF06IHtcbiAgICBtaW5IZWlnaHQ6IDQ4LFxuICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gICAganVzdGlmeUNvbnRlbnQ6ICdmbGV4LXN0YXJ0JyxcbiAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICBjdXJzb3I6ICdwb2ludGVyJyxcbiAgICBwYWRkaW5nVG9wOiA2LFxuICAgIGJveFNpemluZzogJ2JvcmRlci1ib3gnLFxuICAgIG91dGxpbmU6ICcwJyxcbiAgICBXZWJraXRUYXBIaWdobGlnaHRDb2xvcjogJ3RyYW5zcGFyZW50JyxcbiAgICBwYWRkaW5nQm90dG9tOiA2LFxuICAgIHBhZGRpbmdMZWZ0OiAxNixcbiAgICBwYWRkaW5nUmlnaHQ6IDE2LFxuICAgIFt0aGVtZS5icmVha3BvaW50cy51cCgnc20nKV06IHtcbiAgICAgIG1pbkhlaWdodDogJ2F1dG8nXG4gICAgfSxcbiAgICBbYCYuJHthdXRvY29tcGxldGVDbGFzc2VzLmZvY3VzZWR9YF06IHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGUuYWN0aW9uLmhvdmVyLFxuICAgICAgLy8gUmVzZXQgb24gdG91Y2ggZGV2aWNlcywgaXQgZG9lc24ndCBhZGQgc3BlY2lmaWNpdHlcbiAgICAgICdAbWVkaWEgKGhvdmVyOiBub25lKSc6IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnXG4gICAgICB9XG4gICAgfSxcbiAgICAnJlthcmlhLWRpc2FibGVkPVwidHJ1ZVwiXSc6IHtcbiAgICAgIG9wYWNpdHk6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlLmFjdGlvbi5kaXNhYmxlZE9wYWNpdHksXG4gICAgICBwb2ludGVyRXZlbnRzOiAnbm9uZSdcbiAgICB9LFxuICAgIFtgJi4ke2F1dG9jb21wbGV0ZUNsYXNzZXMuZm9jdXNWaXNpYmxlfWBdOiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlLmFjdGlvbi5mb2N1c1xuICAgIH0sXG4gICAgJyZbYXJpYS1zZWxlY3RlZD1cInRydWVcIl0nOiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnZhcnMgPyBgcmdiYSgke3RoZW1lLnZhcnMucGFsZXR0ZS5wcmltYXJ5Lm1haW5DaGFubmVsfSAvICR7dGhlbWUudmFycy5wYWxldHRlLmFjdGlvbi5zZWxlY3RlZE9wYWNpdHl9KWAgOiBhbHBoYSh0aGVtZS5wYWxldHRlLnByaW1hcnkubWFpbiwgdGhlbWUucGFsZXR0ZS5hY3Rpb24uc2VsZWN0ZWRPcGFjaXR5KSxcbiAgICAgIFtgJi4ke2F1dG9jb21wbGV0ZUNsYXNzZXMuZm9jdXNlZH1gXToge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnZhcnMgPyBgcmdiYSgke3RoZW1lLnZhcnMucGFsZXR0ZS5wcmltYXJ5Lm1haW5DaGFubmVsfSAvIGNhbGMoJHt0aGVtZS52YXJzLnBhbGV0dGUuYWN0aW9uLnNlbGVjdGVkT3BhY2l0eX0gKyAke3RoZW1lLnZhcnMucGFsZXR0ZS5hY3Rpb24uaG92ZXJPcGFjaXR5fSkpYCA6IGFscGhhKHRoZW1lLnBhbGV0dGUucHJpbWFyeS5tYWluLCB0aGVtZS5wYWxldHRlLmFjdGlvbi5zZWxlY3RlZE9wYWNpdHkgKyB0aGVtZS5wYWxldHRlLmFjdGlvbi5ob3Zlck9wYWNpdHkpLFxuICAgICAgICAvLyBSZXNldCBvbiB0b3VjaCBkZXZpY2VzLCBpdCBkb2Vzbid0IGFkZCBzcGVjaWZpY2l0eVxuICAgICAgICAnQG1lZGlhIChob3Zlcjogbm9uZSknOiB7XG4gICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZS5hY3Rpb24uc2VsZWN0ZWRcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFtgJi4ke2F1dG9jb21wbGV0ZUNsYXNzZXMuZm9jdXNWaXNpYmxlfWBdOiB7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUudmFycyA/IGByZ2JhKCR7dGhlbWUudmFycy5wYWxldHRlLnByaW1hcnkubWFpbkNoYW5uZWx9IC8gY2FsYygke3RoZW1lLnZhcnMucGFsZXR0ZS5hY3Rpb24uc2VsZWN0ZWRPcGFjaXR5fSArICR7dGhlbWUudmFycy5wYWxldHRlLmFjdGlvbi5mb2N1c09wYWNpdHl9KSlgIDogYWxwaGEodGhlbWUucGFsZXR0ZS5wcmltYXJ5Lm1haW4sIHRoZW1lLnBhbGV0dGUuYWN0aW9uLnNlbGVjdGVkT3BhY2l0eSArIHRoZW1lLnBhbGV0dGUuYWN0aW9uLmZvY3VzT3BhY2l0eSlcbiAgICAgIH1cbiAgICB9XG4gIH1cbn0pKTtcbmNvbnN0IEF1dG9jb21wbGV0ZUdyb3VwTGFiZWwgPSBzdHlsZWQoTGlzdFN1YmhlYWRlciwge1xuICBuYW1lOiAnTXVpQXV0b2NvbXBsZXRlJyxcbiAgc2xvdDogJ0dyb3VwTGFiZWwnLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHN0eWxlcy5ncm91cExhYmVsXG59KSgoe1xuICB0aGVtZVxufSkgPT4gKHtcbiAgYmFja2dyb3VuZENvbG9yOiAodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZS5iYWNrZ3JvdW5kLnBhcGVyLFxuICB0b3A6IC04XG59KSk7XG5jb25zdCBBdXRvY29tcGxldGVHcm91cFVsID0gc3R5bGVkKCd1bCcsIHtcbiAgbmFtZTogJ011aUF1dG9jb21wbGV0ZScsXG4gIHNsb3Q6ICdHcm91cFVsJyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiBzdHlsZXMuZ3JvdXBVbFxufSkoe1xuICBwYWRkaW5nOiAwLFxuICBbYCYgLiR7YXV0b2NvbXBsZXRlQ2xhc3Nlcy5vcHRpb259YF06IHtcbiAgICBwYWRkaW5nTGVmdDogMjRcbiAgfVxufSk7XG5leHBvcnQgeyBjcmVhdGVGaWx0ZXJPcHRpb25zIH07XG5jb25zdCBBdXRvY29tcGxldGUgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBBdXRvY29tcGxldGUoaW5Qcm9wcywgcmVmKSB7XG4gIHZhciBfc2xvdFByb3BzJGNsZWFySW5kaWMsIF9zbG90UHJvcHMkcGFwZXIsIF9zbG90UHJvcHMkcG9wcGVyLCBfc2xvdFByb3BzJHBvcHVwSW5kaWM7XG4gIGNvbnN0IHByb3BzID0gdXNlRGVmYXVsdFByb3BzKHtcbiAgICBwcm9wczogaW5Qcm9wcyxcbiAgICBuYW1lOiAnTXVpQXV0b2NvbXBsZXRlJ1xuICB9KTtcblxuICAvKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW51c2VkLXZhcnMgKi9cbiAgY29uc3Qge1xuICAgICAgYXV0b0NvbXBsZXRlID0gZmFsc2UsXG4gICAgICBhdXRvSGlnaGxpZ2h0ID0gZmFsc2UsXG4gICAgICBhdXRvU2VsZWN0ID0gZmFsc2UsXG4gICAgICBibHVyT25TZWxlY3QgPSBmYWxzZSxcbiAgICAgIENoaXBQcm9wcyxcbiAgICAgIGNsYXNzTmFtZSxcbiAgICAgIGNsZWFySWNvbiA9IF9DbGVhckljb24gfHwgKF9DbGVhckljb24gPSAvKiNfX1BVUkVfXyovX2pzeChDbGVhckljb24sIHtcbiAgICAgICAgZm9udFNpemU6IFwic21hbGxcIlxuICAgICAgfSkpLFxuICAgICAgY2xlYXJPbkJsdXIgPSAhcHJvcHMuZnJlZVNvbG8sXG4gICAgICBjbGVhck9uRXNjYXBlID0gZmFsc2UsXG4gICAgICBjbGVhclRleHQgPSAnQ2xlYXInLFxuICAgICAgY2xvc2VUZXh0ID0gJ0Nsb3NlJyxcbiAgICAgIGNvbXBvbmVudHNQcm9wcyA9IHt9LFxuICAgICAgZGVmYXVsdFZhbHVlID0gcHJvcHMubXVsdGlwbGUgPyBbXSA6IG51bGwsXG4gICAgICBkaXNhYmxlQ2xlYXJhYmxlID0gZmFsc2UsXG4gICAgICBkaXNhYmxlQ2xvc2VPblNlbGVjdCA9IGZhbHNlLFxuICAgICAgZGlzYWJsZWQgPSBmYWxzZSxcbiAgICAgIGRpc2FibGVkSXRlbXNGb2N1c2FibGUgPSBmYWxzZSxcbiAgICAgIGRpc2FibGVMaXN0V3JhcCA9IGZhbHNlLFxuICAgICAgZGlzYWJsZVBvcnRhbCA9IGZhbHNlLFxuICAgICAgZmlsdGVyU2VsZWN0ZWRPcHRpb25zID0gZmFsc2UsXG4gICAgICBmb3JjZVBvcHVwSWNvbiA9ICdhdXRvJyxcbiAgICAgIGZyZWVTb2xvID0gZmFsc2UsXG4gICAgICBmdWxsV2lkdGggPSBmYWxzZSxcbiAgICAgIGdldExpbWl0VGFnc1RleHQgPSBtb3JlID0+IGArJHttb3JlfWAsXG4gICAgICBnZXRPcHRpb25MYWJlbDogZ2V0T3B0aW9uTGFiZWxQcm9wLFxuICAgICAgZ3JvdXBCeSxcbiAgICAgIGhhbmRsZUhvbWVFbmRLZXlzID0gIXByb3BzLmZyZWVTb2xvLFxuICAgICAgaW5jbHVkZUlucHV0SW5MaXN0ID0gZmFsc2UsXG4gICAgICBsaW1pdFRhZ3MgPSAtMSxcbiAgICAgIExpc3Rib3hDb21wb25lbnQgPSAndWwnLFxuICAgICAgTGlzdGJveFByb3BzLFxuICAgICAgbG9hZGluZyA9IGZhbHNlLFxuICAgICAgbG9hZGluZ1RleHQgPSAnTG9hZGluZ+KApicsXG4gICAgICBtdWx0aXBsZSA9IGZhbHNlLFxuICAgICAgbm9PcHRpb25zVGV4dCA9ICdObyBvcHRpb25zJyxcbiAgICAgIG9wZW5PbkZvY3VzID0gZmFsc2UsXG4gICAgICBvcGVuVGV4dCA9ICdPcGVuJyxcbiAgICAgIFBhcGVyQ29tcG9uZW50ID0gUGFwZXIsXG4gICAgICBQb3BwZXJDb21wb25lbnQgPSBQb3BwZXIsXG4gICAgICBwb3B1cEljb24gPSBfQXJyb3dEcm9wRG93bkljb24gfHwgKF9BcnJvd0Ryb3BEb3duSWNvbiA9IC8qI19fUFVSRV9fKi9fanN4KEFycm93RHJvcERvd25JY29uLCB7fSkpLFxuICAgICAgcmVhZE9ubHkgPSBmYWxzZSxcbiAgICAgIHJlbmRlckdyb3VwOiByZW5kZXJHcm91cFByb3AsXG4gICAgICByZW5kZXJJbnB1dCxcbiAgICAgIHJlbmRlck9wdGlvbjogcmVuZGVyT3B0aW9uUHJvcCxcbiAgICAgIHJlbmRlclRhZ3MsXG4gICAgICBzZWxlY3RPbkZvY3VzID0gIXByb3BzLmZyZWVTb2xvLFxuICAgICAgc2l6ZSA9ICdtZWRpdW0nLFxuICAgICAgc2xvdFByb3BzID0ge31cbiAgICB9ID0gcHJvcHMsXG4gICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkKTtcbiAgLyogZXNsaW50LWVuYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW51c2VkLXZhcnMgKi9cblxuICBjb25zdCB7XG4gICAgZ2V0Um9vdFByb3BzLFxuICAgIGdldElucHV0UHJvcHMsXG4gICAgZ2V0SW5wdXRMYWJlbFByb3BzLFxuICAgIGdldFBvcHVwSW5kaWNhdG9yUHJvcHMsXG4gICAgZ2V0Q2xlYXJQcm9wcyxcbiAgICBnZXRUYWdQcm9wcyxcbiAgICBnZXRMaXN0Ym94UHJvcHMsXG4gICAgZ2V0T3B0aW9uUHJvcHMsXG4gICAgdmFsdWUsXG4gICAgZGlydHksXG4gICAgZXhwYW5kZWQsXG4gICAgaWQsXG4gICAgcG9wdXBPcGVuLFxuICAgIGZvY3VzZWQsXG4gICAgZm9jdXNlZFRhZyxcbiAgICBhbmNob3JFbCxcbiAgICBzZXRBbmNob3JFbCxcbiAgICBpbnB1dFZhbHVlLFxuICAgIGdyb3VwZWRPcHRpb25zXG4gIH0gPSB1c2VBdXRvY29tcGxldGUoX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgY29tcG9uZW50TmFtZTogJ0F1dG9jb21wbGV0ZSdcbiAgfSkpO1xuICBjb25zdCBoYXNDbGVhckljb24gPSAhZGlzYWJsZUNsZWFyYWJsZSAmJiAhZGlzYWJsZWQgJiYgZGlydHkgJiYgIXJlYWRPbmx5O1xuICBjb25zdCBoYXNQb3B1cEljb24gPSAoIWZyZWVTb2xvIHx8IGZvcmNlUG9wdXBJY29uID09PSB0cnVlKSAmJiBmb3JjZVBvcHVwSWNvbiAhPT0gZmFsc2U7XG4gIGNvbnN0IHtcbiAgICBvbk1vdXNlRG93bjogaGFuZGxlSW5wdXRNb3VzZURvd25cbiAgfSA9IGdldElucHV0UHJvcHMoKTtcbiAgY29uc3Qge1xuICAgIHJlZjogZXh0ZXJuYWxMaXN0Ym94UmVmXG4gIH0gPSBMaXN0Ym94UHJvcHMgIT0gbnVsbCA/IExpc3Rib3hQcm9wcyA6IHt9O1xuICBjb25zdCBfZ2V0TGlzdGJveFByb3BzID0gZ2V0TGlzdGJveFByb3BzKCksXG4gICAge1xuICAgICAgcmVmOiBsaXN0Ym94UmVmXG4gICAgfSA9IF9nZXRMaXN0Ym94UHJvcHMsXG4gICAgb3RoZXJMaXN0Ym94UHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfZ2V0TGlzdGJveFByb3BzLCBfZXhjbHVkZWQyKTtcbiAgY29uc3QgY29tYmluZWRMaXN0Ym94UmVmID0gdXNlRm9ya1JlZihsaXN0Ym94UmVmLCBleHRlcm5hbExpc3Rib3hSZWYpO1xuICBjb25zdCBkZWZhdWx0R2V0T3B0aW9uTGFiZWwgPSBvcHRpb24gPT4ge1xuICAgIHZhciBfb3B0aW9uJGxhYmVsO1xuICAgIHJldHVybiAoX29wdGlvbiRsYWJlbCA9IG9wdGlvbi5sYWJlbCkgIT0gbnVsbCA/IF9vcHRpb24kbGFiZWwgOiBvcHRpb247XG4gIH07XG4gIGNvbnN0IGdldE9wdGlvbkxhYmVsID0gZ2V0T3B0aW9uTGFiZWxQcm9wIHx8IGRlZmF1bHRHZXRPcHRpb25MYWJlbDtcblxuICAvLyBJZiB5b3UgbW9kaWZ5IHRoaXMsIG1ha2Ugc3VyZSB0byBrZWVwIHRoZSBgQXV0b2NvbXBsZXRlT3duZXJTdGF0ZWAgdHlwZSBpbiBzeW5jLlxuICBjb25zdCBvd25lclN0YXRlID0gX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgZGlzYWJsZVBvcnRhbCxcbiAgICBleHBhbmRlZCxcbiAgICBmb2N1c2VkLFxuICAgIGZ1bGxXaWR0aCxcbiAgICBnZXRPcHRpb25MYWJlbCxcbiAgICBoYXNDbGVhckljb24sXG4gICAgaGFzUG9wdXBJY29uLFxuICAgIGlucHV0Rm9jdXNlZDogZm9jdXNlZFRhZyA9PT0gLTEsXG4gICAgcG9wdXBPcGVuLFxuICAgIHNpemVcbiAgfSk7XG4gIGNvbnN0IGNsYXNzZXMgPSB1c2VVdGlsaXR5Q2xhc3Nlcyhvd25lclN0YXRlKTtcbiAgbGV0IHN0YXJ0QWRvcm5tZW50O1xuICBpZiAobXVsdGlwbGUgJiYgdmFsdWUubGVuZ3RoID4gMCkge1xuICAgIGNvbnN0IGdldEN1c3RvbWl6ZWRUYWdQcm9wcyA9IHBhcmFtcyA9PiBfZXh0ZW5kcyh7XG4gICAgICBjbGFzc05hbWU6IGNsYXNzZXMudGFnLFxuICAgICAgZGlzYWJsZWRcbiAgICB9LCBnZXRUYWdQcm9wcyhwYXJhbXMpKTtcbiAgICBpZiAocmVuZGVyVGFncykge1xuICAgICAgc3RhcnRBZG9ybm1lbnQgPSByZW5kZXJUYWdzKHZhbHVlLCBnZXRDdXN0b21pemVkVGFnUHJvcHMsIG93bmVyU3RhdGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdGFydEFkb3JubWVudCA9IHZhbHVlLm1hcCgob3B0aW9uLCBpbmRleCkgPT4ge1xuICAgICAgICBjb25zdCBfZ2V0Q3VzdG9taXplZFRhZ1Byb3AgPSBnZXRDdXN0b21pemVkVGFnUHJvcHMoe1xuICAgICAgICAgICAgaW5kZXhcbiAgICAgICAgICB9KSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBrZXlcbiAgICAgICAgICB9ID0gX2dldEN1c3RvbWl6ZWRUYWdQcm9wLFxuICAgICAgICAgIGN1c3RvbVRhZ1Byb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX2dldEN1c3RvbWl6ZWRUYWdQcm9wLCBfZXhjbHVkZWQzKTtcbiAgICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KENoaXAsIF9leHRlbmRzKHtcbiAgICAgICAgICBsYWJlbDogZ2V0T3B0aW9uTGFiZWwob3B0aW9uKSxcbiAgICAgICAgICBzaXplOiBzaXplXG4gICAgICAgIH0sIGN1c3RvbVRhZ1Byb3BzLCBDaGlwUHJvcHMpLCBrZXkpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG4gIGlmIChsaW1pdFRhZ3MgPiAtMSAmJiBBcnJheS5pc0FycmF5KHN0YXJ0QWRvcm5tZW50KSkge1xuICAgIGNvbnN0IG1vcmUgPSBzdGFydEFkb3JubWVudC5sZW5ndGggLSBsaW1pdFRhZ3M7XG4gICAgaWYgKCFmb2N1c2VkICYmIG1vcmUgPiAwKSB7XG4gICAgICBzdGFydEFkb3JubWVudCA9IHN0YXJ0QWRvcm5tZW50LnNwbGljZSgwLCBsaW1pdFRhZ3MpO1xuICAgICAgc3RhcnRBZG9ybm1lbnQucHVzaCggLyojX19QVVJFX18qL19qc3goXCJzcGFuXCIsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBjbGFzc2VzLnRhZyxcbiAgICAgICAgY2hpbGRyZW46IGdldExpbWl0VGFnc1RleHQobW9yZSlcbiAgICAgIH0sIHN0YXJ0QWRvcm5tZW50Lmxlbmd0aCkpO1xuICAgIH1cbiAgfVxuICBjb25zdCBkZWZhdWx0UmVuZGVyR3JvdXAgPSBwYXJhbXMgPT4gLyojX19QVVJFX18qL19qc3hzKFwibGlcIiwge1xuICAgIGNoaWxkcmVuOiBbLyojX19QVVJFX18qL19qc3goQXV0b2NvbXBsZXRlR3JvdXBMYWJlbCwge1xuICAgICAgY2xhc3NOYW1lOiBjbGFzc2VzLmdyb3VwTGFiZWwsXG4gICAgICBvd25lclN0YXRlOiBvd25lclN0YXRlLFxuICAgICAgY29tcG9uZW50OiBcImRpdlwiLFxuICAgICAgY2hpbGRyZW46IHBhcmFtcy5ncm91cFxuICAgIH0pLCAvKiNfX1BVUkVfXyovX2pzeChBdXRvY29tcGxldGVHcm91cFVsLCB7XG4gICAgICBjbGFzc05hbWU6IGNsYXNzZXMuZ3JvdXBVbCxcbiAgICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGUsXG4gICAgICBjaGlsZHJlbjogcGFyYW1zLmNoaWxkcmVuXG4gICAgfSldXG4gIH0sIHBhcmFtcy5rZXkpO1xuICBjb25zdCByZW5kZXJHcm91cCA9IHJlbmRlckdyb3VwUHJvcCB8fCBkZWZhdWx0UmVuZGVyR3JvdXA7XG4gIGNvbnN0IGRlZmF1bHRSZW5kZXJPcHRpb24gPSAocHJvcHMyLCBvcHRpb24pID0+IHtcbiAgICAvLyBOZWVkIHRvIGNsZWFybHkgYXBwbHkga2V5IGJlY2F1c2Ugb2YgaHR0cHM6Ly9naXRodWIuY29tL3ZlcmNlbC9uZXh0LmpzL2lzc3Vlcy81NTY0MlxuICAgIGNvbnN0IHtcbiAgICAgICAga2V5XG4gICAgICB9ID0gcHJvcHMyLFxuICAgICAgb3RoZXJQcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzMiwgX2V4Y2x1ZGVkNCk7XG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KFwibGlcIiwgX2V4dGVuZHMoe30sIG90aGVyUHJvcHMsIHtcbiAgICAgIGNoaWxkcmVuOiBnZXRPcHRpb25MYWJlbChvcHRpb24pXG4gICAgfSksIGtleSk7XG4gIH07XG4gIGNvbnN0IHJlbmRlck9wdGlvbiA9IHJlbmRlck9wdGlvblByb3AgfHwgZGVmYXVsdFJlbmRlck9wdGlvbjtcbiAgY29uc3QgcmVuZGVyTGlzdE9wdGlvbiA9IChvcHRpb24sIGluZGV4KSA9PiB7XG4gICAgY29uc3Qgb3B0aW9uUHJvcHMgPSBnZXRPcHRpb25Qcm9wcyh7XG4gICAgICBvcHRpb24sXG4gICAgICBpbmRleFxuICAgIH0pO1xuICAgIHJldHVybiByZW5kZXJPcHRpb24oX2V4dGVuZHMoe30sIG9wdGlvblByb3BzLCB7XG4gICAgICBjbGFzc05hbWU6IGNsYXNzZXMub3B0aW9uXG4gICAgfSksIG9wdGlvbiwge1xuICAgICAgc2VsZWN0ZWQ6IG9wdGlvblByb3BzWydhcmlhLXNlbGVjdGVkJ10sXG4gICAgICBpbmRleCxcbiAgICAgIGlucHV0VmFsdWVcbiAgICB9LCBvd25lclN0YXRlKTtcbiAgfTtcbiAgY29uc3QgY2xlYXJJbmRpY2F0b3JTbG90UHJvcHMgPSAoX3Nsb3RQcm9wcyRjbGVhckluZGljID0gc2xvdFByb3BzLmNsZWFySW5kaWNhdG9yKSAhPSBudWxsID8gX3Nsb3RQcm9wcyRjbGVhckluZGljIDogY29tcG9uZW50c1Byb3BzLmNsZWFySW5kaWNhdG9yO1xuICBjb25zdCBwYXBlclNsb3RQcm9wcyA9IChfc2xvdFByb3BzJHBhcGVyID0gc2xvdFByb3BzLnBhcGVyKSAhPSBudWxsID8gX3Nsb3RQcm9wcyRwYXBlciA6IGNvbXBvbmVudHNQcm9wcy5wYXBlcjtcbiAgY29uc3QgcG9wcGVyU2xvdFByb3BzID0gKF9zbG90UHJvcHMkcG9wcGVyID0gc2xvdFByb3BzLnBvcHBlcikgIT0gbnVsbCA/IF9zbG90UHJvcHMkcG9wcGVyIDogY29tcG9uZW50c1Byb3BzLnBvcHBlcjtcbiAgY29uc3QgcG9wdXBJbmRpY2F0b3JTbG90UHJvcHMgPSAoX3Nsb3RQcm9wcyRwb3B1cEluZGljID0gc2xvdFByb3BzLnBvcHVwSW5kaWNhdG9yKSAhPSBudWxsID8gX3Nsb3RQcm9wcyRwb3B1cEluZGljIDogY29tcG9uZW50c1Byb3BzLnBvcHVwSW5kaWNhdG9yO1xuICBjb25zdCByZW5kZXJBdXRvY29tcGxldGVQb3BwZXJDaGlsZHJlbiA9IGNoaWxkcmVuID0+IC8qI19fUFVSRV9fKi9fanN4KEF1dG9jb21wbGV0ZVBvcHBlciwgX2V4dGVuZHMoe1xuICAgIGFzOiBQb3BwZXJDb21wb25lbnQsXG4gICAgZGlzYWJsZVBvcnRhbDogZGlzYWJsZVBvcnRhbCxcbiAgICBzdHlsZToge1xuICAgICAgd2lkdGg6IGFuY2hvckVsID8gYW5jaG9yRWwuY2xpZW50V2lkdGggOiBudWxsXG4gICAgfSxcbiAgICBvd25lclN0YXRlOiBvd25lclN0YXRlLFxuICAgIHJvbGU6IFwicHJlc2VudGF0aW9uXCIsXG4gICAgYW5jaG9yRWw6IGFuY2hvckVsLFxuICAgIG9wZW46IHBvcHVwT3BlblxuICB9LCBwb3BwZXJTbG90UHJvcHMsIHtcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5wb3BwZXIsIHBvcHBlclNsb3RQcm9wcyA9PSBudWxsID8gdm9pZCAwIDogcG9wcGVyU2xvdFByb3BzLmNsYXNzTmFtZSksXG4gICAgY2hpbGRyZW46IC8qI19fUFVSRV9fKi9fanN4KEF1dG9jb21wbGV0ZVBhcGVyLCBfZXh0ZW5kcyh7XG4gICAgICBvd25lclN0YXRlOiBvd25lclN0YXRlLFxuICAgICAgYXM6IFBhcGVyQ29tcG9uZW50XG4gICAgfSwgcGFwZXJTbG90UHJvcHMsIHtcbiAgICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnBhcGVyLCBwYXBlclNsb3RQcm9wcyA9PSBudWxsID8gdm9pZCAwIDogcGFwZXJTbG90UHJvcHMuY2xhc3NOYW1lKSxcbiAgICAgIGNoaWxkcmVuOiBjaGlsZHJlblxuICAgIH0pKVxuICB9KSk7XG4gIGxldCBhdXRvY29tcGxldGVQb3BwZXIgPSBudWxsO1xuICBpZiAoZ3JvdXBlZE9wdGlvbnMubGVuZ3RoID4gMCkge1xuICAgIGF1dG9jb21wbGV0ZVBvcHBlciA9IHJlbmRlckF1dG9jb21wbGV0ZVBvcHBlckNoaWxkcmVuKCAvKiNfX1BVUkVfXyovX2pzeChBdXRvY29tcGxldGVMaXN0Ym94LCBfZXh0ZW5kcyh7XG4gICAgICBhczogTGlzdGJveENvbXBvbmVudCxcbiAgICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5saXN0Ym94LFxuICAgICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZVxuICAgIH0sIG90aGVyTGlzdGJveFByb3BzLCBMaXN0Ym94UHJvcHMsIHtcbiAgICAgIHJlZjogY29tYmluZWRMaXN0Ym94UmVmLFxuICAgICAgY2hpbGRyZW46IGdyb3VwZWRPcHRpb25zLm1hcCgob3B0aW9uLCBpbmRleCkgPT4ge1xuICAgICAgICBpZiAoZ3JvdXBCeSkge1xuICAgICAgICAgIHJldHVybiByZW5kZXJHcm91cCh7XG4gICAgICAgICAgICBrZXk6IG9wdGlvbi5rZXksXG4gICAgICAgICAgICBncm91cDogb3B0aW9uLmdyb3VwLFxuICAgICAgICAgICAgY2hpbGRyZW46IG9wdGlvbi5vcHRpb25zLm1hcCgob3B0aW9uMiwgaW5kZXgyKSA9PiByZW5kZXJMaXN0T3B0aW9uKG9wdGlvbjIsIG9wdGlvbi5pbmRleCArIGluZGV4MikpXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlbmRlckxpc3RPcHRpb24ob3B0aW9uLCBpbmRleCk7XG4gICAgICB9KVxuICAgIH0pKSk7XG4gIH0gZWxzZSBpZiAobG9hZGluZyAmJiBncm91cGVkT3B0aW9ucy5sZW5ndGggPT09IDApIHtcbiAgICBhdXRvY29tcGxldGVQb3BwZXIgPSByZW5kZXJBdXRvY29tcGxldGVQb3BwZXJDaGlsZHJlbiggLyojX19QVVJFX18qL19qc3goQXV0b2NvbXBsZXRlTG9hZGluZywge1xuICAgICAgY2xhc3NOYW1lOiBjbGFzc2VzLmxvYWRpbmcsXG4gICAgICBvd25lclN0YXRlOiBvd25lclN0YXRlLFxuICAgICAgY2hpbGRyZW46IGxvYWRpbmdUZXh0XG4gICAgfSkpO1xuICB9IGVsc2UgaWYgKGdyb3VwZWRPcHRpb25zLmxlbmd0aCA9PT0gMCAmJiAhZnJlZVNvbG8gJiYgIWxvYWRpbmcpIHtcbiAgICBhdXRvY29tcGxldGVQb3BwZXIgPSByZW5kZXJBdXRvY29tcGxldGVQb3BwZXJDaGlsZHJlbiggLyojX19QVVJFX18qL19qc3goQXV0b2NvbXBsZXRlTm9PcHRpb25zLCB7XG4gICAgICBjbGFzc05hbWU6IGNsYXNzZXMubm9PcHRpb25zLFxuICAgICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZSxcbiAgICAgIHJvbGU6IFwicHJlc2VudGF0aW9uXCIsXG4gICAgICBvbk1vdXNlRG93bjogZXZlbnQgPT4ge1xuICAgICAgICAvLyBQcmV2ZW50IGlucHV0IGJsdXIgd2hlbiBpbnRlcmFjdGluZyB3aXRoIHRoZSBcIm5vIG9wdGlvbnNcIiBjb250ZW50XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB9LFxuICAgICAgY2hpbGRyZW46IG5vT3B0aW9uc1RleHRcbiAgICB9KSk7XG4gIH1cbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4cyhSZWFjdC5GcmFnbWVudCwge1xuICAgIGNoaWxkcmVuOiBbLyojX19QVVJFX18qL19qc3goQXV0b2NvbXBsZXRlUm9vdCwgX2V4dGVuZHMoe1xuICAgICAgcmVmOiByZWYsXG4gICAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWUpLFxuICAgICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZVxuICAgIH0sIGdldFJvb3RQcm9wcyhvdGhlciksIHtcbiAgICAgIGNoaWxkcmVuOiByZW5kZXJJbnB1dCh7XG4gICAgICAgIGlkLFxuICAgICAgICBkaXNhYmxlZCxcbiAgICAgICAgZnVsbFdpZHRoOiB0cnVlLFxuICAgICAgICBzaXplOiBzaXplID09PSAnc21hbGwnID8gJ3NtYWxsJyA6IHVuZGVmaW5lZCxcbiAgICAgICAgSW5wdXRMYWJlbFByb3BzOiBnZXRJbnB1dExhYmVsUHJvcHMoKSxcbiAgICAgICAgSW5wdXRQcm9wczogX2V4dGVuZHMoe1xuICAgICAgICAgIHJlZjogc2V0QW5jaG9yRWwsXG4gICAgICAgICAgY2xhc3NOYW1lOiBjbGFzc2VzLmlucHV0Um9vdCxcbiAgICAgICAgICBzdGFydEFkb3JubWVudCxcbiAgICAgICAgICBvbkNsaWNrOiBldmVudCA9PiB7XG4gICAgICAgICAgICBpZiAoZXZlbnQudGFyZ2V0ID09PSBldmVudC5jdXJyZW50VGFyZ2V0KSB7XG4gICAgICAgICAgICAgIGhhbmRsZUlucHV0TW91c2VEb3duKGV2ZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0sIChoYXNDbGVhckljb24gfHwgaGFzUG9wdXBJY29uKSAmJiB7XG4gICAgICAgICAgZW5kQWRvcm5tZW50OiAvKiNfX1BVUkVfXyovX2pzeHMoQXV0b2NvbXBsZXRlRW5kQWRvcm5tZW50LCB7XG4gICAgICAgICAgICBjbGFzc05hbWU6IGNsYXNzZXMuZW5kQWRvcm5tZW50LFxuICAgICAgICAgICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZSxcbiAgICAgICAgICAgIGNoaWxkcmVuOiBbaGFzQ2xlYXJJY29uID8gLyojX19QVVJFX18qL19qc3goQXV0b2NvbXBsZXRlQ2xlYXJJbmRpY2F0b3IsIF9leHRlbmRzKHt9LCBnZXRDbGVhclByb3BzKCksIHtcbiAgICAgICAgICAgICAgXCJhcmlhLWxhYmVsXCI6IGNsZWFyVGV4dCxcbiAgICAgICAgICAgICAgdGl0bGU6IGNsZWFyVGV4dCxcbiAgICAgICAgICAgICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZVxuICAgICAgICAgICAgfSwgY2xlYXJJbmRpY2F0b3JTbG90UHJvcHMsIHtcbiAgICAgICAgICAgICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMuY2xlYXJJbmRpY2F0b3IsIGNsZWFySW5kaWNhdG9yU2xvdFByb3BzID09IG51bGwgPyB2b2lkIDAgOiBjbGVhckluZGljYXRvclNsb3RQcm9wcy5jbGFzc05hbWUpLFxuICAgICAgICAgICAgICBjaGlsZHJlbjogY2xlYXJJY29uXG4gICAgICAgICAgICB9KSkgOiBudWxsLCBoYXNQb3B1cEljb24gPyAvKiNfX1BVUkVfXyovX2pzeChBdXRvY29tcGxldGVQb3B1cEluZGljYXRvciwgX2V4dGVuZHMoe30sIGdldFBvcHVwSW5kaWNhdG9yUHJvcHMoKSwge1xuICAgICAgICAgICAgICBkaXNhYmxlZDogZGlzYWJsZWQsXG4gICAgICAgICAgICAgIFwiYXJpYS1sYWJlbFwiOiBwb3B1cE9wZW4gPyBjbG9zZVRleHQgOiBvcGVuVGV4dCxcbiAgICAgICAgICAgICAgdGl0bGU6IHBvcHVwT3BlbiA/IGNsb3NlVGV4dCA6IG9wZW5UZXh0LFxuICAgICAgICAgICAgICBvd25lclN0YXRlOiBvd25lclN0YXRlXG4gICAgICAgICAgICB9LCBwb3B1cEluZGljYXRvclNsb3RQcm9wcywge1xuICAgICAgICAgICAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5wb3B1cEluZGljYXRvciwgcG9wdXBJbmRpY2F0b3JTbG90UHJvcHMgPT0gbnVsbCA/IHZvaWQgMCA6IHBvcHVwSW5kaWNhdG9yU2xvdFByb3BzLmNsYXNzTmFtZSksXG4gICAgICAgICAgICAgIGNoaWxkcmVuOiBwb3B1cEljb25cbiAgICAgICAgICAgIH0pKSA6IG51bGxdXG4gICAgICAgICAgfSlcbiAgICAgICAgfSksXG4gICAgICAgIGlucHV0UHJvcHM6IF9leHRlbmRzKHtcbiAgICAgICAgICBjbGFzc05hbWU6IGNsYXNzZXMuaW5wdXQsXG4gICAgICAgICAgZGlzYWJsZWQsXG4gICAgICAgICAgcmVhZE9ubHlcbiAgICAgICAgfSwgZ2V0SW5wdXRQcm9wcygpKVxuICAgICAgfSlcbiAgICB9KSksIGFuY2hvckVsID8gYXV0b2NvbXBsZXRlUG9wcGVyIDogbnVsbF1cbiAgfSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IEF1dG9jb21wbGV0ZS5wcm9wVHlwZXMgLyogcmVtb3ZlLXByb3B0eXBlcyAqLyA9IHtcbiAgLy8g4pSM4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAIFdhcm5pbmcg4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSQXG4gIC8vIOKUgiBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMuIOKUglxuICAvLyDilIIgICAgVG8gdXBkYXRlIHRoZW0sIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIGBwbnBtIHByb3B0eXBlc2AuICAgICDilIJcbiAgLy8g4pSU4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSYXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBwb3J0aW9uIG9mIHRoZSBzZWxlY3RlZCBzdWdnZXN0aW9uIHRoYXQgdGhlIHVzZXIgaGFzbid0IHR5cGVkLFxuICAgKiBrbm93biBhcyB0aGUgY29tcGxldGlvbiBzdHJpbmcsIGFwcGVhcnMgaW5saW5lIGFmdGVyIHRoZSBpbnB1dCBjdXJzb3IgaW4gdGhlIHRleHRib3guXG4gICAqIFRoZSBpbmxpbmUgY29tcGxldGlvbiBzdHJpbmcgaXMgdmlzdWFsbHkgaGlnaGxpZ2h0ZWQgYW5kIGhhcyBhIHNlbGVjdGVkIHN0YXRlLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgYXV0b0NvbXBsZXRlOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGZpcnN0IG9wdGlvbiBpcyBhdXRvbWF0aWNhbGx5IGhpZ2hsaWdodGVkLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgYXV0b0hpZ2hsaWdodDogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBzZWxlY3RlZCBvcHRpb24gYmVjb21lcyB0aGUgdmFsdWUgb2YgdGhlIGlucHV0XG4gICAqIHdoZW4gdGhlIEF1dG9jb21wbGV0ZSBsb3NlcyBmb2N1cyB1bmxlc3MgdGhlIHVzZXIgY2hvb3Nlc1xuICAgKiBhIGRpZmZlcmVudCBvcHRpb24gb3IgY2hhbmdlcyB0aGUgY2hhcmFjdGVyIHN0cmluZyBpbiB0aGUgaW5wdXQuXG4gICAqXG4gICAqIFdoZW4gdXNpbmcgdGhlIGBmcmVlU29sb2AgbW9kZSwgdGhlIHR5cGVkIHZhbHVlIHdpbGwgYmUgdGhlIGlucHV0IHZhbHVlXG4gICAqIGlmIHRoZSBBdXRvY29tcGxldGUgbG9zZXMgZm9jdXMgd2l0aG91dCBoaWdobGlnaHRpbmcgYW4gb3B0aW9uLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgYXV0b1NlbGVjdDogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBDb250cm9sIGlmIHRoZSBpbnB1dCBzaG91bGQgYmUgYmx1cnJlZCB3aGVuIGFuIG9wdGlvbiBpcyBzZWxlY3RlZDpcbiAgICpcbiAgICogLSBgZmFsc2VgIHRoZSBpbnB1dCBpcyBub3QgYmx1cnJlZC5cbiAgICogLSBgdHJ1ZWAgdGhlIGlucHV0IGlzIGFsd2F5cyBibHVycmVkLlxuICAgKiAtIGB0b3VjaGAgdGhlIGlucHV0IGlzIGJsdXJyZWQgYWZ0ZXIgYSB0b3VjaCBldmVudC5cbiAgICogLSBgbW91c2VgIHRoZSBpbnB1dCBpcyBibHVycmVkIGFmdGVyIGEgbW91c2UgZXZlbnQuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBibHVyT25TZWxlY3Q6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ21vdXNlJywgJ3RvdWNoJ10pLCBQcm9wVHlwZXMuYm9vbF0pLFxuICAvKipcbiAgICogUHJvcHMgYXBwbGllZCB0byB0aGUgW2BDaGlwYF0oL21hdGVyaWFsLXVpL2FwaS9jaGlwLykgZWxlbWVudC5cbiAgICovXG4gIENoaXBQcm9wczogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBUaGUgaWNvbiB0byBkaXNwbGF5IGluIHBsYWNlIG9mIHRoZSBkZWZhdWx0IGNsZWFyIGljb24uXG4gICAqIEBkZWZhdWx0IDxDbGVhckljb24gZm9udFNpemU9XCJzbWFsbFwiIC8+XG4gICAqL1xuICBjbGVhckljb246IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgaW5wdXQncyB0ZXh0IGlzIGNsZWFyZWQgb24gYmx1ciBpZiBubyB2YWx1ZSBpcyBzZWxlY3RlZC5cbiAgICpcbiAgICogU2V0IGl0IHRvIGB0cnVlYCBpZiB5b3Ugd2FudCB0byBoZWxwIHRoZSB1c2VyIGVudGVyIGEgbmV3IHZhbHVlLlxuICAgKiBTZXQgaXQgdG8gYGZhbHNlYCBpZiB5b3Ugd2FudCB0byBoZWxwIHRoZSB1c2VyIHJlc3VtZSB0aGVpciBzZWFyY2guXG4gICAqIEBkZWZhdWx0ICFwcm9wcy5mcmVlU29sb1xuICAgKi9cbiAgY2xlYXJPbkJsdXI6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogSWYgYHRydWVgLCBjbGVhciBhbGwgdmFsdWVzIHdoZW4gdGhlIHVzZXIgcHJlc3NlcyBlc2NhcGUgYW5kIHRoZSBwb3B1cCBpcyBjbG9zZWQuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBjbGVhck9uRXNjYXBlOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIE92ZXJyaWRlIHRoZSBkZWZhdWx0IHRleHQgZm9yIHRoZSAqY2xlYXIqIGljb24gYnV0dG9uLlxuICAgKlxuICAgKiBGb3IgbG9jYWxpemF0aW9uIHB1cnBvc2VzLCB5b3UgY2FuIHVzZSB0aGUgcHJvdmlkZWQgW3RyYW5zbGF0aW9uc10oL21hdGVyaWFsLXVpL2d1aWRlcy9sb2NhbGl6YXRpb24vKS5cbiAgICogQGRlZmF1bHQgJ0NsZWFyJ1xuICAgKi9cbiAgY2xlYXJUZXh0OiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogT3ZlcnJpZGUgdGhlIGRlZmF1bHQgdGV4dCBmb3IgdGhlICpjbG9zZSBwb3B1cCogaWNvbiBidXR0b24uXG4gICAqXG4gICAqIEZvciBsb2NhbGl6YXRpb24gcHVycG9zZXMsIHlvdSBjYW4gdXNlIHRoZSBwcm92aWRlZCBbdHJhbnNsYXRpb25zXSgvbWF0ZXJpYWwtdWkvZ3VpZGVzL2xvY2FsaXphdGlvbi8pLlxuICAgKiBAZGVmYXVsdCAnQ2xvc2UnXG4gICAqL1xuICBjbG9zZVRleHQ6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBUaGUgcHJvcHMgdXNlZCBmb3IgZWFjaCBzbG90IGluc2lkZS5cbiAgICogQGRlZmF1bHQge31cbiAgICovXG4gIGNvbXBvbmVudHNQcm9wczogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBjbGVhckluZGljYXRvcjogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBwYXBlcjogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBwb3BwZXI6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgcG9wdXBJbmRpY2F0b3I6IFByb3BUeXBlcy5vYmplY3RcbiAgfSksXG4gIC8qKlxuICAgKiBUaGUgZGVmYXVsdCB2YWx1ZS4gVXNlIHdoZW4gdGhlIGNvbXBvbmVudCBpcyBub3QgY29udHJvbGxlZC5cbiAgICogQGRlZmF1bHQgcHJvcHMubXVsdGlwbGUgPyBbXSA6IG51bGxcbiAgICovXG4gIGRlZmF1bHRWYWx1ZTogY2hhaW5Qcm9wVHlwZXMoUHJvcFR5cGVzLmFueSwgcHJvcHMgPT4ge1xuICAgIGlmIChwcm9wcy5tdWx0aXBsZSAmJiBwcm9wcy5kZWZhdWx0VmFsdWUgIT09IHVuZGVmaW5lZCAmJiAhQXJyYXkuaXNBcnJheShwcm9wcy5kZWZhdWx0VmFsdWUpKSB7XG4gICAgICByZXR1cm4gbmV3IEVycm9yKFsnTVVJOiBUaGUgQXV0b2NvbXBsZXRlIGV4cGVjdHMgdGhlIGBkZWZhdWx0VmFsdWVgIHByb3AgdG8gYmUgYW4gYXJyYXkgd2hlbiBgbXVsdGlwbGU9e3RydWV9YCBvciB1bmRlZmluZWQuJywgYEhvd2V2ZXIsICR7cHJvcHMuZGVmYXVsdFZhbHVlfSB3YXMgcHJvdmlkZWQuYF0uam9pbignXFxuJykpO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfSksXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBpbnB1dCBjYW4ndCBiZSBjbGVhcmVkLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZGlzYWJsZUNsZWFyYWJsZTogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBwb3B1cCB3b24ndCBjbG9zZSB3aGVuIGEgdmFsdWUgaXMgc2VsZWN0ZWQuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkaXNhYmxlQ2xvc2VPblNlbGVjdDogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBjb21wb25lbnQgaXMgZGlzYWJsZWQuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHdpbGwgYWxsb3cgZm9jdXMgb24gZGlzYWJsZWQgaXRlbXMuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkaXNhYmxlZEl0ZW1zRm9jdXNhYmxlOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGxpc3QgYm94IGluIHRoZSBwb3B1cCB3aWxsIG5vdCB3cmFwIGZvY3VzLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZGlzYWJsZUxpc3RXcmFwOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGBQb3BwZXJgIGNvbnRlbnQgd2lsbCBiZSB1bmRlciB0aGUgRE9NIGhpZXJhcmNoeSBvZiB0aGUgcGFyZW50IGNvbXBvbmVudC5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRpc2FibGVQb3J0YWw6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogQSBmdW5jdGlvbiB0aGF0IGRldGVybWluZXMgdGhlIGZpbHRlcmVkIG9wdGlvbnMgdG8gYmUgcmVuZGVyZWQgb24gc2VhcmNoLlxuICAgKlxuICAgKiBAZGVmYXVsdCBjcmVhdGVGaWx0ZXJPcHRpb25zKClcbiAgICogQHBhcmFtIHtWYWx1ZVtdfSBvcHRpb25zIFRoZSBvcHRpb25zIHRvIHJlbmRlci5cbiAgICogQHBhcmFtIHtvYmplY3R9IHN0YXRlIFRoZSBzdGF0ZSBvZiB0aGUgY29tcG9uZW50LlxuICAgKiBAcmV0dXJucyB7VmFsdWVbXX1cbiAgICovXG4gIGZpbHRlck9wdGlvbnM6IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogSWYgYHRydWVgLCBoaWRlIHRoZSBzZWxlY3RlZCBvcHRpb25zIGZyb20gdGhlIGxpc3QgYm94LlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZmlsdGVyU2VsZWN0ZWRPcHRpb25zOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIEZvcmNlIHRoZSB2aXNpYmlsaXR5IGRpc3BsYXkgb2YgdGhlIHBvcHVwIGljb24uXG4gICAqIEBkZWZhdWx0ICdhdXRvJ1xuICAgKi9cbiAgZm9yY2VQb3B1cEljb246IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ2F1dG8nXSksIFByb3BUeXBlcy5ib29sXSksXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBBdXRvY29tcGxldGUgaXMgZnJlZSBzb2xvLCBtZWFuaW5nIHRoYXQgdGhlIHVzZXIgaW5wdXQgaXMgbm90IGJvdW5kIHRvIHByb3ZpZGVkIG9wdGlvbnMuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBmcmVlU29sbzogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBpbnB1dCB3aWxsIHRha2UgdXAgdGhlIGZ1bGwgd2lkdGggb2YgaXRzIGNvbnRhaW5lci5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGZ1bGxXaWR0aDogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBUaGUgbGFiZWwgdG8gZGlzcGxheSB3aGVuIHRoZSB0YWdzIGFyZSB0cnVuY2F0ZWQgKGBsaW1pdFRhZ3NgKS5cbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IG1vcmUgVGhlIG51bWJlciBvZiB0cnVuY2F0ZWQgdGFncy5cbiAgICogQHJldHVybnMge1JlYWN0Tm9kZX1cbiAgICogQGRlZmF1bHQgKG1vcmUpID0+IGArJHttb3JlfWBcbiAgICovXG4gIGdldExpbWl0VGFnc1RleHQ6IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogVXNlZCB0byBkZXRlcm1pbmUgdGhlIGRpc2FibGVkIHN0YXRlIGZvciBhIGdpdmVuIG9wdGlvbi5cbiAgICpcbiAgICogQHBhcmFtIHtWYWx1ZX0gb3B0aW9uIFRoZSBvcHRpb24gdG8gdGVzdC5cbiAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAqL1xuICBnZXRPcHRpb25EaXNhYmxlZDogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBVc2VkIHRvIGRldGVybWluZSB0aGUga2V5IGZvciBhIGdpdmVuIG9wdGlvbi5cbiAgICogVGhpcyBjYW4gYmUgdXNlZnVsIHdoZW4gdGhlIGxhYmVscyBvZiBvcHRpb25zIGFyZSBub3QgdW5pcXVlIChzaW5jZSBsYWJlbHMgYXJlIHVzZWQgYXMga2V5cyBieSBkZWZhdWx0KS5cbiAgICpcbiAgICogQHBhcmFtIHtWYWx1ZX0gb3B0aW9uIFRoZSBvcHRpb24gdG8gZ2V0IHRoZSBrZXkgZm9yLlxuICAgKiBAcmV0dXJucyB7c3RyaW5nIHwgbnVtYmVyfVxuICAgKi9cbiAgZ2V0T3B0aW9uS2V5OiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIFVzZWQgdG8gZGV0ZXJtaW5lIHRoZSBzdHJpbmcgdmFsdWUgZm9yIGEgZ2l2ZW4gb3B0aW9uLlxuICAgKiBJdCdzIHVzZWQgdG8gZmlsbCB0aGUgaW5wdXQgKGFuZCB0aGUgbGlzdCBib3ggb3B0aW9ucyBpZiBgcmVuZGVyT3B0aW9uYCBpcyBub3QgcHJvdmlkZWQpLlxuICAgKlxuICAgKiBJZiB1c2VkIGluIGZyZWUgc29sbyBtb2RlLCBpdCBtdXN0IGFjY2VwdCBib3RoIHRoZSB0eXBlIG9mIHRoZSBvcHRpb25zIGFuZCBhIHN0cmluZy5cbiAgICpcbiAgICogQHBhcmFtIHtWYWx1ZX0gb3B0aW9uXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAqIEBkZWZhdWx0IChvcHRpb24pID0+IG9wdGlvbi5sYWJlbCA/PyBvcHRpb25cbiAgICovXG4gIGdldE9wdGlvbkxhYmVsOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIElmIHByb3ZpZGVkLCB0aGUgb3B0aW9ucyB3aWxsIGJlIGdyb3VwZWQgdW5kZXIgdGhlIHJldHVybmVkIHN0cmluZy5cbiAgICogVGhlIGdyb3VwQnkgdmFsdWUgaXMgYWxzbyB1c2VkIGFzIHRoZSB0ZXh0IGZvciBncm91cCBoZWFkaW5ncyB3aGVuIGByZW5kZXJHcm91cGAgaXMgbm90IHByb3ZpZGVkLlxuICAgKlxuICAgKiBAcGFyYW0ge1ZhbHVlfSBvcHRpb25zIFRoZSBvcHRpb25zIHRvIGdyb3VwLlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgKi9cbiAgZ3JvdXBCeTogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBjb21wb25lbnQgaGFuZGxlcyB0aGUgXCJIb21lXCIgYW5kIFwiRW5kXCIga2V5cyB3aGVuIHRoZSBwb3B1cCBpcyBvcGVuLlxuICAgKiBJdCBzaG91bGQgbW92ZSBmb2N1cyB0byB0aGUgZmlyc3Qgb3B0aW9uIGFuZCBsYXN0IG9wdGlvbiwgcmVzcGVjdGl2ZWx5LlxuICAgKiBAZGVmYXVsdCAhcHJvcHMuZnJlZVNvbG9cbiAgICovXG4gIGhhbmRsZUhvbWVFbmRLZXlzOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIFRoaXMgcHJvcCBpcyB1c2VkIHRvIGhlbHAgaW1wbGVtZW50IHRoZSBhY2Nlc3NpYmlsaXR5IGxvZ2ljLlxuICAgKiBJZiB5b3UgZG9uJ3QgcHJvdmlkZSBhbiBpZCBpdCB3aWxsIGZhbGwgYmFjayB0byBhIHJhbmRvbWx5IGdlbmVyYXRlZCBvbmUuXG4gICAqL1xuICBpZDogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGhpZ2hsaWdodCBjYW4gbW92ZSB0byB0aGUgaW5wdXQuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBpbmNsdWRlSW5wdXRJbkxpc3Q6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogVGhlIGlucHV0IHZhbHVlLlxuICAgKi9cbiAgaW5wdXRWYWx1ZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIFVzZWQgdG8gZGV0ZXJtaW5lIGlmIHRoZSBvcHRpb24gcmVwcmVzZW50cyB0aGUgZ2l2ZW4gdmFsdWUuXG4gICAqIFVzZXMgc3RyaWN0IGVxdWFsaXR5IGJ5IGRlZmF1bHQuXG4gICAqIOKaoO+4jyBCb3RoIGFyZ3VtZW50cyBuZWVkIHRvIGJlIGhhbmRsZWQsIGFuIG9wdGlvbiBjYW4gb25seSBtYXRjaCB3aXRoIG9uZSB2YWx1ZS5cbiAgICpcbiAgICogQHBhcmFtIHtWYWx1ZX0gb3B0aW9uIFRoZSBvcHRpb24gdG8gdGVzdC5cbiAgICogQHBhcmFtIHtWYWx1ZX0gdmFsdWUgVGhlIHZhbHVlIHRvIHRlc3QgYWdhaW5zdC5cbiAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAqL1xuICBpc09wdGlvbkVxdWFsVG9WYWx1ZTogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBUaGUgbWF4aW11bSBudW1iZXIgb2YgdGFncyB0aGF0IHdpbGwgYmUgdmlzaWJsZSB3aGVuIG5vdCBmb2N1c2VkLlxuICAgKiBTZXQgYC0xYCB0byBkaXNhYmxlIHRoZSBsaW1pdC5cbiAgICogQGRlZmF1bHQgLTFcbiAgICovXG4gIGxpbWl0VGFnczogaW50ZWdlclByb3BUeXBlLFxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIHRvIHJlbmRlciB0aGUgbGlzdGJveC5cbiAgICogQGRlZmF1bHQgJ3VsJ1xuICAgKi9cbiAgTGlzdGJveENvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuICAvKipcbiAgICogUHJvcHMgYXBwbGllZCB0byB0aGUgTGlzdGJveCBlbGVtZW50LlxuICAgKi9cbiAgTGlzdGJveFByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgY29tcG9uZW50IGlzIGluIGEgbG9hZGluZyBzdGF0ZS5cbiAgICogVGhpcyBzaG93cyB0aGUgYGxvYWRpbmdUZXh0YCBpbiBwbGFjZSBvZiBzdWdnZXN0aW9ucyAob25seSBpZiB0aGVyZSBhcmUgbm8gc3VnZ2VzdGlvbnMgdG8gc2hvdywgZm9yIGV4YW1wbGUgYG9wdGlvbnNgIGFyZSBlbXB0eSkuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBsb2FkaW5nOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIFRleHQgdG8gZGlzcGxheSB3aGVuIGluIGEgbG9hZGluZyBzdGF0ZS5cbiAgICpcbiAgICogRm9yIGxvY2FsaXphdGlvbiBwdXJwb3NlcywgeW91IGNhbiB1c2UgdGhlIHByb3ZpZGVkIFt0cmFuc2xhdGlvbnNdKC9tYXRlcmlhbC11aS9ndWlkZXMvbG9jYWxpemF0aW9uLykuXG4gICAqIEBkZWZhdWx0ICdMb2FkaW5n4oCmJ1xuICAgKi9cbiAgbG9hZGluZ1RleHQ6IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogSWYgYHRydWVgLCBgdmFsdWVgIG11c3QgYmUgYW4gYXJyYXkgYW5kIHRoZSBtZW51IHdpbGwgc3VwcG9ydCBtdWx0aXBsZSBzZWxlY3Rpb25zLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgbXVsdGlwbGU6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogVGV4dCB0byBkaXNwbGF5IHdoZW4gdGhlcmUgYXJlIG5vIG9wdGlvbnMuXG4gICAqXG4gICAqIEZvciBsb2NhbGl6YXRpb24gcHVycG9zZXMsIHlvdSBjYW4gdXNlIHRoZSBwcm92aWRlZCBbdHJhbnNsYXRpb25zXSgvbWF0ZXJpYWwtdWkvZ3VpZGVzL2xvY2FsaXphdGlvbi8pLlxuICAgKiBAZGVmYXVsdCAnTm8gb3B0aW9ucydcbiAgICovXG4gIG5vT3B0aW9uc1RleHQ6IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgdmFsdWUgY2hhbmdlcy5cbiAgICpcbiAgICogQHBhcmFtIHtSZWFjdC5TeW50aGV0aWNFdmVudH0gZXZlbnQgVGhlIGV2ZW50IHNvdXJjZSBvZiB0aGUgY2FsbGJhY2suXG4gICAqIEBwYXJhbSB7VmFsdWV8VmFsdWVbXX0gdmFsdWUgVGhlIG5ldyB2YWx1ZSBvZiB0aGUgY29tcG9uZW50LlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcmVhc29uIE9uZSBvZiBcImNyZWF0ZU9wdGlvblwiLCBcInNlbGVjdE9wdGlvblwiLCBcInJlbW92ZU9wdGlvblwiLCBcImJsdXJcIiBvciBcImNsZWFyXCIuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbZGV0YWlsc11cbiAgICovXG4gIG9uQ2hhbmdlOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIHBvcHVwIHJlcXVlc3RzIHRvIGJlIGNsb3NlZC5cbiAgICogVXNlIGluIGNvbnRyb2xsZWQgbW9kZSAoc2VlIG9wZW4pLlxuICAgKlxuICAgKiBAcGFyYW0ge1JlYWN0LlN5bnRoZXRpY0V2ZW50fSBldmVudCBUaGUgZXZlbnQgc291cmNlIG9mIHRoZSBjYWxsYmFjay5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHJlYXNvbiBDYW4gYmU6IGBcInRvZ2dsZUlucHV0XCJgLCBgXCJlc2NhcGVcImAsIGBcInNlbGVjdE9wdGlvblwiYCwgYFwicmVtb3ZlT3B0aW9uXCJgLCBgXCJibHVyXCJgLlxuICAgKi9cbiAgb25DbG9zZTogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSBoaWdobGlnaHQgb3B0aW9uIGNoYW5nZXMuXG4gICAqXG4gICAqIEBwYXJhbSB7UmVhY3QuU3ludGhldGljRXZlbnR9IGV2ZW50IFRoZSBldmVudCBzb3VyY2Ugb2YgdGhlIGNhbGxiYWNrLlxuICAgKiBAcGFyYW0ge1ZhbHVlfSBvcHRpb24gVGhlIGhpZ2hsaWdodGVkIG9wdGlvbi5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHJlYXNvbiBDYW4gYmU6IGBcImtleWJvYXJkXCJgLCBgXCJhdXRvXCJgLCBgXCJtb3VzZVwiYCwgYFwidG91Y2hcImAuXG4gICAqL1xuICBvbkhpZ2hsaWdodENoYW5nZTogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSBpbnB1dCB2YWx1ZSBjaGFuZ2VzLlxuICAgKlxuICAgKiBAcGFyYW0ge1JlYWN0LlN5bnRoZXRpY0V2ZW50fSBldmVudCBUaGUgZXZlbnQgc291cmNlIG9mIHRoZSBjYWxsYmFjay5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlIFRoZSBuZXcgdmFsdWUgb2YgdGhlIHRleHQgaW5wdXQuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSByZWFzb24gQ2FuIGJlOiBgXCJpbnB1dFwiYCAodXNlciBpbnB1dCksIGBcInJlc2V0XCJgIChwcm9ncmFtbWF0aWMgY2hhbmdlKSwgYFwiY2xlYXJcImAuXG4gICAqL1xuICBvbklucHV0Q2hhbmdlOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uS2V5RG93bjogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSBwb3B1cCByZXF1ZXN0cyB0byBiZSBvcGVuZWQuXG4gICAqIFVzZSBpbiBjb250cm9sbGVkIG1vZGUgKHNlZSBvcGVuKS5cbiAgICpcbiAgICogQHBhcmFtIHtSZWFjdC5TeW50aGV0aWNFdmVudH0gZXZlbnQgVGhlIGV2ZW50IHNvdXJjZSBvZiB0aGUgY2FsbGJhY2suXG4gICAqL1xuICBvbk9wZW46IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgY29tcG9uZW50IGlzIHNob3duLlxuICAgKi9cbiAgb3BlbjogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBwb3B1cCB3aWxsIG9wZW4gb24gaW5wdXQgZm9jdXMuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBvcGVuT25Gb2N1czogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBPdmVycmlkZSB0aGUgZGVmYXVsdCB0ZXh0IGZvciB0aGUgKm9wZW4gcG9wdXAqIGljb24gYnV0dG9uLlxuICAgKlxuICAgKiBGb3IgbG9jYWxpemF0aW9uIHB1cnBvc2VzLCB5b3UgY2FuIHVzZSB0aGUgcHJvdmlkZWQgW3RyYW5zbGF0aW9uc10oL21hdGVyaWFsLXVpL2d1aWRlcy9sb2NhbGl6YXRpb24vKS5cbiAgICogQGRlZmF1bHQgJ09wZW4nXG4gICAqL1xuICBvcGVuVGV4dDogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIEFycmF5IG9mIG9wdGlvbnMuXG4gICAqL1xuICBvcHRpb25zOiBQcm9wVHlwZXMuYXJyYXkuaXNSZXF1aXJlZCxcbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCB0byByZW5kZXIgdGhlIGJvZHkgb2YgdGhlIHBvcHVwLlxuICAgKiBAZGVmYXVsdCBQYXBlclxuICAgKi9cbiAgUGFwZXJDb21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCB0byBwb3NpdGlvbiB0aGUgcG9wdXAuXG4gICAqIEBkZWZhdWx0IFBvcHBlclxuICAgKi9cbiAgUG9wcGVyQ29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG4gIC8qKlxuICAgKiBUaGUgaWNvbiB0byBkaXNwbGF5IGluIHBsYWNlIG9mIHRoZSBkZWZhdWx0IHBvcHVwIGljb24uXG4gICAqIEBkZWZhdWx0IDxBcnJvd0Ryb3BEb3duSWNvbiAvPlxuICAgKi9cbiAgcG9wdXBJY29uOiBQcm9wVHlwZXMubm9kZSxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGNvbXBvbmVudCBiZWNvbWVzIHJlYWRvbmx5LiBJdCBpcyBhbHNvIHN1cHBvcnRlZCBmb3IgbXVsdGlwbGUgdGFncyB3aGVyZSB0aGUgdGFnIGNhbm5vdCBiZSBkZWxldGVkLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgcmVhZE9ubHk6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogUmVuZGVyIHRoZSBncm91cC5cbiAgICpcbiAgICogQHBhcmFtIHtBdXRvY29tcGxldGVSZW5kZXJHcm91cFBhcmFtc30gcGFyYW1zIFRoZSBncm91cCB0byByZW5kZXIuXG4gICAqIEByZXR1cm5zIHtSZWFjdE5vZGV9XG4gICAqL1xuICByZW5kZXJHcm91cDogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBSZW5kZXIgdGhlIGlucHV0LlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gcGFyYW1zXG4gICAqIEByZXR1cm5zIHtSZWFjdE5vZGV9XG4gICAqL1xuICByZW5kZXJJbnB1dDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgLyoqXG4gICAqIFJlbmRlciB0aGUgb3B0aW9uLCB1c2UgYGdldE9wdGlvbkxhYmVsYCBieSBkZWZhdWx0LlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gcHJvcHMgVGhlIHByb3BzIHRvIGFwcGx5IG9uIHRoZSBsaSBlbGVtZW50LlxuICAgKiBAcGFyYW0ge1ZhbHVlfSBvcHRpb24gVGhlIG9wdGlvbiB0byByZW5kZXIuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBzdGF0ZSBUaGUgc3RhdGUgb2YgZWFjaCBvcHRpb24uXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBvd25lclN0YXRlIFRoZSBzdGF0ZSBvZiB0aGUgQXV0b2NvbXBsZXRlIGNvbXBvbmVudC5cbiAgICogQHJldHVybnMge1JlYWN0Tm9kZX1cbiAgICovXG4gIHJlbmRlck9wdGlvbjogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBSZW5kZXIgdGhlIHNlbGVjdGVkIHZhbHVlLlxuICAgKlxuICAgKiBAcGFyYW0ge1ZhbHVlW119IHZhbHVlIFRoZSBgdmFsdWVgIHByb3ZpZGVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IGdldFRhZ1Byb3BzIEEgdGFnIHByb3BzIGdldHRlci5cbiAgICogQHBhcmFtIHtvYmplY3R9IG93bmVyU3RhdGUgVGhlIHN0YXRlIG9mIHRoZSBBdXRvY29tcGxldGUgY29tcG9uZW50LlxuICAgKiBAcmV0dXJucyB7UmVhY3ROb2RlfVxuICAgKi9cbiAgcmVuZGVyVGFnczogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBpbnB1dCdzIHRleHQgaXMgc2VsZWN0ZWQgb24gZm9jdXMuXG4gICAqIEl0IGhlbHBzIHRoZSB1c2VyIGNsZWFyIHRoZSBzZWxlY3RlZCB2YWx1ZS5cbiAgICogQGRlZmF1bHQgIXByb3BzLmZyZWVTb2xvXG4gICAqL1xuICBzZWxlY3RPbkZvY3VzOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIFRoZSBzaXplIG9mIHRoZSBjb21wb25lbnQuXG4gICAqIEBkZWZhdWx0ICdtZWRpdW0nXG4gICAqL1xuICBzaXplOiBQcm9wVHlwZXMgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqLy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ3NtYWxsJywgJ21lZGl1bSddKSwgUHJvcFR5cGVzLnN0cmluZ10pLFxuICAvKipcbiAgICogVGhlIHByb3BzIHVzZWQgZm9yIGVhY2ggc2xvdCBpbnNpZGUuXG4gICAqIEBkZWZhdWx0IHt9XG4gICAqL1xuICBzbG90UHJvcHM6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgY2xlYXJJbmRpY2F0b3I6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgcGFwZXI6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgcG9wcGVyOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIHBvcHVwSW5kaWNhdG9yOiBQcm9wVHlwZXMub2JqZWN0XG4gIH0pLFxuICAvKipcbiAgICogVGhlIHN5c3RlbSBwcm9wIHRoYXQgYWxsb3dzIGRlZmluaW5nIHN5c3RlbSBvdmVycmlkZXMgYXMgd2VsbCBhcyBhZGRpdGlvbmFsIENTUyBzdHlsZXMuXG4gICAqL1xuICBzeDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5ib29sXSkpLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pLFxuICAvKipcbiAgICogVGhlIHZhbHVlIG9mIHRoZSBhdXRvY29tcGxldGUuXG4gICAqXG4gICAqIFRoZSB2YWx1ZSBtdXN0IGhhdmUgcmVmZXJlbmNlIGVxdWFsaXR5IHdpdGggdGhlIG9wdGlvbiBpbiBvcmRlciB0byBiZSBzZWxlY3RlZC5cbiAgICogWW91IGNhbiBjdXN0b21pemUgdGhlIGVxdWFsaXR5IGJlaGF2aW9yIHdpdGggdGhlIGBpc09wdGlvbkVxdWFsVG9WYWx1ZWAgcHJvcC5cbiAgICovXG4gIHZhbHVlOiBjaGFpblByb3BUeXBlcyhQcm9wVHlwZXMuYW55LCBwcm9wcyA9PiB7XG4gICAgaWYgKHByb3BzLm11bHRpcGxlICYmIHByb3BzLnZhbHVlICE9PSB1bmRlZmluZWQgJiYgIUFycmF5LmlzQXJyYXkocHJvcHMudmFsdWUpKSB7XG4gICAgICByZXR1cm4gbmV3IEVycm9yKFsnTVVJOiBUaGUgQXV0b2NvbXBsZXRlIGV4cGVjdHMgdGhlIGB2YWx1ZWAgcHJvcCB0byBiZSBhbiBhcnJheSB3aGVuIGBtdWx0aXBsZT17dHJ1ZX1gIG9yIHVuZGVmaW5lZC4nLCBgSG93ZXZlciwgJHtwcm9wcy52YWx1ZX0gd2FzIHByb3ZpZGVkLmBdLmpvaW4oJ1xcbicpKTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH0pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgQXV0b2NvbXBsZXRlOyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNyZWF0ZVN2Z0ljb24gZnJvbSAnLi4vLi4vdXRpbHMvY3JlYXRlU3ZnSWNvbic7XG5cbi8qKlxuICogQGlnbm9yZSAtIGludGVybmFsIGNvbXBvbmVudC5cbiAqL1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZVN2Z0ljb24oIC8qI19fUFVSRV9fKi9fanN4KFwicGF0aFwiLCB7XG4gIGQ6IFwiTTEyIDEyYzIuMjEgMCA0LTEuNzkgNC00cy0xLjc5LTQtNC00LTQgMS43OS00IDQgMS43OSA0IDQgNHptMCAyYy0yLjY3IDAtOCAxLjM0LTggNHYyaDE2di0yYzAtMi42Ni01LjMzLTQtOC00elwiXG59KSwgJ1BlcnNvbicpOyIsImltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3Nlcyc7XG5pbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3MgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzcyc7XG5leHBvcnQgZnVuY3Rpb24gZ2V0QXZhdGFyVXRpbGl0eUNsYXNzKHNsb3QpIHtcbiAgcmV0dXJuIGdlbmVyYXRlVXRpbGl0eUNsYXNzKCdNdWlBdmF0YXInLCBzbG90KTtcbn1cbmNvbnN0IGF2YXRhckNsYXNzZXMgPSBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzKCdNdWlBdmF0YXInLCBbJ3Jvb3QnLCAnY29sb3JEZWZhdWx0JywgJ2NpcmN1bGFyJywgJ3JvdW5kZWQnLCAnc3F1YXJlJywgJ2ltZycsICdmYWxsYmFjayddKTtcbmV4cG9ydCBkZWZhdWx0IGF2YXRhckNsYXNzZXM7IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiYWx0XCIsIFwiY2hpbGRyZW5cIiwgXCJjbGFzc05hbWVcIiwgXCJjb21wb25lbnRcIiwgXCJzbG90c1wiLCBcInNsb3RQcm9wc1wiLCBcImltZ1Byb3BzXCIsIFwic2l6ZXNcIiwgXCJzcmNcIiwgXCJzcmNTZXRcIiwgXCJ2YXJpYW50XCJdO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IGNvbXBvc2VDbGFzc2VzIGZyb20gJ0BtdWkvdXRpbHMvY29tcG9zZUNsYXNzZXMnO1xuaW1wb3J0IHsgc3R5bGVkIH0gZnJvbSAnLi4vemVyby1zdHlsZWQnO1xuaW1wb3J0IHsgdXNlRGVmYXVsdFByb3BzIH0gZnJvbSAnLi4vRGVmYXVsdFByb3BzUHJvdmlkZXInO1xuaW1wb3J0IFBlcnNvbiBmcm9tICcuLi9pbnRlcm5hbC9zdmctaWNvbnMvUGVyc29uJztcbmltcG9ydCB7IGdldEF2YXRhclV0aWxpdHlDbGFzcyB9IGZyb20gJy4vYXZhdGFyQ2xhc3Nlcyc7XG5pbXBvcnQgdXNlU2xvdCBmcm9tICcuLi91dGlscy91c2VTbG90JztcbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5jb25zdCB1c2VVdGlsaXR5Q2xhc3NlcyA9IG93bmVyU3RhdGUgPT4ge1xuICBjb25zdCB7XG4gICAgY2xhc3NlcyxcbiAgICB2YXJpYW50LFxuICAgIGNvbG9yRGVmYXVsdFxuICB9ID0gb3duZXJTdGF0ZTtcbiAgY29uc3Qgc2xvdHMgPSB7XG4gICAgcm9vdDogWydyb290JywgdmFyaWFudCwgY29sb3JEZWZhdWx0ICYmICdjb2xvckRlZmF1bHQnXSxcbiAgICBpbWc6IFsnaW1nJ10sXG4gICAgZmFsbGJhY2s6IFsnZmFsbGJhY2snXVxuICB9O1xuICByZXR1cm4gY29tcG9zZUNsYXNzZXMoc2xvdHMsIGdldEF2YXRhclV0aWxpdHlDbGFzcywgY2xhc3Nlcyk7XG59O1xuY29uc3QgQXZhdGFyUm9vdCA9IHN0eWxlZCgnZGl2Jywge1xuICBuYW1lOiAnTXVpQXZhdGFyJyxcbiAgc2xvdDogJ1Jvb3QnLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBvd25lclN0YXRlXG4gICAgfSA9IHByb3BzO1xuICAgIHJldHVybiBbc3R5bGVzLnJvb3QsIHN0eWxlc1tvd25lclN0YXRlLnZhcmlhbnRdLCBvd25lclN0YXRlLmNvbG9yRGVmYXVsdCAmJiBzdHlsZXMuY29sb3JEZWZhdWx0XTtcbiAgfVxufSkoKHtcbiAgdGhlbWVcbn0pID0+ICh7XG4gIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICBkaXNwbGF5OiAnZmxleCcsXG4gIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICBqdXN0aWZ5Q29udGVudDogJ2NlbnRlcicsXG4gIGZsZXhTaHJpbms6IDAsXG4gIHdpZHRoOiA0MCxcbiAgaGVpZ2h0OiA0MCxcbiAgZm9udEZhbWlseTogdGhlbWUudHlwb2dyYXBoeS5mb250RmFtaWx5LFxuICBmb250U2l6ZTogdGhlbWUudHlwb2dyYXBoeS5weFRvUmVtKDIwKSxcbiAgbGluZUhlaWdodDogMSxcbiAgYm9yZGVyUmFkaXVzOiAnNTAlJyxcbiAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxuICB1c2VyU2VsZWN0OiAnbm9uZScsXG4gIHZhcmlhbnRzOiBbe1xuICAgIHByb3BzOiB7XG4gICAgICB2YXJpYW50OiAncm91bmRlZCdcbiAgICB9LFxuICAgIHN0eWxlOiB7XG4gICAgICBib3JkZXJSYWRpdXM6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5zaGFwZS5ib3JkZXJSYWRpdXNcbiAgICB9XG4gIH0sIHtcbiAgICBwcm9wczoge1xuICAgICAgdmFyaWFudDogJ3NxdWFyZSdcbiAgICB9LFxuICAgIHN0eWxlOiB7XG4gICAgICBib3JkZXJSYWRpdXM6IDBcbiAgICB9XG4gIH0sIHtcbiAgICBwcm9wczoge1xuICAgICAgY29sb3JEZWZhdWx0OiB0cnVlXG4gICAgfSxcbiAgICBzdHlsZTogX2V4dGVuZHMoe1xuICAgICAgY29sb3I6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlLmJhY2tncm91bmQuZGVmYXVsdFxuICAgIH0sIHRoZW1lLnZhcnMgPyB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnZhcnMucGFsZXR0ZS5BdmF0YXIuZGVmYXVsdEJnXG4gICAgfSA6IF9leHRlbmRzKHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFsZXR0ZS5ncmV5WzQwMF1cbiAgICB9LCB0aGVtZS5hcHBseVN0eWxlcygnZGFyaycsIHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFsZXR0ZS5ncmV5WzYwMF1cbiAgICB9KSkpXG4gIH1dXG59KSk7XG5jb25zdCBBdmF0YXJJbWcgPSBzdHlsZWQoJ2ltZycsIHtcbiAgbmFtZTogJ011aUF2YXRhcicsXG4gIHNsb3Q6ICdJbWcnLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHN0eWxlcy5pbWdcbn0pKHtcbiAgd2lkdGg6ICcxMDAlJyxcbiAgaGVpZ2h0OiAnMTAwJScsXG4gIHRleHRBbGlnbjogJ2NlbnRlcicsXG4gIC8vIEhhbmRsZSBub24tc3F1YXJlIGltYWdlLiBUaGUgcHJvcGVydHkgaXNuJ3Qgc3VwcG9ydGVkIGJ5IElFMTEuXG4gIG9iamVjdEZpdDogJ2NvdmVyJyxcbiAgLy8gSGlkZSBhbHQgdGV4dC5cbiAgY29sb3I6ICd0cmFuc3BhcmVudCcsXG4gIC8vIEhpZGUgdGhlIGltYWdlIGJyb2tlbiBpY29uLCBvbmx5IHdvcmtzIG9uIENocm9tZS5cbiAgdGV4dEluZGVudDogMTAwMDBcbn0pO1xuY29uc3QgQXZhdGFyRmFsbGJhY2sgPSBzdHlsZWQoUGVyc29uLCB7XG4gIG5hbWU6ICdNdWlBdmF0YXInLFxuICBzbG90OiAnRmFsbGJhY2snLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHN0eWxlcy5mYWxsYmFja1xufSkoe1xuICB3aWR0aDogJzc1JScsXG4gIGhlaWdodDogJzc1JSdcbn0pO1xuZnVuY3Rpb24gdXNlTG9hZGVkKHtcbiAgY3Jvc3NPcmlnaW4sXG4gIHJlZmVycmVyUG9saWN5LFxuICBzcmMsXG4gIHNyY1NldFxufSkge1xuICBjb25zdCBbbG9hZGVkLCBzZXRMb2FkZWRdID0gUmVhY3QudXNlU3RhdGUoZmFsc2UpO1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmICghc3JjICYmICFzcmNTZXQpIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIHNldExvYWRlZChmYWxzZSk7XG4gICAgbGV0IGFjdGl2ZSA9IHRydWU7XG4gICAgY29uc3QgaW1hZ2UgPSBuZXcgSW1hZ2UoKTtcbiAgICBpbWFnZS5vbmxvYWQgPSAoKSA9PiB7XG4gICAgICBpZiAoIWFjdGl2ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBzZXRMb2FkZWQoJ2xvYWRlZCcpO1xuICAgIH07XG4gICAgaW1hZ2Uub25lcnJvciA9ICgpID0+IHtcbiAgICAgIGlmICghYWN0aXZlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHNldExvYWRlZCgnZXJyb3InKTtcbiAgICB9O1xuICAgIGltYWdlLmNyb3NzT3JpZ2luID0gY3Jvc3NPcmlnaW47XG4gICAgaW1hZ2UucmVmZXJyZXJQb2xpY3kgPSByZWZlcnJlclBvbGljeTtcbiAgICBpbWFnZS5zcmMgPSBzcmM7XG4gICAgaWYgKHNyY1NldCkge1xuICAgICAgaW1hZ2Uuc3Jjc2V0ID0gc3JjU2V0O1xuICAgIH1cbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgYWN0aXZlID0gZmFsc2U7XG4gICAgfTtcbiAgfSwgW2Nyb3NzT3JpZ2luLCByZWZlcnJlclBvbGljeSwgc3JjLCBzcmNTZXRdKTtcbiAgcmV0dXJuIGxvYWRlZDtcbn1cbmNvbnN0IEF2YXRhciA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIEF2YXRhcihpblByb3BzLCByZWYpIHtcbiAgY29uc3QgcHJvcHMgPSB1c2VEZWZhdWx0UHJvcHMoe1xuICAgIHByb3BzOiBpblByb3BzLFxuICAgIG5hbWU6ICdNdWlBdmF0YXInXG4gIH0pO1xuICBjb25zdCB7XG4gICAgICBhbHQsXG4gICAgICBjaGlsZHJlbjogY2hpbGRyZW5Qcm9wLFxuICAgICAgY2xhc3NOYW1lLFxuICAgICAgY29tcG9uZW50ID0gJ2RpdicsXG4gICAgICBzbG90cyA9IHt9LFxuICAgICAgc2xvdFByb3BzID0ge30sXG4gICAgICBpbWdQcm9wcyxcbiAgICAgIHNpemVzLFxuICAgICAgc3JjLFxuICAgICAgc3JjU2V0LFxuICAgICAgdmFyaWFudCA9ICdjaXJjdWxhcidcbiAgICB9ID0gcHJvcHMsXG4gICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkKTtcbiAgbGV0IGNoaWxkcmVuID0gbnVsbDtcblxuICAvLyBVc2UgYSBob29rIGluc3RlYWQgb2Ygb25FcnJvciBvbiB0aGUgaW1nIGVsZW1lbnQgdG8gc3VwcG9ydCBzZXJ2ZXItc2lkZSByZW5kZXJpbmcuXG4gIGNvbnN0IGxvYWRlZCA9IHVzZUxvYWRlZChfZXh0ZW5kcyh7fSwgaW1nUHJvcHMsIHtcbiAgICBzcmMsXG4gICAgc3JjU2V0XG4gIH0pKTtcbiAgY29uc3QgaGFzSW1nID0gc3JjIHx8IHNyY1NldDtcbiAgY29uc3QgaGFzSW1nTm90RmFpbGluZyA9IGhhc0ltZyAmJiBsb2FkZWQgIT09ICdlcnJvcic7XG4gIGNvbnN0IG93bmVyU3RhdGUgPSBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICBjb2xvckRlZmF1bHQ6ICFoYXNJbWdOb3RGYWlsaW5nLFxuICAgIGNvbXBvbmVudCxcbiAgICB2YXJpYW50XG4gIH0pO1xuICBjb25zdCBjbGFzc2VzID0gdXNlVXRpbGl0eUNsYXNzZXMob3duZXJTdGF0ZSk7XG4gIGNvbnN0IFtJbWdTbG90LCBpbWdTbG90UHJvcHNdID0gdXNlU2xvdCgnaW1nJywge1xuICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5pbWcsXG4gICAgZWxlbWVudFR5cGU6IEF2YXRhckltZyxcbiAgICBleHRlcm5hbEZvcndhcmRlZFByb3BzOiB7XG4gICAgICBzbG90cyxcbiAgICAgIHNsb3RQcm9wczoge1xuICAgICAgICBpbWc6IF9leHRlbmRzKHt9LCBpbWdQcm9wcywgc2xvdFByb3BzLmltZylcbiAgICAgIH1cbiAgICB9LFxuICAgIGFkZGl0aW9uYWxQcm9wczoge1xuICAgICAgYWx0LFxuICAgICAgc3JjLFxuICAgICAgc3JjU2V0LFxuICAgICAgc2l6ZXNcbiAgICB9LFxuICAgIG93bmVyU3RhdGVcbiAgfSk7XG4gIGlmIChoYXNJbWdOb3RGYWlsaW5nKSB7XG4gICAgY2hpbGRyZW4gPSAvKiNfX1BVUkVfXyovX2pzeChJbWdTbG90LCBfZXh0ZW5kcyh7fSwgaW1nU2xvdFByb3BzKSk7XG4gICAgLy8gV2Ugb25seSByZW5kZXIgdmFsaWQgY2hpbGRyZW4sIG5vbiB2YWxpZCBjaGlsZHJlbiBhcmUgcmVuZGVyZWQgd2l0aCBhIGZhbGxiYWNrXG4gICAgLy8gV2UgY29uc2lkZXIgdGhhdCBpbnZhbGlkIGNoaWxkcmVuIGFyZSBhbGwgZmFsc3kgdmFsdWVzLCBleGNlcHQgMCwgd2hpY2ggaXMgdmFsaWQuXG4gIH0gZWxzZSBpZiAoISFjaGlsZHJlblByb3AgfHwgY2hpbGRyZW5Qcm9wID09PSAwKSB7XG4gICAgY2hpbGRyZW4gPSBjaGlsZHJlblByb3A7XG4gIH0gZWxzZSBpZiAoaGFzSW1nICYmIGFsdCkge1xuICAgIGNoaWxkcmVuID0gYWx0WzBdO1xuICB9IGVsc2Uge1xuICAgIGNoaWxkcmVuID0gLyojX19QVVJFX18qL19qc3goQXZhdGFyRmFsbGJhY2ssIHtcbiAgICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGUsXG4gICAgICBjbGFzc05hbWU6IGNsYXNzZXMuZmFsbGJhY2tcbiAgICB9KTtcbiAgfVxuICByZXR1cm4gLyojX19QVVJFX18qL19qc3goQXZhdGFyUm9vdCwgX2V4dGVuZHMoe1xuICAgIGFzOiBjb21wb25lbnQsXG4gICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZSxcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWUpLFxuICAgIHJlZjogcmVmXG4gIH0sIG90aGVyLCB7XG4gICAgY2hpbGRyZW46IGNoaWxkcmVuXG4gIH0pKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gQXZhdGFyLnByb3BUeXBlcyAvKiByZW1vdmUtcHJvcHR5cGVzICovID0ge1xuICAvLyDilIzilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIAgV2FybmluZyDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJBcbiAgLy8g4pSCIFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucy4g4pSCXG4gIC8vIOKUgiAgICBUbyB1cGRhdGUgdGhlbSwgZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gYHBucG0gcHJvcHR5cGVzYC4gICAgIOKUglxuICAvLyDilJTilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJhcbiAgLyoqXG4gICAqIFVzZWQgaW4gY29tYmluYXRpb24gd2l0aCBgc3JjYCBvciBgc3JjU2V0YCB0b1xuICAgKiBwcm92aWRlIGFuIGFsdCBhdHRyaWJ1dGUgZm9yIHRoZSByZW5kZXJlZCBgaW1nYCBlbGVtZW50LlxuICAgKi9cbiAgYWx0OiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogVXNlZCB0byByZW5kZXIgaWNvbiBvciB0ZXh0IGVsZW1lbnRzIGluc2lkZSB0aGUgQXZhdGFyIGlmIGBzcmNgIGlzIG5vdCBzZXQuXG4gICAqIFRoaXMgY2FuIGJlIGFuIGVsZW1lbnQsIG9yIGp1c3QgYSBzdHJpbmcuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgcm9vdCBub2RlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgSFRNTCBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKi9cbiAgY29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG4gIC8qKlxuICAgKiBbQXR0cmlidXRlc10oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRNTC9FbGVtZW50L2ltZyNhdHRyaWJ1dGVzKSBhcHBsaWVkIHRvIHRoZSBgaW1nYCBlbGVtZW50IGlmIHRoZSBjb21wb25lbnQgaXMgdXNlZCB0byBkaXNwbGF5IGFuIGltYWdlLlxuICAgKiBJdCBjYW4gYmUgdXNlZCB0byBsaXN0ZW4gZm9yIHRoZSBsb2FkaW5nIGVycm9yIGV2ZW50LlxuICAgKiBAZGVwcmVjYXRlZCBVc2UgYHNsb3RQcm9wcy5pbWdgIGluc3RlYWQuIFRoaXMgcHJvcCB3aWxsIGJlIHJlbW92ZWQgaW4gdjcuIFtIb3cgdG8gbWlncmF0ZV0oL21hdGVyaWFsLXVpL21pZ3JhdGlvbi9taWdyYXRpbmctZnJvbS1kZXByZWNhdGVkLWFwaXMvKS5cbiAgICovXG4gIGltZ1Byb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogVGhlIGBzaXplc2AgYXR0cmlidXRlIGZvciB0aGUgYGltZ2AgZWxlbWVudC5cbiAgICovXG4gIHNpemVzOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogVGhlIHByb3BzIHVzZWQgZm9yIGVhY2ggc2xvdCBpbnNpZGUuXG4gICAqIEBkZWZhdWx0IHt9XG4gICAqL1xuICBzbG90UHJvcHM6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgaW1nOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pXG4gIH0pLFxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudHMgdXNlZCBmb3IgZWFjaCBzbG90IGluc2lkZS5cbiAgICogQGRlZmF1bHQge31cbiAgICovXG4gIHNsb3RzOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGltZzogUHJvcFR5cGVzLmVsZW1lbnRUeXBlXG4gIH0pLFxuICAvKipcbiAgICogVGhlIGBzcmNgIGF0dHJpYnV0ZSBmb3IgdGhlIGBpbWdgIGVsZW1lbnQuXG4gICAqL1xuICBzcmM6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBUaGUgYHNyY1NldGAgYXR0cmlidXRlIGZvciB0aGUgYGltZ2AgZWxlbWVudC5cbiAgICogVXNlIHRoaXMgYXR0cmlidXRlIGZvciByZXNwb25zaXZlIGltYWdlIGRpc3BsYXkuXG4gICAqL1xuICBzcmNTZXQ6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBUaGUgc3lzdGVtIHByb3AgdGhhdCBhbGxvd3MgZGVmaW5pbmcgc3lzdGVtIG92ZXJyaWRlcyBhcyB3ZWxsIGFzIGFkZGl0aW9uYWwgQ1NTIHN0eWxlcy5cbiAgICovXG4gIHN4OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLmJvb2xdKSksIFByb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSksXG4gIC8qKlxuICAgKiBUaGUgc2hhcGUgb2YgdGhlIGF2YXRhci5cbiAgICogQGRlZmF1bHQgJ2NpcmN1bGFyJ1xuICAgKi9cbiAgdmFyaWFudDogUHJvcFR5cGVzIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi8ub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydjaXJjdWxhcicsICdyb3VuZGVkJywgJ3NxdWFyZSddKSwgUHJvcFR5cGVzLnN0cmluZ10pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgQXZhdGFyOyIsImltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3Nlcyc7XG5pbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3MgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzcyc7XG5leHBvcnQgZnVuY3Rpb24gZ2V0QXZhdGFyR3JvdXBVdGlsaXR5Q2xhc3Moc2xvdCkge1xuICByZXR1cm4gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoJ011aUF2YXRhckdyb3VwJywgc2xvdCk7XG59XG5jb25zdCBhdmF0YXJHcm91cENsYXNzZXMgPSBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzKCdNdWlBdmF0YXJHcm91cCcsIFsncm9vdCcsICdhdmF0YXInXSk7XG5leHBvcnQgZGVmYXVsdCBhdmF0YXJHcm91cENsYXNzZXM7IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiY2hpbGRyZW5cIiwgXCJjbGFzc05hbWVcIiwgXCJjb21wb25lbnRcIiwgXCJjb21wb25lbnRzUHJvcHNcIiwgXCJtYXhcIiwgXCJyZW5kZXJTdXJwbHVzXCIsIFwic2xvdFByb3BzXCIsIFwic3BhY2luZ1wiLCBcInRvdGFsXCIsIFwidmFyaWFudFwiXTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBpc0ZyYWdtZW50IH0gZnJvbSAncmVhY3QtaXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgY2hhaW5Qcm9wVHlwZXMgZnJvbSAnQG11aS91dGlscy9jaGFpblByb3BUeXBlcyc7XG5pbXBvcnQgY29tcG9zZUNsYXNzZXMgZnJvbSAnQG11aS91dGlscy9jb21wb3NlQ2xhc3Nlcyc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJy4uL3N0eWxlcy9zdHlsZWQnO1xuaW1wb3J0IHsgdXNlRGVmYXVsdFByb3BzIH0gZnJvbSAnLi4vRGVmYXVsdFByb3BzUHJvdmlkZXInO1xuaW1wb3J0IEF2YXRhciwgeyBhdmF0YXJDbGFzc2VzIH0gZnJvbSAnLi4vQXZhdGFyJztcbmltcG9ydCBhdmF0YXJHcm91cENsYXNzZXMsIHsgZ2V0QXZhdGFyR3JvdXBVdGlsaXR5Q2xhc3MgfSBmcm9tICcuL2F2YXRhckdyb3VwQ2xhc3Nlcyc7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuaW1wb3J0IHsganN4cyBhcyBfanN4cyB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuY29uc3QgU1BBQ0lOR1MgPSB7XG4gIHNtYWxsOiAtMTYsXG4gIG1lZGl1bTogbnVsbFxufTtcbmNvbnN0IHVzZVV0aWxpdHlDbGFzc2VzID0gb3duZXJTdGF0ZSA9PiB7XG4gIGNvbnN0IHtcbiAgICBjbGFzc2VzXG4gIH0gPSBvd25lclN0YXRlO1xuICBjb25zdCBzbG90cyA9IHtcbiAgICByb290OiBbJ3Jvb3QnXSxcbiAgICBhdmF0YXI6IFsnYXZhdGFyJ11cbiAgfTtcbiAgcmV0dXJuIGNvbXBvc2VDbGFzc2VzKHNsb3RzLCBnZXRBdmF0YXJHcm91cFV0aWxpdHlDbGFzcywgY2xhc3Nlcyk7XG59O1xuY29uc3QgQXZhdGFyR3JvdXBSb290ID0gc3R5bGVkKCdkaXYnLCB7XG4gIG5hbWU6ICdNdWlBdmF0YXJHcm91cCcsXG4gIHNsb3Q6ICdSb290JyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiBfZXh0ZW5kcyh7XG4gICAgW2AmIC4ke2F2YXRhckdyb3VwQ2xhc3Nlcy5hdmF0YXJ9YF06IHN0eWxlcy5hdmF0YXJcbiAgfSwgc3R5bGVzLnJvb3QpXG59KSgoe1xuICB0aGVtZSxcbiAgb3duZXJTdGF0ZVxufSkgPT4ge1xuICBjb25zdCBtYXJnaW5WYWx1ZSA9IG93bmVyU3RhdGUuc3BhY2luZyAmJiBTUEFDSU5HU1tvd25lclN0YXRlLnNwYWNpbmddICE9PSB1bmRlZmluZWQgPyBTUEFDSU5HU1tvd25lclN0YXRlLnNwYWNpbmddIDogLW93bmVyU3RhdGUuc3BhY2luZztcbiAgcmV0dXJuIHtcbiAgICBbYCYgLiR7YXZhdGFyQ2xhc3Nlcy5yb290fWBdOiB7XG4gICAgICBib3JkZXI6IGAycHggc29saWQgJHsodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZS5iYWNrZ3JvdW5kLmRlZmF1bHR9YCxcbiAgICAgIGJveFNpemluZzogJ2NvbnRlbnQtYm94JyxcbiAgICAgIG1hcmdpbkxlZnQ6IG1hcmdpblZhbHVlICE9IG51bGwgPyBtYXJnaW5WYWx1ZSA6IC04LFxuICAgICAgJyY6bGFzdC1jaGlsZCc6IHtcbiAgICAgICAgbWFyZ2luTGVmdDogMFxuICAgICAgfVxuICAgIH0sXG4gICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgIGZsZXhEaXJlY3Rpb246ICdyb3ctcmV2ZXJzZSdcbiAgfTtcbn0pO1xuY29uc3QgQXZhdGFyR3JvdXAgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBBdmF0YXJHcm91cChpblByb3BzLCByZWYpIHtcbiAgdmFyIF9zbG90UHJvcHMkYWRkaXRpb25hbDtcbiAgY29uc3QgcHJvcHMgPSB1c2VEZWZhdWx0UHJvcHMoe1xuICAgIHByb3BzOiBpblByb3BzLFxuICAgIG5hbWU6ICdNdWlBdmF0YXJHcm91cCdcbiAgfSk7XG4gIGNvbnN0IHtcbiAgICAgIGNoaWxkcmVuOiBjaGlsZHJlblByb3AsXG4gICAgICBjbGFzc05hbWUsXG4gICAgICBjb21wb25lbnQgPSAnZGl2JyxcbiAgICAgIGNvbXBvbmVudHNQcm9wcyA9IHt9LFxuICAgICAgbWF4ID0gNSxcbiAgICAgIHJlbmRlclN1cnBsdXMsXG4gICAgICBzbG90UHJvcHMgPSB7fSxcbiAgICAgIHNwYWNpbmcgPSAnbWVkaXVtJyxcbiAgICAgIHRvdGFsLFxuICAgICAgdmFyaWFudCA9ICdjaXJjdWxhcidcbiAgICB9ID0gcHJvcHMsXG4gICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkKTtcbiAgbGV0IGNsYW1wZWRNYXggPSBtYXggPCAyID8gMiA6IG1heDtcbiAgY29uc3Qgb3duZXJTdGF0ZSA9IF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgIG1heCxcbiAgICBzcGFjaW5nLFxuICAgIGNvbXBvbmVudCxcbiAgICB2YXJpYW50XG4gIH0pO1xuICBjb25zdCBjbGFzc2VzID0gdXNlVXRpbGl0eUNsYXNzZXMob3duZXJTdGF0ZSk7XG4gIGNvbnN0IGNoaWxkcmVuID0gUmVhY3QuQ2hpbGRyZW4udG9BcnJheShjaGlsZHJlblByb3ApLmZpbHRlcihjaGlsZCA9PiB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmIChpc0ZyYWdtZW50KGNoaWxkKSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFtcIk1VSTogVGhlIEF2YXRhckdyb3VwIGNvbXBvbmVudCBkb2Vzbid0IGFjY2VwdCBhIEZyYWdtZW50IGFzIGEgY2hpbGQuXCIsICdDb25zaWRlciBwcm92aWRpbmcgYW4gYXJyYXkgaW5zdGVhZC4nXS5qb2luKCdcXG4nKSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuaXNWYWxpZEVsZW1lbnQoY2hpbGQpO1xuICB9KTtcbiAgY29uc3QgdG90YWxBdmF0YXJzID0gdG90YWwgfHwgY2hpbGRyZW4ubGVuZ3RoO1xuICBpZiAodG90YWxBdmF0YXJzID09PSBjbGFtcGVkTWF4KSB7XG4gICAgY2xhbXBlZE1heCArPSAxO1xuICB9XG4gIGNsYW1wZWRNYXggPSBNYXRoLm1pbih0b3RhbEF2YXRhcnMgKyAxLCBjbGFtcGVkTWF4KTtcbiAgY29uc3QgbWF4QXZhdGFycyA9IE1hdGgubWluKGNoaWxkcmVuLmxlbmd0aCwgY2xhbXBlZE1heCAtIDEpO1xuICBjb25zdCBleHRyYUF2YXRhcnMgPSBNYXRoLm1heCh0b3RhbEF2YXRhcnMgLSBjbGFtcGVkTWF4LCB0b3RhbEF2YXRhcnMgLSBtYXhBdmF0YXJzLCAwKTtcbiAgY29uc3QgZXh0cmFBdmF0YXJzRWxlbWVudCA9IHJlbmRlclN1cnBsdXMgPyByZW5kZXJTdXJwbHVzKGV4dHJhQXZhdGFycykgOiBgKyR7ZXh0cmFBdmF0YXJzfWA7XG4gIGNvbnN0IGFkZGl0aW9uYWxBdmF0YXJTbG90UHJvcHMgPSAoX3Nsb3RQcm9wcyRhZGRpdGlvbmFsID0gc2xvdFByb3BzLmFkZGl0aW9uYWxBdmF0YXIpICE9IG51bGwgPyBfc2xvdFByb3BzJGFkZGl0aW9uYWwgOiBjb21wb25lbnRzUHJvcHMuYWRkaXRpb25hbEF2YXRhcjtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4cyhBdmF0YXJHcm91cFJvb3QsIF9leHRlbmRzKHtcbiAgICBhczogY29tcG9uZW50LFxuICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGUsXG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lKSxcbiAgICByZWY6IHJlZlxuICB9LCBvdGhlciwge1xuICAgIGNoaWxkcmVuOiBbZXh0cmFBdmF0YXJzID8gLyojX19QVVJFX18qL19qc3goQXZhdGFyLCBfZXh0ZW5kcyh7XG4gICAgICB2YXJpYW50OiB2YXJpYW50XG4gICAgfSwgYWRkaXRpb25hbEF2YXRhclNsb3RQcm9wcywge1xuICAgICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMuYXZhdGFyLCBhZGRpdGlvbmFsQXZhdGFyU2xvdFByb3BzID09IG51bGwgPyB2b2lkIDAgOiBhZGRpdGlvbmFsQXZhdGFyU2xvdFByb3BzLmNsYXNzTmFtZSksXG4gICAgICBjaGlsZHJlbjogZXh0cmFBdmF0YXJzRWxlbWVudFxuICAgIH0pKSA6IG51bGwsIGNoaWxkcmVuLnNsaWNlKDAsIG1heEF2YXRhcnMpLnJldmVyc2UoKS5tYXAoY2hpbGQgPT4ge1xuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jbG9uZUVsZW1lbnQoY2hpbGQsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBjbHN4KGNoaWxkLnByb3BzLmNsYXNzTmFtZSwgY2xhc3Nlcy5hdmF0YXIpLFxuICAgICAgICB2YXJpYW50OiBjaGlsZC5wcm9wcy52YXJpYW50IHx8IHZhcmlhbnRcbiAgICAgIH0pO1xuICAgIH0pXVxuICB9KSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IEF2YXRhckdyb3VwLnByb3BUeXBlcyAvKiByZW1vdmUtcHJvcHR5cGVzICovID0ge1xuICAvLyDilIzilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIAgV2FybmluZyDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJBcbiAgLy8g4pSCIFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucy4g4pSCXG4gIC8vIOKUgiAgICBUbyB1cGRhdGUgdGhlbSwgZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gYHBucG0gcHJvcHR5cGVzYC4gICAgIOKUglxuICAvLyDilJTilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJhcbiAgLyoqXG4gICAqIFRoZSBhdmF0YXJzIHRvIHN0YWNrLlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHJvb3Qgbm9kZS5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIEhUTUwgZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuICAvKipcbiAgICogVGhlIGV4dHJhIHByb3BzIGZvciB0aGUgc2xvdCBjb21wb25lbnRzLlxuICAgKiBZb3UgY2FuIG92ZXJyaWRlIHRoZSBleGlzdGluZyBwcm9wcyBvciBhZGQgbmV3IG9uZXMuXG4gICAqXG4gICAqIFRoaXMgcHJvcCBpcyBhbiBhbGlhcyBmb3IgdGhlIGBzbG90UHJvcHNgIHByb3AuXG4gICAqIEl0J3MgcmVjb21tZW5kZWQgdG8gdXNlIHRoZSBgc2xvdFByb3BzYCBwcm9wIGluc3RlYWQsIGFzIGBjb21wb25lbnRzUHJvcHNgIHdpbGwgYmUgZGVwcmVjYXRlZCBpbiB0aGUgZnV0dXJlLlxuICAgKlxuICAgKiBAZGVmYXVsdCB7fVxuICAgKi9cbiAgY29tcG9uZW50c1Byb3BzOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGFkZGl0aW9uYWxBdmF0YXI6IFByb3BUeXBlcy5vYmplY3RcbiAgfSksXG4gIC8qKlxuICAgKiBNYXggYXZhdGFycyB0byBzaG93IGJlZm9yZSAreC5cbiAgICogQGRlZmF1bHQgNVxuICAgKi9cbiAgbWF4OiBjaGFpblByb3BUeXBlcyhQcm9wVHlwZXMubnVtYmVyLCBwcm9wcyA9PiB7XG4gICAgaWYgKHByb3BzLm1heCA8IDIpIHtcbiAgICAgIHJldHVybiBuZXcgRXJyb3IoWydNVUk6IFRoZSBwcm9wIGBtYXhgIHNob3VsZCBiZSBlcXVhbCB0byAyIG9yIGFib3ZlLicsICdBIHZhbHVlIGJlbG93IGlzIGNsYW1wZWQgdG8gMi4nXS5qb2luKCdcXG4nKSk7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9KSxcbiAgLyoqXG4gICAqIGN1c3RvbSByZW5kZXJlciBvZiBleHRyYUF2YXRhcnNcbiAgICogQHBhcmFtIHtudW1iZXJ9IHN1cnBsdXMgbnVtYmVyIG9mIGV4dHJhIGF2YXRhcnNcbiAgICogQHJldHVybnMge1JlYWN0LlJlYWN0Tm9kZX0gY3VzdG9tIGVsZW1lbnQgdG8gZGlzcGxheVxuICAgKi9cbiAgcmVuZGVyU3VycGx1czogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBUaGUgZXh0cmEgcHJvcHMgZm9yIHRoZSBzbG90IGNvbXBvbmVudHMuXG4gICAqIFlvdSBjYW4gb3ZlcnJpZGUgdGhlIGV4aXN0aW5nIHByb3BzIG9yIGFkZCBuZXcgb25lcy5cbiAgICpcbiAgICogVGhpcyBwcm9wIGlzIGFuIGFsaWFzIGZvciB0aGUgYGNvbXBvbmVudHNQcm9wc2AgcHJvcCwgd2hpY2ggd2lsbCBiZSBkZXByZWNhdGVkIGluIHRoZSBmdXR1cmUuXG4gICAqXG4gICAqIEBkZWZhdWx0IHt9XG4gICAqL1xuICBzbG90UHJvcHM6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgYWRkaXRpb25hbEF2YXRhcjogUHJvcFR5cGVzLm9iamVjdFxuICB9KSxcbiAgLyoqXG4gICAqIFNwYWNpbmcgYmV0d2VlbiBhdmF0YXJzLlxuICAgKiBAZGVmYXVsdCAnbWVkaXVtJ1xuICAgKi9cbiAgc3BhY2luZzogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsnbWVkaXVtJywgJ3NtYWxsJ10pLCBQcm9wVHlwZXMubnVtYmVyXSksXG4gIC8qKlxuICAgKiBUaGUgc3lzdGVtIHByb3AgdGhhdCBhbGxvd3MgZGVmaW5pbmcgc3lzdGVtIG92ZXJyaWRlcyBhcyB3ZWxsIGFzIGFkZGl0aW9uYWwgQ1NTIHN0eWxlcy5cbiAgICovXG4gIHN4OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLmJvb2xdKSksIFByb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSksXG4gIC8qKlxuICAgKiBUaGUgdG90YWwgbnVtYmVyIG9mIGF2YXRhcnMuIFVzZWQgZm9yIGNhbGN1bGF0aW5nIHRoZSBudW1iZXIgb2YgZXh0cmEgYXZhdGFycy5cbiAgICogQGRlZmF1bHQgY2hpbGRyZW4ubGVuZ3RoXG4gICAqL1xuICB0b3RhbDogUHJvcFR5cGVzLm51bWJlcixcbiAgLyoqXG4gICAqIFRoZSB2YXJpYW50IHRvIHVzZS5cbiAgICogQGRlZmF1bHQgJ2NpcmN1bGFyJ1xuICAgKi9cbiAgdmFyaWFudDogUHJvcFR5cGVzIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi8ub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydjaXJjdWxhcicsICdyb3VuZGVkJywgJ3NxdWFyZSddKSwgUHJvcFR5cGVzLnN0cmluZ10pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgQXZhdGFyR3JvdXA7IiwiaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzc2VzJztcbmltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzJztcbmV4cG9ydCBmdW5jdGlvbiBnZXRCYWRnZVV0aWxpdHlDbGFzcyhzbG90KSB7XG4gIHJldHVybiBnZW5lcmF0ZVV0aWxpdHlDbGFzcygnTXVpQmFkZ2UnLCBzbG90KTtcbn1cbmNvbnN0IGJhZGdlQ2xhc3NlcyA9IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMoJ011aUJhZGdlJywgWydyb290JywgJ2JhZGdlJywgJ2RvdCcsICdzdGFuZGFyZCcsICdhbmNob3JPcmlnaW5Ub3BSaWdodCcsICdhbmNob3JPcmlnaW5Cb3R0b21SaWdodCcsICdhbmNob3JPcmlnaW5Ub3BMZWZ0JywgJ2FuY2hvck9yaWdpbkJvdHRvbUxlZnQnLCAnaW52aXNpYmxlJywgJ2NvbG9yRXJyb3InLCAnY29sb3JJbmZvJywgJ2NvbG9yUHJpbWFyeScsICdjb2xvclNlY29uZGFyeScsICdjb2xvclN1Y2Nlc3MnLCAnY29sb3JXYXJuaW5nJywgJ292ZXJsYXBSZWN0YW5ndWxhcicsICdvdmVybGFwQ2lyY3VsYXInLFxuLy8gVE9ETzogdjYgcmVtb3ZlIHRoZSBvdmVybGFwIHZhbHVlIGZyb20gdGhlc2UgY2xhc3Mga2V5c1xuJ2FuY2hvck9yaWdpblRvcExlZnRDaXJjdWxhcicsICdhbmNob3JPcmlnaW5Ub3BMZWZ0UmVjdGFuZ3VsYXInLCAnYW5jaG9yT3JpZ2luVG9wUmlnaHRDaXJjdWxhcicsICdhbmNob3JPcmlnaW5Ub3BSaWdodFJlY3Rhbmd1bGFyJywgJ2FuY2hvck9yaWdpbkJvdHRvbUxlZnRDaXJjdWxhcicsICdhbmNob3JPcmlnaW5Cb3R0b21MZWZ0UmVjdGFuZ3VsYXInLCAnYW5jaG9yT3JpZ2luQm90dG9tUmlnaHRDaXJjdWxhcicsICdhbmNob3JPcmlnaW5Cb3R0b21SaWdodFJlY3Rhbmd1bGFyJ10pO1xuZXhwb3J0IGRlZmF1bHQgYmFkZ2VDbGFzc2VzOyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImFuY2hvck9yaWdpblwiLCBcImNsYXNzTmFtZVwiLCBcImNsYXNzZXNcIiwgXCJjb21wb25lbnRcIiwgXCJjb21wb25lbnRzXCIsIFwiY29tcG9uZW50c1Byb3BzXCIsIFwiY2hpbGRyZW5cIiwgXCJvdmVybGFwXCIsIFwiY29sb3JcIiwgXCJpbnZpc2libGVcIiwgXCJtYXhcIiwgXCJiYWRnZUNvbnRlbnRcIiwgXCJzbG90c1wiLCBcInNsb3RQcm9wc1wiLCBcInNob3daZXJvXCIsIFwidmFyaWFudFwiXTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB1c2VQcmV2aW91c1Byb3BzIGZyb20gJ0BtdWkvdXRpbHMvdXNlUHJldmlvdXNQcm9wcyc7XG5pbXBvcnQgY29tcG9zZUNsYXNzZXMgZnJvbSAnQG11aS91dGlscy9jb21wb3NlQ2xhc3Nlcyc7XG5pbXBvcnQgdXNlU2xvdFByb3BzIGZyb20gJ0BtdWkvdXRpbHMvdXNlU2xvdFByb3BzJztcbmltcG9ydCB1c2VCYWRnZSBmcm9tICcuL3VzZUJhZGdlJztcbmltcG9ydCB7IHN0eWxlZCB9IGZyb20gJy4uL3plcm8tc3R5bGVkJztcbmltcG9ydCB7IHVzZURlZmF1bHRQcm9wcyB9IGZyb20gJy4uL0RlZmF1bHRQcm9wc1Byb3ZpZGVyJztcbmltcG9ydCBjYXBpdGFsaXplIGZyb20gJy4uL3V0aWxzL2NhcGl0YWxpemUnO1xuaW1wb3J0IGJhZGdlQ2xhc3NlcywgeyBnZXRCYWRnZVV0aWxpdHlDbGFzcyB9IGZyb20gJy4vYmFkZ2VDbGFzc2VzJztcbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5pbXBvcnQgeyBqc3hzIGFzIF9qc3hzIH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5jb25zdCBSQURJVVNfU1RBTkRBUkQgPSAxMDtcbmNvbnN0IFJBRElVU19ET1QgPSA0O1xuY29uc3QgdXNlVXRpbGl0eUNsYXNzZXMgPSBvd25lclN0YXRlID0+IHtcbiAgY29uc3Qge1xuICAgIGNvbG9yLFxuICAgIGFuY2hvck9yaWdpbixcbiAgICBpbnZpc2libGUsXG4gICAgb3ZlcmxhcCxcbiAgICB2YXJpYW50LFxuICAgIGNsYXNzZXMgPSB7fVxuICB9ID0gb3duZXJTdGF0ZTtcbiAgY29uc3Qgc2xvdHMgPSB7XG4gICAgcm9vdDogWydyb290J10sXG4gICAgYmFkZ2U6IFsnYmFkZ2UnLCB2YXJpYW50LCBpbnZpc2libGUgJiYgJ2ludmlzaWJsZScsIGBhbmNob3JPcmlnaW4ke2NhcGl0YWxpemUoYW5jaG9yT3JpZ2luLnZlcnRpY2FsKX0ke2NhcGl0YWxpemUoYW5jaG9yT3JpZ2luLmhvcml6b250YWwpfWAsIGBhbmNob3JPcmlnaW4ke2NhcGl0YWxpemUoYW5jaG9yT3JpZ2luLnZlcnRpY2FsKX0ke2NhcGl0YWxpemUoYW5jaG9yT3JpZ2luLmhvcml6b250YWwpfSR7Y2FwaXRhbGl6ZShvdmVybGFwKX1gLCBgb3ZlcmxhcCR7Y2FwaXRhbGl6ZShvdmVybGFwKX1gLCBjb2xvciAhPT0gJ2RlZmF1bHQnICYmIGBjb2xvciR7Y2FwaXRhbGl6ZShjb2xvcil9YF1cbiAgfTtcbiAgcmV0dXJuIGNvbXBvc2VDbGFzc2VzKHNsb3RzLCBnZXRCYWRnZVV0aWxpdHlDbGFzcywgY2xhc3Nlcyk7XG59O1xuY29uc3QgQmFkZ2VSb290ID0gc3R5bGVkKCdzcGFuJywge1xuICBuYW1lOiAnTXVpQmFkZ2UnLFxuICBzbG90OiAnUm9vdCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4gc3R5bGVzLnJvb3Rcbn0pKHtcbiAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gIGRpc3BsYXk6ICdpbmxpbmUtZmxleCcsXG4gIC8vIEZvciBjb3JyZWN0IGFsaWdubWVudCB3aXRoIHRoZSB0ZXh0LlxuICB2ZXJ0aWNhbEFsaWduOiAnbWlkZGxlJyxcbiAgZmxleFNocmluazogMFxufSk7XG5jb25zdCBCYWRnZUJhZGdlID0gc3R5bGVkKCdzcGFuJywge1xuICBuYW1lOiAnTXVpQmFkZ2UnLFxuICBzbG90OiAnQmFkZ2UnLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBvd25lclN0YXRlXG4gICAgfSA9IHByb3BzO1xuICAgIHJldHVybiBbc3R5bGVzLmJhZGdlLCBzdHlsZXNbb3duZXJTdGF0ZS52YXJpYW50XSwgc3R5bGVzW2BhbmNob3JPcmlnaW4ke2NhcGl0YWxpemUob3duZXJTdGF0ZS5hbmNob3JPcmlnaW4udmVydGljYWwpfSR7Y2FwaXRhbGl6ZShvd25lclN0YXRlLmFuY2hvck9yaWdpbi5ob3Jpem9udGFsKX0ke2NhcGl0YWxpemUob3duZXJTdGF0ZS5vdmVybGFwKX1gXSwgb3duZXJTdGF0ZS5jb2xvciAhPT0gJ2RlZmF1bHQnICYmIHN0eWxlc1tgY29sb3Ike2NhcGl0YWxpemUob3duZXJTdGF0ZS5jb2xvcil9YF0sIG93bmVyU3RhdGUuaW52aXNpYmxlICYmIHN0eWxlcy5pbnZpc2libGVdO1xuICB9XG59KSgoe1xuICB0aGVtZVxufSkgPT4ge1xuICB2YXIgX3RoZW1lJHZhcnM7XG4gIHJldHVybiB7XG4gICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgIGZsZXhEaXJlY3Rpb246ICdyb3cnLFxuICAgIGZsZXhXcmFwOiAnd3JhcCcsXG4gICAganVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInLFxuICAgIGFsaWduQ29udGVudDogJ2NlbnRlcicsXG4gICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgYm94U2l6aW5nOiAnYm9yZGVyLWJveCcsXG4gICAgZm9udEZhbWlseTogdGhlbWUudHlwb2dyYXBoeS5mb250RmFtaWx5LFxuICAgIGZvbnRXZWlnaHQ6IHRoZW1lLnR5cG9ncmFwaHkuZm9udFdlaWdodE1lZGl1bSxcbiAgICBmb250U2l6ZTogdGhlbWUudHlwb2dyYXBoeS5weFRvUmVtKDEyKSxcbiAgICBtaW5XaWR0aDogUkFESVVTX1NUQU5EQVJEICogMixcbiAgICBsaW5lSGVpZ2h0OiAxLFxuICAgIHBhZGRpbmc6ICcwIDZweCcsXG4gICAgaGVpZ2h0OiBSQURJVVNfU1RBTkRBUkQgKiAyLFxuICAgIGJvcmRlclJhZGl1czogUkFESVVTX1NUQU5EQVJELFxuICAgIHpJbmRleDogMSxcbiAgICAvLyBSZW5kZXIgdGhlIGJhZGdlIG9uIHRvcCBvZiBwb3RlbnRpYWwgcmlwcGxlcy5cbiAgICB0cmFuc2l0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoJ3RyYW5zZm9ybScsIHtcbiAgICAgIGVhc2luZzogdGhlbWUudHJhbnNpdGlvbnMuZWFzaW5nLmVhc2VJbk91dCxcbiAgICAgIGR1cmF0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5kdXJhdGlvbi5lbnRlcmluZ1NjcmVlblxuICAgIH0pLFxuICAgIHZhcmlhbnRzOiBbLi4uT2JqZWN0LmtleXMoKChfdGhlbWUkdmFycyA9IHRoZW1lLnZhcnMpICE9IG51bGwgPyBfdGhlbWUkdmFycyA6IHRoZW1lKS5wYWxldHRlKS5maWx0ZXIoa2V5ID0+IHtcbiAgICAgIHZhciBfdGhlbWUkdmFyczIsIF90aGVtZSR2YXJzMztcbiAgICAgIHJldHVybiAoKF90aGVtZSR2YXJzMiA9IHRoZW1lLnZhcnMpICE9IG51bGwgPyBfdGhlbWUkdmFyczIgOiB0aGVtZSkucGFsZXR0ZVtrZXldLm1haW4gJiYgKChfdGhlbWUkdmFyczMgPSB0aGVtZS52YXJzKSAhPSBudWxsID8gX3RoZW1lJHZhcnMzIDogdGhlbWUpLnBhbGV0dGVba2V5XS5jb250cmFzdFRleHQ7XG4gICAgfSkubWFwKGNvbG9yID0+ICh7XG4gICAgICBwcm9wczoge1xuICAgICAgICBjb2xvclxuICAgICAgfSxcbiAgICAgIHN0eWxlOiB7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGVbY29sb3JdLm1haW4sXG4gICAgICAgIGNvbG9yOiAodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZVtjb2xvcl0uY29udHJhc3RUZXh0XG4gICAgICB9XG4gICAgfSkpLCB7XG4gICAgICBwcm9wczoge1xuICAgICAgICB2YXJpYW50OiAnZG90J1xuICAgICAgfSxcbiAgICAgIHN0eWxlOiB7XG4gICAgICAgIGJvcmRlclJhZGl1czogUkFESVVTX0RPVCxcbiAgICAgICAgaGVpZ2h0OiBSQURJVVNfRE9UICogMixcbiAgICAgICAgbWluV2lkdGg6IFJBRElVU19ET1QgKiAyLFxuICAgICAgICBwYWRkaW5nOiAwXG4gICAgICB9XG4gICAgfSwge1xuICAgICAgcHJvcHM6ICh7XG4gICAgICAgIG93bmVyU3RhdGVcbiAgICAgIH0pID0+IG93bmVyU3RhdGUuYW5jaG9yT3JpZ2luLnZlcnRpY2FsID09PSAndG9wJyAmJiBvd25lclN0YXRlLmFuY2hvck9yaWdpbi5ob3Jpem9udGFsID09PSAncmlnaHQnICYmIG93bmVyU3RhdGUub3ZlcmxhcCA9PT0gJ3JlY3Rhbmd1bGFyJyxcbiAgICAgIHN0eWxlOiB7XG4gICAgICAgIHRvcDogMCxcbiAgICAgICAgcmlnaHQ6IDAsXG4gICAgICAgIHRyYW5zZm9ybTogJ3NjYWxlKDEpIHRyYW5zbGF0ZSg1MCUsIC01MCUpJyxcbiAgICAgICAgdHJhbnNmb3JtT3JpZ2luOiAnMTAwJSAwJScsXG4gICAgICAgIFtgJi4ke2JhZGdlQ2xhc3Nlcy5pbnZpc2libGV9YF06IHtcbiAgICAgICAgICB0cmFuc2Zvcm06ICdzY2FsZSgwKSB0cmFuc2xhdGUoNTAlLCAtNTAlKSdcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIHByb3BzOiAoe1xuICAgICAgICBvd25lclN0YXRlXG4gICAgICB9KSA9PiBvd25lclN0YXRlLmFuY2hvck9yaWdpbi52ZXJ0aWNhbCA9PT0gJ2JvdHRvbScgJiYgb3duZXJTdGF0ZS5hbmNob3JPcmlnaW4uaG9yaXpvbnRhbCA9PT0gJ3JpZ2h0JyAmJiBvd25lclN0YXRlLm92ZXJsYXAgPT09ICdyZWN0YW5ndWxhcicsXG4gICAgICBzdHlsZToge1xuICAgICAgICBib3R0b206IDAsXG4gICAgICAgIHJpZ2h0OiAwLFxuICAgICAgICB0cmFuc2Zvcm06ICdzY2FsZSgxKSB0cmFuc2xhdGUoNTAlLCA1MCUpJyxcbiAgICAgICAgdHJhbnNmb3JtT3JpZ2luOiAnMTAwJSAxMDAlJyxcbiAgICAgICAgW2AmLiR7YmFkZ2VDbGFzc2VzLmludmlzaWJsZX1gXToge1xuICAgICAgICAgIHRyYW5zZm9ybTogJ3NjYWxlKDApIHRyYW5zbGF0ZSg1MCUsIDUwJSknXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBwcm9wczogKHtcbiAgICAgICAgb3duZXJTdGF0ZVxuICAgICAgfSkgPT4gb3duZXJTdGF0ZS5hbmNob3JPcmlnaW4udmVydGljYWwgPT09ICd0b3AnICYmIG93bmVyU3RhdGUuYW5jaG9yT3JpZ2luLmhvcml6b250YWwgPT09ICdsZWZ0JyAmJiBvd25lclN0YXRlLm92ZXJsYXAgPT09ICdyZWN0YW5ndWxhcicsXG4gICAgICBzdHlsZToge1xuICAgICAgICB0b3A6IDAsXG4gICAgICAgIGxlZnQ6IDAsXG4gICAgICAgIHRyYW5zZm9ybTogJ3NjYWxlKDEpIHRyYW5zbGF0ZSgtNTAlLCAtNTAlKScsXG4gICAgICAgIHRyYW5zZm9ybU9yaWdpbjogJzAlIDAlJyxcbiAgICAgICAgW2AmLiR7YmFkZ2VDbGFzc2VzLmludmlzaWJsZX1gXToge1xuICAgICAgICAgIHRyYW5zZm9ybTogJ3NjYWxlKDApIHRyYW5zbGF0ZSgtNTAlLCAtNTAlKSdcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIHByb3BzOiAoe1xuICAgICAgICBvd25lclN0YXRlXG4gICAgICB9KSA9PiBvd25lclN0YXRlLmFuY2hvck9yaWdpbi52ZXJ0aWNhbCA9PT0gJ2JvdHRvbScgJiYgb3duZXJTdGF0ZS5hbmNob3JPcmlnaW4uaG9yaXpvbnRhbCA9PT0gJ2xlZnQnICYmIG93bmVyU3RhdGUub3ZlcmxhcCA9PT0gJ3JlY3Rhbmd1bGFyJyxcbiAgICAgIHN0eWxlOiB7XG4gICAgICAgIGJvdHRvbTogMCxcbiAgICAgICAgbGVmdDogMCxcbiAgICAgICAgdHJhbnNmb3JtOiAnc2NhbGUoMSkgdHJhbnNsYXRlKC01MCUsIDUwJSknLFxuICAgICAgICB0cmFuc2Zvcm1PcmlnaW46ICcwJSAxMDAlJyxcbiAgICAgICAgW2AmLiR7YmFkZ2VDbGFzc2VzLmludmlzaWJsZX1gXToge1xuICAgICAgICAgIHRyYW5zZm9ybTogJ3NjYWxlKDApIHRyYW5zbGF0ZSgtNTAlLCA1MCUpJ1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwge1xuICAgICAgcHJvcHM6ICh7XG4gICAgICAgIG93bmVyU3RhdGVcbiAgICAgIH0pID0+IG93bmVyU3RhdGUuYW5jaG9yT3JpZ2luLnZlcnRpY2FsID09PSAndG9wJyAmJiBvd25lclN0YXRlLmFuY2hvck9yaWdpbi5ob3Jpem9udGFsID09PSAncmlnaHQnICYmIG93bmVyU3RhdGUub3ZlcmxhcCA9PT0gJ2NpcmN1bGFyJyxcbiAgICAgIHN0eWxlOiB7XG4gICAgICAgIHRvcDogJzE0JScsXG4gICAgICAgIHJpZ2h0OiAnMTQlJyxcbiAgICAgICAgdHJhbnNmb3JtOiAnc2NhbGUoMSkgdHJhbnNsYXRlKDUwJSwgLTUwJSknLFxuICAgICAgICB0cmFuc2Zvcm1PcmlnaW46ICcxMDAlIDAlJyxcbiAgICAgICAgW2AmLiR7YmFkZ2VDbGFzc2VzLmludmlzaWJsZX1gXToge1xuICAgICAgICAgIHRyYW5zZm9ybTogJ3NjYWxlKDApIHRyYW5zbGF0ZSg1MCUsIC01MCUpJ1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwge1xuICAgICAgcHJvcHM6ICh7XG4gICAgICAgIG93bmVyU3RhdGVcbiAgICAgIH0pID0+IG93bmVyU3RhdGUuYW5jaG9yT3JpZ2luLnZlcnRpY2FsID09PSAnYm90dG9tJyAmJiBvd25lclN0YXRlLmFuY2hvck9yaWdpbi5ob3Jpem9udGFsID09PSAncmlnaHQnICYmIG93bmVyU3RhdGUub3ZlcmxhcCA9PT0gJ2NpcmN1bGFyJyxcbiAgICAgIHN0eWxlOiB7XG4gICAgICAgIGJvdHRvbTogJzE0JScsXG4gICAgICAgIHJpZ2h0OiAnMTQlJyxcbiAgICAgICAgdHJhbnNmb3JtOiAnc2NhbGUoMSkgdHJhbnNsYXRlKDUwJSwgNTAlKScsXG4gICAgICAgIHRyYW5zZm9ybU9yaWdpbjogJzEwMCUgMTAwJScsXG4gICAgICAgIFtgJi4ke2JhZGdlQ2xhc3Nlcy5pbnZpc2libGV9YF06IHtcbiAgICAgICAgICB0cmFuc2Zvcm06ICdzY2FsZSgwKSB0cmFuc2xhdGUoNTAlLCA1MCUpJ1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwge1xuICAgICAgcHJvcHM6ICh7XG4gICAgICAgIG93bmVyU3RhdGVcbiAgICAgIH0pID0+IG93bmVyU3RhdGUuYW5jaG9yT3JpZ2luLnZlcnRpY2FsID09PSAndG9wJyAmJiBvd25lclN0YXRlLmFuY2hvck9yaWdpbi5ob3Jpem9udGFsID09PSAnbGVmdCcgJiYgb3duZXJTdGF0ZS5vdmVybGFwID09PSAnY2lyY3VsYXInLFxuICAgICAgc3R5bGU6IHtcbiAgICAgICAgdG9wOiAnMTQlJyxcbiAgICAgICAgbGVmdDogJzE0JScsXG4gICAgICAgIHRyYW5zZm9ybTogJ3NjYWxlKDEpIHRyYW5zbGF0ZSgtNTAlLCAtNTAlKScsXG4gICAgICAgIHRyYW5zZm9ybU9yaWdpbjogJzAlIDAlJyxcbiAgICAgICAgW2AmLiR7YmFkZ2VDbGFzc2VzLmludmlzaWJsZX1gXToge1xuICAgICAgICAgIHRyYW5zZm9ybTogJ3NjYWxlKDApIHRyYW5zbGF0ZSgtNTAlLCAtNTAlKSdcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIHByb3BzOiAoe1xuICAgICAgICBvd25lclN0YXRlXG4gICAgICB9KSA9PiBvd25lclN0YXRlLmFuY2hvck9yaWdpbi52ZXJ0aWNhbCA9PT0gJ2JvdHRvbScgJiYgb3duZXJTdGF0ZS5hbmNob3JPcmlnaW4uaG9yaXpvbnRhbCA9PT0gJ2xlZnQnICYmIG93bmVyU3RhdGUub3ZlcmxhcCA9PT0gJ2NpcmN1bGFyJyxcbiAgICAgIHN0eWxlOiB7XG4gICAgICAgIGJvdHRvbTogJzE0JScsXG4gICAgICAgIGxlZnQ6ICcxNCUnLFxuICAgICAgICB0cmFuc2Zvcm06ICdzY2FsZSgxKSB0cmFuc2xhdGUoLTUwJSwgNTAlKScsXG4gICAgICAgIHRyYW5zZm9ybU9yaWdpbjogJzAlIDEwMCUnLFxuICAgICAgICBbYCYuJHtiYWRnZUNsYXNzZXMuaW52aXNpYmxlfWBdOiB7XG4gICAgICAgICAgdHJhbnNmb3JtOiAnc2NhbGUoMCkgdHJhbnNsYXRlKC01MCUsIDUwJSknXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBwcm9wczoge1xuICAgICAgICBpbnZpc2libGU6IHRydWVcbiAgICAgIH0sXG4gICAgICBzdHlsZToge1xuICAgICAgICB0cmFuc2l0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoJ3RyYW5zZm9ybScsIHtcbiAgICAgICAgICBlYXNpbmc6IHRoZW1lLnRyYW5zaXRpb25zLmVhc2luZy5lYXNlSW5PdXQsXG4gICAgICAgICAgZHVyYXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmR1cmF0aW9uLmxlYXZpbmdTY3JlZW5cbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9XVxuICB9O1xufSk7XG5jb25zdCBCYWRnZSA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIEJhZGdlKGluUHJvcHMsIHJlZikge1xuICB2YXIgX3JlZiwgX3Nsb3RzJHJvb3QsIF9yZWYyLCBfc2xvdHMkYmFkZ2UsIF9zbG90UHJvcHMkcm9vdCwgX3Nsb3RQcm9wcyRiYWRnZTtcbiAgY29uc3QgcHJvcHMgPSB1c2VEZWZhdWx0UHJvcHMoe1xuICAgIHByb3BzOiBpblByb3BzLFxuICAgIG5hbWU6ICdNdWlCYWRnZSdcbiAgfSk7XG4gIGNvbnN0IHtcbiAgICAgIGFuY2hvck9yaWdpbjogYW5jaG9yT3JpZ2luUHJvcCA9IHtcbiAgICAgICAgdmVydGljYWw6ICd0b3AnLFxuICAgICAgICBob3Jpem9udGFsOiAncmlnaHQnXG4gICAgICB9LFxuICAgICAgY2xhc3NOYW1lLFxuICAgICAgY29tcG9uZW50LFxuICAgICAgY29tcG9uZW50cyA9IHt9LFxuICAgICAgY29tcG9uZW50c1Byb3BzID0ge30sXG4gICAgICBjaGlsZHJlbixcbiAgICAgIG92ZXJsYXA6IG92ZXJsYXBQcm9wID0gJ3JlY3Rhbmd1bGFyJyxcbiAgICAgIGNvbG9yOiBjb2xvclByb3AgPSAnZGVmYXVsdCcsXG4gICAgICBpbnZpc2libGU6IGludmlzaWJsZVByb3AgPSBmYWxzZSxcbiAgICAgIG1heDogbWF4UHJvcCA9IDk5LFxuICAgICAgYmFkZ2VDb250ZW50OiBiYWRnZUNvbnRlbnRQcm9wLFxuICAgICAgc2xvdHMsXG4gICAgICBzbG90UHJvcHMsXG4gICAgICBzaG93WmVybyA9IGZhbHNlLFxuICAgICAgdmFyaWFudDogdmFyaWFudFByb3AgPSAnc3RhbmRhcmQnXG4gICAgfSA9IHByb3BzLFxuICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIF9leGNsdWRlZCk7XG4gIGNvbnN0IHtcbiAgICBiYWRnZUNvbnRlbnQsXG4gICAgaW52aXNpYmxlOiBpbnZpc2libGVGcm9tSG9vayxcbiAgICBtYXgsXG4gICAgZGlzcGxheVZhbHVlOiBkaXNwbGF5VmFsdWVGcm9tSG9va1xuICB9ID0gdXNlQmFkZ2Uoe1xuICAgIG1heDogbWF4UHJvcCxcbiAgICBpbnZpc2libGU6IGludmlzaWJsZVByb3AsXG4gICAgYmFkZ2VDb250ZW50OiBiYWRnZUNvbnRlbnRQcm9wLFxuICAgIHNob3daZXJvXG4gIH0pO1xuICBjb25zdCBwcmV2UHJvcHMgPSB1c2VQcmV2aW91c1Byb3BzKHtcbiAgICBhbmNob3JPcmlnaW46IGFuY2hvck9yaWdpblByb3AsXG4gICAgY29sb3I6IGNvbG9yUHJvcCxcbiAgICBvdmVybGFwOiBvdmVybGFwUHJvcCxcbiAgICB2YXJpYW50OiB2YXJpYW50UHJvcCxcbiAgICBiYWRnZUNvbnRlbnQ6IGJhZGdlQ29udGVudFByb3BcbiAgfSk7XG4gIGNvbnN0IGludmlzaWJsZSA9IGludmlzaWJsZUZyb21Ib29rIHx8IGJhZGdlQ29udGVudCA9PSBudWxsICYmIHZhcmlhbnRQcm9wICE9PSAnZG90JztcbiAgY29uc3Qge1xuICAgIGNvbG9yID0gY29sb3JQcm9wLFxuICAgIG92ZXJsYXAgPSBvdmVybGFwUHJvcCxcbiAgICBhbmNob3JPcmlnaW4gPSBhbmNob3JPcmlnaW5Qcm9wLFxuICAgIHZhcmlhbnQgPSB2YXJpYW50UHJvcFxuICB9ID0gaW52aXNpYmxlID8gcHJldlByb3BzIDogcHJvcHM7XG4gIGNvbnN0IGRpc3BsYXlWYWx1ZSA9IHZhcmlhbnQgIT09ICdkb3QnID8gZGlzcGxheVZhbHVlRnJvbUhvb2sgOiB1bmRlZmluZWQ7XG4gIGNvbnN0IG93bmVyU3RhdGUgPSBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICBiYWRnZUNvbnRlbnQsXG4gICAgaW52aXNpYmxlLFxuICAgIG1heCxcbiAgICBkaXNwbGF5VmFsdWUsXG4gICAgc2hvd1plcm8sXG4gICAgYW5jaG9yT3JpZ2luLFxuICAgIGNvbG9yLFxuICAgIG92ZXJsYXAsXG4gICAgdmFyaWFudFxuICB9KTtcbiAgY29uc3QgY2xhc3NlcyA9IHVzZVV0aWxpdHlDbGFzc2VzKG93bmVyU3RhdGUpO1xuXG4gIC8vIHN1cHBvcnQgYm90aCBgc2xvdHNgIGFuZCBgY29tcG9uZW50c2AgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHlcbiAgY29uc3QgUm9vdFNsb3QgPSAoX3JlZiA9IChfc2xvdHMkcm9vdCA9IHNsb3RzID09IG51bGwgPyB2b2lkIDAgOiBzbG90cy5yb290KSAhPSBudWxsID8gX3Nsb3RzJHJvb3QgOiBjb21wb25lbnRzLlJvb3QpICE9IG51bGwgPyBfcmVmIDogQmFkZ2VSb290O1xuICBjb25zdCBCYWRnZVNsb3QgPSAoX3JlZjIgPSAoX3Nsb3RzJGJhZGdlID0gc2xvdHMgPT0gbnVsbCA/IHZvaWQgMCA6IHNsb3RzLmJhZGdlKSAhPSBudWxsID8gX3Nsb3RzJGJhZGdlIDogY29tcG9uZW50cy5CYWRnZSkgIT0gbnVsbCA/IF9yZWYyIDogQmFkZ2VCYWRnZTtcbiAgY29uc3Qgcm9vdFNsb3RQcm9wcyA9IChfc2xvdFByb3BzJHJvb3QgPSBzbG90UHJvcHMgPT0gbnVsbCA/IHZvaWQgMCA6IHNsb3RQcm9wcy5yb290KSAhPSBudWxsID8gX3Nsb3RQcm9wcyRyb290IDogY29tcG9uZW50c1Byb3BzLnJvb3Q7XG4gIGNvbnN0IGJhZGdlU2xvdFByb3BzID0gKF9zbG90UHJvcHMkYmFkZ2UgPSBzbG90UHJvcHMgPT0gbnVsbCA/IHZvaWQgMCA6IHNsb3RQcm9wcy5iYWRnZSkgIT0gbnVsbCA/IF9zbG90UHJvcHMkYmFkZ2UgOiBjb21wb25lbnRzUHJvcHMuYmFkZ2U7XG4gIGNvbnN0IHJvb3RQcm9wcyA9IHVzZVNsb3RQcm9wcyh7XG4gICAgZWxlbWVudFR5cGU6IFJvb3RTbG90LFxuICAgIGV4dGVybmFsU2xvdFByb3BzOiByb290U2xvdFByb3BzLFxuICAgIGV4dGVybmFsRm9yd2FyZGVkUHJvcHM6IG90aGVyLFxuICAgIGFkZGl0aW9uYWxQcm9wczoge1xuICAgICAgcmVmLFxuICAgICAgYXM6IGNvbXBvbmVudFxuICAgIH0sXG4gICAgb3duZXJTdGF0ZSxcbiAgICBjbGFzc05hbWU6IGNsc3gocm9vdFNsb3RQcm9wcyA9PSBudWxsID8gdm9pZCAwIDogcm9vdFNsb3RQcm9wcy5jbGFzc05hbWUsIGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lKVxuICB9KTtcbiAgY29uc3QgYmFkZ2VQcm9wcyA9IHVzZVNsb3RQcm9wcyh7XG4gICAgZWxlbWVudFR5cGU6IEJhZGdlU2xvdCxcbiAgICBleHRlcm5hbFNsb3RQcm9wczogYmFkZ2VTbG90UHJvcHMsXG4gICAgb3duZXJTdGF0ZSxcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5iYWRnZSwgYmFkZ2VTbG90UHJvcHMgPT0gbnVsbCA/IHZvaWQgMCA6IGJhZGdlU2xvdFByb3BzLmNsYXNzTmFtZSlcbiAgfSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeHMoUm9vdFNsb3QsIF9leHRlbmRzKHt9LCByb290UHJvcHMsIHtcbiAgICBjaGlsZHJlbjogW2NoaWxkcmVuLCAvKiNfX1BVUkVfXyovX2pzeChCYWRnZVNsb3QsIF9leHRlbmRzKHt9LCBiYWRnZVByb3BzLCB7XG4gICAgICBjaGlsZHJlbjogZGlzcGxheVZhbHVlXG4gICAgfSkpXVxuICB9KSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IEJhZGdlLnByb3BUeXBlcyAvKiByZW1vdmUtcHJvcHR5cGVzICovID0ge1xuICAvLyDilIzilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIAgV2FybmluZyDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJBcbiAgLy8g4pSCIFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucy4g4pSCXG4gIC8vIOKUgiAgICBUbyB1cGRhdGUgdGhlbSwgZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gYHBucG0gcHJvcHR5cGVzYC4gICAgIOKUglxuICAvLyDilJTilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJhcbiAgLyoqXG4gICAqIFRoZSBhbmNob3Igb2YgdGhlIGJhZGdlLlxuICAgKiBAZGVmYXVsdCB7XG4gICAqICAgdmVydGljYWw6ICd0b3AnLFxuICAgKiAgIGhvcml6b250YWw6ICdyaWdodCcsXG4gICAqIH1cbiAgICovXG4gIGFuY2hvck9yaWdpbjogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBob3Jpem9udGFsOiBQcm9wVHlwZXMub25lT2YoWydsZWZ0JywgJ3JpZ2h0J10pLmlzUmVxdWlyZWQsXG4gICAgdmVydGljYWw6IFByb3BUeXBlcy5vbmVPZihbJ2JvdHRvbScsICd0b3AnXSkuaXNSZXF1aXJlZFxuICB9KSxcbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IHJlbmRlcmVkIHdpdGhpbiB0aGUgYmFkZ2UuXG4gICAqL1xuICBiYWRnZUNvbnRlbnQ6IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogVGhlIGJhZGdlIHdpbGwgYmUgYWRkZWQgcmVsYXRpdmUgdG8gdGhpcyBub2RlLlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIFRoZSBjb2xvciBvZiB0aGUgY29tcG9uZW50LlxuICAgKiBJdCBzdXBwb3J0cyBib3RoIGRlZmF1bHQgYW5kIGN1c3RvbSB0aGVtZSBjb2xvcnMsIHdoaWNoIGNhbiBiZSBhZGRlZCBhcyBzaG93biBpbiB0aGVcbiAgICogW3BhbGV0dGUgY3VzdG9taXphdGlvbiBndWlkZV0oaHR0cHM6Ly9tdWkuY29tL21hdGVyaWFsLXVpL2N1c3RvbWl6YXRpb24vcGFsZXR0ZS8jY3VzdG9tLWNvbG9ycykuXG4gICAqIEBkZWZhdWx0ICdkZWZhdWx0J1xuICAgKi9cbiAgY29sb3I6IFByb3BUeXBlcyAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsnZGVmYXVsdCcsICdwcmltYXJ5JywgJ3NlY29uZGFyeScsICdlcnJvcicsICdpbmZvJywgJ3N1Y2Nlc3MnLCAnd2FybmluZyddKSwgUHJvcFR5cGVzLnN0cmluZ10pLFxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgcm9vdCBub2RlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgSFRNTCBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKi9cbiAgY29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50cyB1c2VkIGZvciBlYWNoIHNsb3QgaW5zaWRlLlxuICAgKlxuICAgKiBUaGlzIHByb3AgaXMgYW4gYWxpYXMgZm9yIHRoZSBgc2xvdHNgIHByb3AuXG4gICAqIEl0J3MgcmVjb21tZW5kZWQgdG8gdXNlIHRoZSBgc2xvdHNgIHByb3AgaW5zdGVhZC5cbiAgICpcbiAgICogQGRlZmF1bHQge31cbiAgICovXG4gIGNvbXBvbmVudHM6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgQmFkZ2U6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcbiAgICBSb290OiBQcm9wVHlwZXMuZWxlbWVudFR5cGVcbiAgfSksXG4gIC8qKlxuICAgKiBUaGUgZXh0cmEgcHJvcHMgZm9yIHRoZSBzbG90IGNvbXBvbmVudHMuXG4gICAqIFlvdSBjYW4gb3ZlcnJpZGUgdGhlIGV4aXN0aW5nIHByb3BzIG9yIGFkZCBuZXcgb25lcy5cbiAgICpcbiAgICogVGhpcyBwcm9wIGlzIGFuIGFsaWFzIGZvciB0aGUgYHNsb3RQcm9wc2AgcHJvcC5cbiAgICogSXQncyByZWNvbW1lbmRlZCB0byB1c2UgdGhlIGBzbG90UHJvcHNgIHByb3AgaW5zdGVhZCwgYXMgYGNvbXBvbmVudHNQcm9wc2Agd2lsbCBiZSBkZXByZWNhdGVkIGluIHRoZSBmdXR1cmUuXG4gICAqXG4gICAqIEBkZWZhdWx0IHt9XG4gICAqL1xuICBjb21wb25lbnRzUHJvcHM6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgYmFkZ2U6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSksXG4gICAgcm9vdDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKVxuICB9KSxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGJhZGdlIGlzIGludmlzaWJsZS5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGludmlzaWJsZTogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBNYXggY291bnQgdG8gc2hvdy5cbiAgICogQGRlZmF1bHQgOTlcbiAgICovXG4gIG1heDogUHJvcFR5cGVzLm51bWJlcixcbiAgLyoqXG4gICAqIFdyYXBwZWQgc2hhcGUgdGhlIGJhZGdlIHNob3VsZCBvdmVybGFwLlxuICAgKiBAZGVmYXVsdCAncmVjdGFuZ3VsYXInXG4gICAqL1xuICBvdmVybGFwOiBQcm9wVHlwZXMub25lT2YoWydjaXJjdWxhcicsICdyZWN0YW5ndWxhciddKSxcbiAgLyoqXG4gICAqIENvbnRyb2xzIHdoZXRoZXIgdGhlIGJhZGdlIGlzIGhpZGRlbiB3aGVuIGBiYWRnZUNvbnRlbnRgIGlzIHplcm8uXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBzaG93WmVybzogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBUaGUgcHJvcHMgdXNlZCBmb3IgZWFjaCBzbG90IGluc2lkZSB0aGUgQmFkZ2UuXG4gICAqIEBkZWZhdWx0IHt9XG4gICAqL1xuICBzbG90UHJvcHM6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgYmFkZ2U6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSksXG4gICAgcm9vdDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKVxuICB9KSxcbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnRzIHVzZWQgZm9yIGVhY2ggc2xvdCBpbnNpZGUgdGhlIEJhZGdlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgSFRNTCBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKiBAZGVmYXVsdCB7fVxuICAgKi9cbiAgc2xvdHM6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgYmFkZ2U6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcbiAgICByb290OiBQcm9wVHlwZXMuZWxlbWVudFR5cGVcbiAgfSksXG4gIC8qKlxuICAgKiBUaGUgc3lzdGVtIHByb3AgdGhhdCBhbGxvd3MgZGVmaW5pbmcgc3lzdGVtIG92ZXJyaWRlcyBhcyB3ZWxsIGFzIGFkZGl0aW9uYWwgQ1NTIHN0eWxlcy5cbiAgICovXG4gIHN4OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLmJvb2xdKSksIFByb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSksXG4gIC8qKlxuICAgKiBUaGUgdmFyaWFudCB0byB1c2UuXG4gICAqIEBkZWZhdWx0ICdzdGFuZGFyZCdcbiAgICovXG4gIHZhcmlhbnQ6IFByb3BUeXBlcyAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsnZG90JywgJ3N0YW5kYXJkJ10pLCBQcm9wVHlwZXMuc3RyaW5nXSlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCBCYWRnZTsiLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCB7IHVzZVByZXZpb3VzUHJvcHMgfSBmcm9tICdAbXVpL3V0aWxzJztcbi8qKlxuICpcbiAqIERlbW9zOlxuICpcbiAqIC0gW0JhZGdlXShodHRwczovL25leHQubXVpLmNvbS9iYXNlLXVpL3JlYWN0LWJhZGdlLyNob29rKVxuICpcbiAqIEFQSTpcbiAqXG4gKiAtIFt1c2VCYWRnZSBBUEldKGh0dHBzOi8vbmV4dC5tdWkuY29tL2Jhc2UtdWkvcmVhY3QtYmFkZ2UvaG9va3MtYXBpLyN1c2UtYmFkZ2UpXG4gKi9cbmZ1bmN0aW9uIHVzZUJhZGdlKHBhcmFtZXRlcnMpIHtcbiAgY29uc3Qge1xuICAgIGJhZGdlQ29udGVudDogYmFkZ2VDb250ZW50UHJvcCxcbiAgICBpbnZpc2libGU6IGludmlzaWJsZVByb3AgPSBmYWxzZSxcbiAgICBtYXg6IG1heFByb3AgPSA5OSxcbiAgICBzaG93WmVybyA9IGZhbHNlXG4gIH0gPSBwYXJhbWV0ZXJzO1xuICBjb25zdCBwcmV2UHJvcHMgPSB1c2VQcmV2aW91c1Byb3BzKHtcbiAgICBiYWRnZUNvbnRlbnQ6IGJhZGdlQ29udGVudFByb3AsXG4gICAgbWF4OiBtYXhQcm9wXG4gIH0pO1xuICBsZXQgaW52aXNpYmxlID0gaW52aXNpYmxlUHJvcDtcbiAgaWYgKGludmlzaWJsZVByb3AgPT09IGZhbHNlICYmIGJhZGdlQ29udGVudFByb3AgPT09IDAgJiYgIXNob3daZXJvKSB7XG4gICAgaW52aXNpYmxlID0gdHJ1ZTtcbiAgfVxuICBjb25zdCB7XG4gICAgYmFkZ2VDb250ZW50LFxuICAgIG1heCA9IG1heFByb3BcbiAgfSA9IGludmlzaWJsZSA/IHByZXZQcm9wcyA6IHBhcmFtZXRlcnM7XG4gIGNvbnN0IGRpc3BsYXlWYWx1ZSA9IGJhZGdlQ29udGVudCAmJiBOdW1iZXIoYmFkZ2VDb250ZW50KSA+IG1heCA/IGAke21heH0rYCA6IGJhZGdlQ29udGVudDtcbiAgcmV0dXJuIHtcbiAgICBiYWRnZUNvbnRlbnQsXG4gICAgaW52aXNpYmxlLFxuICAgIG1heCxcbiAgICBkaXNwbGF5VmFsdWVcbiAgfTtcbn1cbmV4cG9ydCBkZWZhdWx0IHVzZUJhZGdlOyIsImltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3Nlcyc7XG5pbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3MgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzcyc7XG5leHBvcnQgZnVuY3Rpb24gZ2V0Qm90dG9tTmF2aWdhdGlvblV0aWxpdHlDbGFzcyhzbG90KSB7XG4gIHJldHVybiBnZW5lcmF0ZVV0aWxpdHlDbGFzcygnTXVpQm90dG9tTmF2aWdhdGlvbicsIHNsb3QpO1xufVxuY29uc3QgYm90dG9tTmF2aWdhdGlvbkNsYXNzZXMgPSBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzKCdNdWlCb3R0b21OYXZpZ2F0aW9uJywgWydyb290J10pO1xuZXhwb3J0IGRlZmF1bHQgYm90dG9tTmF2aWdhdGlvbkNsYXNzZXM7IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiY2hpbGRyZW5cIiwgXCJjbGFzc05hbWVcIiwgXCJjb21wb25lbnRcIiwgXCJvbkNoYW5nZVwiLCBcInNob3dMYWJlbHNcIiwgXCJ2YWx1ZVwiXTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGlzRnJhZ21lbnQgfSBmcm9tICdyZWFjdC1pcyc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgY29tcG9zZUNsYXNzZXMgZnJvbSAnQG11aS91dGlscy9jb21wb3NlQ2xhc3Nlcyc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJy4uL3N0eWxlcy9zdHlsZWQnO1xuaW1wb3J0IHsgdXNlRGVmYXVsdFByb3BzIH0gZnJvbSAnLi4vRGVmYXVsdFByb3BzUHJvdmlkZXInO1xuaW1wb3J0IHsgZ2V0Qm90dG9tTmF2aWdhdGlvblV0aWxpdHlDbGFzcyB9IGZyb20gJy4vYm90dG9tTmF2aWdhdGlvbkNsYXNzZXMnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmNvbnN0IHVzZVV0aWxpdHlDbGFzc2VzID0gb3duZXJTdGF0ZSA9PiB7XG4gIGNvbnN0IHtcbiAgICBjbGFzc2VzXG4gIH0gPSBvd25lclN0YXRlO1xuICBjb25zdCBzbG90cyA9IHtcbiAgICByb290OiBbJ3Jvb3QnXVxuICB9O1xuICByZXR1cm4gY29tcG9zZUNsYXNzZXMoc2xvdHMsIGdldEJvdHRvbU5hdmlnYXRpb25VdGlsaXR5Q2xhc3MsIGNsYXNzZXMpO1xufTtcbmNvbnN0IEJvdHRvbU5hdmlnYXRpb25Sb290ID0gc3R5bGVkKCdkaXYnLCB7XG4gIG5hbWU6ICdNdWlCb3R0b21OYXZpZ2F0aW9uJyxcbiAgc2xvdDogJ1Jvb3QnLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHN0eWxlcy5yb290XG59KSgoe1xuICB0aGVtZVxufSkgPT4gKHtcbiAgZGlzcGxheTogJ2ZsZXgnLFxuICBqdXN0aWZ5Q29udGVudDogJ2NlbnRlcicsXG4gIGhlaWdodDogNTYsXG4gIGJhY2tncm91bmRDb2xvcjogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGUuYmFja2dyb3VuZC5wYXBlclxufSkpO1xuY29uc3QgQm90dG9tTmF2aWdhdGlvbiA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIEJvdHRvbU5hdmlnYXRpb24oaW5Qcm9wcywgcmVmKSB7XG4gIGNvbnN0IHByb3BzID0gdXNlRGVmYXVsdFByb3BzKHtcbiAgICBwcm9wczogaW5Qcm9wcyxcbiAgICBuYW1lOiAnTXVpQm90dG9tTmF2aWdhdGlvbidcbiAgfSk7XG4gIGNvbnN0IHtcbiAgICAgIGNoaWxkcmVuLFxuICAgICAgY2xhc3NOYW1lLFxuICAgICAgY29tcG9uZW50ID0gJ2RpdicsXG4gICAgICBvbkNoYW5nZSxcbiAgICAgIHNob3dMYWJlbHMgPSBmYWxzZSxcbiAgICAgIHZhbHVlXG4gICAgfSA9IHByb3BzLFxuICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIF9leGNsdWRlZCk7XG4gIGNvbnN0IG93bmVyU3RhdGUgPSBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICBjb21wb25lbnQsXG4gICAgc2hvd0xhYmVsc1xuICB9KTtcbiAgY29uc3QgY2xhc3NlcyA9IHVzZVV0aWxpdHlDbGFzc2VzKG93bmVyU3RhdGUpO1xuICByZXR1cm4gLyojX19QVVJFX18qL19qc3goQm90dG9tTmF2aWdhdGlvblJvb3QsIF9leHRlbmRzKHtcbiAgICBhczogY29tcG9uZW50LFxuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSksXG4gICAgcmVmOiByZWYsXG4gICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZVxuICB9LCBvdGhlciwge1xuICAgIGNoaWxkcmVuOiBSZWFjdC5DaGlsZHJlbi5tYXAoY2hpbGRyZW4sIChjaGlsZCwgY2hpbGRJbmRleCkgPT4ge1xuICAgICAgaWYgKCEgLyojX19QVVJFX18qL1JlYWN0LmlzVmFsaWRFbGVtZW50KGNoaWxkKSkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGlmIChpc0ZyYWdtZW50KGNoaWxkKSkge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoW1wiTVVJOiBUaGUgQm90dG9tTmF2aWdhdGlvbiBjb21wb25lbnQgZG9lc24ndCBhY2NlcHQgYSBGcmFnbWVudCBhcyBhIGNoaWxkLlwiLCAnQ29uc2lkZXIgcHJvdmlkaW5nIGFuIGFycmF5IGluc3RlYWQuJ10uam9pbignXFxuJykpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBjb25zdCBjaGlsZFZhbHVlID0gY2hpbGQucHJvcHMudmFsdWUgPT09IHVuZGVmaW5lZCA/IGNoaWxkSW5kZXggOiBjaGlsZC5wcm9wcy52YWx1ZTtcbiAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY2xvbmVFbGVtZW50KGNoaWxkLCB7XG4gICAgICAgIHNlbGVjdGVkOiBjaGlsZFZhbHVlID09PSB2YWx1ZSxcbiAgICAgICAgc2hvd0xhYmVsOiBjaGlsZC5wcm9wcy5zaG93TGFiZWwgIT09IHVuZGVmaW5lZCA/IGNoaWxkLnByb3BzLnNob3dMYWJlbCA6IHNob3dMYWJlbHMsXG4gICAgICAgIHZhbHVlOiBjaGlsZFZhbHVlLFxuICAgICAgICBvbkNoYW5nZVxuICAgICAgfSk7XG4gICAgfSlcbiAgfSkpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBCb3R0b21OYXZpZ2F0aW9uLnByb3BUeXBlcyAvKiByZW1vdmUtcHJvcHR5cGVzICovID0ge1xuICAvLyDilIzilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIAgV2FybmluZyDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJBcbiAgLy8g4pSCIFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucy4g4pSCXG4gIC8vIOKUgiAgICBUbyB1cGRhdGUgdGhlbSwgZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gYHBucG0gcHJvcHR5cGVzYC4gICAgIOKUglxuICAvLyDilJTilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJhcbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgcm9vdCBub2RlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgSFRNTCBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKi9cbiAgY29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSB2YWx1ZSBjaGFuZ2VzLlxuICAgKlxuICAgKiBAcGFyYW0ge1JlYWN0LlN5bnRoZXRpY0V2ZW50fSBldmVudCBUaGUgZXZlbnQgc291cmNlIG9mIHRoZSBjYWxsYmFjay4gKipXYXJuaW5nKio6IFRoaXMgaXMgYSBnZW5lcmljIGV2ZW50IG5vdCBhIGNoYW5nZSBldmVudC5cbiAgICogQHBhcmFtIHthbnl9IHZhbHVlIFdlIGRlZmF1bHQgdG8gdGhlIGluZGV4IG9mIHRoZSBjaGlsZC5cbiAgICovXG4gIG9uQ2hhbmdlOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgYWxsIGBCb3R0b21OYXZpZ2F0aW9uQWN0aW9uYHMgd2lsbCBzaG93IHRoZWlyIGxhYmVscy5cbiAgICogQnkgZGVmYXVsdCwgb25seSB0aGUgc2VsZWN0ZWQgYEJvdHRvbU5hdmlnYXRpb25BY3Rpb25gIHdpbGwgc2hvdyBpdHMgbGFiZWwuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBzaG93TGFiZWxzOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIFRoZSBzeXN0ZW0gcHJvcCB0aGF0IGFsbG93cyBkZWZpbmluZyBzeXN0ZW0gb3ZlcnJpZGVzIGFzIHdlbGwgYXMgYWRkaXRpb25hbCBDU1Mgc3R5bGVzLlxuICAgKi9cbiAgc3g6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuYm9vbF0pKSwgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKSxcbiAgLyoqXG4gICAqIFRoZSB2YWx1ZSBvZiB0aGUgY3VycmVudGx5IHNlbGVjdGVkIGBCb3R0b21OYXZpZ2F0aW9uQWN0aW9uYC5cbiAgICovXG4gIHZhbHVlOiBQcm9wVHlwZXMuYW55XG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgQm90dG9tTmF2aWdhdGlvbjsiLCJpbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzZXMnO1xuaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3MnO1xuZXhwb3J0IGZ1bmN0aW9uIGdldEJvdHRvbU5hdmlnYXRpb25BY3Rpb25VdGlsaXR5Q2xhc3Moc2xvdCkge1xuICByZXR1cm4gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoJ011aUJvdHRvbU5hdmlnYXRpb25BY3Rpb24nLCBzbG90KTtcbn1cbmNvbnN0IGJvdHRvbU5hdmlnYXRpb25BY3Rpb25DbGFzc2VzID0gZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcygnTXVpQm90dG9tTmF2aWdhdGlvbkFjdGlvbicsIFsncm9vdCcsICdpY29uT25seScsICdzZWxlY3RlZCcsICdsYWJlbCddKTtcbmV4cG9ydCBkZWZhdWx0IGJvdHRvbU5hdmlnYXRpb25BY3Rpb25DbGFzc2VzOyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImNsYXNzTmFtZVwiLCBcImljb25cIiwgXCJsYWJlbFwiLCBcIm9uQ2hhbmdlXCIsIFwib25DbGlja1wiLCBcInNlbGVjdGVkXCIsIFwic2hvd0xhYmVsXCIsIFwidmFsdWVcIl07XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgY29tcG9zZUNsYXNzZXMgZnJvbSAnQG11aS91dGlscy9jb21wb3NlQ2xhc3Nlcyc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJy4uL3N0eWxlcy9zdHlsZWQnO1xuaW1wb3J0IHsgdXNlRGVmYXVsdFByb3BzIH0gZnJvbSAnLi4vRGVmYXVsdFByb3BzUHJvdmlkZXInO1xuaW1wb3J0IEJ1dHRvbkJhc2UgZnJvbSAnLi4vQnV0dG9uQmFzZSc7XG5pbXBvcnQgdW5zdXBwb3J0ZWRQcm9wIGZyb20gJy4uL3V0aWxzL3Vuc3VwcG9ydGVkUHJvcCc7XG5pbXBvcnQgYm90dG9tTmF2aWdhdGlvbkFjdGlvbkNsYXNzZXMsIHsgZ2V0Qm90dG9tTmF2aWdhdGlvbkFjdGlvblV0aWxpdHlDbGFzcyB9IGZyb20gJy4vYm90dG9tTmF2aWdhdGlvbkFjdGlvbkNsYXNzZXMnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmltcG9ydCB7IGpzeHMgYXMgX2pzeHMgfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmNvbnN0IHVzZVV0aWxpdHlDbGFzc2VzID0gb3duZXJTdGF0ZSA9PiB7XG4gIGNvbnN0IHtcbiAgICBjbGFzc2VzLFxuICAgIHNob3dMYWJlbCxcbiAgICBzZWxlY3RlZFxuICB9ID0gb3duZXJTdGF0ZTtcbiAgY29uc3Qgc2xvdHMgPSB7XG4gICAgcm9vdDogWydyb290JywgIXNob3dMYWJlbCAmJiAhc2VsZWN0ZWQgJiYgJ2ljb25Pbmx5Jywgc2VsZWN0ZWQgJiYgJ3NlbGVjdGVkJ10sXG4gICAgbGFiZWw6IFsnbGFiZWwnLCAhc2hvd0xhYmVsICYmICFzZWxlY3RlZCAmJiAnaWNvbk9ubHknLCBzZWxlY3RlZCAmJiAnc2VsZWN0ZWQnXVxuICB9O1xuICByZXR1cm4gY29tcG9zZUNsYXNzZXMoc2xvdHMsIGdldEJvdHRvbU5hdmlnYXRpb25BY3Rpb25VdGlsaXR5Q2xhc3MsIGNsYXNzZXMpO1xufTtcbmNvbnN0IEJvdHRvbU5hdmlnYXRpb25BY3Rpb25Sb290ID0gc3R5bGVkKEJ1dHRvbkJhc2UsIHtcbiAgbmFtZTogJ011aUJvdHRvbU5hdmlnYXRpb25BY3Rpb24nLFxuICBzbG90OiAnUm9vdCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9ID0gcHJvcHM7XG4gICAgcmV0dXJuIFtzdHlsZXMucm9vdCwgIW93bmVyU3RhdGUuc2hvd0xhYmVsICYmICFvd25lclN0YXRlLnNlbGVjdGVkICYmIHN0eWxlcy5pY29uT25seV07XG4gIH1cbn0pKCh7XG4gIHRoZW1lLFxuICBvd25lclN0YXRlXG59KSA9PiBfZXh0ZW5kcyh7XG4gIHRyYW5zaXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZShbJ2NvbG9yJywgJ3BhZGRpbmctdG9wJ10sIHtcbiAgICBkdXJhdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuZHVyYXRpb24uc2hvcnRcbiAgfSksXG4gIHBhZGRpbmc6ICcwcHggMTJweCcsXG4gIG1pbldpZHRoOiA4MCxcbiAgbWF4V2lkdGg6IDE2OCxcbiAgY29sb3I6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlLnRleHQuc2Vjb25kYXJ5LFxuICBmbGV4RGlyZWN0aW9uOiAnY29sdW1uJyxcbiAgZmxleDogJzEnXG59LCAhb3duZXJTdGF0ZS5zaG93TGFiZWwgJiYgIW93bmVyU3RhdGUuc2VsZWN0ZWQgJiYge1xuICBwYWRkaW5nVG9wOiAxNFxufSwgIW93bmVyU3RhdGUuc2hvd0xhYmVsICYmICFvd25lclN0YXRlLnNlbGVjdGVkICYmICFvd25lclN0YXRlLmxhYmVsICYmIHtcbiAgcGFkZGluZ1RvcDogMFxufSwge1xuICBbYCYuJHtib3R0b21OYXZpZ2F0aW9uQWN0aW9uQ2xhc3Nlcy5zZWxlY3RlZH1gXToge1xuICAgIGNvbG9yOiAodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZS5wcmltYXJ5Lm1haW5cbiAgfVxufSkpO1xuY29uc3QgQm90dG9tTmF2aWdhdGlvbkFjdGlvbkxhYmVsID0gc3R5bGVkKCdzcGFuJywge1xuICBuYW1lOiAnTXVpQm90dG9tTmF2aWdhdGlvbkFjdGlvbicsXG4gIHNsb3Q6ICdMYWJlbCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4gc3R5bGVzLmxhYmVsXG59KSgoe1xuICB0aGVtZSxcbiAgb3duZXJTdGF0ZVxufSkgPT4gX2V4dGVuZHMoe1xuICBmb250RmFtaWx5OiB0aGVtZS50eXBvZ3JhcGh5LmZvbnRGYW1pbHksXG4gIGZvbnRTaXplOiB0aGVtZS50eXBvZ3JhcGh5LnB4VG9SZW0oMTIpLFxuICBvcGFjaXR5OiAxLFxuICB0cmFuc2l0aW9uOiAnZm9udC1zaXplIDAuMnMsIG9wYWNpdHkgMC4ycycsXG4gIHRyYW5zaXRpb25EZWxheTogJzAuMXMnXG59LCAhb3duZXJTdGF0ZS5zaG93TGFiZWwgJiYgIW93bmVyU3RhdGUuc2VsZWN0ZWQgJiYge1xuICBvcGFjaXR5OiAwLFxuICB0cmFuc2l0aW9uRGVsYXk6ICcwcydcbn0sIHtcbiAgW2AmLiR7Ym90dG9tTmF2aWdhdGlvbkFjdGlvbkNsYXNzZXMuc2VsZWN0ZWR9YF06IHtcbiAgICBmb250U2l6ZTogdGhlbWUudHlwb2dyYXBoeS5weFRvUmVtKDE0KVxuICB9XG59KSk7XG5jb25zdCBCb3R0b21OYXZpZ2F0aW9uQWN0aW9uID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gQm90dG9tTmF2aWdhdGlvbkFjdGlvbihpblByb3BzLCByZWYpIHtcbiAgY29uc3QgcHJvcHMgPSB1c2VEZWZhdWx0UHJvcHMoe1xuICAgIHByb3BzOiBpblByb3BzLFxuICAgIG5hbWU6ICdNdWlCb3R0b21OYXZpZ2F0aW9uQWN0aW9uJ1xuICB9KTtcbiAgY29uc3Qge1xuICAgICAgY2xhc3NOYW1lLFxuICAgICAgaWNvbixcbiAgICAgIGxhYmVsLFxuICAgICAgb25DaGFuZ2UsXG4gICAgICBvbkNsaWNrXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QvcHJvcC10eXBlcyAtLSBwcml2YXRlLCBhbHdheXMgb3ZlcnJpZGRlbiBieSBCb3R0b21OYXZpZ2F0aW9uXG4gICAgICAsXG5cbiAgICAgIHZhbHVlXG4gICAgfSA9IHByb3BzLFxuICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIF9leGNsdWRlZCk7XG4gIGNvbnN0IG93bmVyU3RhdGUgPSBwcm9wcztcbiAgY29uc3QgY2xhc3NlcyA9IHVzZVV0aWxpdHlDbGFzc2VzKG93bmVyU3RhdGUpO1xuICBjb25zdCBoYW5kbGVDaGFuZ2UgPSBldmVudCA9PiB7XG4gICAgaWYgKG9uQ2hhbmdlKSB7XG4gICAgICBvbkNoYW5nZShldmVudCwgdmFsdWUpO1xuICAgIH1cbiAgICBpZiAob25DbGljaykge1xuICAgICAgb25DbGljayhldmVudCk7XG4gICAgfVxuICB9O1xuICByZXR1cm4gLyojX19QVVJFX18qL19qc3hzKEJvdHRvbU5hdmlnYXRpb25BY3Rpb25Sb290LCBfZXh0ZW5kcyh7XG4gICAgcmVmOiByZWYsXG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lKSxcbiAgICBmb2N1c1JpcHBsZTogdHJ1ZSxcbiAgICBvbkNsaWNrOiBoYW5kbGVDaGFuZ2UsXG4gICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZVxuICB9LCBvdGhlciwge1xuICAgIGNoaWxkcmVuOiBbaWNvbiwgLyojX19QVVJFX18qL19qc3goQm90dG9tTmF2aWdhdGlvbkFjdGlvbkxhYmVsLCB7XG4gICAgICBjbGFzc05hbWU6IGNsYXNzZXMubGFiZWwsXG4gICAgICBvd25lclN0YXRlOiBvd25lclN0YXRlLFxuICAgICAgY2hpbGRyZW46IGxhYmVsXG4gICAgfSldXG4gIH0pKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gQm90dG9tTmF2aWdhdGlvbkFjdGlvbi5wcm9wVHlwZXMgLyogcmVtb3ZlLXByb3B0eXBlcyAqLyA9IHtcbiAgLy8g4pSM4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAIFdhcm5pbmcg4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSQXG4gIC8vIOKUgiBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMuIOKUglxuICAvLyDilIIgICAgVG8gdXBkYXRlIHRoZW0sIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIGBwbnBtIHByb3B0eXBlc2AuICAgICDilIJcbiAgLy8g4pSU4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSYXG4gIC8qKlxuICAgKiBUaGlzIHByb3AgaXNuJ3Qgc3VwcG9ydGVkLlxuICAgKiBVc2UgdGhlIGBjb21wb25lbnRgIHByb3AgaWYgeW91IG5lZWQgdG8gY2hhbmdlIHRoZSBjaGlsZHJlbiBzdHJ1Y3R1cmUuXG4gICAqL1xuICBjaGlsZHJlbjogdW5zdXBwb3J0ZWRQcm9wLFxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIFRoZSBpY29uIHRvIGRpc3BsYXkuXG4gICAqL1xuICBpY29uOiBQcm9wVHlwZXMubm9kZSxcbiAgLyoqXG4gICAqIFRoZSBsYWJlbCBlbGVtZW50LlxuICAgKi9cbiAgbGFiZWw6IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25DaGFuZ2U6IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25DbGljazogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBgQm90dG9tTmF2aWdhdGlvbkFjdGlvbmAgd2lsbCBzaG93IGl0cyBsYWJlbC5cbiAgICogQnkgZGVmYXVsdCwgb25seSB0aGUgc2VsZWN0ZWQgYEJvdHRvbU5hdmlnYXRpb25BY3Rpb25gXG4gICAqIGluc2lkZSBgQm90dG9tTmF2aWdhdGlvbmAgd2lsbCBzaG93IGl0cyBsYWJlbC5cbiAgICpcbiAgICogVGhlIHByb3AgZGVmYXVsdHMgdG8gdGhlIHZhbHVlIChgZmFsc2VgKSBpbmhlcml0ZWQgZnJvbSB0aGUgcGFyZW50IEJvdHRvbU5hdmlnYXRpb24gY29tcG9uZW50LlxuICAgKi9cbiAgc2hvd0xhYmVsOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIFRoZSBzeXN0ZW0gcHJvcCB0aGF0IGFsbG93cyBkZWZpbmluZyBzeXN0ZW0gb3ZlcnJpZGVzIGFzIHdlbGwgYXMgYWRkaXRpb25hbCBDU1Mgc3R5bGVzLlxuICAgKi9cbiAgc3g6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuYm9vbF0pKSwgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKSxcbiAgLyoqXG4gICAqIFlvdSBjYW4gcHJvdmlkZSB5b3VyIG93biB2YWx1ZS4gT3RoZXJ3aXNlLCB3ZSBmYWxsYmFjayB0byB0aGUgY2hpbGQgcG9zaXRpb24gaW5kZXguXG4gICAqL1xuICB2YWx1ZTogUHJvcFR5cGVzLmFueVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IEJvdHRvbU5hdmlnYXRpb25BY3Rpb247IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgY3JlYXRlU3ZnSWNvbiBmcm9tICcuLi8uLi91dGlscy9jcmVhdGVTdmdJY29uJztcblxuLyoqXG4gKiBAaWdub3JlIC0gaW50ZXJuYWwgY29tcG9uZW50LlxuICovXG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuZXhwb3J0IGRlZmF1bHQgY3JlYXRlU3ZnSWNvbiggLyojX19QVVJFX18qL19qc3goXCJwYXRoXCIsIHtcbiAgZDogXCJNNiAxMGMtMS4xIDAtMiAuOS0yIDJzLjkgMiAyIDIgMi0uOSAyLTItLjktMi0yLTJ6bTEyIDBjLTEuMSAwLTIgLjktMiAycy45IDIgMiAyIDItLjkgMi0yLS45LTItMi0yem0tNiAwYy0xLjEgMC0yIC45LTIgMnMuOSAyIDIgMiAyLS45IDItMi0uOS0yLTItMnpcIlxufSksICdNb3JlSG9yaXonKTsiLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJzbG90c1wiLCBcInNsb3RQcm9wc1wiXTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBlbXBoYXNpemUgfSBmcm9tICdAbXVpL3N5c3RlbS9jb2xvck1hbmlwdWxhdG9yJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnLi4vc3R5bGVzL3N0eWxlZCc7XG5pbXBvcnQgTW9yZUhvcml6SWNvbiBmcm9tICcuLi9pbnRlcm5hbC9zdmctaWNvbnMvTW9yZUhvcml6JztcbmltcG9ydCBCdXR0b25CYXNlIGZyb20gJy4uL0J1dHRvbkJhc2UnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmNvbnN0IEJyZWFkY3J1bWJDb2xsYXBzZWRCdXR0b24gPSBzdHlsZWQoQnV0dG9uQmFzZSkoKHtcbiAgdGhlbWVcbn0pID0+IF9leHRlbmRzKHtcbiAgZGlzcGxheTogJ2ZsZXgnLFxuICBtYXJnaW5MZWZ0OiBgY2FsYygke3RoZW1lLnNwYWNpbmcoMSl9ICogMC41KWAsXG4gIG1hcmdpblJpZ2h0OiBgY2FsYygke3RoZW1lLnNwYWNpbmcoMSl9ICogMC41KWBcbn0sIHRoZW1lLnBhbGV0dGUubW9kZSA9PT0gJ2xpZ2h0JyA/IHtcbiAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLmdyZXlbMTAwXSxcbiAgY29sb3I6IHRoZW1lLnBhbGV0dGUuZ3JleVs3MDBdXG59IDoge1xuICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGUuZ3JleVs3MDBdLFxuICBjb2xvcjogdGhlbWUucGFsZXR0ZS5ncmV5WzEwMF1cbn0sIHtcbiAgYm9yZGVyUmFkaXVzOiAyLFxuICAnJjpob3ZlciwgJjpmb2N1cyc6IF9leHRlbmRzKHt9LCB0aGVtZS5wYWxldHRlLm1vZGUgPT09ICdsaWdodCcgPyB7XG4gICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLmdyZXlbMjAwXVxuICB9IDoge1xuICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFsZXR0ZS5ncmV5WzYwMF1cbiAgfSksXG4gICcmOmFjdGl2ZSc6IF9leHRlbmRzKHtcbiAgICBib3hTaGFkb3c6IHRoZW1lLnNoYWRvd3NbMF1cbiAgfSwgdGhlbWUucGFsZXR0ZS5tb2RlID09PSAnbGlnaHQnID8ge1xuICAgIGJhY2tncm91bmRDb2xvcjogZW1waGFzaXplKHRoZW1lLnBhbGV0dGUuZ3JleVsyMDBdLCAwLjEyKVxuICB9IDoge1xuICAgIGJhY2tncm91bmRDb2xvcjogZW1waGFzaXplKHRoZW1lLnBhbGV0dGUuZ3JleVs2MDBdLCAwLjEyKVxuICB9KVxufSkpO1xuY29uc3QgQnJlYWRjcnVtYkNvbGxhcHNlZEljb24gPSBzdHlsZWQoTW9yZUhvcml6SWNvbikoe1xuICB3aWR0aDogMjQsXG4gIGhlaWdodDogMTZcbn0pO1xuXG4vKipcbiAqIEBpZ25vcmUgLSBpbnRlcm5hbCBjb21wb25lbnQuXG4gKi9cbmZ1bmN0aW9uIEJyZWFkY3J1bWJDb2xsYXBzZWQocHJvcHMpIHtcbiAgY29uc3Qge1xuICAgICAgc2xvdHMgPSB7fSxcbiAgICAgIHNsb3RQcm9wcyA9IHt9XG4gICAgfSA9IHByb3BzLFxuICAgIG90aGVyUHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkKTtcbiAgY29uc3Qgb3duZXJTdGF0ZSA9IHByb3BzO1xuICByZXR1cm4gLyojX19QVVJFX18qL19qc3goXCJsaVwiLCB7XG4gICAgY2hpbGRyZW46IC8qI19fUFVSRV9fKi9fanN4KEJyZWFkY3J1bWJDb2xsYXBzZWRCdXR0b24sIF9leHRlbmRzKHtcbiAgICAgIGZvY3VzUmlwcGxlOiB0cnVlXG4gICAgfSwgb3RoZXJQcm9wcywge1xuICAgICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZSxcbiAgICAgIGNoaWxkcmVuOiAvKiNfX1BVUkVfXyovX2pzeChCcmVhZGNydW1iQ29sbGFwc2VkSWNvbiwgX2V4dGVuZHMoe1xuICAgICAgICBhczogc2xvdHMuQ29sbGFwc2VkSWNvbixcbiAgICAgICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZVxuICAgICAgfSwgc2xvdFByb3BzLmNvbGxhcHNlZEljb24pKVxuICAgIH0pKVxuICB9KTtcbn1cbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IEJyZWFkY3J1bWJDb2xsYXBzZWQucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogVGhlIHByb3BzIHVzZWQgZm9yIHRoZSBDb2xsYXBzZWRJY29uIHNsb3QuXG4gICAqIEBkZWZhdWx0IHt9XG4gICAqL1xuICBzbG90UHJvcHM6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgY29sbGFwc2VkSWNvbjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKVxuICB9KSxcbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnRzIHVzZWQgZm9yIGVhY2ggc2xvdCBpbnNpZGUgdGhlIEJyZWFkY3VtYkNvbGxhcHNlZC5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIEhUTUwgZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICogQGRlZmF1bHQge31cbiAgICovXG4gIHNsb3RzOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIENvbGxhcHNlZEljb246IFByb3BUeXBlcy5lbGVtZW50VHlwZVxuICB9KSxcbiAgLyoqXG4gICAqIFRoZSBzeXN0ZW0gcHJvcCB0aGF0IGFsbG93cyBkZWZpbmluZyBzeXN0ZW0gb3ZlcnJpZGVzIGFzIHdlbGwgYXMgYWRkaXRpb25hbCBDU1Mgc3R5bGVzLlxuICAgKi9cbiAgc3g6IFByb3BUeXBlcy5vYmplY3Rcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCBCcmVhZGNydW1iQ29sbGFwc2VkOyIsImltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3Nlcyc7XG5pbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3MgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzcyc7XG5leHBvcnQgZnVuY3Rpb24gZ2V0QnJlYWRjcnVtYnNVdGlsaXR5Q2xhc3Moc2xvdCkge1xuICByZXR1cm4gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoJ011aUJyZWFkY3J1bWJzJywgc2xvdCk7XG59XG5jb25zdCBicmVhZGNydW1ic0NsYXNzZXMgPSBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzKCdNdWlCcmVhZGNydW1icycsIFsncm9vdCcsICdvbCcsICdsaScsICdzZXBhcmF0b3InXSk7XG5leHBvcnQgZGVmYXVsdCBicmVhZGNydW1ic0NsYXNzZXM7IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiY2hpbGRyZW5cIiwgXCJjbGFzc05hbWVcIiwgXCJjb21wb25lbnRcIiwgXCJzbG90c1wiLCBcInNsb3RQcm9wc1wiLCBcImV4cGFuZFRleHRcIiwgXCJpdGVtc0FmdGVyQ29sbGFwc2VcIiwgXCJpdGVtc0JlZm9yZUNvbGxhcHNlXCIsIFwibWF4SXRlbXNcIiwgXCJzZXBhcmF0b3JcIl07XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBpc0ZyYWdtZW50IH0gZnJvbSAncmVhY3QtaXMnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IGludGVnZXJQcm9wVHlwZSBmcm9tICdAbXVpL3V0aWxzL2ludGVnZXJQcm9wVHlwZSc7XG5pbXBvcnQgY29tcG9zZUNsYXNzZXMgZnJvbSAnQG11aS91dGlscy9jb21wb3NlQ2xhc3Nlcyc7XG5pbXBvcnQgdXNlU2xvdFByb3BzIGZyb20gJ0BtdWkvdXRpbHMvdXNlU2xvdFByb3BzJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnLi4vc3R5bGVzL3N0eWxlZCc7XG5pbXBvcnQgeyB1c2VEZWZhdWx0UHJvcHMgfSBmcm9tICcuLi9EZWZhdWx0UHJvcHNQcm92aWRlcic7XG5pbXBvcnQgVHlwb2dyYXBoeSBmcm9tICcuLi9UeXBvZ3JhcGh5JztcbmltcG9ydCBCcmVhZGNydW1iQ29sbGFwc2VkIGZyb20gJy4vQnJlYWRjcnVtYkNvbGxhcHNlZCc7XG5pbXBvcnQgYnJlYWRjcnVtYnNDbGFzc2VzLCB7IGdldEJyZWFkY3J1bWJzVXRpbGl0eUNsYXNzIH0gZnJvbSAnLi9icmVhZGNydW1ic0NsYXNzZXMnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmNvbnN0IHVzZVV0aWxpdHlDbGFzc2VzID0gb3duZXJTdGF0ZSA9PiB7XG4gIGNvbnN0IHtcbiAgICBjbGFzc2VzXG4gIH0gPSBvd25lclN0YXRlO1xuICBjb25zdCBzbG90cyA9IHtcbiAgICByb290OiBbJ3Jvb3QnXSxcbiAgICBsaTogWydsaSddLFxuICAgIG9sOiBbJ29sJ10sXG4gICAgc2VwYXJhdG9yOiBbJ3NlcGFyYXRvciddXG4gIH07XG4gIHJldHVybiBjb21wb3NlQ2xhc3NlcyhzbG90cywgZ2V0QnJlYWRjcnVtYnNVdGlsaXR5Q2xhc3MsIGNsYXNzZXMpO1xufTtcbmNvbnN0IEJyZWFkY3J1bWJzUm9vdCA9IHN0eWxlZChUeXBvZ3JhcGh5LCB7XG4gIG5hbWU6ICdNdWlCcmVhZGNydW1icycsXG4gIHNsb3Q6ICdSb290JyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiB7XG4gICAgcmV0dXJuIFt7XG4gICAgICBbYCYgLiR7YnJlYWRjcnVtYnNDbGFzc2VzLmxpfWBdOiBzdHlsZXMubGlcbiAgICB9LCBzdHlsZXMucm9vdF07XG4gIH1cbn0pKHt9KTtcbmNvbnN0IEJyZWFkY3J1bWJzT2wgPSBzdHlsZWQoJ29sJywge1xuICBuYW1lOiAnTXVpQnJlYWRjcnVtYnMnLFxuICBzbG90OiAnT2wnLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHN0eWxlcy5vbFxufSkoe1xuICBkaXNwbGF5OiAnZmxleCcsXG4gIGZsZXhXcmFwOiAnd3JhcCcsXG4gIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICBwYWRkaW5nOiAwLFxuICBtYXJnaW46IDAsXG4gIGxpc3RTdHlsZTogJ25vbmUnXG59KTtcbmNvbnN0IEJyZWFkY3J1bWJzU2VwYXJhdG9yID0gc3R5bGVkKCdsaScsIHtcbiAgbmFtZTogJ011aUJyZWFkY3J1bWJzJyxcbiAgc2xvdDogJ1NlcGFyYXRvcicsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4gc3R5bGVzLnNlcGFyYXRvclxufSkoe1xuICBkaXNwbGF5OiAnZmxleCcsXG4gIHVzZXJTZWxlY3Q6ICdub25lJyxcbiAgbWFyZ2luTGVmdDogOCxcbiAgbWFyZ2luUmlnaHQ6IDhcbn0pO1xuZnVuY3Rpb24gaW5zZXJ0U2VwYXJhdG9ycyhpdGVtcywgY2xhc3NOYW1lLCBzZXBhcmF0b3IsIG93bmVyU3RhdGUpIHtcbiAgcmV0dXJuIGl0ZW1zLnJlZHVjZSgoYWNjLCBjdXJyZW50LCBpbmRleCkgPT4ge1xuICAgIGlmIChpbmRleCA8IGl0ZW1zLmxlbmd0aCAtIDEpIHtcbiAgICAgIGFjYyA9IGFjYy5jb25jYXQoY3VycmVudCwgLyojX19QVVJFX18qL19qc3goQnJlYWRjcnVtYnNTZXBhcmF0b3IsIHtcbiAgICAgICAgXCJhcmlhLWhpZGRlblwiOiB0cnVlLFxuICAgICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZSxcbiAgICAgICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZSxcbiAgICAgICAgY2hpbGRyZW46IHNlcGFyYXRvclxuICAgICAgfSwgYHNlcGFyYXRvci0ke2luZGV4fWApKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYWNjLnB1c2goY3VycmVudCk7XG4gICAgfVxuICAgIHJldHVybiBhY2M7XG4gIH0sIFtdKTtcbn1cbmNvbnN0IEJyZWFkY3J1bWJzID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gQnJlYWRjcnVtYnMoaW5Qcm9wcywgcmVmKSB7XG4gIGNvbnN0IHByb3BzID0gdXNlRGVmYXVsdFByb3BzKHtcbiAgICBwcm9wczogaW5Qcm9wcyxcbiAgICBuYW1lOiAnTXVpQnJlYWRjcnVtYnMnXG4gIH0pO1xuICBjb25zdCB7XG4gICAgICBjaGlsZHJlbixcbiAgICAgIGNsYXNzTmFtZSxcbiAgICAgIGNvbXBvbmVudCA9ICduYXYnLFxuICAgICAgc2xvdHMgPSB7fSxcbiAgICAgIHNsb3RQcm9wcyA9IHt9LFxuICAgICAgZXhwYW5kVGV4dCA9ICdTaG93IHBhdGgnLFxuICAgICAgaXRlbXNBZnRlckNvbGxhcHNlID0gMSxcbiAgICAgIGl0ZW1zQmVmb3JlQ29sbGFwc2UgPSAxLFxuICAgICAgbWF4SXRlbXMgPSA4LFxuICAgICAgc2VwYXJhdG9yID0gJy8nXG4gICAgfSA9IHByb3BzLFxuICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIF9leGNsdWRlZCk7XG4gIGNvbnN0IFtleHBhbmRlZCwgc2V0RXhwYW5kZWRdID0gUmVhY3QudXNlU3RhdGUoZmFsc2UpO1xuICBjb25zdCBvd25lclN0YXRlID0gX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgY29tcG9uZW50LFxuICAgIGV4cGFuZGVkLFxuICAgIGV4cGFuZFRleHQsXG4gICAgaXRlbXNBZnRlckNvbGxhcHNlLFxuICAgIGl0ZW1zQmVmb3JlQ29sbGFwc2UsXG4gICAgbWF4SXRlbXMsXG4gICAgc2VwYXJhdG9yXG4gIH0pO1xuICBjb25zdCBjbGFzc2VzID0gdXNlVXRpbGl0eUNsYXNzZXMob3duZXJTdGF0ZSk7XG4gIGNvbnN0IGNvbGxhcHNlZEljb25TbG90UHJvcHMgPSB1c2VTbG90UHJvcHMoe1xuICAgIGVsZW1lbnRUeXBlOiBzbG90cy5Db2xsYXBzZWRJY29uLFxuICAgIGV4dGVybmFsU2xvdFByb3BzOiBzbG90UHJvcHMuY29sbGFwc2VkSWNvbixcbiAgICBvd25lclN0YXRlXG4gIH0pO1xuICBjb25zdCBsaXN0UmVmID0gUmVhY3QudXNlUmVmKG51bGwpO1xuICBjb25zdCByZW5kZXJJdGVtc0JlZm9yZUFuZEFmdGVyID0gYWxsSXRlbXMgPT4ge1xuICAgIGNvbnN0IGhhbmRsZUNsaWNrRXhwYW5kID0gKCkgPT4ge1xuICAgICAgc2V0RXhwYW5kZWQodHJ1ZSk7XG5cbiAgICAgIC8vIFRoZSBjbGlja2VkIGVsZW1lbnQgcmVjZWl2ZWQgdGhlIGZvY3VzIGJ1dCBnZXRzIHJlbW92ZWQgZnJvbSB0aGUgRE9NLlxuICAgICAgLy8gTGV0J3Mga2VlcCB0aGUgZm9jdXMgaW4gdGhlIGNvbXBvbmVudCBhZnRlciBleHBhbmRpbmcuXG4gICAgICAvLyBNb3ZpbmcgaXQgdG8gdGhlIDxvbD4gb3IgPG5hdj4gZG9lcyBub3QgY2F1c2UgYW55IGFubm91bmNlbWVudCBpbiBOVkRBLlxuICAgICAgLy8gQnkgbW92aW5nIGl0IHRvIHNvbWUgbGluay9idXR0b24gYXQgbGVhc3Qgd2UgaGF2ZSBzb21lIGFubm91bmNlbWVudC5cbiAgICAgIGNvbnN0IGZvY3VzYWJsZSA9IGxpc3RSZWYuY3VycmVudC5xdWVyeVNlbGVjdG9yKCdhW2hyZWZdLGJ1dHRvbixbdGFiaW5kZXhdJyk7XG4gICAgICBpZiAoZm9jdXNhYmxlKSB7XG4gICAgICAgIGZvY3VzYWJsZS5mb2N1cygpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICAvLyBUaGlzIGRlZmVuZHMgYWdhaW5zdCBzb21lb25lIHBhc3Npbmcgd2VpcmQgaW5wdXQsIHRvIGVuc3VyZSB0aGF0IGlmIGFsbFxuICAgIC8vIGl0ZW1zIHdvdWxkIGJlIHNob3duIGFueXdheSwgd2UganVzdCBzaG93IGFsbCBpdGVtcyB3aXRob3V0IHRoZSBFbGxpcHNpc0l0ZW1cbiAgICBpZiAoaXRlbXNCZWZvcmVDb2xsYXBzZSArIGl0ZW1zQWZ0ZXJDb2xsYXBzZSA+PSBhbGxJdGVtcy5sZW5ndGgpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoWydNVUk6IFlvdSBoYXZlIHByb3ZpZGVkIGFuIGludmFsaWQgY29tYmluYXRpb24gb2YgcHJvcHMgdG8gdGhlIEJyZWFkY3J1bWJzLicsIGBpdGVtc0FmdGVyQ29sbGFwc2U9eyR7aXRlbXNBZnRlckNvbGxhcHNlfX0gKyBpdGVtc0JlZm9yZUNvbGxhcHNlPXske2l0ZW1zQmVmb3JlQ29sbGFwc2V9fSA+PSBtYXhJdGVtcz17JHttYXhJdGVtc319YF0uam9pbignXFxuJykpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGFsbEl0ZW1zO1xuICAgIH1cbiAgICByZXR1cm4gWy4uLmFsbEl0ZW1zLnNsaWNlKDAsIGl0ZW1zQmVmb3JlQ29sbGFwc2UpLCAvKiNfX1BVUkVfXyovX2pzeChCcmVhZGNydW1iQ29sbGFwc2VkLCB7XG4gICAgICBcImFyaWEtbGFiZWxcIjogZXhwYW5kVGV4dCxcbiAgICAgIHNsb3RzOiB7XG4gICAgICAgIENvbGxhcHNlZEljb246IHNsb3RzLkNvbGxhcHNlZEljb25cbiAgICAgIH0sXG4gICAgICBzbG90UHJvcHM6IHtcbiAgICAgICAgY29sbGFwc2VkSWNvbjogY29sbGFwc2VkSWNvblNsb3RQcm9wc1xuICAgICAgfSxcbiAgICAgIG9uQ2xpY2s6IGhhbmRsZUNsaWNrRXhwYW5kXG4gICAgfSwgXCJlbGxpcHNpc1wiKSwgLi4uYWxsSXRlbXMuc2xpY2UoYWxsSXRlbXMubGVuZ3RoIC0gaXRlbXNBZnRlckNvbGxhcHNlLCBhbGxJdGVtcy5sZW5ndGgpXTtcbiAgfTtcbiAgY29uc3QgYWxsSXRlbXMgPSBSZWFjdC5DaGlsZHJlbi50b0FycmF5KGNoaWxkcmVuKS5maWx0ZXIoY2hpbGQgPT4ge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAoaXNGcmFnbWVudChjaGlsZCkpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihbXCJNVUk6IFRoZSBCcmVhZGNydW1icyBjb21wb25lbnQgZG9lc24ndCBhY2NlcHQgYSBGcmFnbWVudCBhcyBhIGNoaWxkLlwiLCAnQ29uc2lkZXIgcHJvdmlkaW5nIGFuIGFycmF5IGluc3RlYWQuJ10uam9pbignXFxuJykpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmlzVmFsaWRFbGVtZW50KGNoaWxkKTtcbiAgfSkubWFwKChjaGlsZCwgaW5kZXgpID0+IC8qI19fUFVSRV9fKi9fanN4KFwibGlcIiwge1xuICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5saSxcbiAgICBjaGlsZHJlbjogY2hpbGRcbiAgfSwgYGNoaWxkLSR7aW5kZXh9YCkpO1xuICByZXR1cm4gLyojX19QVVJFX18qL19qc3goQnJlYWRjcnVtYnNSb290LCBfZXh0ZW5kcyh7XG4gICAgcmVmOiByZWYsXG4gICAgY29tcG9uZW50OiBjb21wb25lbnQsXG4gICAgY29sb3I6IFwidGV4dC5zZWNvbmRhcnlcIixcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWUpLFxuICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGVcbiAgfSwgb3RoZXIsIHtcbiAgICBjaGlsZHJlbjogLyojX19QVVJFX18qL19qc3goQnJlYWRjcnVtYnNPbCwge1xuICAgICAgY2xhc3NOYW1lOiBjbGFzc2VzLm9sLFxuICAgICAgcmVmOiBsaXN0UmVmLFxuICAgICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZSxcbiAgICAgIGNoaWxkcmVuOiBpbnNlcnRTZXBhcmF0b3JzKGV4cGFuZGVkIHx8IG1heEl0ZW1zICYmIGFsbEl0ZW1zLmxlbmd0aCA8PSBtYXhJdGVtcyA/IGFsbEl0ZW1zIDogcmVuZGVySXRlbXNCZWZvcmVBbmRBZnRlcihhbGxJdGVtcyksIGNsYXNzZXMuc2VwYXJhdG9yLCBzZXBhcmF0b3IsIG93bmVyU3RhdGUpXG4gICAgfSlcbiAgfSkpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBCcmVhZGNydW1icy5wcm9wVHlwZXMgLyogcmVtb3ZlLXByb3B0eXBlcyAqLyA9IHtcbiAgLy8g4pSM4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAIFdhcm5pbmcg4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSQXG4gIC8vIOKUgiBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMuIOKUglxuICAvLyDilIIgICAgVG8gdXBkYXRlIHRoZW0sIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIGBwbnBtIHByb3B0eXBlc2AuICAgICDilIJcbiAgLy8g4pSU4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSYXG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHJvb3Qgbm9kZS5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIEhUTUwgZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuICAvKipcbiAgICogT3ZlcnJpZGUgdGhlIGRlZmF1bHQgbGFiZWwgZm9yIHRoZSBleHBhbmQgYnV0dG9uLlxuICAgKlxuICAgKiBGb3IgbG9jYWxpemF0aW9uIHB1cnBvc2VzLCB5b3UgY2FuIHVzZSB0aGUgcHJvdmlkZWQgW3RyYW5zbGF0aW9uc10oL21hdGVyaWFsLXVpL2d1aWRlcy9sb2NhbGl6YXRpb24vKS5cbiAgICogQGRlZmF1bHQgJ1Nob3cgcGF0aCdcbiAgICovXG4gIGV4cGFuZFRleHQ6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBJZiBtYXggaXRlbXMgaXMgZXhjZWVkZWQsIHRoZSBudW1iZXIgb2YgaXRlbXMgdG8gc2hvdyBhZnRlciB0aGUgZWxsaXBzaXMuXG4gICAqIEBkZWZhdWx0IDFcbiAgICovXG4gIGl0ZW1zQWZ0ZXJDb2xsYXBzZTogaW50ZWdlclByb3BUeXBlLFxuICAvKipcbiAgICogSWYgbWF4IGl0ZW1zIGlzIGV4Y2VlZGVkLCB0aGUgbnVtYmVyIG9mIGl0ZW1zIHRvIHNob3cgYmVmb3JlIHRoZSBlbGxpcHNpcy5cbiAgICogQGRlZmF1bHQgMVxuICAgKi9cbiAgaXRlbXNCZWZvcmVDb2xsYXBzZTogaW50ZWdlclByb3BUeXBlLFxuICAvKipcbiAgICogU3BlY2lmaWVzIHRoZSBtYXhpbXVtIG51bWJlciBvZiBicmVhZGNydW1icyB0byBkaXNwbGF5LiBXaGVuIHRoZXJlIGFyZSBtb3JlXG4gICAqIHRoYW4gdGhlIG1heGltdW0gbnVtYmVyLCBvbmx5IHRoZSBmaXJzdCBgaXRlbXNCZWZvcmVDb2xsYXBzZWAgYW5kIGxhc3QgYGl0ZW1zQWZ0ZXJDb2xsYXBzZWBcbiAgICogd2lsbCBiZSBzaG93biwgd2l0aCBhbiBlbGxpcHNpcyBpbiBiZXR3ZWVuLlxuICAgKiBAZGVmYXVsdCA4XG4gICAqL1xuICBtYXhJdGVtczogaW50ZWdlclByb3BUeXBlLFxuICAvKipcbiAgICogQ3VzdG9tIHNlcGFyYXRvciBub2RlLlxuICAgKiBAZGVmYXVsdCAnLydcbiAgICovXG4gIHNlcGFyYXRvcjogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBUaGUgcHJvcHMgdXNlZCBmb3IgZWFjaCBzbG90IGluc2lkZSB0aGUgQnJlYWRjdW1iLlxuICAgKiBAZGVmYXVsdCB7fVxuICAgKi9cbiAgc2xvdFByb3BzOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGNvbGxhcHNlZEljb246IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSlcbiAgfSksXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50cyB1c2VkIGZvciBlYWNoIHNsb3QgaW5zaWRlIHRoZSBCcmVhZGN1bWIuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBIVE1MIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqIEBkZWZhdWx0IHt9XG4gICAqL1xuICBzbG90czogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBDb2xsYXBzZWRJY29uOiBQcm9wVHlwZXMuZWxlbWVudFR5cGVcbiAgfSksXG4gIC8qKlxuICAgKiBUaGUgc3lzdGVtIHByb3AgdGhhdCBhbGxvd3MgZGVmaW5pbmcgc3lzdGVtIG92ZXJyaWRlcyBhcyB3ZWxsIGFzIGFkZGl0aW9uYWwgQ1NTIHN0eWxlcy5cbiAgICovXG4gIHN4OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLmJvb2xdKSksIFByb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCBCcmVhZGNydW1iczsiLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbi8qKlxuICogR2V0cyBvbmx5IHRoZSB2YWxpZCBjaGlsZHJlbiBvZiBhIGNvbXBvbmVudCxcbiAqIGFuZCBpZ25vcmVzIGFueSBudWxsaXNoIG9yIGZhbHN5IGNoaWxkLlxuICpcbiAqIEBwYXJhbSBjaGlsZHJlbiB0aGUgY2hpbGRyZW5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0VmFsaWRSZWFjdENoaWxkcmVuKGNoaWxkcmVuKSB7XG4gIHJldHVybiBSZWFjdC5DaGlsZHJlbi50b0FycmF5KGNoaWxkcmVuKS5maWx0ZXIoY2hpbGQgPT4gLyojX19QVVJFX18qL1JlYWN0LmlzVmFsaWRFbGVtZW50KGNoaWxkKSk7XG59IiwiaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzc2VzJztcbmltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzJztcbmV4cG9ydCBmdW5jdGlvbiBnZXRCdXR0b25Hcm91cFV0aWxpdHlDbGFzcyhzbG90KSB7XG4gIHJldHVybiBnZW5lcmF0ZVV0aWxpdHlDbGFzcygnTXVpQnV0dG9uR3JvdXAnLCBzbG90KTtcbn1cbmNvbnN0IGJ1dHRvbkdyb3VwQ2xhc3NlcyA9IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMoJ011aUJ1dHRvbkdyb3VwJywgWydyb290JywgJ2NvbnRhaW5lZCcsICdvdXRsaW5lZCcsICd0ZXh0JywgJ2Rpc2FibGVFbGV2YXRpb24nLCAnZGlzYWJsZWQnLCAnZmlyc3RCdXR0b24nLCAnZnVsbFdpZHRoJywgJ3ZlcnRpY2FsJywgJ2dyb3VwZWQnLCAnZ3JvdXBlZEhvcml6b250YWwnLCAnZ3JvdXBlZFZlcnRpY2FsJywgJ2dyb3VwZWRUZXh0JywgJ2dyb3VwZWRUZXh0SG9yaXpvbnRhbCcsICdncm91cGVkVGV4dFZlcnRpY2FsJywgJ2dyb3VwZWRUZXh0UHJpbWFyeScsICdncm91cGVkVGV4dFNlY29uZGFyeScsICdncm91cGVkT3V0bGluZWQnLCAnZ3JvdXBlZE91dGxpbmVkSG9yaXpvbnRhbCcsICdncm91cGVkT3V0bGluZWRWZXJ0aWNhbCcsICdncm91cGVkT3V0bGluZWRQcmltYXJ5JywgJ2dyb3VwZWRPdXRsaW5lZFNlY29uZGFyeScsICdncm91cGVkQ29udGFpbmVkJywgJ2dyb3VwZWRDb250YWluZWRIb3Jpem9udGFsJywgJ2dyb3VwZWRDb250YWluZWRWZXJ0aWNhbCcsICdncm91cGVkQ29udGFpbmVkUHJpbWFyeScsICdncm91cGVkQ29udGFpbmVkU2Vjb25kYXJ5JywgJ2xhc3RCdXR0b24nLCAnbWlkZGxlQnV0dG9uJ10pO1xuZXhwb3J0IGRlZmF1bHQgYnV0dG9uR3JvdXBDbGFzc2VzOyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImNoaWxkcmVuXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29sb3JcIiwgXCJjb21wb25lbnRcIiwgXCJkaXNhYmxlZFwiLCBcImRpc2FibGVFbGV2YXRpb25cIiwgXCJkaXNhYmxlRm9jdXNSaXBwbGVcIiwgXCJkaXNhYmxlUmlwcGxlXCIsIFwiZnVsbFdpZHRoXCIsIFwib3JpZW50YXRpb25cIiwgXCJzaXplXCIsIFwidmFyaWFudFwiXTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCBjb21wb3NlQ2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2NvbXBvc2VDbGFzc2VzJztcbmltcG9ydCB7IGFscGhhIH0gZnJvbSAnQG11aS9zeXN0ZW0vY29sb3JNYW5pcHVsYXRvcic7XG5pbXBvcnQgZ2V0VmFsaWRSZWFjdENoaWxkcmVuIGZyb20gJ0BtdWkvdXRpbHMvZ2V0VmFsaWRSZWFjdENoaWxkcmVuJztcbmltcG9ydCBjYXBpdGFsaXplIGZyb20gJy4uL3V0aWxzL2NhcGl0YWxpemUnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICcuLi9zdHlsZXMvc3R5bGVkJztcbmltcG9ydCB7IHVzZURlZmF1bHRQcm9wcyB9IGZyb20gJy4uL0RlZmF1bHRQcm9wc1Byb3ZpZGVyJztcbmltcG9ydCBidXR0b25Hcm91cENsYXNzZXMsIHsgZ2V0QnV0dG9uR3JvdXBVdGlsaXR5Q2xhc3MgfSBmcm9tICcuL2J1dHRvbkdyb3VwQ2xhc3Nlcyc7XG5pbXBvcnQgQnV0dG9uR3JvdXBDb250ZXh0IGZyb20gJy4vQnV0dG9uR3JvdXBDb250ZXh0JztcbmltcG9ydCBCdXR0b25Hcm91cEJ1dHRvbkNvbnRleHQgZnJvbSAnLi9CdXR0b25Hcm91cEJ1dHRvbkNvbnRleHQnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmNvbnN0IG92ZXJyaWRlc1Jlc29sdmVyID0gKHByb3BzLCBzdHlsZXMpID0+IHtcbiAgY29uc3Qge1xuICAgIG93bmVyU3RhdGVcbiAgfSA9IHByb3BzO1xuICByZXR1cm4gW3tcbiAgICBbYCYgLiR7YnV0dG9uR3JvdXBDbGFzc2VzLmdyb3VwZWR9YF06IHN0eWxlcy5ncm91cGVkXG4gIH0sIHtcbiAgICBbYCYgLiR7YnV0dG9uR3JvdXBDbGFzc2VzLmdyb3VwZWR9YF06IHN0eWxlc1tgZ3JvdXBlZCR7Y2FwaXRhbGl6ZShvd25lclN0YXRlLm9yaWVudGF0aW9uKX1gXVxuICB9LCB7XG4gICAgW2AmIC4ke2J1dHRvbkdyb3VwQ2xhc3Nlcy5ncm91cGVkfWBdOiBzdHlsZXNbYGdyb3VwZWQke2NhcGl0YWxpemUob3duZXJTdGF0ZS52YXJpYW50KX1gXVxuICB9LCB7XG4gICAgW2AmIC4ke2J1dHRvbkdyb3VwQ2xhc3Nlcy5ncm91cGVkfWBdOiBzdHlsZXNbYGdyb3VwZWQke2NhcGl0YWxpemUob3duZXJTdGF0ZS52YXJpYW50KX0ke2NhcGl0YWxpemUob3duZXJTdGF0ZS5vcmllbnRhdGlvbil9YF1cbiAgfSwge1xuICAgIFtgJiAuJHtidXR0b25Hcm91cENsYXNzZXMuZ3JvdXBlZH1gXTogc3R5bGVzW2Bncm91cGVkJHtjYXBpdGFsaXplKG93bmVyU3RhdGUudmFyaWFudCl9JHtjYXBpdGFsaXplKG93bmVyU3RhdGUuY29sb3IpfWBdXG4gIH0sIHtcbiAgICBbYCYgLiR7YnV0dG9uR3JvdXBDbGFzc2VzLmZpcnN0QnV0dG9ufWBdOiBzdHlsZXMuZmlyc3RCdXR0b25cbiAgfSwge1xuICAgIFtgJiAuJHtidXR0b25Hcm91cENsYXNzZXMubGFzdEJ1dHRvbn1gXTogc3R5bGVzLmxhc3RCdXR0b25cbiAgfSwge1xuICAgIFtgJiAuJHtidXR0b25Hcm91cENsYXNzZXMubWlkZGxlQnV0dG9ufWBdOiBzdHlsZXMubWlkZGxlQnV0dG9uXG4gIH0sIHN0eWxlcy5yb290LCBzdHlsZXNbb3duZXJTdGF0ZS52YXJpYW50XSwgb3duZXJTdGF0ZS5kaXNhYmxlRWxldmF0aW9uID09PSB0cnVlICYmIHN0eWxlcy5kaXNhYmxlRWxldmF0aW9uLCBvd25lclN0YXRlLmZ1bGxXaWR0aCAmJiBzdHlsZXMuZnVsbFdpZHRoLCBvd25lclN0YXRlLm9yaWVudGF0aW9uID09PSAndmVydGljYWwnICYmIHN0eWxlcy52ZXJ0aWNhbF07XG59O1xuY29uc3QgdXNlVXRpbGl0eUNsYXNzZXMgPSBvd25lclN0YXRlID0+IHtcbiAgY29uc3Qge1xuICAgIGNsYXNzZXMsXG4gICAgY29sb3IsXG4gICAgZGlzYWJsZWQsXG4gICAgZGlzYWJsZUVsZXZhdGlvbixcbiAgICBmdWxsV2lkdGgsXG4gICAgb3JpZW50YXRpb24sXG4gICAgdmFyaWFudFxuICB9ID0gb3duZXJTdGF0ZTtcbiAgY29uc3Qgc2xvdHMgPSB7XG4gICAgcm9vdDogWydyb290JywgdmFyaWFudCwgb3JpZW50YXRpb24gPT09ICd2ZXJ0aWNhbCcgJiYgJ3ZlcnRpY2FsJywgZnVsbFdpZHRoICYmICdmdWxsV2lkdGgnLCBkaXNhYmxlRWxldmF0aW9uICYmICdkaXNhYmxlRWxldmF0aW9uJ10sXG4gICAgZ3JvdXBlZDogWydncm91cGVkJywgYGdyb3VwZWQke2NhcGl0YWxpemUob3JpZW50YXRpb24pfWAsIGBncm91cGVkJHtjYXBpdGFsaXplKHZhcmlhbnQpfWAsIGBncm91cGVkJHtjYXBpdGFsaXplKHZhcmlhbnQpfSR7Y2FwaXRhbGl6ZShvcmllbnRhdGlvbil9YCwgYGdyb3VwZWQke2NhcGl0YWxpemUodmFyaWFudCl9JHtjYXBpdGFsaXplKGNvbG9yKX1gLCBkaXNhYmxlZCAmJiAnZGlzYWJsZWQnXSxcbiAgICBmaXJzdEJ1dHRvbjogWydmaXJzdEJ1dHRvbiddLFxuICAgIGxhc3RCdXR0b246IFsnbGFzdEJ1dHRvbiddLFxuICAgIG1pZGRsZUJ1dHRvbjogWydtaWRkbGVCdXR0b24nXVxuICB9O1xuICByZXR1cm4gY29tcG9zZUNsYXNzZXMoc2xvdHMsIGdldEJ1dHRvbkdyb3VwVXRpbGl0eUNsYXNzLCBjbGFzc2VzKTtcbn07XG5jb25zdCBCdXR0b25Hcm91cFJvb3QgPSBzdHlsZWQoJ2RpdicsIHtcbiAgbmFtZTogJ011aUJ1dHRvbkdyb3VwJyxcbiAgc2xvdDogJ1Jvb3QnLFxuICBvdmVycmlkZXNSZXNvbHZlclxufSkoKHtcbiAgdGhlbWUsXG4gIG93bmVyU3RhdGVcbn0pID0+IF9leHRlbmRzKHtcbiAgZGlzcGxheTogJ2lubGluZS1mbGV4JyxcbiAgYm9yZGVyUmFkaXVzOiAodGhlbWUudmFycyB8fCB0aGVtZSkuc2hhcGUuYm9yZGVyUmFkaXVzXG59LCBvd25lclN0YXRlLnZhcmlhbnQgPT09ICdjb250YWluZWQnICYmIHtcbiAgYm94U2hhZG93OiAodGhlbWUudmFycyB8fCB0aGVtZSkuc2hhZG93c1syXVxufSwgb3duZXJTdGF0ZS5kaXNhYmxlRWxldmF0aW9uICYmIHtcbiAgYm94U2hhZG93OiAnbm9uZSdcbn0sIG93bmVyU3RhdGUuZnVsbFdpZHRoICYmIHtcbiAgd2lkdGg6ICcxMDAlJ1xufSwgb3duZXJTdGF0ZS5vcmllbnRhdGlvbiA9PT0gJ3ZlcnRpY2FsJyAmJiB7XG4gIGZsZXhEaXJlY3Rpb246ICdjb2x1bW4nXG59LCB7XG4gIFtgJiAuJHtidXR0b25Hcm91cENsYXNzZXMuZ3JvdXBlZH1gXTogX2V4dGVuZHMoe1xuICAgIG1pbldpZHRoOiA0MCxcbiAgICAnJjpob3Zlcic6IF9leHRlbmRzKHt9LCBvd25lclN0YXRlLnZhcmlhbnQgPT09ICdjb250YWluZWQnICYmIHtcbiAgICAgIGJveFNoYWRvdzogJ25vbmUnXG4gICAgfSlcbiAgfSwgb3duZXJTdGF0ZS52YXJpYW50ID09PSAnY29udGFpbmVkJyAmJiB7XG4gICAgYm94U2hhZG93OiAnbm9uZSdcbiAgfSksXG4gIFtgJiAuJHtidXR0b25Hcm91cENsYXNzZXMuZmlyc3RCdXR0b259LCYgLiR7YnV0dG9uR3JvdXBDbGFzc2VzLm1pZGRsZUJ1dHRvbn1gXTogX2V4dGVuZHMoe30sIG93bmVyU3RhdGUub3JpZW50YXRpb24gPT09ICdob3Jpem9udGFsJyAmJiB7XG4gICAgYm9yZGVyVG9wUmlnaHRSYWRpdXM6IDAsXG4gICAgYm9yZGVyQm90dG9tUmlnaHRSYWRpdXM6IDBcbiAgfSwgb3duZXJTdGF0ZS5vcmllbnRhdGlvbiA9PT0gJ3ZlcnRpY2FsJyAmJiB7XG4gICAgYm9yZGVyQm90dG9tUmlnaHRSYWRpdXM6IDAsXG4gICAgYm9yZGVyQm90dG9tTGVmdFJhZGl1czogMFxuICB9LCBvd25lclN0YXRlLnZhcmlhbnQgPT09ICd0ZXh0JyAmJiBvd25lclN0YXRlLm9yaWVudGF0aW9uID09PSAnaG9yaXpvbnRhbCcgJiYge1xuICAgIGJvcmRlclJpZ2h0OiB0aGVtZS52YXJzID8gYDFweCBzb2xpZCByZ2JhKCR7dGhlbWUudmFycy5wYWxldHRlLmNvbW1vbi5vbkJhY2tncm91bmRDaGFubmVsfSAvIDAuMjMpYCA6IGAxcHggc29saWQgJHt0aGVtZS5wYWxldHRlLm1vZGUgPT09ICdsaWdodCcgPyAncmdiYSgwLCAwLCAwLCAwLjIzKScgOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjIzKSd9YCxcbiAgICBbYCYuJHtidXR0b25Hcm91cENsYXNzZXMuZGlzYWJsZWR9YF06IHtcbiAgICAgIGJvcmRlclJpZ2h0OiBgMXB4IHNvbGlkICR7KHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGUuYWN0aW9uLmRpc2FibGVkfWBcbiAgICB9XG4gIH0sIG93bmVyU3RhdGUudmFyaWFudCA9PT0gJ3RleHQnICYmIG93bmVyU3RhdGUub3JpZW50YXRpb24gPT09ICd2ZXJ0aWNhbCcgJiYge1xuICAgIGJvcmRlckJvdHRvbTogdGhlbWUudmFycyA/IGAxcHggc29saWQgcmdiYSgke3RoZW1lLnZhcnMucGFsZXR0ZS5jb21tb24ub25CYWNrZ3JvdW5kQ2hhbm5lbH0gLyAwLjIzKWAgOiBgMXB4IHNvbGlkICR7dGhlbWUucGFsZXR0ZS5tb2RlID09PSAnbGlnaHQnID8gJ3JnYmEoMCwgMCwgMCwgMC4yMyknIDogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC4yMyknfWAsXG4gICAgW2AmLiR7YnV0dG9uR3JvdXBDbGFzc2VzLmRpc2FibGVkfWBdOiB7XG4gICAgICBib3JkZXJCb3R0b206IGAxcHggc29saWQgJHsodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZS5hY3Rpb24uZGlzYWJsZWR9YFxuICAgIH1cbiAgfSwgb3duZXJTdGF0ZS52YXJpYW50ID09PSAndGV4dCcgJiYgb3duZXJTdGF0ZS5jb2xvciAhPT0gJ2luaGVyaXQnICYmIHtcbiAgICBib3JkZXJDb2xvcjogdGhlbWUudmFycyA/IGByZ2JhKCR7dGhlbWUudmFycy5wYWxldHRlW293bmVyU3RhdGUuY29sb3JdLm1haW5DaGFubmVsfSAvIDAuNSlgIDogYWxwaGEodGhlbWUucGFsZXR0ZVtvd25lclN0YXRlLmNvbG9yXS5tYWluLCAwLjUpXG4gIH0sIG93bmVyU3RhdGUudmFyaWFudCA9PT0gJ291dGxpbmVkJyAmJiBvd25lclN0YXRlLm9yaWVudGF0aW9uID09PSAnaG9yaXpvbnRhbCcgJiYge1xuICAgIGJvcmRlclJpZ2h0Q29sb3I6ICd0cmFuc3BhcmVudCdcbiAgfSwgb3duZXJTdGF0ZS52YXJpYW50ID09PSAnb3V0bGluZWQnICYmIG93bmVyU3RhdGUub3JpZW50YXRpb24gPT09ICd2ZXJ0aWNhbCcgJiYge1xuICAgIGJvcmRlckJvdHRvbUNvbG9yOiAndHJhbnNwYXJlbnQnXG4gIH0sIG93bmVyU3RhdGUudmFyaWFudCA9PT0gJ2NvbnRhaW5lZCcgJiYgb3duZXJTdGF0ZS5vcmllbnRhdGlvbiA9PT0gJ2hvcml6b250YWwnICYmIHtcbiAgICBib3JkZXJSaWdodDogYDFweCBzb2xpZCAkeyh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlLmdyZXlbNDAwXX1gLFxuICAgIFtgJi4ke2J1dHRvbkdyb3VwQ2xhc3Nlcy5kaXNhYmxlZH1gXToge1xuICAgICAgYm9yZGVyUmlnaHQ6IGAxcHggc29saWQgJHsodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZS5hY3Rpb24uZGlzYWJsZWR9YFxuICAgIH1cbiAgfSwgb3duZXJTdGF0ZS52YXJpYW50ID09PSAnY29udGFpbmVkJyAmJiBvd25lclN0YXRlLm9yaWVudGF0aW9uID09PSAndmVydGljYWwnICYmIHtcbiAgICBib3JkZXJCb3R0b206IGAxcHggc29saWQgJHsodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZS5ncmV5WzQwMF19YCxcbiAgICBbYCYuJHtidXR0b25Hcm91cENsYXNzZXMuZGlzYWJsZWR9YF06IHtcbiAgICAgIGJvcmRlckJvdHRvbTogYDFweCBzb2xpZCAkeyh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlLmFjdGlvbi5kaXNhYmxlZH1gXG4gICAgfVxuICB9LCBvd25lclN0YXRlLnZhcmlhbnQgPT09ICdjb250YWluZWQnICYmIG93bmVyU3RhdGUuY29sb3IgIT09ICdpbmhlcml0JyAmJiB7XG4gICAgYm9yZGVyQ29sb3I6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlW293bmVyU3RhdGUuY29sb3JdLmRhcmtcbiAgfSwge1xuICAgICcmOmhvdmVyJzogX2V4dGVuZHMoe30sIG93bmVyU3RhdGUudmFyaWFudCA9PT0gJ291dGxpbmVkJyAmJiBvd25lclN0YXRlLm9yaWVudGF0aW9uID09PSAnaG9yaXpvbnRhbCcgJiYge1xuICAgICAgYm9yZGVyUmlnaHRDb2xvcjogJ2N1cnJlbnRDb2xvcidcbiAgICB9LCBvd25lclN0YXRlLnZhcmlhbnQgPT09ICdvdXRsaW5lZCcgJiYgb3duZXJTdGF0ZS5vcmllbnRhdGlvbiA9PT0gJ3ZlcnRpY2FsJyAmJiB7XG4gICAgICBib3JkZXJCb3R0b21Db2xvcjogJ2N1cnJlbnRDb2xvcidcbiAgICB9KVxuICB9KSxcbiAgW2AmIC4ke2J1dHRvbkdyb3VwQ2xhc3Nlcy5sYXN0QnV0dG9ufSwmIC4ke2J1dHRvbkdyb3VwQ2xhc3Nlcy5taWRkbGVCdXR0b259YF06IF9leHRlbmRzKHt9LCBvd25lclN0YXRlLm9yaWVudGF0aW9uID09PSAnaG9yaXpvbnRhbCcgJiYge1xuICAgIGJvcmRlclRvcExlZnRSYWRpdXM6IDAsXG4gICAgYm9yZGVyQm90dG9tTGVmdFJhZGl1czogMFxuICB9LCBvd25lclN0YXRlLm9yaWVudGF0aW9uID09PSAndmVydGljYWwnICYmIHtcbiAgICBib3JkZXJUb3BSaWdodFJhZGl1czogMCxcbiAgICBib3JkZXJUb3BMZWZ0UmFkaXVzOiAwXG4gIH0sIG93bmVyU3RhdGUudmFyaWFudCA9PT0gJ291dGxpbmVkJyAmJiBvd25lclN0YXRlLm9yaWVudGF0aW9uID09PSAnaG9yaXpvbnRhbCcgJiYge1xuICAgIG1hcmdpbkxlZnQ6IC0xXG4gIH0sIG93bmVyU3RhdGUudmFyaWFudCA9PT0gJ291dGxpbmVkJyAmJiBvd25lclN0YXRlLm9yaWVudGF0aW9uID09PSAndmVydGljYWwnICYmIHtcbiAgICBtYXJnaW5Ub3A6IC0xXG4gIH0pXG59KSk7XG5jb25zdCBCdXR0b25Hcm91cCA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIEJ1dHRvbkdyb3VwKGluUHJvcHMsIHJlZikge1xuICBjb25zdCBwcm9wcyA9IHVzZURlZmF1bHRQcm9wcyh7XG4gICAgcHJvcHM6IGluUHJvcHMsXG4gICAgbmFtZTogJ011aUJ1dHRvbkdyb3VwJ1xuICB9KTtcbiAgY29uc3Qge1xuICAgICAgY2hpbGRyZW4sXG4gICAgICBjbGFzc05hbWUsXG4gICAgICBjb2xvciA9ICdwcmltYXJ5JyxcbiAgICAgIGNvbXBvbmVudCA9ICdkaXYnLFxuICAgICAgZGlzYWJsZWQgPSBmYWxzZSxcbiAgICAgIGRpc2FibGVFbGV2YXRpb24gPSBmYWxzZSxcbiAgICAgIGRpc2FibGVGb2N1c1JpcHBsZSA9IGZhbHNlLFxuICAgICAgZGlzYWJsZVJpcHBsZSA9IGZhbHNlLFxuICAgICAgZnVsbFdpZHRoID0gZmFsc2UsXG4gICAgICBvcmllbnRhdGlvbiA9ICdob3Jpem9udGFsJyxcbiAgICAgIHNpemUgPSAnbWVkaXVtJyxcbiAgICAgIHZhcmlhbnQgPSAnb3V0bGluZWQnXG4gICAgfSA9IHByb3BzLFxuICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIF9leGNsdWRlZCk7XG4gIGNvbnN0IG93bmVyU3RhdGUgPSBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICBjb2xvcixcbiAgICBjb21wb25lbnQsXG4gICAgZGlzYWJsZWQsXG4gICAgZGlzYWJsZUVsZXZhdGlvbixcbiAgICBkaXNhYmxlRm9jdXNSaXBwbGUsXG4gICAgZGlzYWJsZVJpcHBsZSxcbiAgICBmdWxsV2lkdGgsXG4gICAgb3JpZW50YXRpb24sXG4gICAgc2l6ZSxcbiAgICB2YXJpYW50XG4gIH0pO1xuICBjb25zdCBjbGFzc2VzID0gdXNlVXRpbGl0eUNsYXNzZXMob3duZXJTdGF0ZSk7XG4gIGNvbnN0IGNvbnRleHQgPSBSZWFjdC51c2VNZW1vKCgpID0+ICh7XG4gICAgY2xhc3NOYW1lOiBjbGFzc2VzLmdyb3VwZWQsXG4gICAgY29sb3IsXG4gICAgZGlzYWJsZWQsXG4gICAgZGlzYWJsZUVsZXZhdGlvbixcbiAgICBkaXNhYmxlRm9jdXNSaXBwbGUsXG4gICAgZGlzYWJsZVJpcHBsZSxcbiAgICBmdWxsV2lkdGgsXG4gICAgc2l6ZSxcbiAgICB2YXJpYW50XG4gIH0pLCBbY29sb3IsIGRpc2FibGVkLCBkaXNhYmxlRWxldmF0aW9uLCBkaXNhYmxlRm9jdXNSaXBwbGUsIGRpc2FibGVSaXBwbGUsIGZ1bGxXaWR0aCwgc2l6ZSwgdmFyaWFudCwgY2xhc3Nlcy5ncm91cGVkXSk7XG4gIGNvbnN0IHZhbGlkQ2hpbGRyZW4gPSBnZXRWYWxpZFJlYWN0Q2hpbGRyZW4oY2hpbGRyZW4pO1xuICBjb25zdCBjaGlsZHJlbkNvdW50ID0gdmFsaWRDaGlsZHJlbi5sZW5ndGg7XG4gIGNvbnN0IGdldEJ1dHRvblBvc2l0aW9uQ2xhc3NOYW1lID0gaW5kZXggPT4ge1xuICAgIGNvbnN0IGlzRmlyc3RCdXR0b24gPSBpbmRleCA9PT0gMDtcbiAgICBjb25zdCBpc0xhc3RCdXR0b24gPSBpbmRleCA9PT0gY2hpbGRyZW5Db3VudCAtIDE7XG4gICAgaWYgKGlzRmlyc3RCdXR0b24gJiYgaXNMYXN0QnV0dG9uKSB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuICAgIGlmIChpc0ZpcnN0QnV0dG9uKSB7XG4gICAgICByZXR1cm4gY2xhc3Nlcy5maXJzdEJ1dHRvbjtcbiAgICB9XG4gICAgaWYgKGlzTGFzdEJ1dHRvbikge1xuICAgICAgcmV0dXJuIGNsYXNzZXMubGFzdEJ1dHRvbjtcbiAgICB9XG4gICAgcmV0dXJuIGNsYXNzZXMubWlkZGxlQnV0dG9uO1xuICB9O1xuICByZXR1cm4gLyojX19QVVJFX18qL19qc3goQnV0dG9uR3JvdXBSb290LCBfZXh0ZW5kcyh7XG4gICAgYXM6IGNvbXBvbmVudCxcbiAgICByb2xlOiBcImdyb3VwXCIsXG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lKSxcbiAgICByZWY6IHJlZixcbiAgICBvd25lclN0YXRlOiBvd25lclN0YXRlXG4gIH0sIG90aGVyLCB7XG4gICAgY2hpbGRyZW46IC8qI19fUFVSRV9fKi9fanN4KEJ1dHRvbkdyb3VwQ29udGV4dC5Qcm92aWRlciwge1xuICAgICAgdmFsdWU6IGNvbnRleHQsXG4gICAgICBjaGlsZHJlbjogdmFsaWRDaGlsZHJlbi5tYXAoKGNoaWxkLCBpbmRleCkgPT4ge1xuICAgICAgICByZXR1cm4gLyojX19QVVJFX18qL19qc3goQnV0dG9uR3JvdXBCdXR0b25Db250ZXh0LlByb3ZpZGVyLCB7XG4gICAgICAgICAgdmFsdWU6IGdldEJ1dHRvblBvc2l0aW9uQ2xhc3NOYW1lKGluZGV4KSxcbiAgICAgICAgICBjaGlsZHJlbjogY2hpbGRcbiAgICAgICAgfSwgaW5kZXgpO1xuICAgICAgfSlcbiAgICB9KVxuICB9KSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IEJ1dHRvbkdyb3VwLnByb3BUeXBlcyAvKiByZW1vdmUtcHJvcHR5cGVzICovID0ge1xuICAvLyDilIzilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIAgV2FybmluZyDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJBcbiAgLy8g4pSCIFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucy4g4pSCXG4gIC8vIOKUgiAgICBUbyB1cGRhdGUgdGhlbSwgZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gYHBucG0gcHJvcHR5cGVzYC4gICAgIOKUglxuICAvLyDilJTilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJhcbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogVGhlIGNvbG9yIG9mIHRoZSBjb21wb25lbnQuXG4gICAqIEl0IHN1cHBvcnRzIGJvdGggZGVmYXVsdCBhbmQgY3VzdG9tIHRoZW1lIGNvbG9ycywgd2hpY2ggY2FuIGJlIGFkZGVkIGFzIHNob3duIGluIHRoZVxuICAgKiBbcGFsZXR0ZSBjdXN0b21pemF0aW9uIGd1aWRlXShodHRwczovL211aS5jb20vbWF0ZXJpYWwtdWkvY3VzdG9taXphdGlvbi9wYWxldHRlLyNjdXN0b20tY29sb3JzKS5cbiAgICogQGRlZmF1bHQgJ3ByaW1hcnknXG4gICAqL1xuICBjb2xvcjogUHJvcFR5cGVzIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi8ub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydpbmhlcml0JywgJ3ByaW1hcnknLCAnc2Vjb25kYXJ5JywgJ2Vycm9yJywgJ2luZm8nLCAnc3VjY2VzcycsICd3YXJuaW5nJ10pLCBQcm9wVHlwZXMuc3RyaW5nXSksXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBIVE1MIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBjb21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGNvbXBvbmVudCBpcyBkaXNhYmxlZC5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRpc2FibGVkOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgbm8gZWxldmF0aW9uIGlzIHVzZWQuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkaXNhYmxlRWxldmF0aW9uOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGJ1dHRvbiBrZXlib2FyZCBmb2N1cyByaXBwbGUgaXMgZGlzYWJsZWQuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkaXNhYmxlRm9jdXNSaXBwbGU6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgYnV0dG9uIHJpcHBsZSBlZmZlY3QgaXMgZGlzYWJsZWQuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkaXNhYmxlUmlwcGxlOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGJ1dHRvbnMgd2lsbCB0YWtlIHVwIHRoZSBmdWxsIHdpZHRoIG9mIGl0cyBjb250YWluZXIuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBmdWxsV2lkdGg6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCBvcmllbnRhdGlvbiAobGF5b3V0IGZsb3cgZGlyZWN0aW9uKS5cbiAgICogQGRlZmF1bHQgJ2hvcml6b250YWwnXG4gICAqL1xuICBvcmllbnRhdGlvbjogUHJvcFR5cGVzLm9uZU9mKFsnaG9yaXpvbnRhbCcsICd2ZXJ0aWNhbCddKSxcbiAgLyoqXG4gICAqIFRoZSBzaXplIG9mIHRoZSBjb21wb25lbnQuXG4gICAqIGBzbWFsbGAgaXMgZXF1aXZhbGVudCB0byB0aGUgZGVuc2UgYnV0dG9uIHN0eWxpbmcuXG4gICAqIEBkZWZhdWx0ICdtZWRpdW0nXG4gICAqL1xuICBzaXplOiBQcm9wVHlwZXMgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqLy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ3NtYWxsJywgJ21lZGl1bScsICdsYXJnZSddKSwgUHJvcFR5cGVzLnN0cmluZ10pLFxuICAvKipcbiAgICogVGhlIHN5c3RlbSBwcm9wIHRoYXQgYWxsb3dzIGRlZmluaW5nIHN5c3RlbSBvdmVycmlkZXMgYXMgd2VsbCBhcyBhZGRpdGlvbmFsIENTUyBzdHlsZXMuXG4gICAqL1xuICBzeDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5ib29sXSkpLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pLFxuICAvKipcbiAgICogVGhlIHZhcmlhbnQgdG8gdXNlLlxuICAgKiBAZGVmYXVsdCAnb3V0bGluZWQnXG4gICAqL1xuICB2YXJpYW50OiBQcm9wVHlwZXMgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqLy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ2NvbnRhaW5lZCcsICdvdXRsaW5lZCcsICd0ZXh0J10pLCBQcm9wVHlwZXMuc3RyaW5nXSlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCBCdXR0b25Hcm91cDsiLCJpbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzZXMnO1xuaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3MnO1xuZXhwb3J0IGZ1bmN0aW9uIGdldENhcmRVdGlsaXR5Q2xhc3Moc2xvdCkge1xuICByZXR1cm4gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoJ011aUNhcmQnLCBzbG90KTtcbn1cbmNvbnN0IGNhcmRDbGFzc2VzID0gZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcygnTXVpQ2FyZCcsIFsncm9vdCddKTtcbmV4cG9ydCBkZWZhdWx0IGNhcmRDbGFzc2VzOyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImNsYXNzTmFtZVwiLCBcInJhaXNlZFwiXTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCBjaGFpblByb3BUeXBlcyBmcm9tICdAbXVpL3V0aWxzL2NoYWluUHJvcFR5cGVzJztcbmltcG9ydCBjb21wb3NlQ2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2NvbXBvc2VDbGFzc2VzJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnLi4vc3R5bGVzL3N0eWxlZCc7XG5pbXBvcnQgeyB1c2VEZWZhdWx0UHJvcHMgfSBmcm9tICcuLi9EZWZhdWx0UHJvcHNQcm92aWRlcic7XG5pbXBvcnQgUGFwZXIgZnJvbSAnLi4vUGFwZXInO1xuaW1wb3J0IHsgZ2V0Q2FyZFV0aWxpdHlDbGFzcyB9IGZyb20gJy4vY2FyZENsYXNzZXMnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmNvbnN0IHVzZVV0aWxpdHlDbGFzc2VzID0gb3duZXJTdGF0ZSA9PiB7XG4gIGNvbnN0IHtcbiAgICBjbGFzc2VzXG4gIH0gPSBvd25lclN0YXRlO1xuICBjb25zdCBzbG90cyA9IHtcbiAgICByb290OiBbJ3Jvb3QnXVxuICB9O1xuICByZXR1cm4gY29tcG9zZUNsYXNzZXMoc2xvdHMsIGdldENhcmRVdGlsaXR5Q2xhc3MsIGNsYXNzZXMpO1xufTtcbmNvbnN0IENhcmRSb290ID0gc3R5bGVkKFBhcGVyLCB7XG4gIG5hbWU6ICdNdWlDYXJkJyxcbiAgc2xvdDogJ1Jvb3QnLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHN0eWxlcy5yb290XG59KSgoKSA9PiB7XG4gIHJldHVybiB7XG4gICAgb3ZlcmZsb3c6ICdoaWRkZW4nXG4gIH07XG59KTtcbmNvbnN0IENhcmQgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBDYXJkKGluUHJvcHMsIHJlZikge1xuICBjb25zdCBwcm9wcyA9IHVzZURlZmF1bHRQcm9wcyh7XG4gICAgcHJvcHM6IGluUHJvcHMsXG4gICAgbmFtZTogJ011aUNhcmQnXG4gIH0pO1xuICBjb25zdCB7XG4gICAgICBjbGFzc05hbWUsXG4gICAgICByYWlzZWQgPSBmYWxzZVxuICAgIH0gPSBwcm9wcyxcbiAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQpO1xuICBjb25zdCBvd25lclN0YXRlID0gX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgcmFpc2VkXG4gIH0pO1xuICBjb25zdCBjbGFzc2VzID0gdXNlVXRpbGl0eUNsYXNzZXMob3duZXJTdGF0ZSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeChDYXJkUm9vdCwgX2V4dGVuZHMoe1xuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSksXG4gICAgZWxldmF0aW9uOiByYWlzZWQgPyA4IDogdW5kZWZpbmVkLFxuICAgIHJlZjogcmVmLFxuICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGVcbiAgfSwgb3RoZXIpKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gQ2FyZC5wcm9wVHlwZXMgLyogcmVtb3ZlLXByb3B0eXBlcyAqLyA9IHtcbiAgLy8g4pSM4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAIFdhcm5pbmcg4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSQXG4gIC8vIOKUgiBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMuIOKUglxuICAvLyDilIIgICAgVG8gdXBkYXRlIHRoZW0sIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIGBwbnBtIHByb3B0eXBlc2AuICAgICDilIJcbiAgLy8g4pSU4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSYXG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGNhcmQgd2lsbCB1c2UgcmFpc2VkIHN0eWxpbmcuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICByYWlzZWQ6IGNoYWluUHJvcFR5cGVzKFByb3BUeXBlcy5ib29sLCBwcm9wcyA9PiB7XG4gICAgaWYgKHByb3BzLnJhaXNlZCAmJiBwcm9wcy52YXJpYW50ID09PSAnb3V0bGluZWQnKSB7XG4gICAgICByZXR1cm4gbmV3IEVycm9yKCdNVUk6IENvbWJpbmluZyBgcmFpc2VkPXt0cnVlfWAgd2l0aCBgdmFyaWFudD1cIm91dGxpbmVkXCJgIGhhcyBubyBlZmZlY3QuJyk7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9KSxcbiAgLyoqXG4gICAqIFRoZSBzeXN0ZW0gcHJvcCB0aGF0IGFsbG93cyBkZWZpbmluZyBzeXN0ZW0gb3ZlcnJpZGVzIGFzIHdlbGwgYXMgYWRkaXRpb25hbCBDU1Mgc3R5bGVzLlxuICAgKi9cbiAgc3g6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuYm9vbF0pKSwgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IENhcmQ7IiwiaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzc2VzJztcbmltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzJztcbmV4cG9ydCBmdW5jdGlvbiBnZXRDYXJkQWN0aW9uQXJlYVV0aWxpdHlDbGFzcyhzbG90KSB7XG4gIHJldHVybiBnZW5lcmF0ZVV0aWxpdHlDbGFzcygnTXVpQ2FyZEFjdGlvbkFyZWEnLCBzbG90KTtcbn1cbmNvbnN0IGNhcmRBY3Rpb25BcmVhQ2xhc3NlcyA9IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMoJ011aUNhcmRBY3Rpb25BcmVhJywgWydyb290JywgJ2ZvY3VzVmlzaWJsZScsICdmb2N1c0hpZ2hsaWdodCddKTtcbmV4cG9ydCBkZWZhdWx0IGNhcmRBY3Rpb25BcmVhQ2xhc3NlczsiLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJjaGlsZHJlblwiLCBcImNsYXNzTmFtZVwiLCBcImZvY3VzVmlzaWJsZUNsYXNzTmFtZVwiXTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCBjb21wb3NlQ2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2NvbXBvc2VDbGFzc2VzJztcbmltcG9ydCB7IHVzZURlZmF1bHRQcm9wcyB9IGZyb20gJy4uL0RlZmF1bHRQcm9wc1Byb3ZpZGVyJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnLi4vc3R5bGVzL3N0eWxlZCc7XG5pbXBvcnQgY2FyZEFjdGlvbkFyZWFDbGFzc2VzLCB7IGdldENhcmRBY3Rpb25BcmVhVXRpbGl0eUNsYXNzIH0gZnJvbSAnLi9jYXJkQWN0aW9uQXJlYUNsYXNzZXMnO1xuaW1wb3J0IEJ1dHRvbkJhc2UgZnJvbSAnLi4vQnV0dG9uQmFzZSc7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuaW1wb3J0IHsganN4cyBhcyBfanN4cyB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuY29uc3QgdXNlVXRpbGl0eUNsYXNzZXMgPSBvd25lclN0YXRlID0+IHtcbiAgY29uc3Qge1xuICAgIGNsYXNzZXNcbiAgfSA9IG93bmVyU3RhdGU7XG4gIGNvbnN0IHNsb3RzID0ge1xuICAgIHJvb3Q6IFsncm9vdCddLFxuICAgIGZvY3VzSGlnaGxpZ2h0OiBbJ2ZvY3VzSGlnaGxpZ2h0J11cbiAgfTtcbiAgcmV0dXJuIGNvbXBvc2VDbGFzc2VzKHNsb3RzLCBnZXRDYXJkQWN0aW9uQXJlYVV0aWxpdHlDbGFzcywgY2xhc3Nlcyk7XG59O1xuY29uc3QgQ2FyZEFjdGlvbkFyZWFSb290ID0gc3R5bGVkKEJ1dHRvbkJhc2UsIHtcbiAgbmFtZTogJ011aUNhcmRBY3Rpb25BcmVhJyxcbiAgc2xvdDogJ1Jvb3QnLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHN0eWxlcy5yb290XG59KSgoe1xuICB0aGVtZVxufSkgPT4gKHtcbiAgZGlzcGxheTogJ2Jsb2NrJyxcbiAgdGV4dEFsaWduOiAnaW5oZXJpdCcsXG4gIGJvcmRlclJhZGl1czogJ2luaGVyaXQnLFxuICAvLyBmb3IgU2FmYXJpIHRvIHdvcmsgaHR0cHM6Ly9naXRodWIuY29tL211aS9tYXRlcmlhbC11aS9pc3N1ZXMvMzYyODUuXG4gIHdpZHRoOiAnMTAwJScsXG4gIFtgJjpob3ZlciAuJHtjYXJkQWN0aW9uQXJlYUNsYXNzZXMuZm9jdXNIaWdobGlnaHR9YF06IHtcbiAgICBvcGFjaXR5OiAodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZS5hY3Rpb24uaG92ZXJPcGFjaXR5LFxuICAgICdAbWVkaWEgKGhvdmVyOiBub25lKSc6IHtcbiAgICAgIG9wYWNpdHk6IDBcbiAgICB9XG4gIH0sXG4gIFtgJi4ke2NhcmRBY3Rpb25BcmVhQ2xhc3Nlcy5mb2N1c1Zpc2libGV9IC4ke2NhcmRBY3Rpb25BcmVhQ2xhc3Nlcy5mb2N1c0hpZ2hsaWdodH1gXToge1xuICAgIG9wYWNpdHk6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlLmFjdGlvbi5mb2N1c09wYWNpdHlcbiAgfVxufSkpO1xuY29uc3QgQ2FyZEFjdGlvbkFyZWFGb2N1c0hpZ2hsaWdodCA9IHN0eWxlZCgnc3BhbicsIHtcbiAgbmFtZTogJ011aUNhcmRBY3Rpb25BcmVhJyxcbiAgc2xvdDogJ0ZvY3VzSGlnaGxpZ2h0JyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiBzdHlsZXMuZm9jdXNIaWdobGlnaHRcbn0pKCh7XG4gIHRoZW1lXG59KSA9PiAoe1xuICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gIHBvaW50ZXJFdmVudHM6ICdub25lJyxcbiAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gIHRvcDogMCxcbiAgcmlnaHQ6IDAsXG4gIGJvdHRvbTogMCxcbiAgbGVmdDogMCxcbiAgYm9yZGVyUmFkaXVzOiAnaW5oZXJpdCcsXG4gIG9wYWNpdHk6IDAsXG4gIGJhY2tncm91bmRDb2xvcjogJ2N1cnJlbnRjb2xvcicsXG4gIHRyYW5zaXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZSgnb3BhY2l0eScsIHtcbiAgICBkdXJhdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuZHVyYXRpb24uc2hvcnRcbiAgfSlcbn0pKTtcbmNvbnN0IENhcmRBY3Rpb25BcmVhID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gQ2FyZEFjdGlvbkFyZWEoaW5Qcm9wcywgcmVmKSB7XG4gIGNvbnN0IHByb3BzID0gdXNlRGVmYXVsdFByb3BzKHtcbiAgICBwcm9wczogaW5Qcm9wcyxcbiAgICBuYW1lOiAnTXVpQ2FyZEFjdGlvbkFyZWEnXG4gIH0pO1xuICBjb25zdCB7XG4gICAgICBjaGlsZHJlbixcbiAgICAgIGNsYXNzTmFtZSxcbiAgICAgIGZvY3VzVmlzaWJsZUNsYXNzTmFtZVxuICAgIH0gPSBwcm9wcyxcbiAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQpO1xuICBjb25zdCBvd25lclN0YXRlID0gcHJvcHM7XG4gIGNvbnN0IGNsYXNzZXMgPSB1c2VVdGlsaXR5Q2xhc3Nlcyhvd25lclN0YXRlKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4cyhDYXJkQWN0aW9uQXJlYVJvb3QsIF9leHRlbmRzKHtcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWUpLFxuICAgIGZvY3VzVmlzaWJsZUNsYXNzTmFtZTogY2xzeChmb2N1c1Zpc2libGVDbGFzc05hbWUsIGNsYXNzZXMuZm9jdXNWaXNpYmxlKSxcbiAgICByZWY6IHJlZixcbiAgICBvd25lclN0YXRlOiBvd25lclN0YXRlXG4gIH0sIG90aGVyLCB7XG4gICAgY2hpbGRyZW46IFtjaGlsZHJlbiwgLyojX19QVVJFX18qL19qc3goQ2FyZEFjdGlvbkFyZWFGb2N1c0hpZ2hsaWdodCwge1xuICAgICAgY2xhc3NOYW1lOiBjbGFzc2VzLmZvY3VzSGlnaGxpZ2h0LFxuICAgICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZVxuICAgIH0pXVxuICB9KSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IENhcmRBY3Rpb25BcmVhLnByb3BUeXBlcyAvKiByZW1vdmUtcHJvcHR5cGVzICovID0ge1xuICAvLyDilIzilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIAgV2FybmluZyDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJBcbiAgLy8g4pSCIFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucy4g4pSCXG4gIC8vIOKUgiAgICBUbyB1cGRhdGUgdGhlbSwgZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gYHBucG0gcHJvcHR5cGVzYC4gICAgIOKUglxuICAvLyDilJTilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJhcbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgZm9jdXNWaXNpYmxlQ2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogVGhlIHN5c3RlbSBwcm9wIHRoYXQgYWxsb3dzIGRlZmluaW5nIHN5c3RlbSBvdmVycmlkZXMgYXMgd2VsbCBhcyBhZGRpdGlvbmFsIENTUyBzdHlsZXMuXG4gICAqL1xuICBzeDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5ib29sXSkpLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgQ2FyZEFjdGlvbkFyZWE7IiwiaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzc2VzJztcbmltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzJztcbmV4cG9ydCBmdW5jdGlvbiBnZXRDYXJkQWN0aW9uc1V0aWxpdHlDbGFzcyhzbG90KSB7XG4gIHJldHVybiBnZW5lcmF0ZVV0aWxpdHlDbGFzcygnTXVpQ2FyZEFjdGlvbnMnLCBzbG90KTtcbn1cbmNvbnN0IGNhcmRBY3Rpb25zQ2xhc3NlcyA9IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMoJ011aUNhcmRBY3Rpb25zJywgWydyb290JywgJ3NwYWNpbmcnXSk7XG5leHBvcnQgZGVmYXVsdCBjYXJkQWN0aW9uc0NsYXNzZXM7IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiZGlzYWJsZVNwYWNpbmdcIiwgXCJjbGFzc05hbWVcIl07XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgY29tcG9zZUNsYXNzZXMgZnJvbSAnQG11aS91dGlscy9jb21wb3NlQ2xhc3Nlcyc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJy4uL3N0eWxlcy9zdHlsZWQnO1xuaW1wb3J0IHsgdXNlRGVmYXVsdFByb3BzIH0gZnJvbSAnLi4vRGVmYXVsdFByb3BzUHJvdmlkZXInO1xuaW1wb3J0IHsgZ2V0Q2FyZEFjdGlvbnNVdGlsaXR5Q2xhc3MgfSBmcm9tICcuL2NhcmRBY3Rpb25zQ2xhc3Nlcyc7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuY29uc3QgdXNlVXRpbGl0eUNsYXNzZXMgPSBvd25lclN0YXRlID0+IHtcbiAgY29uc3Qge1xuICAgIGNsYXNzZXMsXG4gICAgZGlzYWJsZVNwYWNpbmdcbiAgfSA9IG93bmVyU3RhdGU7XG4gIGNvbnN0IHNsb3RzID0ge1xuICAgIHJvb3Q6IFsncm9vdCcsICFkaXNhYmxlU3BhY2luZyAmJiAnc3BhY2luZyddXG4gIH07XG4gIHJldHVybiBjb21wb3NlQ2xhc3NlcyhzbG90cywgZ2V0Q2FyZEFjdGlvbnNVdGlsaXR5Q2xhc3MsIGNsYXNzZXMpO1xufTtcbmNvbnN0IENhcmRBY3Rpb25zUm9vdCA9IHN0eWxlZCgnZGl2Jywge1xuICBuYW1lOiAnTXVpQ2FyZEFjdGlvbnMnLFxuICBzbG90OiAnUm9vdCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9ID0gcHJvcHM7XG4gICAgcmV0dXJuIFtzdHlsZXMucm9vdCwgIW93bmVyU3RhdGUuZGlzYWJsZVNwYWNpbmcgJiYgc3R5bGVzLnNwYWNpbmddO1xuICB9XG59KSgoe1xuICBvd25lclN0YXRlXG59KSA9PiBfZXh0ZW5kcyh7XG4gIGRpc3BsYXk6ICdmbGV4JyxcbiAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gIHBhZGRpbmc6IDhcbn0sICFvd25lclN0YXRlLmRpc2FibGVTcGFjaW5nICYmIHtcbiAgJyYgPiA6bm90KHN0eWxlKSB+IDpub3Qoc3R5bGUpJzoge1xuICAgIG1hcmdpbkxlZnQ6IDhcbiAgfVxufSkpO1xuY29uc3QgQ2FyZEFjdGlvbnMgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBDYXJkQWN0aW9ucyhpblByb3BzLCByZWYpIHtcbiAgY29uc3QgcHJvcHMgPSB1c2VEZWZhdWx0UHJvcHMoe1xuICAgIHByb3BzOiBpblByb3BzLFxuICAgIG5hbWU6ICdNdWlDYXJkQWN0aW9ucydcbiAgfSk7XG4gIGNvbnN0IHtcbiAgICAgIGRpc2FibGVTcGFjaW5nID0gZmFsc2UsXG4gICAgICBjbGFzc05hbWVcbiAgICB9ID0gcHJvcHMsXG4gICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkKTtcbiAgY29uc3Qgb3duZXJTdGF0ZSA9IF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgIGRpc2FibGVTcGFjaW5nXG4gIH0pO1xuICBjb25zdCBjbGFzc2VzID0gdXNlVXRpbGl0eUNsYXNzZXMob3duZXJTdGF0ZSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeChDYXJkQWN0aW9uc1Jvb3QsIF9leHRlbmRzKHtcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWUpLFxuICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGUsXG4gICAgcmVmOiByZWZcbiAgfSwgb3RoZXIpKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gQ2FyZEFjdGlvbnMucHJvcFR5cGVzIC8qIHJlbW92ZS1wcm9wdHlwZXMgKi8gPSB7XG4gIC8vIOKUjOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgCBXYXJuaW5nIOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUkFxuICAvLyDilIIgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zLiDilIJcbiAgLy8g4pSCICAgIFRvIHVwZGF0ZSB0aGVtLCBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBgcG5wbSBwcm9wdHlwZXNgLiAgICAg4pSCXG4gIC8vIOKUlOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUmFxuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBhY3Rpb25zIGRvIG5vdCBoYXZlIGFkZGl0aW9uYWwgbWFyZ2luLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZGlzYWJsZVNwYWNpbmc6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogVGhlIHN5c3RlbSBwcm9wIHRoYXQgYWxsb3dzIGRlZmluaW5nIHN5c3RlbSBvdmVycmlkZXMgYXMgd2VsbCBhcyBhZGRpdGlvbmFsIENTUyBzdHlsZXMuXG4gICAqL1xuICBzeDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5ib29sXSkpLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgQ2FyZEFjdGlvbnM7IiwiaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzc2VzJztcbmltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzJztcbmV4cG9ydCBmdW5jdGlvbiBnZXRDYXJkQ29udGVudFV0aWxpdHlDbGFzcyhzbG90KSB7XG4gIHJldHVybiBnZW5lcmF0ZVV0aWxpdHlDbGFzcygnTXVpQ2FyZENvbnRlbnQnLCBzbG90KTtcbn1cbmNvbnN0IGNhcmRDb250ZW50Q2xhc3NlcyA9IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMoJ011aUNhcmRDb250ZW50JywgWydyb290J10pO1xuZXhwb3J0IGRlZmF1bHQgY2FyZENvbnRlbnRDbGFzc2VzOyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImNsYXNzTmFtZVwiLCBcImNvbXBvbmVudFwiXTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCBjb21wb3NlQ2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2NvbXBvc2VDbGFzc2VzJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnLi4vc3R5bGVzL3N0eWxlZCc7XG5pbXBvcnQgeyB1c2VEZWZhdWx0UHJvcHMgfSBmcm9tICcuLi9EZWZhdWx0UHJvcHNQcm92aWRlcic7XG5pbXBvcnQgeyBnZXRDYXJkQ29udGVudFV0aWxpdHlDbGFzcyB9IGZyb20gJy4vY2FyZENvbnRlbnRDbGFzc2VzJztcbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5jb25zdCB1c2VVdGlsaXR5Q2xhc3NlcyA9IG93bmVyU3RhdGUgPT4ge1xuICBjb25zdCB7XG4gICAgY2xhc3Nlc1xuICB9ID0gb3duZXJTdGF0ZTtcbiAgY29uc3Qgc2xvdHMgPSB7XG4gICAgcm9vdDogWydyb290J11cbiAgfTtcbiAgcmV0dXJuIGNvbXBvc2VDbGFzc2VzKHNsb3RzLCBnZXRDYXJkQ29udGVudFV0aWxpdHlDbGFzcywgY2xhc3Nlcyk7XG59O1xuY29uc3QgQ2FyZENvbnRlbnRSb290ID0gc3R5bGVkKCdkaXYnLCB7XG4gIG5hbWU6ICdNdWlDYXJkQ29udGVudCcsXG4gIHNsb3Q6ICdSb290JyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiBzdHlsZXMucm9vdFxufSkoKCkgPT4ge1xuICByZXR1cm4ge1xuICAgIHBhZGRpbmc6IDE2LFxuICAgICcmOmxhc3QtY2hpbGQnOiB7XG4gICAgICBwYWRkaW5nQm90dG9tOiAyNFxuICAgIH1cbiAgfTtcbn0pO1xuY29uc3QgQ2FyZENvbnRlbnQgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBDYXJkQ29udGVudChpblByb3BzLCByZWYpIHtcbiAgY29uc3QgcHJvcHMgPSB1c2VEZWZhdWx0UHJvcHMoe1xuICAgIHByb3BzOiBpblByb3BzLFxuICAgIG5hbWU6ICdNdWlDYXJkQ29udGVudCdcbiAgfSk7XG4gIGNvbnN0IHtcbiAgICAgIGNsYXNzTmFtZSxcbiAgICAgIGNvbXBvbmVudCA9ICdkaXYnXG4gICAgfSA9IHByb3BzLFxuICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIF9leGNsdWRlZCk7XG4gIGNvbnN0IG93bmVyU3RhdGUgPSBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICBjb21wb25lbnRcbiAgfSk7XG4gIGNvbnN0IGNsYXNzZXMgPSB1c2VVdGlsaXR5Q2xhc3Nlcyhvd25lclN0YXRlKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KENhcmRDb250ZW50Um9vdCwgX2V4dGVuZHMoe1xuICAgIGFzOiBjb21wb25lbnQsXG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lKSxcbiAgICBvd25lclN0YXRlOiBvd25lclN0YXRlLFxuICAgIHJlZjogcmVmXG4gIH0sIG90aGVyKSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IENhcmRDb250ZW50LnByb3BUeXBlcyAvKiByZW1vdmUtcHJvcHR5cGVzICovID0ge1xuICAvLyDilIzilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIAgV2FybmluZyDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJBcbiAgLy8g4pSCIFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucy4g4pSCXG4gIC8vIOKUgiAgICBUbyB1cGRhdGUgdGhlbSwgZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gYHBucG0gcHJvcHR5cGVzYC4gICAgIOKUglxuICAvLyDilJTilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJhcbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgcm9vdCBub2RlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgSFRNTCBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKi9cbiAgY29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG4gIC8qKlxuICAgKiBUaGUgc3lzdGVtIHByb3AgdGhhdCBhbGxvd3MgZGVmaW5pbmcgc3lzdGVtIG92ZXJyaWRlcyBhcyB3ZWxsIGFzIGFkZGl0aW9uYWwgQ1NTIHN0eWxlcy5cbiAgICovXG4gIHN4OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLmJvb2xdKSksIFByb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCBDYXJkQ29udGVudDsiLCJpbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzZXMnO1xuaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3MnO1xuZXhwb3J0IGZ1bmN0aW9uIGdldENhcmRIZWFkZXJVdGlsaXR5Q2xhc3Moc2xvdCkge1xuICByZXR1cm4gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoJ011aUNhcmRIZWFkZXInLCBzbG90KTtcbn1cbmNvbnN0IGNhcmRIZWFkZXJDbGFzc2VzID0gZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcygnTXVpQ2FyZEhlYWRlcicsIFsncm9vdCcsICdhdmF0YXInLCAnYWN0aW9uJywgJ2NvbnRlbnQnLCAndGl0bGUnLCAnc3ViaGVhZGVyJ10pO1xuZXhwb3J0IGRlZmF1bHQgY2FyZEhlYWRlckNsYXNzZXM7IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiYWN0aW9uXCIsIFwiYXZhdGFyXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29tcG9uZW50XCIsIFwiZGlzYWJsZVR5cG9ncmFwaHlcIiwgXCJzdWJoZWFkZXJcIiwgXCJzdWJoZWFkZXJUeXBvZ3JhcGh5UHJvcHNcIiwgXCJ0aXRsZVwiLCBcInRpdGxlVHlwb2dyYXBoeVByb3BzXCJdO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IGNvbXBvc2VDbGFzc2VzIGZyb20gJ0BtdWkvdXRpbHMvY29tcG9zZUNsYXNzZXMnO1xuaW1wb3J0IFR5cG9ncmFwaHkgZnJvbSAnLi4vVHlwb2dyYXBoeSc7XG5pbXBvcnQgeyB1c2VEZWZhdWx0UHJvcHMgfSBmcm9tICcuLi9EZWZhdWx0UHJvcHNQcm92aWRlcic7XG5pbXBvcnQgc3R5bGVkIGZyb20gJy4uL3N0eWxlcy9zdHlsZWQnO1xuaW1wb3J0IGNhcmRIZWFkZXJDbGFzc2VzLCB7IGdldENhcmRIZWFkZXJVdGlsaXR5Q2xhc3MgfSBmcm9tICcuL2NhcmRIZWFkZXJDbGFzc2VzJztcbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5pbXBvcnQgeyBqc3hzIGFzIF9qc3hzIH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5jb25zdCB1c2VVdGlsaXR5Q2xhc3NlcyA9IG93bmVyU3RhdGUgPT4ge1xuICBjb25zdCB7XG4gICAgY2xhc3Nlc1xuICB9ID0gb3duZXJTdGF0ZTtcbiAgY29uc3Qgc2xvdHMgPSB7XG4gICAgcm9vdDogWydyb290J10sXG4gICAgYXZhdGFyOiBbJ2F2YXRhciddLFxuICAgIGFjdGlvbjogWydhY3Rpb24nXSxcbiAgICBjb250ZW50OiBbJ2NvbnRlbnQnXSxcbiAgICB0aXRsZTogWyd0aXRsZSddLFxuICAgIHN1YmhlYWRlcjogWydzdWJoZWFkZXInXVxuICB9O1xuICByZXR1cm4gY29tcG9zZUNsYXNzZXMoc2xvdHMsIGdldENhcmRIZWFkZXJVdGlsaXR5Q2xhc3MsIGNsYXNzZXMpO1xufTtcbmNvbnN0IENhcmRIZWFkZXJSb290ID0gc3R5bGVkKCdkaXYnLCB7XG4gIG5hbWU6ICdNdWlDYXJkSGVhZGVyJyxcbiAgc2xvdDogJ1Jvb3QnLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IF9leHRlbmRzKHtcbiAgICBbYCYgLiR7Y2FyZEhlYWRlckNsYXNzZXMudGl0bGV9YF06IHN0eWxlcy50aXRsZSxcbiAgICBbYCYgLiR7Y2FyZEhlYWRlckNsYXNzZXMuc3ViaGVhZGVyfWBdOiBzdHlsZXMuc3ViaGVhZGVyXG4gIH0sIHN0eWxlcy5yb290KVxufSkoe1xuICBkaXNwbGF5OiAnZmxleCcsXG4gIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICBwYWRkaW5nOiAxNlxufSk7XG5jb25zdCBDYXJkSGVhZGVyQXZhdGFyID0gc3R5bGVkKCdkaXYnLCB7XG4gIG5hbWU6ICdNdWlDYXJkSGVhZGVyJyxcbiAgc2xvdDogJ0F2YXRhcicsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4gc3R5bGVzLmF2YXRhclxufSkoe1xuICBkaXNwbGF5OiAnZmxleCcsXG4gIGZsZXg6ICcwIDAgYXV0bycsXG4gIG1hcmdpblJpZ2h0OiAxNlxufSk7XG5jb25zdCBDYXJkSGVhZGVyQWN0aW9uID0gc3R5bGVkKCdkaXYnLCB7XG4gIG5hbWU6ICdNdWlDYXJkSGVhZGVyJyxcbiAgc2xvdDogJ0FjdGlvbicsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4gc3R5bGVzLmFjdGlvblxufSkoe1xuICBmbGV4OiAnMCAwIGF1dG8nLFxuICBhbGlnblNlbGY6ICdmbGV4LXN0YXJ0JyxcbiAgbWFyZ2luVG9wOiAtNCxcbiAgbWFyZ2luUmlnaHQ6IC04LFxuICBtYXJnaW5Cb3R0b206IC00XG59KTtcbmNvbnN0IENhcmRIZWFkZXJDb250ZW50ID0gc3R5bGVkKCdkaXYnLCB7XG4gIG5hbWU6ICdNdWlDYXJkSGVhZGVyJyxcbiAgc2xvdDogJ0NvbnRlbnQnLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHN0eWxlcy5jb250ZW50XG59KSh7XG4gIGZsZXg6ICcxIDEgYXV0bydcbn0pO1xuY29uc3QgQ2FyZEhlYWRlciA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIENhcmRIZWFkZXIoaW5Qcm9wcywgcmVmKSB7XG4gIGNvbnN0IHByb3BzID0gdXNlRGVmYXVsdFByb3BzKHtcbiAgICBwcm9wczogaW5Qcm9wcyxcbiAgICBuYW1lOiAnTXVpQ2FyZEhlYWRlcidcbiAgfSk7XG4gIGNvbnN0IHtcbiAgICAgIGFjdGlvbixcbiAgICAgIGF2YXRhcixcbiAgICAgIGNsYXNzTmFtZSxcbiAgICAgIGNvbXBvbmVudCA9ICdkaXYnLFxuICAgICAgZGlzYWJsZVR5cG9ncmFwaHkgPSBmYWxzZSxcbiAgICAgIHN1YmhlYWRlcjogc3ViaGVhZGVyUHJvcCxcbiAgICAgIHN1YmhlYWRlclR5cG9ncmFwaHlQcm9wcyxcbiAgICAgIHRpdGxlOiB0aXRsZVByb3AsXG4gICAgICB0aXRsZVR5cG9ncmFwaHlQcm9wc1xuICAgIH0gPSBwcm9wcyxcbiAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQpO1xuICBjb25zdCBvd25lclN0YXRlID0gX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgY29tcG9uZW50LFxuICAgIGRpc2FibGVUeXBvZ3JhcGh5XG4gIH0pO1xuICBjb25zdCBjbGFzc2VzID0gdXNlVXRpbGl0eUNsYXNzZXMob3duZXJTdGF0ZSk7XG4gIGxldCB0aXRsZSA9IHRpdGxlUHJvcDtcbiAgaWYgKHRpdGxlICE9IG51bGwgJiYgdGl0bGUudHlwZSAhPT0gVHlwb2dyYXBoeSAmJiAhZGlzYWJsZVR5cG9ncmFwaHkpIHtcbiAgICB0aXRsZSA9IC8qI19fUFVSRV9fKi9fanN4KFR5cG9ncmFwaHksIF9leHRlbmRzKHtcbiAgICAgIHZhcmlhbnQ6IGF2YXRhciA/ICdib2R5MicgOiAnaDUnLFxuICAgICAgY2xhc3NOYW1lOiBjbGFzc2VzLnRpdGxlLFxuICAgICAgY29tcG9uZW50OiBcInNwYW5cIixcbiAgICAgIGRpc3BsYXk6IFwiYmxvY2tcIlxuICAgIH0sIHRpdGxlVHlwb2dyYXBoeVByb3BzLCB7XG4gICAgICBjaGlsZHJlbjogdGl0bGVcbiAgICB9KSk7XG4gIH1cbiAgbGV0IHN1YmhlYWRlciA9IHN1YmhlYWRlclByb3A7XG4gIGlmIChzdWJoZWFkZXIgIT0gbnVsbCAmJiBzdWJoZWFkZXIudHlwZSAhPT0gVHlwb2dyYXBoeSAmJiAhZGlzYWJsZVR5cG9ncmFwaHkpIHtcbiAgICBzdWJoZWFkZXIgPSAvKiNfX1BVUkVfXyovX2pzeChUeXBvZ3JhcGh5LCBfZXh0ZW5kcyh7XG4gICAgICB2YXJpYW50OiBhdmF0YXIgPyAnYm9keTInIDogJ2JvZHkxJyxcbiAgICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5zdWJoZWFkZXIsXG4gICAgICBjb2xvcjogXCJ0ZXh0LnNlY29uZGFyeVwiLFxuICAgICAgY29tcG9uZW50OiBcInNwYW5cIixcbiAgICAgIGRpc3BsYXk6IFwiYmxvY2tcIlxuICAgIH0sIHN1YmhlYWRlclR5cG9ncmFwaHlQcm9wcywge1xuICAgICAgY2hpbGRyZW46IHN1YmhlYWRlclxuICAgIH0pKTtcbiAgfVxuICByZXR1cm4gLyojX19QVVJFX18qL19qc3hzKENhcmRIZWFkZXJSb290LCBfZXh0ZW5kcyh7XG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lKSxcbiAgICBhczogY29tcG9uZW50LFxuICAgIHJlZjogcmVmLFxuICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGVcbiAgfSwgb3RoZXIsIHtcbiAgICBjaGlsZHJlbjogW2F2YXRhciAmJiAvKiNfX1BVUkVfXyovX2pzeChDYXJkSGVhZGVyQXZhdGFyLCB7XG4gICAgICBjbGFzc05hbWU6IGNsYXNzZXMuYXZhdGFyLFxuICAgICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZSxcbiAgICAgIGNoaWxkcmVuOiBhdmF0YXJcbiAgICB9KSwgLyojX19QVVJFX18qL19qc3hzKENhcmRIZWFkZXJDb250ZW50LCB7XG4gICAgICBjbGFzc05hbWU6IGNsYXNzZXMuY29udGVudCxcbiAgICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGUsXG4gICAgICBjaGlsZHJlbjogW3RpdGxlLCBzdWJoZWFkZXJdXG4gICAgfSksIGFjdGlvbiAmJiAvKiNfX1BVUkVfXyovX2pzeChDYXJkSGVhZGVyQWN0aW9uLCB7XG4gICAgICBjbGFzc05hbWU6IGNsYXNzZXMuYWN0aW9uLFxuICAgICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZSxcbiAgICAgIGNoaWxkcmVuOiBhY3Rpb25cbiAgICB9KV1cbiAgfSkpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBDYXJkSGVhZGVyLnByb3BUeXBlcyAvKiByZW1vdmUtcHJvcHR5cGVzICovID0ge1xuICAvLyDilIzilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIAgV2FybmluZyDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJBcbiAgLy8g4pSCIFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucy4g4pSCXG4gIC8vIOKUgiAgICBUbyB1cGRhdGUgdGhlbSwgZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gYHBucG0gcHJvcHR5cGVzYC4gICAgIOKUglxuICAvLyDilJTilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJhcbiAgLyoqXG4gICAqIFRoZSBhY3Rpb24gdG8gZGlzcGxheSBpbiB0aGUgY2FyZCBoZWFkZXIuXG4gICAqL1xuICBhY3Rpb246IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogVGhlIEF2YXRhciBlbGVtZW50IHRvIGRpc3BsYXkuXG4gICAqL1xuICBhdmF0YXI6IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHJvb3Qgbm9kZS5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIEhUTUwgZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuICAvKipcbiAgICogSWYgYHRydWVgLCBgc3ViaGVhZGVyYCBhbmQgYHRpdGxlYCB3b24ndCBiZSB3cmFwcGVkIGJ5IGEgVHlwb2dyYXBoeSBjb21wb25lbnQuXG4gICAqIFRoaXMgY2FuIGJlIHVzZWZ1bCB0byByZW5kZXIgYW4gYWx0ZXJuYXRpdmUgVHlwb2dyYXBoeSB2YXJpYW50IGJ5IHdyYXBwaW5nXG4gICAqIHRoZSBgdGl0bGVgIHRleHQsIGFuZCBvcHRpb25hbCBgc3ViaGVhZGVyYCB0ZXh0XG4gICAqIHdpdGggdGhlIFR5cG9ncmFwaHkgY29tcG9uZW50LlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZGlzYWJsZVR5cG9ncmFwaHk6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIHN1YmhlYWRlcjogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBUaGVzZSBwcm9wcyB3aWxsIGJlIGZvcndhcmRlZCB0byB0aGUgc3ViaGVhZGVyXG4gICAqIChhcyBsb25nIGFzIGRpc2FibGVUeXBvZ3JhcGh5IGlzIG5vdCBgdHJ1ZWApLlxuICAgKi9cbiAgc3ViaGVhZGVyVHlwb2dyYXBoeVByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogVGhlIHN5c3RlbSBwcm9wIHRoYXQgYWxsb3dzIGRlZmluaW5nIHN5c3RlbSBvdmVycmlkZXMgYXMgd2VsbCBhcyBhZGRpdGlvbmFsIENTUyBzdHlsZXMuXG4gICAqL1xuICBzeDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5ib29sXSkpLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pLFxuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIHRpdGxlOiBQcm9wVHlwZXMubm9kZSxcbiAgLyoqXG4gICAqIFRoZXNlIHByb3BzIHdpbGwgYmUgZm9yd2FyZGVkIHRvIHRoZSB0aXRsZVxuICAgKiAoYXMgbG9uZyBhcyBkaXNhYmxlVHlwb2dyYXBoeSBpcyBub3QgYHRydWVgKS5cbiAgICovXG4gIHRpdGxlVHlwb2dyYXBoeVByb3BzOiBQcm9wVHlwZXMub2JqZWN0XG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgQ2FyZEhlYWRlcjsiLCJpbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzZXMnO1xuaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3MnO1xuZXhwb3J0IGZ1bmN0aW9uIGdldENhcmRNZWRpYVV0aWxpdHlDbGFzcyhzbG90KSB7XG4gIHJldHVybiBnZW5lcmF0ZVV0aWxpdHlDbGFzcygnTXVpQ2FyZE1lZGlhJywgc2xvdCk7XG59XG5jb25zdCBjYXJkTWVkaWFDbGFzc2VzID0gZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcygnTXVpQ2FyZE1lZGlhJywgWydyb290JywgJ21lZGlhJywgJ2ltZyddKTtcbmV4cG9ydCBkZWZhdWx0IGNhcmRNZWRpYUNsYXNzZXM7IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiY2hpbGRyZW5cIiwgXCJjbGFzc05hbWVcIiwgXCJjb21wb25lbnRcIiwgXCJpbWFnZVwiLCBcInNyY1wiLCBcInN0eWxlXCJdO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IGNoYWluUHJvcFR5cGVzIGZyb20gJ0BtdWkvdXRpbHMvY2hhaW5Qcm9wVHlwZXMnO1xuaW1wb3J0IGNvbXBvc2VDbGFzc2VzIGZyb20gJ0BtdWkvdXRpbHMvY29tcG9zZUNsYXNzZXMnO1xuaW1wb3J0IHsgdXNlRGVmYXVsdFByb3BzIH0gZnJvbSAnLi4vRGVmYXVsdFByb3BzUHJvdmlkZXInO1xuaW1wb3J0IHN0eWxlZCBmcm9tICcuLi9zdHlsZXMvc3R5bGVkJztcbmltcG9ydCB7IGdldENhcmRNZWRpYVV0aWxpdHlDbGFzcyB9IGZyb20gJy4vY2FyZE1lZGlhQ2xhc3Nlcyc7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuY29uc3QgdXNlVXRpbGl0eUNsYXNzZXMgPSBvd25lclN0YXRlID0+IHtcbiAgY29uc3Qge1xuICAgIGNsYXNzZXMsXG4gICAgaXNNZWRpYUNvbXBvbmVudCxcbiAgICBpc0ltYWdlQ29tcG9uZW50XG4gIH0gPSBvd25lclN0YXRlO1xuICBjb25zdCBzbG90cyA9IHtcbiAgICByb290OiBbJ3Jvb3QnLCBpc01lZGlhQ29tcG9uZW50ICYmICdtZWRpYScsIGlzSW1hZ2VDb21wb25lbnQgJiYgJ2ltZyddXG4gIH07XG4gIHJldHVybiBjb21wb3NlQ2xhc3NlcyhzbG90cywgZ2V0Q2FyZE1lZGlhVXRpbGl0eUNsYXNzLCBjbGFzc2VzKTtcbn07XG5jb25zdCBDYXJkTWVkaWFSb290ID0gc3R5bGVkKCdkaXYnLCB7XG4gIG5hbWU6ICdNdWlDYXJkTWVkaWEnLFxuICBzbG90OiAnUm9vdCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9ID0gcHJvcHM7XG4gICAgY29uc3Qge1xuICAgICAgaXNNZWRpYUNvbXBvbmVudCxcbiAgICAgIGlzSW1hZ2VDb21wb25lbnRcbiAgICB9ID0gb3duZXJTdGF0ZTtcbiAgICByZXR1cm4gW3N0eWxlcy5yb290LCBpc01lZGlhQ29tcG9uZW50ICYmIHN0eWxlcy5tZWRpYSwgaXNJbWFnZUNvbXBvbmVudCAmJiBzdHlsZXMuaW1nXTtcbiAgfVxufSkoKHtcbiAgb3duZXJTdGF0ZVxufSkgPT4gX2V4dGVuZHMoe1xuICBkaXNwbGF5OiAnYmxvY2snLFxuICBiYWNrZ3JvdW5kU2l6ZTogJ2NvdmVyJyxcbiAgYmFja2dyb3VuZFJlcGVhdDogJ25vLXJlcGVhdCcsXG4gIGJhY2tncm91bmRQb3NpdGlvbjogJ2NlbnRlcidcbn0sIG93bmVyU3RhdGUuaXNNZWRpYUNvbXBvbmVudCAmJiB7XG4gIHdpZHRoOiAnMTAwJSdcbn0sIG93bmVyU3RhdGUuaXNJbWFnZUNvbXBvbmVudCAmJiB7XG4gIC8vIOKaoO+4jyBvYmplY3QtZml0IGlzIG5vdCBzdXBwb3J0ZWQgYnkgSUUxMS5cbiAgb2JqZWN0Rml0OiAnY292ZXInXG59KSk7XG5jb25zdCBNRURJQV9DT01QT05FTlRTID0gWyd2aWRlbycsICdhdWRpbycsICdwaWN0dXJlJywgJ2lmcmFtZScsICdpbWcnXTtcbmNvbnN0IElNQUdFX0NPTVBPTkVOVFMgPSBbJ3BpY3R1cmUnLCAnaW1nJ107XG5jb25zdCBDYXJkTWVkaWEgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBDYXJkTWVkaWEoaW5Qcm9wcywgcmVmKSB7XG4gIGNvbnN0IHByb3BzID0gdXNlRGVmYXVsdFByb3BzKHtcbiAgICBwcm9wczogaW5Qcm9wcyxcbiAgICBuYW1lOiAnTXVpQ2FyZE1lZGlhJ1xuICB9KTtcbiAgY29uc3Qge1xuICAgICAgY2hpbGRyZW4sXG4gICAgICBjbGFzc05hbWUsXG4gICAgICBjb21wb25lbnQgPSAnZGl2JyxcbiAgICAgIGltYWdlLFxuICAgICAgc3JjLFxuICAgICAgc3R5bGVcbiAgICB9ID0gcHJvcHMsXG4gICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkKTtcbiAgY29uc3QgaXNNZWRpYUNvbXBvbmVudCA9IE1FRElBX0NPTVBPTkVOVFMuaW5kZXhPZihjb21wb25lbnQpICE9PSAtMTtcbiAgY29uc3QgY29tcG9zZWRTdHlsZSA9ICFpc01lZGlhQ29tcG9uZW50ICYmIGltYWdlID8gX2V4dGVuZHMoe1xuICAgIGJhY2tncm91bmRJbWFnZTogYHVybChcIiR7aW1hZ2V9XCIpYFxuICB9LCBzdHlsZSkgOiBzdHlsZTtcbiAgY29uc3Qgb3duZXJTdGF0ZSA9IF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgIGNvbXBvbmVudCxcbiAgICBpc01lZGlhQ29tcG9uZW50LFxuICAgIGlzSW1hZ2VDb21wb25lbnQ6IElNQUdFX0NPTVBPTkVOVFMuaW5kZXhPZihjb21wb25lbnQpICE9PSAtMVxuICB9KTtcbiAgY29uc3QgY2xhc3NlcyA9IHVzZVV0aWxpdHlDbGFzc2VzKG93bmVyU3RhdGUpO1xuICByZXR1cm4gLyojX19QVVJFX18qL19qc3goQ2FyZE1lZGlhUm9vdCwgX2V4dGVuZHMoe1xuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSksXG4gICAgYXM6IGNvbXBvbmVudCxcbiAgICByb2xlOiAhaXNNZWRpYUNvbXBvbmVudCAmJiBpbWFnZSA/ICdpbWcnIDogdW5kZWZpbmVkLFxuICAgIHJlZjogcmVmLFxuICAgIHN0eWxlOiBjb21wb3NlZFN0eWxlLFxuICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGUsXG4gICAgc3JjOiBpc01lZGlhQ29tcG9uZW50ID8gaW1hZ2UgfHwgc3JjIDogdW5kZWZpbmVkXG4gIH0sIG90aGVyLCB7XG4gICAgY2hpbGRyZW46IGNoaWxkcmVuXG4gIH0pKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gQ2FyZE1lZGlhLnByb3BUeXBlcyAvKiByZW1vdmUtcHJvcHR5cGVzICovID0ge1xuICAvLyDilIzilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIAgV2FybmluZyDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJBcbiAgLy8g4pSCIFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucy4g4pSCXG4gIC8vIOKUgiAgICBUbyB1cGRhdGUgdGhlbSwgZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gYHBucG0gcHJvcHR5cGVzYC4gICAgIOKUglxuICAvLyDilJTilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJhcbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogY2hhaW5Qcm9wVHlwZXMoUHJvcFR5cGVzLm5vZGUsIHByb3BzID0+IHtcbiAgICBpZiAoIXByb3BzLmNoaWxkcmVuICYmICFwcm9wcy5pbWFnZSAmJiAhcHJvcHMuc3JjICYmICFwcm9wcy5jb21wb25lbnQpIHtcbiAgICAgIHJldHVybiBuZXcgRXJyb3IoJ01VSTogRWl0aGVyIGBjaGlsZHJlbmAsIGBpbWFnZWAsIGBzcmNgIG9yIGBjb21wb25lbnRgIHByb3AgbXVzdCBiZSBzcGVjaWZpZWQuJyk7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9KSxcbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBIVE1MIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBjb21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcbiAgLyoqXG4gICAqIEltYWdlIHRvIGJlIGRpc3BsYXllZCBhcyBhIGJhY2tncm91bmQgaW1hZ2UuXG4gICAqIEVpdGhlciBgaW1hZ2VgIG9yIGBzcmNgIHByb3AgbXVzdCBiZSBzcGVjaWZpZWQuXG4gICAqIE5vdGUgdGhhdCBjYWxsZXIgbXVzdCBzcGVjaWZ5IGhlaWdodCBvdGhlcndpc2UgdGhlIGltYWdlIHdpbGwgbm90IGJlIHZpc2libGUuXG4gICAqL1xuICBpbWFnZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIEFuIGFsaWFzIGZvciBgaW1hZ2VgIHByb3BlcnR5LlxuICAgKiBBdmFpbGFibGUgb25seSB3aXRoIG1lZGlhIGNvbXBvbmVudHMuXG4gICAqIE1lZGlhIGNvbXBvbmVudHM6IGB2aWRlb2AsIGBhdWRpb2AsIGBwaWN0dXJlYCwgYGlmcmFtZWAsIGBpbWdgLlxuICAgKi9cbiAgc3JjOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgc3R5bGU6IFByb3BUeXBlcy5vYmplY3QsXG4gIC8qKlxuICAgKiBUaGUgc3lzdGVtIHByb3AgdGhhdCBhbGxvd3MgZGVmaW5pbmcgc3lzdGVtIG92ZXJyaWRlcyBhcyB3ZWxsIGFzIGFkZGl0aW9uYWwgQ1NTIHN0eWxlcy5cbiAgICovXG4gIHN4OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLmJvb2xdKSksIFByb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCBDYXJkTWVkaWE7IiwiaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzc2VzJztcbmltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzJztcbmV4cG9ydCBmdW5jdGlvbiBnZXRDaXJjdWxhclByb2dyZXNzVXRpbGl0eUNsYXNzKHNsb3QpIHtcbiAgcmV0dXJuIGdlbmVyYXRlVXRpbGl0eUNsYXNzKCdNdWlDaXJjdWxhclByb2dyZXNzJywgc2xvdCk7XG59XG5jb25zdCBjaXJjdWxhclByb2dyZXNzQ2xhc3NlcyA9IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMoJ011aUNpcmN1bGFyUHJvZ3Jlc3MnLCBbJ3Jvb3QnLCAnZGV0ZXJtaW5hdGUnLCAnaW5kZXRlcm1pbmF0ZScsICdjb2xvclByaW1hcnknLCAnY29sb3JTZWNvbmRhcnknLCAnc3ZnJywgJ2NpcmNsZScsICdjaXJjbGVEZXRlcm1pbmF0ZScsICdjaXJjbGVJbmRldGVybWluYXRlJywgJ2NpcmNsZURpc2FibGVTaHJpbmsnXSk7XG5leHBvcnQgZGVmYXVsdCBjaXJjdWxhclByb2dyZXNzQ2xhc3NlczsiLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJjbGFzc05hbWVcIiwgXCJjb2xvclwiLCBcImRpc2FibGVTaHJpbmtcIiwgXCJzaXplXCIsIFwic3R5bGVcIiwgXCJ0aGlja25lc3NcIiwgXCJ2YWx1ZVwiLCBcInZhcmlhbnRcIl07XG5sZXQgXyA9IHQgPT4gdCxcbiAgX3QsXG4gIF90MixcbiAgX3QzLFxuICBfdDQ7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgY2hhaW5Qcm9wVHlwZXMgZnJvbSAnQG11aS91dGlscy9jaGFpblByb3BUeXBlcyc7XG5pbXBvcnQgY29tcG9zZUNsYXNzZXMgZnJvbSAnQG11aS91dGlscy9jb21wb3NlQ2xhc3Nlcyc7XG5pbXBvcnQgeyBrZXlmcmFtZXMsIGNzcyB9IGZyb20gJ0BtdWkvc3lzdGVtJztcbmltcG9ydCBjYXBpdGFsaXplIGZyb20gJy4uL3V0aWxzL2NhcGl0YWxpemUnO1xuaW1wb3J0IHsgdXNlRGVmYXVsdFByb3BzIH0gZnJvbSAnLi4vRGVmYXVsdFByb3BzUHJvdmlkZXInO1xuaW1wb3J0IHN0eWxlZCBmcm9tICcuLi9zdHlsZXMvc3R5bGVkJztcbmltcG9ydCB7IGdldENpcmN1bGFyUHJvZ3Jlc3NVdGlsaXR5Q2xhc3MgfSBmcm9tICcuL2NpcmN1bGFyUHJvZ3Jlc3NDbGFzc2VzJztcbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5jb25zdCBTSVpFID0gNDQ7XG5jb25zdCBjaXJjdWxhclJvdGF0ZUtleWZyYW1lID0ga2V5ZnJhbWVzKF90IHx8IChfdCA9IF9gXG4gIDAlIHtcbiAgICB0cmFuc2Zvcm06IHJvdGF0ZSgwZGVnKTtcbiAgfVxuXG4gIDEwMCUge1xuICAgIHRyYW5zZm9ybTogcm90YXRlKDM2MGRlZyk7XG4gIH1cbmApKTtcbmNvbnN0IGNpcmN1bGFyRGFzaEtleWZyYW1lID0ga2V5ZnJhbWVzKF90MiB8fCAoX3QyID0gX2BcbiAgMCUge1xuICAgIHN0cm9rZS1kYXNoYXJyYXk6IDFweCwgMjAwcHg7XG4gICAgc3Ryb2tlLWRhc2hvZmZzZXQ6IDA7XG4gIH1cblxuICA1MCUge1xuICAgIHN0cm9rZS1kYXNoYXJyYXk6IDEwMHB4LCAyMDBweDtcbiAgICBzdHJva2UtZGFzaG9mZnNldDogLTE1cHg7XG4gIH1cblxuICAxMDAlIHtcbiAgICBzdHJva2UtZGFzaGFycmF5OiAxMDBweCwgMjAwcHg7XG4gICAgc3Ryb2tlLWRhc2hvZmZzZXQ6IC0xMjVweDtcbiAgfVxuYCkpO1xuY29uc3QgdXNlVXRpbGl0eUNsYXNzZXMgPSBvd25lclN0YXRlID0+IHtcbiAgY29uc3Qge1xuICAgIGNsYXNzZXMsXG4gICAgdmFyaWFudCxcbiAgICBjb2xvcixcbiAgICBkaXNhYmxlU2hyaW5rXG4gIH0gPSBvd25lclN0YXRlO1xuICBjb25zdCBzbG90cyA9IHtcbiAgICByb290OiBbJ3Jvb3QnLCB2YXJpYW50LCBgY29sb3Ike2NhcGl0YWxpemUoY29sb3IpfWBdLFxuICAgIHN2ZzogWydzdmcnXSxcbiAgICBjaXJjbGU6IFsnY2lyY2xlJywgYGNpcmNsZSR7Y2FwaXRhbGl6ZSh2YXJpYW50KX1gLCBkaXNhYmxlU2hyaW5rICYmICdjaXJjbGVEaXNhYmxlU2hyaW5rJ11cbiAgfTtcbiAgcmV0dXJuIGNvbXBvc2VDbGFzc2VzKHNsb3RzLCBnZXRDaXJjdWxhclByb2dyZXNzVXRpbGl0eUNsYXNzLCBjbGFzc2VzKTtcbn07XG5jb25zdCBDaXJjdWxhclByb2dyZXNzUm9vdCA9IHN0eWxlZCgnc3BhbicsIHtcbiAgbmFtZTogJ011aUNpcmN1bGFyUHJvZ3Jlc3MnLFxuICBzbG90OiAnUm9vdCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9ID0gcHJvcHM7XG4gICAgcmV0dXJuIFtzdHlsZXMucm9vdCwgc3R5bGVzW293bmVyU3RhdGUudmFyaWFudF0sIHN0eWxlc1tgY29sb3Ike2NhcGl0YWxpemUob3duZXJTdGF0ZS5jb2xvcil9YF1dO1xuICB9XG59KSgoe1xuICBvd25lclN0YXRlLFxuICB0aGVtZVxufSkgPT4gX2V4dGVuZHMoe1xuICBkaXNwbGF5OiAnaW5saW5lLWJsb2NrJ1xufSwgb3duZXJTdGF0ZS52YXJpYW50ID09PSAnZGV0ZXJtaW5hdGUnICYmIHtcbiAgdHJhbnNpdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCd0cmFuc2Zvcm0nKVxufSwgb3duZXJTdGF0ZS5jb2xvciAhPT0gJ2luaGVyaXQnICYmIHtcbiAgY29sb3I6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlW293bmVyU3RhdGUuY29sb3JdLm1haW5cbn0pLCAoe1xuICBvd25lclN0YXRlXG59KSA9PiBvd25lclN0YXRlLnZhcmlhbnQgPT09ICdpbmRldGVybWluYXRlJyAmJiBjc3MoX3QzIHx8IChfdDMgPSBfYFxuICAgICAgYW5pbWF0aW9uOiAkezB9IDEuNHMgbGluZWFyIGluZmluaXRlO1xuICAgIGApLCBjaXJjdWxhclJvdGF0ZUtleWZyYW1lKSk7XG5jb25zdCBDaXJjdWxhclByb2dyZXNzU1ZHID0gc3R5bGVkKCdzdmcnLCB7XG4gIG5hbWU6ICdNdWlDaXJjdWxhclByb2dyZXNzJyxcbiAgc2xvdDogJ1N2ZycsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4gc3R5bGVzLnN2Z1xufSkoe1xuICBkaXNwbGF5OiAnYmxvY2snIC8vIEtlZXBzIHRoZSBwcm9ncmVzcyBjZW50ZXJlZFxufSk7XG5jb25zdCBDaXJjdWxhclByb2dyZXNzQ2lyY2xlID0gc3R5bGVkKCdjaXJjbGUnLCB7XG4gIG5hbWU6ICdNdWlDaXJjdWxhclByb2dyZXNzJyxcbiAgc2xvdDogJ0NpcmNsZScsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9ID0gcHJvcHM7XG4gICAgcmV0dXJuIFtzdHlsZXMuY2lyY2xlLCBzdHlsZXNbYGNpcmNsZSR7Y2FwaXRhbGl6ZShvd25lclN0YXRlLnZhcmlhbnQpfWBdLCBvd25lclN0YXRlLmRpc2FibGVTaHJpbmsgJiYgc3R5bGVzLmNpcmNsZURpc2FibGVTaHJpbmtdO1xuICB9XG59KSgoe1xuICBvd25lclN0YXRlLFxuICB0aGVtZVxufSkgPT4gX2V4dGVuZHMoe1xuICBzdHJva2U6ICdjdXJyZW50Q29sb3InXG59LCBvd25lclN0YXRlLnZhcmlhbnQgPT09ICdkZXRlcm1pbmF0ZScgJiYge1xuICB0cmFuc2l0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoJ3N0cm9rZS1kYXNob2Zmc2V0Jylcbn0sIG93bmVyU3RhdGUudmFyaWFudCA9PT0gJ2luZGV0ZXJtaW5hdGUnICYmIHtcbiAgLy8gU29tZSBkZWZhdWx0IHZhbHVlIHRoYXQgbG9va3MgZmluZSB3YWl0aW5nIGZvciB0aGUgYW5pbWF0aW9uIHRvIGtpY2tzIGluLlxuICBzdHJva2VEYXNoYXJyYXk6ICc4MHB4LCAyMDBweCcsXG4gIHN0cm9rZURhc2hvZmZzZXQ6IDAgLy8gQWRkIHRoZSB1bml0IHRvIGZpeCBhIEVkZ2UgMTYgYW5kIGJlbG93IGJ1Zy5cbn0pLCAoe1xuICBvd25lclN0YXRlXG59KSA9PiBvd25lclN0YXRlLnZhcmlhbnQgPT09ICdpbmRldGVybWluYXRlJyAmJiAhb3duZXJTdGF0ZS5kaXNhYmxlU2hyaW5rICYmIGNzcyhfdDQgfHwgKF90NCA9IF9gXG4gICAgICBhbmltYXRpb246ICR7MH0gMS40cyBlYXNlLWluLW91dCBpbmZpbml0ZTtcbiAgICBgKSwgY2lyY3VsYXJEYXNoS2V5ZnJhbWUpKTtcblxuLyoqXG4gKiAjIyBBUklBXG4gKlxuICogSWYgdGhlIHByb2dyZXNzIGJhciBpcyBkZXNjcmliaW5nIHRoZSBsb2FkaW5nIHByb2dyZXNzIG9mIGEgcGFydGljdWxhciByZWdpb24gb2YgYSBwYWdlLFxuICogeW91IHNob3VsZCB1c2UgYGFyaWEtZGVzY3JpYmVkYnlgIHRvIHBvaW50IHRvIHRoZSBwcm9ncmVzcyBiYXIsIGFuZCBzZXQgdGhlIGBhcmlhLWJ1c3lgXG4gKiBhdHRyaWJ1dGUgdG8gYHRydWVgIG9uIHRoYXQgcmVnaW9uIHVudGlsIGl0IGhhcyBmaW5pc2hlZCBsb2FkaW5nLlxuICovXG5jb25zdCBDaXJjdWxhclByb2dyZXNzID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gQ2lyY3VsYXJQcm9ncmVzcyhpblByb3BzLCByZWYpIHtcbiAgY29uc3QgcHJvcHMgPSB1c2VEZWZhdWx0UHJvcHMoe1xuICAgIHByb3BzOiBpblByb3BzLFxuICAgIG5hbWU6ICdNdWlDaXJjdWxhclByb2dyZXNzJ1xuICB9KTtcbiAgY29uc3Qge1xuICAgICAgY2xhc3NOYW1lLFxuICAgICAgY29sb3IgPSAncHJpbWFyeScsXG4gICAgICBkaXNhYmxlU2hyaW5rID0gZmFsc2UsXG4gICAgICBzaXplID0gNDAsXG4gICAgICBzdHlsZSxcbiAgICAgIHRoaWNrbmVzcyA9IDMuNixcbiAgICAgIHZhbHVlID0gMCxcbiAgICAgIHZhcmlhbnQgPSAnaW5kZXRlcm1pbmF0ZSdcbiAgICB9ID0gcHJvcHMsXG4gICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkKTtcbiAgY29uc3Qgb3duZXJTdGF0ZSA9IF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgIGNvbG9yLFxuICAgIGRpc2FibGVTaHJpbmssXG4gICAgc2l6ZSxcbiAgICB0aGlja25lc3MsXG4gICAgdmFsdWUsXG4gICAgdmFyaWFudFxuICB9KTtcbiAgY29uc3QgY2xhc3NlcyA9IHVzZVV0aWxpdHlDbGFzc2VzKG93bmVyU3RhdGUpO1xuICBjb25zdCBjaXJjbGVTdHlsZSA9IHt9O1xuICBjb25zdCByb290U3R5bGUgPSB7fTtcbiAgY29uc3Qgcm9vdFByb3BzID0ge307XG4gIGlmICh2YXJpYW50ID09PSAnZGV0ZXJtaW5hdGUnKSB7XG4gICAgY29uc3QgY2lyY3VtZmVyZW5jZSA9IDIgKiBNYXRoLlBJICogKChTSVpFIC0gdGhpY2tuZXNzKSAvIDIpO1xuICAgIGNpcmNsZVN0eWxlLnN0cm9rZURhc2hhcnJheSA9IGNpcmN1bWZlcmVuY2UudG9GaXhlZCgzKTtcbiAgICByb290UHJvcHNbJ2FyaWEtdmFsdWVub3cnXSA9IE1hdGgucm91bmQodmFsdWUpO1xuICAgIGNpcmNsZVN0eWxlLnN0cm9rZURhc2hvZmZzZXQgPSBgJHsoKDEwMCAtIHZhbHVlKSAvIDEwMCAqIGNpcmN1bWZlcmVuY2UpLnRvRml4ZWQoMyl9cHhgO1xuICAgIHJvb3RTdHlsZS50cmFuc2Zvcm0gPSAncm90YXRlKC05MGRlZyknO1xuICB9XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeChDaXJjdWxhclByb2dyZXNzUm9vdCwgX2V4dGVuZHMoe1xuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSksXG4gICAgc3R5bGU6IF9leHRlbmRzKHtcbiAgICAgIHdpZHRoOiBzaXplLFxuICAgICAgaGVpZ2h0OiBzaXplXG4gICAgfSwgcm9vdFN0eWxlLCBzdHlsZSksXG4gICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZSxcbiAgICByZWY6IHJlZixcbiAgICByb2xlOiBcInByb2dyZXNzYmFyXCJcbiAgfSwgcm9vdFByb3BzLCBvdGhlciwge1xuICAgIGNoaWxkcmVuOiAvKiNfX1BVUkVfXyovX2pzeChDaXJjdWxhclByb2dyZXNzU1ZHLCB7XG4gICAgICBjbGFzc05hbWU6IGNsYXNzZXMuc3ZnLFxuICAgICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZSxcbiAgICAgIHZpZXdCb3g6IGAke1NJWkUgLyAyfSAke1NJWkUgLyAyfSAke1NJWkV9ICR7U0laRX1gLFxuICAgICAgY2hpbGRyZW46IC8qI19fUFVSRV9fKi9fanN4KENpcmN1bGFyUHJvZ3Jlc3NDaXJjbGUsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBjbGFzc2VzLmNpcmNsZSxcbiAgICAgICAgc3R5bGU6IGNpcmNsZVN0eWxlLFxuICAgICAgICBvd25lclN0YXRlOiBvd25lclN0YXRlLFxuICAgICAgICBjeDogU0laRSxcbiAgICAgICAgY3k6IFNJWkUsXG4gICAgICAgIHI6IChTSVpFIC0gdGhpY2tuZXNzKSAvIDIsXG4gICAgICAgIGZpbGw6IFwibm9uZVwiLFxuICAgICAgICBzdHJva2VXaWR0aDogdGhpY2tuZXNzXG4gICAgICB9KVxuICAgIH0pXG4gIH0pKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gQ2lyY3VsYXJQcm9ncmVzcy5wcm9wVHlwZXMgLyogcmVtb3ZlLXByb3B0eXBlcyAqLyA9IHtcbiAgLy8g4pSM4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAIFdhcm5pbmcg4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSQXG4gIC8vIOKUgiBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMuIOKUglxuICAvLyDilIIgICAgVG8gdXBkYXRlIHRoZW0sIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIGBwbnBtIHByb3B0eXBlc2AuICAgICDilIJcbiAgLy8g4pSU4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSYXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogVGhlIGNvbG9yIG9mIHRoZSBjb21wb25lbnQuXG4gICAqIEl0IHN1cHBvcnRzIGJvdGggZGVmYXVsdCBhbmQgY3VzdG9tIHRoZW1lIGNvbG9ycywgd2hpY2ggY2FuIGJlIGFkZGVkIGFzIHNob3duIGluIHRoZVxuICAgKiBbcGFsZXR0ZSBjdXN0b21pemF0aW9uIGd1aWRlXShodHRwczovL211aS5jb20vbWF0ZXJpYWwtdWkvY3VzdG9taXphdGlvbi9wYWxldHRlLyNjdXN0b20tY29sb3JzKS5cbiAgICogQGRlZmF1bHQgJ3ByaW1hcnknXG4gICAqL1xuICBjb2xvcjogUHJvcFR5cGVzIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi8ub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydpbmhlcml0JywgJ3ByaW1hcnknLCAnc2Vjb25kYXJ5JywgJ2Vycm9yJywgJ2luZm8nLCAnc3VjY2VzcycsICd3YXJuaW5nJ10pLCBQcm9wVHlwZXMuc3RyaW5nXSksXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBzaHJpbmsgYW5pbWF0aW9uIGlzIGRpc2FibGVkLlxuICAgKiBUaGlzIG9ubHkgd29ya3MgaWYgdmFyaWFudCBpcyBgaW5kZXRlcm1pbmF0ZWAuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkaXNhYmxlU2hyaW5rOiBjaGFpblByb3BUeXBlcyhQcm9wVHlwZXMuYm9vbCwgcHJvcHMgPT4ge1xuICAgIGlmIChwcm9wcy5kaXNhYmxlU2hyaW5rICYmIHByb3BzLnZhcmlhbnQgJiYgcHJvcHMudmFyaWFudCAhPT0gJ2luZGV0ZXJtaW5hdGUnKSB7XG4gICAgICByZXR1cm4gbmV3IEVycm9yKCdNVUk6IFlvdSBoYXZlIHByb3ZpZGVkIHRoZSBgZGlzYWJsZVNocmlua2AgcHJvcCAnICsgJ3dpdGggYSB2YXJpYW50IG90aGVyIHRoYW4gYGluZGV0ZXJtaW5hdGVgLiBUaGlzIHdpbGwgaGF2ZSBubyBlZmZlY3QuJyk7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9KSxcbiAgLyoqXG4gICAqIFRoZSBzaXplIG9mIHRoZSBjb21wb25lbnQuXG4gICAqIElmIHVzaW5nIGEgbnVtYmVyLCB0aGUgcGl4ZWwgdW5pdCBpcyBhc3N1bWVkLlxuICAgKiBJZiB1c2luZyBhIHN0cmluZywgeW91IG5lZWQgdG8gcHJvdmlkZSB0aGUgQ1NTIHVuaXQsIGZvciBleGFtcGxlICczcmVtJy5cbiAgICogQGRlZmF1bHQgNDBcbiAgICovXG4gIHNpemU6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zdHJpbmddKSxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHN0eWxlOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogVGhlIHN5c3RlbSBwcm9wIHRoYXQgYWxsb3dzIGRlZmluaW5nIHN5c3RlbSBvdmVycmlkZXMgYXMgd2VsbCBhcyBhZGRpdGlvbmFsIENTUyBzdHlsZXMuXG4gICAqL1xuICBzeDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5ib29sXSkpLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pLFxuICAvKipcbiAgICogVGhlIHRoaWNrbmVzcyBvZiB0aGUgY2lyY2xlLlxuICAgKiBAZGVmYXVsdCAzLjZcbiAgICovXG4gIHRoaWNrbmVzczogUHJvcFR5cGVzLm51bWJlcixcbiAgLyoqXG4gICAqIFRoZSB2YWx1ZSBvZiB0aGUgcHJvZ3Jlc3MgaW5kaWNhdG9yIGZvciB0aGUgZGV0ZXJtaW5hdGUgdmFyaWFudC5cbiAgICogVmFsdWUgYmV0d2VlbiAwIGFuZCAxMDAuXG4gICAqIEBkZWZhdWx0IDBcbiAgICovXG4gIHZhbHVlOiBQcm9wVHlwZXMubnVtYmVyLFxuICAvKipcbiAgICogVGhlIHZhcmlhbnQgdG8gdXNlLlxuICAgKiBVc2UgaW5kZXRlcm1pbmF0ZSB3aGVuIHRoZXJlIGlzIG5vIHByb2dyZXNzIHZhbHVlLlxuICAgKiBAZGVmYXVsdCAnaW5kZXRlcm1pbmF0ZSdcbiAgICovXG4gIHZhcmlhbnQ6IFByb3BUeXBlcy5vbmVPZihbJ2RldGVybWluYXRlJywgJ2luZGV0ZXJtaW5hdGUnXSlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCBDaXJjdWxhclByb2dyZXNzOyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IGVsZW1lbnRBY2NlcHRpbmdSZWYsIGV4YWN0UHJvcCwgdW5zdGFibGVfb3duZXJEb2N1bWVudCBhcyBvd25lckRvY3VtZW50LCB1bnN0YWJsZV91c2VGb3JrUmVmIGFzIHVzZUZvcmtSZWYsIHVuc3RhYmxlX3VzZUV2ZW50Q2FsbGJhY2sgYXMgdXNlRXZlbnRDYWxsYmFjayB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuXG4vLyBUT0RPOiByZXR1cm4gYEV2ZW50SGFuZGxlck5hbWUgZXh0ZW5kcyBgb24ke2luZmVyIEV2ZW50TmFtZX1gID8gTG93ZXJjYXNlPEV2ZW50TmFtZT4gOiBuZXZlcmAgb25jZSBnZW5lcmF0ZVByb3BUeXBlcyBydW5zIHdpdGggVFMgNC4xXG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuZnVuY3Rpb24gbWFwRXZlbnRQcm9wVG9FdmVudChldmVudFByb3ApIHtcbiAgcmV0dXJuIGV2ZW50UHJvcC5zdWJzdHJpbmcoMikudG9Mb3dlckNhc2UoKTtcbn1cbmZ1bmN0aW9uIGNsaWNrZWRSb290U2Nyb2xsYmFyKGV2ZW50LCBkb2MpIHtcbiAgcmV0dXJuIGRvYy5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGggPCBldmVudC5jbGllbnRYIHx8IGRvYy5kb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0IDwgZXZlbnQuY2xpZW50WTtcbn1cbi8qKlxuICogTGlzdGVuIGZvciBjbGljayBldmVudHMgdGhhdCBvY2N1ciBzb21ld2hlcmUgaW4gdGhlIGRvY3VtZW50LCBvdXRzaWRlIG9mIHRoZSBlbGVtZW50IGl0c2VsZi5cbiAqIEZvciBpbnN0YW5jZSwgaWYgeW91IG5lZWQgdG8gaGlkZSBhIG1lbnUgd2hlbiBwZW9wbGUgY2xpY2sgYW55d2hlcmUgZWxzZSBvbiB5b3VyIHBhZ2UuXG4gKlxuICogRGVtb3M6XG4gKlxuICogLSBbQ2xpY2stQXdheSBMaXN0ZW5lcl0oaHR0cHM6Ly9tdWkuY29tL21hdGVyaWFsLXVpL3JlYWN0LWNsaWNrLWF3YXktbGlzdGVuZXIvKVxuICogLSBbTWVudV0oaHR0cHM6Ly9tdWkuY29tL21hdGVyaWFsLXVpL3JlYWN0LW1lbnUvKVxuICpcbiAqIEFQSTpcbiAqXG4gKiAtIFtDbGlja0F3YXlMaXN0ZW5lciBBUEldKGh0dHBzOi8vbXVpLmNvbS9tYXRlcmlhbC11aS9hcGkvY2xpY2stYXdheS1saXN0ZW5lci8pXG4gKi9cbmZ1bmN0aW9uIENsaWNrQXdheUxpc3RlbmVyKHByb3BzKSB7XG4gIGNvbnN0IHtcbiAgICBjaGlsZHJlbixcbiAgICBkaXNhYmxlUmVhY3RUcmVlID0gZmFsc2UsXG4gICAgbW91c2VFdmVudCA9ICdvbkNsaWNrJyxcbiAgICBvbkNsaWNrQXdheSxcbiAgICB0b3VjaEV2ZW50ID0gJ29uVG91Y2hFbmQnXG4gIH0gPSBwcm9wcztcbiAgY29uc3QgbW92ZWRSZWYgPSBSZWFjdC51c2VSZWYoZmFsc2UpO1xuICBjb25zdCBub2RlUmVmID0gUmVhY3QudXNlUmVmKG51bGwpO1xuICBjb25zdCBhY3RpdmF0ZWRSZWYgPSBSZWFjdC51c2VSZWYoZmFsc2UpO1xuICBjb25zdCBzeW50aGV0aWNFdmVudFJlZiA9IFJlYWN0LnVzZVJlZihmYWxzZSk7XG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgLy8gRW5zdXJlIHRoYXQgdGhpcyBjb21wb25lbnQgaXMgbm90IFwiYWN0aXZhdGVkXCIgc3luY2hyb25vdXNseS5cbiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvaXNzdWVzLzIwMDc0XG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICBhY3RpdmF0ZWRSZWYuY3VycmVudCA9IHRydWU7XG4gICAgfSwgMCk7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIGFjdGl2YXRlZFJlZi5jdXJyZW50ID0gZmFsc2U7XG4gICAgfTtcbiAgfSwgW10pO1xuICBjb25zdCBoYW5kbGVSZWYgPSB1c2VGb3JrUmVmKFxuICAvLyBAdHMtZXhwZWN0LWVycm9yIFRPRE8gdXBzdHJlYW0gZml4XG4gIGNoaWxkcmVuLnJlZiwgbm9kZVJlZik7XG5cbiAgLy8gVGhlIGhhbmRsZXIgZG9lc24ndCB0YWtlIGV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQgaW50byBhY2NvdW50OlxuICAvL1xuICAvLyBldmVudC5wcmV2ZW50RGVmYXVsdCgpIGlzIG1lYW50IHRvIHN0b3AgZGVmYXVsdCBiZWhhdmlvcnMgbGlrZVxuICAvLyBjbGlja2luZyBhIGNoZWNrYm94IHRvIGNoZWNrIGl0LCBoaXR0aW5nIGEgYnV0dG9uIHRvIHN1Ym1pdCBhIGZvcm0sXG4gIC8vIGFuZCBoaXR0aW5nIGxlZnQgYXJyb3cgdG8gbW92ZSB0aGUgY3Vyc29yIGluIGEgdGV4dCBpbnB1dCBldGMuXG4gIC8vIE9ubHkgc3BlY2lhbCBIVE1MIGVsZW1lbnRzIGhhdmUgdGhlc2UgZGVmYXVsdCBiZWhhdmlvcnMuXG4gIGNvbnN0IGhhbmRsZUNsaWNrQXdheSA9IHVzZUV2ZW50Q2FsbGJhY2soZXZlbnQgPT4ge1xuICAgIC8vIEdpdmVuIGRldmVsb3BlcnMgY2FuIHN0b3AgdGhlIHByb3BhZ2F0aW9uIG9mIHRoZSBzeW50aGV0aWMgZXZlbnQsXG4gICAgLy8gd2UgY2FuIG9ubHkgYmUgY29uZmlkZW50IHdpdGggYSBwb3NpdGl2ZSB2YWx1ZS5cbiAgICBjb25zdCBpbnNpZGVSZWFjdFRyZWUgPSBzeW50aGV0aWNFdmVudFJlZi5jdXJyZW50O1xuICAgIHN5bnRoZXRpY0V2ZW50UmVmLmN1cnJlbnQgPSBmYWxzZTtcbiAgICBjb25zdCBkb2MgPSBvd25lckRvY3VtZW50KG5vZGVSZWYuY3VycmVudCk7XG5cbiAgICAvLyAxLiBJRTExIHN1cHBvcnQsIHdoaWNoIHRyaWdnZXIgdGhlIGhhbmRsZUNsaWNrQXdheSBldmVuIGFmdGVyIHRoZSB1bmJpbmRcbiAgICAvLyAyLiBUaGUgY2hpbGQgbWlnaHQgcmVuZGVyIG51bGwuXG4gICAgLy8gMy4gQmVoYXZlIGxpa2UgYSBibHVyIGxpc3RlbmVyLlxuICAgIGlmICghYWN0aXZhdGVkUmVmLmN1cnJlbnQgfHwgIW5vZGVSZWYuY3VycmVudCB8fCAnY2xpZW50WCcgaW4gZXZlbnQgJiYgY2xpY2tlZFJvb3RTY3JvbGxiYXIoZXZlbnQsIGRvYykpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBEbyBub3QgYWN0IGlmIHVzZXIgcGVyZm9ybWVkIHRvdWNobW92ZVxuICAgIGlmIChtb3ZlZFJlZi5jdXJyZW50KSB7XG4gICAgICBtb3ZlZFJlZi5jdXJyZW50ID0gZmFsc2U7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGxldCBpbnNpZGVET007XG5cbiAgICAvLyBJZiBub3QgZW5vdWdoLCBjYW4gdXNlIGh0dHBzOi8vZ2l0aHViLmNvbS9EaWV0ZXJIb2x2b2V0L2V2ZW50LXByb3BhZ2F0aW9uLXBhdGgvYmxvYi9tYXN0ZXIvcHJvcGFnYXRpb25QYXRoLmpzXG4gICAgaWYgKGV2ZW50LmNvbXBvc2VkUGF0aCkge1xuICAgICAgaW5zaWRlRE9NID0gZXZlbnQuY29tcG9zZWRQYXRoKCkuaW5kZXhPZihub2RlUmVmLmN1cnJlbnQpID4gLTE7XG4gICAgfSBlbHNlIHtcbiAgICAgIGluc2lkZURPTSA9ICFkb2MuZG9jdW1lbnRFbGVtZW50LmNvbnRhaW5zKFxuICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvciByZXR1cm5zIGBmYWxzZWAgYXMgaW50ZW5kZWQgd2hlbiBub3QgZGlzcGF0Y2hlZCBmcm9tIGEgTm9kZVxuICAgICAgZXZlbnQudGFyZ2V0KSB8fCBub2RlUmVmLmN1cnJlbnQuY29udGFpbnMoXG4gICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIHJldHVybnMgYGZhbHNlYCBhcyBpbnRlbmRlZCB3aGVuIG5vdCBkaXNwYXRjaGVkIGZyb20gYSBOb2RlXG4gICAgICBldmVudC50YXJnZXQpO1xuICAgIH1cbiAgICBpZiAoIWluc2lkZURPTSAmJiAoZGlzYWJsZVJlYWN0VHJlZSB8fCAhaW5zaWRlUmVhY3RUcmVlKSkge1xuICAgICAgb25DbGlja0F3YXkoZXZlbnQpO1xuICAgIH1cbiAgfSk7XG5cbiAgLy8gS2VlcCB0cmFjayBvZiBtb3VzZS90b3VjaCBldmVudHMgdGhhdCBidWJibGVkIHVwIHRocm91Z2ggdGhlIHBvcnRhbC5cbiAgY29uc3QgY3JlYXRlSGFuZGxlU3ludGhldGljID0gaGFuZGxlck5hbWUgPT4gZXZlbnQgPT4ge1xuICAgIHN5bnRoZXRpY0V2ZW50UmVmLmN1cnJlbnQgPSB0cnVlO1xuICAgIGNvbnN0IGNoaWxkcmVuUHJvcHNIYW5kbGVyID0gY2hpbGRyZW4ucHJvcHNbaGFuZGxlck5hbWVdO1xuICAgIGlmIChjaGlsZHJlblByb3BzSGFuZGxlcikge1xuICAgICAgY2hpbGRyZW5Qcm9wc0hhbmRsZXIoZXZlbnQpO1xuICAgIH1cbiAgfTtcbiAgY29uc3QgY2hpbGRyZW5Qcm9wcyA9IHtcbiAgICByZWY6IGhhbmRsZVJlZlxuICB9O1xuICBpZiAodG91Y2hFdmVudCAhPT0gZmFsc2UpIHtcbiAgICBjaGlsZHJlblByb3BzW3RvdWNoRXZlbnRdID0gY3JlYXRlSGFuZGxlU3ludGhldGljKHRvdWNoRXZlbnQpO1xuICB9XG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKHRvdWNoRXZlbnQgIT09IGZhbHNlKSB7XG4gICAgICBjb25zdCBtYXBwZWRUb3VjaEV2ZW50ID0gbWFwRXZlbnRQcm9wVG9FdmVudCh0b3VjaEV2ZW50KTtcbiAgICAgIGNvbnN0IGRvYyA9IG93bmVyRG9jdW1lbnQobm9kZVJlZi5jdXJyZW50KTtcbiAgICAgIGNvbnN0IGhhbmRsZVRvdWNoTW92ZSA9ICgpID0+IHtcbiAgICAgICAgbW92ZWRSZWYuY3VycmVudCA9IHRydWU7XG4gICAgICB9O1xuICAgICAgZG9jLmFkZEV2ZW50TGlzdGVuZXIobWFwcGVkVG91Y2hFdmVudCwgaGFuZGxlQ2xpY2tBd2F5KTtcbiAgICAgIGRvYy5hZGRFdmVudExpc3RlbmVyKCd0b3VjaG1vdmUnLCBoYW5kbGVUb3VjaE1vdmUpO1xuICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgZG9jLnJlbW92ZUV2ZW50TGlzdGVuZXIobWFwcGVkVG91Y2hFdmVudCwgaGFuZGxlQ2xpY2tBd2F5KTtcbiAgICAgICAgZG9jLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNobW92ZScsIGhhbmRsZVRvdWNoTW92ZSk7XG4gICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9LCBbaGFuZGxlQ2xpY2tBd2F5LCB0b3VjaEV2ZW50XSk7XG4gIGlmIChtb3VzZUV2ZW50ICE9PSBmYWxzZSkge1xuICAgIGNoaWxkcmVuUHJvcHNbbW91c2VFdmVudF0gPSBjcmVhdGVIYW5kbGVTeW50aGV0aWMobW91c2VFdmVudCk7XG4gIH1cbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAobW91c2VFdmVudCAhPT0gZmFsc2UpIHtcbiAgICAgIGNvbnN0IG1hcHBlZE1vdXNlRXZlbnQgPSBtYXBFdmVudFByb3BUb0V2ZW50KG1vdXNlRXZlbnQpO1xuICAgICAgY29uc3QgZG9jID0gb3duZXJEb2N1bWVudChub2RlUmVmLmN1cnJlbnQpO1xuICAgICAgZG9jLmFkZEV2ZW50TGlzdGVuZXIobWFwcGVkTW91c2VFdmVudCwgaGFuZGxlQ2xpY2tBd2F5KTtcbiAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgIGRvYy5yZW1vdmVFdmVudExpc3RlbmVyKG1hcHBlZE1vdXNlRXZlbnQsIGhhbmRsZUNsaWNrQXdheSk7XG4gICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9LCBbaGFuZGxlQ2xpY2tBd2F5LCBtb3VzZUV2ZW50XSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeChSZWFjdC5GcmFnbWVudCwge1xuICAgIGNoaWxkcmVuOiAvKiNfX1BVUkVfXyovUmVhY3QuY2xvbmVFbGVtZW50KGNoaWxkcmVuLCBjaGlsZHJlblByb3BzKVxuICB9KTtcbn1cbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IENsaWNrQXdheUxpc3RlbmVyLnByb3BUeXBlcyAvKiByZW1vdmUtcHJvcHR5cGVzICovID0ge1xuICAvLyDilIzilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIAgV2FybmluZyDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJBcbiAgLy8g4pSCIFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucy4g4pSCXG4gIC8vIOKUgiBUbyB1cGRhdGUgdGhlbSwgZWRpdCB0aGUgVHlwZVNjcmlwdCB0eXBlcyBhbmQgcnVuIGBwbnBtIHByb3B0eXBlc2AuIOKUglxuICAvLyDilJTilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJhcbiAgLyoqXG4gICAqIFRoZSB3cmFwcGVkIGVsZW1lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogZWxlbWVudEFjY2VwdGluZ1JlZi5pc1JlcXVpcmVkLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgUmVhY3QgdHJlZSBpcyBpZ25vcmVkIGFuZCBvbmx5IHRoZSBET00gdHJlZSBpcyBjb25zaWRlcmVkLlxuICAgKiBUaGlzIHByb3AgY2hhbmdlcyBob3cgcG9ydGFsZWQgZWxlbWVudHMgYXJlIGhhbmRsZWQuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkaXNhYmxlUmVhY3RUcmVlOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIFRoZSBtb3VzZSBldmVudCB0byBsaXN0ZW4gdG8uIFlvdSBjYW4gZGlzYWJsZSB0aGUgbGlzdGVuZXIgYnkgcHJvdmlkaW5nIGBmYWxzZWAuXG4gICAqIEBkZWZhdWx0ICdvbkNsaWNrJ1xuICAgKi9cbiAgbW91c2VFdmVudDogUHJvcFR5cGVzLm9uZU9mKFsnb25DbGljaycsICdvbk1vdXNlRG93bicsICdvbk1vdXNlVXAnLCAnb25Qb2ludGVyRG93bicsICdvblBvaW50ZXJVcCcsIGZhbHNlXSksXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIGEgXCJjbGljayBhd2F5XCIgZXZlbnQgaXMgZGV0ZWN0ZWQuXG4gICAqL1xuICBvbkNsaWNrQXdheTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgLyoqXG4gICAqIFRoZSB0b3VjaCBldmVudCB0byBsaXN0ZW4gdG8uIFlvdSBjYW4gZGlzYWJsZSB0aGUgbGlzdGVuZXIgYnkgcHJvdmlkaW5nIGBmYWxzZWAuXG4gICAqIEBkZWZhdWx0ICdvblRvdWNoRW5kJ1xuICAgKi9cbiAgdG91Y2hFdmVudDogUHJvcFR5cGVzLm9uZU9mKFsnb25Ub3VjaEVuZCcsICdvblRvdWNoU3RhcnQnLCBmYWxzZV0pXG59IDogdm9pZCAwO1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gIENsaWNrQXdheUxpc3RlbmVyWydwcm9wVHlwZXMnICsgJyddID0gZXhhY3RQcm9wKENsaWNrQXdheUxpc3RlbmVyLnByb3BUeXBlcyk7XG59XG5leHBvcnQgeyBDbGlja0F3YXlMaXN0ZW5lciB9OyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJvd25lclN0YXRlXCJdLFxuICBfZXhjbHVkZWQyID0gW1widmFyaWFudHNcIl0sXG4gIF9leGNsdWRlZDMgPSBbXCJuYW1lXCIsIFwic2xvdFwiLCBcInNraXBWYXJpYW50c1Jlc29sdmVyXCIsIFwic2tpcFN4XCIsIFwib3ZlcnJpZGVzUmVzb2x2ZXJcIl07XG4vKiBlc2xpbnQtZGlzYWJsZSBuby11bmRlcnNjb3JlLWRhbmdsZSAqL1xuaW1wb3J0IHN0eWxlZEVuZ2luZVN0eWxlZCwgeyBpbnRlcm5hbF9wcm9jZXNzU3R5bGVzIGFzIHByb2Nlc3NTdHlsZXMgfSBmcm9tICdAbXVpL3N0eWxlZC1lbmdpbmUnO1xuaW1wb3J0IHsgaXNQbGFpbk9iamVjdCB9IGZyb20gJ0BtdWkvdXRpbHMvZGVlcG1lcmdlJztcbmltcG9ydCBjYXBpdGFsaXplIGZyb20gJ0BtdWkvdXRpbHMvY2FwaXRhbGl6ZSc7XG5pbXBvcnQgZ2V0RGlzcGxheU5hbWUgZnJvbSAnQG11aS91dGlscy9nZXREaXNwbGF5TmFtZSc7XG5pbXBvcnQgY3JlYXRlVGhlbWUgZnJvbSAnLi9jcmVhdGVUaGVtZSc7XG5pbXBvcnQgc3R5bGVGdW5jdGlvblN4IGZyb20gJy4vc3R5bGVGdW5jdGlvblN4JztcbmZ1bmN0aW9uIGlzRW1wdHkob2JqKSB7XG4gIHJldHVybiBPYmplY3Qua2V5cyhvYmopLmxlbmd0aCA9PT0gMDtcbn1cblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2Vtb3Rpb24tanMvZW1vdGlvbi9ibG9iLzI2ZGVkNjEwOWZjZDhjYTk4NzVjYzJjZTQ1NjRmZWU2NzhhM2YzYzUvcGFja2FnZXMvc3R5bGVkL3NyYy91dGlscy5qcyNMNDBcbmZ1bmN0aW9uIGlzU3RyaW5nVGFnKHRhZykge1xuICByZXR1cm4gdHlwZW9mIHRhZyA9PT0gJ3N0cmluZycgJiZcbiAgLy8gOTYgaXMgb25lIGxlc3MgdGhhbiB0aGUgY2hhciBjb2RlXG4gIC8vIGZvciBcImFcIiBzbyB0aGlzIGlzIGNoZWNraW5nIHRoYXRcbiAgLy8gaXQncyBhIGxvd2VyY2FzZSBjaGFyYWN0ZXJcbiAgdGFnLmNoYXJDb2RlQXQoMCkgPiA5Njtcbn1cblxuLy8gVXBkYXRlIC9zeXN0ZW0vc3R5bGVkLyNhcGkgaW4gY2FzZSBpZiB0aGlzIGNoYW5nZXNcbmV4cG9ydCBmdW5jdGlvbiBzaG91bGRGb3J3YXJkUHJvcChwcm9wKSB7XG4gIHJldHVybiBwcm9wICE9PSAnb3duZXJTdGF0ZScgJiYgcHJvcCAhPT0gJ3RoZW1lJyAmJiBwcm9wICE9PSAnc3gnICYmIHByb3AgIT09ICdhcyc7XG59XG5leHBvcnQgY29uc3Qgc3lzdGVtRGVmYXVsdFRoZW1lID0gY3JlYXRlVGhlbWUoKTtcbmNvbnN0IGxvd2VyY2FzZUZpcnN0TGV0dGVyID0gc3RyaW5nID0+IHtcbiAgaWYgKCFzdHJpbmcpIHtcbiAgICByZXR1cm4gc3RyaW5nO1xuICB9XG4gIHJldHVybiBzdHJpbmcuY2hhckF0KDApLnRvTG93ZXJDYXNlKCkgKyBzdHJpbmcuc2xpY2UoMSk7XG59O1xuZnVuY3Rpb24gcmVzb2x2ZVRoZW1lKHtcbiAgZGVmYXVsdFRoZW1lLFxuICB0aGVtZSxcbiAgdGhlbWVJZFxufSkge1xuICByZXR1cm4gaXNFbXB0eSh0aGVtZSkgPyBkZWZhdWx0VGhlbWUgOiB0aGVtZVt0aGVtZUlkXSB8fCB0aGVtZTtcbn1cbmZ1bmN0aW9uIGRlZmF1bHRPdmVycmlkZXNSZXNvbHZlcihzbG90KSB7XG4gIGlmICghc2xvdCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHJldHVybiAocHJvcHMsIHN0eWxlcykgPT4gc3R5bGVzW3Nsb3RdO1xufVxuZnVuY3Rpb24gcHJvY2Vzc1N0eWxlQXJnKGNhbGxhYmxlU3R5bGUsIF9yZWYpIHtcbiAgbGV0IHtcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9ID0gX3JlZixcbiAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWYsIF9leGNsdWRlZCk7XG4gIGNvbnN0IHJlc29sdmVkU3R5bGVzQXJnID0gdHlwZW9mIGNhbGxhYmxlU3R5bGUgPT09ICdmdW5jdGlvbicgPyBjYWxsYWJsZVN0eWxlKF9leHRlbmRzKHtcbiAgICBvd25lclN0YXRlXG4gIH0sIHByb3BzKSkgOiBjYWxsYWJsZVN0eWxlO1xuICBpZiAoQXJyYXkuaXNBcnJheShyZXNvbHZlZFN0eWxlc0FyZykpIHtcbiAgICByZXR1cm4gcmVzb2x2ZWRTdHlsZXNBcmcuZmxhdE1hcChyZXNvbHZlZFN0eWxlID0+IHByb2Nlc3NTdHlsZUFyZyhyZXNvbHZlZFN0eWxlLCBfZXh0ZW5kcyh7XG4gICAgICBvd25lclN0YXRlXG4gICAgfSwgcHJvcHMpKSk7XG4gIH1cbiAgaWYgKCEhcmVzb2x2ZWRTdHlsZXNBcmcgJiYgdHlwZW9mIHJlc29sdmVkU3R5bGVzQXJnID09PSAnb2JqZWN0JyAmJiBBcnJheS5pc0FycmF5KHJlc29sdmVkU3R5bGVzQXJnLnZhcmlhbnRzKSkge1xuICAgIGNvbnN0IHtcbiAgICAgICAgdmFyaWFudHMgPSBbXVxuICAgICAgfSA9IHJlc29sdmVkU3R5bGVzQXJnLFxuICAgICAgb3RoZXJTdHlsZXMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShyZXNvbHZlZFN0eWxlc0FyZywgX2V4Y2x1ZGVkMik7XG4gICAgbGV0IHJlc3VsdCA9IG90aGVyU3R5bGVzO1xuICAgIHZhcmlhbnRzLmZvckVhY2godmFyaWFudCA9PiB7XG4gICAgICBsZXQgaXNNYXRjaCA9IHRydWU7XG4gICAgICBpZiAodHlwZW9mIHZhcmlhbnQucHJvcHMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgaXNNYXRjaCA9IHZhcmlhbnQucHJvcHMoX2V4dGVuZHMoe1xuICAgICAgICAgIG93bmVyU3RhdGVcbiAgICAgICAgfSwgcHJvcHMsIG93bmVyU3RhdGUpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIE9iamVjdC5rZXlzKHZhcmlhbnQucHJvcHMpLmZvckVhY2goa2V5ID0+IHtcbiAgICAgICAgICBpZiAoKG93bmVyU3RhdGUgPT0gbnVsbCA/IHZvaWQgMCA6IG93bmVyU3RhdGVba2V5XSkgIT09IHZhcmlhbnQucHJvcHNba2V5XSAmJiBwcm9wc1trZXldICE9PSB2YXJpYW50LnByb3BzW2tleV0pIHtcbiAgICAgICAgICAgIGlzTWF0Y2ggPSBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgaWYgKGlzTWF0Y2gpIHtcbiAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHJlc3VsdCkpIHtcbiAgICAgICAgICByZXN1bHQgPSBbcmVzdWx0XTtcbiAgICAgICAgfVxuICAgICAgICByZXN1bHQucHVzaCh0eXBlb2YgdmFyaWFudC5zdHlsZSA9PT0gJ2Z1bmN0aW9uJyA/IHZhcmlhbnQuc3R5bGUoX2V4dGVuZHMoe1xuICAgICAgICAgIG93bmVyU3RhdGVcbiAgICAgICAgfSwgcHJvcHMsIG93bmVyU3RhdGUpKSA6IHZhcmlhbnQuc3R5bGUpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgcmV0dXJuIHJlc29sdmVkU3R5bGVzQXJnO1xufVxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlU3R5bGVkKGlucHV0ID0ge30pIHtcbiAgY29uc3Qge1xuICAgIHRoZW1lSWQsXG4gICAgZGVmYXVsdFRoZW1lID0gc3lzdGVtRGVmYXVsdFRoZW1lLFxuICAgIHJvb3RTaG91bGRGb3J3YXJkUHJvcCA9IHNob3VsZEZvcndhcmRQcm9wLFxuICAgIHNsb3RTaG91bGRGb3J3YXJkUHJvcCA9IHNob3VsZEZvcndhcmRQcm9wXG4gIH0gPSBpbnB1dDtcbiAgY29uc3Qgc3lzdGVtU3ggPSBwcm9wcyA9PiB7XG4gICAgcmV0dXJuIHN0eWxlRnVuY3Rpb25TeChfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICAgIHRoZW1lOiByZXNvbHZlVGhlbWUoX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgICAgIGRlZmF1bHRUaGVtZSxcbiAgICAgICAgdGhlbWVJZFxuICAgICAgfSkpXG4gICAgfSkpO1xuICB9O1xuICBzeXN0ZW1TeC5fX211aV9zeXN0ZW1TeCA9IHRydWU7XG4gIHJldHVybiAodGFnLCBpbnB1dE9wdGlvbnMgPSB7fSkgPT4ge1xuICAgIC8vIEZpbHRlciBvdXQgdGhlIGBzeGAgc3R5bGUgZnVuY3Rpb24gZnJvbSB0aGUgcHJldmlvdXMgc3R5bGVkIGNvbXBvbmVudCB0byBwcmV2ZW50IHVubmVjZXNzYXJ5IHN0eWxlcyBnZW5lcmF0ZWQgYnkgdGhlIGNvbXBvc2l0ZSBjb21wb25lbnRzLlxuICAgIHByb2Nlc3NTdHlsZXModGFnLCBzdHlsZXMgPT4gc3R5bGVzLmZpbHRlcihzdHlsZSA9PiAhKHN0eWxlICE9IG51bGwgJiYgc3R5bGUuX19tdWlfc3lzdGVtU3gpKSk7XG4gICAgY29uc3Qge1xuICAgICAgICBuYW1lOiBjb21wb25lbnROYW1lLFxuICAgICAgICBzbG90OiBjb21wb25lbnRTbG90LFxuICAgICAgICBza2lwVmFyaWFudHNSZXNvbHZlcjogaW5wdXRTa2lwVmFyaWFudHNSZXNvbHZlcixcbiAgICAgICAgc2tpcFN4OiBpbnB1dFNraXBTeCxcbiAgICAgICAgLy8gVE9ETyB2NjogcmVtb3ZlIGBsb3dlcmNhc2VGaXJzdExldHRlcigpYCBpbiB0aGUgbmV4dCBtYWpvciByZWxlYXNlXG4gICAgICAgIC8vIEZvciBtb3JlIGRldGFpbHM6IGh0dHBzOi8vZ2l0aHViLmNvbS9tdWkvbWF0ZXJpYWwtdWkvcHVsbC8zNzkwOFxuICAgICAgICBvdmVycmlkZXNSZXNvbHZlciA9IGRlZmF1bHRPdmVycmlkZXNSZXNvbHZlcihsb3dlcmNhc2VGaXJzdExldHRlcihjb21wb25lbnRTbG90KSlcbiAgICAgIH0gPSBpbnB1dE9wdGlvbnMsXG4gICAgICBvcHRpb25zID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoaW5wdXRPcHRpb25zLCBfZXhjbHVkZWQzKTtcblxuICAgIC8vIGlmIHNraXBWYXJpYW50c1Jlc29sdmVyIG9wdGlvbiBpcyBkZWZpbmVkLCB0YWtlIHRoZSB2YWx1ZSwgb3RoZXJ3aXNlLCB0cnVlIGZvciByb290IGFuZCBmYWxzZSBmb3Igb3RoZXIgc2xvdHMuXG4gICAgY29uc3Qgc2tpcFZhcmlhbnRzUmVzb2x2ZXIgPSBpbnB1dFNraXBWYXJpYW50c1Jlc29sdmVyICE9PSB1bmRlZmluZWQgPyBpbnB1dFNraXBWYXJpYW50c1Jlc29sdmVyIDpcbiAgICAvLyBUT0RPIHY2OiByZW1vdmUgYFJvb3RgIGluIHRoZSBuZXh0IG1ham9yIHJlbGVhc2VcbiAgICAvLyBGb3IgbW9yZSBkZXRhaWxzOiBodHRwczovL2dpdGh1Yi5jb20vbXVpL21hdGVyaWFsLXVpL3B1bGwvMzc5MDhcbiAgICBjb21wb25lbnRTbG90ICYmIGNvbXBvbmVudFNsb3QgIT09ICdSb290JyAmJiBjb21wb25lbnRTbG90ICE9PSAncm9vdCcgfHwgZmFsc2U7XG4gICAgY29uc3Qgc2tpcFN4ID0gaW5wdXRTa2lwU3ggfHwgZmFsc2U7XG4gICAgbGV0IGxhYmVsO1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAoY29tcG9uZW50TmFtZSkge1xuICAgICAgICAvLyBUT0RPIHY2OiByZW1vdmUgYGxvd2VyY2FzZUZpcnN0TGV0dGVyKClgIGluIHRoZSBuZXh0IG1ham9yIHJlbGVhc2VcbiAgICAgICAgLy8gRm9yIG1vcmUgZGV0YWlsczogaHR0cHM6Ly9naXRodWIuY29tL211aS9tYXRlcmlhbC11aS9wdWxsLzM3OTA4XG4gICAgICAgIGxhYmVsID0gYCR7Y29tcG9uZW50TmFtZX0tJHtsb3dlcmNhc2VGaXJzdExldHRlcihjb21wb25lbnRTbG90IHx8ICdSb290Jyl9YDtcbiAgICAgIH1cbiAgICB9XG4gICAgbGV0IHNob3VsZEZvcndhcmRQcm9wT3B0aW9uID0gc2hvdWxkRm9yd2FyZFByb3A7XG5cbiAgICAvLyBUT0RPIHY2OiByZW1vdmUgYFJvb3RgIGluIHRoZSBuZXh0IG1ham9yIHJlbGVhc2VcbiAgICAvLyBGb3IgbW9yZSBkZXRhaWxzOiBodHRwczovL2dpdGh1Yi5jb20vbXVpL21hdGVyaWFsLXVpL3B1bGwvMzc5MDhcbiAgICBpZiAoY29tcG9uZW50U2xvdCA9PT0gJ1Jvb3QnIHx8IGNvbXBvbmVudFNsb3QgPT09ICdyb290Jykge1xuICAgICAgc2hvdWxkRm9yd2FyZFByb3BPcHRpb24gPSByb290U2hvdWxkRm9yd2FyZFByb3A7XG4gICAgfSBlbHNlIGlmIChjb21wb25lbnRTbG90KSB7XG4gICAgICAvLyBhbnkgb3RoZXIgc2xvdCBzcGVjaWZpZWRcbiAgICAgIHNob3VsZEZvcndhcmRQcm9wT3B0aW9uID0gc2xvdFNob3VsZEZvcndhcmRQcm9wO1xuICAgIH0gZWxzZSBpZiAoaXNTdHJpbmdUYWcodGFnKSkge1xuICAgICAgLy8gZm9yIHN0cmluZyAoaHRtbCkgdGFnLCBwcmVzZXJ2ZSB0aGUgYmVoYXZpb3IgaW4gZW1vdGlvbiAmIHN0eWxlZC1jb21wb25lbnRzLlxuICAgICAgc2hvdWxkRm9yd2FyZFByb3BPcHRpb24gPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGNvbnN0IGRlZmF1bHRTdHlsZWRSZXNvbHZlciA9IHN0eWxlZEVuZ2luZVN0eWxlZCh0YWcsIF9leHRlbmRzKHtcbiAgICAgIHNob3VsZEZvcndhcmRQcm9wOiBzaG91bGRGb3J3YXJkUHJvcE9wdGlvbixcbiAgICAgIGxhYmVsXG4gICAgfSwgb3B0aW9ucykpO1xuICAgIGNvbnN0IHRyYW5zZm9ybVN0eWxlQXJnID0gc3R5bGVzQXJnID0+IHtcbiAgICAgIC8vIE9uIHRoZSBzZXJ2ZXIgRW1vdGlvbiBkb2Vzbid0IHVzZSBSZWFjdC5mb3J3YXJkUmVmIGZvciBjcmVhdGluZyBjb21wb25lbnRzLCBzbyB0aGUgY3JlYXRlZFxuICAgICAgLy8gY29tcG9uZW50IHN0YXlzIGFzIGEgZnVuY3Rpb24uIFRoaXMgY29uZGl0aW9uIG1ha2VzIHN1cmUgdGhhdCB3ZSBkbyBub3QgaW50ZXJwb2xhdGUgZnVuY3Rpb25zXG4gICAgICAvLyB3aGljaCBhcmUgYmFzaWNhbGx5IGNvbXBvbmVudHMgdXNlZCBhcyBhIHNlbGVjdG9ycy5cbiAgICAgIGlmICh0eXBlb2Ygc3R5bGVzQXJnID09PSAnZnVuY3Rpb24nICYmIHN0eWxlc0FyZy5fX2Vtb3Rpb25fcmVhbCAhPT0gc3R5bGVzQXJnIHx8IGlzUGxhaW5PYmplY3Qoc3R5bGVzQXJnKSkge1xuICAgICAgICByZXR1cm4gcHJvcHMgPT4gcHJvY2Vzc1N0eWxlQXJnKHN0eWxlc0FyZywgX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgICAgICAgdGhlbWU6IHJlc29sdmVUaGVtZSh7XG4gICAgICAgICAgICB0aGVtZTogcHJvcHMudGhlbWUsXG4gICAgICAgICAgICBkZWZhdWx0VGhlbWUsXG4gICAgICAgICAgICB0aGVtZUlkXG4gICAgICAgICAgfSlcbiAgICAgICAgfSkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHN0eWxlc0FyZztcbiAgICB9O1xuICAgIGNvbnN0IG11aVN0eWxlZFJlc29sdmVyID0gKHN0eWxlQXJnLCAuLi5leHByZXNzaW9ucykgPT4ge1xuICAgICAgbGV0IHRyYW5zZm9ybWVkU3R5bGVBcmcgPSB0cmFuc2Zvcm1TdHlsZUFyZyhzdHlsZUFyZyk7XG4gICAgICBjb25zdCBleHByZXNzaW9uc1dpdGhEZWZhdWx0VGhlbWUgPSBleHByZXNzaW9ucyA/IGV4cHJlc3Npb25zLm1hcCh0cmFuc2Zvcm1TdHlsZUFyZykgOiBbXTtcbiAgICAgIGlmIChjb21wb25lbnROYW1lICYmIG92ZXJyaWRlc1Jlc29sdmVyKSB7XG4gICAgICAgIGV4cHJlc3Npb25zV2l0aERlZmF1bHRUaGVtZS5wdXNoKHByb3BzID0+IHtcbiAgICAgICAgICBjb25zdCB0aGVtZSA9IHJlc29sdmVUaGVtZShfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICAgICAgICAgIGRlZmF1bHRUaGVtZSxcbiAgICAgICAgICAgIHRoZW1lSWRcbiAgICAgICAgICB9KSk7XG4gICAgICAgICAgaWYgKCF0aGVtZS5jb21wb25lbnRzIHx8ICF0aGVtZS5jb21wb25lbnRzW2NvbXBvbmVudE5hbWVdIHx8ICF0aGVtZS5jb21wb25lbnRzW2NvbXBvbmVudE5hbWVdLnN0eWxlT3ZlcnJpZGVzKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICB9XG4gICAgICAgICAgY29uc3Qgc3R5bGVPdmVycmlkZXMgPSB0aGVtZS5jb21wb25lbnRzW2NvbXBvbmVudE5hbWVdLnN0eWxlT3ZlcnJpZGVzO1xuICAgICAgICAgIGNvbnN0IHJlc29sdmVkU3R5bGVPdmVycmlkZXMgPSB7fTtcbiAgICAgICAgICAvLyBUT0RPOiB2NyByZW1vdmUgaXRlcmF0aW9uIGFuZCB1c2UgYHJlc29sdmVTdHlsZUFyZyhzdHlsZU92ZXJyaWRlc1tzbG90XSlgIGRpcmVjdGx5XG4gICAgICAgICAgT2JqZWN0LmVudHJpZXMoc3R5bGVPdmVycmlkZXMpLmZvckVhY2goKFtzbG90S2V5LCBzbG90U3R5bGVdKSA9PiB7XG4gICAgICAgICAgICByZXNvbHZlZFN0eWxlT3ZlcnJpZGVzW3Nsb3RLZXldID0gcHJvY2Vzc1N0eWxlQXJnKHNsb3RTdHlsZSwgX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgICAgICAgICAgIHRoZW1lXG4gICAgICAgICAgICB9KSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgcmV0dXJuIG92ZXJyaWRlc1Jlc29sdmVyKHByb3BzLCByZXNvbHZlZFN0eWxlT3ZlcnJpZGVzKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBpZiAoY29tcG9uZW50TmFtZSAmJiAhc2tpcFZhcmlhbnRzUmVzb2x2ZXIpIHtcbiAgICAgICAgZXhwcmVzc2lvbnNXaXRoRGVmYXVsdFRoZW1lLnB1c2gocHJvcHMgPT4ge1xuICAgICAgICAgIHZhciBfdGhlbWUkY29tcG9uZW50cztcbiAgICAgICAgICBjb25zdCB0aGVtZSA9IHJlc29sdmVUaGVtZShfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICAgICAgICAgIGRlZmF1bHRUaGVtZSxcbiAgICAgICAgICAgIHRoZW1lSWRcbiAgICAgICAgICB9KSk7XG4gICAgICAgICAgY29uc3QgdGhlbWVWYXJpYW50cyA9IHRoZW1lID09IG51bGwgfHwgKF90aGVtZSRjb21wb25lbnRzID0gdGhlbWUuY29tcG9uZW50cykgPT0gbnVsbCB8fCAoX3RoZW1lJGNvbXBvbmVudHMgPSBfdGhlbWUkY29tcG9uZW50c1tjb21wb25lbnROYW1lXSkgPT0gbnVsbCA/IHZvaWQgMCA6IF90aGVtZSRjb21wb25lbnRzLnZhcmlhbnRzO1xuICAgICAgICAgIHJldHVybiBwcm9jZXNzU3R5bGVBcmcoe1xuICAgICAgICAgICAgdmFyaWFudHM6IHRoZW1lVmFyaWFudHNcbiAgICAgICAgICB9LCBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICAgICAgICAgIHRoZW1lXG4gICAgICAgICAgfSkpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGlmICghc2tpcFN4KSB7XG4gICAgICAgIGV4cHJlc3Npb25zV2l0aERlZmF1bHRUaGVtZS5wdXNoKHN5c3RlbVN4KTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IG51bU9mQ3VzdG9tRm5zQXBwbGllZCA9IGV4cHJlc3Npb25zV2l0aERlZmF1bHRUaGVtZS5sZW5ndGggLSBleHByZXNzaW9ucy5sZW5ndGg7XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShzdHlsZUFyZykgJiYgbnVtT2ZDdXN0b21GbnNBcHBsaWVkID4gMCkge1xuICAgICAgICBjb25zdCBwbGFjZWhvbGRlcnMgPSBuZXcgQXJyYXkobnVtT2ZDdXN0b21GbnNBcHBsaWVkKS5maWxsKCcnKTtcbiAgICAgICAgLy8gSWYgdGhlIHR5cGUgaXMgYXJyYXksIHRoYW4gd2UgbmVlZCB0byBhZGQgcGxhY2Vob2xkZXJzIGluIHRoZSB0ZW1wbGF0ZSBmb3IgdGhlIG92ZXJyaWRlcywgdmFyaWFudHMgYW5kIHRoZSBzeCBzdHlsZXMuXG4gICAgICAgIHRyYW5zZm9ybWVkU3R5bGVBcmcgPSBbLi4uc3R5bGVBcmcsIC4uLnBsYWNlaG9sZGVyc107XG4gICAgICAgIHRyYW5zZm9ybWVkU3R5bGVBcmcucmF3ID0gWy4uLnN0eWxlQXJnLnJhdywgLi4ucGxhY2Vob2xkZXJzXTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IENvbXBvbmVudCA9IGRlZmF1bHRTdHlsZWRSZXNvbHZlcih0cmFuc2Zvcm1lZFN0eWxlQXJnLCAuLi5leHByZXNzaW9uc1dpdGhEZWZhdWx0VGhlbWUpO1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgbGV0IGRpc3BsYXlOYW1lO1xuICAgICAgICBpZiAoY29tcG9uZW50TmFtZSkge1xuICAgICAgICAgIGRpc3BsYXlOYW1lID0gYCR7Y29tcG9uZW50TmFtZX0ke2NhcGl0YWxpemUoY29tcG9uZW50U2xvdCB8fCAnJyl9YDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGlzcGxheU5hbWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGRpc3BsYXlOYW1lID0gYFN0eWxlZCgke2dldERpc3BsYXlOYW1lKHRhZyl9KWA7XG4gICAgICAgIH1cbiAgICAgICAgQ29tcG9uZW50LmRpc3BsYXlOYW1lID0gZGlzcGxheU5hbWU7XG4gICAgICB9XG4gICAgICBpZiAodGFnLm11aU5hbWUpIHtcbiAgICAgICAgQ29tcG9uZW50Lm11aU5hbWUgPSB0YWcubXVpTmFtZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBDb21wb25lbnQ7XG4gICAgfTtcbiAgICBpZiAoZGVmYXVsdFN0eWxlZFJlc29sdmVyLndpdGhDb25maWcpIHtcbiAgICAgIG11aVN0eWxlZFJlc29sdmVyLndpdGhDb25maWcgPSBkZWZhdWx0U3R5bGVkUmVzb2x2ZXIud2l0aENvbmZpZztcbiAgICB9XG4gICAgcmV0dXJuIG11aVN0eWxlZFJlc29sdmVyO1xuICB9O1xufSIsImltcG9ydCBjcmVhdGVTdHlsZWQgZnJvbSAnLi9jcmVhdGVTdHlsZWQnO1xuY29uc3Qgc3R5bGVkID0gY3JlYXRlU3R5bGVkKCk7XG5leHBvcnQgZGVmYXVsdCBzdHlsZWQ7IiwiaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImNsYXNzTmFtZVwiLCBcImNvbXBvbmVudFwiLCBcImRpc2FibGVHdXR0ZXJzXCIsIFwiZml4ZWRcIiwgXCJtYXhXaWR0aFwiLCBcImNsYXNzZXNcIl07XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3MgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzcyc7XG5pbXBvcnQgY29tcG9zZUNsYXNzZXMgZnJvbSAnQG11aS91dGlscy9jb21wb3NlQ2xhc3Nlcyc7XG5pbXBvcnQgY2FwaXRhbGl6ZSBmcm9tICdAbXVpL3V0aWxzL2NhcGl0YWxpemUnO1xuaW1wb3J0IHVzZVRoZW1lUHJvcHNTeXN0ZW0gZnJvbSAnLi4vdXNlVGhlbWVQcm9wcyc7XG5pbXBvcnQgc3lzdGVtU3R5bGVkIGZyb20gJy4uL3N0eWxlZCc7XG5pbXBvcnQgY3JlYXRlVGhlbWUgZnJvbSAnLi4vY3JlYXRlVGhlbWUnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmNvbnN0IGRlZmF1bHRUaGVtZSA9IGNyZWF0ZVRoZW1lKCk7XG5jb25zdCBkZWZhdWx0Q3JlYXRlU3R5bGVkQ29tcG9uZW50ID0gc3lzdGVtU3R5bGVkKCdkaXYnLCB7XG4gIG5hbWU6ICdNdWlDb250YWluZXInLFxuICBzbG90OiAnUm9vdCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9ID0gcHJvcHM7XG4gICAgcmV0dXJuIFtzdHlsZXMucm9vdCwgc3R5bGVzW2BtYXhXaWR0aCR7Y2FwaXRhbGl6ZShTdHJpbmcob3duZXJTdGF0ZS5tYXhXaWR0aCkpfWBdLCBvd25lclN0YXRlLmZpeGVkICYmIHN0eWxlcy5maXhlZCwgb3duZXJTdGF0ZS5kaXNhYmxlR3V0dGVycyAmJiBzdHlsZXMuZGlzYWJsZUd1dHRlcnNdO1xuICB9XG59KTtcbmNvbnN0IHVzZVRoZW1lUHJvcHNEZWZhdWx0ID0gaW5Qcm9wcyA9PiB1c2VUaGVtZVByb3BzU3lzdGVtKHtcbiAgcHJvcHM6IGluUHJvcHMsXG4gIG5hbWU6ICdNdWlDb250YWluZXInLFxuICBkZWZhdWx0VGhlbWVcbn0pO1xuY29uc3QgdXNlVXRpbGl0eUNsYXNzZXMgPSAob3duZXJTdGF0ZSwgY29tcG9uZW50TmFtZSkgPT4ge1xuICBjb25zdCBnZXRDb250YWluZXJVdGlsaXR5Q2xhc3MgPSBzbG90ID0+IHtcbiAgICByZXR1cm4gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoY29tcG9uZW50TmFtZSwgc2xvdCk7XG4gIH07XG4gIGNvbnN0IHtcbiAgICBjbGFzc2VzLFxuICAgIGZpeGVkLFxuICAgIGRpc2FibGVHdXR0ZXJzLFxuICAgIG1heFdpZHRoXG4gIH0gPSBvd25lclN0YXRlO1xuICBjb25zdCBzbG90cyA9IHtcbiAgICByb290OiBbJ3Jvb3QnLCBtYXhXaWR0aCAmJiBgbWF4V2lkdGgke2NhcGl0YWxpemUoU3RyaW5nKG1heFdpZHRoKSl9YCwgZml4ZWQgJiYgJ2ZpeGVkJywgZGlzYWJsZUd1dHRlcnMgJiYgJ2Rpc2FibGVHdXR0ZXJzJ11cbiAgfTtcbiAgcmV0dXJuIGNvbXBvc2VDbGFzc2VzKHNsb3RzLCBnZXRDb250YWluZXJVdGlsaXR5Q2xhc3MsIGNsYXNzZXMpO1xufTtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZUNvbnRhaW5lcihvcHRpb25zID0ge30pIHtcbiAgY29uc3Qge1xuICAgIC8vIFRoaXMgd2lsbCBhbGxvdyBhZGRpbmcgY3VzdG9tIHN0eWxlZCBmbiAoZm9yIGV4YW1wbGUgZm9yIGN1c3RvbSBzeCBzdHlsZSBmdW5jdGlvbilcbiAgICBjcmVhdGVTdHlsZWRDb21wb25lbnQgPSBkZWZhdWx0Q3JlYXRlU3R5bGVkQ29tcG9uZW50LFxuICAgIHVzZVRoZW1lUHJvcHMgPSB1c2VUaGVtZVByb3BzRGVmYXVsdCxcbiAgICBjb21wb25lbnROYW1lID0gJ011aUNvbnRhaW5lcidcbiAgfSA9IG9wdGlvbnM7XG4gIGNvbnN0IENvbnRhaW5lclJvb3QgPSBjcmVhdGVTdHlsZWRDb21wb25lbnQoKHtcbiAgICB0aGVtZSxcbiAgICBvd25lclN0YXRlXG4gIH0pID0+IF9leHRlbmRzKHtcbiAgICB3aWR0aDogJzEwMCUnLFxuICAgIG1hcmdpbkxlZnQ6ICdhdXRvJyxcbiAgICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcbiAgICBtYXJnaW5SaWdodDogJ2F1dG8nLFxuICAgIGRpc3BsYXk6ICdibG9jaydcbiAgfSwgIW93bmVyU3RhdGUuZGlzYWJsZUd1dHRlcnMgJiYge1xuICAgIHBhZGRpbmdMZWZ0OiB0aGVtZS5zcGFjaW5nKDIpLFxuICAgIHBhZGRpbmdSaWdodDogdGhlbWUuc3BhY2luZygyKSxcbiAgICAvLyBAdHMtaWdub3JlIG1vZHVsZSBhdWdtZW50YXRpb24gZmFpbHMgaWYgY3VzdG9tIGJyZWFrcG9pbnRzIGFyZSB1c2VkXG4gICAgW3RoZW1lLmJyZWFrcG9pbnRzLnVwKCdzbScpXToge1xuICAgICAgcGFkZGluZ0xlZnQ6IHRoZW1lLnNwYWNpbmcoMyksXG4gICAgICBwYWRkaW5nUmlnaHQ6IHRoZW1lLnNwYWNpbmcoMylcbiAgICB9XG4gIH0pLCAoe1xuICAgIHRoZW1lLFxuICAgIG93bmVyU3RhdGVcbiAgfSkgPT4gb3duZXJTdGF0ZS5maXhlZCAmJiBPYmplY3Qua2V5cyh0aGVtZS5icmVha3BvaW50cy52YWx1ZXMpLnJlZHVjZSgoYWNjLCBicmVha3BvaW50VmFsdWVLZXkpID0+IHtcbiAgICBjb25zdCBicmVha3BvaW50ID0gYnJlYWtwb2ludFZhbHVlS2V5O1xuICAgIGNvbnN0IHZhbHVlID0gdGhlbWUuYnJlYWtwb2ludHMudmFsdWVzW2JyZWFrcG9pbnRdO1xuICAgIGlmICh2YWx1ZSAhPT0gMCkge1xuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgYWNjW3RoZW1lLmJyZWFrcG9pbnRzLnVwKGJyZWFrcG9pbnQpXSA9IHtcbiAgICAgICAgbWF4V2lkdGg6IGAke3ZhbHVlfSR7dGhlbWUuYnJlYWtwb2ludHMudW5pdH1gXG4gICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gYWNjO1xuICB9LCB7fSksICh7XG4gICAgdGhlbWUsXG4gICAgb3duZXJTdGF0ZVxuICB9KSA9PiBfZXh0ZW5kcyh7fSwgb3duZXJTdGF0ZS5tYXhXaWR0aCA9PT0gJ3hzJyAmJiB7XG4gICAgLy8gQHRzLWlnbm9yZSBtb2R1bGUgYXVnbWVudGF0aW9uIGZhaWxzIGlmIGN1c3RvbSBicmVha3BvaW50cyBhcmUgdXNlZFxuICAgIFt0aGVtZS5icmVha3BvaW50cy51cCgneHMnKV06IHtcbiAgICAgIC8vIEB0cy1pZ25vcmUgbW9kdWxlIGF1Z21lbnRhdGlvbiBmYWlscyBpZiBjdXN0b20gYnJlYWtwb2ludHMgYXJlIHVzZWRcbiAgICAgIG1heFdpZHRoOiBNYXRoLm1heCh0aGVtZS5icmVha3BvaW50cy52YWx1ZXMueHMsIDQ0NClcbiAgICB9XG4gIH0sIG93bmVyU3RhdGUubWF4V2lkdGggJiZcbiAgLy8gQHRzLWlnbm9yZSBtb2R1bGUgYXVnbWVudGF0aW9uIGZhaWxzIGlmIGN1c3RvbSBicmVha3BvaW50cyBhcmUgdXNlZFxuICBvd25lclN0YXRlLm1heFdpZHRoICE9PSAneHMnICYmIHtcbiAgICAvLyBAdHMtaWdub3JlIG1vZHVsZSBhdWdtZW50YXRpb24gZmFpbHMgaWYgY3VzdG9tIGJyZWFrcG9pbnRzIGFyZSB1c2VkXG4gICAgW3RoZW1lLmJyZWFrcG9pbnRzLnVwKG93bmVyU3RhdGUubWF4V2lkdGgpXToge1xuICAgICAgLy8gQHRzLWlnbm9yZSBtb2R1bGUgYXVnbWVudGF0aW9uIGZhaWxzIGlmIGN1c3RvbSBicmVha3BvaW50cyBhcmUgdXNlZFxuICAgICAgbWF4V2lkdGg6IGAke3RoZW1lLmJyZWFrcG9pbnRzLnZhbHVlc1tvd25lclN0YXRlLm1heFdpZHRoXX0ke3RoZW1lLmJyZWFrcG9pbnRzLnVuaXR9YFxuICAgIH1cbiAgfSkpO1xuICBjb25zdCBDb250YWluZXIgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBDb250YWluZXIoaW5Qcm9wcywgcmVmKSB7XG4gICAgY29uc3QgcHJvcHMgPSB1c2VUaGVtZVByb3BzKGluUHJvcHMpO1xuICAgIGNvbnN0IHtcbiAgICAgICAgY2xhc3NOYW1lLFxuICAgICAgICBjb21wb25lbnQgPSAnZGl2JyxcbiAgICAgICAgZGlzYWJsZUd1dHRlcnMgPSBmYWxzZSxcbiAgICAgICAgZml4ZWQgPSBmYWxzZSxcbiAgICAgICAgbWF4V2lkdGggPSAnbGcnXG4gICAgICB9ID0gcHJvcHMsXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQpO1xuICAgIGNvbnN0IG93bmVyU3RhdGUgPSBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICAgIGNvbXBvbmVudCxcbiAgICAgIGRpc2FibGVHdXR0ZXJzLFxuICAgICAgZml4ZWQsXG4gICAgICBtYXhXaWR0aFxuICAgIH0pO1xuXG4gICAgLy8gQHRzLWlnbm9yZSBtb2R1bGUgYXVnbWVudGF0aW9uIGZhaWxzIGlmIGN1c3RvbSBicmVha3BvaW50cyBhcmUgdXNlZFxuICAgIGNvbnN0IGNsYXNzZXMgPSB1c2VVdGlsaXR5Q2xhc3Nlcyhvd25lclN0YXRlLCBjb21wb25lbnROYW1lKTtcbiAgICByZXR1cm4gKFxuICAgICAgLyojX19QVVJFX18qL1xuICAgICAgLy8gQHRzLWlnbm9yZSB0aGVtZSBpcyBpbmplY3RlZCBieSB0aGUgc3R5bGVkIHV0aWxcbiAgICAgIF9qc3goQ29udGFpbmVyUm9vdCwgX2V4dGVuZHMoe1xuICAgICAgICBhczogY29tcG9uZW50XG4gICAgICAgIC8vIEB0cy1pZ25vcmUgbW9kdWxlIGF1Z21lbnRhdGlvbiBmYWlscyBpZiBjdXN0b20gYnJlYWtwb2ludHMgYXJlIHVzZWRcbiAgICAgICAgLFxuICAgICAgICBvd25lclN0YXRlOiBvd25lclN0YXRlLFxuICAgICAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWUpLFxuICAgICAgICByZWY6IHJlZlxuICAgICAgfSwgb3RoZXIpKVxuICAgICk7XG4gIH0pO1xuICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBDb250YWluZXIucHJvcFR5cGVzIC8qIHJlbW92ZS1wcm9wdHlwZXMgKi8gPSB7XG4gICAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAgIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGNvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuICAgIGRpc2FibGVHdXR0ZXJzOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBmaXhlZDogUHJvcFR5cGVzLmJvb2wsXG4gICAgbWF4V2lkdGg6IFByb3BUeXBlcyAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsneHMnLCAnc20nLCAnbWQnLCAnbGcnLCAneGwnLCBmYWxzZV0pLCBQcm9wVHlwZXMuc3RyaW5nXSksXG4gICAgc3g6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuYm9vbF0pKSwgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKVxuICB9IDogdm9pZCAwO1xuICByZXR1cm4gQ29udGFpbmVyO1xufSIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IGNyZWF0ZUNvbnRhaW5lciB9IGZyb20gJ0BtdWkvc3lzdGVtJztcbmltcG9ydCBjYXBpdGFsaXplIGZyb20gJy4uL3V0aWxzL2NhcGl0YWxpemUnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICcuLi9zdHlsZXMvc3R5bGVkJztcbmltcG9ydCB7IHVzZURlZmF1bHRQcm9wcyB9IGZyb20gJy4uL0RlZmF1bHRQcm9wc1Byb3ZpZGVyJztcbmNvbnN0IENvbnRhaW5lciA9IGNyZWF0ZUNvbnRhaW5lcih7XG4gIGNyZWF0ZVN0eWxlZENvbXBvbmVudDogc3R5bGVkKCdkaXYnLCB7XG4gICAgbmFtZTogJ011aUNvbnRhaW5lcicsXG4gICAgc2xvdDogJ1Jvb3QnLFxuICAgIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4ge1xuICAgICAgY29uc3Qge1xuICAgICAgICBvd25lclN0YXRlXG4gICAgICB9ID0gcHJvcHM7XG4gICAgICByZXR1cm4gW3N0eWxlcy5yb290LCBzdHlsZXNbYG1heFdpZHRoJHtjYXBpdGFsaXplKFN0cmluZyhvd25lclN0YXRlLm1heFdpZHRoKSl9YF0sIG93bmVyU3RhdGUuZml4ZWQgJiYgc3R5bGVzLmZpeGVkLCBvd25lclN0YXRlLmRpc2FibGVHdXR0ZXJzICYmIHN0eWxlcy5kaXNhYmxlR3V0dGVyc107XG4gICAgfVxuICB9KSxcbiAgdXNlVGhlbWVQcm9wczogaW5Qcm9wcyA9PiB1c2VEZWZhdWx0UHJvcHMoe1xuICAgIHByb3BzOiBpblByb3BzLFxuICAgIG5hbWU6ICdNdWlDb250YWluZXInXG4gIH0pXG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IENvbnRhaW5lci5wcm9wVHlwZXMgLyogcmVtb3ZlLXByb3B0eXBlcyAqLyA9IHtcbiAgLy8g4pSM4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAIFdhcm5pbmcg4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSQXG4gIC8vIOKUgiBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMuIOKUglxuICAvLyDilIIgICAgVG8gdXBkYXRlIHRoZW0sIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIGBwbnBtIHByb3B0eXBlc2AuICAgICDilIJcbiAgLy8g4pSU4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSYXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgcm9vdCBub2RlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgSFRNTCBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKi9cbiAgY29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBsZWZ0IGFuZCByaWdodCBwYWRkaW5nIGlzIHJlbW92ZWQuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkaXNhYmxlR3V0dGVyczogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBTZXQgdGhlIG1heC13aWR0aCB0byBtYXRjaCB0aGUgbWluLXdpZHRoIG9mIHRoZSBjdXJyZW50IGJyZWFrcG9pbnQuXG4gICAqIFRoaXMgaXMgdXNlZnVsIGlmIHlvdSdkIHByZWZlciB0byBkZXNpZ24gZm9yIGEgZml4ZWQgc2V0IG9mIHNpemVzXG4gICAqIGluc3RlYWQgb2YgdHJ5aW5nIHRvIGFjY29tbW9kYXRlIGEgZnVsbHkgZmx1aWQgdmlld3BvcnQuXG4gICAqIEl0J3MgZmx1aWQgYnkgZGVmYXVsdC5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGZpeGVkOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIERldGVybWluZSB0aGUgbWF4LXdpZHRoIG9mIHRoZSBjb250YWluZXIuXG4gICAqIFRoZSBjb250YWluZXIgd2lkdGggZ3Jvd3Mgd2l0aCB0aGUgc2l6ZSBvZiB0aGUgc2NyZWVuLlxuICAgKiBTZXQgdG8gYGZhbHNlYCB0byBkaXNhYmxlIGBtYXhXaWR0aGAuXG4gICAqIEBkZWZhdWx0ICdsZydcbiAgICovXG4gIG1heFdpZHRoOiBQcm9wVHlwZXMgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqLy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ3hzJywgJ3NtJywgJ21kJywgJ2xnJywgJ3hsJywgZmFsc2VdKSwgUHJvcFR5cGVzLnN0cmluZ10pLFxuICAvKipcbiAgICogVGhlIHN5c3RlbSBwcm9wIHRoYXQgYWxsb3dzIGRlZmluaW5nIHN5c3RlbSBvdmVycmlkZXMgYXMgd2VsbCBhcyBhZGRpdGlvbmFsIENTUyBzdHlsZXMuXG4gICAqL1xuICBzeDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5ib29sXSkpLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgQ29udGFpbmVyOyIsImltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3Nlcyc7XG5pbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3MgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzcyc7XG5leHBvcnQgZnVuY3Rpb24gZ2V0Q29udGFpbmVyVXRpbGl0eUNsYXNzKHNsb3QpIHtcbiAgcmV0dXJuIGdlbmVyYXRlVXRpbGl0eUNsYXNzKCdNdWlDb250YWluZXInLCBzbG90KTtcbn1cbmNvbnN0IGNvbnRhaW5lckNsYXNzZXMgPSBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzKCdNdWlDb250YWluZXInLCBbJ3Jvb3QnLCAnZGlzYWJsZUd1dHRlcnMnLCAnZml4ZWQnLCAnbWF4V2lkdGhYcycsICdtYXhXaWR0aFNtJywgJ21heFdpZHRoTWQnLCAnbWF4V2lkdGhMZycsICdtYXhXaWR0aFhsJ10pO1xuZXhwb3J0IGRlZmF1bHQgY29udGFpbmVyQ2xhc3NlczsiLCIvLyB0cmFjaywgdGh1bWIgYW5kIGFjdGl2ZSBhcmUgZGVyaXZlZCBmcm9tIG1hY09TIDEwLjE1LjdcbmNvbnN0IHNjcm9sbEJhciA9IHtcbiAgdHJhY2s6ICcjMmIyYjJiJyxcbiAgdGh1bWI6ICcjNmI2YjZiJyxcbiAgYWN0aXZlOiAnIzk1OTU5NSdcbn07XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBkYXJrU2Nyb2xsYmFyKG9wdGlvbnMgPSBzY3JvbGxCYXIpIHtcbiAgcmV0dXJuIHtcbiAgICBzY3JvbGxiYXJDb2xvcjogYCR7b3B0aW9ucy50aHVtYn0gJHtvcHRpb25zLnRyYWNrfWAsXG4gICAgJyY6Oi13ZWJraXQtc2Nyb2xsYmFyLCAmICo6Oi13ZWJraXQtc2Nyb2xsYmFyJzoge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiBvcHRpb25zLnRyYWNrXG4gICAgfSxcbiAgICAnJjo6LXdlYmtpdC1zY3JvbGxiYXItdGh1bWIsICYgKjo6LXdlYmtpdC1zY3JvbGxiYXItdGh1bWInOiB7XG4gICAgICBib3JkZXJSYWRpdXM6IDgsXG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IG9wdGlvbnMudGh1bWIsXG4gICAgICBtaW5IZWlnaHQ6IDI0LFxuICAgICAgYm9yZGVyOiBgM3B4IHNvbGlkICR7b3B0aW9ucy50cmFja31gXG4gICAgfSxcbiAgICAnJjo6LXdlYmtpdC1zY3JvbGxiYXItdGh1bWI6Zm9jdXMsICYgKjo6LXdlYmtpdC1zY3JvbGxiYXItdGh1bWI6Zm9jdXMnOiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IG9wdGlvbnMuYWN0aXZlXG4gICAgfSxcbiAgICAnJjo6LXdlYmtpdC1zY3JvbGxiYXItdGh1bWI6YWN0aXZlLCAmICo6Oi13ZWJraXQtc2Nyb2xsYmFyLXRodW1iOmFjdGl2ZSc6IHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogb3B0aW9ucy5hY3RpdmVcbiAgICB9LFxuICAgICcmOjotd2Via2l0LXNjcm9sbGJhci10aHVtYjpob3ZlciwgJiAqOjotd2Via2l0LXNjcm9sbGJhci10aHVtYjpob3Zlcic6IHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogb3B0aW9ucy5hY3RpdmVcbiAgICB9LFxuICAgICcmOjotd2Via2l0LXNjcm9sbGJhci1jb3JuZXIsICYgKjo6LXdlYmtpdC1zY3JvbGxiYXItY29ybmVyJzoge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiBvcHRpb25zLnRyYWNrXG4gICAgfVxuICB9O1xufSIsImltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3Nlcyc7XG5pbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3MgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzcyc7XG5leHBvcnQgZnVuY3Rpb24gZ2V0RGlhbG9nVXRpbGl0eUNsYXNzKHNsb3QpIHtcbiAgcmV0dXJuIGdlbmVyYXRlVXRpbGl0eUNsYXNzKCdNdWlEaWFsb2cnLCBzbG90KTtcbn1cbmNvbnN0IGRpYWxvZ0NsYXNzZXMgPSBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzKCdNdWlEaWFsb2cnLCBbJ3Jvb3QnLCAnc2Nyb2xsUGFwZXInLCAnc2Nyb2xsQm9keScsICdjb250YWluZXInLCAncGFwZXInLCAncGFwZXJTY3JvbGxQYXBlcicsICdwYXBlclNjcm9sbEJvZHknLCAncGFwZXJXaWR0aEZhbHNlJywgJ3BhcGVyV2lkdGhYcycsICdwYXBlcldpZHRoU20nLCAncGFwZXJXaWR0aE1kJywgJ3BhcGVyV2lkdGhMZycsICdwYXBlcldpZHRoWGwnLCAncGFwZXJGdWxsV2lkdGgnLCAncGFwZXJGdWxsU2NyZWVuJ10pO1xuZXhwb3J0IGRlZmF1bHQgZGlhbG9nQ2xhc3NlczsiLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5jb25zdCBEaWFsb2dDb250ZXh0ID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUNvbnRleHQoe30pO1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgRGlhbG9nQ29udGV4dC5kaXNwbGF5TmFtZSA9ICdEaWFsb2dDb250ZXh0Jztcbn1cbmV4cG9ydCBkZWZhdWx0IERpYWxvZ0NvbnRleHQ7IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiYXJpYS1kZXNjcmliZWRieVwiLCBcImFyaWEtbGFiZWxsZWRieVwiLCBcIkJhY2tkcm9wQ29tcG9uZW50XCIsIFwiQmFja2Ryb3BQcm9wc1wiLCBcImNoaWxkcmVuXCIsIFwiY2xhc3NOYW1lXCIsIFwiZGlzYWJsZUVzY2FwZUtleURvd25cIiwgXCJmdWxsU2NyZWVuXCIsIFwiZnVsbFdpZHRoXCIsIFwibWF4V2lkdGhcIiwgXCJvbkJhY2tkcm9wQ2xpY2tcIiwgXCJvbkNsaWNrXCIsIFwib25DbG9zZVwiLCBcIm9wZW5cIiwgXCJQYXBlckNvbXBvbmVudFwiLCBcIlBhcGVyUHJvcHNcIiwgXCJzY3JvbGxcIiwgXCJUcmFuc2l0aW9uQ29tcG9uZW50XCIsIFwidHJhbnNpdGlvbkR1cmF0aW9uXCIsIFwiVHJhbnNpdGlvblByb3BzXCJdO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IGNvbXBvc2VDbGFzc2VzIGZyb20gJ0BtdWkvdXRpbHMvY29tcG9zZUNsYXNzZXMnO1xuaW1wb3J0IHVzZUlkIGZyb20gJ0BtdWkvdXRpbHMvdXNlSWQnO1xuaW1wb3J0IGNhcGl0YWxpemUgZnJvbSAnLi4vdXRpbHMvY2FwaXRhbGl6ZSc7XG5pbXBvcnQgTW9kYWwgZnJvbSAnLi4vTW9kYWwnO1xuaW1wb3J0IEZhZGUgZnJvbSAnLi4vRmFkZSc7XG5pbXBvcnQgUGFwZXIgZnJvbSAnLi4vUGFwZXInO1xuaW1wb3J0IHsgdXNlRGVmYXVsdFByb3BzIH0gZnJvbSAnLi4vRGVmYXVsdFByb3BzUHJvdmlkZXInO1xuaW1wb3J0IHN0eWxlZCBmcm9tICcuLi9zdHlsZXMvc3R5bGVkJztcbmltcG9ydCBkaWFsb2dDbGFzc2VzLCB7IGdldERpYWxvZ1V0aWxpdHlDbGFzcyB9IGZyb20gJy4vZGlhbG9nQ2xhc3Nlcyc7XG5pbXBvcnQgRGlhbG9nQ29udGV4dCBmcm9tICcuL0RpYWxvZ0NvbnRleHQnO1xuaW1wb3J0IEJhY2tkcm9wIGZyb20gJy4uL0JhY2tkcm9wJztcbmltcG9ydCB1c2VUaGVtZSBmcm9tICcuLi9zdHlsZXMvdXNlVGhlbWUnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmNvbnN0IERpYWxvZ0JhY2tkcm9wID0gc3R5bGVkKEJhY2tkcm9wLCB7XG4gIG5hbWU6ICdNdWlEaWFsb2cnLFxuICBzbG90OiAnQmFja2Ryb3AnLFxuICBvdmVycmlkZXM6IChwcm9wcywgc3R5bGVzKSA9PiBzdHlsZXMuYmFja2Ryb3Bcbn0pKHtcbiAgLy8gSW1wcm92ZSBzY3JvbGxhYmxlIGRpYWxvZyBzdXBwb3J0LlxuICB6SW5kZXg6IC0xXG59KTtcbmNvbnN0IHVzZVV0aWxpdHlDbGFzc2VzID0gb3duZXJTdGF0ZSA9PiB7XG4gIGNvbnN0IHtcbiAgICBjbGFzc2VzLFxuICAgIHNjcm9sbCxcbiAgICBtYXhXaWR0aCxcbiAgICBmdWxsV2lkdGgsXG4gICAgZnVsbFNjcmVlblxuICB9ID0gb3duZXJTdGF0ZTtcbiAgY29uc3Qgc2xvdHMgPSB7XG4gICAgcm9vdDogWydyb290J10sXG4gICAgY29udGFpbmVyOiBbJ2NvbnRhaW5lcicsIGBzY3JvbGwke2NhcGl0YWxpemUoc2Nyb2xsKX1gXSxcbiAgICBwYXBlcjogWydwYXBlcicsIGBwYXBlclNjcm9sbCR7Y2FwaXRhbGl6ZShzY3JvbGwpfWAsIGBwYXBlcldpZHRoJHtjYXBpdGFsaXplKFN0cmluZyhtYXhXaWR0aCkpfWAsIGZ1bGxXaWR0aCAmJiAncGFwZXJGdWxsV2lkdGgnLCBmdWxsU2NyZWVuICYmICdwYXBlckZ1bGxTY3JlZW4nXVxuICB9O1xuICByZXR1cm4gY29tcG9zZUNsYXNzZXMoc2xvdHMsIGdldERpYWxvZ1V0aWxpdHlDbGFzcywgY2xhc3Nlcyk7XG59O1xuY29uc3QgRGlhbG9nUm9vdCA9IHN0eWxlZChNb2RhbCwge1xuICBuYW1lOiAnTXVpRGlhbG9nJyxcbiAgc2xvdDogJ1Jvb3QnLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHN0eWxlcy5yb290XG59KSh7XG4gICdAbWVkaWEgcHJpbnQnOiB7XG4gICAgLy8gVXNlICFpbXBvcnRhbnQgdG8gb3ZlcnJpZGUgdGhlIE1vZGFsIGlubGluZS1zdHlsZS5cbiAgICBwb3NpdGlvbjogJ2Fic29sdXRlICFpbXBvcnRhbnQnXG4gIH1cbn0pO1xuY29uc3QgRGlhbG9nQ29udGFpbmVyID0gc3R5bGVkKCdkaXYnLCB7XG4gIG5hbWU6ICdNdWlEaWFsb2cnLFxuICBzbG90OiAnQ29udGFpbmVyJyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgb3duZXJTdGF0ZVxuICAgIH0gPSBwcm9wcztcbiAgICByZXR1cm4gW3N0eWxlcy5jb250YWluZXIsIHN0eWxlc1tgc2Nyb2xsJHtjYXBpdGFsaXplKG93bmVyU3RhdGUuc2Nyb2xsKX1gXV07XG4gIH1cbn0pKCh7XG4gIG93bmVyU3RhdGVcbn0pID0+IF9leHRlbmRzKHtcbiAgaGVpZ2h0OiAnMTAwJScsXG4gICdAbWVkaWEgcHJpbnQnOiB7XG4gICAgaGVpZ2h0OiAnYXV0bydcbiAgfSxcbiAgLy8gV2UgZGlzYWJsZSB0aGUgZm9jdXMgcmluZyBmb3IgbW91c2UsIHRvdWNoIGFuZCBrZXlib2FyZCB1c2Vycy5cbiAgb3V0bGluZTogMFxufSwgb3duZXJTdGF0ZS5zY3JvbGwgPT09ICdwYXBlcicgJiYge1xuICBkaXNwbGF5OiAnZmxleCcsXG4gIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJyxcbiAgYWxpZ25JdGVtczogJ2NlbnRlcidcbn0sIG93bmVyU3RhdGUuc2Nyb2xsID09PSAnYm9keScgJiYge1xuICBvdmVyZmxvd1k6ICdhdXRvJyxcbiAgb3ZlcmZsb3dYOiAnaGlkZGVuJyxcbiAgdGV4dEFsaWduOiAnY2VudGVyJyxcbiAgJyY6OmFmdGVyJzoge1xuICAgIGNvbnRlbnQ6ICdcIlwiJyxcbiAgICBkaXNwbGF5OiAnaW5saW5lLWJsb2NrJyxcbiAgICB2ZXJ0aWNhbEFsaWduOiAnbWlkZGxlJyxcbiAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICB3aWR0aDogJzAnXG4gIH1cbn0pKTtcbmNvbnN0IERpYWxvZ1BhcGVyID0gc3R5bGVkKFBhcGVyLCB7XG4gIG5hbWU6ICdNdWlEaWFsb2cnLFxuICBzbG90OiAnUGFwZXInLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBvd25lclN0YXRlXG4gICAgfSA9IHByb3BzO1xuICAgIHJldHVybiBbc3R5bGVzLnBhcGVyLCBzdHlsZXNbYHNjcm9sbFBhcGVyJHtjYXBpdGFsaXplKG93bmVyU3RhdGUuc2Nyb2xsKX1gXSwgc3R5bGVzW2BwYXBlcldpZHRoJHtjYXBpdGFsaXplKFN0cmluZyhvd25lclN0YXRlLm1heFdpZHRoKSl9YF0sIG93bmVyU3RhdGUuZnVsbFdpZHRoICYmIHN0eWxlcy5wYXBlckZ1bGxXaWR0aCwgb3duZXJTdGF0ZS5mdWxsU2NyZWVuICYmIHN0eWxlcy5wYXBlckZ1bGxTY3JlZW5dO1xuICB9XG59KSgoe1xuICB0aGVtZSxcbiAgb3duZXJTdGF0ZVxufSkgPT4gX2V4dGVuZHMoe1xuICBtYXJnaW46IDMyLFxuICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgb3ZlcmZsb3dZOiAnYXV0bycsXG4gIC8vIEZpeCBJRTExIGlzc3VlLCB0byByZW1vdmUgYXQgc29tZSBwb2ludC5cbiAgJ0BtZWRpYSBwcmludCc6IHtcbiAgICBvdmVyZmxvd1k6ICd2aXNpYmxlJyxcbiAgICBib3hTaGFkb3c6ICdub25lJ1xuICB9XG59LCBvd25lclN0YXRlLnNjcm9sbCA9PT0gJ3BhcGVyJyAmJiB7XG4gIGRpc3BsYXk6ICdmbGV4JyxcbiAgZmxleERpcmVjdGlvbjogJ2NvbHVtbicsXG4gIG1heEhlaWdodDogJ2NhbGMoMTAwJSAtIDY0cHgpJ1xufSwgb3duZXJTdGF0ZS5zY3JvbGwgPT09ICdib2R5JyAmJiB7XG4gIGRpc3BsYXk6ICdpbmxpbmUtYmxvY2snLFxuICB2ZXJ0aWNhbEFsaWduOiAnbWlkZGxlJyxcbiAgdGV4dEFsaWduOiAnbGVmdCcgLy8gJ2luaXRpYWwnIGRvZXNuJ3Qgd29yayBvbiBJRTExXG59LCAhb3duZXJTdGF0ZS5tYXhXaWR0aCAmJiB7XG4gIG1heFdpZHRoOiAnY2FsYygxMDAlIC0gNjRweCknXG59LCBvd25lclN0YXRlLm1heFdpZHRoID09PSAneHMnICYmIHtcbiAgbWF4V2lkdGg6IHRoZW1lLmJyZWFrcG9pbnRzLnVuaXQgPT09ICdweCcgPyBNYXRoLm1heCh0aGVtZS5icmVha3BvaW50cy52YWx1ZXMueHMsIDQ0NCkgOiBgbWF4KCR7dGhlbWUuYnJlYWtwb2ludHMudmFsdWVzLnhzfSR7dGhlbWUuYnJlYWtwb2ludHMudW5pdH0sIDQ0NHB4KWAsXG4gIFtgJi4ke2RpYWxvZ0NsYXNzZXMucGFwZXJTY3JvbGxCb2R5fWBdOiB7XG4gICAgW3RoZW1lLmJyZWFrcG9pbnRzLmRvd24oTWF0aC5tYXgodGhlbWUuYnJlYWtwb2ludHMudmFsdWVzLnhzLCA0NDQpICsgMzIgKiAyKV06IHtcbiAgICAgIG1heFdpZHRoOiAnY2FsYygxMDAlIC0gNjRweCknXG4gICAgfVxuICB9XG59LCBvd25lclN0YXRlLm1heFdpZHRoICYmIG93bmVyU3RhdGUubWF4V2lkdGggIT09ICd4cycgJiYge1xuICBtYXhXaWR0aDogYCR7dGhlbWUuYnJlYWtwb2ludHMudmFsdWVzW293bmVyU3RhdGUubWF4V2lkdGhdfSR7dGhlbWUuYnJlYWtwb2ludHMudW5pdH1gLFxuICBbYCYuJHtkaWFsb2dDbGFzc2VzLnBhcGVyU2Nyb2xsQm9keX1gXToge1xuICAgIFt0aGVtZS5icmVha3BvaW50cy5kb3duKHRoZW1lLmJyZWFrcG9pbnRzLnZhbHVlc1tvd25lclN0YXRlLm1heFdpZHRoXSArIDMyICogMildOiB7XG4gICAgICBtYXhXaWR0aDogJ2NhbGMoMTAwJSAtIDY0cHgpJ1xuICAgIH1cbiAgfVxufSwgb3duZXJTdGF0ZS5mdWxsV2lkdGggJiYge1xuICB3aWR0aDogJ2NhbGMoMTAwJSAtIDY0cHgpJ1xufSwgb3duZXJTdGF0ZS5mdWxsU2NyZWVuICYmIHtcbiAgbWFyZ2luOiAwLFxuICB3aWR0aDogJzEwMCUnLFxuICBtYXhXaWR0aDogJzEwMCUnLFxuICBoZWlnaHQ6ICcxMDAlJyxcbiAgbWF4SGVpZ2h0OiAnbm9uZScsXG4gIGJvcmRlclJhZGl1czogMCxcbiAgW2AmLiR7ZGlhbG9nQ2xhc3Nlcy5wYXBlclNjcm9sbEJvZHl9YF06IHtcbiAgICBtYXJnaW46IDAsXG4gICAgbWF4V2lkdGg6ICcxMDAlJ1xuICB9XG59KSk7XG5cbi8qKlxuICogRGlhbG9ncyBhcmUgb3ZlcmxhaWQgbW9kYWwgcGFwZXIgYmFzZWQgY29tcG9uZW50cyB3aXRoIGEgYmFja2Ryb3AuXG4gKi9cbmNvbnN0IERpYWxvZyA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIERpYWxvZyhpblByb3BzLCByZWYpIHtcbiAgY29uc3QgcHJvcHMgPSB1c2VEZWZhdWx0UHJvcHMoe1xuICAgIHByb3BzOiBpblByb3BzLFxuICAgIG5hbWU6ICdNdWlEaWFsb2cnXG4gIH0pO1xuICBjb25zdCB0aGVtZSA9IHVzZVRoZW1lKCk7XG4gIGNvbnN0IGRlZmF1bHRUcmFuc2l0aW9uRHVyYXRpb24gPSB7XG4gICAgZW50ZXI6IHRoZW1lLnRyYW5zaXRpb25zLmR1cmF0aW9uLmVudGVyaW5nU2NyZWVuLFxuICAgIGV4aXQ6IHRoZW1lLnRyYW5zaXRpb25zLmR1cmF0aW9uLmxlYXZpbmdTY3JlZW5cbiAgfTtcbiAgY29uc3Qge1xuICAgICAgJ2FyaWEtZGVzY3JpYmVkYnknOiBhcmlhRGVzY3JpYmVkYnksXG4gICAgICAnYXJpYS1sYWJlbGxlZGJ5JzogYXJpYUxhYmVsbGVkYnlQcm9wLFxuICAgICAgQmFja2Ryb3BDb21wb25lbnQsXG4gICAgICBCYWNrZHJvcFByb3BzLFxuICAgICAgY2hpbGRyZW4sXG4gICAgICBjbGFzc05hbWUsXG4gICAgICBkaXNhYmxlRXNjYXBlS2V5RG93biA9IGZhbHNlLFxuICAgICAgZnVsbFNjcmVlbiA9IGZhbHNlLFxuICAgICAgZnVsbFdpZHRoID0gZmFsc2UsXG4gICAgICBtYXhXaWR0aCA9ICdzbScsXG4gICAgICBvbkJhY2tkcm9wQ2xpY2ssXG4gICAgICBvbkNsaWNrLFxuICAgICAgb25DbG9zZSxcbiAgICAgIG9wZW4sXG4gICAgICBQYXBlckNvbXBvbmVudCA9IFBhcGVyLFxuICAgICAgUGFwZXJQcm9wcyA9IHt9LFxuICAgICAgc2Nyb2xsID0gJ3BhcGVyJyxcbiAgICAgIFRyYW5zaXRpb25Db21wb25lbnQgPSBGYWRlLFxuICAgICAgdHJhbnNpdGlvbkR1cmF0aW9uID0gZGVmYXVsdFRyYW5zaXRpb25EdXJhdGlvbixcbiAgICAgIFRyYW5zaXRpb25Qcm9wc1xuICAgIH0gPSBwcm9wcyxcbiAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQpO1xuICBjb25zdCBvd25lclN0YXRlID0gX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgZGlzYWJsZUVzY2FwZUtleURvd24sXG4gICAgZnVsbFNjcmVlbixcbiAgICBmdWxsV2lkdGgsXG4gICAgbWF4V2lkdGgsXG4gICAgc2Nyb2xsXG4gIH0pO1xuICBjb25zdCBjbGFzc2VzID0gdXNlVXRpbGl0eUNsYXNzZXMob3duZXJTdGF0ZSk7XG4gIGNvbnN0IGJhY2tkcm9wQ2xpY2sgPSBSZWFjdC51c2VSZWYoKTtcbiAgY29uc3QgaGFuZGxlTW91c2VEb3duID0gZXZlbnQgPT4ge1xuICAgIC8vIFdlIGRvbid0IHdhbnQgdG8gY2xvc2UgdGhlIGRpYWxvZyB3aGVuIGNsaWNraW5nIHRoZSBkaWFsb2cgY29udGVudC5cbiAgICAvLyBNYWtlIHN1cmUgdGhlIGV2ZW50IHN0YXJ0cyBhbmQgZW5kcyBvbiB0aGUgc2FtZSBET00gZWxlbWVudC5cbiAgICBiYWNrZHJvcENsaWNrLmN1cnJlbnQgPSBldmVudC50YXJnZXQgPT09IGV2ZW50LmN1cnJlbnRUYXJnZXQ7XG4gIH07XG4gIGNvbnN0IGhhbmRsZUJhY2tkcm9wQ2xpY2sgPSBldmVudCA9PiB7XG4gICAgaWYgKG9uQ2xpY2spIHtcbiAgICAgIG9uQ2xpY2soZXZlbnQpO1xuICAgIH1cblxuICAgIC8vIElnbm9yZSB0aGUgZXZlbnRzIG5vdCBjb21pbmcgZnJvbSB0aGUgXCJiYWNrZHJvcFwiLlxuICAgIGlmICghYmFja2Ryb3BDbGljay5jdXJyZW50KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGJhY2tkcm9wQ2xpY2suY3VycmVudCA9IG51bGw7XG4gICAgaWYgKG9uQmFja2Ryb3BDbGljaykge1xuICAgICAgb25CYWNrZHJvcENsaWNrKGV2ZW50KTtcbiAgICB9XG4gICAgaWYgKG9uQ2xvc2UpIHtcbiAgICAgIG9uQ2xvc2UoZXZlbnQsICdiYWNrZHJvcENsaWNrJyk7XG4gICAgfVxuICB9O1xuICBjb25zdCBhcmlhTGFiZWxsZWRieSA9IHVzZUlkKGFyaWFMYWJlbGxlZGJ5UHJvcCk7XG4gIGNvbnN0IGRpYWxvZ0NvbnRleHRWYWx1ZSA9IFJlYWN0LnVzZU1lbW8oKCkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICB0aXRsZUlkOiBhcmlhTGFiZWxsZWRieVxuICAgIH07XG4gIH0sIFthcmlhTGFiZWxsZWRieV0pO1xuICByZXR1cm4gLyojX19QVVJFX18qL19qc3goRGlhbG9nUm9vdCwgX2V4dGVuZHMoe1xuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSksXG4gICAgY2xvc2VBZnRlclRyYW5zaXRpb246IHRydWUsXG4gICAgY29tcG9uZW50czoge1xuICAgICAgQmFja2Ryb3A6IERpYWxvZ0JhY2tkcm9wXG4gICAgfSxcbiAgICBjb21wb25lbnRzUHJvcHM6IHtcbiAgICAgIGJhY2tkcm9wOiBfZXh0ZW5kcyh7XG4gICAgICAgIHRyYW5zaXRpb25EdXJhdGlvbixcbiAgICAgICAgYXM6IEJhY2tkcm9wQ29tcG9uZW50XG4gICAgICB9LCBCYWNrZHJvcFByb3BzKVxuICAgIH0sXG4gICAgZGlzYWJsZUVzY2FwZUtleURvd246IGRpc2FibGVFc2NhcGVLZXlEb3duLFxuICAgIG9uQ2xvc2U6IG9uQ2xvc2UsXG4gICAgb3Blbjogb3BlbixcbiAgICByZWY6IHJlZixcbiAgICBvbkNsaWNrOiBoYW5kbGVCYWNrZHJvcENsaWNrLFxuICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGVcbiAgfSwgb3RoZXIsIHtcbiAgICBjaGlsZHJlbjogLyojX19QVVJFX18qL19qc3goVHJhbnNpdGlvbkNvbXBvbmVudCwgX2V4dGVuZHMoe1xuICAgICAgYXBwZWFyOiB0cnVlLFxuICAgICAgaW46IG9wZW4sXG4gICAgICB0aW1lb3V0OiB0cmFuc2l0aW9uRHVyYXRpb24sXG4gICAgICByb2xlOiBcInByZXNlbnRhdGlvblwiXG4gICAgfSwgVHJhbnNpdGlvblByb3BzLCB7XG4gICAgICBjaGlsZHJlbjogLyojX19QVVJFX18qL19qc3goRGlhbG9nQ29udGFpbmVyLCB7XG4gICAgICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLmNvbnRhaW5lciksXG4gICAgICAgIG9uTW91c2VEb3duOiBoYW5kbGVNb3VzZURvd24sXG4gICAgICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGUsXG4gICAgICAgIGNoaWxkcmVuOiAvKiNfX1BVUkVfXyovX2pzeChEaWFsb2dQYXBlciwgX2V4dGVuZHMoe1xuICAgICAgICAgIGFzOiBQYXBlckNvbXBvbmVudCxcbiAgICAgICAgICBlbGV2YXRpb246IDI0LFxuICAgICAgICAgIHJvbGU6IFwiZGlhbG9nXCIsXG4gICAgICAgICAgXCJhcmlhLWRlc2NyaWJlZGJ5XCI6IGFyaWFEZXNjcmliZWRieSxcbiAgICAgICAgICBcImFyaWEtbGFiZWxsZWRieVwiOiBhcmlhTGFiZWxsZWRieVxuICAgICAgICB9LCBQYXBlclByb3BzLCB7XG4gICAgICAgICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucGFwZXIsIFBhcGVyUHJvcHMuY2xhc3NOYW1lKSxcbiAgICAgICAgICBvd25lclN0YXRlOiBvd25lclN0YXRlLFxuICAgICAgICAgIGNoaWxkcmVuOiAvKiNfX1BVUkVfXyovX2pzeChEaWFsb2dDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgICAgICAgICB2YWx1ZTogZGlhbG9nQ29udGV4dFZhbHVlLFxuICAgICAgICAgICAgY2hpbGRyZW46IGNoaWxkcmVuXG4gICAgICAgICAgfSlcbiAgICAgICAgfSkpXG4gICAgICB9KVxuICAgIH0pKVxuICB9KSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IERpYWxvZy5wcm9wVHlwZXMgLyogcmVtb3ZlLXByb3B0eXBlcyAqLyA9IHtcbiAgLy8g4pSM4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAIFdhcm5pbmcg4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSQXG4gIC8vIOKUgiBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMuIOKUglxuICAvLyDilIIgICAgVG8gdXBkYXRlIHRoZW0sIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIGBwbnBtIHByb3B0eXBlc2AuICAgICDilIJcbiAgLy8g4pSU4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSYXG4gIC8qKlxuICAgKiBUaGUgaWQocykgb2YgdGhlIGVsZW1lbnQocykgdGhhdCBkZXNjcmliZSB0aGUgZGlhbG9nLlxuICAgKi9cbiAgJ2FyaWEtZGVzY3JpYmVkYnknOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogVGhlIGlkKHMpIG9mIHRoZSBlbGVtZW50KHMpIHRoYXQgbGFiZWwgdGhlIGRpYWxvZy5cbiAgICovXG4gICdhcmlhLWxhYmVsbGVkYnknOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogQSBiYWNrZHJvcCBjb21wb25lbnQuIFRoaXMgcHJvcCBlbmFibGVzIGN1c3RvbSBiYWNrZHJvcCByZW5kZXJpbmcuXG4gICAqIEBkZXByZWNhdGVkIFVzZSBgc2xvdHMuYmFja2Ryb3BgIGluc3RlYWQuIFdoaWxlIHRoaXMgcHJvcCBjdXJyZW50bHkgd29ya3MsIGl0IHdpbGwgYmUgcmVtb3ZlZCBpbiB0aGUgbmV4dCBtYWpvciB2ZXJzaW9uLlxuICAgKiBVc2UgdGhlIGBzbG90cy5iYWNrZHJvcGAgcHJvcCB0byBtYWtlIHlvdXIgYXBwbGljYXRpb24gcmVhZHkgZm9yIHRoZSBuZXh0IHZlcnNpb24gb2YgTWF0ZXJpYWwgVUkuXG4gICAqIEBkZWZhdWx0IHN0eWxlZChCYWNrZHJvcCwge1xuICAgKiAgIG5hbWU6ICdNdWlNb2RhbCcsXG4gICAqICAgc2xvdDogJ0JhY2tkcm9wJyxcbiAgICogICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHtcbiAgICogICAgIHJldHVybiBzdHlsZXMuYmFja2Ryb3A7XG4gICAqICAgfSxcbiAgICogfSkoe1xuICAgKiAgIHpJbmRleDogLTEsXG4gICAqIH0pXG4gICAqL1xuICBCYWNrZHJvcENvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgQmFja2Ryb3BQcm9wczogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqXG4gICAqIERpYWxvZyBjaGlsZHJlbiwgdXN1YWxseSB0aGUgaW5jbHVkZWQgc3ViLWNvbXBvbmVudHMuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogSWYgYHRydWVgLCBoaXR0aW5nIGVzY2FwZSB3aWxsIG5vdCBmaXJlIHRoZSBgb25DbG9zZWAgY2FsbGJhY2suXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkaXNhYmxlRXNjYXBlS2V5RG93bjogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBkaWFsb2cgaXMgZnVsbC1zY3JlZW4uXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBmdWxsU2NyZWVuOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGRpYWxvZyBzdHJldGNoZXMgdG8gYG1heFdpZHRoYC5cbiAgICpcbiAgICogTm90aWNlIHRoYXQgdGhlIGRpYWxvZyB3aWR0aCBncm93IGlzIGxpbWl0ZWQgYnkgdGhlIGRlZmF1bHQgbWFyZ2luLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZnVsbFdpZHRoOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIERldGVybWluZSB0aGUgbWF4LXdpZHRoIG9mIHRoZSBkaWFsb2cuXG4gICAqIFRoZSBkaWFsb2cgd2lkdGggZ3Jvd3Mgd2l0aCB0aGUgc2l6ZSBvZiB0aGUgc2NyZWVuLlxuICAgKiBTZXQgdG8gYGZhbHNlYCB0byBkaXNhYmxlIGBtYXhXaWR0aGAuXG4gICAqIEBkZWZhdWx0ICdzbSdcbiAgICovXG4gIG1heFdpZHRoOiBQcm9wVHlwZXMgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqLy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ3hzJywgJ3NtJywgJ21kJywgJ2xnJywgJ3hsJywgZmFsc2VdKSwgUHJvcFR5cGVzLnN0cmluZ10pLFxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgYmFja2Ryb3AgaXMgY2xpY2tlZC5cbiAgICogQGRlcHJlY2F0ZWQgVXNlIHRoZSBgb25DbG9zZWAgcHJvcCB3aXRoIHRoZSBgcmVhc29uYCBhcmd1bWVudCB0byBoYW5kbGUgdGhlIGBiYWNrZHJvcENsaWNrYCBldmVudHMuXG4gICAqL1xuICBvbkJhY2tkcm9wQ2xpY2s6IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25DbGljazogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSBjb21wb25lbnQgcmVxdWVzdHMgdG8gYmUgY2xvc2VkLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gZXZlbnQgVGhlIGV2ZW50IHNvdXJjZSBvZiB0aGUgY2FsbGJhY2suXG4gICAqIEBwYXJhbSB7c3RyaW5nfSByZWFzb24gQ2FuIGJlOiBgXCJlc2NhcGVLZXlEb3duXCJgLCBgXCJiYWNrZHJvcENsaWNrXCJgLlxuICAgKi9cbiAgb25DbG9zZTogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBjb21wb25lbnQgaXMgc2hvd24uXG4gICAqL1xuICBvcGVuOiBQcm9wVHlwZXMuYm9vbC5pc1JlcXVpcmVkLFxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIHRvIHJlbmRlciB0aGUgYm9keSBvZiB0aGUgZGlhbG9nLlxuICAgKiBAZGVmYXVsdCBQYXBlclxuICAgKi9cbiAgUGFwZXJDb21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcbiAgLyoqXG4gICAqIFByb3BzIGFwcGxpZWQgdG8gdGhlIFtgUGFwZXJgXSgvbWF0ZXJpYWwtdWkvYXBpL3BhcGVyLykgZWxlbWVudC5cbiAgICogQGRlZmF1bHQge31cbiAgICovXG4gIFBhcGVyUHJvcHM6IFByb3BUeXBlcy5vYmplY3QsXG4gIC8qKlxuICAgKiBEZXRlcm1pbmUgdGhlIGNvbnRhaW5lciBmb3Igc2Nyb2xsaW5nIHRoZSBkaWFsb2cuXG4gICAqIEBkZWZhdWx0ICdwYXBlcidcbiAgICovXG4gIHNjcm9sbDogUHJvcFR5cGVzLm9uZU9mKFsnYm9keScsICdwYXBlciddKSxcbiAgLyoqXG4gICAqIFRoZSBzeXN0ZW0gcHJvcCB0aGF0IGFsbG93cyBkZWZpbmluZyBzeXN0ZW0gb3ZlcnJpZGVzIGFzIHdlbGwgYXMgYWRkaXRpb25hbCBDU1Mgc3R5bGVzLlxuICAgKi9cbiAgc3g6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuYm9vbF0pKSwgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKSxcbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHRyYW5zaXRpb24uXG4gICAqIFtGb2xsb3cgdGhpcyBndWlkZV0oL21hdGVyaWFsLXVpL3RyYW5zaXRpb25zLyN0cmFuc2l0aW9uY29tcG9uZW50LXByb3ApIHRvIGxlYXJuIG1vcmUgYWJvdXQgdGhlIHJlcXVpcmVtZW50cyBmb3IgdGhpcyBjb21wb25lbnQuXG4gICAqIEBkZWZhdWx0IEZhZGVcbiAgICovXG4gIFRyYW5zaXRpb25Db21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcbiAgLyoqXG4gICAqIFRoZSBkdXJhdGlvbiBmb3IgdGhlIHRyYW5zaXRpb24sIGluIG1pbGxpc2Vjb25kcy5cbiAgICogWW91IG1heSBzcGVjaWZ5IGEgc2luZ2xlIHRpbWVvdXQgZm9yIGFsbCB0cmFuc2l0aW9ucywgb3IgaW5kaXZpZHVhbGx5IHdpdGggYW4gb2JqZWN0LlxuICAgKiBAZGVmYXVsdCB7XG4gICAqICAgZW50ZXI6IHRoZW1lLnRyYW5zaXRpb25zLmR1cmF0aW9uLmVudGVyaW5nU2NyZWVuLFxuICAgKiAgIGV4aXQ6IHRoZW1lLnRyYW5zaXRpb25zLmR1cmF0aW9uLmxlYXZpbmdTY3JlZW4sXG4gICAqIH1cbiAgICovXG4gIHRyYW5zaXRpb25EdXJhdGlvbjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBhcHBlYXI6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgZW50ZXI6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgZXhpdDogUHJvcFR5cGVzLm51bWJlclxuICB9KV0pLFxuICAvKipcbiAgICogUHJvcHMgYXBwbGllZCB0byB0aGUgdHJhbnNpdGlvbiBlbGVtZW50LlxuICAgKiBCeSBkZWZhdWx0LCB0aGUgZWxlbWVudCBpcyBiYXNlZCBvbiB0aGlzIFtgVHJhbnNpdGlvbmBdKGh0dHBzOi8vcmVhY3Rjb21tdW5pdHkub3JnL3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAvdHJhbnNpdGlvbi8pIGNvbXBvbmVudC5cbiAgICovXG4gIFRyYW5zaXRpb25Qcm9wczogUHJvcFR5cGVzLm9iamVjdFxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IERpYWxvZzsiLCJpbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzZXMnO1xuaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3MnO1xuZXhwb3J0IGZ1bmN0aW9uIGdldERpYWxvZ0FjdGlvbnNVdGlsaXR5Q2xhc3Moc2xvdCkge1xuICByZXR1cm4gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoJ011aURpYWxvZ0FjdGlvbnMnLCBzbG90KTtcbn1cbmNvbnN0IGRpYWxvZ0FjdGlvbnNDbGFzc2VzID0gZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcygnTXVpRGlhbG9nQWN0aW9ucycsIFsncm9vdCcsICdzcGFjaW5nJ10pO1xuZXhwb3J0IGRlZmF1bHQgZGlhbG9nQWN0aW9uc0NsYXNzZXM7IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiY2xhc3NOYW1lXCIsIFwiZGlzYWJsZVNwYWNpbmdcIl07XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgY29tcG9zZUNsYXNzZXMgZnJvbSAnQG11aS91dGlscy9jb21wb3NlQ2xhc3Nlcyc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJy4uL3N0eWxlcy9zdHlsZWQnO1xuaW1wb3J0IHsgdXNlRGVmYXVsdFByb3BzIH0gZnJvbSAnLi4vRGVmYXVsdFByb3BzUHJvdmlkZXInO1xuaW1wb3J0IHsgZ2V0RGlhbG9nQWN0aW9uc1V0aWxpdHlDbGFzcyB9IGZyb20gJy4vZGlhbG9nQWN0aW9uc0NsYXNzZXMnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmNvbnN0IHVzZVV0aWxpdHlDbGFzc2VzID0gb3duZXJTdGF0ZSA9PiB7XG4gIGNvbnN0IHtcbiAgICBjbGFzc2VzLFxuICAgIGRpc2FibGVTcGFjaW5nXG4gIH0gPSBvd25lclN0YXRlO1xuICBjb25zdCBzbG90cyA9IHtcbiAgICByb290OiBbJ3Jvb3QnLCAhZGlzYWJsZVNwYWNpbmcgJiYgJ3NwYWNpbmcnXVxuICB9O1xuICByZXR1cm4gY29tcG9zZUNsYXNzZXMoc2xvdHMsIGdldERpYWxvZ0FjdGlvbnNVdGlsaXR5Q2xhc3MsIGNsYXNzZXMpO1xufTtcbmNvbnN0IERpYWxvZ0FjdGlvbnNSb290ID0gc3R5bGVkKCdkaXYnLCB7XG4gIG5hbWU6ICdNdWlEaWFsb2dBY3Rpb25zJyxcbiAgc2xvdDogJ1Jvb3QnLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBvd25lclN0YXRlXG4gICAgfSA9IHByb3BzO1xuICAgIHJldHVybiBbc3R5bGVzLnJvb3QsICFvd25lclN0YXRlLmRpc2FibGVTcGFjaW5nICYmIHN0eWxlcy5zcGFjaW5nXTtcbiAgfVxufSkoKHtcbiAgb3duZXJTdGF0ZVxufSkgPT4gX2V4dGVuZHMoe1xuICBkaXNwbGF5OiAnZmxleCcsXG4gIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICBwYWRkaW5nOiA4LFxuICBqdXN0aWZ5Q29udGVudDogJ2ZsZXgtZW5kJyxcbiAgZmxleDogJzAgMCBhdXRvJ1xufSwgIW93bmVyU3RhdGUuZGlzYWJsZVNwYWNpbmcgJiYge1xuICAnJiA+IDpub3Qoc3R5bGUpIH4gOm5vdChzdHlsZSknOiB7XG4gICAgbWFyZ2luTGVmdDogOFxuICB9XG59KSk7XG5jb25zdCBEaWFsb2dBY3Rpb25zID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gRGlhbG9nQWN0aW9ucyhpblByb3BzLCByZWYpIHtcbiAgY29uc3QgcHJvcHMgPSB1c2VEZWZhdWx0UHJvcHMoe1xuICAgIHByb3BzOiBpblByb3BzLFxuICAgIG5hbWU6ICdNdWlEaWFsb2dBY3Rpb25zJ1xuICB9KTtcbiAgY29uc3Qge1xuICAgICAgY2xhc3NOYW1lLFxuICAgICAgZGlzYWJsZVNwYWNpbmcgPSBmYWxzZVxuICAgIH0gPSBwcm9wcyxcbiAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQpO1xuICBjb25zdCBvd25lclN0YXRlID0gX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgZGlzYWJsZVNwYWNpbmdcbiAgfSk7XG4gIGNvbnN0IGNsYXNzZXMgPSB1c2VVdGlsaXR5Q2xhc3Nlcyhvd25lclN0YXRlKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KERpYWxvZ0FjdGlvbnNSb290LCBfZXh0ZW5kcyh7XG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lKSxcbiAgICBvd25lclN0YXRlOiBvd25lclN0YXRlLFxuICAgIHJlZjogcmVmXG4gIH0sIG90aGVyKSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IERpYWxvZ0FjdGlvbnMucHJvcFR5cGVzIC8qIHJlbW92ZS1wcm9wdHlwZXMgKi8gPSB7XG4gIC8vIOKUjOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgCBXYXJuaW5nIOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUkFxuICAvLyDilIIgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zLiDilIJcbiAgLy8g4pSCICAgIFRvIHVwZGF0ZSB0aGVtLCBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBgcG5wbSBwcm9wdHlwZXNgLiAgICAg4pSCXG4gIC8vIOKUlOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUmFxuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBhY3Rpb25zIGRvIG5vdCBoYXZlIGFkZGl0aW9uYWwgbWFyZ2luLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZGlzYWJsZVNwYWNpbmc6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogVGhlIHN5c3RlbSBwcm9wIHRoYXQgYWxsb3dzIGRlZmluaW5nIHN5c3RlbSBvdmVycmlkZXMgYXMgd2VsbCBhcyBhZGRpdGlvbmFsIENTUyBzdHlsZXMuXG4gICAqL1xuICBzeDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5ib29sXSkpLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgRGlhbG9nQWN0aW9uczsiLCJpbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzZXMnO1xuaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3MnO1xuZXhwb3J0IGZ1bmN0aW9uIGdldERpYWxvZ0NvbnRlbnRVdGlsaXR5Q2xhc3Moc2xvdCkge1xuICByZXR1cm4gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoJ011aURpYWxvZ0NvbnRlbnQnLCBzbG90KTtcbn1cbmNvbnN0IGRpYWxvZ0NvbnRlbnRDbGFzc2VzID0gZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcygnTXVpRGlhbG9nQ29udGVudCcsIFsncm9vdCcsICdkaXZpZGVycyddKTtcbmV4cG9ydCBkZWZhdWx0IGRpYWxvZ0NvbnRlbnRDbGFzc2VzOyIsImltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3Nlcyc7XG5pbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3MgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzcyc7XG5leHBvcnQgZnVuY3Rpb24gZ2V0RGlhbG9nVGl0bGVVdGlsaXR5Q2xhc3Moc2xvdCkge1xuICByZXR1cm4gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoJ011aURpYWxvZ1RpdGxlJywgc2xvdCk7XG59XG5jb25zdCBkaWFsb2dUaXRsZUNsYXNzZXMgPSBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzKCdNdWlEaWFsb2dUaXRsZScsIFsncm9vdCddKTtcbmV4cG9ydCBkZWZhdWx0IGRpYWxvZ1RpdGxlQ2xhc3NlczsiLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJjbGFzc05hbWVcIiwgXCJkaXZpZGVyc1wiXTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCBjb21wb3NlQ2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2NvbXBvc2VDbGFzc2VzJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnLi4vc3R5bGVzL3N0eWxlZCc7XG5pbXBvcnQgeyB1c2VEZWZhdWx0UHJvcHMgfSBmcm9tICcuLi9EZWZhdWx0UHJvcHNQcm92aWRlcic7XG5pbXBvcnQgeyBnZXREaWFsb2dDb250ZW50VXRpbGl0eUNsYXNzIH0gZnJvbSAnLi9kaWFsb2dDb250ZW50Q2xhc3Nlcyc7XG5pbXBvcnQgZGlhbG9nVGl0bGVDbGFzc2VzIGZyb20gJy4uL0RpYWxvZ1RpdGxlL2RpYWxvZ1RpdGxlQ2xhc3Nlcyc7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuY29uc3QgdXNlVXRpbGl0eUNsYXNzZXMgPSBvd25lclN0YXRlID0+IHtcbiAgY29uc3Qge1xuICAgIGNsYXNzZXMsXG4gICAgZGl2aWRlcnNcbiAgfSA9IG93bmVyU3RhdGU7XG4gIGNvbnN0IHNsb3RzID0ge1xuICAgIHJvb3Q6IFsncm9vdCcsIGRpdmlkZXJzICYmICdkaXZpZGVycyddXG4gIH07XG4gIHJldHVybiBjb21wb3NlQ2xhc3NlcyhzbG90cywgZ2V0RGlhbG9nQ29udGVudFV0aWxpdHlDbGFzcywgY2xhc3Nlcyk7XG59O1xuY29uc3QgRGlhbG9nQ29udGVudFJvb3QgPSBzdHlsZWQoJ2RpdicsIHtcbiAgbmFtZTogJ011aURpYWxvZ0NvbnRlbnQnLFxuICBzbG90OiAnUm9vdCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9ID0gcHJvcHM7XG4gICAgcmV0dXJuIFtzdHlsZXMucm9vdCwgb3duZXJTdGF0ZS5kaXZpZGVycyAmJiBzdHlsZXMuZGl2aWRlcnNdO1xuICB9XG59KSgoe1xuICB0aGVtZSxcbiAgb3duZXJTdGF0ZVxufSkgPT4gX2V4dGVuZHMoe1xuICBmbGV4OiAnMSAxIGF1dG8nLFxuICAvLyBBZGQgaU9TIG1vbWVudHVtIHNjcm9sbGluZyBmb3IgaU9TIDwgMTMuMFxuICBXZWJraXRPdmVyZmxvd1Njcm9sbGluZzogJ3RvdWNoJyxcbiAgb3ZlcmZsb3dZOiAnYXV0bycsXG4gIHBhZGRpbmc6ICcyMHB4IDI0cHgnXG59LCBvd25lclN0YXRlLmRpdmlkZXJzID8ge1xuICBwYWRkaW5nOiAnMTZweCAyNHB4JyxcbiAgYm9yZGVyVG9wOiBgMXB4IHNvbGlkICR7KHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGUuZGl2aWRlcn1gLFxuICBib3JkZXJCb3R0b206IGAxcHggc29saWQgJHsodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZS5kaXZpZGVyfWBcbn0gOiB7XG4gIFtgLiR7ZGlhbG9nVGl0bGVDbGFzc2VzLnJvb3R9ICsgJmBdOiB7XG4gICAgcGFkZGluZ1RvcDogMFxuICB9XG59KSk7XG5jb25zdCBEaWFsb2dDb250ZW50ID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gRGlhbG9nQ29udGVudChpblByb3BzLCByZWYpIHtcbiAgY29uc3QgcHJvcHMgPSB1c2VEZWZhdWx0UHJvcHMoe1xuICAgIHByb3BzOiBpblByb3BzLFxuICAgIG5hbWU6ICdNdWlEaWFsb2dDb250ZW50J1xuICB9KTtcbiAgY29uc3Qge1xuICAgICAgY2xhc3NOYW1lLFxuICAgICAgZGl2aWRlcnMgPSBmYWxzZVxuICAgIH0gPSBwcm9wcyxcbiAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQpO1xuICBjb25zdCBvd25lclN0YXRlID0gX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgZGl2aWRlcnNcbiAgfSk7XG4gIGNvbnN0IGNsYXNzZXMgPSB1c2VVdGlsaXR5Q2xhc3Nlcyhvd25lclN0YXRlKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KERpYWxvZ0NvbnRlbnRSb290LCBfZXh0ZW5kcyh7XG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lKSxcbiAgICBvd25lclN0YXRlOiBvd25lclN0YXRlLFxuICAgIHJlZjogcmVmXG4gIH0sIG90aGVyKSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IERpYWxvZ0NvbnRlbnQucHJvcFR5cGVzIC8qIHJlbW92ZS1wcm9wdHlwZXMgKi8gPSB7XG4gIC8vIOKUjOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgCBXYXJuaW5nIOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUkFxuICAvLyDilIIgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zLiDilIJcbiAgLy8g4pSCICAgIFRvIHVwZGF0ZSB0aGVtLCBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBgcG5wbSBwcm9wdHlwZXNgLiAgICAg4pSCXG4gIC8vIOKUlOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUmFxuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBEaXNwbGF5IHRoZSB0b3AgYW5kIGJvdHRvbSBkaXZpZGVycy5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRpdmlkZXJzOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIFRoZSBzeXN0ZW0gcHJvcCB0aGF0IGFsbG93cyBkZWZpbmluZyBzeXN0ZW0gb3ZlcnJpZGVzIGFzIHdlbGwgYXMgYWRkaXRpb25hbCBDU1Mgc3R5bGVzLlxuICAgKi9cbiAgc3g6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuYm9vbF0pKSwgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IERpYWxvZ0NvbnRlbnQ7IiwiaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzc2VzJztcbmltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzJztcbmV4cG9ydCBmdW5jdGlvbiBnZXREaWFsb2dDb250ZW50VGV4dFV0aWxpdHlDbGFzcyhzbG90KSB7XG4gIHJldHVybiBnZW5lcmF0ZVV0aWxpdHlDbGFzcygnTXVpRGlhbG9nQ29udGVudFRleHQnLCBzbG90KTtcbn1cbmNvbnN0IGRpYWxvZ0NvbnRlbnRUZXh0Q2xhc3NlcyA9IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMoJ011aURpYWxvZ0NvbnRlbnRUZXh0JywgWydyb290J10pO1xuZXhwb3J0IGRlZmF1bHQgZGlhbG9nQ29udGVudFRleHRDbGFzc2VzOyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImNoaWxkcmVuXCIsIFwiY2xhc3NOYW1lXCJdO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IGNvbXBvc2VDbGFzc2VzIGZyb20gJ0BtdWkvdXRpbHMvY29tcG9zZUNsYXNzZXMnO1xuaW1wb3J0IHN0eWxlZCwgeyByb290U2hvdWxkRm9yd2FyZFByb3AgfSBmcm9tICcuLi9zdHlsZXMvc3R5bGVkJztcbmltcG9ydCB7IHVzZURlZmF1bHRQcm9wcyB9IGZyb20gJy4uL0RlZmF1bHRQcm9wc1Byb3ZpZGVyJztcbmltcG9ydCBUeXBvZ3JhcGh5IGZyb20gJy4uL1R5cG9ncmFwaHknO1xuaW1wb3J0IHsgZ2V0RGlhbG9nQ29udGVudFRleHRVdGlsaXR5Q2xhc3MgfSBmcm9tICcuL2RpYWxvZ0NvbnRlbnRUZXh0Q2xhc3Nlcyc7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuY29uc3QgdXNlVXRpbGl0eUNsYXNzZXMgPSBvd25lclN0YXRlID0+IHtcbiAgY29uc3Qge1xuICAgIGNsYXNzZXNcbiAgfSA9IG93bmVyU3RhdGU7XG4gIGNvbnN0IHNsb3RzID0ge1xuICAgIHJvb3Q6IFsncm9vdCddXG4gIH07XG4gIGNvbnN0IGNvbXBvc2VkQ2xhc3NlcyA9IGNvbXBvc2VDbGFzc2VzKHNsb3RzLCBnZXREaWFsb2dDb250ZW50VGV4dFV0aWxpdHlDbGFzcywgY2xhc3Nlcyk7XG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgY2xhc3NlcywgY29tcG9zZWRDbGFzc2VzKTtcbn07XG5jb25zdCBEaWFsb2dDb250ZW50VGV4dFJvb3QgPSBzdHlsZWQoVHlwb2dyYXBoeSwge1xuICBzaG91bGRGb3J3YXJkUHJvcDogcHJvcCA9PiByb290U2hvdWxkRm9yd2FyZFByb3AocHJvcCkgfHwgcHJvcCA9PT0gJ2NsYXNzZXMnLFxuICBuYW1lOiAnTXVpRGlhbG9nQ29udGVudFRleHQnLFxuICBzbG90OiAnUm9vdCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4gc3R5bGVzLnJvb3Rcbn0pKHt9KTtcbmNvbnN0IERpYWxvZ0NvbnRlbnRUZXh0ID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gRGlhbG9nQ29udGVudFRleHQoaW5Qcm9wcywgcmVmKSB7XG4gIGNvbnN0IHByb3BzID0gdXNlRGVmYXVsdFByb3BzKHtcbiAgICBwcm9wczogaW5Qcm9wcyxcbiAgICBuYW1lOiAnTXVpRGlhbG9nQ29udGVudFRleHQnXG4gIH0pO1xuICBjb25zdCB7XG4gICAgICBjbGFzc05hbWVcbiAgICB9ID0gcHJvcHMsXG4gICAgb3duZXJTdGF0ZSA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQpO1xuICBjb25zdCBjbGFzc2VzID0gdXNlVXRpbGl0eUNsYXNzZXMob3duZXJTdGF0ZSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeChEaWFsb2dDb250ZW50VGV4dFJvb3QsIF9leHRlbmRzKHtcbiAgICBjb21wb25lbnQ6IFwicFwiLFxuICAgIHZhcmlhbnQ6IFwiYm9keTFcIixcbiAgICBjb2xvcjogXCJ0ZXh0LnNlY29uZGFyeVwiLFxuICAgIHJlZjogcmVmLFxuICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGUsXG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lKVxuICB9LCBwcm9wcywge1xuICAgIGNsYXNzZXM6IGNsYXNzZXNcbiAgfSkpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBEaWFsb2dDb250ZW50VGV4dC5wcm9wVHlwZXMgLyogcmVtb3ZlLXByb3B0eXBlcyAqLyA9IHtcbiAgLy8g4pSM4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAIFdhcm5pbmcg4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSQXG4gIC8vIOKUgiBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMuIOKUglxuICAvLyDilIIgICAgVG8gdXBkYXRlIHRoZW0sIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIGBwbnBtIHByb3B0eXBlc2AuICAgICDilIJcbiAgLy8g4pSU4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSYXG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIFRoZSBzeXN0ZW0gcHJvcCB0aGF0IGFsbG93cyBkZWZpbmluZyBzeXN0ZW0gb3ZlcnJpZGVzIGFzIHdlbGwgYXMgYWRkaXRpb25hbCBDU1Mgc3R5bGVzLlxuICAgKi9cbiAgc3g6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuYm9vbF0pKSwgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IERpYWxvZ0NvbnRlbnRUZXh0OyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImNsYXNzTmFtZVwiLCBcImlkXCJdO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IGNvbXBvc2VDbGFzc2VzIGZyb20gJ0BtdWkvdXRpbHMvY29tcG9zZUNsYXNzZXMnO1xuaW1wb3J0IFR5cG9ncmFwaHkgZnJvbSAnLi4vVHlwb2dyYXBoeSc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJy4uL3N0eWxlcy9zdHlsZWQnO1xuaW1wb3J0IHsgdXNlRGVmYXVsdFByb3BzIH0gZnJvbSAnLi4vRGVmYXVsdFByb3BzUHJvdmlkZXInO1xuaW1wb3J0IHsgZ2V0RGlhbG9nVGl0bGVVdGlsaXR5Q2xhc3MgfSBmcm9tICcuL2RpYWxvZ1RpdGxlQ2xhc3Nlcyc7XG5pbXBvcnQgRGlhbG9nQ29udGV4dCBmcm9tICcuLi9EaWFsb2cvRGlhbG9nQ29udGV4dCc7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuY29uc3QgdXNlVXRpbGl0eUNsYXNzZXMgPSBvd25lclN0YXRlID0+IHtcbiAgY29uc3Qge1xuICAgIGNsYXNzZXNcbiAgfSA9IG93bmVyU3RhdGU7XG4gIGNvbnN0IHNsb3RzID0ge1xuICAgIHJvb3Q6IFsncm9vdCddXG4gIH07XG4gIHJldHVybiBjb21wb3NlQ2xhc3NlcyhzbG90cywgZ2V0RGlhbG9nVGl0bGVVdGlsaXR5Q2xhc3MsIGNsYXNzZXMpO1xufTtcbmNvbnN0IERpYWxvZ1RpdGxlUm9vdCA9IHN0eWxlZChUeXBvZ3JhcGh5LCB7XG4gIG5hbWU6ICdNdWlEaWFsb2dUaXRsZScsXG4gIHNsb3Q6ICdSb290JyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiBzdHlsZXMucm9vdFxufSkoe1xuICBwYWRkaW5nOiAnMTZweCAyNHB4JyxcbiAgZmxleDogJzAgMCBhdXRvJ1xufSk7XG5jb25zdCBEaWFsb2dUaXRsZSA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIERpYWxvZ1RpdGxlKGluUHJvcHMsIHJlZikge1xuICBjb25zdCBwcm9wcyA9IHVzZURlZmF1bHRQcm9wcyh7XG4gICAgcHJvcHM6IGluUHJvcHMsXG4gICAgbmFtZTogJ011aURpYWxvZ1RpdGxlJ1xuICB9KTtcbiAgY29uc3Qge1xuICAgICAgY2xhc3NOYW1lLFxuICAgICAgaWQ6IGlkUHJvcFxuICAgIH0gPSBwcm9wcyxcbiAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQpO1xuICBjb25zdCBvd25lclN0YXRlID0gcHJvcHM7XG4gIGNvbnN0IGNsYXNzZXMgPSB1c2VVdGlsaXR5Q2xhc3Nlcyhvd25lclN0YXRlKTtcbiAgY29uc3Qge1xuICAgIHRpdGxlSWQgPSBpZFByb3BcbiAgfSA9IFJlYWN0LnVzZUNvbnRleHQoRGlhbG9nQ29udGV4dCk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeChEaWFsb2dUaXRsZVJvb3QsIF9leHRlbmRzKHtcbiAgICBjb21wb25lbnQ6IFwiaDJcIixcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWUpLFxuICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGUsXG4gICAgcmVmOiByZWYsXG4gICAgdmFyaWFudDogXCJoNlwiLFxuICAgIGlkOiBpZFByb3AgIT0gbnVsbCA/IGlkUHJvcCA6IHRpdGxlSWRcbiAgfSwgb3RoZXIpKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gRGlhbG9nVGl0bGUucHJvcFR5cGVzIC8qIHJlbW92ZS1wcm9wdHlwZXMgKi8gPSB7XG4gIC8vIOKUjOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgCBXYXJuaW5nIOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUkFxuICAvLyDilIIgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zLiDilIJcbiAgLy8g4pSCICAgIFRvIHVwZGF0ZSB0aGVtLCBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBgcG5wbSBwcm9wdHlwZXNgLiAgICAg4pSCXG4gIC8vIOKUlOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUmFxuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBpZDogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIFRoZSBzeXN0ZW0gcHJvcCB0aGF0IGFsbG93cyBkZWZpbmluZyBzeXN0ZW0gb3ZlcnJpZGVzIGFzIHdlbGwgYXMgYWRkaXRpb25hbCBDU1Mgc3R5bGVzLlxuICAgKi9cbiAgc3g6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuYm9vbF0pKSwgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IERpYWxvZ1RpdGxlOyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImFic29sdXRlXCIsIFwiY2hpbGRyZW5cIiwgXCJjbGFzc05hbWVcIiwgXCJjb21wb25lbnRcIiwgXCJmbGV4SXRlbVwiLCBcImxpZ2h0XCIsIFwib3JpZW50YXRpb25cIiwgXCJyb2xlXCIsIFwidGV4dEFsaWduXCIsIFwidmFyaWFudFwiXTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCBjb21wb3NlQ2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2NvbXBvc2VDbGFzc2VzJztcbmltcG9ydCB7IGFscGhhIH0gZnJvbSAnQG11aS9zeXN0ZW0vY29sb3JNYW5pcHVsYXRvcic7XG5pbXBvcnQgc3R5bGVkIGZyb20gJy4uL3N0eWxlcy9zdHlsZWQnO1xuaW1wb3J0IHsgdXNlRGVmYXVsdFByb3BzIH0gZnJvbSAnLi4vRGVmYXVsdFByb3BzUHJvdmlkZXInO1xuaW1wb3J0IHsgZ2V0RGl2aWRlclV0aWxpdHlDbGFzcyB9IGZyb20gJy4vZGl2aWRlckNsYXNzZXMnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmNvbnN0IHVzZVV0aWxpdHlDbGFzc2VzID0gb3duZXJTdGF0ZSA9PiB7XG4gIGNvbnN0IHtcbiAgICBhYnNvbHV0ZSxcbiAgICBjaGlsZHJlbixcbiAgICBjbGFzc2VzLFxuICAgIGZsZXhJdGVtLFxuICAgIGxpZ2h0LFxuICAgIG9yaWVudGF0aW9uLFxuICAgIHRleHRBbGlnbixcbiAgICB2YXJpYW50XG4gIH0gPSBvd25lclN0YXRlO1xuICBjb25zdCBzbG90cyA9IHtcbiAgICByb290OiBbJ3Jvb3QnLCBhYnNvbHV0ZSAmJiAnYWJzb2x1dGUnLCB2YXJpYW50LCBsaWdodCAmJiAnbGlnaHQnLCBvcmllbnRhdGlvbiA9PT0gJ3ZlcnRpY2FsJyAmJiAndmVydGljYWwnLCBmbGV4SXRlbSAmJiAnZmxleEl0ZW0nLCBjaGlsZHJlbiAmJiAnd2l0aENoaWxkcmVuJywgY2hpbGRyZW4gJiYgb3JpZW50YXRpb24gPT09ICd2ZXJ0aWNhbCcgJiYgJ3dpdGhDaGlsZHJlblZlcnRpY2FsJywgdGV4dEFsaWduID09PSAncmlnaHQnICYmIG9yaWVudGF0aW9uICE9PSAndmVydGljYWwnICYmICd0ZXh0QWxpZ25SaWdodCcsIHRleHRBbGlnbiA9PT0gJ2xlZnQnICYmIG9yaWVudGF0aW9uICE9PSAndmVydGljYWwnICYmICd0ZXh0QWxpZ25MZWZ0J10sXG4gICAgd3JhcHBlcjogWyd3cmFwcGVyJywgb3JpZW50YXRpb24gPT09ICd2ZXJ0aWNhbCcgJiYgJ3dyYXBwZXJWZXJ0aWNhbCddXG4gIH07XG4gIHJldHVybiBjb21wb3NlQ2xhc3NlcyhzbG90cywgZ2V0RGl2aWRlclV0aWxpdHlDbGFzcywgY2xhc3Nlcyk7XG59O1xuY29uc3QgRGl2aWRlclJvb3QgPSBzdHlsZWQoJ2RpdicsIHtcbiAgbmFtZTogJ011aURpdmlkZXInLFxuICBzbG90OiAnUm9vdCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9ID0gcHJvcHM7XG4gICAgcmV0dXJuIFtzdHlsZXMucm9vdCwgb3duZXJTdGF0ZS5hYnNvbHV0ZSAmJiBzdHlsZXMuYWJzb2x1dGUsIHN0eWxlc1tvd25lclN0YXRlLnZhcmlhbnRdLCBvd25lclN0YXRlLmxpZ2h0ICYmIHN0eWxlcy5saWdodCwgb3duZXJTdGF0ZS5vcmllbnRhdGlvbiA9PT0gJ3ZlcnRpY2FsJyAmJiBzdHlsZXMudmVydGljYWwsIG93bmVyU3RhdGUuZmxleEl0ZW0gJiYgc3R5bGVzLmZsZXhJdGVtLCBvd25lclN0YXRlLmNoaWxkcmVuICYmIHN0eWxlcy53aXRoQ2hpbGRyZW4sIG93bmVyU3RhdGUuY2hpbGRyZW4gJiYgb3duZXJTdGF0ZS5vcmllbnRhdGlvbiA9PT0gJ3ZlcnRpY2FsJyAmJiBzdHlsZXMud2l0aENoaWxkcmVuVmVydGljYWwsIG93bmVyU3RhdGUudGV4dEFsaWduID09PSAncmlnaHQnICYmIG93bmVyU3RhdGUub3JpZW50YXRpb24gIT09ICd2ZXJ0aWNhbCcgJiYgc3R5bGVzLnRleHRBbGlnblJpZ2h0LCBvd25lclN0YXRlLnRleHRBbGlnbiA9PT0gJ2xlZnQnICYmIG93bmVyU3RhdGUub3JpZW50YXRpb24gIT09ICd2ZXJ0aWNhbCcgJiYgc3R5bGVzLnRleHRBbGlnbkxlZnRdO1xuICB9XG59KSgoe1xuICB0aGVtZSxcbiAgb3duZXJTdGF0ZVxufSkgPT4gX2V4dGVuZHMoe1xuICBtYXJnaW46IDAsXG4gIC8vIFJlc2V0IGJyb3dzZXIgZGVmYXVsdCBzdHlsZS5cbiAgZmxleFNocmluazogMCxcbiAgYm9yZGVyV2lkdGg6IDAsXG4gIGJvcmRlclN0eWxlOiAnc29saWQnLFxuICBib3JkZXJDb2xvcjogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGUuZGl2aWRlcixcbiAgYm9yZGVyQm90dG9tV2lkdGg6ICd0aGluJ1xufSwgb3duZXJTdGF0ZS5hYnNvbHV0ZSAmJiB7XG4gIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICBib3R0b206IDAsXG4gIGxlZnQ6IDAsXG4gIHdpZHRoOiAnMTAwJSdcbn0sIG93bmVyU3RhdGUubGlnaHQgJiYge1xuICBib3JkZXJDb2xvcjogdGhlbWUudmFycyA/IGByZ2JhKCR7dGhlbWUudmFycy5wYWxldHRlLmRpdmlkZXJDaGFubmVsfSAvIDAuMDgpYCA6IGFscGhhKHRoZW1lLnBhbGV0dGUuZGl2aWRlciwgMC4wOClcbn0sIG93bmVyU3RhdGUudmFyaWFudCA9PT0gJ2luc2V0JyAmJiB7XG4gIG1hcmdpbkxlZnQ6IDcyXG59LCBvd25lclN0YXRlLnZhcmlhbnQgPT09ICdtaWRkbGUnICYmIG93bmVyU3RhdGUub3JpZW50YXRpb24gPT09ICdob3Jpem9udGFsJyAmJiB7XG4gIG1hcmdpbkxlZnQ6IHRoZW1lLnNwYWNpbmcoMiksXG4gIG1hcmdpblJpZ2h0OiB0aGVtZS5zcGFjaW5nKDIpXG59LCBvd25lclN0YXRlLnZhcmlhbnQgPT09ICdtaWRkbGUnICYmIG93bmVyU3RhdGUub3JpZW50YXRpb24gPT09ICd2ZXJ0aWNhbCcgJiYge1xuICBtYXJnaW5Ub3A6IHRoZW1lLnNwYWNpbmcoMSksXG4gIG1hcmdpbkJvdHRvbTogdGhlbWUuc3BhY2luZygxKVxufSwgb3duZXJTdGF0ZS5vcmllbnRhdGlvbiA9PT0gJ3ZlcnRpY2FsJyAmJiB7XG4gIGhlaWdodDogJzEwMCUnLFxuICBib3JkZXJCb3R0b21XaWR0aDogMCxcbiAgYm9yZGVyUmlnaHRXaWR0aDogJ3RoaW4nXG59LCBvd25lclN0YXRlLmZsZXhJdGVtICYmIHtcbiAgYWxpZ25TZWxmOiAnc3RyZXRjaCcsXG4gIGhlaWdodDogJ2F1dG8nXG59KSwgKHtcbiAgb3duZXJTdGF0ZVxufSkgPT4gX2V4dGVuZHMoe30sIG93bmVyU3RhdGUuY2hpbGRyZW4gJiYge1xuICBkaXNwbGF5OiAnZmxleCcsXG4gIHdoaXRlU3BhY2U6ICdub3dyYXAnLFxuICB0ZXh0QWxpZ246ICdjZW50ZXInLFxuICBib3JkZXI6IDAsXG4gICcmOjpiZWZvcmUsICY6OmFmdGVyJzoge1xuICAgIGNvbnRlbnQ6ICdcIlwiJyxcbiAgICBhbGlnblNlbGY6ICdjZW50ZXInXG4gIH1cbn0pLCAoe1xuICB0aGVtZSxcbiAgb3duZXJTdGF0ZVxufSkgPT4gX2V4dGVuZHMoe30sIG93bmVyU3RhdGUuY2hpbGRyZW4gJiYgb3duZXJTdGF0ZS5vcmllbnRhdGlvbiAhPT0gJ3ZlcnRpY2FsJyAmJiB7XG4gICcmOjpiZWZvcmUsICY6OmFmdGVyJzoge1xuICAgIHdpZHRoOiAnMTAwJScsXG4gICAgYm9yZGVyVG9wOiBgdGhpbiBzb2xpZCAkeyh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlLmRpdmlkZXJ9YFxuICB9XG59KSwgKHtcbiAgdGhlbWUsXG4gIG93bmVyU3RhdGVcbn0pID0+IF9leHRlbmRzKHt9LCBvd25lclN0YXRlLmNoaWxkcmVuICYmIG93bmVyU3RhdGUub3JpZW50YXRpb24gPT09ICd2ZXJ0aWNhbCcgJiYge1xuICBmbGV4RGlyZWN0aW9uOiAnY29sdW1uJyxcbiAgJyY6OmJlZm9yZSwgJjo6YWZ0ZXInOiB7XG4gICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgYm9yZGVyTGVmdDogYHRoaW4gc29saWQgJHsodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZS5kaXZpZGVyfWBcbiAgfVxufSksICh7XG4gIG93bmVyU3RhdGVcbn0pID0+IF9leHRlbmRzKHt9LCBvd25lclN0YXRlLnRleHRBbGlnbiA9PT0gJ3JpZ2h0JyAmJiBvd25lclN0YXRlLm9yaWVudGF0aW9uICE9PSAndmVydGljYWwnICYmIHtcbiAgJyY6OmJlZm9yZSc6IHtcbiAgICB3aWR0aDogJzkwJSdcbiAgfSxcbiAgJyY6OmFmdGVyJzoge1xuICAgIHdpZHRoOiAnMTAlJ1xuICB9XG59LCBvd25lclN0YXRlLnRleHRBbGlnbiA9PT0gJ2xlZnQnICYmIG93bmVyU3RhdGUub3JpZW50YXRpb24gIT09ICd2ZXJ0aWNhbCcgJiYge1xuICAnJjo6YmVmb3JlJzoge1xuICAgIHdpZHRoOiAnMTAlJ1xuICB9LFxuICAnJjo6YWZ0ZXInOiB7XG4gICAgd2lkdGg6ICc5MCUnXG4gIH1cbn0pKTtcbmNvbnN0IERpdmlkZXJXcmFwcGVyID0gc3R5bGVkKCdzcGFuJywge1xuICBuYW1lOiAnTXVpRGl2aWRlcicsXG4gIHNsb3Q6ICdXcmFwcGVyJyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgb3duZXJTdGF0ZVxuICAgIH0gPSBwcm9wcztcbiAgICByZXR1cm4gW3N0eWxlcy53cmFwcGVyLCBvd25lclN0YXRlLm9yaWVudGF0aW9uID09PSAndmVydGljYWwnICYmIHN0eWxlcy53cmFwcGVyVmVydGljYWxdO1xuICB9XG59KSgoe1xuICB0aGVtZSxcbiAgb3duZXJTdGF0ZVxufSkgPT4gX2V4dGVuZHMoe1xuICBkaXNwbGF5OiAnaW5saW5lLWJsb2NrJyxcbiAgcGFkZGluZ0xlZnQ6IGBjYWxjKCR7dGhlbWUuc3BhY2luZygxKX0gKiAxLjIpYCxcbiAgcGFkZGluZ1JpZ2h0OiBgY2FsYygke3RoZW1lLnNwYWNpbmcoMSl9ICogMS4yKWBcbn0sIG93bmVyU3RhdGUub3JpZW50YXRpb24gPT09ICd2ZXJ0aWNhbCcgJiYge1xuICBwYWRkaW5nVG9wOiBgY2FsYygke3RoZW1lLnNwYWNpbmcoMSl9ICogMS4yKWAsXG4gIHBhZGRpbmdCb3R0b206IGBjYWxjKCR7dGhlbWUuc3BhY2luZygxKX0gKiAxLjIpYFxufSkpO1xuY29uc3QgRGl2aWRlciA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIERpdmlkZXIoaW5Qcm9wcywgcmVmKSB7XG4gIGNvbnN0IHByb3BzID0gdXNlRGVmYXVsdFByb3BzKHtcbiAgICBwcm9wczogaW5Qcm9wcyxcbiAgICBuYW1lOiAnTXVpRGl2aWRlcidcbiAgfSk7XG4gIGNvbnN0IHtcbiAgICAgIGFic29sdXRlID0gZmFsc2UsXG4gICAgICBjaGlsZHJlbixcbiAgICAgIGNsYXNzTmFtZSxcbiAgICAgIGNvbXBvbmVudCA9IGNoaWxkcmVuID8gJ2RpdicgOiAnaHInLFxuICAgICAgZmxleEl0ZW0gPSBmYWxzZSxcbiAgICAgIGxpZ2h0ID0gZmFsc2UsXG4gICAgICBvcmllbnRhdGlvbiA9ICdob3Jpem9udGFsJyxcbiAgICAgIHJvbGUgPSBjb21wb25lbnQgIT09ICdocicgPyAnc2VwYXJhdG9yJyA6IHVuZGVmaW5lZCxcbiAgICAgIHRleHRBbGlnbiA9ICdjZW50ZXInLFxuICAgICAgdmFyaWFudCA9ICdmdWxsV2lkdGgnXG4gICAgfSA9IHByb3BzLFxuICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIF9leGNsdWRlZCk7XG4gIGNvbnN0IG93bmVyU3RhdGUgPSBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICBhYnNvbHV0ZSxcbiAgICBjb21wb25lbnQsXG4gICAgZmxleEl0ZW0sXG4gICAgbGlnaHQsXG4gICAgb3JpZW50YXRpb24sXG4gICAgcm9sZSxcbiAgICB0ZXh0QWxpZ24sXG4gICAgdmFyaWFudFxuICB9KTtcbiAgY29uc3QgY2xhc3NlcyA9IHVzZVV0aWxpdHlDbGFzc2VzKG93bmVyU3RhdGUpO1xuICByZXR1cm4gLyojX19QVVJFX18qL19qc3goRGl2aWRlclJvb3QsIF9leHRlbmRzKHtcbiAgICBhczogY29tcG9uZW50LFxuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSksXG4gICAgcm9sZTogcm9sZSxcbiAgICByZWY6IHJlZixcbiAgICBvd25lclN0YXRlOiBvd25lclN0YXRlXG4gIH0sIG90aGVyLCB7XG4gICAgY2hpbGRyZW46IGNoaWxkcmVuID8gLyojX19QVVJFX18qL19qc3goRGl2aWRlcldyYXBwZXIsIHtcbiAgICAgIGNsYXNzTmFtZTogY2xhc3Nlcy53cmFwcGVyLFxuICAgICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZSxcbiAgICAgIGNoaWxkcmVuOiBjaGlsZHJlblxuICAgIH0pIDogbnVsbFxuICB9KSk7XG59KTtcblxuLyoqXG4gKiBUaGUgZm9sbG93aW5nIGZsYWcgaXMgdXNlZCB0byBlbnN1cmUgdGhhdCB0aGlzIGNvbXBvbmVudCBpc24ndCB0YWJiYWJsZSBpLmUuXG4gKiBkb2VzIG5vdCBnZXQgaGlnaGxpZ2h0L2ZvY3VzIGluc2lkZSBvZiBNVUkgTGlzdC5cbiAqL1xuRGl2aWRlci5tdWlTa2lwTGlzdEhpZ2hsaWdodCA9IHRydWU7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBEaXZpZGVyLnByb3BUeXBlcyAvKiByZW1vdmUtcHJvcHR5cGVzICovID0ge1xuICAvLyDilIzilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIAgV2FybmluZyDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJBcbiAgLy8g4pSCIFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucy4g4pSCXG4gIC8vIOKUgiAgICBUbyB1cGRhdGUgdGhlbSwgZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gYHBucG0gcHJvcHR5cGVzYC4gICAgIOKUglxuICAvLyDilJTilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJhcbiAgLyoqXG4gICAqIEFic29sdXRlbHkgcG9zaXRpb24gdGhlIGVsZW1lbnQuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBhYnNvbHV0ZTogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHJvb3Qgbm9kZS5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIEhUTUwgZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuICAvKipcbiAgICogSWYgYHRydWVgLCBhIHZlcnRpY2FsIGRpdmlkZXIgd2lsbCBoYXZlIHRoZSBjb3JyZWN0IGhlaWdodCB3aGVuIHVzZWQgaW4gZmxleCBjb250YWluZXIuXG4gICAqIChCeSBkZWZhdWx0LCBhIHZlcnRpY2FsIGRpdmlkZXIgd2lsbCBoYXZlIGEgY2FsY3VsYXRlZCBoZWlnaHQgb2YgYDBweGAgaWYgaXQgaXMgdGhlIGNoaWxkIG9mIGEgZmxleCBjb250YWluZXIuKVxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZmxleEl0ZW06IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgZGl2aWRlciB3aWxsIGhhdmUgYSBsaWdodGVyIGNvbG9yLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKiBAZGVwcmVjYXRlZCBVc2UgPERpdmlkZXIgc3g9e3sgb3BhY2l0eTogMC42IH19IC8+IChvciBhbnkgb3BhY2l0eSBvciBjb2xvcikgaW5zdGVhZC4gW0hvdyB0byBtaWdyYXRlXSgvbWF0ZXJpYWwtdWkvbWlncmF0aW9uL21pZ3JhdGluZy1mcm9tLWRlcHJlY2F0ZWQtYXBpcy8pXG4gICAqL1xuICBsaWdodDogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IG9yaWVudGF0aW9uLlxuICAgKiBAZGVmYXVsdCAnaG9yaXpvbnRhbCdcbiAgICovXG4gIG9yaWVudGF0aW9uOiBQcm9wVHlwZXMub25lT2YoWydob3Jpem9udGFsJywgJ3ZlcnRpY2FsJ10pLFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgcm9sZTogUHJvcFR5cGVzIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi8uc3RyaW5nLFxuICAvKipcbiAgICogVGhlIHN5c3RlbSBwcm9wIHRoYXQgYWxsb3dzIGRlZmluaW5nIHN5c3RlbSBvdmVycmlkZXMgYXMgd2VsbCBhcyBhZGRpdGlvbmFsIENTUyBzdHlsZXMuXG4gICAqL1xuICBzeDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5ib29sXSkpLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pLFxuICAvKipcbiAgICogVGhlIHRleHQgYWxpZ25tZW50LlxuICAgKiBAZGVmYXVsdCAnY2VudGVyJ1xuICAgKi9cbiAgdGV4dEFsaWduOiBQcm9wVHlwZXMub25lT2YoWydjZW50ZXInLCAnbGVmdCcsICdyaWdodCddKSxcbiAgLyoqXG4gICAqIFRoZSB2YXJpYW50IHRvIHVzZS5cbiAgICogQGRlZmF1bHQgJ2Z1bGxXaWR0aCdcbiAgICovXG4gIHZhcmlhbnQ6IFByb3BUeXBlcyAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsnZnVsbFdpZHRoJywgJ2luc2V0JywgJ21pZGRsZSddKSwgUHJvcFR5cGVzLnN0cmluZ10pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgRGl2aWRlcjsiLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJhZGRFbmRMaXN0ZW5lclwiLCBcImFwcGVhclwiLCBcImNoaWxkcmVuXCIsIFwiY29udGFpbmVyXCIsIFwiZGlyZWN0aW9uXCIsIFwiZWFzaW5nXCIsIFwiaW5cIiwgXCJvbkVudGVyXCIsIFwib25FbnRlcmVkXCIsIFwib25FbnRlcmluZ1wiLCBcIm9uRXhpdFwiLCBcIm9uRXhpdGVkXCIsIFwib25FeGl0aW5nXCIsIFwic3R5bGVcIiwgXCJ0aW1lb3V0XCIsIFwiVHJhbnNpdGlvbkNvbXBvbmVudFwiXTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBUcmFuc2l0aW9uIH0gZnJvbSAncmVhY3QtdHJhbnNpdGlvbi1ncm91cCc7XG5pbXBvcnQgY2hhaW5Qcm9wVHlwZXMgZnJvbSAnQG11aS91dGlscy9jaGFpblByb3BUeXBlcyc7XG5pbXBvcnQgSFRNTEVsZW1lbnRUeXBlIGZyb20gJ0BtdWkvdXRpbHMvSFRNTEVsZW1lbnRUeXBlJztcbmltcG9ydCBlbGVtZW50QWNjZXB0aW5nUmVmIGZyb20gJ0BtdWkvdXRpbHMvZWxlbWVudEFjY2VwdGluZ1JlZic7XG5pbXBvcnQgZGVib3VuY2UgZnJvbSAnLi4vdXRpbHMvZGVib3VuY2UnO1xuaW1wb3J0IHVzZUZvcmtSZWYgZnJvbSAnLi4vdXRpbHMvdXNlRm9ya1JlZic7XG5pbXBvcnQgdXNlVGhlbWUgZnJvbSAnLi4vc3R5bGVzL3VzZVRoZW1lJztcbmltcG9ydCB7IHJlZmxvdywgZ2V0VHJhbnNpdGlvblByb3BzIH0gZnJvbSAnLi4vdHJhbnNpdGlvbnMvdXRpbHMnO1xuaW1wb3J0IHsgb3duZXJXaW5kb3cgfSBmcm9tICcuLi91dGlscyc7XG5cbi8vIFRyYW5zbGF0ZSB0aGUgbm9kZSBzbyBpdCBjYW4ndCBiZSBzZWVuIG9uIHRoZSBzY3JlZW4uXG4vLyBMYXRlciwgd2UncmUgZ29pbmcgdG8gdHJhbnNsYXRlIHRoZSBub2RlIGJhY2sgdG8gaXRzIG9yaWdpbmFsIGxvY2F0aW9uIHdpdGggYG5vbmVgLlxuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmZ1bmN0aW9uIGdldFRyYW5zbGF0ZVZhbHVlKGRpcmVjdGlvbiwgbm9kZSwgcmVzb2x2ZWRDb250YWluZXIpIHtcbiAgY29uc3QgcmVjdCA9IG5vZGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gIGNvbnN0IGNvbnRhaW5lclJlY3QgPSByZXNvbHZlZENvbnRhaW5lciAmJiByZXNvbHZlZENvbnRhaW5lci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgY29uc3QgY29udGFpbmVyV2luZG93ID0gb3duZXJXaW5kb3cobm9kZSk7XG4gIGxldCB0cmFuc2Zvcm07XG4gIGlmIChub2RlLmZha2VUcmFuc2Zvcm0pIHtcbiAgICB0cmFuc2Zvcm0gPSBub2RlLmZha2VUcmFuc2Zvcm07XG4gIH0gZWxzZSB7XG4gICAgY29uc3QgY29tcHV0ZWRTdHlsZSA9IGNvbnRhaW5lcldpbmRvdy5nZXRDb21wdXRlZFN0eWxlKG5vZGUpO1xuICAgIHRyYW5zZm9ybSA9IGNvbXB1dGVkU3R5bGUuZ2V0UHJvcGVydHlWYWx1ZSgnLXdlYmtpdC10cmFuc2Zvcm0nKSB8fCBjb21wdXRlZFN0eWxlLmdldFByb3BlcnR5VmFsdWUoJ3RyYW5zZm9ybScpO1xuICB9XG4gIGxldCBvZmZzZXRYID0gMDtcbiAgbGV0IG9mZnNldFkgPSAwO1xuICBpZiAodHJhbnNmb3JtICYmIHRyYW5zZm9ybSAhPT0gJ25vbmUnICYmIHR5cGVvZiB0cmFuc2Zvcm0gPT09ICdzdHJpbmcnKSB7XG4gICAgY29uc3QgdHJhbnNmb3JtVmFsdWVzID0gdHJhbnNmb3JtLnNwbGl0KCcoJylbMV0uc3BsaXQoJyknKVswXS5zcGxpdCgnLCcpO1xuICAgIG9mZnNldFggPSBwYXJzZUludCh0cmFuc2Zvcm1WYWx1ZXNbNF0sIDEwKTtcbiAgICBvZmZzZXRZID0gcGFyc2VJbnQodHJhbnNmb3JtVmFsdWVzWzVdLCAxMCk7XG4gIH1cbiAgaWYgKGRpcmVjdGlvbiA9PT0gJ2xlZnQnKSB7XG4gICAgaWYgKGNvbnRhaW5lclJlY3QpIHtcbiAgICAgIHJldHVybiBgdHJhbnNsYXRlWCgke2NvbnRhaW5lclJlY3QucmlnaHQgKyBvZmZzZXRYIC0gcmVjdC5sZWZ0fXB4KWA7XG4gICAgfVxuICAgIHJldHVybiBgdHJhbnNsYXRlWCgke2NvbnRhaW5lcldpbmRvdy5pbm5lcldpZHRoICsgb2Zmc2V0WCAtIHJlY3QubGVmdH1weClgO1xuICB9XG4gIGlmIChkaXJlY3Rpb24gPT09ICdyaWdodCcpIHtcbiAgICBpZiAoY29udGFpbmVyUmVjdCkge1xuICAgICAgcmV0dXJuIGB0cmFuc2xhdGVYKC0ke3JlY3QucmlnaHQgLSBjb250YWluZXJSZWN0LmxlZnQgLSBvZmZzZXRYfXB4KWA7XG4gICAgfVxuICAgIHJldHVybiBgdHJhbnNsYXRlWCgtJHtyZWN0LmxlZnQgKyByZWN0LndpZHRoIC0gb2Zmc2V0WH1weClgO1xuICB9XG4gIGlmIChkaXJlY3Rpb24gPT09ICd1cCcpIHtcbiAgICBpZiAoY29udGFpbmVyUmVjdCkge1xuICAgICAgcmV0dXJuIGB0cmFuc2xhdGVZKCR7Y29udGFpbmVyUmVjdC5ib3R0b20gKyBvZmZzZXRZIC0gcmVjdC50b3B9cHgpYDtcbiAgICB9XG4gICAgcmV0dXJuIGB0cmFuc2xhdGVZKCR7Y29udGFpbmVyV2luZG93LmlubmVySGVpZ2h0ICsgb2Zmc2V0WSAtIHJlY3QudG9wfXB4KWA7XG4gIH1cblxuICAvLyBkaXJlY3Rpb24gPT09ICdkb3duJ1xuICBpZiAoY29udGFpbmVyUmVjdCkge1xuICAgIHJldHVybiBgdHJhbnNsYXRlWSgtJHtyZWN0LnRvcCAtIGNvbnRhaW5lclJlY3QudG9wICsgcmVjdC5oZWlnaHQgLSBvZmZzZXRZfXB4KWA7XG4gIH1cbiAgcmV0dXJuIGB0cmFuc2xhdGVZKC0ke3JlY3QudG9wICsgcmVjdC5oZWlnaHQgLSBvZmZzZXRZfXB4KWA7XG59XG5mdW5jdGlvbiByZXNvbHZlQ29udGFpbmVyKGNvbnRhaW5lclByb3BQcm9wKSB7XG4gIHJldHVybiB0eXBlb2YgY29udGFpbmVyUHJvcFByb3AgPT09ICdmdW5jdGlvbicgPyBjb250YWluZXJQcm9wUHJvcCgpIDogY29udGFpbmVyUHJvcFByb3A7XG59XG5leHBvcnQgZnVuY3Rpb24gc2V0VHJhbnNsYXRlVmFsdWUoZGlyZWN0aW9uLCBub2RlLCBjb250YWluZXJQcm9wKSB7XG4gIGNvbnN0IHJlc29sdmVkQ29udGFpbmVyID0gcmVzb2x2ZUNvbnRhaW5lcihjb250YWluZXJQcm9wKTtcbiAgY29uc3QgdHJhbnNmb3JtID0gZ2V0VHJhbnNsYXRlVmFsdWUoZGlyZWN0aW9uLCBub2RlLCByZXNvbHZlZENvbnRhaW5lcik7XG4gIGlmICh0cmFuc2Zvcm0pIHtcbiAgICBub2RlLnN0eWxlLndlYmtpdFRyYW5zZm9ybSA9IHRyYW5zZm9ybTtcbiAgICBub2RlLnN0eWxlLnRyYW5zZm9ybSA9IHRyYW5zZm9ybTtcbiAgfVxufVxuXG4vKipcbiAqIFRoZSBTbGlkZSB0cmFuc2l0aW9uIGlzIHVzZWQgYnkgdGhlIFtEcmF3ZXJdKC9tYXRlcmlhbC11aS9yZWFjdC1kcmF3ZXIvKSBjb21wb25lbnQuXG4gKiBJdCB1c2VzIFtyZWFjdC10cmFuc2l0aW9uLWdyb3VwXShodHRwczovL2dpdGh1Yi5jb20vcmVhY3Rqcy9yZWFjdC10cmFuc2l0aW9uLWdyb3VwKSBpbnRlcm5hbGx5LlxuICovXG5jb25zdCBTbGlkZSA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIFNsaWRlKHByb3BzLCByZWYpIHtcbiAgY29uc3QgdGhlbWUgPSB1c2VUaGVtZSgpO1xuICBjb25zdCBkZWZhdWx0RWFzaW5nID0ge1xuICAgIGVudGVyOiB0aGVtZS50cmFuc2l0aW9ucy5lYXNpbmcuZWFzZU91dCxcbiAgICBleGl0OiB0aGVtZS50cmFuc2l0aW9ucy5lYXNpbmcuc2hhcnBcbiAgfTtcbiAgY29uc3QgZGVmYXVsdFRpbWVvdXQgPSB7XG4gICAgZW50ZXI6IHRoZW1lLnRyYW5zaXRpb25zLmR1cmF0aW9uLmVudGVyaW5nU2NyZWVuLFxuICAgIGV4aXQ6IHRoZW1lLnRyYW5zaXRpb25zLmR1cmF0aW9uLmxlYXZpbmdTY3JlZW5cbiAgfTtcbiAgY29uc3Qge1xuICAgICAgYWRkRW5kTGlzdGVuZXIsXG4gICAgICBhcHBlYXIgPSB0cnVlLFxuICAgICAgY2hpbGRyZW4sXG4gICAgICBjb250YWluZXI6IGNvbnRhaW5lclByb3AsXG4gICAgICBkaXJlY3Rpb24gPSAnZG93bicsXG4gICAgICBlYXNpbmc6IGVhc2luZ1Byb3AgPSBkZWZhdWx0RWFzaW5nLFxuICAgICAgaW46IGluUHJvcCxcbiAgICAgIG9uRW50ZXIsXG4gICAgICBvbkVudGVyZWQsXG4gICAgICBvbkVudGVyaW5nLFxuICAgICAgb25FeGl0LFxuICAgICAgb25FeGl0ZWQsXG4gICAgICBvbkV4aXRpbmcsXG4gICAgICBzdHlsZSxcbiAgICAgIHRpbWVvdXQgPSBkZWZhdWx0VGltZW91dCxcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC9wcm9wLXR5cGVzXG4gICAgICBUcmFuc2l0aW9uQ29tcG9uZW50ID0gVHJhbnNpdGlvblxuICAgIH0gPSBwcm9wcyxcbiAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQpO1xuICBjb25zdCBjaGlsZHJlblJlZiA9IFJlYWN0LnVzZVJlZihudWxsKTtcbiAgY29uc3QgaGFuZGxlUmVmID0gdXNlRm9ya1JlZihjaGlsZHJlbi5yZWYsIGNoaWxkcmVuUmVmLCByZWYpO1xuICBjb25zdCBub3JtYWxpemVkVHJhbnNpdGlvbkNhbGxiYWNrID0gY2FsbGJhY2sgPT4gaXNBcHBlYXJpbmcgPT4ge1xuICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgLy8gb25FbnRlclh4eCBhbmQgb25FeGl0WHh4IGNhbGxiYWNrcyBoYXZlIGEgZGlmZmVyZW50IGFyZ3VtZW50cy5sZW5ndGggdmFsdWUuXG4gICAgICBpZiAoaXNBcHBlYXJpbmcgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBjYWxsYmFjayhjaGlsZHJlblJlZi5jdXJyZW50KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNhbGxiYWNrKGNoaWxkcmVuUmVmLmN1cnJlbnQsIGlzQXBwZWFyaW5nKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG4gIGNvbnN0IGhhbmRsZUVudGVyID0gbm9ybWFsaXplZFRyYW5zaXRpb25DYWxsYmFjaygobm9kZSwgaXNBcHBlYXJpbmcpID0+IHtcbiAgICBzZXRUcmFuc2xhdGVWYWx1ZShkaXJlY3Rpb24sIG5vZGUsIGNvbnRhaW5lclByb3ApO1xuICAgIHJlZmxvdyhub2RlKTtcbiAgICBpZiAob25FbnRlcikge1xuICAgICAgb25FbnRlcihub2RlLCBpc0FwcGVhcmluZyk7XG4gICAgfVxuICB9KTtcbiAgY29uc3QgaGFuZGxlRW50ZXJpbmcgPSBub3JtYWxpemVkVHJhbnNpdGlvbkNhbGxiYWNrKChub2RlLCBpc0FwcGVhcmluZykgPT4ge1xuICAgIGNvbnN0IHRyYW5zaXRpb25Qcm9wcyA9IGdldFRyYW5zaXRpb25Qcm9wcyh7XG4gICAgICB0aW1lb3V0LFxuICAgICAgc3R5bGUsXG4gICAgICBlYXNpbmc6IGVhc2luZ1Byb3BcbiAgICB9LCB7XG4gICAgICBtb2RlOiAnZW50ZXInXG4gICAgfSk7XG4gICAgbm9kZS5zdHlsZS53ZWJraXRUcmFuc2l0aW9uID0gdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCctd2Via2l0LXRyYW5zZm9ybScsIF9leHRlbmRzKHt9LCB0cmFuc2l0aW9uUHJvcHMpKTtcbiAgICBub2RlLnN0eWxlLnRyYW5zaXRpb24gPSB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoJ3RyYW5zZm9ybScsIF9leHRlbmRzKHt9LCB0cmFuc2l0aW9uUHJvcHMpKTtcbiAgICBub2RlLnN0eWxlLndlYmtpdFRyYW5zZm9ybSA9ICdub25lJztcbiAgICBub2RlLnN0eWxlLnRyYW5zZm9ybSA9ICdub25lJztcbiAgICBpZiAob25FbnRlcmluZykge1xuICAgICAgb25FbnRlcmluZyhub2RlLCBpc0FwcGVhcmluZyk7XG4gICAgfVxuICB9KTtcbiAgY29uc3QgaGFuZGxlRW50ZXJlZCA9IG5vcm1hbGl6ZWRUcmFuc2l0aW9uQ2FsbGJhY2sob25FbnRlcmVkKTtcbiAgY29uc3QgaGFuZGxlRXhpdGluZyA9IG5vcm1hbGl6ZWRUcmFuc2l0aW9uQ2FsbGJhY2sob25FeGl0aW5nKTtcbiAgY29uc3QgaGFuZGxlRXhpdCA9IG5vcm1hbGl6ZWRUcmFuc2l0aW9uQ2FsbGJhY2sobm9kZSA9PiB7XG4gICAgY29uc3QgdHJhbnNpdGlvblByb3BzID0gZ2V0VHJhbnNpdGlvblByb3BzKHtcbiAgICAgIHRpbWVvdXQsXG4gICAgICBzdHlsZSxcbiAgICAgIGVhc2luZzogZWFzaW5nUHJvcFxuICAgIH0sIHtcbiAgICAgIG1vZGU6ICdleGl0J1xuICAgIH0pO1xuICAgIG5vZGUuc3R5bGUud2Via2l0VHJhbnNpdGlvbiA9IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZSgnLXdlYmtpdC10cmFuc2Zvcm0nLCB0cmFuc2l0aW9uUHJvcHMpO1xuICAgIG5vZGUuc3R5bGUudHJhbnNpdGlvbiA9IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZSgndHJhbnNmb3JtJywgdHJhbnNpdGlvblByb3BzKTtcbiAgICBzZXRUcmFuc2xhdGVWYWx1ZShkaXJlY3Rpb24sIG5vZGUsIGNvbnRhaW5lclByb3ApO1xuICAgIGlmIChvbkV4aXQpIHtcbiAgICAgIG9uRXhpdChub2RlKTtcbiAgICB9XG4gIH0pO1xuICBjb25zdCBoYW5kbGVFeGl0ZWQgPSBub3JtYWxpemVkVHJhbnNpdGlvbkNhbGxiYWNrKG5vZGUgPT4ge1xuICAgIC8vIE5vIG5lZWQgZm9yIHRyYW5zaXRpb25zIHdoZW4gdGhlIGNvbXBvbmVudCBpcyBoaWRkZW5cbiAgICBub2RlLnN0eWxlLndlYmtpdFRyYW5zaXRpb24gPSAnJztcbiAgICBub2RlLnN0eWxlLnRyYW5zaXRpb24gPSAnJztcbiAgICBpZiAob25FeGl0ZWQpIHtcbiAgICAgIG9uRXhpdGVkKG5vZGUpO1xuICAgIH1cbiAgfSk7XG4gIGNvbnN0IGhhbmRsZUFkZEVuZExpc3RlbmVyID0gbmV4dCA9PiB7XG4gICAgaWYgKGFkZEVuZExpc3RlbmVyKSB7XG4gICAgICAvLyBPbGQgY2FsbCBzaWduYXR1cmUgYmVmb3JlIGByZWFjdC10cmFuc2l0aW9uLWdyb3VwYCBpbXBsZW1lbnRlZCBgbm9kZVJlZmBcbiAgICAgIGFkZEVuZExpc3RlbmVyKGNoaWxkcmVuUmVmLmN1cnJlbnQsIG5leHQpO1xuICAgIH1cbiAgfTtcbiAgY29uc3QgdXBkYXRlUG9zaXRpb24gPSBSZWFjdC51c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgaWYgKGNoaWxkcmVuUmVmLmN1cnJlbnQpIHtcbiAgICAgIHNldFRyYW5zbGF0ZVZhbHVlKGRpcmVjdGlvbiwgY2hpbGRyZW5SZWYuY3VycmVudCwgY29udGFpbmVyUHJvcCk7XG4gICAgfVxuICB9LCBbZGlyZWN0aW9uLCBjb250YWluZXJQcm9wXSk7XG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgLy8gU2tpcCBjb25maWd1cmF0aW9uIHdoZXJlIHRoZSBwb3NpdGlvbiBpcyBzY3JlZW4gc2l6ZSBpbnZhcmlhbnQuXG4gICAgaWYgKGluUHJvcCB8fCBkaXJlY3Rpb24gPT09ICdkb3duJyB8fCBkaXJlY3Rpb24gPT09ICdyaWdodCcpIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGNvbnN0IGhhbmRsZVJlc2l6ZSA9IGRlYm91bmNlKCgpID0+IHtcbiAgICAgIGlmIChjaGlsZHJlblJlZi5jdXJyZW50KSB7XG4gICAgICAgIHNldFRyYW5zbGF0ZVZhbHVlKGRpcmVjdGlvbiwgY2hpbGRyZW5SZWYuY3VycmVudCwgY29udGFpbmVyUHJvcCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgY29uc3QgY29udGFpbmVyV2luZG93ID0gb3duZXJXaW5kb3coY2hpbGRyZW5SZWYuY3VycmVudCk7XG4gICAgY29udGFpbmVyV2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIGhhbmRsZVJlc2l6ZSk7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIGhhbmRsZVJlc2l6ZS5jbGVhcigpO1xuICAgICAgY29udGFpbmVyV2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIGhhbmRsZVJlc2l6ZSk7XG4gICAgfTtcbiAgfSwgW2RpcmVjdGlvbiwgaW5Qcm9wLCBjb250YWluZXJQcm9wXSk7XG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKCFpblByb3ApIHtcbiAgICAgIC8vIFdlIG5lZWQgdG8gdXBkYXRlIHRoZSBwb3NpdGlvbiBvZiB0aGUgZHJhd2VyIHdoZW4gdGhlIGRpcmVjdGlvbiBjaGFuZ2UgYW5kXG4gICAgICAvLyB3aGVuIGl0J3MgaGlkZGVuLlxuICAgICAgdXBkYXRlUG9zaXRpb24oKTtcbiAgICB9XG4gIH0sIFtpblByb3AsIHVwZGF0ZVBvc2l0aW9uXSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeChUcmFuc2l0aW9uQ29tcG9uZW50LCBfZXh0ZW5kcyh7XG4gICAgbm9kZVJlZjogY2hpbGRyZW5SZWYsXG4gICAgb25FbnRlcjogaGFuZGxlRW50ZXIsXG4gICAgb25FbnRlcmVkOiBoYW5kbGVFbnRlcmVkLFxuICAgIG9uRW50ZXJpbmc6IGhhbmRsZUVudGVyaW5nLFxuICAgIG9uRXhpdDogaGFuZGxlRXhpdCxcbiAgICBvbkV4aXRlZDogaGFuZGxlRXhpdGVkLFxuICAgIG9uRXhpdGluZzogaGFuZGxlRXhpdGluZyxcbiAgICBhZGRFbmRMaXN0ZW5lcjogaGFuZGxlQWRkRW5kTGlzdGVuZXIsXG4gICAgYXBwZWFyOiBhcHBlYXIsXG4gICAgaW46IGluUHJvcCxcbiAgICB0aW1lb3V0OiB0aW1lb3V0XG4gIH0sIG90aGVyLCB7XG4gICAgY2hpbGRyZW46IChzdGF0ZSwgY2hpbGRQcm9wcykgPT4ge1xuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jbG9uZUVsZW1lbnQoY2hpbGRyZW4sIF9leHRlbmRzKHtcbiAgICAgICAgcmVmOiBoYW5kbGVSZWYsXG4gICAgICAgIHN0eWxlOiBfZXh0ZW5kcyh7XG4gICAgICAgICAgdmlzaWJpbGl0eTogc3RhdGUgPT09ICdleGl0ZWQnICYmICFpblByb3AgPyAnaGlkZGVuJyA6IHVuZGVmaW5lZFxuICAgICAgICB9LCBzdHlsZSwgY2hpbGRyZW4ucHJvcHMuc3R5bGUpXG4gICAgICB9LCBjaGlsZFByb3BzKSk7XG4gICAgfVxuICB9KSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFNsaWRlLnByb3BUeXBlcyAvKiByZW1vdmUtcHJvcHR5cGVzICovID0ge1xuICAvLyDilIzilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIAgV2FybmluZyDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJBcbiAgLy8g4pSCIFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucy4g4pSCXG4gIC8vIOKUgiAgICBUbyB1cGRhdGUgdGhlbSwgZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gYHBucG0gcHJvcHR5cGVzYC4gICAgIOKUglxuICAvLyDilJTilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJhcbiAgLyoqXG4gICAqIEFkZCBhIGN1c3RvbSB0cmFuc2l0aW9uIGVuZCB0cmlnZ2VyLiBDYWxsZWQgd2l0aCB0aGUgdHJhbnNpdGlvbmluZyBET01cbiAgICogbm9kZSBhbmQgYSBkb25lIGNhbGxiYWNrLiBBbGxvd3MgZm9yIG1vcmUgZmluZSBncmFpbmVkIHRyYW5zaXRpb24gZW5kXG4gICAqIGxvZ2ljLiBOb3RlOiBUaW1lb3V0cyBhcmUgc3RpbGwgdXNlZCBhcyBhIGZhbGxiYWNrIGlmIHByb3ZpZGVkLlxuICAgKi9cbiAgYWRkRW5kTGlzdGVuZXI6IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogUGVyZm9ybSB0aGUgZW50ZXIgdHJhbnNpdGlvbiB3aGVuIGl0IGZpcnN0IG1vdW50cyBpZiBgaW5gIGlzIGFsc28gYHRydWVgLlxuICAgKiBTZXQgdGhpcyB0byBgZmFsc2VgIHRvIGRpc2FibGUgdGhpcyBiZWhhdmlvci5cbiAgICogQGRlZmF1bHQgdHJ1ZVxuICAgKi9cbiAgYXBwZWFyOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIEEgc2luZ2xlIGNoaWxkIGNvbnRlbnQgZWxlbWVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBlbGVtZW50QWNjZXB0aW5nUmVmLmlzUmVxdWlyZWQsXG4gIC8qKlxuICAgKiBBbiBIVE1MIGVsZW1lbnQsIG9yIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIG9uZS5cbiAgICogSXQncyB1c2VkIHRvIHNldCB0aGUgY29udGFpbmVyIHRoZSBTbGlkZSBpcyB0cmFuc2l0aW9uaW5nIGZyb20uXG4gICAqL1xuICBjb250YWluZXI6IGNoYWluUHJvcFR5cGVzKFByb3BUeXBlcy5vbmVPZlR5cGUoW0hUTUxFbGVtZW50VHlwZSwgUHJvcFR5cGVzLmZ1bmNdKSwgcHJvcHMgPT4ge1xuICAgIGlmIChwcm9wcy5vcGVuKSB7XG4gICAgICBjb25zdCByZXNvbHZlZENvbnRhaW5lciA9IHJlc29sdmVDb250YWluZXIocHJvcHMuY29udGFpbmVyKTtcbiAgICAgIGlmIChyZXNvbHZlZENvbnRhaW5lciAmJiByZXNvbHZlZENvbnRhaW5lci5ub2RlVHlwZSA9PT0gMSkge1xuICAgICAgICBjb25zdCBib3ggPSByZXNvbHZlZENvbnRhaW5lci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAndGVzdCcgJiYgYm94LnRvcCA9PT0gMCAmJiBib3gubGVmdCA9PT0gMCAmJiBib3gucmlnaHQgPT09IDAgJiYgYm94LmJvdHRvbSA9PT0gMCkge1xuICAgICAgICAgIHJldHVybiBuZXcgRXJyb3IoWydNVUk6IFRoZSBgY29udGFpbmVyYCBwcm9wIHByb3ZpZGVkIHRvIHRoZSBjb21wb25lbnQgaXMgaW52YWxpZC4nLCAnVGhlIGFuY2hvciBlbGVtZW50IHNob3VsZCBiZSBwYXJ0IG9mIHRoZSBkb2N1bWVudCBsYXlvdXQuJywgXCJNYWtlIHN1cmUgdGhlIGVsZW1lbnQgaXMgcHJlc2VudCBpbiB0aGUgZG9jdW1lbnQgb3IgdGhhdCBpdCdzIG5vdCBkaXNwbGF5IG5vbmUuXCJdLmpvaW4oJ1xcbicpKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICghcmVzb2x2ZWRDb250YWluZXIgfHwgdHlwZW9mIHJlc29sdmVkQ29udGFpbmVyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCAhPT0gJ2Z1bmN0aW9uJyB8fCByZXNvbHZlZENvbnRhaW5lci5jb250ZXh0RWxlbWVudCAhPSBudWxsICYmIHJlc29sdmVkQ29udGFpbmVyLmNvbnRleHRFbGVtZW50Lm5vZGVUeXBlICE9PSAxKSB7XG4gICAgICAgIHJldHVybiBuZXcgRXJyb3IoWydNVUk6IFRoZSBgY29udGFpbmVyYCBwcm9wIHByb3ZpZGVkIHRvIHRoZSBjb21wb25lbnQgaXMgaW52YWxpZC4nLCAnSXQgc2hvdWxkIGJlIGFuIEhUTUwgZWxlbWVudCBpbnN0YW5jZS4nXS5qb2luKCdcXG4nKSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9KSxcbiAgLyoqXG4gICAqIERpcmVjdGlvbiB0aGUgY2hpbGQgbm9kZSB3aWxsIGVudGVyIGZyb20uXG4gICAqIEBkZWZhdWx0ICdkb3duJ1xuICAgKi9cbiAgZGlyZWN0aW9uOiBQcm9wVHlwZXMub25lT2YoWydkb3duJywgJ2xlZnQnLCAncmlnaHQnLCAndXAnXSksXG4gIC8qKlxuICAgKiBUaGUgdHJhbnNpdGlvbiB0aW1pbmcgZnVuY3Rpb24uXG4gICAqIFlvdSBtYXkgc3BlY2lmeSBhIHNpbmdsZSBlYXNpbmcgb3IgYSBvYmplY3QgY29udGFpbmluZyBlbnRlciBhbmQgZXhpdCB2YWx1ZXMuXG4gICAqIEBkZWZhdWx0IHtcbiAgICogICBlbnRlcjogdGhlbWUudHJhbnNpdGlvbnMuZWFzaW5nLmVhc2VPdXQsXG4gICAqICAgZXhpdDogdGhlbWUudHJhbnNpdGlvbnMuZWFzaW5nLnNoYXJwLFxuICAgKiB9XG4gICAqL1xuICBlYXNpbmc6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zaGFwZSh7XG4gICAgZW50ZXI6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgZXhpdDogUHJvcFR5cGVzLnN0cmluZ1xuICB9KSwgUHJvcFR5cGVzLnN0cmluZ10pLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgY29tcG9uZW50IHdpbGwgdHJhbnNpdGlvbiBpbi5cbiAgICovXG4gIGluOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uRW50ZXI6IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25FbnRlcmVkOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uRW50ZXJpbmc6IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25FeGl0OiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uRXhpdGVkOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uRXhpdGluZzogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBzdHlsZTogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqXG4gICAqIFRoZSBkdXJhdGlvbiBmb3IgdGhlIHRyYW5zaXRpb24sIGluIG1pbGxpc2Vjb25kcy5cbiAgICogWW91IG1heSBzcGVjaWZ5IGEgc2luZ2xlIHRpbWVvdXQgZm9yIGFsbCB0cmFuc2l0aW9ucywgb3IgaW5kaXZpZHVhbGx5IHdpdGggYW4gb2JqZWN0LlxuICAgKiBAZGVmYXVsdCB7XG4gICAqICAgZW50ZXI6IHRoZW1lLnRyYW5zaXRpb25zLmR1cmF0aW9uLmVudGVyaW5nU2NyZWVuLFxuICAgKiAgIGV4aXQ6IHRoZW1lLnRyYW5zaXRpb25zLmR1cmF0aW9uLmxlYXZpbmdTY3JlZW4sXG4gICAqIH1cbiAgICovXG4gIHRpbWVvdXQ6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zaGFwZSh7XG4gICAgYXBwZWFyOiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIGVudGVyOiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIGV4aXQ6IFByb3BUeXBlcy5udW1iZXJcbiAgfSldKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IFNsaWRlOyIsImltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3Nlcyc7XG5pbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3MgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzcyc7XG5leHBvcnQgZnVuY3Rpb24gZ2V0RHJhd2VyVXRpbGl0eUNsYXNzKHNsb3QpIHtcbiAgcmV0dXJuIGdlbmVyYXRlVXRpbGl0eUNsYXNzKCdNdWlEcmF3ZXInLCBzbG90KTtcbn1cbmNvbnN0IGRyYXdlckNsYXNzZXMgPSBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzKCdNdWlEcmF3ZXInLCBbJ3Jvb3QnLCAnZG9ja2VkJywgJ3BhcGVyJywgJ3BhcGVyQW5jaG9yTGVmdCcsICdwYXBlckFuY2hvclJpZ2h0JywgJ3BhcGVyQW5jaG9yVG9wJywgJ3BhcGVyQW5jaG9yQm90dG9tJywgJ3BhcGVyQW5jaG9yRG9ja2VkTGVmdCcsICdwYXBlckFuY2hvckRvY2tlZFJpZ2h0JywgJ3BhcGVyQW5jaG9yRG9ja2VkVG9wJywgJ3BhcGVyQW5jaG9yRG9ja2VkQm90dG9tJywgJ21vZGFsJ10pO1xuZXhwb3J0IGRlZmF1bHQgZHJhd2VyQ2xhc3NlczsiLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJCYWNrZHJvcFByb3BzXCJdLFxuICBfZXhjbHVkZWQyID0gW1wiYW5jaG9yXCIsIFwiQmFja2Ryb3BQcm9wc1wiLCBcImNoaWxkcmVuXCIsIFwiY2xhc3NOYW1lXCIsIFwiZWxldmF0aW9uXCIsIFwiaGlkZUJhY2tkcm9wXCIsIFwiTW9kYWxQcm9wc1wiLCBcIm9uQ2xvc2VcIiwgXCJvcGVuXCIsIFwiUGFwZXJQcm9wc1wiLCBcIlNsaWRlUHJvcHNcIiwgXCJUcmFuc2l0aW9uQ29tcG9uZW50XCIsIFwidHJhbnNpdGlvbkR1cmF0aW9uXCIsIFwidmFyaWFudFwiXTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCBpbnRlZ2VyUHJvcFR5cGUgZnJvbSAnQG11aS91dGlscy9pbnRlZ2VyUHJvcFR5cGUnO1xuaW1wb3J0IGNvbXBvc2VDbGFzc2VzIGZyb20gJ0BtdWkvdXRpbHMvY29tcG9zZUNsYXNzZXMnO1xuaW1wb3J0IHsgdXNlUnRsIH0gZnJvbSAnQG11aS9zeXN0ZW0vUnRsUHJvdmlkZXInO1xuaW1wb3J0IE1vZGFsIGZyb20gJy4uL01vZGFsJztcbmltcG9ydCBTbGlkZSBmcm9tICcuLi9TbGlkZSc7XG5pbXBvcnQgUGFwZXIgZnJvbSAnLi4vUGFwZXInO1xuaW1wb3J0IGNhcGl0YWxpemUgZnJvbSAnLi4vdXRpbHMvY2FwaXRhbGl6ZSc7XG5pbXBvcnQgdXNlVGhlbWUgZnJvbSAnLi4vc3R5bGVzL3VzZVRoZW1lJztcbmltcG9ydCB7IHVzZURlZmF1bHRQcm9wcyB9IGZyb20gJy4uL0RlZmF1bHRQcm9wc1Byb3ZpZGVyJztcbmltcG9ydCBzdHlsZWQsIHsgcm9vdFNob3VsZEZvcndhcmRQcm9wIH0gZnJvbSAnLi4vc3R5bGVzL3N0eWxlZCc7XG5pbXBvcnQgeyBnZXREcmF3ZXJVdGlsaXR5Q2xhc3MgfSBmcm9tICcuL2RyYXdlckNsYXNzZXMnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmNvbnN0IG92ZXJyaWRlc1Jlc29sdmVyID0gKHByb3BzLCBzdHlsZXMpID0+IHtcbiAgY29uc3Qge1xuICAgIG93bmVyU3RhdGVcbiAgfSA9IHByb3BzO1xuICByZXR1cm4gW3N0eWxlcy5yb290LCAob3duZXJTdGF0ZS52YXJpYW50ID09PSAncGVybWFuZW50JyB8fCBvd25lclN0YXRlLnZhcmlhbnQgPT09ICdwZXJzaXN0ZW50JykgJiYgc3R5bGVzLmRvY2tlZCwgc3R5bGVzLm1vZGFsXTtcbn07XG5jb25zdCB1c2VVdGlsaXR5Q2xhc3NlcyA9IG93bmVyU3RhdGUgPT4ge1xuICBjb25zdCB7XG4gICAgY2xhc3NlcyxcbiAgICBhbmNob3IsXG4gICAgdmFyaWFudFxuICB9ID0gb3duZXJTdGF0ZTtcbiAgY29uc3Qgc2xvdHMgPSB7XG4gICAgcm9vdDogWydyb290J10sXG4gICAgZG9ja2VkOiBbKHZhcmlhbnQgPT09ICdwZXJtYW5lbnQnIHx8IHZhcmlhbnQgPT09ICdwZXJzaXN0ZW50JykgJiYgJ2RvY2tlZCddLFxuICAgIG1vZGFsOiBbJ21vZGFsJ10sXG4gICAgcGFwZXI6IFsncGFwZXInLCBgcGFwZXJBbmNob3Ike2NhcGl0YWxpemUoYW5jaG9yKX1gLCB2YXJpYW50ICE9PSAndGVtcG9yYXJ5JyAmJiBgcGFwZXJBbmNob3JEb2NrZWQke2NhcGl0YWxpemUoYW5jaG9yKX1gXVxuICB9O1xuICByZXR1cm4gY29tcG9zZUNsYXNzZXMoc2xvdHMsIGdldERyYXdlclV0aWxpdHlDbGFzcywgY2xhc3Nlcyk7XG59O1xuY29uc3QgRHJhd2VyUm9vdCA9IHN0eWxlZChNb2RhbCwge1xuICBuYW1lOiAnTXVpRHJhd2VyJyxcbiAgc2xvdDogJ1Jvb3QnLFxuICBvdmVycmlkZXNSZXNvbHZlclxufSkoKHtcbiAgdGhlbWVcbn0pID0+ICh7XG4gIHpJbmRleDogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnpJbmRleC5kcmF3ZXJcbn0pKTtcbmNvbnN0IERyYXdlckRvY2tlZFJvb3QgPSBzdHlsZWQoJ2RpdicsIHtcbiAgc2hvdWxkRm9yd2FyZFByb3A6IHJvb3RTaG91bGRGb3J3YXJkUHJvcCxcbiAgbmFtZTogJ011aURyYXdlcicsXG4gIHNsb3Q6ICdEb2NrZWQnLFxuICBza2lwVmFyaWFudHNSZXNvbHZlcjogZmFsc2UsXG4gIG92ZXJyaWRlc1Jlc29sdmVyXG59KSh7XG4gIGZsZXg6ICcwIDAgYXV0bydcbn0pO1xuY29uc3QgRHJhd2VyUGFwZXIgPSBzdHlsZWQoUGFwZXIsIHtcbiAgbmFtZTogJ011aURyYXdlcicsXG4gIHNsb3Q6ICdQYXBlcicsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9ID0gcHJvcHM7XG4gICAgcmV0dXJuIFtzdHlsZXMucGFwZXIsIHN0eWxlc1tgcGFwZXJBbmNob3Ike2NhcGl0YWxpemUob3duZXJTdGF0ZS5hbmNob3IpfWBdLCBvd25lclN0YXRlLnZhcmlhbnQgIT09ICd0ZW1wb3JhcnknICYmIHN0eWxlc1tgcGFwZXJBbmNob3JEb2NrZWQke2NhcGl0YWxpemUob3duZXJTdGF0ZS5hbmNob3IpfWBdXTtcbiAgfVxufSkoKHtcbiAgdGhlbWUsXG4gIG93bmVyU3RhdGVcbn0pID0+IF9leHRlbmRzKHtcbiAgb3ZlcmZsb3dZOiAnYXV0bycsXG4gIGRpc3BsYXk6ICdmbGV4JyxcbiAgZmxleERpcmVjdGlvbjogJ2NvbHVtbicsXG4gIGhlaWdodDogJzEwMCUnLFxuICBmbGV4OiAnMSAwIGF1dG8nLFxuICB6SW5kZXg6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS56SW5kZXguZHJhd2VyLFxuICAvLyBBZGQgaU9TIG1vbWVudHVtIHNjcm9sbGluZyBmb3IgaU9TIDwgMTMuMFxuICBXZWJraXRPdmVyZmxvd1Njcm9sbGluZzogJ3RvdWNoJyxcbiAgLy8gdGVtcG9yYXJ5IHN0eWxlXG4gIHBvc2l0aW9uOiAnZml4ZWQnLFxuICB0b3A6IDAsXG4gIC8vIFdlIGRpc2FibGUgdGhlIGZvY3VzIHJpbmcgZm9yIG1vdXNlLCB0b3VjaCBhbmQga2V5Ym9hcmQgdXNlcnMuXG4gIC8vIEF0IHNvbWUgcG9pbnQsIGl0IHdvdWxkIGJlIGJldHRlciB0byBrZWVwIGl0IGZvciBrZXlib2FyZCB1c2Vycy5cbiAgLy8gOmZvY3VzLXJpbmcgQ1NTIHBzZXVkby1jbGFzcyB3aWxsIGhlbHAuXG4gIG91dGxpbmU6IDBcbn0sIG93bmVyU3RhdGUuYW5jaG9yID09PSAnbGVmdCcgJiYge1xuICBsZWZ0OiAwXG59LCBvd25lclN0YXRlLmFuY2hvciA9PT0gJ3RvcCcgJiYge1xuICB0b3A6IDAsXG4gIGxlZnQ6IDAsXG4gIHJpZ2h0OiAwLFxuICBoZWlnaHQ6ICdhdXRvJyxcbiAgbWF4SGVpZ2h0OiAnMTAwJSdcbn0sIG93bmVyU3RhdGUuYW5jaG9yID09PSAncmlnaHQnICYmIHtcbiAgcmlnaHQ6IDBcbn0sIG93bmVyU3RhdGUuYW5jaG9yID09PSAnYm90dG9tJyAmJiB7XG4gIHRvcDogJ2F1dG8nLFxuICBsZWZ0OiAwLFxuICBib3R0b206IDAsXG4gIHJpZ2h0OiAwLFxuICBoZWlnaHQ6ICdhdXRvJyxcbiAgbWF4SGVpZ2h0OiAnMTAwJSdcbn0sIG93bmVyU3RhdGUuYW5jaG9yID09PSAnbGVmdCcgJiYgb3duZXJTdGF0ZS52YXJpYW50ICE9PSAndGVtcG9yYXJ5JyAmJiB7XG4gIGJvcmRlclJpZ2h0OiBgMXB4IHNvbGlkICR7KHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGUuZGl2aWRlcn1gXG59LCBvd25lclN0YXRlLmFuY2hvciA9PT0gJ3RvcCcgJiYgb3duZXJTdGF0ZS52YXJpYW50ICE9PSAndGVtcG9yYXJ5JyAmJiB7XG4gIGJvcmRlckJvdHRvbTogYDFweCBzb2xpZCAkeyh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlLmRpdmlkZXJ9YFxufSwgb3duZXJTdGF0ZS5hbmNob3IgPT09ICdyaWdodCcgJiYgb3duZXJTdGF0ZS52YXJpYW50ICE9PSAndGVtcG9yYXJ5JyAmJiB7XG4gIGJvcmRlckxlZnQ6IGAxcHggc29saWQgJHsodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZS5kaXZpZGVyfWBcbn0sIG93bmVyU3RhdGUuYW5jaG9yID09PSAnYm90dG9tJyAmJiBvd25lclN0YXRlLnZhcmlhbnQgIT09ICd0ZW1wb3JhcnknICYmIHtcbiAgYm9yZGVyVG9wOiBgMXB4IHNvbGlkICR7KHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGUuZGl2aWRlcn1gXG59KSk7XG5jb25zdCBvcHBvc2l0ZURpcmVjdGlvbiA9IHtcbiAgbGVmdDogJ3JpZ2h0JyxcbiAgcmlnaHQ6ICdsZWZ0JyxcbiAgdG9wOiAnZG93bicsXG4gIGJvdHRvbTogJ3VwJ1xufTtcbmV4cG9ydCBmdW5jdGlvbiBpc0hvcml6b250YWwoYW5jaG9yKSB7XG4gIHJldHVybiBbJ2xlZnQnLCAncmlnaHQnXS5pbmRleE9mKGFuY2hvcikgIT09IC0xO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdldEFuY2hvcih7XG4gIGRpcmVjdGlvblxufSwgYW5jaG9yKSB7XG4gIHJldHVybiBkaXJlY3Rpb24gPT09ICdydGwnICYmIGlzSG9yaXpvbnRhbChhbmNob3IpID8gb3Bwb3NpdGVEaXJlY3Rpb25bYW5jaG9yXSA6IGFuY2hvcjtcbn1cblxuLyoqXG4gKiBUaGUgcHJvcHMgb2YgdGhlIFtNb2RhbF0oL21hdGVyaWFsLXVpL2FwaS9tb2RhbC8pIGNvbXBvbmVudCBhcmUgYXZhaWxhYmxlXG4gKiB3aGVuIGB2YXJpYW50PVwidGVtcG9yYXJ5XCJgIGlzIHNldC5cbiAqL1xuY29uc3QgRHJhd2VyID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gRHJhd2VyKGluUHJvcHMsIHJlZikge1xuICBjb25zdCBwcm9wcyA9IHVzZURlZmF1bHRQcm9wcyh7XG4gICAgcHJvcHM6IGluUHJvcHMsXG4gICAgbmFtZTogJ011aURyYXdlcidcbiAgfSk7XG4gIGNvbnN0IHRoZW1lID0gdXNlVGhlbWUoKTtcbiAgY29uc3QgaXNSdGwgPSB1c2VSdGwoKTtcbiAgY29uc3QgZGVmYXVsdFRyYW5zaXRpb25EdXJhdGlvbiA9IHtcbiAgICBlbnRlcjogdGhlbWUudHJhbnNpdGlvbnMuZHVyYXRpb24uZW50ZXJpbmdTY3JlZW4sXG4gICAgZXhpdDogdGhlbWUudHJhbnNpdGlvbnMuZHVyYXRpb24ubGVhdmluZ1NjcmVlblxuICB9O1xuICBjb25zdCB7XG4gICAgICBhbmNob3I6IGFuY2hvclByb3AgPSAnbGVmdCcsXG4gICAgICBCYWNrZHJvcFByb3BzLFxuICAgICAgY2hpbGRyZW4sXG4gICAgICBjbGFzc05hbWUsXG4gICAgICBlbGV2YXRpb24gPSAxNixcbiAgICAgIGhpZGVCYWNrZHJvcCA9IGZhbHNlLFxuICAgICAgTW9kYWxQcm9wczoge1xuICAgICAgICBCYWNrZHJvcFByb3BzOiBCYWNrZHJvcFByb3BzUHJvcFxuICAgICAgfSA9IHt9LFxuICAgICAgb25DbG9zZSxcbiAgICAgIG9wZW4gPSBmYWxzZSxcbiAgICAgIFBhcGVyUHJvcHMgPSB7fSxcbiAgICAgIFNsaWRlUHJvcHMsXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QvcHJvcC10eXBlc1xuICAgICAgVHJhbnNpdGlvbkNvbXBvbmVudCA9IFNsaWRlLFxuICAgICAgdHJhbnNpdGlvbkR1cmF0aW9uID0gZGVmYXVsdFRyYW5zaXRpb25EdXJhdGlvbixcbiAgICAgIHZhcmlhbnQgPSAndGVtcG9yYXJ5J1xuICAgIH0gPSBwcm9wcyxcbiAgICBNb2RhbFByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMuTW9kYWxQcm9wcywgX2V4Y2x1ZGVkKSxcbiAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQyKTtcblxuICAvLyBMZXQncyBhc3N1bWUgdGhhdCB0aGUgRHJhd2VyIHdpbGwgYWx3YXlzIGJlIHJlbmRlcmVkIG9uIHVzZXIgc3BhY2UuXG4gIC8vIFdlIHVzZSB0aGlzIHN0YXRlIGlzIG9yZGVyIHRvIHNraXAgdGhlIGFwcGVhciB0cmFuc2l0aW9uIGR1cmluZyB0aGVcbiAgLy8gaW5pdGlhbCBtb3VudCBvZiB0aGUgY29tcG9uZW50LlxuICBjb25zdCBtb3VudGVkID0gUmVhY3QudXNlUmVmKGZhbHNlKTtcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBtb3VudGVkLmN1cnJlbnQgPSB0cnVlO1xuICB9LCBbXSk7XG4gIGNvbnN0IGFuY2hvckludmFyaWFudCA9IGdldEFuY2hvcih7XG4gICAgZGlyZWN0aW9uOiBpc1J0bCA/ICdydGwnIDogJ2x0cidcbiAgfSwgYW5jaG9yUHJvcCk7XG4gIGNvbnN0IGFuY2hvciA9IGFuY2hvclByb3A7XG4gIGNvbnN0IG93bmVyU3RhdGUgPSBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICBhbmNob3IsXG4gICAgZWxldmF0aW9uLFxuICAgIG9wZW4sXG4gICAgdmFyaWFudFxuICB9LCBvdGhlcik7XG4gIGNvbnN0IGNsYXNzZXMgPSB1c2VVdGlsaXR5Q2xhc3Nlcyhvd25lclN0YXRlKTtcbiAgY29uc3QgZHJhd2VyID0gLyojX19QVVJFX18qL19qc3goRHJhd2VyUGFwZXIsIF9leHRlbmRzKHtcbiAgICBlbGV2YXRpb246IHZhcmlhbnQgPT09ICd0ZW1wb3JhcnknID8gZWxldmF0aW9uIDogMCxcbiAgICBzcXVhcmU6IHRydWVcbiAgfSwgUGFwZXJQcm9wcywge1xuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnBhcGVyLCBQYXBlclByb3BzLmNsYXNzTmFtZSksXG4gICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZSxcbiAgICBjaGlsZHJlbjogY2hpbGRyZW5cbiAgfSkpO1xuICBpZiAodmFyaWFudCA9PT0gJ3Blcm1hbmVudCcpIHtcbiAgICByZXR1cm4gLyojX19QVVJFX18qL19qc3goRHJhd2VyRG9ja2VkUm9vdCwgX2V4dGVuZHMoe1xuICAgICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3Nlcy5kb2NrZWQsIGNsYXNzTmFtZSksXG4gICAgICBvd25lclN0YXRlOiBvd25lclN0YXRlLFxuICAgICAgcmVmOiByZWZcbiAgICB9LCBvdGhlciwge1xuICAgICAgY2hpbGRyZW46IGRyYXdlclxuICAgIH0pKTtcbiAgfVxuICBjb25zdCBzbGlkaW5nRHJhd2VyID0gLyojX19QVVJFX18qL19qc3goVHJhbnNpdGlvbkNvbXBvbmVudCwgX2V4dGVuZHMoe1xuICAgIGluOiBvcGVuLFxuICAgIGRpcmVjdGlvbjogb3Bwb3NpdGVEaXJlY3Rpb25bYW5jaG9ySW52YXJpYW50XSxcbiAgICB0aW1lb3V0OiB0cmFuc2l0aW9uRHVyYXRpb24sXG4gICAgYXBwZWFyOiBtb3VudGVkLmN1cnJlbnRcbiAgfSwgU2xpZGVQcm9wcywge1xuICAgIGNoaWxkcmVuOiBkcmF3ZXJcbiAgfSkpO1xuICBpZiAodmFyaWFudCA9PT0gJ3BlcnNpc3RlbnQnKSB7XG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KERyYXdlckRvY2tlZFJvb3QsIF9leHRlbmRzKHtcbiAgICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzZXMuZG9ja2VkLCBjbGFzc05hbWUpLFxuICAgICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZSxcbiAgICAgIHJlZjogcmVmXG4gICAgfSwgb3RoZXIsIHtcbiAgICAgIGNoaWxkcmVuOiBzbGlkaW5nRHJhd2VyXG4gICAgfSkpO1xuICB9XG5cbiAgLy8gdmFyaWFudCA9PT0gdGVtcG9yYXJ5XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeChEcmF3ZXJSb290LCBfZXh0ZW5kcyh7XG4gICAgQmFja2Ryb3BQcm9wczogX2V4dGVuZHMoe30sIEJhY2tkcm9wUHJvcHMsIEJhY2tkcm9wUHJvcHNQcm9wLCB7XG4gICAgICB0cmFuc2l0aW9uRHVyYXRpb25cbiAgICB9KSxcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc2VzLm1vZGFsLCBjbGFzc05hbWUpLFxuICAgIG9wZW46IG9wZW4sXG4gICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZSxcbiAgICBvbkNsb3NlOiBvbkNsb3NlLFxuICAgIGhpZGVCYWNrZHJvcDogaGlkZUJhY2tkcm9wLFxuICAgIHJlZjogcmVmXG4gIH0sIG90aGVyLCBNb2RhbFByb3BzLCB7XG4gICAgY2hpbGRyZW46IHNsaWRpbmdEcmF3ZXJcbiAgfSkpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBEcmF3ZXIucHJvcFR5cGVzIC8qIHJlbW92ZS1wcm9wdHlwZXMgKi8gPSB7XG4gIC8vIOKUjOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgCBXYXJuaW5nIOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUkFxuICAvLyDilIIgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zLiDilIJcbiAgLy8g4pSCICAgIFRvIHVwZGF0ZSB0aGVtLCBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBgcG5wbSBwcm9wdHlwZXNgLiAgICAg4pSCXG4gIC8vIOKUlOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUmFxuICAvKipcbiAgICogU2lkZSBmcm9tIHdoaWNoIHRoZSBkcmF3ZXIgd2lsbCBhcHBlYXIuXG4gICAqIEBkZWZhdWx0ICdsZWZ0J1xuICAgKi9cbiAgYW5jaG9yOiBQcm9wVHlwZXMub25lT2YoWydib3R0b20nLCAnbGVmdCcsICdyaWdodCcsICd0b3AnXSksXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBCYWNrZHJvcFByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBUaGUgZWxldmF0aW9uIG9mIHRoZSBkcmF3ZXIuXG4gICAqIEBkZWZhdWx0IDE2XG4gICAqL1xuICBlbGV2YXRpb246IGludGVnZXJQcm9wVHlwZSxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGJhY2tkcm9wIGlzIG5vdCByZW5kZXJlZC5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGhpZGVCYWNrZHJvcDogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBQcm9wcyBhcHBsaWVkIHRvIHRoZSBbYE1vZGFsYF0oL21hdGVyaWFsLXVpL2FwaS9tb2RhbC8pIGVsZW1lbnQuXG4gICAqIEBkZWZhdWx0IHt9XG4gICAqL1xuICBNb2RhbFByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgY29tcG9uZW50IHJlcXVlc3RzIHRvIGJlIGNsb3NlZC5cbiAgICogVGhlIGByZWFzb25gIHBhcmFtZXRlciBjYW4gb3B0aW9uYWxseSBiZSB1c2VkIHRvIGNvbnRyb2wgdGhlIHJlc3BvbnNlIHRvIGBvbkNsb3NlYC5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGV2ZW50IFRoZSBldmVudCBzb3VyY2Ugb2YgdGhlIGNhbGxiYWNrLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcmVhc29uIENhbiBiZTogYFwiZXNjYXBlS2V5RG93blwiYCwgYFwiYmFja2Ryb3BDbGlja1wiYC5cbiAgICovXG4gIG9uQ2xvc2U6IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgY29tcG9uZW50IGlzIHNob3duLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgb3BlbjogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBQcm9wcyBhcHBsaWVkIHRvIHRoZSBbYFBhcGVyYF0oL21hdGVyaWFsLXVpL2FwaS9wYXBlci8pIGVsZW1lbnQuXG4gICAqIEBkZWZhdWx0IHt9XG4gICAqL1xuICBQYXBlclByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogUHJvcHMgYXBwbGllZCB0byB0aGUgW2BTbGlkZWBdKC9tYXRlcmlhbC11aS9hcGkvc2xpZGUvKSBlbGVtZW50LlxuICAgKi9cbiAgU2xpZGVQcm9wczogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqXG4gICAqIFRoZSBzeXN0ZW0gcHJvcCB0aGF0IGFsbG93cyBkZWZpbmluZyBzeXN0ZW0gb3ZlcnJpZGVzIGFzIHdlbGwgYXMgYWRkaXRpb25hbCBDU1Mgc3R5bGVzLlxuICAgKi9cbiAgc3g6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuYm9vbF0pKSwgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKSxcbiAgLyoqXG4gICAqIFRoZSBkdXJhdGlvbiBmb3IgdGhlIHRyYW5zaXRpb24sIGluIG1pbGxpc2Vjb25kcy5cbiAgICogWW91IG1heSBzcGVjaWZ5IGEgc2luZ2xlIHRpbWVvdXQgZm9yIGFsbCB0cmFuc2l0aW9ucywgb3IgaW5kaXZpZHVhbGx5IHdpdGggYW4gb2JqZWN0LlxuICAgKiBAZGVmYXVsdCB7XG4gICAqICAgZW50ZXI6IHRoZW1lLnRyYW5zaXRpb25zLmR1cmF0aW9uLmVudGVyaW5nU2NyZWVuLFxuICAgKiAgIGV4aXQ6IHRoZW1lLnRyYW5zaXRpb25zLmR1cmF0aW9uLmxlYXZpbmdTY3JlZW4sXG4gICAqIH1cbiAgICovXG4gIHRyYW5zaXRpb25EdXJhdGlvbjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBhcHBlYXI6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgZW50ZXI6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgZXhpdDogUHJvcFR5cGVzLm51bWJlclxuICB9KV0pLFxuICAvKipcbiAgICogVGhlIHZhcmlhbnQgdG8gdXNlLlxuICAgKiBAZGVmYXVsdCAndGVtcG9yYXJ5J1xuICAgKi9cbiAgdmFyaWFudDogUHJvcFR5cGVzLm9uZU9mKFsncGVybWFuZW50JywgJ3BlcnNpc3RlbnQnLCAndGVtcG9yYXJ5J10pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgRHJhd2VyOyIsImltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3Nlcyc7XG5pbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3MgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzcyc7XG5leHBvcnQgZnVuY3Rpb24gZ2V0RmFiVXRpbGl0eUNsYXNzKHNsb3QpIHtcbiAgcmV0dXJuIGdlbmVyYXRlVXRpbGl0eUNsYXNzKCdNdWlGYWInLCBzbG90KTtcbn1cbmNvbnN0IGZhYkNsYXNzZXMgPSBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzKCdNdWlGYWInLCBbJ3Jvb3QnLCAncHJpbWFyeScsICdzZWNvbmRhcnknLCAnZXh0ZW5kZWQnLCAnY2lyY3VsYXInLCAnZm9jdXNWaXNpYmxlJywgJ2Rpc2FibGVkJywgJ2NvbG9ySW5oZXJpdCcsICdzaXplU21hbGwnLCAnc2l6ZU1lZGl1bScsICdzaXplTGFyZ2UnLCAnaW5mbycsICdlcnJvcicsICd3YXJuaW5nJywgJ3N1Y2Nlc3MnXSk7XG5leHBvcnQgZGVmYXVsdCBmYWJDbGFzc2VzOyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImNoaWxkcmVuXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29sb3JcIiwgXCJjb21wb25lbnRcIiwgXCJkaXNhYmxlZFwiLCBcImRpc2FibGVGb2N1c1JpcHBsZVwiLCBcImZvY3VzVmlzaWJsZUNsYXNzTmFtZVwiLCBcInNpemVcIiwgXCJ2YXJpYW50XCJdO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IGNvbXBvc2VDbGFzc2VzIGZyb20gJ0BtdWkvdXRpbHMvY29tcG9zZUNsYXNzZXMnO1xuaW1wb3J0IEJ1dHRvbkJhc2UgZnJvbSAnLi4vQnV0dG9uQmFzZSc7XG5pbXBvcnQgY2FwaXRhbGl6ZSBmcm9tICcuLi91dGlscy9jYXBpdGFsaXplJztcbmltcG9ydCB7IHVzZURlZmF1bHRQcm9wcyB9IGZyb20gJy4uL0RlZmF1bHRQcm9wc1Byb3ZpZGVyJztcbmltcG9ydCBmYWJDbGFzc2VzLCB7IGdldEZhYlV0aWxpdHlDbGFzcyB9IGZyb20gJy4vZmFiQ2xhc3Nlcyc7XG5pbXBvcnQgc3R5bGVkLCB7IHJvb3RTaG91bGRGb3J3YXJkUHJvcCB9IGZyb20gJy4uL3N0eWxlcy9zdHlsZWQnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmNvbnN0IHVzZVV0aWxpdHlDbGFzc2VzID0gb3duZXJTdGF0ZSA9PiB7XG4gIGNvbnN0IHtcbiAgICBjb2xvcixcbiAgICB2YXJpYW50LFxuICAgIGNsYXNzZXMsXG4gICAgc2l6ZVxuICB9ID0gb3duZXJTdGF0ZTtcbiAgY29uc3Qgc2xvdHMgPSB7XG4gICAgcm9vdDogWydyb290JywgdmFyaWFudCwgYHNpemUke2NhcGl0YWxpemUoc2l6ZSl9YCwgY29sb3IgPT09ICdpbmhlcml0JyA/ICdjb2xvckluaGVyaXQnIDogY29sb3JdXG4gIH07XG4gIGNvbnN0IGNvbXBvc2VkQ2xhc3NlcyA9IGNvbXBvc2VDbGFzc2VzKHNsb3RzLCBnZXRGYWJVdGlsaXR5Q2xhc3MsIGNsYXNzZXMpO1xuICByZXR1cm4gX2V4dGVuZHMoe30sIGNsYXNzZXMsIGNvbXBvc2VkQ2xhc3Nlcyk7XG59O1xuY29uc3QgRmFiUm9vdCA9IHN0eWxlZChCdXR0b25CYXNlLCB7XG4gIG5hbWU6ICdNdWlGYWInLFxuICBzbG90OiAnUm9vdCcsXG4gIHNob3VsZEZvcndhcmRQcm9wOiBwcm9wID0+IHJvb3RTaG91bGRGb3J3YXJkUHJvcChwcm9wKSB8fCBwcm9wID09PSAnY2xhc3NlcycsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9ID0gcHJvcHM7XG4gICAgcmV0dXJuIFtzdHlsZXMucm9vdCwgc3R5bGVzW293bmVyU3RhdGUudmFyaWFudF0sIHN0eWxlc1tgc2l6ZSR7Y2FwaXRhbGl6ZShvd25lclN0YXRlLnNpemUpfWBdLCBvd25lclN0YXRlLmNvbG9yID09PSAnaW5oZXJpdCcgJiYgc3R5bGVzLmNvbG9ySW5oZXJpdCwgc3R5bGVzW2NhcGl0YWxpemUob3duZXJTdGF0ZS5zaXplKV0sIHN0eWxlc1tvd25lclN0YXRlLmNvbG9yXV07XG4gIH1cbn0pKCh7XG4gIHRoZW1lLFxuICBvd25lclN0YXRlXG59KSA9PiB7XG4gIHZhciBfdGhlbWUkcGFsZXR0ZSRnZXRDb24sIF90aGVtZSRwYWxldHRlO1xuICByZXR1cm4gX2V4dGVuZHMoe30sIHRoZW1lLnR5cG9ncmFwaHkuYnV0dG9uLCB7XG4gICAgbWluSGVpZ2h0OiAzNixcbiAgICB0cmFuc2l0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoWydiYWNrZ3JvdW5kLWNvbG9yJywgJ2JveC1zaGFkb3cnLCAnYm9yZGVyLWNvbG9yJ10sIHtcbiAgICAgIGR1cmF0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5kdXJhdGlvbi5zaG9ydFxuICAgIH0pLFxuICAgIGJvcmRlclJhZGl1czogJzUwJScsXG4gICAgcGFkZGluZzogMCxcbiAgICBtaW5XaWR0aDogMCxcbiAgICB3aWR0aDogNTYsXG4gICAgaGVpZ2h0OiA1NixcbiAgICB6SW5kZXg6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS56SW5kZXguZmFiLFxuICAgIGJveFNoYWRvdzogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnNoYWRvd3NbNl0sXG4gICAgJyY6YWN0aXZlJzoge1xuICAgICAgYm94U2hhZG93OiAodGhlbWUudmFycyB8fCB0aGVtZSkuc2hhZG93c1sxMl1cbiAgICB9LFxuICAgIGNvbG9yOiB0aGVtZS52YXJzID8gdGhlbWUudmFycy5wYWxldHRlLnRleHQucHJpbWFyeSA6IChfdGhlbWUkcGFsZXR0ZSRnZXRDb24gPSAoX3RoZW1lJHBhbGV0dGUgPSB0aGVtZS5wYWxldHRlKS5nZXRDb250cmFzdFRleHQpID09IG51bGwgPyB2b2lkIDAgOiBfdGhlbWUkcGFsZXR0ZSRnZXRDb24uY2FsbChfdGhlbWUkcGFsZXR0ZSwgdGhlbWUucGFsZXR0ZS5ncmV5WzMwMF0pLFxuICAgIGJhY2tncm91bmRDb2xvcjogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGUuZ3JleVszMDBdLFxuICAgICcmOmhvdmVyJzoge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiAodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZS5ncmV5LkExMDAsXG4gICAgICAvLyBSZXNldCBvbiB0b3VjaCBkZXZpY2VzLCBpdCBkb2Vzbid0IGFkZCBzcGVjaWZpY2l0eVxuICAgICAgJ0BtZWRpYSAoaG92ZXI6IG5vbmUpJzoge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlLmdyZXlbMzAwXVxuICAgICAgfSxcbiAgICAgIHRleHREZWNvcmF0aW9uOiAnbm9uZSdcbiAgICB9LFxuICAgIFtgJi4ke2ZhYkNsYXNzZXMuZm9jdXNWaXNpYmxlfWBdOiB7XG4gICAgICBib3hTaGFkb3c6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5zaGFkb3dzWzZdXG4gICAgfVxuICB9LCBvd25lclN0YXRlLnNpemUgPT09ICdzbWFsbCcgJiYge1xuICAgIHdpZHRoOiA0MCxcbiAgICBoZWlnaHQ6IDQwXG4gIH0sIG93bmVyU3RhdGUuc2l6ZSA9PT0gJ21lZGl1bScgJiYge1xuICAgIHdpZHRoOiA0OCxcbiAgICBoZWlnaHQ6IDQ4XG4gIH0sIG93bmVyU3RhdGUudmFyaWFudCA9PT0gJ2V4dGVuZGVkJyAmJiB7XG4gICAgYm9yZGVyUmFkaXVzOiA0OCAvIDIsXG4gICAgcGFkZGluZzogJzAgMTZweCcsXG4gICAgd2lkdGg6ICdhdXRvJyxcbiAgICBtaW5IZWlnaHQ6ICdhdXRvJyxcbiAgICBtaW5XaWR0aDogNDgsXG4gICAgaGVpZ2h0OiA0OFxuICB9LCBvd25lclN0YXRlLnZhcmlhbnQgPT09ICdleHRlbmRlZCcgJiYgb3duZXJTdGF0ZS5zaXplID09PSAnc21hbGwnICYmIHtcbiAgICB3aWR0aDogJ2F1dG8nLFxuICAgIHBhZGRpbmc6ICcwIDhweCcsXG4gICAgYm9yZGVyUmFkaXVzOiAzNCAvIDIsXG4gICAgbWluV2lkdGg6IDM0LFxuICAgIGhlaWdodDogMzRcbiAgfSwgb3duZXJTdGF0ZS52YXJpYW50ID09PSAnZXh0ZW5kZWQnICYmIG93bmVyU3RhdGUuc2l6ZSA9PT0gJ21lZGl1bScgJiYge1xuICAgIHdpZHRoOiAnYXV0bycsXG4gICAgcGFkZGluZzogJzAgMTZweCcsXG4gICAgYm9yZGVyUmFkaXVzOiA0MCAvIDIsXG4gICAgbWluV2lkdGg6IDQwLFxuICAgIGhlaWdodDogNDBcbiAgfSwgb3duZXJTdGF0ZS5jb2xvciA9PT0gJ2luaGVyaXQnICYmIHtcbiAgICBjb2xvcjogJ2luaGVyaXQnXG4gIH0pO1xufSwgKHtcbiAgdGhlbWUsXG4gIG93bmVyU3RhdGVcbn0pID0+IF9leHRlbmRzKHt9LCBvd25lclN0YXRlLmNvbG9yICE9PSAnaW5oZXJpdCcgJiYgb3duZXJTdGF0ZS5jb2xvciAhPT0gJ2RlZmF1bHQnICYmICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlW293bmVyU3RhdGUuY29sb3JdICE9IG51bGwgJiYge1xuICBjb2xvcjogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGVbb3duZXJTdGF0ZS5jb2xvcl0uY29udHJhc3RUZXh0LFxuICBiYWNrZ3JvdW5kQ29sb3I6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlW293bmVyU3RhdGUuY29sb3JdLm1haW4sXG4gICcmOmhvdmVyJzoge1xuICAgIGJhY2tncm91bmRDb2xvcjogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGVbb3duZXJTdGF0ZS5jb2xvcl0uZGFyayxcbiAgICAvLyBSZXNldCBvbiB0b3VjaCBkZXZpY2VzLCBpdCBkb2Vzbid0IGFkZCBzcGVjaWZpY2l0eVxuICAgICdAbWVkaWEgKGhvdmVyOiBub25lKSc6IHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGVbb3duZXJTdGF0ZS5jb2xvcl0ubWFpblxuICAgIH1cbiAgfVxufSksICh7XG4gIHRoZW1lXG59KSA9PiAoe1xuICBbYCYuJHtmYWJDbGFzc2VzLmRpc2FibGVkfWBdOiB7XG4gICAgY29sb3I6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlLmFjdGlvbi5kaXNhYmxlZCxcbiAgICBib3hTaGFkb3c6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5zaGFkb3dzWzBdLFxuICAgIGJhY2tncm91bmRDb2xvcjogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGUuYWN0aW9uLmRpc2FibGVkQmFja2dyb3VuZFxuICB9XG59KSk7XG5jb25zdCBGYWIgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBGYWIoaW5Qcm9wcywgcmVmKSB7XG4gIGNvbnN0IHByb3BzID0gdXNlRGVmYXVsdFByb3BzKHtcbiAgICBwcm9wczogaW5Qcm9wcyxcbiAgICBuYW1lOiAnTXVpRmFiJ1xuICB9KTtcbiAgY29uc3Qge1xuICAgICAgY2hpbGRyZW4sXG4gICAgICBjbGFzc05hbWUsXG4gICAgICBjb2xvciA9ICdkZWZhdWx0JyxcbiAgICAgIGNvbXBvbmVudCA9ICdidXR0b24nLFxuICAgICAgZGlzYWJsZWQgPSBmYWxzZSxcbiAgICAgIGRpc2FibGVGb2N1c1JpcHBsZSA9IGZhbHNlLFxuICAgICAgZm9jdXNWaXNpYmxlQ2xhc3NOYW1lLFxuICAgICAgc2l6ZSA9ICdsYXJnZScsXG4gICAgICB2YXJpYW50ID0gJ2NpcmN1bGFyJ1xuICAgIH0gPSBwcm9wcyxcbiAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQpO1xuICBjb25zdCBvd25lclN0YXRlID0gX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgY29sb3IsXG4gICAgY29tcG9uZW50LFxuICAgIGRpc2FibGVkLFxuICAgIGRpc2FibGVGb2N1c1JpcHBsZSxcbiAgICBzaXplLFxuICAgIHZhcmlhbnRcbiAgfSk7XG4gIGNvbnN0IGNsYXNzZXMgPSB1c2VVdGlsaXR5Q2xhc3Nlcyhvd25lclN0YXRlKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KEZhYlJvb3QsIF9leHRlbmRzKHtcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWUpLFxuICAgIGNvbXBvbmVudDogY29tcG9uZW50LFxuICAgIGRpc2FibGVkOiBkaXNhYmxlZCxcbiAgICBmb2N1c1JpcHBsZTogIWRpc2FibGVGb2N1c1JpcHBsZSxcbiAgICBmb2N1c1Zpc2libGVDbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5mb2N1c1Zpc2libGUsIGZvY3VzVmlzaWJsZUNsYXNzTmFtZSksXG4gICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZSxcbiAgICByZWY6IHJlZlxuICB9LCBvdGhlciwge1xuICAgIGNsYXNzZXM6IGNsYXNzZXMsXG4gICAgY2hpbGRyZW46IGNoaWxkcmVuXG4gIH0pKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gRmFiLnByb3BUeXBlcyAvKiByZW1vdmUtcHJvcHR5cGVzICovID0ge1xuICAvLyDilIzilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIAgV2FybmluZyDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJBcbiAgLy8g4pSCIFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucy4g4pSCXG4gIC8vIOKUgiAgICBUbyB1cGRhdGUgdGhlbSwgZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gYHBucG0gcHJvcHR5cGVzYC4gICAgIOKUglxuICAvLyDilJTilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJhcbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogVGhlIGNvbG9yIG9mIHRoZSBjb21wb25lbnQuXG4gICAqIEl0IHN1cHBvcnRzIGJvdGggZGVmYXVsdCBhbmQgY3VzdG9tIHRoZW1lIGNvbG9ycywgd2hpY2ggY2FuIGJlIGFkZGVkIGFzIHNob3duIGluIHRoZVxuICAgKiBbcGFsZXR0ZSBjdXN0b21pemF0aW9uIGd1aWRlXShodHRwczovL211aS5jb20vbWF0ZXJpYWwtdWkvY3VzdG9taXphdGlvbi9wYWxldHRlLyNjdXN0b20tY29sb3JzKS5cbiAgICogQGRlZmF1bHQgJ2RlZmF1bHQnXG4gICAqL1xuICBjb2xvcjogUHJvcFR5cGVzIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi8ub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydkZWZhdWx0JywgJ2Vycm9yJywgJ2luZm8nLCAnaW5oZXJpdCcsICdwcmltYXJ5JywgJ3NlY29uZGFyeScsICdzdWNjZXNzJywgJ3dhcm5pbmcnXSksIFByb3BUeXBlcy5zdHJpbmddKSxcbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHJvb3Qgbm9kZS5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIEhUTUwgZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgY29tcG9uZW50IGlzIGRpc2FibGVkLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZGlzYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgIGtleWJvYXJkIGZvY3VzIHJpcHBsZSBpcyBkaXNhYmxlZC5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRpc2FibGVGb2N1c1JpcHBsZTogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSByaXBwbGUgZWZmZWN0IGlzIGRpc2FibGVkLlxuICAgKi9cbiAgZGlzYWJsZVJpcHBsZTogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBmb2N1c1Zpc2libGVDbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBUaGUgVVJMIHRvIGxpbmsgdG8gd2hlbiB0aGUgYnV0dG9uIGlzIGNsaWNrZWQuXG4gICAqIElmIGRlZmluZWQsIGFuIGBhYCBlbGVtZW50IHdpbGwgYmUgdXNlZCBhcyB0aGUgcm9vdCBub2RlLlxuICAgKi9cbiAgaHJlZjogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIFRoZSBzaXplIG9mIHRoZSBjb21wb25lbnQuXG4gICAqIGBzbWFsbGAgaXMgZXF1aXZhbGVudCB0byB0aGUgZGVuc2UgYnV0dG9uIHN0eWxpbmcuXG4gICAqIEBkZWZhdWx0ICdsYXJnZSdcbiAgICovXG4gIHNpemU6IFByb3BUeXBlcyAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsnc21hbGwnLCAnbWVkaXVtJywgJ2xhcmdlJ10pLCBQcm9wVHlwZXMuc3RyaW5nXSksXG4gIC8qKlxuICAgKiBUaGUgc3lzdGVtIHByb3AgdGhhdCBhbGxvd3MgZGVmaW5pbmcgc3lzdGVtIG92ZXJyaWRlcyBhcyB3ZWxsIGFzIGFkZGl0aW9uYWwgQ1NTIHN0eWxlcy5cbiAgICovXG4gIHN4OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLmJvb2xdKSksIFByb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSksXG4gIC8qKlxuICAgKiBUaGUgdmFyaWFudCB0byB1c2UuXG4gICAqIEBkZWZhdWx0ICdjaXJjdWxhcidcbiAgICovXG4gIHZhcmlhbnQ6IFByb3BUeXBlcyAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsnY2lyY3VsYXInLCAnZXh0ZW5kZWQnXSksIFByb3BUeXBlcy5zdHJpbmddKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IEZhYjsiLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJvbkNoYW5nZVwiLCBcIm1heFJvd3NcIiwgXCJtaW5Sb3dzXCIsIFwic3R5bGVcIiwgXCJ2YWx1ZVwiXTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyB1bnN0YWJsZV9kZWJvdW5jZSBhcyBkZWJvdW5jZSwgdW5zdGFibGVfdXNlRm9ya1JlZiBhcyB1c2VGb3JrUmVmLCB1bnN0YWJsZV91c2VFbmhhbmNlZEVmZmVjdCBhcyB1c2VFbmhhbmNlZEVmZmVjdCwgdW5zdGFibGVfb3duZXJXaW5kb3cgYXMgb3duZXJXaW5kb3cgfSBmcm9tICdAbXVpL3V0aWxzJztcbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5pbXBvcnQgeyBqc3hzIGFzIF9qc3hzIH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5mdW5jdGlvbiBnZXRTdHlsZVZhbHVlKHZhbHVlKSB7XG4gIHJldHVybiBwYXJzZUludCh2YWx1ZSwgMTApIHx8IDA7XG59XG5jb25zdCBzdHlsZXMgPSB7XG4gIHNoYWRvdzoge1xuICAgIC8vIFZpc2liaWxpdHkgbmVlZGVkIHRvIGhpZGUgdGhlIGV4dHJhIHRleHQgYXJlYSBvbiBpUGFkc1xuICAgIHZpc2liaWxpdHk6ICdoaWRkZW4nLFxuICAgIC8vIFJlbW92ZSBmcm9tIHRoZSBjb250ZW50IGZsb3dcbiAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAvLyBJZ25vcmUgdGhlIHNjcm9sbGJhciB3aWR0aFxuICAgIG92ZXJmbG93OiAnaGlkZGVuJyxcbiAgICBoZWlnaHQ6IDAsXG4gICAgdG9wOiAwLFxuICAgIGxlZnQ6IDAsXG4gICAgLy8gQ3JlYXRlIGEgbmV3IGxheWVyLCBpbmNyZWFzZSB0aGUgaXNvbGF0aW9uIG9mIHRoZSBjb21wdXRlZCB2YWx1ZXNcbiAgICB0cmFuc2Zvcm06ICd0cmFuc2xhdGVaKDApJ1xuICB9XG59O1xuZnVuY3Rpb24gaXNFbXB0eShvYmopIHtcbiAgcmV0dXJuIG9iaiA9PT0gdW5kZWZpbmVkIHx8IG9iaiA9PT0gbnVsbCB8fCBPYmplY3Qua2V5cyhvYmopLmxlbmd0aCA9PT0gMCB8fCBvYmoub3V0ZXJIZWlnaHRTdHlsZSA9PT0gMCAmJiAhb2JqLm92ZXJmbG93aW5nO1xufVxuXG4vKipcbiAqXG4gKiBEZW1vczpcbiAqXG4gKiAtIFtUZXh0YXJlYSBBdXRvc2l6ZV0oaHR0cHM6Ly9tdWkuY29tL21hdGVyaWFsLXVpL3JlYWN0LXRleHRhcmVhLWF1dG9zaXplLylcbiAqXG4gKiBBUEk6XG4gKlxuICogLSBbVGV4dGFyZWFBdXRvc2l6ZSBBUEldKGh0dHBzOi8vbXVpLmNvbS9tYXRlcmlhbC11aS9hcGkvdGV4dGFyZWEtYXV0b3NpemUvKVxuICovXG5jb25zdCBUZXh0YXJlYUF1dG9zaXplID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gVGV4dGFyZWFBdXRvc2l6ZShwcm9wcywgZm9yd2FyZGVkUmVmKSB7XG4gIGNvbnN0IHtcbiAgICAgIG9uQ2hhbmdlLFxuICAgICAgbWF4Um93cyxcbiAgICAgIG1pblJvd3MgPSAxLFxuICAgICAgc3R5bGUsXG4gICAgICB2YWx1ZVxuICAgIH0gPSBwcm9wcyxcbiAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQpO1xuICBjb25zdCB7XG4gICAgY3VycmVudDogaXNDb250cm9sbGVkXG4gIH0gPSBSZWFjdC51c2VSZWYodmFsdWUgIT0gbnVsbCk7XG4gIGNvbnN0IGlucHV0UmVmID0gUmVhY3QudXNlUmVmKG51bGwpO1xuICBjb25zdCBoYW5kbGVSZWYgPSB1c2VGb3JrUmVmKGZvcndhcmRlZFJlZiwgaW5wdXRSZWYpO1xuICBjb25zdCBoZWlnaHRSZWYgPSBSZWFjdC51c2VSZWYobnVsbCk7XG4gIGNvbnN0IHNoYWRvd1JlZiA9IFJlYWN0LnVzZVJlZihudWxsKTtcbiAgY29uc3QgY2FsY3VsYXRlVGV4dGFyZWFTdHlsZXMgPSBSZWFjdC51c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgY29uc3QgaW5wdXQgPSBpbnB1dFJlZi5jdXJyZW50O1xuICAgIGNvbnN0IGNvbnRhaW5lcldpbmRvdyA9IG93bmVyV2luZG93KGlucHV0KTtcbiAgICBjb25zdCBjb21wdXRlZFN0eWxlID0gY29udGFpbmVyV2luZG93LmdldENvbXB1dGVkU3R5bGUoaW5wdXQpO1xuXG4gICAgLy8gSWYgaW5wdXQncyB3aWR0aCBpcyBzaHJ1bmsgYW5kIGl0J3Mgbm90IHZpc2libGUsIGRvbid0IHN5bmMgaGVpZ2h0LlxuICAgIGlmIChjb21wdXRlZFN0eWxlLndpZHRoID09PSAnMHB4Jykge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgb3V0ZXJIZWlnaHRTdHlsZTogMCxcbiAgICAgICAgb3ZlcmZsb3dpbmc6IGZhbHNlXG4gICAgICB9O1xuICAgIH1cbiAgICBjb25zdCBpbnB1dFNoYWxsb3cgPSBzaGFkb3dSZWYuY3VycmVudDtcbiAgICBpbnB1dFNoYWxsb3cuc3R5bGUud2lkdGggPSBjb21wdXRlZFN0eWxlLndpZHRoO1xuICAgIGlucHV0U2hhbGxvdy52YWx1ZSA9IGlucHV0LnZhbHVlIHx8IHByb3BzLnBsYWNlaG9sZGVyIHx8ICd4JztcbiAgICBpZiAoaW5wdXRTaGFsbG93LnZhbHVlLnNsaWNlKC0xKSA9PT0gJ1xcbicpIHtcbiAgICAgIC8vIENlcnRhaW4gZm9udHMgd2hpY2ggb3ZlcmZsb3cgdGhlIGxpbmUgaGVpZ2h0IHdpbGwgY2F1c2UgdGhlIHRleHRhcmVhXG4gICAgICAvLyB0byByZXBvcnQgYSBkaWZmZXJlbnQgc2Nyb2xsSGVpZ2h0IGRlcGVuZGluZyBvbiB3aGV0aGVyIHRoZSBsYXN0IGxpbmVcbiAgICAgIC8vIGlzIGVtcHR5LiBNYWtlIGl0IG5vbi1lbXB0eSB0byBhdm9pZCB0aGlzIGlzc3VlLlxuICAgICAgaW5wdXRTaGFsbG93LnZhbHVlICs9ICcgJztcbiAgICB9XG4gICAgY29uc3QgYm94U2l6aW5nID0gY29tcHV0ZWRTdHlsZS5ib3hTaXppbmc7XG4gICAgY29uc3QgcGFkZGluZyA9IGdldFN0eWxlVmFsdWUoY29tcHV0ZWRTdHlsZS5wYWRkaW5nQm90dG9tKSArIGdldFN0eWxlVmFsdWUoY29tcHV0ZWRTdHlsZS5wYWRkaW5nVG9wKTtcbiAgICBjb25zdCBib3JkZXIgPSBnZXRTdHlsZVZhbHVlKGNvbXB1dGVkU3R5bGUuYm9yZGVyQm90dG9tV2lkdGgpICsgZ2V0U3R5bGVWYWx1ZShjb21wdXRlZFN0eWxlLmJvcmRlclRvcFdpZHRoKTtcblxuICAgIC8vIFRoZSBoZWlnaHQgb2YgdGhlIGlubmVyIGNvbnRlbnRcbiAgICBjb25zdCBpbm5lckhlaWdodCA9IGlucHV0U2hhbGxvdy5zY3JvbGxIZWlnaHQ7XG5cbiAgICAvLyBNZWFzdXJlIGhlaWdodCBvZiBhIHRleHRhcmVhIHdpdGggYSBzaW5nbGUgcm93XG4gICAgaW5wdXRTaGFsbG93LnZhbHVlID0gJ3gnO1xuICAgIGNvbnN0IHNpbmdsZVJvd0hlaWdodCA9IGlucHV0U2hhbGxvdy5zY3JvbGxIZWlnaHQ7XG5cbiAgICAvLyBUaGUgaGVpZ2h0IG9mIHRoZSBvdXRlciBjb250ZW50XG4gICAgbGV0IG91dGVySGVpZ2h0ID0gaW5uZXJIZWlnaHQ7XG4gICAgaWYgKG1pblJvd3MpIHtcbiAgICAgIG91dGVySGVpZ2h0ID0gTWF0aC5tYXgoTnVtYmVyKG1pblJvd3MpICogc2luZ2xlUm93SGVpZ2h0LCBvdXRlckhlaWdodCk7XG4gICAgfVxuICAgIGlmIChtYXhSb3dzKSB7XG4gICAgICBvdXRlckhlaWdodCA9IE1hdGgubWluKE51bWJlcihtYXhSb3dzKSAqIHNpbmdsZVJvd0hlaWdodCwgb3V0ZXJIZWlnaHQpO1xuICAgIH1cbiAgICBvdXRlckhlaWdodCA9IE1hdGgubWF4KG91dGVySGVpZ2h0LCBzaW5nbGVSb3dIZWlnaHQpO1xuXG4gICAgLy8gVGFrZSB0aGUgYm94IHNpemluZyBpbnRvIGFjY291bnQgZm9yIGFwcGx5aW5nIHRoaXMgdmFsdWUgYXMgYSBzdHlsZS5cbiAgICBjb25zdCBvdXRlckhlaWdodFN0eWxlID0gb3V0ZXJIZWlnaHQgKyAoYm94U2l6aW5nID09PSAnYm9yZGVyLWJveCcgPyBwYWRkaW5nICsgYm9yZGVyIDogMCk7XG4gICAgY29uc3Qgb3ZlcmZsb3dpbmcgPSBNYXRoLmFicyhvdXRlckhlaWdodCAtIGlubmVySGVpZ2h0KSA8PSAxO1xuICAgIHJldHVybiB7XG4gICAgICBvdXRlckhlaWdodFN0eWxlLFxuICAgICAgb3ZlcmZsb3dpbmdcbiAgICB9O1xuICB9LCBbbWF4Um93cywgbWluUm93cywgcHJvcHMucGxhY2Vob2xkZXJdKTtcbiAgY29uc3Qgc3luY0hlaWdodCA9IFJlYWN0LnVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICBjb25zdCB0ZXh0YXJlYVN0eWxlcyA9IGNhbGN1bGF0ZVRleHRhcmVhU3R5bGVzKCk7XG4gICAgaWYgKGlzRW1wdHkodGV4dGFyZWFTdHlsZXMpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IG91dGVySGVpZ2h0U3R5bGUgPSB0ZXh0YXJlYVN0eWxlcy5vdXRlckhlaWdodFN0eWxlO1xuICAgIGNvbnN0IGlucHV0ID0gaW5wdXRSZWYuY3VycmVudDtcbiAgICBpZiAoaGVpZ2h0UmVmLmN1cnJlbnQgIT09IG91dGVySGVpZ2h0U3R5bGUpIHtcbiAgICAgIGhlaWdodFJlZi5jdXJyZW50ID0gb3V0ZXJIZWlnaHRTdHlsZTtcbiAgICAgIGlucHV0LnN0eWxlLmhlaWdodCA9IGAke291dGVySGVpZ2h0U3R5bGV9cHhgO1xuICAgIH1cbiAgICBpbnB1dC5zdHlsZS5vdmVyZmxvdyA9IHRleHRhcmVhU3R5bGVzLm92ZXJmbG93aW5nID8gJ2hpZGRlbicgOiAnJztcbiAgfSwgW2NhbGN1bGF0ZVRleHRhcmVhU3R5bGVzXSk7XG4gIHVzZUVuaGFuY2VkRWZmZWN0KCgpID0+IHtcbiAgICBjb25zdCBoYW5kbGVSZXNpemUgPSAoKSA9PiB7XG4gICAgICBzeW5jSGVpZ2h0KCk7XG4gICAgfTtcbiAgICAvLyBXb3JrYXJvdW5kIGEgXCJSZXNpemVPYnNlcnZlciBsb29wIGNvbXBsZXRlZCB3aXRoIHVuZGVsaXZlcmVkIG5vdGlmaWNhdGlvbnNcIiBlcnJvclxuICAgIC8vIGluIHRlc3QuXG4gICAgLy8gTm90ZSB0aGF0IHdlIG1pZ2h0IG5lZWQgdG8gdXNlIHRoaXMgbG9naWMgaW4gcHJvZHVjdGlvbiBwZXIgaHR0cHM6Ly9naXRodWIuY29tL1dJQ0cvcmVzaXplLW9ic2VydmVyL2lzc3Vlcy8zOFxuICAgIC8vIEFsc28gc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9tdWkvbXVpLXgvaXNzdWVzLzg3MzNcbiAgICBsZXQgckFGO1xuICAgIGNvbnN0IHJBRkhhbmRsZVJlc2l6ZSA9ICgpID0+IHtcbiAgICAgIGNhbmNlbEFuaW1hdGlvbkZyYW1lKHJBRik7XG4gICAgICByQUYgPSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgICBoYW5kbGVSZXNpemUoKTtcbiAgICAgIH0pO1xuICAgIH07XG4gICAgY29uc3QgZGVib3VuY2VIYW5kbGVSZXNpemUgPSBkZWJvdW5jZShoYW5kbGVSZXNpemUpO1xuICAgIGNvbnN0IGlucHV0ID0gaW5wdXRSZWYuY3VycmVudDtcbiAgICBjb25zdCBjb250YWluZXJXaW5kb3cgPSBvd25lcldpbmRvdyhpbnB1dCk7XG4gICAgY29udGFpbmVyV2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIGRlYm91bmNlSGFuZGxlUmVzaXplKTtcbiAgICBsZXQgcmVzaXplT2JzZXJ2ZXI7XG4gICAgaWYgKHR5cGVvZiBSZXNpemVPYnNlcnZlciAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHJlc2l6ZU9ic2VydmVyID0gbmV3IFJlc2l6ZU9ic2VydmVyKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAndGVzdCcgPyByQUZIYW5kbGVSZXNpemUgOiBoYW5kbGVSZXNpemUpO1xuICAgICAgcmVzaXplT2JzZXJ2ZXIub2JzZXJ2ZShpbnB1dCk7XG4gICAgfVxuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBkZWJvdW5jZUhhbmRsZVJlc2l6ZS5jbGVhcigpO1xuICAgICAgY2FuY2VsQW5pbWF0aW9uRnJhbWUockFGKTtcbiAgICAgIGNvbnRhaW5lcldpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLCBkZWJvdW5jZUhhbmRsZVJlc2l6ZSk7XG4gICAgICBpZiAocmVzaXplT2JzZXJ2ZXIpIHtcbiAgICAgICAgcmVzaXplT2JzZXJ2ZXIuZGlzY29ubmVjdCgpO1xuICAgICAgfVxuICAgIH07XG4gIH0sIFtjYWxjdWxhdGVUZXh0YXJlYVN0eWxlcywgc3luY0hlaWdodF0pO1xuICB1c2VFbmhhbmNlZEVmZmVjdCgoKSA9PiB7XG4gICAgc3luY0hlaWdodCgpO1xuICB9KTtcbiAgY29uc3QgaGFuZGxlQ2hhbmdlID0gZXZlbnQgPT4ge1xuICAgIGlmICghaXNDb250cm9sbGVkKSB7XG4gICAgICBzeW5jSGVpZ2h0KCk7XG4gICAgfVxuICAgIGlmIChvbkNoYW5nZSkge1xuICAgICAgb25DaGFuZ2UoZXZlbnQpO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4cyhSZWFjdC5GcmFnbWVudCwge1xuICAgIGNoaWxkcmVuOiBbLyojX19QVVJFX18qL19qc3goXCJ0ZXh0YXJlYVwiLCBfZXh0ZW5kcyh7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICBvbkNoYW5nZTogaGFuZGxlQ2hhbmdlLFxuICAgICAgcmVmOiBoYW5kbGVSZWZcbiAgICAgIC8vIEFwcGx5IHRoZSByb3dzIHByb3AgdG8gZ2V0IGEgXCJjb3JyZWN0XCIgZmlyc3QgU1NSIHBhaW50XG4gICAgICAsXG4gICAgICByb3dzOiBtaW5Sb3dzLFxuICAgICAgc3R5bGU6IHN0eWxlXG4gICAgfSwgb3RoZXIpKSwgLyojX19QVVJFX18qL19qc3goXCJ0ZXh0YXJlYVwiLCB7XG4gICAgICBcImFyaWEtaGlkZGVuXCI6IHRydWUsXG4gICAgICBjbGFzc05hbWU6IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIHJlYWRPbmx5OiB0cnVlLFxuICAgICAgcmVmOiBzaGFkb3dSZWYsXG4gICAgICB0YWJJbmRleDogLTEsXG4gICAgICBzdHlsZTogX2V4dGVuZHMoe30sIHN0eWxlcy5zaGFkb3csIHN0eWxlLCB7XG4gICAgICAgIHBhZGRpbmdUb3A6IDAsXG4gICAgICAgIHBhZGRpbmdCb3R0b206IDBcbiAgICAgIH0pXG4gICAgfSldXG4gIH0pO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBUZXh0YXJlYUF1dG9zaXplLnByb3BUeXBlcyAvKiByZW1vdmUtcHJvcHR5cGVzICovID0ge1xuICAvLyDilIzilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIAgV2FybmluZyDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJBcbiAgLy8g4pSCIFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucy4g4pSCXG4gIC8vIOKUgiBUbyB1cGRhdGUgdGhlbSwgZWRpdCB0aGUgVHlwZVNjcmlwdCB0eXBlcyBhbmQgcnVuIGBwbnBtIHByb3B0eXBlc2AuIOKUglxuICAvLyDilJTilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJhcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIE1heGltdW0gbnVtYmVyIG9mIHJvd3MgdG8gZGlzcGxheS5cbiAgICovXG4gIG1heFJvd3M6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zdHJpbmddKSxcbiAgLyoqXG4gICAqIE1pbmltdW0gbnVtYmVyIG9mIHJvd3MgdG8gZGlzcGxheS5cbiAgICogQGRlZmF1bHQgMVxuICAgKi9cbiAgbWluUm93czogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnN0cmluZ10pLFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25DaGFuZ2U6IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgcGxhY2Vob2xkZXI6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBzdHlsZTogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHZhbHVlOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMuc3RyaW5nKSwgUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnN0cmluZ10pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgVGV4dGFyZWFBdXRvc2l6ZTsiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmb3JtQ29udHJvbFN0YXRlKHtcbiAgcHJvcHMsXG4gIHN0YXRlcyxcbiAgbXVpRm9ybUNvbnRyb2xcbn0pIHtcbiAgcmV0dXJuIHN0YXRlcy5yZWR1Y2UoKGFjYywgc3RhdGUpID0+IHtcbiAgICBhY2Nbc3RhdGVdID0gcHJvcHNbc3RhdGVdO1xuICAgIGlmIChtdWlGb3JtQ29udHJvbCkge1xuICAgICAgaWYgKHR5cGVvZiBwcm9wc1tzdGF0ZV0gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGFjY1tzdGF0ZV0gPSBtdWlGb3JtQ29udHJvbFtzdGF0ZV07XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBhY2M7XG4gIH0sIHt9KTtcbn0iLCIvLyBTdXBwb3J0cyBkZXRlcm1pbmF0aW9uIG9mIGlzQ29udHJvbGxlZCgpLlxuLy8gQ29udHJvbGxlZCBpbnB1dCBhY2NlcHRzIGl0cyBjdXJyZW50IHZhbHVlIGFzIGEgcHJvcC5cbi8vXG4vLyBAc2VlIGh0dHBzOi8vZmFjZWJvb2suZ2l0aHViLmlvL3JlYWN0L2RvY3MvZm9ybXMuaHRtbCNjb250cm9sbGVkLWNvbXBvbmVudHNcbi8vIEBwYXJhbSB2YWx1ZVxuLy8gQHJldHVybnMge2Jvb2xlYW59IHRydWUgaWYgc3RyaW5nIChpbmNsdWRpbmcgJycpIG9yIG51bWJlciAoaW5jbHVkaW5nIHplcm8pXG5leHBvcnQgZnVuY3Rpb24gaGFzVmFsdWUodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgIShBcnJheS5pc0FycmF5KHZhbHVlKSAmJiB2YWx1ZS5sZW5ndGggPT09IDApO1xufVxuXG4vLyBEZXRlcm1pbmUgaWYgZmllbGQgaXMgZW1wdHkgb3IgZmlsbGVkLlxuLy8gUmVzcG9uc2UgZGV0ZXJtaW5lcyBpZiBsYWJlbCBpcyBwcmVzZW50ZWQgYWJvdmUgZmllbGQgb3IgYXMgcGxhY2Vob2xkZXIuXG4vL1xuLy8gQHBhcmFtIG9ialxuLy8gQHBhcmFtIFNTUlxuLy8gQHJldHVybnMge2Jvb2xlYW59IEZhbHNlIHdoZW4gbm90IHByZXNlbnQgb3IgZW1wdHkgc3RyaW5nLlxuLy8gICAgICAgICAgICAgICAgICAgIFRydWUgd2hlbiBhbnkgbnVtYmVyIG9yIHN0cmluZyB3aXRoIGxlbmd0aC5cbmV4cG9ydCBmdW5jdGlvbiBpc0ZpbGxlZChvYmosIFNTUiA9IGZhbHNlKSB7XG4gIHJldHVybiBvYmogJiYgKGhhc1ZhbHVlKG9iai52YWx1ZSkgJiYgb2JqLnZhbHVlICE9PSAnJyB8fCBTU1IgJiYgaGFzVmFsdWUob2JqLmRlZmF1bHRWYWx1ZSkgJiYgb2JqLmRlZmF1bHRWYWx1ZSAhPT0gJycpO1xufVxuXG4vLyBEZXRlcm1pbmUgaWYgYW4gSW5wdXQgaXMgYWRvcm5lZCBvbiBzdGFydC5cbi8vIEl0J3MgY29ycmVzcG9uZGluZyB0byB0aGUgbGVmdCB3aXRoIExUUi5cbi8vXG4vLyBAcGFyYW0gb2JqXG4vLyBAcmV0dXJucyB7Ym9vbGVhbn0gRmFsc2Ugd2hlbiBubyBhZG9ybm1lbnRzLlxuLy8gICAgICAgICAgICAgICAgICAgIFRydWUgd2hlbiBhZG9ybmVkIGF0IHRoZSBzdGFydC5cbmV4cG9ydCBmdW5jdGlvbiBpc0Fkb3JuZWRTdGFydChvYmopIHtcbiAgcmV0dXJuIG9iai5zdGFydEFkb3JubWVudDtcbn0iLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX2Zvcm1hdE11aUVycm9yTWVzc2FnZSBmcm9tIFwiQG11aS91dGlscy9mb3JtYXRNdWlFcnJvck1lc3NhZ2VcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImFyaWEtZGVzY3JpYmVkYnlcIiwgXCJhdXRvQ29tcGxldGVcIiwgXCJhdXRvRm9jdXNcIiwgXCJjbGFzc05hbWVcIiwgXCJjb2xvclwiLCBcImNvbXBvbmVudHNcIiwgXCJjb21wb25lbnRzUHJvcHNcIiwgXCJkZWZhdWx0VmFsdWVcIiwgXCJkaXNhYmxlZFwiLCBcImRpc2FibGVJbmplY3RpbmdHbG9iYWxTdHlsZXNcIiwgXCJlbmRBZG9ybm1lbnRcIiwgXCJlcnJvclwiLCBcImZ1bGxXaWR0aFwiLCBcImlkXCIsIFwiaW5wdXRDb21wb25lbnRcIiwgXCJpbnB1dFByb3BzXCIsIFwiaW5wdXRSZWZcIiwgXCJtYXJnaW5cIiwgXCJtYXhSb3dzXCIsIFwibWluUm93c1wiLCBcIm11bHRpbGluZVwiLCBcIm5hbWVcIiwgXCJvbkJsdXJcIiwgXCJvbkNoYW5nZVwiLCBcIm9uQ2xpY2tcIiwgXCJvbkZvY3VzXCIsIFwib25LZXlEb3duXCIsIFwib25LZXlVcFwiLCBcInBsYWNlaG9sZGVyXCIsIFwicmVhZE9ubHlcIiwgXCJyZW5kZXJTdWZmaXhcIiwgXCJyb3dzXCIsIFwic2l6ZVwiLCBcInNsb3RQcm9wc1wiLCBcInNsb3RzXCIsIFwic3RhcnRBZG9ybm1lbnRcIiwgXCJ0eXBlXCIsIFwidmFsdWVcIl07XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgZWxlbWVudFR5cGVBY2NlcHRpbmdSZWYgZnJvbSAnQG11aS91dGlscy9lbGVtZW50VHlwZUFjY2VwdGluZ1JlZic7XG5pbXBvcnQgcmVmVHlwZSBmcm9tICdAbXVpL3V0aWxzL3JlZlR5cGUnO1xuaW1wb3J0IGNvbXBvc2VDbGFzc2VzIGZyb20gJ0BtdWkvdXRpbHMvY29tcG9zZUNsYXNzZXMnO1xuaW1wb3J0IGlzSG9zdENvbXBvbmVudCBmcm9tICdAbXVpL3V0aWxzL2lzSG9zdENvbXBvbmVudCc7XG5pbXBvcnQgVGV4dGFyZWFBdXRvc2l6ZSBmcm9tICcuLi9UZXh0YXJlYUF1dG9zaXplJztcbmltcG9ydCBmb3JtQ29udHJvbFN0YXRlIGZyb20gJy4uL0Zvcm1Db250cm9sL2Zvcm1Db250cm9sU3RhdGUnO1xuaW1wb3J0IEZvcm1Db250cm9sQ29udGV4dCBmcm9tICcuLi9Gb3JtQ29udHJvbC9Gb3JtQ29udHJvbENvbnRleHQnO1xuaW1wb3J0IHVzZUZvcm1Db250cm9sIGZyb20gJy4uL0Zvcm1Db250cm9sL3VzZUZvcm1Db250cm9sJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnLi4vc3R5bGVzL3N0eWxlZCc7XG5pbXBvcnQgeyB1c2VEZWZhdWx0UHJvcHMgfSBmcm9tICcuLi9EZWZhdWx0UHJvcHNQcm92aWRlcic7XG5pbXBvcnQgY2FwaXRhbGl6ZSBmcm9tICcuLi91dGlscy9jYXBpdGFsaXplJztcbmltcG9ydCB1c2VGb3JrUmVmIGZyb20gJy4uL3V0aWxzL3VzZUZvcmtSZWYnO1xuaW1wb3J0IHVzZUVuaGFuY2VkRWZmZWN0IGZyb20gJy4uL3V0aWxzL3VzZUVuaGFuY2VkRWZmZWN0JztcbmltcG9ydCBHbG9iYWxTdHlsZXMgZnJvbSAnLi4vR2xvYmFsU3R5bGVzJztcbmltcG9ydCB7IGlzRmlsbGVkIH0gZnJvbSAnLi91dGlscyc7XG5pbXBvcnQgaW5wdXRCYXNlQ2xhc3NlcywgeyBnZXRJbnB1dEJhc2VVdGlsaXR5Q2xhc3MgfSBmcm9tICcuL2lucHV0QmFzZUNsYXNzZXMnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmltcG9ydCB7IGpzeHMgYXMgX2pzeHMgfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmV4cG9ydCBjb25zdCByb290T3ZlcnJpZGVzUmVzb2x2ZXIgPSAocHJvcHMsIHN0eWxlcykgPT4ge1xuICBjb25zdCB7XG4gICAgb3duZXJTdGF0ZVxuICB9ID0gcHJvcHM7XG4gIHJldHVybiBbc3R5bGVzLnJvb3QsIG93bmVyU3RhdGUuZm9ybUNvbnRyb2wgJiYgc3R5bGVzLmZvcm1Db250cm9sLCBvd25lclN0YXRlLnN0YXJ0QWRvcm5tZW50ICYmIHN0eWxlcy5hZG9ybmVkU3RhcnQsIG93bmVyU3RhdGUuZW5kQWRvcm5tZW50ICYmIHN0eWxlcy5hZG9ybmVkRW5kLCBvd25lclN0YXRlLmVycm9yICYmIHN0eWxlcy5lcnJvciwgb3duZXJTdGF0ZS5zaXplID09PSAnc21hbGwnICYmIHN0eWxlcy5zaXplU21hbGwsIG93bmVyU3RhdGUubXVsdGlsaW5lICYmIHN0eWxlcy5tdWx0aWxpbmUsIG93bmVyU3RhdGUuY29sb3IgJiYgc3R5bGVzW2Bjb2xvciR7Y2FwaXRhbGl6ZShvd25lclN0YXRlLmNvbG9yKX1gXSwgb3duZXJTdGF0ZS5mdWxsV2lkdGggJiYgc3R5bGVzLmZ1bGxXaWR0aCwgb3duZXJTdGF0ZS5oaWRkZW5MYWJlbCAmJiBzdHlsZXMuaGlkZGVuTGFiZWxdO1xufTtcbmV4cG9ydCBjb25zdCBpbnB1dE92ZXJyaWRlc1Jlc29sdmVyID0gKHByb3BzLCBzdHlsZXMpID0+IHtcbiAgY29uc3Qge1xuICAgIG93bmVyU3RhdGVcbiAgfSA9IHByb3BzO1xuICByZXR1cm4gW3N0eWxlcy5pbnB1dCwgb3duZXJTdGF0ZS5zaXplID09PSAnc21hbGwnICYmIHN0eWxlcy5pbnB1dFNpemVTbWFsbCwgb3duZXJTdGF0ZS5tdWx0aWxpbmUgJiYgc3R5bGVzLmlucHV0TXVsdGlsaW5lLCBvd25lclN0YXRlLnR5cGUgPT09ICdzZWFyY2gnICYmIHN0eWxlcy5pbnB1dFR5cGVTZWFyY2gsIG93bmVyU3RhdGUuc3RhcnRBZG9ybm1lbnQgJiYgc3R5bGVzLmlucHV0QWRvcm5lZFN0YXJ0LCBvd25lclN0YXRlLmVuZEFkb3JubWVudCAmJiBzdHlsZXMuaW5wdXRBZG9ybmVkRW5kLCBvd25lclN0YXRlLmhpZGRlbkxhYmVsICYmIHN0eWxlcy5pbnB1dEhpZGRlbkxhYmVsXTtcbn07XG5jb25zdCB1c2VVdGlsaXR5Q2xhc3NlcyA9IG93bmVyU3RhdGUgPT4ge1xuICBjb25zdCB7XG4gICAgY2xhc3NlcyxcbiAgICBjb2xvcixcbiAgICBkaXNhYmxlZCxcbiAgICBlcnJvcixcbiAgICBlbmRBZG9ybm1lbnQsXG4gICAgZm9jdXNlZCxcbiAgICBmb3JtQ29udHJvbCxcbiAgICBmdWxsV2lkdGgsXG4gICAgaGlkZGVuTGFiZWwsXG4gICAgbXVsdGlsaW5lLFxuICAgIHJlYWRPbmx5LFxuICAgIHNpemUsXG4gICAgc3RhcnRBZG9ybm1lbnQsXG4gICAgdHlwZVxuICB9ID0gb3duZXJTdGF0ZTtcbiAgY29uc3Qgc2xvdHMgPSB7XG4gICAgcm9vdDogWydyb290JywgYGNvbG9yJHtjYXBpdGFsaXplKGNvbG9yKX1gLCBkaXNhYmxlZCAmJiAnZGlzYWJsZWQnLCBlcnJvciAmJiAnZXJyb3InLCBmdWxsV2lkdGggJiYgJ2Z1bGxXaWR0aCcsIGZvY3VzZWQgJiYgJ2ZvY3VzZWQnLCBmb3JtQ29udHJvbCAmJiAnZm9ybUNvbnRyb2wnLCBzaXplICYmIHNpemUgIT09ICdtZWRpdW0nICYmIGBzaXplJHtjYXBpdGFsaXplKHNpemUpfWAsIG11bHRpbGluZSAmJiAnbXVsdGlsaW5lJywgc3RhcnRBZG9ybm1lbnQgJiYgJ2Fkb3JuZWRTdGFydCcsIGVuZEFkb3JubWVudCAmJiAnYWRvcm5lZEVuZCcsIGhpZGRlbkxhYmVsICYmICdoaWRkZW5MYWJlbCcsIHJlYWRPbmx5ICYmICdyZWFkT25seSddLFxuICAgIGlucHV0OiBbJ2lucHV0JywgZGlzYWJsZWQgJiYgJ2Rpc2FibGVkJywgdHlwZSA9PT0gJ3NlYXJjaCcgJiYgJ2lucHV0VHlwZVNlYXJjaCcsIG11bHRpbGluZSAmJiAnaW5wdXRNdWx0aWxpbmUnLCBzaXplID09PSAnc21hbGwnICYmICdpbnB1dFNpemVTbWFsbCcsIGhpZGRlbkxhYmVsICYmICdpbnB1dEhpZGRlbkxhYmVsJywgc3RhcnRBZG9ybm1lbnQgJiYgJ2lucHV0QWRvcm5lZFN0YXJ0JywgZW5kQWRvcm5tZW50ICYmICdpbnB1dEFkb3JuZWRFbmQnLCByZWFkT25seSAmJiAncmVhZE9ubHknXVxuICB9O1xuICByZXR1cm4gY29tcG9zZUNsYXNzZXMoc2xvdHMsIGdldElucHV0QmFzZVV0aWxpdHlDbGFzcywgY2xhc3Nlcyk7XG59O1xuZXhwb3J0IGNvbnN0IElucHV0QmFzZVJvb3QgPSBzdHlsZWQoJ2RpdicsIHtcbiAgbmFtZTogJ011aUlucHV0QmFzZScsXG4gIHNsb3Q6ICdSb290JyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IHJvb3RPdmVycmlkZXNSZXNvbHZlclxufSkoKHtcbiAgdGhlbWUsXG4gIG93bmVyU3RhdGVcbn0pID0+IF9leHRlbmRzKHt9LCB0aGVtZS50eXBvZ3JhcGh5LmJvZHkxLCB7XG4gIGNvbG9yOiAodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZS50ZXh0LnByaW1hcnksXG4gIGxpbmVIZWlnaHQ6ICcxLjQzNzVlbScsXG4gIC8vIDIzcHhcbiAgYm94U2l6aW5nOiAnYm9yZGVyLWJveCcsXG4gIC8vIFByZXZlbnQgcGFkZGluZyBpc3N1ZSB3aXRoIGZ1bGxXaWR0aC5cbiAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gIGN1cnNvcjogJ3RleHQnLFxuICBkaXNwbGF5OiAnaW5saW5lLWZsZXgnLFxuICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgW2AmLiR7aW5wdXRCYXNlQ2xhc3Nlcy5kaXNhYmxlZH1gXToge1xuICAgIGNvbG9yOiAodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZS50ZXh0LmRpc2FibGVkLFxuICAgIGN1cnNvcjogJ2RlZmF1bHQnXG4gIH1cbn0sIG93bmVyU3RhdGUubXVsdGlsaW5lICYmIF9leHRlbmRzKHtcbiAgcGFkZGluZzogJzRweCAwIDVweCdcbn0sIG93bmVyU3RhdGUuc2l6ZSA9PT0gJ3NtYWxsJyAmJiB7XG4gIHBhZGRpbmdUb3A6IDFcbn0pLCBvd25lclN0YXRlLmZ1bGxXaWR0aCAmJiB7XG4gIHdpZHRoOiAnMTAwJSdcbn0pKTtcbmV4cG9ydCBjb25zdCBJbnB1dEJhc2VDb21wb25lbnQgPSBzdHlsZWQoJ2lucHV0Jywge1xuICBuYW1lOiAnTXVpSW5wdXRCYXNlJyxcbiAgc2xvdDogJ0lucHV0JyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IGlucHV0T3ZlcnJpZGVzUmVzb2x2ZXJcbn0pKCh7XG4gIHRoZW1lLFxuICBvd25lclN0YXRlXG59KSA9PiB7XG4gIGNvbnN0IGxpZ2h0ID0gdGhlbWUucGFsZXR0ZS5tb2RlID09PSAnbGlnaHQnO1xuICBjb25zdCBwbGFjZWhvbGRlciA9IF9leHRlbmRzKHtcbiAgICBjb2xvcjogJ2N1cnJlbnRDb2xvcidcbiAgfSwgdGhlbWUudmFycyA/IHtcbiAgICBvcGFjaXR5OiB0aGVtZS52YXJzLm9wYWNpdHkuaW5wdXRQbGFjZWhvbGRlclxuICB9IDoge1xuICAgIG9wYWNpdHk6IGxpZ2h0ID8gMC40MiA6IDAuNVxuICB9LCB7XG4gICAgdHJhbnNpdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCdvcGFjaXR5Jywge1xuICAgICAgZHVyYXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmR1cmF0aW9uLnNob3J0ZXJcbiAgICB9KVxuICB9KTtcbiAgY29uc3QgcGxhY2Vob2xkZXJIaWRkZW4gPSB7XG4gICAgb3BhY2l0eTogJzAgIWltcG9ydGFudCdcbiAgfTtcbiAgY29uc3QgcGxhY2Vob2xkZXJWaXNpYmxlID0gdGhlbWUudmFycyA/IHtcbiAgICBvcGFjaXR5OiB0aGVtZS52YXJzLm9wYWNpdHkuaW5wdXRQbGFjZWhvbGRlclxuICB9IDoge1xuICAgIG9wYWNpdHk6IGxpZ2h0ID8gMC40MiA6IDAuNVxuICB9O1xuICByZXR1cm4gX2V4dGVuZHMoe1xuICAgIGZvbnQ6ICdpbmhlcml0JyxcbiAgICBsZXR0ZXJTcGFjaW5nOiAnaW5oZXJpdCcsXG4gICAgY29sb3I6ICdjdXJyZW50Q29sb3InLFxuICAgIHBhZGRpbmc6ICc0cHggMCA1cHgnLFxuICAgIGJvcmRlcjogMCxcbiAgICBib3hTaXppbmc6ICdjb250ZW50LWJveCcsXG4gICAgYmFja2dyb3VuZDogJ25vbmUnLFxuICAgIGhlaWdodDogJzEuNDM3NWVtJyxcbiAgICAvLyBSZXNldCAyM3B4dGhlIG5hdGl2ZSBpbnB1dCBsaW5lLWhlaWdodFxuICAgIG1hcmdpbjogMCxcbiAgICAvLyBSZXNldCBmb3IgU2FmYXJpXG4gICAgV2Via2l0VGFwSGlnaGxpZ2h0Q29sb3I6ICd0cmFuc3BhcmVudCcsXG4gICAgZGlzcGxheTogJ2Jsb2NrJyxcbiAgICAvLyBNYWtlIHRoZSBmbGV4IGl0ZW0gc2hyaW5rIHdpdGggRmlyZWZveFxuICAgIG1pbldpZHRoOiAwLFxuICAgIHdpZHRoOiAnMTAwJScsXG4gICAgLy8gRml4IElFMTEgd2lkdGggaXNzdWVcbiAgICBhbmltYXRpb25OYW1lOiAnbXVpLWF1dG8tZmlsbC1jYW5jZWwnLFxuICAgIGFuaW1hdGlvbkR1cmF0aW9uOiAnMTBtcycsXG4gICAgJyY6Oi13ZWJraXQtaW5wdXQtcGxhY2Vob2xkZXInOiBwbGFjZWhvbGRlcixcbiAgICAnJjo6LW1vei1wbGFjZWhvbGRlcic6IHBsYWNlaG9sZGVyLFxuICAgIC8vIEZpcmVmb3ggMTkrXG4gICAgJyY6LW1zLWlucHV0LXBsYWNlaG9sZGVyJzogcGxhY2Vob2xkZXIsXG4gICAgLy8gSUUxMVxuICAgICcmOjotbXMtaW5wdXQtcGxhY2Vob2xkZXInOiBwbGFjZWhvbGRlcixcbiAgICAvLyBFZGdlXG4gICAgJyY6Zm9jdXMnOiB7XG4gICAgICBvdXRsaW5lOiAwXG4gICAgfSxcbiAgICAvLyBSZXNldCBGaXJlZm94IGludmFsaWQgcmVxdWlyZWQgaW5wdXQgc3R5bGVcbiAgICAnJjppbnZhbGlkJzoge1xuICAgICAgYm94U2hhZG93OiAnbm9uZSdcbiAgICB9LFxuICAgICcmOjotd2Via2l0LXNlYXJjaC1kZWNvcmF0aW9uJzoge1xuICAgICAgLy8gUmVtb3ZlIHRoZSBwYWRkaW5nIHdoZW4gdHlwZT1zZWFyY2guXG4gICAgICBXZWJraXRBcHBlYXJhbmNlOiAnbm9uZSdcbiAgICB9LFxuICAgIC8vIFNob3cgYW5kIGhpZGUgdGhlIHBsYWNlaG9sZGVyIGxvZ2ljXG4gICAgW2BsYWJlbFtkYXRhLXNocmluaz1mYWxzZV0gKyAuJHtpbnB1dEJhc2VDbGFzc2VzLmZvcm1Db250cm9sfSAmYF06IHtcbiAgICAgICcmOjotd2Via2l0LWlucHV0LXBsYWNlaG9sZGVyJzogcGxhY2Vob2xkZXJIaWRkZW4sXG4gICAgICAnJjo6LW1vei1wbGFjZWhvbGRlcic6IHBsYWNlaG9sZGVySGlkZGVuLFxuICAgICAgLy8gRmlyZWZveCAxOStcbiAgICAgICcmOi1tcy1pbnB1dC1wbGFjZWhvbGRlcic6IHBsYWNlaG9sZGVySGlkZGVuLFxuICAgICAgLy8gSUUxMVxuICAgICAgJyY6Oi1tcy1pbnB1dC1wbGFjZWhvbGRlcic6IHBsYWNlaG9sZGVySGlkZGVuLFxuICAgICAgLy8gRWRnZVxuICAgICAgJyY6Zm9jdXM6Oi13ZWJraXQtaW5wdXQtcGxhY2Vob2xkZXInOiBwbGFjZWhvbGRlclZpc2libGUsXG4gICAgICAnJjpmb2N1czo6LW1vei1wbGFjZWhvbGRlcic6IHBsYWNlaG9sZGVyVmlzaWJsZSxcbiAgICAgIC8vIEZpcmVmb3ggMTkrXG4gICAgICAnJjpmb2N1czotbXMtaW5wdXQtcGxhY2Vob2xkZXInOiBwbGFjZWhvbGRlclZpc2libGUsXG4gICAgICAvLyBJRTExXG4gICAgICAnJjpmb2N1czo6LW1zLWlucHV0LXBsYWNlaG9sZGVyJzogcGxhY2Vob2xkZXJWaXNpYmxlIC8vIEVkZ2VcbiAgICB9LFxuICAgIFtgJi4ke2lucHV0QmFzZUNsYXNzZXMuZGlzYWJsZWR9YF06IHtcbiAgICAgIG9wYWNpdHk6IDEsXG4gICAgICAvLyBSZXNldCBpT1Mgb3BhY2l0eVxuICAgICAgV2Via2l0VGV4dEZpbGxDb2xvcjogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGUudGV4dC5kaXNhYmxlZCAvLyBGaXggb3BhY2l0eSBTYWZhcmkgYnVnXG4gICAgfSxcbiAgICAnJjotd2Via2l0LWF1dG9maWxsJzoge1xuICAgICAgYW5pbWF0aW9uRHVyYXRpb246ICc1MDAwcycsXG4gICAgICBhbmltYXRpb25OYW1lOiAnbXVpLWF1dG8tZmlsbCdcbiAgICB9XG4gIH0sIG93bmVyU3RhdGUuc2l6ZSA9PT0gJ3NtYWxsJyAmJiB7XG4gICAgcGFkZGluZ1RvcDogMVxuICB9LCBvd25lclN0YXRlLm11bHRpbGluZSAmJiB7XG4gICAgaGVpZ2h0OiAnYXV0bycsXG4gICAgcmVzaXplOiAnbm9uZScsXG4gICAgcGFkZGluZzogMCxcbiAgICBwYWRkaW5nVG9wOiAwXG4gIH0sIG93bmVyU3RhdGUudHlwZSA9PT0gJ3NlYXJjaCcgJiYge1xuICAgIC8vIEltcHJvdmUgdHlwZSBzZWFyY2ggc3R5bGUuXG4gICAgTW96QXBwZWFyYW5jZTogJ3RleHRmaWVsZCdcbiAgfSk7XG59KTtcbmNvbnN0IGlucHV0R2xvYmFsU3R5bGVzID0gLyojX19QVVJFX18qL19qc3goR2xvYmFsU3R5bGVzLCB7XG4gIHN0eWxlczoge1xuICAgICdAa2V5ZnJhbWVzIG11aS1hdXRvLWZpbGwnOiB7XG4gICAgICBmcm9tOiB7XG4gICAgICAgIGRpc3BsYXk6ICdibG9jaydcbiAgICAgIH1cbiAgICB9LFxuICAgICdAa2V5ZnJhbWVzIG11aS1hdXRvLWZpbGwtY2FuY2VsJzoge1xuICAgICAgZnJvbToge1xuICAgICAgICBkaXNwbGF5OiAnYmxvY2snXG4gICAgICB9XG4gICAgfVxuICB9XG59KTtcblxuLyoqXG4gKiBgSW5wdXRCYXNlYCBjb250YWlucyBhcyBmZXcgc3R5bGVzIGFzIHBvc3NpYmxlLlxuICogSXQgYWltcyB0byBiZSBhIHNpbXBsZSBidWlsZGluZyBibG9jayBmb3IgY3JlYXRpbmcgYW4gaW5wdXQuXG4gKiBJdCBjb250YWlucyBhIGxvYWQgb2Ygc3R5bGUgcmVzZXQgYW5kIHNvbWUgc3RhdGUgbG9naWMuXG4gKi9cbmNvbnN0IElucHV0QmFzZSA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIElucHV0QmFzZShpblByb3BzLCByZWYpIHtcbiAgdmFyIF9zbG90UHJvcHMkaW5wdXQ7XG4gIGNvbnN0IHByb3BzID0gdXNlRGVmYXVsdFByb3BzKHtcbiAgICBwcm9wczogaW5Qcm9wcyxcbiAgICBuYW1lOiAnTXVpSW5wdXRCYXNlJ1xuICB9KTtcbiAgY29uc3Qge1xuICAgICAgJ2FyaWEtZGVzY3JpYmVkYnknOiBhcmlhRGVzY3JpYmVkYnksXG4gICAgICBhdXRvQ29tcGxldGUsXG4gICAgICBhdXRvRm9jdXMsXG4gICAgICBjbGFzc05hbWUsXG4gICAgICBjb21wb25lbnRzID0ge30sXG4gICAgICBjb21wb25lbnRzUHJvcHMgPSB7fSxcbiAgICAgIGRlZmF1bHRWYWx1ZSxcbiAgICAgIGRpc2FibGVkLFxuICAgICAgZGlzYWJsZUluamVjdGluZ0dsb2JhbFN0eWxlcyxcbiAgICAgIGVuZEFkb3JubWVudCxcbiAgICAgIGZ1bGxXaWR0aCA9IGZhbHNlLFxuICAgICAgaWQsXG4gICAgICBpbnB1dENvbXBvbmVudCA9ICdpbnB1dCcsXG4gICAgICBpbnB1dFByb3BzOiBpbnB1dFByb3BzUHJvcCA9IHt9LFxuICAgICAgaW5wdXRSZWY6IGlucHV0UmVmUHJvcCxcbiAgICAgIG1heFJvd3MsXG4gICAgICBtaW5Sb3dzLFxuICAgICAgbXVsdGlsaW5lID0gZmFsc2UsXG4gICAgICBuYW1lLFxuICAgICAgb25CbHVyLFxuICAgICAgb25DaGFuZ2UsXG4gICAgICBvbkNsaWNrLFxuICAgICAgb25Gb2N1cyxcbiAgICAgIG9uS2V5RG93bixcbiAgICAgIG9uS2V5VXAsXG4gICAgICBwbGFjZWhvbGRlcixcbiAgICAgIHJlYWRPbmx5LFxuICAgICAgcmVuZGVyU3VmZml4LFxuICAgICAgcm93cyxcbiAgICAgIHNsb3RQcm9wcyA9IHt9LFxuICAgICAgc2xvdHMgPSB7fSxcbiAgICAgIHN0YXJ0QWRvcm5tZW50LFxuICAgICAgdHlwZSA9ICd0ZXh0JyxcbiAgICAgIHZhbHVlOiB2YWx1ZVByb3BcbiAgICB9ID0gcHJvcHMsXG4gICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkKTtcbiAgY29uc3QgdmFsdWUgPSBpbnB1dFByb3BzUHJvcC52YWx1ZSAhPSBudWxsID8gaW5wdXRQcm9wc1Byb3AudmFsdWUgOiB2YWx1ZVByb3A7XG4gIGNvbnN0IHtcbiAgICBjdXJyZW50OiBpc0NvbnRyb2xsZWRcbiAgfSA9IFJlYWN0LnVzZVJlZih2YWx1ZSAhPSBudWxsKTtcbiAgY29uc3QgaW5wdXRSZWYgPSBSZWFjdC51c2VSZWYoKTtcbiAgY29uc3QgaGFuZGxlSW5wdXRSZWZXYXJuaW5nID0gUmVhY3QudXNlQ2FsbGJhY2soaW5zdGFuY2UgPT4ge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAoaW5zdGFuY2UgJiYgaW5zdGFuY2Uubm9kZU5hbWUgIT09ICdJTlBVVCcgJiYgIWluc3RhbmNlLmZvY3VzKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoWydNVUk6IFlvdSBoYXZlIHByb3ZpZGVkIGEgYGlucHV0Q29tcG9uZW50YCB0byB0aGUgaW5wdXQgY29tcG9uZW50JywgJ3RoYXQgZG9lcyBub3QgY29ycmVjdGx5IGhhbmRsZSB0aGUgYHJlZmAgcHJvcC4nLCAnTWFrZSBzdXJlIHRoZSBgcmVmYCBwcm9wIGlzIGNhbGxlZCB3aXRoIGEgSFRNTElucHV0RWxlbWVudC4nXS5qb2luKCdcXG4nKSk7XG4gICAgICB9XG4gICAgfVxuICB9LCBbXSk7XG4gIGNvbnN0IGhhbmRsZUlucHV0UmVmID0gdXNlRm9ya1JlZihpbnB1dFJlZiwgaW5wdXRSZWZQcm9wLCBpbnB1dFByb3BzUHJvcC5yZWYsIGhhbmRsZUlucHV0UmVmV2FybmluZyk7XG4gIGNvbnN0IFtmb2N1c2VkLCBzZXRGb2N1c2VkXSA9IFJlYWN0LnVzZVN0YXRlKGZhbHNlKTtcbiAgY29uc3QgbXVpRm9ybUNvbnRyb2wgPSB1c2VGb3JtQ29udHJvbCgpO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9ydWxlcy1vZi1ob29rc1xuICAgIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICBpZiAobXVpRm9ybUNvbnRyb2wpIHtcbiAgICAgICAgcmV0dXJuIG11aUZvcm1Db250cm9sLnJlZ2lzdGVyRWZmZWN0KCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH0sIFttdWlGb3JtQ29udHJvbF0pO1xuICB9XG4gIGNvbnN0IGZjcyA9IGZvcm1Db250cm9sU3RhdGUoe1xuICAgIHByb3BzLFxuICAgIG11aUZvcm1Db250cm9sLFxuICAgIHN0YXRlczogWydjb2xvcicsICdkaXNhYmxlZCcsICdlcnJvcicsICdoaWRkZW5MYWJlbCcsICdzaXplJywgJ3JlcXVpcmVkJywgJ2ZpbGxlZCddXG4gIH0pO1xuICBmY3MuZm9jdXNlZCA9IG11aUZvcm1Db250cm9sID8gbXVpRm9ybUNvbnRyb2wuZm9jdXNlZCA6IGZvY3VzZWQ7XG5cbiAgLy8gVGhlIGJsdXIgd29uJ3QgZmlyZSB3aGVuIHRoZSBkaXNhYmxlZCBzdGF0ZSBpcyBzZXQgb24gYSBmb2N1c2VkIGlucHV0LlxuICAvLyBXZSBuZWVkIHRvIGJvb2sga2VlcCB0aGUgZm9jdXNlZCBzdGF0ZSBtYW51YWxseS5cbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoIW11aUZvcm1Db250cm9sICYmIGRpc2FibGVkICYmIGZvY3VzZWQpIHtcbiAgICAgIHNldEZvY3VzZWQoZmFsc2UpO1xuICAgICAgaWYgKG9uQmx1cikge1xuICAgICAgICBvbkJsdXIoKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIFttdWlGb3JtQ29udHJvbCwgZGlzYWJsZWQsIGZvY3VzZWQsIG9uQmx1cl0pO1xuICBjb25zdCBvbkZpbGxlZCA9IG11aUZvcm1Db250cm9sICYmIG11aUZvcm1Db250cm9sLm9uRmlsbGVkO1xuICBjb25zdCBvbkVtcHR5ID0gbXVpRm9ybUNvbnRyb2wgJiYgbXVpRm9ybUNvbnRyb2wub25FbXB0eTtcbiAgY29uc3QgY2hlY2tEaXJ0eSA9IFJlYWN0LnVzZUNhbGxiYWNrKG9iaiA9PiB7XG4gICAgaWYgKGlzRmlsbGVkKG9iaikpIHtcbiAgICAgIGlmIChvbkZpbGxlZCkge1xuICAgICAgICBvbkZpbGxlZCgpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAob25FbXB0eSkge1xuICAgICAgb25FbXB0eSgpO1xuICAgIH1cbiAgfSwgW29uRmlsbGVkLCBvbkVtcHR5XSk7XG4gIHVzZUVuaGFuY2VkRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoaXNDb250cm9sbGVkKSB7XG4gICAgICBjaGVja0RpcnR5KHtcbiAgICAgICAgdmFsdWVcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwgW3ZhbHVlLCBjaGVja0RpcnR5LCBpc0NvbnRyb2xsZWRdKTtcbiAgY29uc3QgaGFuZGxlRm9jdXMgPSBldmVudCA9PiB7XG4gICAgLy8gRml4IGEgYnVnIHdpdGggSUUxMSB3aGVyZSB0aGUgZm9jdXMvYmx1ciBldmVudHMgYXJlIHRyaWdnZXJlZFxuICAgIC8vIHdoaWxlIHRoZSBjb21wb25lbnQgaXMgZGlzYWJsZWQuXG4gICAgaWYgKGZjcy5kaXNhYmxlZCkge1xuICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChvbkZvY3VzKSB7XG4gICAgICBvbkZvY3VzKGV2ZW50KTtcbiAgICB9XG4gICAgaWYgKGlucHV0UHJvcHNQcm9wLm9uRm9jdXMpIHtcbiAgICAgIGlucHV0UHJvcHNQcm9wLm9uRm9jdXMoZXZlbnQpO1xuICAgIH1cbiAgICBpZiAobXVpRm9ybUNvbnRyb2wgJiYgbXVpRm9ybUNvbnRyb2wub25Gb2N1cykge1xuICAgICAgbXVpRm9ybUNvbnRyb2wub25Gb2N1cyhldmVudCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNldEZvY3VzZWQodHJ1ZSk7XG4gICAgfVxuICB9O1xuICBjb25zdCBoYW5kbGVCbHVyID0gZXZlbnQgPT4ge1xuICAgIGlmIChvbkJsdXIpIHtcbiAgICAgIG9uQmx1cihldmVudCk7XG4gICAgfVxuICAgIGlmIChpbnB1dFByb3BzUHJvcC5vbkJsdXIpIHtcbiAgICAgIGlucHV0UHJvcHNQcm9wLm9uQmx1cihldmVudCk7XG4gICAgfVxuICAgIGlmIChtdWlGb3JtQ29udHJvbCAmJiBtdWlGb3JtQ29udHJvbC5vbkJsdXIpIHtcbiAgICAgIG11aUZvcm1Db250cm9sLm9uQmx1cihldmVudCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNldEZvY3VzZWQoZmFsc2UpO1xuICAgIH1cbiAgfTtcbiAgY29uc3QgaGFuZGxlQ2hhbmdlID0gKGV2ZW50LCAuLi5hcmdzKSA9PiB7XG4gICAgaWYgKCFpc0NvbnRyb2xsZWQpIHtcbiAgICAgIGNvbnN0IGVsZW1lbnQgPSBldmVudC50YXJnZXQgfHwgaW5wdXRSZWYuY3VycmVudDtcbiAgICAgIGlmIChlbGVtZW50ID09IG51bGwpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGBNVUk6IEV4cGVjdGVkIHZhbGlkIGlucHV0IHRhcmdldC4gRGlkIHlvdSB1c2UgYSBjdXN0b20gXFxgaW5wdXRDb21wb25lbnRcXGAgYW5kIGZvcmdldCB0byBmb3J3YXJkIHJlZnM/IFNlZSBodHRwczovL211aS5jb20vci9pbnB1dC1jb21wb25lbnQtcmVmLWludGVyZmFjZSBmb3IgbW9yZSBpbmZvLmAgOiBfZm9ybWF0TXVpRXJyb3JNZXNzYWdlKDEpKTtcbiAgICAgIH1cbiAgICAgIGNoZWNrRGlydHkoe1xuICAgICAgICB2YWx1ZTogZWxlbWVudC52YWx1ZVxuICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChpbnB1dFByb3BzUHJvcC5vbkNoYW5nZSkge1xuICAgICAgaW5wdXRQcm9wc1Byb3Aub25DaGFuZ2UoZXZlbnQsIC4uLmFyZ3MpO1xuICAgIH1cblxuICAgIC8vIFBlcmZvcm0gaW4gdGhlIHdpbGxVcGRhdGVcbiAgICBpZiAob25DaGFuZ2UpIHtcbiAgICAgIG9uQ2hhbmdlKGV2ZW50LCAuLi5hcmdzKTtcbiAgICB9XG4gIH07XG5cbiAgLy8gQ2hlY2sgdGhlIGlucHV0IHN0YXRlIG9uIG1vdW50LCBpbiBjYXNlIGl0IHdhcyBmaWxsZWQgYnkgdGhlIHVzZXJcbiAgLy8gb3IgYXV0byBmaWxsZWQgYnkgdGhlIGJyb3dzZXIgYmVmb3JlIHRoZSBoeWRyYXRpb24gKGZvciBTU1IpLlxuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGNoZWNrRGlydHkoaW5wdXRSZWYuY3VycmVudCk7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL2V4aGF1c3RpdmUtZGVwc1xuICB9LCBbXSk7XG4gIGNvbnN0IGhhbmRsZUNsaWNrID0gZXZlbnQgPT4ge1xuICAgIGlmIChpbnB1dFJlZi5jdXJyZW50ICYmIGV2ZW50LmN1cnJlbnRUYXJnZXQgPT09IGV2ZW50LnRhcmdldCkge1xuICAgICAgaW5wdXRSZWYuY3VycmVudC5mb2N1cygpO1xuICAgIH1cbiAgICBpZiAob25DbGljaykge1xuICAgICAgb25DbGljayhldmVudCk7XG4gICAgfVxuICB9O1xuICBsZXQgSW5wdXRDb21wb25lbnQgPSBpbnB1dENvbXBvbmVudDtcbiAgbGV0IGlucHV0UHJvcHMgPSBpbnB1dFByb3BzUHJvcDtcbiAgaWYgKG11bHRpbGluZSAmJiBJbnB1dENvbXBvbmVudCA9PT0gJ2lucHV0Jykge1xuICAgIGlmIChyb3dzKSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBpZiAobWluUm93cyB8fCBtYXhSb3dzKSB7XG4gICAgICAgICAgY29uc29sZS53YXJuKCdNVUk6IFlvdSBjYW4gbm90IHVzZSB0aGUgYG1pblJvd3NgIG9yIGBtYXhSb3dzYCBwcm9wcyB3aGVuIHRoZSBpbnB1dCBgcm93c2AgcHJvcCBpcyBzZXQuJyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlucHV0UHJvcHMgPSBfZXh0ZW5kcyh7XG4gICAgICAgIHR5cGU6IHVuZGVmaW5lZCxcbiAgICAgICAgbWluUm93czogcm93cyxcbiAgICAgICAgbWF4Um93czogcm93c1xuICAgICAgfSwgaW5wdXRQcm9wcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlucHV0UHJvcHMgPSBfZXh0ZW5kcyh7XG4gICAgICAgIHR5cGU6IHVuZGVmaW5lZCxcbiAgICAgICAgbWF4Um93cyxcbiAgICAgICAgbWluUm93c1xuICAgICAgfSwgaW5wdXRQcm9wcyk7XG4gICAgfVxuICAgIElucHV0Q29tcG9uZW50ID0gVGV4dGFyZWFBdXRvc2l6ZTtcbiAgfVxuICBjb25zdCBoYW5kbGVBdXRvRmlsbCA9IGV2ZW50ID0+IHtcbiAgICAvLyBQcm92aWRlIGEgZmFrZSB2YWx1ZSBhcyBDaHJvbWUgbWlnaHQgbm90IGxldCB5b3UgYWNjZXNzIGl0IGZvciBzZWN1cml0eSByZWFzb25zLlxuICAgIGNoZWNrRGlydHkoZXZlbnQuYW5pbWF0aW9uTmFtZSA9PT0gJ211aS1hdXRvLWZpbGwtY2FuY2VsJyA/IGlucHV0UmVmLmN1cnJlbnQgOiB7XG4gICAgICB2YWx1ZTogJ3gnXG4gICAgfSk7XG4gIH07XG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKG11aUZvcm1Db250cm9sKSB7XG4gICAgICBtdWlGb3JtQ29udHJvbC5zZXRBZG9ybmVkU3RhcnQoQm9vbGVhbihzdGFydEFkb3JubWVudCkpO1xuICAgIH1cbiAgfSwgW211aUZvcm1Db250cm9sLCBzdGFydEFkb3JubWVudF0pO1xuICBjb25zdCBvd25lclN0YXRlID0gX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgY29sb3I6IGZjcy5jb2xvciB8fCAncHJpbWFyeScsXG4gICAgZGlzYWJsZWQ6IGZjcy5kaXNhYmxlZCxcbiAgICBlbmRBZG9ybm1lbnQsXG4gICAgZXJyb3I6IGZjcy5lcnJvcixcbiAgICBmb2N1c2VkOiBmY3MuZm9jdXNlZCxcbiAgICBmb3JtQ29udHJvbDogbXVpRm9ybUNvbnRyb2wsXG4gICAgZnVsbFdpZHRoLFxuICAgIGhpZGRlbkxhYmVsOiBmY3MuaGlkZGVuTGFiZWwsXG4gICAgbXVsdGlsaW5lLFxuICAgIHNpemU6IGZjcy5zaXplLFxuICAgIHN0YXJ0QWRvcm5tZW50LFxuICAgIHR5cGVcbiAgfSk7XG4gIGNvbnN0IGNsYXNzZXMgPSB1c2VVdGlsaXR5Q2xhc3Nlcyhvd25lclN0YXRlKTtcbiAgY29uc3QgUm9vdCA9IHNsb3RzLnJvb3QgfHwgY29tcG9uZW50cy5Sb290IHx8IElucHV0QmFzZVJvb3Q7XG4gIGNvbnN0IHJvb3RQcm9wcyA9IHNsb3RQcm9wcy5yb290IHx8IGNvbXBvbmVudHNQcm9wcy5yb290IHx8IHt9O1xuICBjb25zdCBJbnB1dCA9IHNsb3RzLmlucHV0IHx8IGNvbXBvbmVudHMuSW5wdXQgfHwgSW5wdXRCYXNlQ29tcG9uZW50O1xuICBpbnB1dFByb3BzID0gX2V4dGVuZHMoe30sIGlucHV0UHJvcHMsIChfc2xvdFByb3BzJGlucHV0ID0gc2xvdFByb3BzLmlucHV0KSAhPSBudWxsID8gX3Nsb3RQcm9wcyRpbnB1dCA6IGNvbXBvbmVudHNQcm9wcy5pbnB1dCk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeHMoUmVhY3QuRnJhZ21lbnQsIHtcbiAgICBjaGlsZHJlbjogWyFkaXNhYmxlSW5qZWN0aW5nR2xvYmFsU3R5bGVzICYmIGlucHV0R2xvYmFsU3R5bGVzLCAvKiNfX1BVUkVfXyovX2pzeHMoUm9vdCwgX2V4dGVuZHMoe30sIHJvb3RQcm9wcywgIWlzSG9zdENvbXBvbmVudChSb290KSAmJiB7XG4gICAgICBvd25lclN0YXRlOiBfZXh0ZW5kcyh7fSwgb3duZXJTdGF0ZSwgcm9vdFByb3BzLm93bmVyU3RhdGUpXG4gICAgfSwge1xuICAgICAgcmVmOiByZWYsXG4gICAgICBvbkNsaWNrOiBoYW5kbGVDbGlja1xuICAgIH0sIG90aGVyLCB7XG4gICAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCByb290UHJvcHMuY2xhc3NOYW1lLCBjbGFzc05hbWUsIHJlYWRPbmx5ICYmICdNdWlJbnB1dEJhc2UtcmVhZE9ubHknKSxcbiAgICAgIGNoaWxkcmVuOiBbc3RhcnRBZG9ybm1lbnQsIC8qI19fUFVSRV9fKi9fanN4KEZvcm1Db250cm9sQ29udGV4dC5Qcm92aWRlciwge1xuICAgICAgICB2YWx1ZTogbnVsbCxcbiAgICAgICAgY2hpbGRyZW46IC8qI19fUFVSRV9fKi9fanN4KElucHV0LCBfZXh0ZW5kcyh7XG4gICAgICAgICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZSxcbiAgICAgICAgICBcImFyaWEtaW52YWxpZFwiOiBmY3MuZXJyb3IsXG4gICAgICAgICAgXCJhcmlhLWRlc2NyaWJlZGJ5XCI6IGFyaWFEZXNjcmliZWRieSxcbiAgICAgICAgICBhdXRvQ29tcGxldGU6IGF1dG9Db21wbGV0ZSxcbiAgICAgICAgICBhdXRvRm9jdXM6IGF1dG9Gb2N1cyxcbiAgICAgICAgICBkZWZhdWx0VmFsdWU6IGRlZmF1bHRWYWx1ZSxcbiAgICAgICAgICBkaXNhYmxlZDogZmNzLmRpc2FibGVkLFxuICAgICAgICAgIGlkOiBpZCxcbiAgICAgICAgICBvbkFuaW1hdGlvblN0YXJ0OiBoYW5kbGVBdXRvRmlsbCxcbiAgICAgICAgICBuYW1lOiBuYW1lLFxuICAgICAgICAgIHBsYWNlaG9sZGVyOiBwbGFjZWhvbGRlcixcbiAgICAgICAgICByZWFkT25seTogcmVhZE9ubHksXG4gICAgICAgICAgcmVxdWlyZWQ6IGZjcy5yZXF1aXJlZCxcbiAgICAgICAgICByb3dzOiByb3dzLFxuICAgICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgICBvbktleURvd246IG9uS2V5RG93bixcbiAgICAgICAgICBvbktleVVwOiBvbktleVVwLFxuICAgICAgICAgIHR5cGU6IHR5cGVcbiAgICAgICAgfSwgaW5wdXRQcm9wcywgIWlzSG9zdENvbXBvbmVudChJbnB1dCkgJiYge1xuICAgICAgICAgIGFzOiBJbnB1dENvbXBvbmVudCxcbiAgICAgICAgICBvd25lclN0YXRlOiBfZXh0ZW5kcyh7fSwgb3duZXJTdGF0ZSwgaW5wdXRQcm9wcy5vd25lclN0YXRlKVxuICAgICAgICB9LCB7XG4gICAgICAgICAgcmVmOiBoYW5kbGVJbnB1dFJlZixcbiAgICAgICAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5pbnB1dCwgaW5wdXRQcm9wcy5jbGFzc05hbWUsIHJlYWRPbmx5ICYmICdNdWlJbnB1dEJhc2UtcmVhZE9ubHknKSxcbiAgICAgICAgICBvbkJsdXI6IGhhbmRsZUJsdXIsXG4gICAgICAgICAgb25DaGFuZ2U6IGhhbmRsZUNoYW5nZSxcbiAgICAgICAgICBvbkZvY3VzOiBoYW5kbGVGb2N1c1xuICAgICAgICB9KSlcbiAgICAgIH0pLCBlbmRBZG9ybm1lbnQsIHJlbmRlclN1ZmZpeCA/IHJlbmRlclN1ZmZpeChfZXh0ZW5kcyh7fSwgZmNzLCB7XG4gICAgICAgIHN0YXJ0QWRvcm5tZW50XG4gICAgICB9KSkgOiBudWxsXVxuICAgIH0pKV1cbiAgfSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IElucHV0QmFzZS5wcm9wVHlwZXMgLyogcmVtb3ZlLXByb3B0eXBlcyAqLyA9IHtcbiAgLy8g4pSM4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAIFdhcm5pbmcg4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSQXG4gIC8vIOKUgiBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMuIOKUglxuICAvLyDilIIgICAgVG8gdXBkYXRlIHRoZW0sIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIGBwbnBtIHByb3B0eXBlc2AuICAgICDilIJcbiAgLy8g4pSU4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSYXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICAnYXJpYS1kZXNjcmliZWRieSc6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBUaGlzIHByb3AgaGVscHMgdXNlcnMgdG8gZmlsbCBmb3JtcyBmYXN0ZXIsIGVzcGVjaWFsbHkgb24gbW9iaWxlIGRldmljZXMuXG4gICAqIFRoZSBuYW1lIGNhbiBiZSBjb25mdXNpbmcsIGFzIGl0J3MgbW9yZSBsaWtlIGFuIGF1dG9maWxsLlxuICAgKiBZb3UgY2FuIGxlYXJuIG1vcmUgYWJvdXQgaXQgW2ZvbGxvd2luZyB0aGUgc3BlY2lmaWNhdGlvbl0oaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZm9ybS1jb250cm9sLWluZnJhc3RydWN0dXJlLmh0bWwjYXV0b2ZpbGwpLlxuICAgKi9cbiAgYXV0b0NvbXBsZXRlOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgYGlucHV0YCBlbGVtZW50IGlzIGZvY3VzZWQgZHVyaW5nIHRoZSBmaXJzdCBtb3VudC5cbiAgICovXG4gIGF1dG9Gb2N1czogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogVGhlIGNvbG9yIG9mIHRoZSBjb21wb25lbnQuXG4gICAqIEl0IHN1cHBvcnRzIGJvdGggZGVmYXVsdCBhbmQgY3VzdG9tIHRoZW1lIGNvbG9ycywgd2hpY2ggY2FuIGJlIGFkZGVkIGFzIHNob3duIGluIHRoZVxuICAgKiBbcGFsZXR0ZSBjdXN0b21pemF0aW9uIGd1aWRlXShodHRwczovL211aS5jb20vbWF0ZXJpYWwtdWkvY3VzdG9taXphdGlvbi9wYWxldHRlLyNjdXN0b20tY29sb3JzKS5cbiAgICogVGhlIHByb3AgZGVmYXVsdHMgdG8gdGhlIHZhbHVlIChgJ3ByaW1hcnknYCkgaW5oZXJpdGVkIGZyb20gdGhlIHBhcmVudCBGb3JtQ29udHJvbCBjb21wb25lbnQuXG4gICAqL1xuICBjb2xvcjogUHJvcFR5cGVzIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi8ub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydwcmltYXJ5JywgJ3NlY29uZGFyeScsICdlcnJvcicsICdpbmZvJywgJ3N1Y2Nlc3MnLCAnd2FybmluZyddKSwgUHJvcFR5cGVzLnN0cmluZ10pLFxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudHMgdXNlZCBmb3IgZWFjaCBzbG90IGluc2lkZS5cbiAgICpcbiAgICogVGhpcyBwcm9wIGlzIGFuIGFsaWFzIGZvciB0aGUgYHNsb3RzYCBwcm9wLlxuICAgKiBJdCdzIHJlY29tbWVuZGVkIHRvIHVzZSB0aGUgYHNsb3RzYCBwcm9wIGluc3RlYWQuXG4gICAqXG4gICAqIEBkZWZhdWx0IHt9XG4gICAqL1xuICBjb21wb25lbnRzOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIElucHV0OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG4gICAgUm9vdDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlXG4gIH0pLFxuICAvKipcbiAgICogVGhlIGV4dHJhIHByb3BzIGZvciB0aGUgc2xvdCBjb21wb25lbnRzLlxuICAgKiBZb3UgY2FuIG92ZXJyaWRlIHRoZSBleGlzdGluZyBwcm9wcyBvciBhZGQgbmV3IG9uZXMuXG4gICAqXG4gICAqIFRoaXMgcHJvcCBpcyBhbiBhbGlhcyBmb3IgdGhlIGBzbG90UHJvcHNgIHByb3AuXG4gICAqIEl0J3MgcmVjb21tZW5kZWQgdG8gdXNlIHRoZSBgc2xvdFByb3BzYCBwcm9wIGluc3RlYWQsIGFzIGBjb21wb25lbnRzUHJvcHNgIHdpbGwgYmUgZGVwcmVjYXRlZCBpbiB0aGUgZnV0dXJlLlxuICAgKlxuICAgKiBAZGVmYXVsdCB7fVxuICAgKi9cbiAgY29tcG9uZW50c1Byb3BzOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGlucHV0OiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIHJvb3Q6IFByb3BUeXBlcy5vYmplY3RcbiAgfSksXG4gIC8qKlxuICAgKiBUaGUgZGVmYXVsdCB2YWx1ZS4gVXNlIHdoZW4gdGhlIGNvbXBvbmVudCBpcyBub3QgY29udHJvbGxlZC5cbiAgICovXG4gIGRlZmF1bHRWYWx1ZTogUHJvcFR5cGVzLmFueSxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGNvbXBvbmVudCBpcyBkaXNhYmxlZC5cbiAgICogVGhlIHByb3AgZGVmYXVsdHMgdG8gdGhlIHZhbHVlIChgZmFsc2VgKSBpbmhlcml0ZWQgZnJvbSB0aGUgcGFyZW50IEZvcm1Db250cm9sIGNvbXBvbmVudC5cbiAgICovXG4gIGRpc2FibGVkOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgR2xvYmFsU3R5bGVzIGZvciB0aGUgYXV0by1maWxsIGtleWZyYW1lcyB3aWxsIG5vdCBiZSBpbmplY3RlZC9yZW1vdmVkIG9uIG1vdW50L3VubW91bnQuIE1ha2Ugc3VyZSB0byBpbmplY3QgdGhlbSBhdCB0aGUgdG9wIG9mIHlvdXIgYXBwbGljYXRpb24uXG4gICAqIFRoaXMgb3B0aW9uIGlzIGludGVuZGVkIHRvIGhlbHAgd2l0aCBib29zdGluZyB0aGUgaW5pdGlhbCByZW5kZXJpbmcgcGVyZm9ybWFuY2UgaWYgeW91IGFyZSBsb2FkaW5nIGEgYmlnIGFtb3VudCBvZiBJbnB1dCBjb21wb25lbnRzIGF0IG9uY2UuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkaXNhYmxlSW5qZWN0aW5nR2xvYmFsU3R5bGVzOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIEVuZCBgSW5wdXRBZG9ybm1lbnRgIGZvciB0aGlzIGNvbXBvbmVudC5cbiAgICovXG4gIGVuZEFkb3JubWVudDogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBgaW5wdXRgIHdpbGwgaW5kaWNhdGUgYW4gZXJyb3IuXG4gICAqIFRoZSBwcm9wIGRlZmF1bHRzIHRvIHRoZSB2YWx1ZSAoYGZhbHNlYCkgaW5oZXJpdGVkIGZyb20gdGhlIHBhcmVudCBGb3JtQ29udHJvbCBjb21wb25lbnQuXG4gICAqL1xuICBlcnJvcjogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBgaW5wdXRgIHdpbGwgdGFrZSB1cCB0aGUgZnVsbCB3aWR0aCBvZiBpdHMgY29udGFpbmVyLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZnVsbFdpZHRoOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIFRoZSBpZCBvZiB0aGUgYGlucHV0YCBlbGVtZW50LlxuICAgKi9cbiAgaWQ6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBIVE1MIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqIEBkZWZhdWx0ICdpbnB1dCdcbiAgICovXG4gIGlucHV0Q29tcG9uZW50OiBlbGVtZW50VHlwZUFjY2VwdGluZ1JlZixcbiAgLyoqXG4gICAqIFtBdHRyaWJ1dGVzXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVE1ML0VsZW1lbnQvaW5wdXQjQXR0cmlidXRlcykgYXBwbGllZCB0byB0aGUgYGlucHV0YCBlbGVtZW50LlxuICAgKiBAZGVmYXVsdCB7fVxuICAgKi9cbiAgaW5wdXRQcm9wczogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqXG4gICAqIFBhc3MgYSByZWYgdG8gdGhlIGBpbnB1dGAgZWxlbWVudC5cbiAgICovXG4gIGlucHV0UmVmOiByZWZUeXBlLFxuICAvKipcbiAgICogSWYgYGRlbnNlYCwgd2lsbCBhZGp1c3QgdmVydGljYWwgc3BhY2luZy4gVGhpcyBpcyBub3JtYWxseSBvYnRhaW5lZCB2aWEgY29udGV4dCBmcm9tXG4gICAqIEZvcm1Db250cm9sLlxuICAgKiBUaGUgcHJvcCBkZWZhdWx0cyB0byB0aGUgdmFsdWUgKGAnbm9uZSdgKSBpbmhlcml0ZWQgZnJvbSB0aGUgcGFyZW50IEZvcm1Db250cm9sIGNvbXBvbmVudC5cbiAgICovXG4gIG1hcmdpbjogUHJvcFR5cGVzLm9uZU9mKFsnZGVuc2UnLCAnbm9uZSddKSxcbiAgLyoqXG4gICAqIE1heGltdW0gbnVtYmVyIG9mIHJvd3MgdG8gZGlzcGxheSB3aGVuIG11bHRpbGluZSBvcHRpb24gaXMgc2V0IHRvIHRydWUuXG4gICAqL1xuICBtYXhSb3dzOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc3RyaW5nXSksXG4gIC8qKlxuICAgKiBNaW5pbXVtIG51bWJlciBvZiByb3dzIHRvIGRpc3BsYXkgd2hlbiBtdWx0aWxpbmUgb3B0aW9uIGlzIHNldCB0byB0cnVlLlxuICAgKi9cbiAgbWluUm93czogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnN0cmluZ10pLFxuICAvKipcbiAgICogSWYgYHRydWVgLCBhIFtUZXh0YXJlYUF1dG9zaXplXSgvbWF0ZXJpYWwtdWkvcmVhY3QtdGV4dGFyZWEtYXV0b3NpemUvKSBlbGVtZW50IGlzIHJlbmRlcmVkLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgbXVsdGlsaW5lOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIE5hbWUgYXR0cmlidXRlIG9mIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAqL1xuICBuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgYGlucHV0YCBpcyBibHVycmVkLlxuICAgKlxuICAgKiBOb3RpY2UgdGhhdCB0aGUgZmlyc3QgYXJndW1lbnQgKGV2ZW50KSBtaWdodCBiZSB1bmRlZmluZWQuXG4gICAqL1xuICBvbkJsdXI6IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgdmFsdWUgaXMgY2hhbmdlZC5cbiAgICpcbiAgICogQHBhcmFtIHtSZWFjdC5DaGFuZ2VFdmVudDxIVE1MVGV4dEFyZWFFbGVtZW50IHwgSFRNTElucHV0RWxlbWVudD59IGV2ZW50IFRoZSBldmVudCBzb3VyY2Ugb2YgdGhlIGNhbGxiYWNrLlxuICAgKiBZb3UgY2FuIHB1bGwgb3V0IHRoZSBuZXcgdmFsdWUgYnkgYWNjZXNzaW5nIGBldmVudC50YXJnZXQudmFsdWVgIChzdHJpbmcpLlxuICAgKi9cbiAgb25DaGFuZ2U6IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25DbGljazogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkZvY3VzOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIGBpbnB1dGAgZG9lc24ndCBzYXRpc2Z5IGl0cyBjb25zdHJhaW50cy5cbiAgICovXG4gIG9uSW52YWxpZDogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbktleURvd246IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25LZXlVcDogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBUaGUgc2hvcnQgaGludCBkaXNwbGF5ZWQgaW4gdGhlIGBpbnB1dGAgYmVmb3JlIHRoZSB1c2VyIGVudGVycyBhIHZhbHVlLlxuICAgKi9cbiAgcGxhY2Vob2xkZXI6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBJdCBwcmV2ZW50cyB0aGUgdXNlciBmcm9tIGNoYW5naW5nIHRoZSB2YWx1ZSBvZiB0aGUgZmllbGRcbiAgICogKG5vdCBmcm9tIGludGVyYWN0aW5nIHdpdGggdGhlIGZpZWxkKS5cbiAgICovXG4gIHJlYWRPbmx5OiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHJlbmRlclN1ZmZpeDogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBgaW5wdXRgIGVsZW1lbnQgaXMgcmVxdWlyZWQuXG4gICAqIFRoZSBwcm9wIGRlZmF1bHRzIHRvIHRoZSB2YWx1ZSAoYGZhbHNlYCkgaW5oZXJpdGVkIGZyb20gdGhlIHBhcmVudCBGb3JtQ29udHJvbCBjb21wb25lbnQuXG4gICAqL1xuICByZXF1aXJlZDogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBOdW1iZXIgb2Ygcm93cyB0byBkaXNwbGF5IHdoZW4gbXVsdGlsaW5lIG9wdGlvbiBpcyBzZXQgdG8gdHJ1ZS5cbiAgICovXG4gIHJvd3M6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zdHJpbmddKSxcbiAgLyoqXG4gICAqIFRoZSBzaXplIG9mIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBzaXplOiBQcm9wVHlwZXMgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqLy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ21lZGl1bScsICdzbWFsbCddKSwgUHJvcFR5cGVzLnN0cmluZ10pLFxuICAvKipcbiAgICogVGhlIGV4dHJhIHByb3BzIGZvciB0aGUgc2xvdCBjb21wb25lbnRzLlxuICAgKiBZb3UgY2FuIG92ZXJyaWRlIHRoZSBleGlzdGluZyBwcm9wcyBvciBhZGQgbmV3IG9uZXMuXG4gICAqXG4gICAqIFRoaXMgcHJvcCBpcyBhbiBhbGlhcyBmb3IgdGhlIGBjb21wb25lbnRzUHJvcHNgIHByb3AsIHdoaWNoIHdpbGwgYmUgZGVwcmVjYXRlZCBpbiB0aGUgZnV0dXJlLlxuICAgKlxuICAgKiBAZGVmYXVsdCB7fVxuICAgKi9cbiAgc2xvdFByb3BzOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGlucHV0OiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIHJvb3Q6IFByb3BUeXBlcy5vYmplY3RcbiAgfSksXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50cyB1c2VkIGZvciBlYWNoIHNsb3QgaW5zaWRlLlxuICAgKlxuICAgKiBUaGlzIHByb3AgaXMgYW4gYWxpYXMgZm9yIHRoZSBgY29tcG9uZW50c2AgcHJvcCwgd2hpY2ggd2lsbCBiZSBkZXByZWNhdGVkIGluIHRoZSBmdXR1cmUuXG4gICAqXG4gICAqIEBkZWZhdWx0IHt9XG4gICAqL1xuICBzbG90czogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBpbnB1dDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuICAgIHJvb3Q6IFByb3BUeXBlcy5lbGVtZW50VHlwZVxuICB9KSxcbiAgLyoqXG4gICAqIFN0YXJ0IGBJbnB1dEFkb3JubWVudGAgZm9yIHRoaXMgY29tcG9uZW50LlxuICAgKi9cbiAgc3RhcnRBZG9ybm1lbnQ6IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogVGhlIHN5c3RlbSBwcm9wIHRoYXQgYWxsb3dzIGRlZmluaW5nIHN5c3RlbSBvdmVycmlkZXMgYXMgd2VsbCBhcyBhZGRpdGlvbmFsIENTUyBzdHlsZXMuXG4gICAqL1xuICBzeDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5ib29sXSkpLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pLFxuICAvKipcbiAgICogVHlwZSBvZiB0aGUgYGlucHV0YCBlbGVtZW50LiBJdCBzaG91bGQgYmUgW2EgdmFsaWQgSFRNTDUgaW5wdXQgdHlwZV0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRNTC9FbGVtZW50L2lucHV0I0Zvcm1fJTNDaW5wdXQlM0VfdHlwZXMpLlxuICAgKiBAZGVmYXVsdCAndGV4dCdcbiAgICovXG4gIHR5cGU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBUaGUgdmFsdWUgb2YgdGhlIGBpbnB1dGAgZWxlbWVudCwgcmVxdWlyZWQgZm9yIGEgY29udHJvbGxlZCBjb21wb25lbnQuXG4gICAqL1xuICB2YWx1ZTogUHJvcFR5cGVzLmFueVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IElucHV0QmFzZTsiLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJkaXNhYmxlVW5kZXJsaW5lXCIsIFwiY29tcG9uZW50c1wiLCBcImNvbXBvbmVudHNQcm9wc1wiLCBcImZ1bGxXaWR0aFwiLCBcImhpZGRlbkxhYmVsXCIsIFwiaW5wdXRDb21wb25lbnRcIiwgXCJtdWx0aWxpbmVcIiwgXCJzbG90UHJvcHNcIiwgXCJzbG90c1wiLCBcInR5cGVcIl07XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgZGVlcG1lcmdlIGZyb20gJ0BtdWkvdXRpbHMvZGVlcG1lcmdlJztcbmltcG9ydCByZWZUeXBlIGZyb20gJ0BtdWkvdXRpbHMvcmVmVHlwZSc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNvbXBvc2VDbGFzc2VzIGZyb20gJ0BtdWkvdXRpbHMvY29tcG9zZUNsYXNzZXMnO1xuaW1wb3J0IElucHV0QmFzZSBmcm9tICcuLi9JbnB1dEJhc2UnO1xuaW1wb3J0IHN0eWxlZCwgeyByb290U2hvdWxkRm9yd2FyZFByb3AgfSBmcm9tICcuLi9zdHlsZXMvc3R5bGVkJztcbmltcG9ydCB7IHVzZURlZmF1bHRQcm9wcyB9IGZyb20gJy4uL0RlZmF1bHRQcm9wc1Byb3ZpZGVyJztcbmltcG9ydCBmaWxsZWRJbnB1dENsYXNzZXMsIHsgZ2V0RmlsbGVkSW5wdXRVdGlsaXR5Q2xhc3MgfSBmcm9tICcuL2ZpbGxlZElucHV0Q2xhc3Nlcyc7XG5pbXBvcnQgeyByb290T3ZlcnJpZGVzUmVzb2x2ZXIgYXMgaW5wdXRCYXNlUm9vdE92ZXJyaWRlc1Jlc29sdmVyLCBpbnB1dE92ZXJyaWRlc1Jlc29sdmVyIGFzIGlucHV0QmFzZUlucHV0T3ZlcnJpZGVzUmVzb2x2ZXIsIElucHV0QmFzZVJvb3QsIElucHV0QmFzZUNvbXBvbmVudCBhcyBJbnB1dEJhc2VJbnB1dCB9IGZyb20gJy4uL0lucHV0QmFzZS9JbnB1dEJhc2UnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmNvbnN0IHVzZVV0aWxpdHlDbGFzc2VzID0gb3duZXJTdGF0ZSA9PiB7XG4gIGNvbnN0IHtcbiAgICBjbGFzc2VzLFxuICAgIGRpc2FibGVVbmRlcmxpbmVcbiAgfSA9IG93bmVyU3RhdGU7XG4gIGNvbnN0IHNsb3RzID0ge1xuICAgIHJvb3Q6IFsncm9vdCcsICFkaXNhYmxlVW5kZXJsaW5lICYmICd1bmRlcmxpbmUnXSxcbiAgICBpbnB1dDogWydpbnB1dCddXG4gIH07XG4gIGNvbnN0IGNvbXBvc2VkQ2xhc3NlcyA9IGNvbXBvc2VDbGFzc2VzKHNsb3RzLCBnZXRGaWxsZWRJbnB1dFV0aWxpdHlDbGFzcywgY2xhc3Nlcyk7XG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgY2xhc3NlcywgY29tcG9zZWRDbGFzc2VzKTtcbn07XG5jb25zdCBGaWxsZWRJbnB1dFJvb3QgPSBzdHlsZWQoSW5wdXRCYXNlUm9vdCwge1xuICBzaG91bGRGb3J3YXJkUHJvcDogcHJvcCA9PiByb290U2hvdWxkRm9yd2FyZFByb3AocHJvcCkgfHwgcHJvcCA9PT0gJ2NsYXNzZXMnLFxuICBuYW1lOiAnTXVpRmlsbGVkSW5wdXQnLFxuICBzbG90OiAnUm9vdCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9ID0gcHJvcHM7XG4gICAgcmV0dXJuIFsuLi5pbnB1dEJhc2VSb290T3ZlcnJpZGVzUmVzb2x2ZXIocHJvcHMsIHN0eWxlcyksICFvd25lclN0YXRlLmRpc2FibGVVbmRlcmxpbmUgJiYgc3R5bGVzLnVuZGVybGluZV07XG4gIH1cbn0pKCh7XG4gIHRoZW1lLFxuICBvd25lclN0YXRlXG59KSA9PiB7XG4gIHZhciBfcGFsZXR0ZTtcbiAgY29uc3QgbGlnaHQgPSB0aGVtZS5wYWxldHRlLm1vZGUgPT09ICdsaWdodCc7XG4gIGNvbnN0IGJvdHRvbUxpbmVDb2xvciA9IGxpZ2h0ID8gJ3JnYmEoMCwgMCwgMCwgMC40MiknIDogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC43KSc7XG4gIGNvbnN0IGJhY2tncm91bmRDb2xvciA9IGxpZ2h0ID8gJ3JnYmEoMCwgMCwgMCwgMC4wNiknIDogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC4wOSknO1xuICBjb25zdCBob3ZlckJhY2tncm91bmQgPSBsaWdodCA/ICdyZ2JhKDAsIDAsIDAsIDAuMDkpJyA6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMTMpJztcbiAgY29uc3QgZGlzYWJsZWRCYWNrZ3JvdW5kID0gbGlnaHQgPyAncmdiYSgwLCAwLCAwLCAwLjEyKScgOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjEyKSc7XG4gIHJldHVybiBfZXh0ZW5kcyh7XG4gICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS52YXJzID8gdGhlbWUudmFycy5wYWxldHRlLkZpbGxlZElucHV0LmJnIDogYmFja2dyb3VuZENvbG9yLFxuICAgIGJvcmRlclRvcExlZnRSYWRpdXM6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5zaGFwZS5ib3JkZXJSYWRpdXMsXG4gICAgYm9yZGVyVG9wUmlnaHRSYWRpdXM6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5zaGFwZS5ib3JkZXJSYWRpdXMsXG4gICAgdHJhbnNpdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCdiYWNrZ3JvdW5kLWNvbG9yJywge1xuICAgICAgZHVyYXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmR1cmF0aW9uLnNob3J0ZXIsXG4gICAgICBlYXNpbmc6IHRoZW1lLnRyYW5zaXRpb25zLmVhc2luZy5lYXNlT3V0XG4gICAgfSksXG4gICAgJyY6aG92ZXInOiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnZhcnMgPyB0aGVtZS52YXJzLnBhbGV0dGUuRmlsbGVkSW5wdXQuaG92ZXJCZyA6IGhvdmVyQmFja2dyb3VuZCxcbiAgICAgIC8vIFJlc2V0IG9uIHRvdWNoIGRldmljZXMsIGl0IGRvZXNuJ3QgYWRkIHNwZWNpZmljaXR5XG4gICAgICAnQG1lZGlhIChob3Zlcjogbm9uZSknOiB7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUudmFycyA/IHRoZW1lLnZhcnMucGFsZXR0ZS5GaWxsZWRJbnB1dC5iZyA6IGJhY2tncm91bmRDb2xvclxuICAgICAgfVxuICAgIH0sXG4gICAgW2AmLiR7ZmlsbGVkSW5wdXRDbGFzc2VzLmZvY3VzZWR9YF06IHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUudmFycyA/IHRoZW1lLnZhcnMucGFsZXR0ZS5GaWxsZWRJbnB1dC5iZyA6IGJhY2tncm91bmRDb2xvclxuICAgIH0sXG4gICAgW2AmLiR7ZmlsbGVkSW5wdXRDbGFzc2VzLmRpc2FibGVkfWBdOiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnZhcnMgPyB0aGVtZS52YXJzLnBhbGV0dGUuRmlsbGVkSW5wdXQuZGlzYWJsZWRCZyA6IGRpc2FibGVkQmFja2dyb3VuZFxuICAgIH1cbiAgfSwgIW93bmVyU3RhdGUuZGlzYWJsZVVuZGVybGluZSAmJiB7XG4gICAgJyY6OmFmdGVyJzoge1xuICAgICAgYm9yZGVyQm90dG9tOiBgMnB4IHNvbGlkICR7KF9wYWxldHRlID0gKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGVbb3duZXJTdGF0ZS5jb2xvciB8fCAncHJpbWFyeSddKSA9PSBudWxsID8gdm9pZCAwIDogX3BhbGV0dGUubWFpbn1gLFxuICAgICAgbGVmdDogMCxcbiAgICAgIGJvdHRvbTogMCxcbiAgICAgIC8vIERvaW5nIHRoZSBvdGhlciB3YXkgYXJvdW5kIGNyYXNoIG9uIElFMTEgXCInJ1wiIGh0dHBzOi8vZ2l0aHViLmNvbS9jc3NpbmpzL2pzcy9pc3N1ZXMvMjQyXG4gICAgICBjb250ZW50OiAnXCJcIicsXG4gICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgIHJpZ2h0OiAwLFxuICAgICAgdHJhbnNmb3JtOiAnc2NhbGVYKDApJyxcbiAgICAgIHRyYW5zaXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZSgndHJhbnNmb3JtJywge1xuICAgICAgICBkdXJhdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuZHVyYXRpb24uc2hvcnRlcixcbiAgICAgICAgZWFzaW5nOiB0aGVtZS50cmFuc2l0aW9ucy5lYXNpbmcuZWFzZU91dFxuICAgICAgfSksXG4gICAgICBwb2ludGVyRXZlbnRzOiAnbm9uZScgLy8gVHJhbnNwYXJlbnQgdG8gdGhlIGhvdmVyIHN0eWxlLlxuICAgIH0sXG4gICAgW2AmLiR7ZmlsbGVkSW5wdXRDbGFzc2VzLmZvY3VzZWR9OmFmdGVyYF06IHtcbiAgICAgIC8vIHRyYW5zbGF0ZVgoMCkgaXMgYSB3b3JrYXJvdW5kIGZvciBTYWZhcmkgdHJhbnNmb3JtIHNjYWxlIGJ1Z1xuICAgICAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9tdWkvbWF0ZXJpYWwtdWkvaXNzdWVzLzMxNzY2XG4gICAgICB0cmFuc2Zvcm06ICdzY2FsZVgoMSkgdHJhbnNsYXRlWCgwKSdcbiAgICB9LFxuICAgIFtgJi4ke2ZpbGxlZElucHV0Q2xhc3Nlcy5lcnJvcn1gXToge1xuICAgICAgJyY6OmJlZm9yZSwgJjo6YWZ0ZXInOiB7XG4gICAgICAgIGJvcmRlckJvdHRvbUNvbG9yOiAodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZS5lcnJvci5tYWluXG4gICAgICB9XG4gICAgfSxcbiAgICAnJjo6YmVmb3JlJzoge1xuICAgICAgYm9yZGVyQm90dG9tOiBgMXB4IHNvbGlkICR7dGhlbWUudmFycyA/IGByZ2JhKCR7dGhlbWUudmFycy5wYWxldHRlLmNvbW1vbi5vbkJhY2tncm91bmRDaGFubmVsfSAvICR7dGhlbWUudmFycy5vcGFjaXR5LmlucHV0VW5kZXJsaW5lfSlgIDogYm90dG9tTGluZUNvbG9yfWAsXG4gICAgICBsZWZ0OiAwLFxuICAgICAgYm90dG9tOiAwLFxuICAgICAgLy8gRG9pbmcgdGhlIG90aGVyIHdheSBhcm91bmQgY3Jhc2ggb24gSUUxMSBcIicnXCIgaHR0cHM6Ly9naXRodWIuY29tL2Nzc2luanMvanNzL2lzc3Vlcy8yNDJcbiAgICAgIGNvbnRlbnQ6ICdcIlxcXFwwMGEwXCInLFxuICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICByaWdodDogMCxcbiAgICAgIHRyYW5zaXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZSgnYm9yZGVyLWJvdHRvbS1jb2xvcicsIHtcbiAgICAgICAgZHVyYXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmR1cmF0aW9uLnNob3J0ZXJcbiAgICAgIH0pLFxuICAgICAgcG9pbnRlckV2ZW50czogJ25vbmUnIC8vIFRyYW5zcGFyZW50IHRvIHRoZSBob3ZlciBzdHlsZS5cbiAgICB9LFxuICAgIFtgJjpob3Zlcjpub3QoLiR7ZmlsbGVkSW5wdXRDbGFzc2VzLmRpc2FibGVkfSwgLiR7ZmlsbGVkSW5wdXRDbGFzc2VzLmVycm9yfSk6YmVmb3JlYF06IHtcbiAgICAgIGJvcmRlckJvdHRvbTogYDFweCBzb2xpZCAkeyh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlLnRleHQucHJpbWFyeX1gXG4gICAgfSxcbiAgICBbYCYuJHtmaWxsZWRJbnB1dENsYXNzZXMuZGlzYWJsZWR9OmJlZm9yZWBdOiB7XG4gICAgICBib3JkZXJCb3R0b21TdHlsZTogJ2RvdHRlZCdcbiAgICB9XG4gIH0sIG93bmVyU3RhdGUuc3RhcnRBZG9ybm1lbnQgJiYge1xuICAgIHBhZGRpbmdMZWZ0OiAxMlxuICB9LCBvd25lclN0YXRlLmVuZEFkb3JubWVudCAmJiB7XG4gICAgcGFkZGluZ1JpZ2h0OiAxMlxuICB9LCBvd25lclN0YXRlLm11bHRpbGluZSAmJiBfZXh0ZW5kcyh7XG4gICAgcGFkZGluZzogJzI1cHggMTJweCA4cHgnXG4gIH0sIG93bmVyU3RhdGUuc2l6ZSA9PT0gJ3NtYWxsJyAmJiB7XG4gICAgcGFkZGluZ1RvcDogMjEsXG4gICAgcGFkZGluZ0JvdHRvbTogNFxuICB9LCBvd25lclN0YXRlLmhpZGRlbkxhYmVsICYmIHtcbiAgICBwYWRkaW5nVG9wOiAxNixcbiAgICBwYWRkaW5nQm90dG9tOiAxN1xuICB9LCBvd25lclN0YXRlLmhpZGRlbkxhYmVsICYmIG93bmVyU3RhdGUuc2l6ZSA9PT0gJ3NtYWxsJyAmJiB7XG4gICAgcGFkZGluZ1RvcDogOCxcbiAgICBwYWRkaW5nQm90dG9tOiA5XG4gIH0pKTtcbn0pO1xuY29uc3QgRmlsbGVkSW5wdXRJbnB1dCA9IHN0eWxlZChJbnB1dEJhc2VJbnB1dCwge1xuICBuYW1lOiAnTXVpRmlsbGVkSW5wdXQnLFxuICBzbG90OiAnSW5wdXQnLFxuICBvdmVycmlkZXNSZXNvbHZlcjogaW5wdXRCYXNlSW5wdXRPdmVycmlkZXNSZXNvbHZlclxufSkoKHtcbiAgdGhlbWUsXG4gIG93bmVyU3RhdGVcbn0pID0+IF9leHRlbmRzKHtcbiAgcGFkZGluZ1RvcDogMjUsXG4gIHBhZGRpbmdSaWdodDogMTIsXG4gIHBhZGRpbmdCb3R0b206IDgsXG4gIHBhZGRpbmdMZWZ0OiAxMlxufSwgIXRoZW1lLnZhcnMgJiYge1xuICAnJjotd2Via2l0LWF1dG9maWxsJzoge1xuICAgIFdlYmtpdEJveFNoYWRvdzogdGhlbWUucGFsZXR0ZS5tb2RlID09PSAnbGlnaHQnID8gbnVsbCA6ICcwIDAgMCAxMDBweCAjMjY2Nzk4IGluc2V0JyxcbiAgICBXZWJraXRUZXh0RmlsbENvbG9yOiB0aGVtZS5wYWxldHRlLm1vZGUgPT09ICdsaWdodCcgPyBudWxsIDogJyNmZmYnLFxuICAgIGNhcmV0Q29sb3I6IHRoZW1lLnBhbGV0dGUubW9kZSA9PT0gJ2xpZ2h0JyA/IG51bGwgOiAnI2ZmZicsXG4gICAgYm9yZGVyVG9wTGVmdFJhZGl1czogJ2luaGVyaXQnLFxuICAgIGJvcmRlclRvcFJpZ2h0UmFkaXVzOiAnaW5oZXJpdCdcbiAgfVxufSwgdGhlbWUudmFycyAmJiB7XG4gICcmOi13ZWJraXQtYXV0b2ZpbGwnOiB7XG4gICAgYm9yZGVyVG9wTGVmdFJhZGl1czogJ2luaGVyaXQnLFxuICAgIGJvcmRlclRvcFJpZ2h0UmFkaXVzOiAnaW5oZXJpdCdcbiAgfSxcbiAgW3RoZW1lLmdldENvbG9yU2NoZW1lU2VsZWN0b3IoJ2RhcmsnKV06IHtcbiAgICAnJjotd2Via2l0LWF1dG9maWxsJzoge1xuICAgICAgV2Via2l0Qm94U2hhZG93OiAnMCAwIDAgMTAwcHggIzI2Njc5OCBpbnNldCcsXG4gICAgICBXZWJraXRUZXh0RmlsbENvbG9yOiAnI2ZmZicsXG4gICAgICBjYXJldENvbG9yOiAnI2ZmZidcbiAgICB9XG4gIH1cbn0sIG93bmVyU3RhdGUuc2l6ZSA9PT0gJ3NtYWxsJyAmJiB7XG4gIHBhZGRpbmdUb3A6IDIxLFxuICBwYWRkaW5nQm90dG9tOiA0XG59LCBvd25lclN0YXRlLmhpZGRlbkxhYmVsICYmIHtcbiAgcGFkZGluZ1RvcDogMTYsXG4gIHBhZGRpbmdCb3R0b206IDE3XG59LCBvd25lclN0YXRlLnN0YXJ0QWRvcm5tZW50ICYmIHtcbiAgcGFkZGluZ0xlZnQ6IDBcbn0sIG93bmVyU3RhdGUuZW5kQWRvcm5tZW50ICYmIHtcbiAgcGFkZGluZ1JpZ2h0OiAwXG59LCBvd25lclN0YXRlLmhpZGRlbkxhYmVsICYmIG93bmVyU3RhdGUuc2l6ZSA9PT0gJ3NtYWxsJyAmJiB7XG4gIHBhZGRpbmdUb3A6IDgsXG4gIHBhZGRpbmdCb3R0b206IDlcbn0sIG93bmVyU3RhdGUubXVsdGlsaW5lICYmIHtcbiAgcGFkZGluZ1RvcDogMCxcbiAgcGFkZGluZ0JvdHRvbTogMCxcbiAgcGFkZGluZ0xlZnQ6IDAsXG4gIHBhZGRpbmdSaWdodDogMFxufSkpO1xuY29uc3QgRmlsbGVkSW5wdXQgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBGaWxsZWRJbnB1dChpblByb3BzLCByZWYpIHtcbiAgdmFyIF9yZWYsIF9zbG90cyRyb290LCBfcmVmMiwgX3Nsb3RzJGlucHV0O1xuICBjb25zdCBwcm9wcyA9IHVzZURlZmF1bHRQcm9wcyh7XG4gICAgcHJvcHM6IGluUHJvcHMsXG4gICAgbmFtZTogJ011aUZpbGxlZElucHV0J1xuICB9KTtcbiAgY29uc3Qge1xuICAgICAgY29tcG9uZW50cyA9IHt9LFxuICAgICAgY29tcG9uZW50c1Byb3BzOiBjb21wb25lbnRzUHJvcHNQcm9wLFxuICAgICAgZnVsbFdpZHRoID0gZmFsc2UsXG4gICAgICAvLyBkZWNsYXJlIGhlcmUgdG8gcHJldmVudCBzcHJlYWRpbmcgdG8gRE9NXG4gICAgICBpbnB1dENvbXBvbmVudCA9ICdpbnB1dCcsXG4gICAgICBtdWx0aWxpbmUgPSBmYWxzZSxcbiAgICAgIHNsb3RQcm9wcyxcbiAgICAgIHNsb3RzID0ge30sXG4gICAgICB0eXBlID0gJ3RleHQnXG4gICAgfSA9IHByb3BzLFxuICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIF9leGNsdWRlZCk7XG4gIGNvbnN0IG93bmVyU3RhdGUgPSBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICBmdWxsV2lkdGgsXG4gICAgaW5wdXRDb21wb25lbnQsXG4gICAgbXVsdGlsaW5lLFxuICAgIHR5cGVcbiAgfSk7XG4gIGNvbnN0IGNsYXNzZXMgPSB1c2VVdGlsaXR5Q2xhc3Nlcyhwcm9wcyk7XG4gIGNvbnN0IGZpbGxlZElucHV0Q29tcG9uZW50c1Byb3BzID0ge1xuICAgIHJvb3Q6IHtcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9LFxuICAgIGlucHV0OiB7XG4gICAgICBvd25lclN0YXRlXG4gICAgfVxuICB9O1xuICBjb25zdCBjb21wb25lbnRzUHJvcHMgPSAoc2xvdFByb3BzICE9IG51bGwgPyBzbG90UHJvcHMgOiBjb21wb25lbnRzUHJvcHNQcm9wKSA/IGRlZXBtZXJnZShmaWxsZWRJbnB1dENvbXBvbmVudHNQcm9wcywgc2xvdFByb3BzICE9IG51bGwgPyBzbG90UHJvcHMgOiBjb21wb25lbnRzUHJvcHNQcm9wKSA6IGZpbGxlZElucHV0Q29tcG9uZW50c1Byb3BzO1xuICBjb25zdCBSb290U2xvdCA9IChfcmVmID0gKF9zbG90cyRyb290ID0gc2xvdHMucm9vdCkgIT0gbnVsbCA/IF9zbG90cyRyb290IDogY29tcG9uZW50cy5Sb290KSAhPSBudWxsID8gX3JlZiA6IEZpbGxlZElucHV0Um9vdDtcbiAgY29uc3QgSW5wdXRTbG90ID0gKF9yZWYyID0gKF9zbG90cyRpbnB1dCA9IHNsb3RzLmlucHV0KSAhPSBudWxsID8gX3Nsb3RzJGlucHV0IDogY29tcG9uZW50cy5JbnB1dCkgIT0gbnVsbCA/IF9yZWYyIDogRmlsbGVkSW5wdXRJbnB1dDtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KElucHV0QmFzZSwgX2V4dGVuZHMoe1xuICAgIHNsb3RzOiB7XG4gICAgICByb290OiBSb290U2xvdCxcbiAgICAgIGlucHV0OiBJbnB1dFNsb3RcbiAgICB9LFxuICAgIGNvbXBvbmVudHNQcm9wczogY29tcG9uZW50c1Byb3BzLFxuICAgIGZ1bGxXaWR0aDogZnVsbFdpZHRoLFxuICAgIGlucHV0Q29tcG9uZW50OiBpbnB1dENvbXBvbmVudCxcbiAgICBtdWx0aWxpbmU6IG11bHRpbGluZSxcbiAgICByZWY6IHJlZixcbiAgICB0eXBlOiB0eXBlXG4gIH0sIG90aGVyLCB7XG4gICAgY2xhc3NlczogY2xhc3Nlc1xuICB9KSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IEZpbGxlZElucHV0LnByb3BUeXBlcyAvKiByZW1vdmUtcHJvcHR5cGVzICovID0ge1xuICAvLyDilIzilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIAgV2FybmluZyDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJBcbiAgLy8g4pSCIFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucy4g4pSCXG4gIC8vIOKUgiAgICBUbyB1cGRhdGUgdGhlbSwgZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gYHBucG0gcHJvcHR5cGVzYC4gICAgIOKUglxuICAvLyDilJTilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJhcbiAgLyoqXG4gICAqIFRoaXMgcHJvcCBoZWxwcyB1c2VycyB0byBmaWxsIGZvcm1zIGZhc3RlciwgZXNwZWNpYWxseSBvbiBtb2JpbGUgZGV2aWNlcy5cbiAgICogVGhlIG5hbWUgY2FuIGJlIGNvbmZ1c2luZywgYXMgaXQncyBtb3JlIGxpa2UgYW4gYXV0b2ZpbGwuXG4gICAqIFlvdSBjYW4gbGVhcm4gbW9yZSBhYm91dCBpdCBbZm9sbG93aW5nIHRoZSBzcGVjaWZpY2F0aW9uXShodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9mb3JtLWNvbnRyb2wtaW5mcmFzdHJ1Y3R1cmUuaHRtbCNhdXRvZmlsbCkuXG4gICAqL1xuICBhdXRvQ29tcGxldGU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBgaW5wdXRgIGVsZW1lbnQgaXMgZm9jdXNlZCBkdXJpbmcgdGhlIGZpcnN0IG1vdW50LlxuICAgKi9cbiAgYXV0b0ZvY3VzOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG4gIC8qKlxuICAgKiBUaGUgY29sb3Igb2YgdGhlIGNvbXBvbmVudC5cbiAgICogSXQgc3VwcG9ydHMgYm90aCBkZWZhdWx0IGFuZCBjdXN0b20gdGhlbWUgY29sb3JzLCB3aGljaCBjYW4gYmUgYWRkZWQgYXMgc2hvd24gaW4gdGhlXG4gICAqIFtwYWxldHRlIGN1c3RvbWl6YXRpb24gZ3VpZGVdKGh0dHBzOi8vbXVpLmNvbS9tYXRlcmlhbC11aS9jdXN0b21pemF0aW9uL3BhbGV0dGUvI2N1c3RvbS1jb2xvcnMpLlxuICAgKiBUaGUgcHJvcCBkZWZhdWx0cyB0byB0aGUgdmFsdWUgKGAncHJpbWFyeSdgKSBpbmhlcml0ZWQgZnJvbSB0aGUgcGFyZW50IEZvcm1Db250cm9sIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbG9yOiBQcm9wVHlwZXMgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqLy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ3ByaW1hcnknLCAnc2Vjb25kYXJ5J10pLCBQcm9wVHlwZXMuc3RyaW5nXSksXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50cyB1c2VkIGZvciBlYWNoIHNsb3QgaW5zaWRlLlxuICAgKlxuICAgKiBUaGlzIHByb3AgaXMgYW4gYWxpYXMgZm9yIHRoZSBgc2xvdHNgIHByb3AuXG4gICAqIEl0J3MgcmVjb21tZW5kZWQgdG8gdXNlIHRoZSBgc2xvdHNgIHByb3AgaW5zdGVhZC5cbiAgICpcbiAgICogQGRlZmF1bHQge31cbiAgICovXG4gIGNvbXBvbmVudHM6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgSW5wdXQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcbiAgICBSb290OiBQcm9wVHlwZXMuZWxlbWVudFR5cGVcbiAgfSksXG4gIC8qKlxuICAgKiBUaGUgZXh0cmEgcHJvcHMgZm9yIHRoZSBzbG90IGNvbXBvbmVudHMuXG4gICAqIFlvdSBjYW4gb3ZlcnJpZGUgdGhlIGV4aXN0aW5nIHByb3BzIG9yIGFkZCBuZXcgb25lcy5cbiAgICpcbiAgICogVGhpcyBwcm9wIGlzIGFuIGFsaWFzIGZvciB0aGUgYHNsb3RQcm9wc2AgcHJvcC5cbiAgICogSXQncyByZWNvbW1lbmRlZCB0byB1c2UgdGhlIGBzbG90UHJvcHNgIHByb3AgaW5zdGVhZCwgYXMgYGNvbXBvbmVudHNQcm9wc2Agd2lsbCBiZSBkZXByZWNhdGVkIGluIHRoZSBmdXR1cmUuXG4gICAqXG4gICAqIEBkZWZhdWx0IHt9XG4gICAqL1xuICBjb21wb25lbnRzUHJvcHM6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgaW5wdXQ6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgcm9vdDogUHJvcFR5cGVzLm9iamVjdFxuICB9KSxcbiAgLyoqXG4gICAqIFRoZSBkZWZhdWx0IHZhbHVlLiBVc2Ugd2hlbiB0aGUgY29tcG9uZW50IGlzIG5vdCBjb250cm9sbGVkLlxuICAgKi9cbiAgZGVmYXVsdFZhbHVlOiBQcm9wVHlwZXMuYW55LFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgY29tcG9uZW50IGlzIGRpc2FibGVkLlxuICAgKiBUaGUgcHJvcCBkZWZhdWx0cyB0byB0aGUgdmFsdWUgKGBmYWxzZWApIGluaGVyaXRlZCBmcm9tIHRoZSBwYXJlbnQgRm9ybUNvbnRyb2wgY29tcG9uZW50LlxuICAgKi9cbiAgZGlzYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgaW5wdXQgd2lsbCBub3QgaGF2ZSBhbiB1bmRlcmxpbmUuXG4gICAqL1xuICBkaXNhYmxlVW5kZXJsaW5lOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIEVuZCBgSW5wdXRBZG9ybm1lbnRgIGZvciB0aGlzIGNvbXBvbmVudC5cbiAgICovXG4gIGVuZEFkb3JubWVudDogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBgaW5wdXRgIHdpbGwgaW5kaWNhdGUgYW4gZXJyb3IuXG4gICAqIFRoZSBwcm9wIGRlZmF1bHRzIHRvIHRoZSB2YWx1ZSAoYGZhbHNlYCkgaW5oZXJpdGVkIGZyb20gdGhlIHBhcmVudCBGb3JtQ29udHJvbCBjb21wb25lbnQuXG4gICAqL1xuICBlcnJvcjogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBgaW5wdXRgIHdpbGwgdGFrZSB1cCB0aGUgZnVsbCB3aWR0aCBvZiBpdHMgY29udGFpbmVyLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZnVsbFdpZHRoOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGxhYmVsIGlzIGhpZGRlbi5cbiAgICogVGhpcyBpcyB1c2VkIHRvIGluY3JlYXNlIGRlbnNpdHkgZm9yIGEgYEZpbGxlZElucHV0YC5cbiAgICogQmUgc3VyZSB0byBhZGQgYGFyaWEtbGFiZWxgIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBoaWRkZW5MYWJlbDogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBUaGUgaWQgb2YgdGhlIGBpbnB1dGAgZWxlbWVudC5cbiAgICovXG4gIGlkOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgYGlucHV0YCBlbGVtZW50LlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgSFRNTCBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKiBAZGVmYXVsdCAnaW5wdXQnXG4gICAqL1xuICBpbnB1dENvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuICAvKipcbiAgICogW0F0dHJpYnV0ZXNdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUTUwvRWxlbWVudC9pbnB1dCNBdHRyaWJ1dGVzKSBhcHBsaWVkIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAqIEBkZWZhdWx0IHt9XG4gICAqL1xuICBpbnB1dFByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogUGFzcyBhIHJlZiB0byB0aGUgYGlucHV0YCBlbGVtZW50LlxuICAgKi9cbiAgaW5wdXRSZWY6IHJlZlR5cGUsXG4gIC8qKlxuICAgKiBJZiBgZGVuc2VgLCB3aWxsIGFkanVzdCB2ZXJ0aWNhbCBzcGFjaW5nLiBUaGlzIGlzIG5vcm1hbGx5IG9idGFpbmVkIHZpYSBjb250ZXh0IGZyb21cbiAgICogRm9ybUNvbnRyb2wuXG4gICAqIFRoZSBwcm9wIGRlZmF1bHRzIHRvIHRoZSB2YWx1ZSAoYCdub25lJ2ApIGluaGVyaXRlZCBmcm9tIHRoZSBwYXJlbnQgRm9ybUNvbnRyb2wgY29tcG9uZW50LlxuICAgKi9cbiAgbWFyZ2luOiBQcm9wVHlwZXMub25lT2YoWydkZW5zZScsICdub25lJ10pLFxuICAvKipcbiAgICogTWF4aW11bSBudW1iZXIgb2Ygcm93cyB0byBkaXNwbGF5IHdoZW4gbXVsdGlsaW5lIG9wdGlvbiBpcyBzZXQgdG8gdHJ1ZS5cbiAgICovXG4gIG1heFJvd3M6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zdHJpbmddKSxcbiAgLyoqXG4gICAqIE1pbmltdW0gbnVtYmVyIG9mIHJvd3MgdG8gZGlzcGxheSB3aGVuIG11bHRpbGluZSBvcHRpb24gaXMgc2V0IHRvIHRydWUuXG4gICAqL1xuICBtaW5Sb3dzOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc3RyaW5nXSksXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIGEgW1RleHRhcmVhQXV0b3NpemVdKC9tYXRlcmlhbC11aS9yZWFjdC10ZXh0YXJlYS1hdXRvc2l6ZS8pIGVsZW1lbnQgaXMgcmVuZGVyZWQuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBtdWx0aWxpbmU6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogTmFtZSBhdHRyaWJ1dGUgb2YgdGhlIGBpbnB1dGAgZWxlbWVudC5cbiAgICovXG4gIG5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSB2YWx1ZSBpcyBjaGFuZ2VkLlxuICAgKlxuICAgKiBAcGFyYW0ge1JlYWN0LkNoYW5nZUV2ZW50PEhUTUxUZXh0QXJlYUVsZW1lbnQgfCBIVE1MSW5wdXRFbGVtZW50Pn0gZXZlbnQgVGhlIGV2ZW50IHNvdXJjZSBvZiB0aGUgY2FsbGJhY2suXG4gICAqIFlvdSBjYW4gcHVsbCBvdXQgdGhlIG5ldyB2YWx1ZSBieSBhY2Nlc3NpbmcgYGV2ZW50LnRhcmdldC52YWx1ZWAgKHN0cmluZykuXG4gICAqL1xuICBvbkNoYW5nZTogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBUaGUgc2hvcnQgaGludCBkaXNwbGF5ZWQgaW4gdGhlIGBpbnB1dGAgYmVmb3JlIHRoZSB1c2VyIGVudGVycyBhIHZhbHVlLlxuICAgKi9cbiAgcGxhY2Vob2xkZXI6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBJdCBwcmV2ZW50cyB0aGUgdXNlciBmcm9tIGNoYW5naW5nIHRoZSB2YWx1ZSBvZiB0aGUgZmllbGRcbiAgICogKG5vdCBmcm9tIGludGVyYWN0aW5nIHdpdGggdGhlIGZpZWxkKS5cbiAgICovXG4gIHJlYWRPbmx5OiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGBpbnB1dGAgZWxlbWVudCBpcyByZXF1aXJlZC5cbiAgICogVGhlIHByb3AgZGVmYXVsdHMgdG8gdGhlIHZhbHVlIChgZmFsc2VgKSBpbmhlcml0ZWQgZnJvbSB0aGUgcGFyZW50IEZvcm1Db250cm9sIGNvbXBvbmVudC5cbiAgICovXG4gIHJlcXVpcmVkOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIE51bWJlciBvZiByb3dzIHRvIGRpc3BsYXkgd2hlbiBtdWx0aWxpbmUgb3B0aW9uIGlzIHNldCB0byB0cnVlLlxuICAgKi9cbiAgcm93czogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnN0cmluZ10pLFxuICAvKipcbiAgICogVGhlIGV4dHJhIHByb3BzIGZvciB0aGUgc2xvdCBjb21wb25lbnRzLlxuICAgKiBZb3UgY2FuIG92ZXJyaWRlIHRoZSBleGlzdGluZyBwcm9wcyBvciBhZGQgbmV3IG9uZXMuXG4gICAqXG4gICAqIFRoaXMgcHJvcCBpcyBhbiBhbGlhcyBmb3IgdGhlIGBjb21wb25lbnRzUHJvcHNgIHByb3AsIHdoaWNoIHdpbGwgYmUgZGVwcmVjYXRlZCBpbiB0aGUgZnV0dXJlLlxuICAgKlxuICAgKiBAZGVmYXVsdCB7fVxuICAgKi9cbiAgc2xvdFByb3BzOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGlucHV0OiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIHJvb3Q6IFByb3BUeXBlcy5vYmplY3RcbiAgfSksXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50cyB1c2VkIGZvciBlYWNoIHNsb3QgaW5zaWRlLlxuICAgKlxuICAgKiBUaGlzIHByb3AgaXMgYW4gYWxpYXMgZm9yIHRoZSBgY29tcG9uZW50c2AgcHJvcCwgd2hpY2ggd2lsbCBiZSBkZXByZWNhdGVkIGluIHRoZSBmdXR1cmUuXG4gICAqXG4gICAqIEBkZWZhdWx0IHt9XG4gICAqL1xuICBzbG90czogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBpbnB1dDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuICAgIHJvb3Q6IFByb3BUeXBlcy5lbGVtZW50VHlwZVxuICB9KSxcbiAgLyoqXG4gICAqIFN0YXJ0IGBJbnB1dEFkb3JubWVudGAgZm9yIHRoaXMgY29tcG9uZW50LlxuICAgKi9cbiAgc3RhcnRBZG9ybm1lbnQ6IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogVGhlIHN5c3RlbSBwcm9wIHRoYXQgYWxsb3dzIGRlZmluaW5nIHN5c3RlbSBvdmVycmlkZXMgYXMgd2VsbCBhcyBhZGRpdGlvbmFsIENTUyBzdHlsZXMuXG4gICAqL1xuICBzeDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5ib29sXSkpLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pLFxuICAvKipcbiAgICogVHlwZSBvZiB0aGUgYGlucHV0YCBlbGVtZW50LiBJdCBzaG91bGQgYmUgW2EgdmFsaWQgSFRNTDUgaW5wdXQgdHlwZV0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRNTC9FbGVtZW50L2lucHV0I0Zvcm1fJTNDaW5wdXQlM0VfdHlwZXMpLlxuICAgKiBAZGVmYXVsdCAndGV4dCdcbiAgICovXG4gIHR5cGU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBUaGUgdmFsdWUgb2YgdGhlIGBpbnB1dGAgZWxlbWVudCwgcmVxdWlyZWQgZm9yIGEgY29udHJvbGxlZCBjb21wb25lbnQuXG4gICAqL1xuICB2YWx1ZTogUHJvcFR5cGVzLmFueVxufSA6IHZvaWQgMDtcbkZpbGxlZElucHV0Lm11aU5hbWUgPSAnSW5wdXQnO1xuZXhwb3J0IGRlZmF1bHQgRmlsbGVkSW5wdXQ7IiwiaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzc2VzJztcbmltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzJztcbmV4cG9ydCBmdW5jdGlvbiBnZXRGb3JtQ29udHJvbFV0aWxpdHlDbGFzc2VzKHNsb3QpIHtcbiAgcmV0dXJuIGdlbmVyYXRlVXRpbGl0eUNsYXNzKCdNdWlGb3JtQ29udHJvbCcsIHNsb3QpO1xufVxuY29uc3QgZm9ybUNvbnRyb2xDbGFzc2VzID0gZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcygnTXVpRm9ybUNvbnRyb2wnLCBbJ3Jvb3QnLCAnbWFyZ2luTm9uZScsICdtYXJnaW5Ob3JtYWwnLCAnbWFyZ2luRGVuc2UnLCAnZnVsbFdpZHRoJywgJ2Rpc2FibGVkJ10pO1xuZXhwb3J0IGRlZmF1bHQgZm9ybUNvbnRyb2xDbGFzc2VzOyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImNoaWxkcmVuXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29sb3JcIiwgXCJjb21wb25lbnRcIiwgXCJkaXNhYmxlZFwiLCBcImVycm9yXCIsIFwiZm9jdXNlZFwiLCBcImZ1bGxXaWR0aFwiLCBcImhpZGRlbkxhYmVsXCIsIFwibWFyZ2luXCIsIFwicmVxdWlyZWRcIiwgXCJzaXplXCIsIFwidmFyaWFudFwiXTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCBjb21wb3NlQ2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2NvbXBvc2VDbGFzc2VzJztcbmltcG9ydCB7IHVzZURlZmF1bHRQcm9wcyB9IGZyb20gJy4uL0RlZmF1bHRQcm9wc1Byb3ZpZGVyJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnLi4vc3R5bGVzL3N0eWxlZCc7XG5pbXBvcnQgeyBpc0ZpbGxlZCwgaXNBZG9ybmVkU3RhcnQgfSBmcm9tICcuLi9JbnB1dEJhc2UvdXRpbHMnO1xuaW1wb3J0IGNhcGl0YWxpemUgZnJvbSAnLi4vdXRpbHMvY2FwaXRhbGl6ZSc7XG5pbXBvcnQgaXNNdWlFbGVtZW50IGZyb20gJy4uL3V0aWxzL2lzTXVpRWxlbWVudCc7XG5pbXBvcnQgRm9ybUNvbnRyb2xDb250ZXh0IGZyb20gJy4vRm9ybUNvbnRyb2xDb250ZXh0JztcbmltcG9ydCB7IGdldEZvcm1Db250cm9sVXRpbGl0eUNsYXNzZXMgfSBmcm9tICcuL2Zvcm1Db250cm9sQ2xhc3Nlcyc7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuY29uc3QgdXNlVXRpbGl0eUNsYXNzZXMgPSBvd25lclN0YXRlID0+IHtcbiAgY29uc3Qge1xuICAgIGNsYXNzZXMsXG4gICAgbWFyZ2luLFxuICAgIGZ1bGxXaWR0aFxuICB9ID0gb3duZXJTdGF0ZTtcbiAgY29uc3Qgc2xvdHMgPSB7XG4gICAgcm9vdDogWydyb290JywgbWFyZ2luICE9PSAnbm9uZScgJiYgYG1hcmdpbiR7Y2FwaXRhbGl6ZShtYXJnaW4pfWAsIGZ1bGxXaWR0aCAmJiAnZnVsbFdpZHRoJ11cbiAgfTtcbiAgcmV0dXJuIGNvbXBvc2VDbGFzc2VzKHNsb3RzLCBnZXRGb3JtQ29udHJvbFV0aWxpdHlDbGFzc2VzLCBjbGFzc2VzKTtcbn07XG5jb25zdCBGb3JtQ29udHJvbFJvb3QgPSBzdHlsZWQoJ2RpdicsIHtcbiAgbmFtZTogJ011aUZvcm1Db250cm9sJyxcbiAgc2xvdDogJ1Jvb3QnLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHtcbiAgICBvd25lclN0YXRlXG4gIH0sIHN0eWxlcykgPT4ge1xuICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgc3R5bGVzLnJvb3QsIHN0eWxlc1tgbWFyZ2luJHtjYXBpdGFsaXplKG93bmVyU3RhdGUubWFyZ2luKX1gXSwgb3duZXJTdGF0ZS5mdWxsV2lkdGggJiYgc3R5bGVzLmZ1bGxXaWR0aCk7XG4gIH1cbn0pKCh7XG4gIG93bmVyU3RhdGVcbn0pID0+IF9leHRlbmRzKHtcbiAgZGlzcGxheTogJ2lubGluZS1mbGV4JyxcbiAgZmxleERpcmVjdGlvbjogJ2NvbHVtbicsXG4gIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAvLyBSZXNldCBmaWVsZHNldCBkZWZhdWx0IHN0eWxlLlxuICBtaW5XaWR0aDogMCxcbiAgcGFkZGluZzogMCxcbiAgbWFyZ2luOiAwLFxuICBib3JkZXI6IDAsXG4gIHZlcnRpY2FsQWxpZ246ICd0b3AnXG59LCBvd25lclN0YXRlLm1hcmdpbiA9PT0gJ25vcm1hbCcgJiYge1xuICBtYXJnaW5Ub3A6IDE2LFxuICBtYXJnaW5Cb3R0b206IDhcbn0sIG93bmVyU3RhdGUubWFyZ2luID09PSAnZGVuc2UnICYmIHtcbiAgbWFyZ2luVG9wOiA4LFxuICBtYXJnaW5Cb3R0b206IDRcbn0sIG93bmVyU3RhdGUuZnVsbFdpZHRoICYmIHtcbiAgd2lkdGg6ICcxMDAlJ1xufSkpO1xuXG4vKipcbiAqIFByb3ZpZGVzIGNvbnRleHQgc3VjaCBhcyBmaWxsZWQvZm9jdXNlZC9lcnJvci9yZXF1aXJlZCBmb3IgZm9ybSBpbnB1dHMuXG4gKiBSZWx5aW5nIG9uIHRoZSBjb250ZXh0IHByb3ZpZGVzIGhpZ2ggZmxleGliaWxpdHkgYW5kIGVuc3VyZXMgdGhhdCB0aGUgc3RhdGUgYWx3YXlzIHN0YXlzXG4gKiBjb25zaXN0ZW50IGFjcm9zcyB0aGUgY2hpbGRyZW4gb2YgdGhlIGBGb3JtQ29udHJvbGAuXG4gKiBUaGlzIGNvbnRleHQgaXMgdXNlZCBieSB0aGUgZm9sbG93aW5nIGNvbXBvbmVudHM6XG4gKlxuICogIC0gRm9ybUxhYmVsXG4gKiAgLSBGb3JtSGVscGVyVGV4dFxuICogIC0gSW5wdXRcbiAqICAtIElucHV0TGFiZWxcbiAqXG4gKiBZb3UgY2FuIGZpbmQgb25lIGNvbXBvc2l0aW9uIGV4YW1wbGUgYmVsb3cgYW5kIG1vcmUgZ29pbmcgdG8gW3RoZSBkZW1vc10oL21hdGVyaWFsLXVpL3JlYWN0LXRleHQtZmllbGQvI2NvbXBvbmVudHMpLlxuICpcbiAqIGBgYGpzeFxuICogPEZvcm1Db250cm9sPlxuICogICA8SW5wdXRMYWJlbCBodG1sRm9yPVwibXktaW5wdXRcIj5FbWFpbCBhZGRyZXNzPC9JbnB1dExhYmVsPlxuICogICA8SW5wdXQgaWQ9XCJteS1pbnB1dFwiIGFyaWEtZGVzY3JpYmVkYnk9XCJteS1oZWxwZXItdGV4dFwiIC8+XG4gKiAgIDxGb3JtSGVscGVyVGV4dCBpZD1cIm15LWhlbHBlci10ZXh0XCI+V2UnbGwgbmV2ZXIgc2hhcmUgeW91ciBlbWFpbC48L0Zvcm1IZWxwZXJUZXh0PlxuICogPC9Gb3JtQ29udHJvbD5cbiAqIGBgYFxuICpcbiAqIOKaoO+4jyBPbmx5IG9uZSBgSW5wdXRCYXNlYCBjYW4gYmUgdXNlZCB3aXRoaW4gYSBGb3JtQ29udHJvbCBiZWNhdXNlIGl0IGNyZWF0ZXMgdmlzdWFsIGluY29uc2lzdGVuY2llcy5cbiAqIEZvciBpbnN0YW5jZSwgb25seSBvbmUgaW5wdXQgY2FuIGJlIGZvY3VzZWQgYXQgdGhlIHNhbWUgdGltZSwgdGhlIHN0YXRlIHNob3VsZG4ndCBiZSBzaGFyZWQuXG4gKi9cbmNvbnN0IEZvcm1Db250cm9sID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gRm9ybUNvbnRyb2woaW5Qcm9wcywgcmVmKSB7XG4gIGNvbnN0IHByb3BzID0gdXNlRGVmYXVsdFByb3BzKHtcbiAgICBwcm9wczogaW5Qcm9wcyxcbiAgICBuYW1lOiAnTXVpRm9ybUNvbnRyb2wnXG4gIH0pO1xuICBjb25zdCB7XG4gICAgICBjaGlsZHJlbixcbiAgICAgIGNsYXNzTmFtZSxcbiAgICAgIGNvbG9yID0gJ3ByaW1hcnknLFxuICAgICAgY29tcG9uZW50ID0gJ2RpdicsXG4gICAgICBkaXNhYmxlZCA9IGZhbHNlLFxuICAgICAgZXJyb3IgPSBmYWxzZSxcbiAgICAgIGZvY3VzZWQ6IHZpc3VhbGx5Rm9jdXNlZCxcbiAgICAgIGZ1bGxXaWR0aCA9IGZhbHNlLFxuICAgICAgaGlkZGVuTGFiZWwgPSBmYWxzZSxcbiAgICAgIG1hcmdpbiA9ICdub25lJyxcbiAgICAgIHJlcXVpcmVkID0gZmFsc2UsXG4gICAgICBzaXplID0gJ21lZGl1bScsXG4gICAgICB2YXJpYW50ID0gJ291dGxpbmVkJ1xuICAgIH0gPSBwcm9wcyxcbiAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQpO1xuICBjb25zdCBvd25lclN0YXRlID0gX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgY29sb3IsXG4gICAgY29tcG9uZW50LFxuICAgIGRpc2FibGVkLFxuICAgIGVycm9yLFxuICAgIGZ1bGxXaWR0aCxcbiAgICBoaWRkZW5MYWJlbCxcbiAgICBtYXJnaW4sXG4gICAgcmVxdWlyZWQsXG4gICAgc2l6ZSxcbiAgICB2YXJpYW50XG4gIH0pO1xuICBjb25zdCBjbGFzc2VzID0gdXNlVXRpbGl0eUNsYXNzZXMob3duZXJTdGF0ZSk7XG4gIGNvbnN0IFthZG9ybmVkU3RhcnQsIHNldEFkb3JuZWRTdGFydF0gPSBSZWFjdC51c2VTdGF0ZSgoKSA9PiB7XG4gICAgLy8gV2UgbmVlZCB0byBpdGVyYXRlIHRocm91Z2ggdGhlIGNoaWxkcmVuIGFuZCBmaW5kIHRoZSBJbnB1dCBpbiBvcmRlclxuICAgIC8vIHRvIGZ1bGx5IHN1cHBvcnQgc2VydmVyLXNpZGUgcmVuZGVyaW5nLlxuICAgIGxldCBpbml0aWFsQWRvcm5lZFN0YXJ0ID0gZmFsc2U7XG4gICAgaWYgKGNoaWxkcmVuKSB7XG4gICAgICBSZWFjdC5DaGlsZHJlbi5mb3JFYWNoKGNoaWxkcmVuLCBjaGlsZCA9PiB7XG4gICAgICAgIGlmICghaXNNdWlFbGVtZW50KGNoaWxkLCBbJ0lucHV0JywgJ1NlbGVjdCddKSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBpbnB1dCA9IGlzTXVpRWxlbWVudChjaGlsZCwgWydTZWxlY3QnXSkgPyBjaGlsZC5wcm9wcy5pbnB1dCA6IGNoaWxkO1xuICAgICAgICBpZiAoaW5wdXQgJiYgaXNBZG9ybmVkU3RhcnQoaW5wdXQucHJvcHMpKSB7XG4gICAgICAgICAgaW5pdGlhbEFkb3JuZWRTdGFydCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gaW5pdGlhbEFkb3JuZWRTdGFydDtcbiAgfSk7XG4gIGNvbnN0IFtmaWxsZWQsIHNldEZpbGxlZF0gPSBSZWFjdC51c2VTdGF0ZSgoKSA9PiB7XG4gICAgLy8gV2UgbmVlZCB0byBpdGVyYXRlIHRocm91Z2ggdGhlIGNoaWxkcmVuIGFuZCBmaW5kIHRoZSBJbnB1dCBpbiBvcmRlclxuICAgIC8vIHRvIGZ1bGx5IHN1cHBvcnQgc2VydmVyLXNpZGUgcmVuZGVyaW5nLlxuICAgIGxldCBpbml0aWFsRmlsbGVkID0gZmFsc2U7XG4gICAgaWYgKGNoaWxkcmVuKSB7XG4gICAgICBSZWFjdC5DaGlsZHJlbi5mb3JFYWNoKGNoaWxkcmVuLCBjaGlsZCA9PiB7XG4gICAgICAgIGlmICghaXNNdWlFbGVtZW50KGNoaWxkLCBbJ0lucHV0JywgJ1NlbGVjdCddKSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNGaWxsZWQoY2hpbGQucHJvcHMsIHRydWUpIHx8IGlzRmlsbGVkKGNoaWxkLnByb3BzLmlucHV0UHJvcHMsIHRydWUpKSB7XG4gICAgICAgICAgaW5pdGlhbEZpbGxlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gaW5pdGlhbEZpbGxlZDtcbiAgfSk7XG4gIGNvbnN0IFtmb2N1c2VkU3RhdGUsIHNldEZvY3VzZWRdID0gUmVhY3QudXNlU3RhdGUoZmFsc2UpO1xuICBpZiAoZGlzYWJsZWQgJiYgZm9jdXNlZFN0YXRlKSB7XG4gICAgc2V0Rm9jdXNlZChmYWxzZSk7XG4gIH1cbiAgY29uc3QgZm9jdXNlZCA9IHZpc3VhbGx5Rm9jdXNlZCAhPT0gdW5kZWZpbmVkICYmICFkaXNhYmxlZCA/IHZpc3VhbGx5Rm9jdXNlZCA6IGZvY3VzZWRTdGF0ZTtcbiAgbGV0IHJlZ2lzdGVyRWZmZWN0O1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9ydWxlcy1vZi1ob29rc1xuICAgIGNvbnN0IHJlZ2lzdGVyZWRJbnB1dCA9IFJlYWN0LnVzZVJlZihmYWxzZSk7XG4gICAgcmVnaXN0ZXJFZmZlY3QgPSAoKSA9PiB7XG4gICAgICBpZiAocmVnaXN0ZXJlZElucHV0LmN1cnJlbnQpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihbJ01VSTogVGhlcmUgYXJlIG11bHRpcGxlIGBJbnB1dEJhc2VgIGNvbXBvbmVudHMgaW5zaWRlIGEgRm9ybUNvbnRyb2wuJywgJ1RoaXMgY3JlYXRlcyB2aXN1YWwgaW5jb25zaXN0ZW5jaWVzLCBvbmx5IHVzZSBvbmUgYElucHV0QmFzZWAuJ10uam9pbignXFxuJykpO1xuICAgICAgfVxuICAgICAgcmVnaXN0ZXJlZElucHV0LmN1cnJlbnQgPSB0cnVlO1xuICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgcmVnaXN0ZXJlZElucHV0LmN1cnJlbnQgPSBmYWxzZTtcbiAgICAgIH07XG4gICAgfTtcbiAgfVxuICBjb25zdCBjaGlsZENvbnRleHQgPSBSZWFjdC51c2VNZW1vKCgpID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgYWRvcm5lZFN0YXJ0LFxuICAgICAgc2V0QWRvcm5lZFN0YXJ0LFxuICAgICAgY29sb3IsXG4gICAgICBkaXNhYmxlZCxcbiAgICAgIGVycm9yLFxuICAgICAgZmlsbGVkLFxuICAgICAgZm9jdXNlZCxcbiAgICAgIGZ1bGxXaWR0aCxcbiAgICAgIGhpZGRlbkxhYmVsLFxuICAgICAgc2l6ZSxcbiAgICAgIG9uQmx1cjogKCkgPT4ge1xuICAgICAgICBzZXRGb2N1c2VkKGZhbHNlKTtcbiAgICAgIH0sXG4gICAgICBvbkVtcHR5OiAoKSA9PiB7XG4gICAgICAgIHNldEZpbGxlZChmYWxzZSk7XG4gICAgICB9LFxuICAgICAgb25GaWxsZWQ6ICgpID0+IHtcbiAgICAgICAgc2V0RmlsbGVkKHRydWUpO1xuICAgICAgfSxcbiAgICAgIG9uRm9jdXM6ICgpID0+IHtcbiAgICAgICAgc2V0Rm9jdXNlZCh0cnVlKTtcbiAgICAgIH0sXG4gICAgICByZWdpc3RlckVmZmVjdCxcbiAgICAgIHJlcXVpcmVkLFxuICAgICAgdmFyaWFudFxuICAgIH07XG4gIH0sIFthZG9ybmVkU3RhcnQsIGNvbG9yLCBkaXNhYmxlZCwgZXJyb3IsIGZpbGxlZCwgZm9jdXNlZCwgZnVsbFdpZHRoLCBoaWRkZW5MYWJlbCwgcmVnaXN0ZXJFZmZlY3QsIHJlcXVpcmVkLCBzaXplLCB2YXJpYW50XSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeChGb3JtQ29udHJvbENvbnRleHQuUHJvdmlkZXIsIHtcbiAgICB2YWx1ZTogY2hpbGRDb250ZXh0LFxuICAgIGNoaWxkcmVuOiAvKiNfX1BVUkVfXyovX2pzeChGb3JtQ29udHJvbFJvb3QsIF9leHRlbmRzKHtcbiAgICAgIGFzOiBjb21wb25lbnQsXG4gICAgICBvd25lclN0YXRlOiBvd25lclN0YXRlLFxuICAgICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lKSxcbiAgICAgIHJlZjogcmVmXG4gICAgfSwgb3RoZXIsIHtcbiAgICAgIGNoaWxkcmVuOiBjaGlsZHJlblxuICAgIH0pKVxuICB9KTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gRm9ybUNvbnRyb2wucHJvcFR5cGVzIC8qIHJlbW92ZS1wcm9wdHlwZXMgKi8gPSB7XG4gIC8vIOKUjOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgCBXYXJuaW5nIOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUkFxuICAvLyDilIIgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zLiDilIJcbiAgLy8g4pSCICAgIFRvIHVwZGF0ZSB0aGVtLCBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBgcG5wbSBwcm9wdHlwZXNgLiAgICAg4pSCXG4gIC8vIOKUlOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUmFxuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBUaGUgY29sb3Igb2YgdGhlIGNvbXBvbmVudC5cbiAgICogSXQgc3VwcG9ydHMgYm90aCBkZWZhdWx0IGFuZCBjdXN0b20gdGhlbWUgY29sb3JzLCB3aGljaCBjYW4gYmUgYWRkZWQgYXMgc2hvd24gaW4gdGhlXG4gICAqIFtwYWxldHRlIGN1c3RvbWl6YXRpb24gZ3VpZGVdKGh0dHBzOi8vbXVpLmNvbS9tYXRlcmlhbC11aS9jdXN0b21pemF0aW9uL3BhbGV0dGUvI2N1c3RvbS1jb2xvcnMpLlxuICAgKiBAZGVmYXVsdCAncHJpbWFyeSdcbiAgICovXG4gIGNvbG9yOiBQcm9wVHlwZXMgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqLy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ3ByaW1hcnknLCAnc2Vjb25kYXJ5JywgJ2Vycm9yJywgJ2luZm8nLCAnc3VjY2VzcycsICd3YXJuaW5nJ10pLCBQcm9wVHlwZXMuc3RyaW5nXSksXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBIVE1MIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBjb21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGxhYmVsLCBpbnB1dCBhbmQgaGVscGVyIHRleHQgc2hvdWxkIGJlIGRpc3BsYXllZCBpbiBhIGRpc2FibGVkIHN0YXRlLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZGlzYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgbGFiZWwgaXMgZGlzcGxheWVkIGluIGFuIGVycm9yIHN0YXRlLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZXJyb3I6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgY29tcG9uZW50IGlzIGRpc3BsYXllZCBpbiBmb2N1c2VkIHN0YXRlLlxuICAgKi9cbiAgZm9jdXNlZDogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBjb21wb25lbnQgd2lsbCB0YWtlIHVwIHRoZSBmdWxsIHdpZHRoIG9mIGl0cyBjb250YWluZXIuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBmdWxsV2lkdGg6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgbGFiZWwgaXMgaGlkZGVuLlxuICAgKiBUaGlzIGlzIHVzZWQgdG8gaW5jcmVhc2UgZGVuc2l0eSBmb3IgYSBgRmlsbGVkSW5wdXRgLlxuICAgKiBCZSBzdXJlIHRvIGFkZCBgYXJpYS1sYWJlbGAgdG8gdGhlIGBpbnB1dGAgZWxlbWVudC5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGhpZGRlbkxhYmVsOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIElmIGBkZW5zZWAgb3IgYG5vcm1hbGAsIHdpbGwgYWRqdXN0IHZlcnRpY2FsIHNwYWNpbmcgb2YgdGhpcyBhbmQgY29udGFpbmVkIGNvbXBvbmVudHMuXG4gICAqIEBkZWZhdWx0ICdub25lJ1xuICAgKi9cbiAgbWFyZ2luOiBQcm9wVHlwZXMub25lT2YoWydkZW5zZScsICdub25lJywgJ25vcm1hbCddKSxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGxhYmVsIHdpbGwgaW5kaWNhdGUgdGhhdCB0aGUgYGlucHV0YCBpcyByZXF1aXJlZC5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIHJlcXVpcmVkOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIFRoZSBzaXplIG9mIHRoZSBjb21wb25lbnQuXG4gICAqIEBkZWZhdWx0ICdtZWRpdW0nXG4gICAqL1xuICBzaXplOiBQcm9wVHlwZXMgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqLy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ21lZGl1bScsICdzbWFsbCddKSwgUHJvcFR5cGVzLnN0cmluZ10pLFxuICAvKipcbiAgICogVGhlIHN5c3RlbSBwcm9wIHRoYXQgYWxsb3dzIGRlZmluaW5nIHN5c3RlbSBvdmVycmlkZXMgYXMgd2VsbCBhcyBhZGRpdGlvbmFsIENTUyBzdHlsZXMuXG4gICAqL1xuICBzeDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5ib29sXSkpLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pLFxuICAvKipcbiAgICogVGhlIHZhcmlhbnQgdG8gdXNlLlxuICAgKiBAZGVmYXVsdCAnb3V0bGluZWQnXG4gICAqL1xuICB2YXJpYW50OiBQcm9wVHlwZXMub25lT2YoWydmaWxsZWQnLCAnb3V0bGluZWQnLCAnc3RhbmRhcmQnXSlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCBGb3JtQ29udHJvbDsiLCJpbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiY29tcG9uZW50XCIsIFwiZGlyZWN0aW9uXCIsIFwic3BhY2luZ1wiLCBcImRpdmlkZXJcIiwgXCJjaGlsZHJlblwiLCBcImNsYXNzTmFtZVwiLCBcInVzZUZsZXhHYXBcIl07XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgZGVlcG1lcmdlIGZyb20gJ0BtdWkvdXRpbHMvZGVlcG1lcmdlJztcbmltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzJztcbmltcG9ydCBjb21wb3NlQ2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2NvbXBvc2VDbGFzc2VzJztcbmltcG9ydCBzeXN0ZW1TdHlsZWQgZnJvbSAnLi4vc3R5bGVkJztcbmltcG9ydCB1c2VUaGVtZVByb3BzU3lzdGVtIGZyb20gJy4uL3VzZVRoZW1lUHJvcHMnO1xuaW1wb3J0IHsgZXh0ZW5kU3hQcm9wIH0gZnJvbSAnLi4vc3R5bGVGdW5jdGlvblN4JztcbmltcG9ydCBjcmVhdGVUaGVtZSBmcm9tICcuLi9jcmVhdGVUaGVtZSc7XG5pbXBvcnQgeyBoYW5kbGVCcmVha3BvaW50cywgbWVyZ2VCcmVha3BvaW50c0luT3JkZXIsIHJlc29sdmVCcmVha3BvaW50VmFsdWVzIH0gZnJvbSAnLi4vYnJlYWtwb2ludHMnO1xuaW1wb3J0IHsgY3JlYXRlVW5hcnlTcGFjaW5nLCBnZXRWYWx1ZSB9IGZyb20gJy4uL3NwYWNpbmcnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmNvbnN0IGRlZmF1bHRUaGVtZSA9IGNyZWF0ZVRoZW1lKCk7XG4vLyB3aWRlbmluZyBUaGVtZSB0byBhbnkgc28gdGhhdCB0aGUgY29uc3VtZXIgY2FuIG93biB0aGUgdGhlbWUgc3RydWN0dXJlLlxuY29uc3QgZGVmYXVsdENyZWF0ZVN0eWxlZENvbXBvbmVudCA9IHN5c3RlbVN0eWxlZCgnZGl2Jywge1xuICBuYW1lOiAnTXVpU3RhY2snLFxuICBzbG90OiAnUm9vdCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4gc3R5bGVzLnJvb3Rcbn0pO1xuZnVuY3Rpb24gdXNlVGhlbWVQcm9wc0RlZmF1bHQocHJvcHMpIHtcbiAgcmV0dXJuIHVzZVRoZW1lUHJvcHNTeXN0ZW0oe1xuICAgIHByb3BzLFxuICAgIG5hbWU6ICdNdWlTdGFjaycsXG4gICAgZGVmYXVsdFRoZW1lXG4gIH0pO1xufVxuXG4vKipcbiAqIFJldHVybiBhbiBhcnJheSB3aXRoIHRoZSBzZXBhcmF0b3IgUmVhY3QgZWxlbWVudCBpbnRlcnNwZXJzZWQgYmV0d2VlblxuICogZWFjaCBSZWFjdCBub2RlIG9mIHRoZSBpbnB1dCBjaGlsZHJlbi5cbiAqXG4gKiA+IGpvaW5DaGlsZHJlbihbMSwyLDNdLCAwKVxuICogWzEsMCwyLDAsM11cbiAqL1xuZnVuY3Rpb24gam9pbkNoaWxkcmVuKGNoaWxkcmVuLCBzZXBhcmF0b3IpIHtcbiAgY29uc3QgY2hpbGRyZW5BcnJheSA9IFJlYWN0LkNoaWxkcmVuLnRvQXJyYXkoY2hpbGRyZW4pLmZpbHRlcihCb29sZWFuKTtcbiAgcmV0dXJuIGNoaWxkcmVuQXJyYXkucmVkdWNlKChvdXRwdXQsIGNoaWxkLCBpbmRleCkgPT4ge1xuICAgIG91dHB1dC5wdXNoKGNoaWxkKTtcbiAgICBpZiAoaW5kZXggPCBjaGlsZHJlbkFycmF5Lmxlbmd0aCAtIDEpIHtcbiAgICAgIG91dHB1dC5wdXNoKCAvKiNfX1BVUkVfXyovUmVhY3QuY2xvbmVFbGVtZW50KHNlcGFyYXRvciwge1xuICAgICAgICBrZXk6IGBzZXBhcmF0b3ItJHtpbmRleH1gXG4gICAgICB9KSk7XG4gICAgfVxuICAgIHJldHVybiBvdXRwdXQ7XG4gIH0sIFtdKTtcbn1cbmNvbnN0IGdldFNpZGVGcm9tRGlyZWN0aW9uID0gZGlyZWN0aW9uID0+IHtcbiAgcmV0dXJuIHtcbiAgICByb3c6ICdMZWZ0JyxcbiAgICAncm93LXJldmVyc2UnOiAnUmlnaHQnLFxuICAgIGNvbHVtbjogJ1RvcCcsXG4gICAgJ2NvbHVtbi1yZXZlcnNlJzogJ0JvdHRvbSdcbiAgfVtkaXJlY3Rpb25dO1xufTtcbmV4cG9ydCBjb25zdCBzdHlsZSA9ICh7XG4gIG93bmVyU3RhdGUsXG4gIHRoZW1lXG59KSA9PiB7XG4gIGxldCBzdHlsZXMgPSBfZXh0ZW5kcyh7XG4gICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgIGZsZXhEaXJlY3Rpb246ICdjb2x1bW4nXG4gIH0sIGhhbmRsZUJyZWFrcG9pbnRzKHtcbiAgICB0aGVtZVxuICB9LCByZXNvbHZlQnJlYWtwb2ludFZhbHVlcyh7XG4gICAgdmFsdWVzOiBvd25lclN0YXRlLmRpcmVjdGlvbixcbiAgICBicmVha3BvaW50czogdGhlbWUuYnJlYWtwb2ludHMudmFsdWVzXG4gIH0pLCBwcm9wVmFsdWUgPT4gKHtcbiAgICBmbGV4RGlyZWN0aW9uOiBwcm9wVmFsdWVcbiAgfSkpKTtcbiAgaWYgKG93bmVyU3RhdGUuc3BhY2luZykge1xuICAgIGNvbnN0IHRyYW5zZm9ybWVyID0gY3JlYXRlVW5hcnlTcGFjaW5nKHRoZW1lKTtcbiAgICBjb25zdCBiYXNlID0gT2JqZWN0LmtleXModGhlbWUuYnJlYWtwb2ludHMudmFsdWVzKS5yZWR1Y2UoKGFjYywgYnJlYWtwb2ludCkgPT4ge1xuICAgICAgaWYgKHR5cGVvZiBvd25lclN0YXRlLnNwYWNpbmcgPT09ICdvYmplY3QnICYmIG93bmVyU3RhdGUuc3BhY2luZ1ticmVha3BvaW50XSAhPSBudWxsIHx8IHR5cGVvZiBvd25lclN0YXRlLmRpcmVjdGlvbiA9PT0gJ29iamVjdCcgJiYgb3duZXJTdGF0ZS5kaXJlY3Rpb25bYnJlYWtwb2ludF0gIT0gbnVsbCkge1xuICAgICAgICBhY2NbYnJlYWtwb2ludF0gPSB0cnVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGFjYztcbiAgICB9LCB7fSk7XG4gICAgY29uc3QgZGlyZWN0aW9uVmFsdWVzID0gcmVzb2x2ZUJyZWFrcG9pbnRWYWx1ZXMoe1xuICAgICAgdmFsdWVzOiBvd25lclN0YXRlLmRpcmVjdGlvbixcbiAgICAgIGJhc2VcbiAgICB9KTtcbiAgICBjb25zdCBzcGFjaW5nVmFsdWVzID0gcmVzb2x2ZUJyZWFrcG9pbnRWYWx1ZXMoe1xuICAgICAgdmFsdWVzOiBvd25lclN0YXRlLnNwYWNpbmcsXG4gICAgICBiYXNlXG4gICAgfSk7XG4gICAgaWYgKHR5cGVvZiBkaXJlY3Rpb25WYWx1ZXMgPT09ICdvYmplY3QnKSB7XG4gICAgICBPYmplY3Qua2V5cyhkaXJlY3Rpb25WYWx1ZXMpLmZvckVhY2goKGJyZWFrcG9pbnQsIGluZGV4LCBicmVha3BvaW50cykgPT4ge1xuICAgICAgICBjb25zdCBkaXJlY3Rpb25WYWx1ZSA9IGRpcmVjdGlvblZhbHVlc1ticmVha3BvaW50XTtcbiAgICAgICAgaWYgKCFkaXJlY3Rpb25WYWx1ZSkge1xuICAgICAgICAgIGNvbnN0IHByZXZpb3VzRGlyZWN0aW9uVmFsdWUgPSBpbmRleCA+IDAgPyBkaXJlY3Rpb25WYWx1ZXNbYnJlYWtwb2ludHNbaW5kZXggLSAxXV0gOiAnY29sdW1uJztcbiAgICAgICAgICBkaXJlY3Rpb25WYWx1ZXNbYnJlYWtwb2ludF0gPSBwcmV2aW91c0RpcmVjdGlvblZhbHVlO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gICAgY29uc3Qgc3R5bGVGcm9tUHJvcFZhbHVlID0gKHByb3BWYWx1ZSwgYnJlYWtwb2ludCkgPT4ge1xuICAgICAgaWYgKG93bmVyU3RhdGUudXNlRmxleEdhcCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGdhcDogZ2V0VmFsdWUodHJhbnNmb3JtZXIsIHByb3BWYWx1ZSlcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB7XG4gICAgICAgIC8vIFRoZSB1c2VGbGV4R2FwPXtmYWxzZX0gaW1wbGVtZW50IHJlbGllcyBvbiBlYWNoIGNoaWxkIHRvIGdpdmUgdXAgY29udHJvbCBvZiB0aGUgbWFyZ2luLlxuICAgICAgICAvLyBXZSBuZWVkIHRvIHJlc2V0IHRoZSBtYXJnaW4gdG8gYXZvaWQgZG91YmxlIHNwYWNpbmcuXG4gICAgICAgICcmID4gOm5vdChzdHlsZSk6bm90KHN0eWxlKSc6IHtcbiAgICAgICAgICBtYXJnaW46IDBcbiAgICAgICAgfSxcbiAgICAgICAgJyYgPiA6bm90KHN0eWxlKSB+IDpub3Qoc3R5bGUpJzoge1xuICAgICAgICAgIFtgbWFyZ2luJHtnZXRTaWRlRnJvbURpcmVjdGlvbihicmVha3BvaW50ID8gZGlyZWN0aW9uVmFsdWVzW2JyZWFrcG9pbnRdIDogb3duZXJTdGF0ZS5kaXJlY3Rpb24pfWBdOiBnZXRWYWx1ZSh0cmFuc2Zvcm1lciwgcHJvcFZhbHVlKVxuICAgICAgICB9XG4gICAgICB9O1xuICAgIH07XG4gICAgc3R5bGVzID0gZGVlcG1lcmdlKHN0eWxlcywgaGFuZGxlQnJlYWtwb2ludHMoe1xuICAgICAgdGhlbWVcbiAgICB9LCBzcGFjaW5nVmFsdWVzLCBzdHlsZUZyb21Qcm9wVmFsdWUpKTtcbiAgfVxuICBzdHlsZXMgPSBtZXJnZUJyZWFrcG9pbnRzSW5PcmRlcih0aGVtZS5icmVha3BvaW50cywgc3R5bGVzKTtcbiAgcmV0dXJuIHN0eWxlcztcbn07XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVTdGFjayhvcHRpb25zID0ge30pIHtcbiAgY29uc3Qge1xuICAgIC8vIFRoaXMgd2lsbCBhbGxvdyBhZGRpbmcgY3VzdG9tIHN0eWxlZCBmbiAoZm9yIGV4YW1wbGUgZm9yIGN1c3RvbSBzeCBzdHlsZSBmdW5jdGlvbilcbiAgICBjcmVhdGVTdHlsZWRDb21wb25lbnQgPSBkZWZhdWx0Q3JlYXRlU3R5bGVkQ29tcG9uZW50LFxuICAgIHVzZVRoZW1lUHJvcHMgPSB1c2VUaGVtZVByb3BzRGVmYXVsdCxcbiAgICBjb21wb25lbnROYW1lID0gJ011aVN0YWNrJ1xuICB9ID0gb3B0aW9ucztcbiAgY29uc3QgdXNlVXRpbGl0eUNsYXNzZXMgPSAoKSA9PiB7XG4gICAgY29uc3Qgc2xvdHMgPSB7XG4gICAgICByb290OiBbJ3Jvb3QnXVxuICAgIH07XG4gICAgcmV0dXJuIGNvbXBvc2VDbGFzc2VzKHNsb3RzLCBzbG90ID0+IGdlbmVyYXRlVXRpbGl0eUNsYXNzKGNvbXBvbmVudE5hbWUsIHNsb3QpLCB7fSk7XG4gIH07XG4gIGNvbnN0IFN0YWNrUm9vdCA9IGNyZWF0ZVN0eWxlZENvbXBvbmVudChzdHlsZSk7XG4gIGNvbnN0IFN0YWNrID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gR3JpZChpblByb3BzLCByZWYpIHtcbiAgICBjb25zdCB0aGVtZVByb3BzID0gdXNlVGhlbWVQcm9wcyhpblByb3BzKTtcbiAgICBjb25zdCBwcm9wcyA9IGV4dGVuZFN4UHJvcCh0aGVtZVByb3BzKTsgLy8gYGNvbG9yYCB0eXBlIGNvbmZsaWN0cyB3aXRoIGh0bWwgY29sb3IgYXR0cmlidXRlLlxuICAgIGNvbnN0IHtcbiAgICAgICAgY29tcG9uZW50ID0gJ2RpdicsXG4gICAgICAgIGRpcmVjdGlvbiA9ICdjb2x1bW4nLFxuICAgICAgICBzcGFjaW5nID0gMCxcbiAgICAgICAgZGl2aWRlcixcbiAgICAgICAgY2hpbGRyZW4sXG4gICAgICAgIGNsYXNzTmFtZSxcbiAgICAgICAgdXNlRmxleEdhcCA9IGZhbHNlXG4gICAgICB9ID0gcHJvcHMsXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQpO1xuICAgIGNvbnN0IG93bmVyU3RhdGUgPSB7XG4gICAgICBkaXJlY3Rpb24sXG4gICAgICBzcGFjaW5nLFxuICAgICAgdXNlRmxleEdhcFxuICAgIH07XG4gICAgY29uc3QgY2xhc3NlcyA9IHVzZVV0aWxpdHlDbGFzc2VzKCk7XG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KFN0YWNrUm9vdCwgX2V4dGVuZHMoe1xuICAgICAgYXM6IGNvbXBvbmVudCxcbiAgICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGUsXG4gICAgICByZWY6IHJlZixcbiAgICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSlcbiAgICB9LCBvdGhlciwge1xuICAgICAgY2hpbGRyZW46IGRpdmlkZXIgPyBqb2luQ2hpbGRyZW4oY2hpbGRyZW4sIGRpdmlkZXIpIDogY2hpbGRyZW5cbiAgICB9KSk7XG4gIH0pO1xuICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBTdGFjay5wcm9wVHlwZXMgLyogcmVtb3ZlLXByb3B0eXBlcyAqLyA9IHtcbiAgICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gICAgZGlyZWN0aW9uOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydjb2x1bW4tcmV2ZXJzZScsICdjb2x1bW4nLCAncm93LXJldmVyc2UnLCAncm93J10pLCBQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub25lT2YoWydjb2x1bW4tcmV2ZXJzZScsICdjb2x1bW4nLCAncm93LXJldmVyc2UnLCAncm93J10pKSwgUHJvcFR5cGVzLm9iamVjdF0pLFxuICAgIGRpdmlkZXI6IFByb3BUeXBlcy5ub2RlLFxuICAgIHNwYWNpbmc6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zdHJpbmddKSksIFByb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5zdHJpbmddKSxcbiAgICBzeDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5ib29sXSkpLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pXG4gIH0gOiB2b2lkIDA7XG4gIHJldHVybiBTdGFjaztcbn0iLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBjcmVhdGVTdGFjayB9IGZyb20gJ0BtdWkvc3lzdGVtJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnLi4vc3R5bGVzL3N0eWxlZCc7XG5pbXBvcnQgeyB1c2VEZWZhdWx0UHJvcHMgfSBmcm9tICcuLi9EZWZhdWx0UHJvcHNQcm92aWRlcic7XG5jb25zdCBTdGFjayA9IGNyZWF0ZVN0YWNrKHtcbiAgY3JlYXRlU3R5bGVkQ29tcG9uZW50OiBzdHlsZWQoJ2RpdicsIHtcbiAgICBuYW1lOiAnTXVpU3RhY2snLFxuICAgIHNsb3Q6ICdSb290JyxcbiAgICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHN0eWxlcy5yb290XG4gIH0pLFxuICB1c2VUaGVtZVByb3BzOiBpblByb3BzID0+IHVzZURlZmF1bHRQcm9wcyh7XG4gICAgcHJvcHM6IGluUHJvcHMsXG4gICAgbmFtZTogJ011aVN0YWNrJ1xuICB9KVxufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBTdGFjay5wcm9wVHlwZXMgLyogcmVtb3ZlLXByb3B0eXBlcyAqLyA9IHtcbiAgLy8g4pSM4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAIFdhcm5pbmcg4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSQXG4gIC8vIOKUgiBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMuIOKUglxuICAvLyDilIIgICAgVG8gdXBkYXRlIHRoZW0sIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIGBwbnBtIHByb3B0eXBlc2AuICAgICDilIJcbiAgLy8g4pSU4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSYXG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgcm9vdCBub2RlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgSFRNTCBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKi9cbiAgY29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG4gIC8qKlxuICAgKiBEZWZpbmVzIHRoZSBgZmxleC1kaXJlY3Rpb25gIHN0eWxlIHByb3BlcnR5LlxuICAgKiBJdCBpcyBhcHBsaWVkIGZvciBhbGwgc2NyZWVuIHNpemVzLlxuICAgKiBAZGVmYXVsdCAnY29sdW1uJ1xuICAgKi9cbiAgZGlyZWN0aW9uOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydjb2x1bW4tcmV2ZXJzZScsICdjb2x1bW4nLCAncm93LXJldmVyc2UnLCAncm93J10pLCBQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub25lT2YoWydjb2x1bW4tcmV2ZXJzZScsICdjb2x1bW4nLCAncm93LXJldmVyc2UnLCAncm93J10pKSwgUHJvcFR5cGVzLm9iamVjdF0pLFxuICAvKipcbiAgICogQWRkIGFuIGVsZW1lbnQgYmV0d2VlbiBlYWNoIGNoaWxkLlxuICAgKi9cbiAgZGl2aWRlcjogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBEZWZpbmVzIHRoZSBzcGFjZSBiZXR3ZWVuIGltbWVkaWF0ZSBjaGlsZHJlbi5cbiAgICogQGRlZmF1bHQgMFxuICAgKi9cbiAgc3BhY2luZzogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnN0cmluZ10pKSwgUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLnN0cmluZ10pLFxuICAvKipcbiAgICogVGhlIHN5c3RlbSBwcm9wLCB3aGljaCBhbGxvd3MgZGVmaW5pbmcgc3lzdGVtIG92ZXJyaWRlcyBhcyB3ZWxsIGFzIGFkZGl0aW9uYWwgQ1NTIHN0eWxlcy5cbiAgICovXG4gIHN4OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLmJvb2xdKSksIFByb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSksXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBDU1MgZmxleGJveCBgZ2FwYCBpcyB1c2VkIGluc3RlYWQgb2YgYXBwbHlpbmcgYG1hcmdpbmAgdG8gY2hpbGRyZW4uXG4gICAqXG4gICAqIFdoaWxlIENTUyBgZ2FwYCByZW1vdmVzIHRoZSBba25vd24gbGltaXRhdGlvbnNdKGh0dHBzOi8vbXVpLmNvbS9qb3ktdWkvcmVhY3Qtc3RhY2svI2xpbWl0YXRpb25zKSxcbiAgICogaXQgaXMgbm90IGZ1bGx5IHN1cHBvcnRlZCBpbiBzb21lIGJyb3dzZXJzLiBXZSByZWNvbW1lbmQgY2hlY2tpbmcgaHR0cHM6Ly9jYW5pdXNlLmNvbS8/c2VhcmNoPWZsZXglMjBnYXAgYmVmb3JlIHVzaW5nIHRoaXMgZmxhZy5cbiAgICpcbiAgICogVG8gZW5hYmxlIHRoaXMgZmxhZyBnbG9iYWxseSwgZm9sbG93IHRoZSBbdGhlbWUncyBkZWZhdWx0IHByb3BzXShodHRwczovL211aS5jb20vbWF0ZXJpYWwtdWkvY3VzdG9taXphdGlvbi90aGVtZS1jb21wb25lbnRzLyNkZWZhdWx0LXByb3BzKSBjb25maWd1cmF0aW9uLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgdXNlRmxleEdhcDogUHJvcFR5cGVzLmJvb2xcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCBTdGFjazsiLCJpbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzZXMnO1xuaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3MnO1xuZXhwb3J0IGZ1bmN0aW9uIGdldEZvcm1Db250cm9sTGFiZWxVdGlsaXR5Q2xhc3NlcyhzbG90KSB7XG4gIHJldHVybiBnZW5lcmF0ZVV0aWxpdHlDbGFzcygnTXVpRm9ybUNvbnRyb2xMYWJlbCcsIHNsb3QpO1xufVxuY29uc3QgZm9ybUNvbnRyb2xMYWJlbENsYXNzZXMgPSBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzKCdNdWlGb3JtQ29udHJvbExhYmVsJywgWydyb290JywgJ2xhYmVsUGxhY2VtZW50U3RhcnQnLCAnbGFiZWxQbGFjZW1lbnRUb3AnLCAnbGFiZWxQbGFjZW1lbnRCb3R0b20nLCAnZGlzYWJsZWQnLCAnbGFiZWwnLCAnZXJyb3InLCAncmVxdWlyZWQnLCAnYXN0ZXJpc2snXSk7XG5leHBvcnQgZGVmYXVsdCBmb3JtQ29udHJvbExhYmVsQ2xhc3NlczsiLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJjaGVja2VkXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29tcG9uZW50c1Byb3BzXCIsIFwiY29udHJvbFwiLCBcImRpc2FibGVkXCIsIFwiZGlzYWJsZVR5cG9ncmFwaHlcIiwgXCJpbnB1dFJlZlwiLCBcImxhYmVsXCIsIFwibGFiZWxQbGFjZW1lbnRcIiwgXCJuYW1lXCIsIFwib25DaGFuZ2VcIiwgXCJyZXF1aXJlZFwiLCBcInNsb3RQcm9wc1wiLCBcInZhbHVlXCJdO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHJlZlR5cGUgZnJvbSAnQG11aS91dGlscy9yZWZUeXBlJztcbmltcG9ydCBjb21wb3NlQ2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2NvbXBvc2VDbGFzc2VzJztcbmltcG9ydCB7IHVzZUZvcm1Db250cm9sIH0gZnJvbSAnLi4vRm9ybUNvbnRyb2wnO1xuaW1wb3J0IFN0YWNrIGZyb20gJy4uL1N0YWNrJztcbmltcG9ydCBUeXBvZ3JhcGh5IGZyb20gJy4uL1R5cG9ncmFwaHknO1xuaW1wb3J0IGNhcGl0YWxpemUgZnJvbSAnLi4vdXRpbHMvY2FwaXRhbGl6ZSc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJy4uL3N0eWxlcy9zdHlsZWQnO1xuaW1wb3J0IHsgdXNlRGVmYXVsdFByb3BzIH0gZnJvbSAnLi4vRGVmYXVsdFByb3BzUHJvdmlkZXInO1xuaW1wb3J0IGZvcm1Db250cm9sTGFiZWxDbGFzc2VzLCB7IGdldEZvcm1Db250cm9sTGFiZWxVdGlsaXR5Q2xhc3NlcyB9IGZyb20gJy4vZm9ybUNvbnRyb2xMYWJlbENsYXNzZXMnO1xuaW1wb3J0IGZvcm1Db250cm9sU3RhdGUgZnJvbSAnLi4vRm9ybUNvbnRyb2wvZm9ybUNvbnRyb2xTdGF0ZSc7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuaW1wb3J0IHsganN4cyBhcyBfanN4cyB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuY29uc3QgdXNlVXRpbGl0eUNsYXNzZXMgPSBvd25lclN0YXRlID0+IHtcbiAgY29uc3Qge1xuICAgIGNsYXNzZXMsXG4gICAgZGlzYWJsZWQsXG4gICAgbGFiZWxQbGFjZW1lbnQsXG4gICAgZXJyb3IsXG4gICAgcmVxdWlyZWRcbiAgfSA9IG93bmVyU3RhdGU7XG4gIGNvbnN0IHNsb3RzID0ge1xuICAgIHJvb3Q6IFsncm9vdCcsIGRpc2FibGVkICYmICdkaXNhYmxlZCcsIGBsYWJlbFBsYWNlbWVudCR7Y2FwaXRhbGl6ZShsYWJlbFBsYWNlbWVudCl9YCwgZXJyb3IgJiYgJ2Vycm9yJywgcmVxdWlyZWQgJiYgJ3JlcXVpcmVkJ10sXG4gICAgbGFiZWw6IFsnbGFiZWwnLCBkaXNhYmxlZCAmJiAnZGlzYWJsZWQnXSxcbiAgICBhc3RlcmlzazogWydhc3RlcmlzaycsIGVycm9yICYmICdlcnJvciddXG4gIH07XG4gIHJldHVybiBjb21wb3NlQ2xhc3NlcyhzbG90cywgZ2V0Rm9ybUNvbnRyb2xMYWJlbFV0aWxpdHlDbGFzc2VzLCBjbGFzc2VzKTtcbn07XG5leHBvcnQgY29uc3QgRm9ybUNvbnRyb2xMYWJlbFJvb3QgPSBzdHlsZWQoJ2xhYmVsJywge1xuICBuYW1lOiAnTXVpRm9ybUNvbnRyb2xMYWJlbCcsXG4gIHNsb3Q6ICdSb290JyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgb3duZXJTdGF0ZVxuICAgIH0gPSBwcm9wcztcbiAgICByZXR1cm4gW3tcbiAgICAgIFtgJiAuJHtmb3JtQ29udHJvbExhYmVsQ2xhc3Nlcy5sYWJlbH1gXTogc3R5bGVzLmxhYmVsXG4gICAgfSwgc3R5bGVzLnJvb3QsIHN0eWxlc1tgbGFiZWxQbGFjZW1lbnQke2NhcGl0YWxpemUob3duZXJTdGF0ZS5sYWJlbFBsYWNlbWVudCl9YF1dO1xuICB9XG59KSgoe1xuICB0aGVtZSxcbiAgb3duZXJTdGF0ZVxufSkgPT4gX2V4dGVuZHMoe1xuICBkaXNwbGF5OiAnaW5saW5lLWZsZXgnLFxuICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgY3Vyc29yOiAncG9pbnRlcicsXG4gIC8vIEZvciBjb3JyZWN0IGFsaWdubWVudCB3aXRoIHRoZSB0ZXh0LlxuICB2ZXJ0aWNhbEFsaWduOiAnbWlkZGxlJyxcbiAgV2Via2l0VGFwSGlnaGxpZ2h0Q29sb3I6ICd0cmFuc3BhcmVudCcsXG4gIG1hcmdpbkxlZnQ6IC0xMSxcbiAgbWFyZ2luUmlnaHQ6IDE2LFxuICAvLyB1c2VkIGZvciByb3cgcHJlc2VudGF0aW9uIG9mIHJhZGlvL2NoZWNrYm94XG4gIFtgJi4ke2Zvcm1Db250cm9sTGFiZWxDbGFzc2VzLmRpc2FibGVkfWBdOiB7XG4gICAgY3Vyc29yOiAnZGVmYXVsdCdcbiAgfVxufSwgb3duZXJTdGF0ZS5sYWJlbFBsYWNlbWVudCA9PT0gJ3N0YXJ0JyAmJiB7XG4gIGZsZXhEaXJlY3Rpb246ICdyb3ctcmV2ZXJzZScsXG4gIG1hcmdpbkxlZnQ6IDE2LFxuICAvLyB1c2VkIGZvciByb3cgcHJlc2VudGF0aW9uIG9mIHJhZGlvL2NoZWNrYm94XG4gIG1hcmdpblJpZ2h0OiAtMTFcbn0sIG93bmVyU3RhdGUubGFiZWxQbGFjZW1lbnQgPT09ICd0b3AnICYmIHtcbiAgZmxleERpcmVjdGlvbjogJ2NvbHVtbi1yZXZlcnNlJyxcbiAgbWFyZ2luTGVmdDogMTZcbn0sIG93bmVyU3RhdGUubGFiZWxQbGFjZW1lbnQgPT09ICdib3R0b20nICYmIHtcbiAgZmxleERpcmVjdGlvbjogJ2NvbHVtbicsXG4gIG1hcmdpbkxlZnQ6IDE2XG59LCB7XG4gIFtgJiAuJHtmb3JtQ29udHJvbExhYmVsQ2xhc3Nlcy5sYWJlbH1gXToge1xuICAgIFtgJi4ke2Zvcm1Db250cm9sTGFiZWxDbGFzc2VzLmRpc2FibGVkfWBdOiB7XG4gICAgICBjb2xvcjogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGUudGV4dC5kaXNhYmxlZFxuICAgIH1cbiAgfVxufSkpO1xuY29uc3QgQXN0ZXJpc2tDb21wb25lbnQgPSBzdHlsZWQoJ3NwYW4nLCB7XG4gIG5hbWU6ICdNdWlGb3JtQ29udHJvbExhYmVsJyxcbiAgc2xvdDogJ0FzdGVyaXNrJyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiBzdHlsZXMuYXN0ZXJpc2tcbn0pKCh7XG4gIHRoZW1lXG59KSA9PiAoe1xuICBbYCYuJHtmb3JtQ29udHJvbExhYmVsQ2xhc3Nlcy5lcnJvcn1gXToge1xuICAgIGNvbG9yOiAodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZS5lcnJvci5tYWluXG4gIH1cbn0pKTtcblxuLyoqXG4gKiBEcm9wLWluIHJlcGxhY2VtZW50IG9mIHRoZSBgUmFkaW9gLCBgU3dpdGNoYCBhbmQgYENoZWNrYm94YCBjb21wb25lbnQuXG4gKiBVc2UgdGhpcyBjb21wb25lbnQgaWYgeW91IHdhbnQgdG8gZGlzcGxheSBhbiBleHRyYSBsYWJlbC5cbiAqL1xuY29uc3QgRm9ybUNvbnRyb2xMYWJlbCA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIEZvcm1Db250cm9sTGFiZWwoaW5Qcm9wcywgcmVmKSB7XG4gIHZhciBfcmVmLCBfc2xvdFByb3BzJHR5cG9ncmFwaHk7XG4gIGNvbnN0IHByb3BzID0gdXNlRGVmYXVsdFByb3BzKHtcbiAgICBwcm9wczogaW5Qcm9wcyxcbiAgICBuYW1lOiAnTXVpRm9ybUNvbnRyb2xMYWJlbCdcbiAgfSk7XG4gIGNvbnN0IHtcbiAgICAgIGNsYXNzTmFtZSxcbiAgICAgIGNvbXBvbmVudHNQcm9wcyA9IHt9LFxuICAgICAgY29udHJvbCxcbiAgICAgIGRpc2FibGVkOiBkaXNhYmxlZFByb3AsXG4gICAgICBkaXNhYmxlVHlwb2dyYXBoeSxcbiAgICAgIGxhYmVsOiBsYWJlbFByb3AsXG4gICAgICBsYWJlbFBsYWNlbWVudCA9ICdlbmQnLFxuICAgICAgcmVxdWlyZWQ6IHJlcXVpcmVkUHJvcCxcbiAgICAgIHNsb3RQcm9wcyA9IHt9XG4gICAgfSA9IHByb3BzLFxuICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIF9leGNsdWRlZCk7XG4gIGNvbnN0IG11aUZvcm1Db250cm9sID0gdXNlRm9ybUNvbnRyb2woKTtcbiAgY29uc3QgZGlzYWJsZWQgPSAoX3JlZiA9IGRpc2FibGVkUHJvcCAhPSBudWxsID8gZGlzYWJsZWRQcm9wIDogY29udHJvbC5wcm9wcy5kaXNhYmxlZCkgIT0gbnVsbCA/IF9yZWYgOiBtdWlGb3JtQ29udHJvbCA9PSBudWxsID8gdm9pZCAwIDogbXVpRm9ybUNvbnRyb2wuZGlzYWJsZWQ7XG4gIGNvbnN0IHJlcXVpcmVkID0gcmVxdWlyZWRQcm9wICE9IG51bGwgPyByZXF1aXJlZFByb3AgOiBjb250cm9sLnByb3BzLnJlcXVpcmVkO1xuICBjb25zdCBjb250cm9sUHJvcHMgPSB7XG4gICAgZGlzYWJsZWQsXG4gICAgcmVxdWlyZWRcbiAgfTtcbiAgWydjaGVja2VkJywgJ25hbWUnLCAnb25DaGFuZ2UnLCAndmFsdWUnLCAnaW5wdXRSZWYnXS5mb3JFYWNoKGtleSA9PiB7XG4gICAgaWYgKHR5cGVvZiBjb250cm9sLnByb3BzW2tleV0gPT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBwcm9wc1trZXldICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29udHJvbFByb3BzW2tleV0gPSBwcm9wc1trZXldO1xuICAgIH1cbiAgfSk7XG4gIGNvbnN0IGZjcyA9IGZvcm1Db250cm9sU3RhdGUoe1xuICAgIHByb3BzLFxuICAgIG11aUZvcm1Db250cm9sLFxuICAgIHN0YXRlczogWydlcnJvciddXG4gIH0pO1xuICBjb25zdCBvd25lclN0YXRlID0gX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgZGlzYWJsZWQsXG4gICAgbGFiZWxQbGFjZW1lbnQsXG4gICAgcmVxdWlyZWQsXG4gICAgZXJyb3I6IGZjcy5lcnJvclxuICB9KTtcbiAgY29uc3QgY2xhc3NlcyA9IHVzZVV0aWxpdHlDbGFzc2VzKG93bmVyU3RhdGUpO1xuICBjb25zdCB0eXBvZ3JhcGh5U2xvdFByb3BzID0gKF9zbG90UHJvcHMkdHlwb2dyYXBoeSA9IHNsb3RQcm9wcy50eXBvZ3JhcGh5KSAhPSBudWxsID8gX3Nsb3RQcm9wcyR0eXBvZ3JhcGh5IDogY29tcG9uZW50c1Byb3BzLnR5cG9ncmFwaHk7XG4gIGxldCBsYWJlbCA9IGxhYmVsUHJvcDtcbiAgaWYgKGxhYmVsICE9IG51bGwgJiYgbGFiZWwudHlwZSAhPT0gVHlwb2dyYXBoeSAmJiAhZGlzYWJsZVR5cG9ncmFwaHkpIHtcbiAgICBsYWJlbCA9IC8qI19fUFVSRV9fKi9fanN4KFR5cG9ncmFwaHksIF9leHRlbmRzKHtcbiAgICAgIGNvbXBvbmVudDogXCJzcGFuXCJcbiAgICB9LCB0eXBvZ3JhcGh5U2xvdFByb3BzLCB7XG4gICAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5sYWJlbCwgdHlwb2dyYXBoeVNsb3RQcm9wcyA9PSBudWxsID8gdm9pZCAwIDogdHlwb2dyYXBoeVNsb3RQcm9wcy5jbGFzc05hbWUpLFxuICAgICAgY2hpbGRyZW46IGxhYmVsXG4gICAgfSkpO1xuICB9XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeHMoRm9ybUNvbnRyb2xMYWJlbFJvb3QsIF9leHRlbmRzKHtcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWUpLFxuICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGUsXG4gICAgcmVmOiByZWZcbiAgfSwgb3RoZXIsIHtcbiAgICBjaGlsZHJlbjogWy8qI19fUFVSRV9fKi9SZWFjdC5jbG9uZUVsZW1lbnQoY29udHJvbCwgY29udHJvbFByb3BzKSwgcmVxdWlyZWQgPyAvKiNfX1BVUkVfXyovX2pzeHMoU3RhY2ssIHtcbiAgICAgIGRpc3BsYXk6IFwiYmxvY2tcIixcbiAgICAgIGNoaWxkcmVuOiBbbGFiZWwsIC8qI19fUFVSRV9fKi9fanN4cyhBc3Rlcmlza0NvbXBvbmVudCwge1xuICAgICAgICBvd25lclN0YXRlOiBvd25lclN0YXRlLFxuICAgICAgICBcImFyaWEtaGlkZGVuXCI6IHRydWUsXG4gICAgICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5hc3RlcmlzayxcbiAgICAgICAgY2hpbGRyZW46IFtcIlxcdTIwMDlcIiwgJyonXVxuICAgICAgfSldXG4gICAgfSkgOiBsYWJlbF1cbiAgfSkpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBGb3JtQ29udHJvbExhYmVsLnByb3BUeXBlcyAvKiByZW1vdmUtcHJvcHR5cGVzICovID0ge1xuICAvLyDilIzilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIAgV2FybmluZyDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJBcbiAgLy8g4pSCIFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucy4g4pSCXG4gIC8vIOKUgiAgICBUbyB1cGRhdGUgdGhlbSwgZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gYHBucG0gcHJvcHR5cGVzYC4gICAgIOKUglxuICAvLyDilJTilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJhcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGNvbXBvbmVudCBhcHBlYXJzIHNlbGVjdGVkLlxuICAgKi9cbiAgY2hlY2tlZDogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogVGhlIHByb3BzIHVzZWQgZm9yIGVhY2ggc2xvdCBpbnNpZGUuXG4gICAqIEBkZWZhdWx0IHt9XG4gICAqL1xuICBjb21wb25lbnRzUHJvcHM6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgdHlwb2dyYXBoeTogUHJvcFR5cGVzLm9iamVjdFxuICB9KSxcbiAgLyoqXG4gICAqIEEgY29udHJvbCBlbGVtZW50LiBGb3IgaW5zdGFuY2UsIGl0IGNhbiBiZSBhIGBSYWRpb2AsIGEgYFN3aXRjaGAgb3IgYSBgQ2hlY2tib3hgLlxuICAgKi9cbiAgY29udHJvbDogUHJvcFR5cGVzLmVsZW1lbnQuaXNSZXF1aXJlZCxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGNvbnRyb2wgaXMgZGlzYWJsZWQuXG4gICAqL1xuICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBsYWJlbCBpcyByZW5kZXJlZCBhcyBpdCBpcyBwYXNzZWQgd2l0aG91dCBhbiBhZGRpdGlvbmFsIHR5cG9ncmFwaHkgbm9kZS5cbiAgICovXG4gIGRpc2FibGVUeXBvZ3JhcGh5OiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIFBhc3MgYSByZWYgdG8gdGhlIGBpbnB1dGAgZWxlbWVudC5cbiAgICovXG4gIGlucHV0UmVmOiByZWZUeXBlLFxuICAvKipcbiAgICogQSB0ZXh0IG9yIGFuIGVsZW1lbnQgdG8gYmUgdXNlZCBpbiBhbiBlbmNsb3NpbmcgbGFiZWwgZWxlbWVudC5cbiAgICovXG4gIGxhYmVsOiBQcm9wVHlwZXMubm9kZSxcbiAgLyoqXG4gICAqIFRoZSBwb3NpdGlvbiBvZiB0aGUgbGFiZWwuXG4gICAqIEBkZWZhdWx0ICdlbmQnXG4gICAqL1xuICBsYWJlbFBsYWNlbWVudDogUHJvcFR5cGVzLm9uZU9mKFsnYm90dG9tJywgJ2VuZCcsICdzdGFydCcsICd0b3AnXSksXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgc3RhdGUgaXMgY2hhbmdlZC5cbiAgICpcbiAgICogQHBhcmFtIHtSZWFjdC5TeW50aGV0aWNFdmVudH0gZXZlbnQgVGhlIGV2ZW50IHNvdXJjZSBvZiB0aGUgY2FsbGJhY2suXG4gICAqIFlvdSBjYW4gcHVsbCBvdXQgdGhlIG5ldyBjaGVja2VkIHN0YXRlIGJ5IGFjY2Vzc2luZyBgZXZlbnQudGFyZ2V0LmNoZWNrZWRgIChib29sZWFuKS5cbiAgICovXG4gIG9uQ2hhbmdlOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGxhYmVsIHdpbGwgaW5kaWNhdGUgdGhhdCB0aGUgYGlucHV0YCBpcyByZXF1aXJlZC5cbiAgICovXG4gIHJlcXVpcmVkOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIFRoZSBwcm9wcyB1c2VkIGZvciBlYWNoIHNsb3QgaW5zaWRlLlxuICAgKiBAZGVmYXVsdCB7fVxuICAgKi9cbiAgc2xvdFByb3BzOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIHR5cG9ncmFwaHk6IFByb3BUeXBlcy5vYmplY3RcbiAgfSksXG4gIC8qKlxuICAgKiBUaGUgc3lzdGVtIHByb3AgdGhhdCBhbGxvd3MgZGVmaW5pbmcgc3lzdGVtIG92ZXJyaWRlcyBhcyB3ZWxsIGFzIGFkZGl0aW9uYWwgQ1NTIHN0eWxlcy5cbiAgICovXG4gIHN4OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLmJvb2xdKSksIFByb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSksXG4gIC8qKlxuICAgKiBUaGUgdmFsdWUgb2YgdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIHZhbHVlOiBQcm9wVHlwZXMuYW55XG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgRm9ybUNvbnRyb2xMYWJlbDsiLCJpbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzZXMnO1xuaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3MnO1xuZXhwb3J0IGZ1bmN0aW9uIGdldEZvcm1Hcm91cFV0aWxpdHlDbGFzcyhzbG90KSB7XG4gIHJldHVybiBnZW5lcmF0ZVV0aWxpdHlDbGFzcygnTXVpRm9ybUdyb3VwJywgc2xvdCk7XG59XG5jb25zdCBmb3JtR3JvdXBDbGFzc2VzID0gZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcygnTXVpRm9ybUdyb3VwJywgWydyb290JywgJ3JvdycsICdlcnJvciddKTtcbmV4cG9ydCBkZWZhdWx0IGZvcm1Hcm91cENsYXNzZXM7IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiY2xhc3NOYW1lXCIsIFwicm93XCJdO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IGNvbXBvc2VDbGFzc2VzIGZyb20gJ0BtdWkvdXRpbHMvY29tcG9zZUNsYXNzZXMnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICcuLi9zdHlsZXMvc3R5bGVkJztcbmltcG9ydCB7IHVzZURlZmF1bHRQcm9wcyB9IGZyb20gJy4uL0RlZmF1bHRQcm9wc1Byb3ZpZGVyJztcbmltcG9ydCB7IGdldEZvcm1Hcm91cFV0aWxpdHlDbGFzcyB9IGZyb20gJy4vZm9ybUdyb3VwQ2xhc3Nlcyc7XG5pbXBvcnQgdXNlRm9ybUNvbnRyb2wgZnJvbSAnLi4vRm9ybUNvbnRyb2wvdXNlRm9ybUNvbnRyb2wnO1xuaW1wb3J0IGZvcm1Db250cm9sU3RhdGUgZnJvbSAnLi4vRm9ybUNvbnRyb2wvZm9ybUNvbnRyb2xTdGF0ZSc7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuY29uc3QgdXNlVXRpbGl0eUNsYXNzZXMgPSBvd25lclN0YXRlID0+IHtcbiAgY29uc3Qge1xuICAgIGNsYXNzZXMsXG4gICAgcm93LFxuICAgIGVycm9yXG4gIH0gPSBvd25lclN0YXRlO1xuICBjb25zdCBzbG90cyA9IHtcbiAgICByb290OiBbJ3Jvb3QnLCByb3cgJiYgJ3JvdycsIGVycm9yICYmICdlcnJvciddXG4gIH07XG4gIHJldHVybiBjb21wb3NlQ2xhc3NlcyhzbG90cywgZ2V0Rm9ybUdyb3VwVXRpbGl0eUNsYXNzLCBjbGFzc2VzKTtcbn07XG5jb25zdCBGb3JtR3JvdXBSb290ID0gc3R5bGVkKCdkaXYnLCB7XG4gIG5hbWU6ICdNdWlGb3JtR3JvdXAnLFxuICBzbG90OiAnUm9vdCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9ID0gcHJvcHM7XG4gICAgcmV0dXJuIFtzdHlsZXMucm9vdCwgb3duZXJTdGF0ZS5yb3cgJiYgc3R5bGVzLnJvd107XG4gIH1cbn0pKCh7XG4gIG93bmVyU3RhdGVcbn0pID0+IF9leHRlbmRzKHtcbiAgZGlzcGxheTogJ2ZsZXgnLFxuICBmbGV4RGlyZWN0aW9uOiAnY29sdW1uJyxcbiAgZmxleFdyYXA6ICd3cmFwJ1xufSwgb3duZXJTdGF0ZS5yb3cgJiYge1xuICBmbGV4RGlyZWN0aW9uOiAncm93J1xufSkpO1xuXG4vKipcbiAqIGBGb3JtR3JvdXBgIHdyYXBzIGNvbnRyb2xzIHN1Y2ggYXMgYENoZWNrYm94YCBhbmQgYFN3aXRjaGAuXG4gKiBJdCBwcm92aWRlcyBjb21wYWN0IHJvdyBsYXlvdXQuXG4gKiBGb3IgdGhlIGBSYWRpb2AsIHlvdSBzaG91bGQgYmUgdXNpbmcgdGhlIGBSYWRpb0dyb3VwYCBjb21wb25lbnQgaW5zdGVhZCBvZiB0aGlzIG9uZS5cbiAqL1xuY29uc3QgRm9ybUdyb3VwID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gRm9ybUdyb3VwKGluUHJvcHMsIHJlZikge1xuICBjb25zdCBwcm9wcyA9IHVzZURlZmF1bHRQcm9wcyh7XG4gICAgcHJvcHM6IGluUHJvcHMsXG4gICAgbmFtZTogJ011aUZvcm1Hcm91cCdcbiAgfSk7XG4gIGNvbnN0IHtcbiAgICAgIGNsYXNzTmFtZSxcbiAgICAgIHJvdyA9IGZhbHNlXG4gICAgfSA9IHByb3BzLFxuICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIF9leGNsdWRlZCk7XG4gIGNvbnN0IG11aUZvcm1Db250cm9sID0gdXNlRm9ybUNvbnRyb2woKTtcbiAgY29uc3QgZmNzID0gZm9ybUNvbnRyb2xTdGF0ZSh7XG4gICAgcHJvcHMsXG4gICAgbXVpRm9ybUNvbnRyb2wsXG4gICAgc3RhdGVzOiBbJ2Vycm9yJ11cbiAgfSk7XG4gIGNvbnN0IG93bmVyU3RhdGUgPSBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICByb3csXG4gICAgZXJyb3I6IGZjcy5lcnJvclxuICB9KTtcbiAgY29uc3QgY2xhc3NlcyA9IHVzZVV0aWxpdHlDbGFzc2VzKG93bmVyU3RhdGUpO1xuICByZXR1cm4gLyojX19QVVJFX18qL19qc3goRm9ybUdyb3VwUm9vdCwgX2V4dGVuZHMoe1xuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSksXG4gICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZSxcbiAgICByZWY6IHJlZlxuICB9LCBvdGhlcikpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBGb3JtR3JvdXAucHJvcFR5cGVzIC8qIHJlbW92ZS1wcm9wdHlwZXMgKi8gPSB7XG4gIC8vIOKUjOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgCBXYXJuaW5nIOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUkFxuICAvLyDilIIgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zLiDilIJcbiAgLy8g4pSCICAgIFRvIHVwZGF0ZSB0aGVtLCBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBgcG5wbSBwcm9wdHlwZXNgLiAgICAg4pSCXG4gIC8vIOKUlOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUmFxuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBEaXNwbGF5IGdyb3VwIG9mIGVsZW1lbnRzIGluIGEgY29tcGFjdCByb3cuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICByb3c6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogVGhlIHN5c3RlbSBwcm9wIHRoYXQgYWxsb3dzIGRlZmluaW5nIHN5c3RlbSBvdmVycmlkZXMgYXMgd2VsbCBhcyBhZGRpdGlvbmFsIENTUyBzdHlsZXMuXG4gICAqL1xuICBzeDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5ib29sXSkpLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgRm9ybUdyb3VwOyIsImltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3Nlcyc7XG5pbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3MgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzcyc7XG5leHBvcnQgZnVuY3Rpb24gZ2V0Rm9ybUhlbHBlclRleHRVdGlsaXR5Q2xhc3NlcyhzbG90KSB7XG4gIHJldHVybiBnZW5lcmF0ZVV0aWxpdHlDbGFzcygnTXVpRm9ybUhlbHBlclRleHQnLCBzbG90KTtcbn1cbmNvbnN0IGZvcm1IZWxwZXJUZXh0Q2xhc3NlcyA9IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMoJ011aUZvcm1IZWxwZXJUZXh0JywgWydyb290JywgJ2Vycm9yJywgJ2Rpc2FibGVkJywgJ3NpemVTbWFsbCcsICdzaXplTWVkaXVtJywgJ2NvbnRhaW5lZCcsICdmb2N1c2VkJywgJ2ZpbGxlZCcsICdyZXF1aXJlZCddKTtcbmV4cG9ydCBkZWZhdWx0IGZvcm1IZWxwZXJUZXh0Q2xhc3NlczsiLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG52YXIgX3NwYW47XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJjaGlsZHJlblwiLCBcImNsYXNzTmFtZVwiLCBcImNvbXBvbmVudFwiLCBcImRpc2FibGVkXCIsIFwiZXJyb3JcIiwgXCJmaWxsZWRcIiwgXCJmb2N1c2VkXCIsIFwibWFyZ2luXCIsIFwicmVxdWlyZWRcIiwgXCJ2YXJpYW50XCJdO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IGNvbXBvc2VDbGFzc2VzIGZyb20gJ0BtdWkvdXRpbHMvY29tcG9zZUNsYXNzZXMnO1xuaW1wb3J0IGZvcm1Db250cm9sU3RhdGUgZnJvbSAnLi4vRm9ybUNvbnRyb2wvZm9ybUNvbnRyb2xTdGF0ZSc7XG5pbXBvcnQgdXNlRm9ybUNvbnRyb2wgZnJvbSAnLi4vRm9ybUNvbnRyb2wvdXNlRm9ybUNvbnRyb2wnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICcuLi9zdHlsZXMvc3R5bGVkJztcbmltcG9ydCBjYXBpdGFsaXplIGZyb20gJy4uL3V0aWxzL2NhcGl0YWxpemUnO1xuaW1wb3J0IGZvcm1IZWxwZXJUZXh0Q2xhc3NlcywgeyBnZXRGb3JtSGVscGVyVGV4dFV0aWxpdHlDbGFzc2VzIH0gZnJvbSAnLi9mb3JtSGVscGVyVGV4dENsYXNzZXMnO1xuaW1wb3J0IHsgdXNlRGVmYXVsdFByb3BzIH0gZnJvbSAnLi4vRGVmYXVsdFByb3BzUHJvdmlkZXInO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmNvbnN0IHVzZVV0aWxpdHlDbGFzc2VzID0gb3duZXJTdGF0ZSA9PiB7XG4gIGNvbnN0IHtcbiAgICBjbGFzc2VzLFxuICAgIGNvbnRhaW5lZCxcbiAgICBzaXplLFxuICAgIGRpc2FibGVkLFxuICAgIGVycm9yLFxuICAgIGZpbGxlZCxcbiAgICBmb2N1c2VkLFxuICAgIHJlcXVpcmVkXG4gIH0gPSBvd25lclN0YXRlO1xuICBjb25zdCBzbG90cyA9IHtcbiAgICByb290OiBbJ3Jvb3QnLCBkaXNhYmxlZCAmJiAnZGlzYWJsZWQnLCBlcnJvciAmJiAnZXJyb3InLCBzaXplICYmIGBzaXplJHtjYXBpdGFsaXplKHNpemUpfWAsIGNvbnRhaW5lZCAmJiAnY29udGFpbmVkJywgZm9jdXNlZCAmJiAnZm9jdXNlZCcsIGZpbGxlZCAmJiAnZmlsbGVkJywgcmVxdWlyZWQgJiYgJ3JlcXVpcmVkJ11cbiAgfTtcbiAgcmV0dXJuIGNvbXBvc2VDbGFzc2VzKHNsb3RzLCBnZXRGb3JtSGVscGVyVGV4dFV0aWxpdHlDbGFzc2VzLCBjbGFzc2VzKTtcbn07XG5jb25zdCBGb3JtSGVscGVyVGV4dFJvb3QgPSBzdHlsZWQoJ3AnLCB7XG4gIG5hbWU6ICdNdWlGb3JtSGVscGVyVGV4dCcsXG4gIHNsb3Q6ICdSb290JyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgb3duZXJTdGF0ZVxuICAgIH0gPSBwcm9wcztcbiAgICByZXR1cm4gW3N0eWxlcy5yb290LCBvd25lclN0YXRlLnNpemUgJiYgc3R5bGVzW2BzaXplJHtjYXBpdGFsaXplKG93bmVyU3RhdGUuc2l6ZSl9YF0sIG93bmVyU3RhdGUuY29udGFpbmVkICYmIHN0eWxlcy5jb250YWluZWQsIG93bmVyU3RhdGUuZmlsbGVkICYmIHN0eWxlcy5maWxsZWRdO1xuICB9XG59KSgoe1xuICB0aGVtZSxcbiAgb3duZXJTdGF0ZVxufSkgPT4gX2V4dGVuZHMoe1xuICBjb2xvcjogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGUudGV4dC5zZWNvbmRhcnlcbn0sIHRoZW1lLnR5cG9ncmFwaHkuY2FwdGlvbiwge1xuICB0ZXh0QWxpZ246ICdsZWZ0JyxcbiAgbWFyZ2luVG9wOiAzLFxuICBtYXJnaW5SaWdodDogMCxcbiAgbWFyZ2luQm90dG9tOiAwLFxuICBtYXJnaW5MZWZ0OiAwLFxuICBbYCYuJHtmb3JtSGVscGVyVGV4dENsYXNzZXMuZGlzYWJsZWR9YF06IHtcbiAgICBjb2xvcjogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGUudGV4dC5kaXNhYmxlZFxuICB9LFxuICBbYCYuJHtmb3JtSGVscGVyVGV4dENsYXNzZXMuZXJyb3J9YF06IHtcbiAgICBjb2xvcjogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGUuZXJyb3IubWFpblxuICB9XG59LCBvd25lclN0YXRlLnNpemUgPT09ICdzbWFsbCcgJiYge1xuICBtYXJnaW5Ub3A6IDRcbn0sIG93bmVyU3RhdGUuY29udGFpbmVkICYmIHtcbiAgbWFyZ2luTGVmdDogMTQsXG4gIG1hcmdpblJpZ2h0OiAxNFxufSkpO1xuY29uc3QgRm9ybUhlbHBlclRleHQgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBGb3JtSGVscGVyVGV4dChpblByb3BzLCByZWYpIHtcbiAgY29uc3QgcHJvcHMgPSB1c2VEZWZhdWx0UHJvcHMoe1xuICAgIHByb3BzOiBpblByb3BzLFxuICAgIG5hbWU6ICdNdWlGb3JtSGVscGVyVGV4dCdcbiAgfSk7XG4gIGNvbnN0IHtcbiAgICAgIGNoaWxkcmVuLFxuICAgICAgY2xhc3NOYW1lLFxuICAgICAgY29tcG9uZW50ID0gJ3AnXG4gICAgfSA9IHByb3BzLFxuICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIF9leGNsdWRlZCk7XG4gIGNvbnN0IG11aUZvcm1Db250cm9sID0gdXNlRm9ybUNvbnRyb2woKTtcbiAgY29uc3QgZmNzID0gZm9ybUNvbnRyb2xTdGF0ZSh7XG4gICAgcHJvcHMsXG4gICAgbXVpRm9ybUNvbnRyb2wsXG4gICAgc3RhdGVzOiBbJ3ZhcmlhbnQnLCAnc2l6ZScsICdkaXNhYmxlZCcsICdlcnJvcicsICdmaWxsZWQnLCAnZm9jdXNlZCcsICdyZXF1aXJlZCddXG4gIH0pO1xuICBjb25zdCBvd25lclN0YXRlID0gX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgY29tcG9uZW50LFxuICAgIGNvbnRhaW5lZDogZmNzLnZhcmlhbnQgPT09ICdmaWxsZWQnIHx8IGZjcy52YXJpYW50ID09PSAnb3V0bGluZWQnLFxuICAgIHZhcmlhbnQ6IGZjcy52YXJpYW50LFxuICAgIHNpemU6IGZjcy5zaXplLFxuICAgIGRpc2FibGVkOiBmY3MuZGlzYWJsZWQsXG4gICAgZXJyb3I6IGZjcy5lcnJvcixcbiAgICBmaWxsZWQ6IGZjcy5maWxsZWQsXG4gICAgZm9jdXNlZDogZmNzLmZvY3VzZWQsXG4gICAgcmVxdWlyZWQ6IGZjcy5yZXF1aXJlZFxuICB9KTtcbiAgY29uc3QgY2xhc3NlcyA9IHVzZVV0aWxpdHlDbGFzc2VzKG93bmVyU3RhdGUpO1xuICByZXR1cm4gLyojX19QVVJFX18qL19qc3goRm9ybUhlbHBlclRleHRSb290LCBfZXh0ZW5kcyh7XG4gICAgYXM6IGNvbXBvbmVudCxcbiAgICBvd25lclN0YXRlOiBvd25lclN0YXRlLFxuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSksXG4gICAgcmVmOiByZWZcbiAgfSwgb3RoZXIsIHtcbiAgICBjaGlsZHJlbjogY2hpbGRyZW4gPT09ICcgJyA/IC8vIG5vdHJhbnNsYXRlIG5lZWRlZCB3aGlsZSBHb29nbGUgVHJhbnNsYXRlIHdpbGwgbm90IGZpeCB6ZXJvLXdpZHRoIHNwYWNlIGlzc3VlXG4gICAgX3NwYW4gfHwgKF9zcGFuID0gLyojX19QVVJFX18qL19qc3goXCJzcGFuXCIsIHtcbiAgICAgIGNsYXNzTmFtZTogXCJub3RyYW5zbGF0ZVwiLFxuICAgICAgY2hpbGRyZW46IFwiXFx1MjAwQlwiXG4gICAgfSkpIDogY2hpbGRyZW5cbiAgfSkpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBGb3JtSGVscGVyVGV4dC5wcm9wVHlwZXMgLyogcmVtb3ZlLXByb3B0eXBlcyAqLyA9IHtcbiAgLy8g4pSM4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAIFdhcm5pbmcg4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSQXG4gIC8vIOKUgiBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMuIOKUglxuICAvLyDilIIgICAgVG8gdXBkYXRlIHRoZW0sIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIGBwbnBtIHByb3B0eXBlc2AuICAgICDilIJcbiAgLy8g4pSU4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSYXG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgY29tcG9uZW50LlxuICAgKlxuICAgKiBJZiBgJyAnYCBpcyBwcm92aWRlZCwgdGhlIGNvbXBvbmVudCByZXNlcnZlcyBvbmUgbGluZSBoZWlnaHQgZm9yIGRpc3BsYXlpbmcgYSBmdXR1cmUgbWVzc2FnZS5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBIVE1MIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBjb21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGhlbHBlciB0ZXh0IHNob3VsZCBiZSBkaXNwbGF5ZWQgaW4gYSBkaXNhYmxlZCBzdGF0ZS5cbiAgICovXG4gIGRpc2FibGVkOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgaGVscGVyIHRleHQgc2hvdWxkIGJlIGRpc3BsYXllZCBpbiBhbiBlcnJvciBzdGF0ZS5cbiAgICovXG4gIGVycm9yOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGhlbHBlciB0ZXh0IHNob3VsZCB1c2UgZmlsbGVkIGNsYXNzZXMga2V5LlxuICAgKi9cbiAgZmlsbGVkOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGhlbHBlciB0ZXh0IHNob3VsZCB1c2UgZm9jdXNlZCBjbGFzc2VzIGtleS5cbiAgICovXG4gIGZvY3VzZWQ6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogSWYgYGRlbnNlYCwgd2lsbCBhZGp1c3QgdmVydGljYWwgc3BhY2luZy4gVGhpcyBpcyBub3JtYWxseSBvYnRhaW5lZCB2aWEgY29udGV4dCBmcm9tXG4gICAqIEZvcm1Db250cm9sLlxuICAgKi9cbiAgbWFyZ2luOiBQcm9wVHlwZXMub25lT2YoWydkZW5zZSddKSxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGhlbHBlciB0ZXh0IHNob3VsZCB1c2UgcmVxdWlyZWQgY2xhc3NlcyBrZXkuXG4gICAqL1xuICByZXF1aXJlZDogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBUaGUgc3lzdGVtIHByb3AgdGhhdCBhbGxvd3MgZGVmaW5pbmcgc3lzdGVtIG92ZXJyaWRlcyBhcyB3ZWxsIGFzIGFkZGl0aW9uYWwgQ1NTIHN0eWxlcy5cbiAgICovXG4gIHN4OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLmJvb2xdKSksIFByb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSksXG4gIC8qKlxuICAgKiBUaGUgdmFyaWFudCB0byB1c2UuXG4gICAqL1xuICB2YXJpYW50OiBQcm9wVHlwZXMgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqLy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ2ZpbGxlZCcsICdvdXRsaW5lZCcsICdzdGFuZGFyZCddKSwgUHJvcFR5cGVzLnN0cmluZ10pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgRm9ybUhlbHBlclRleHQ7IiwiaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzc2VzJztcbmltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzJztcbmV4cG9ydCBmdW5jdGlvbiBnZXRGb3JtTGFiZWxVdGlsaXR5Q2xhc3NlcyhzbG90KSB7XG4gIHJldHVybiBnZW5lcmF0ZVV0aWxpdHlDbGFzcygnTXVpRm9ybUxhYmVsJywgc2xvdCk7XG59XG5jb25zdCBmb3JtTGFiZWxDbGFzc2VzID0gZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcygnTXVpRm9ybUxhYmVsJywgWydyb290JywgJ2NvbG9yU2Vjb25kYXJ5JywgJ2ZvY3VzZWQnLCAnZGlzYWJsZWQnLCAnZXJyb3InLCAnZmlsbGVkJywgJ3JlcXVpcmVkJywgJ2FzdGVyaXNrJ10pO1xuZXhwb3J0IGRlZmF1bHQgZm9ybUxhYmVsQ2xhc3NlczsiLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJjaGlsZHJlblwiLCBcImNsYXNzTmFtZVwiLCBcImNvbG9yXCIsIFwiY29tcG9uZW50XCIsIFwiZGlzYWJsZWRcIiwgXCJlcnJvclwiLCBcImZpbGxlZFwiLCBcImZvY3VzZWRcIiwgXCJyZXF1aXJlZFwiXTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCBjb21wb3NlQ2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2NvbXBvc2VDbGFzc2VzJztcbmltcG9ydCBmb3JtQ29udHJvbFN0YXRlIGZyb20gJy4uL0Zvcm1Db250cm9sL2Zvcm1Db250cm9sU3RhdGUnO1xuaW1wb3J0IHVzZUZvcm1Db250cm9sIGZyb20gJy4uL0Zvcm1Db250cm9sL3VzZUZvcm1Db250cm9sJztcbmltcG9ydCBjYXBpdGFsaXplIGZyb20gJy4uL3V0aWxzL2NhcGl0YWxpemUnO1xuaW1wb3J0IHsgdXNlRGVmYXVsdFByb3BzIH0gZnJvbSAnLi4vRGVmYXVsdFByb3BzUHJvdmlkZXInO1xuaW1wb3J0IHN0eWxlZCBmcm9tICcuLi9zdHlsZXMvc3R5bGVkJztcbmltcG9ydCBmb3JtTGFiZWxDbGFzc2VzLCB7IGdldEZvcm1MYWJlbFV0aWxpdHlDbGFzc2VzIH0gZnJvbSAnLi9mb3JtTGFiZWxDbGFzc2VzJztcbmltcG9ydCB7IGpzeHMgYXMgX2pzeHMgfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmNvbnN0IHVzZVV0aWxpdHlDbGFzc2VzID0gb3duZXJTdGF0ZSA9PiB7XG4gIGNvbnN0IHtcbiAgICBjbGFzc2VzLFxuICAgIGNvbG9yLFxuICAgIGZvY3VzZWQsXG4gICAgZGlzYWJsZWQsXG4gICAgZXJyb3IsXG4gICAgZmlsbGVkLFxuICAgIHJlcXVpcmVkXG4gIH0gPSBvd25lclN0YXRlO1xuICBjb25zdCBzbG90cyA9IHtcbiAgICByb290OiBbJ3Jvb3QnLCBgY29sb3Ike2NhcGl0YWxpemUoY29sb3IpfWAsIGRpc2FibGVkICYmICdkaXNhYmxlZCcsIGVycm9yICYmICdlcnJvcicsIGZpbGxlZCAmJiAnZmlsbGVkJywgZm9jdXNlZCAmJiAnZm9jdXNlZCcsIHJlcXVpcmVkICYmICdyZXF1aXJlZCddLFxuICAgIGFzdGVyaXNrOiBbJ2FzdGVyaXNrJywgZXJyb3IgJiYgJ2Vycm9yJ11cbiAgfTtcbiAgcmV0dXJuIGNvbXBvc2VDbGFzc2VzKHNsb3RzLCBnZXRGb3JtTGFiZWxVdGlsaXR5Q2xhc3NlcywgY2xhc3Nlcyk7XG59O1xuZXhwb3J0IGNvbnN0IEZvcm1MYWJlbFJvb3QgPSBzdHlsZWQoJ2xhYmVsJywge1xuICBuYW1lOiAnTXVpRm9ybUxhYmVsJyxcbiAgc2xvdDogJ1Jvb3QnLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHtcbiAgICBvd25lclN0YXRlXG4gIH0sIHN0eWxlcykgPT4ge1xuICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgc3R5bGVzLnJvb3QsIG93bmVyU3RhdGUuY29sb3IgPT09ICdzZWNvbmRhcnknICYmIHN0eWxlcy5jb2xvclNlY29uZGFyeSwgb3duZXJTdGF0ZS5maWxsZWQgJiYgc3R5bGVzLmZpbGxlZCk7XG4gIH1cbn0pKCh7XG4gIHRoZW1lLFxuICBvd25lclN0YXRlXG59KSA9PiBfZXh0ZW5kcyh7XG4gIGNvbG9yOiAodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZS50ZXh0LnNlY29uZGFyeVxufSwgdGhlbWUudHlwb2dyYXBoeS5ib2R5MSwge1xuICBsaW5lSGVpZ2h0OiAnMS40Mzc1ZW0nLFxuICBwYWRkaW5nOiAwLFxuICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgW2AmLiR7Zm9ybUxhYmVsQ2xhc3Nlcy5mb2N1c2VkfWBdOiB7XG4gICAgY29sb3I6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlW293bmVyU3RhdGUuY29sb3JdLm1haW5cbiAgfSxcbiAgW2AmLiR7Zm9ybUxhYmVsQ2xhc3Nlcy5kaXNhYmxlZH1gXToge1xuICAgIGNvbG9yOiAodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZS50ZXh0LmRpc2FibGVkXG4gIH0sXG4gIFtgJi4ke2Zvcm1MYWJlbENsYXNzZXMuZXJyb3J9YF06IHtcbiAgICBjb2xvcjogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGUuZXJyb3IubWFpblxuICB9XG59KSk7XG5jb25zdCBBc3Rlcmlza0NvbXBvbmVudCA9IHN0eWxlZCgnc3BhbicsIHtcbiAgbmFtZTogJ011aUZvcm1MYWJlbCcsXG4gIHNsb3Q6ICdBc3RlcmlzaycsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4gc3R5bGVzLmFzdGVyaXNrXG59KSgoe1xuICB0aGVtZVxufSkgPT4gKHtcbiAgW2AmLiR7Zm9ybUxhYmVsQ2xhc3Nlcy5lcnJvcn1gXToge1xuICAgIGNvbG9yOiAodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZS5lcnJvci5tYWluXG4gIH1cbn0pKTtcbmNvbnN0IEZvcm1MYWJlbCA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIEZvcm1MYWJlbChpblByb3BzLCByZWYpIHtcbiAgY29uc3QgcHJvcHMgPSB1c2VEZWZhdWx0UHJvcHMoe1xuICAgIHByb3BzOiBpblByb3BzLFxuICAgIG5hbWU6ICdNdWlGb3JtTGFiZWwnXG4gIH0pO1xuICBjb25zdCB7XG4gICAgICBjaGlsZHJlbixcbiAgICAgIGNsYXNzTmFtZSxcbiAgICAgIGNvbXBvbmVudCA9ICdsYWJlbCdcbiAgICB9ID0gcHJvcHMsXG4gICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkKTtcbiAgY29uc3QgbXVpRm9ybUNvbnRyb2wgPSB1c2VGb3JtQ29udHJvbCgpO1xuICBjb25zdCBmY3MgPSBmb3JtQ29udHJvbFN0YXRlKHtcbiAgICBwcm9wcyxcbiAgICBtdWlGb3JtQ29udHJvbCxcbiAgICBzdGF0ZXM6IFsnY29sb3InLCAncmVxdWlyZWQnLCAnZm9jdXNlZCcsICdkaXNhYmxlZCcsICdlcnJvcicsICdmaWxsZWQnXVxuICB9KTtcbiAgY29uc3Qgb3duZXJTdGF0ZSA9IF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgIGNvbG9yOiBmY3MuY29sb3IgfHwgJ3ByaW1hcnknLFxuICAgIGNvbXBvbmVudCxcbiAgICBkaXNhYmxlZDogZmNzLmRpc2FibGVkLFxuICAgIGVycm9yOiBmY3MuZXJyb3IsXG4gICAgZmlsbGVkOiBmY3MuZmlsbGVkLFxuICAgIGZvY3VzZWQ6IGZjcy5mb2N1c2VkLFxuICAgIHJlcXVpcmVkOiBmY3MucmVxdWlyZWRcbiAgfSk7XG4gIGNvbnN0IGNsYXNzZXMgPSB1c2VVdGlsaXR5Q2xhc3Nlcyhvd25lclN0YXRlKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4cyhGb3JtTGFiZWxSb290LCBfZXh0ZW5kcyh7XG4gICAgYXM6IGNvbXBvbmVudCxcbiAgICBvd25lclN0YXRlOiBvd25lclN0YXRlLFxuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSksXG4gICAgcmVmOiByZWZcbiAgfSwgb3RoZXIsIHtcbiAgICBjaGlsZHJlbjogW2NoaWxkcmVuLCBmY3MucmVxdWlyZWQgJiYgLyojX19QVVJFX18qL19qc3hzKEFzdGVyaXNrQ29tcG9uZW50LCB7XG4gICAgICBvd25lclN0YXRlOiBvd25lclN0YXRlLFxuICAgICAgXCJhcmlhLWhpZGRlblwiOiB0cnVlLFxuICAgICAgY2xhc3NOYW1lOiBjbGFzc2VzLmFzdGVyaXNrLFxuICAgICAgY2hpbGRyZW46IFtcIlxcdTIwMDlcIiwgJyonXVxuICAgIH0pXVxuICB9KSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IEZvcm1MYWJlbC5wcm9wVHlwZXMgLyogcmVtb3ZlLXByb3B0eXBlcyAqLyA9IHtcbiAgLy8g4pSM4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAIFdhcm5pbmcg4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSQXG4gIC8vIOKUgiBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMuIOKUglxuICAvLyDilIIgICAgVG8gdXBkYXRlIHRoZW0sIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIGBwbnBtIHByb3B0eXBlc2AuICAgICDilIJcbiAgLy8g4pSU4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSYXG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIFRoZSBjb2xvciBvZiB0aGUgY29tcG9uZW50LlxuICAgKiBJdCBzdXBwb3J0cyBib3RoIGRlZmF1bHQgYW5kIGN1c3RvbSB0aGVtZSBjb2xvcnMsIHdoaWNoIGNhbiBiZSBhZGRlZCBhcyBzaG93biBpbiB0aGVcbiAgICogW3BhbGV0dGUgY3VzdG9taXphdGlvbiBndWlkZV0oaHR0cHM6Ly9tdWkuY29tL21hdGVyaWFsLXVpL2N1c3RvbWl6YXRpb24vcGFsZXR0ZS8jY3VzdG9tLWNvbG9ycykuXG4gICAqL1xuICBjb2xvcjogUHJvcFR5cGVzIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi8ub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydlcnJvcicsICdpbmZvJywgJ3ByaW1hcnknLCAnc2Vjb25kYXJ5JywgJ3N1Y2Nlc3MnLCAnd2FybmluZyddKSwgUHJvcFR5cGVzLnN0cmluZ10pLFxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgcm9vdCBub2RlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgSFRNTCBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKi9cbiAgY29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBsYWJlbCBzaG91bGQgYmUgZGlzcGxheWVkIGluIGEgZGlzYWJsZWQgc3RhdGUuXG4gICAqL1xuICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBsYWJlbCBpcyBkaXNwbGF5ZWQgaW4gYW4gZXJyb3Igc3RhdGUuXG4gICAqL1xuICBlcnJvcjogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBsYWJlbCBzaG91bGQgdXNlIGZpbGxlZCBjbGFzc2VzIGtleS5cbiAgICovXG4gIGZpbGxlZDogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBpbnB1dCBvZiB0aGlzIGxhYmVsIGlzIGZvY3VzZWQgKHVzZWQgYnkgYEZvcm1Hcm91cGAgY29tcG9uZW50cykuXG4gICAqL1xuICBmb2N1c2VkOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGxhYmVsIHdpbGwgaW5kaWNhdGUgdGhhdCB0aGUgYGlucHV0YCBpcyByZXF1aXJlZC5cbiAgICovXG4gIHJlcXVpcmVkOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIFRoZSBzeXN0ZW0gcHJvcCB0aGF0IGFsbG93cyBkZWZpbmluZyBzeXN0ZW0gb3ZlcnJpZGVzIGFzIHdlbGwgYXMgYWRkaXRpb25hbCBDU1Mgc3R5bGVzLlxuICAgKi9cbiAgc3g6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuYm9vbF0pKSwgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IEZvcm1MYWJlbDsiLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcblxuLyoqXG4gKiBAaWdub3JlIC0gaW50ZXJuYWwgY29tcG9uZW50LlxuICovXG5jb25zdCBHcmlkQ29udGV4dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVDb250ZXh0KCk7XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBHcmlkQ29udGV4dC5kaXNwbGF5TmFtZSA9ICdHcmlkQ29udGV4dCc7XG59XG5leHBvcnQgZGVmYXVsdCBHcmlkQ29udGV4dDsiLCJpbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzZXMnO1xuaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3MnO1xuZXhwb3J0IGZ1bmN0aW9uIGdldEdyaWRVdGlsaXR5Q2xhc3Moc2xvdCkge1xuICByZXR1cm4gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoJ011aUdyaWQnLCBzbG90KTtcbn1cbmNvbnN0IFNQQUNJTkdTID0gWzAsIDEsIDIsIDMsIDQsIDUsIDYsIDcsIDgsIDksIDEwXTtcbmNvbnN0IERJUkVDVElPTlMgPSBbJ2NvbHVtbi1yZXZlcnNlJywgJ2NvbHVtbicsICdyb3ctcmV2ZXJzZScsICdyb3cnXTtcbmNvbnN0IFdSQVBTID0gWydub3dyYXAnLCAnd3JhcC1yZXZlcnNlJywgJ3dyYXAnXTtcbmNvbnN0IEdSSURfU0laRVMgPSBbJ2F1dG8nLCB0cnVlLCAxLCAyLCAzLCA0LCA1LCA2LCA3LCA4LCA5LCAxMCwgMTEsIDEyXTtcbmNvbnN0IGdyaWRDbGFzc2VzID0gZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcygnTXVpR3JpZCcsIFsncm9vdCcsICdjb250YWluZXInLCAnaXRlbScsICd6ZXJvTWluV2lkdGgnLFxuLy8gc3BhY2luZ3Ncbi4uLlNQQUNJTkdTLm1hcChzcGFjaW5nID0+IGBzcGFjaW5nLXhzLSR7c3BhY2luZ31gKSxcbi8vIGRpcmVjdGlvbiB2YWx1ZXNcbi4uLkRJUkVDVElPTlMubWFwKGRpcmVjdGlvbiA9PiBgZGlyZWN0aW9uLXhzLSR7ZGlyZWN0aW9ufWApLFxuLy8gd3JhcCB2YWx1ZXNcbi4uLldSQVBTLm1hcCh3cmFwID0+IGB3cmFwLXhzLSR7d3JhcH1gKSxcbi8vIGdyaWQgc2l6ZXMgZm9yIGFsbCBicmVha3BvaW50c1xuLi4uR1JJRF9TSVpFUy5tYXAoc2l6ZSA9PiBgZ3JpZC14cy0ke3NpemV9YCksIC4uLkdSSURfU0laRVMubWFwKHNpemUgPT4gYGdyaWQtc20tJHtzaXplfWApLCAuLi5HUklEX1NJWkVTLm1hcChzaXplID0+IGBncmlkLW1kLSR7c2l6ZX1gKSwgLi4uR1JJRF9TSVpFUy5tYXAoc2l6ZSA9PiBgZ3JpZC1sZy0ke3NpemV9YCksIC4uLkdSSURfU0laRVMubWFwKHNpemUgPT4gYGdyaWQteGwtJHtzaXplfWApXSk7XG5leHBvcnQgZGVmYXVsdCBncmlkQ2xhc3NlczsiLCIndXNlIGNsaWVudCc7XG5cbi8vIEEgZ3JpZCBjb21wb25lbnQgdXNpbmcgdGhlIGZvbGxvd2luZyBsaWJzIGFzIGluc3BpcmF0aW9uLlxuLy9cbi8vIEZvciB0aGUgaW1wbGVtZW50YXRpb246XG4vLyAtIGh0dHBzOi8vZ2V0Ym9vdHN0cmFwLmNvbS9kb2NzLzQuMy9sYXlvdXQvZ3JpZC9cbi8vIC0gaHR0cHM6Ly9naXRodWIuY29tL2tyaXN0b2Zlcmpvc2VwaC9mbGV4Ym94Z3JpZC9ibG9iL21hc3Rlci9zcmMvY3NzL2ZsZXhib3hncmlkLmNzc1xuLy8gLSBodHRwczovL2dpdGh1Yi5jb20vcm95bGVlMDcwNC9yZWFjdC1mbGV4Ym94LWdyaWRcbi8vIC0gaHR0cHM6Ly9tYXRlcmlhbC5hbmd1bGFyanMub3JnL2xhdGVzdC9sYXlvdXQvaW50cm9kdWN0aW9uXG4vL1xuLy8gRm9sbG93IHRoaXMgZmxleGJveCBHdWlkZSB0byBiZXR0ZXIgdW5kZXJzdGFuZCB0aGUgdW5kZXJseWluZyBtb2RlbDpcbi8vIC0gaHR0cHM6Ly9jc3MtdHJpY2tzLmNvbS9zbmlwcGV0cy9jc3MvYS1ndWlkZS10by1mbGV4Ym94L1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImNsYXNzTmFtZVwiLCBcImNvbHVtbnNcIiwgXCJjb2x1bW5TcGFjaW5nXCIsIFwiY29tcG9uZW50XCIsIFwiY29udGFpbmVyXCIsIFwiZGlyZWN0aW9uXCIsIFwiaXRlbVwiLCBcInJvd1NwYWNpbmdcIiwgXCJzcGFjaW5nXCIsIFwid3JhcFwiLCBcInplcm9NaW5XaWR0aFwiXTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB7IGhhbmRsZUJyZWFrcG9pbnRzLCB1bnN0YWJsZV9yZXNvbHZlQnJlYWtwb2ludFZhbHVlcyBhcyByZXNvbHZlQnJlYWtwb2ludFZhbHVlcyB9IGZyb20gJ0BtdWkvc3lzdGVtJztcbmltcG9ydCB7IGV4dGVuZFN4UHJvcCB9IGZyb20gJ0BtdWkvc3lzdGVtL3N0eWxlRnVuY3Rpb25TeCc7XG5pbXBvcnQgY29tcG9zZUNsYXNzZXMgZnJvbSAnQG11aS91dGlscy9jb21wb3NlQ2xhc3Nlcyc7XG5pbXBvcnQgcmVxdWlyZVByb3BGYWN0b3J5IGZyb20gJy4uL3V0aWxzL3JlcXVpcmVQcm9wRmFjdG9yeSc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJy4uL3N0eWxlcy9zdHlsZWQnO1xuaW1wb3J0IHsgdXNlRGVmYXVsdFByb3BzIH0gZnJvbSAnLi4vRGVmYXVsdFByb3BzUHJvdmlkZXInO1xuaW1wb3J0IHVzZVRoZW1lIGZyb20gJy4uL3N0eWxlcy91c2VUaGVtZSc7XG5pbXBvcnQgR3JpZENvbnRleHQgZnJvbSAnLi9HcmlkQ29udGV4dCc7XG5pbXBvcnQgZ3JpZENsYXNzZXMsIHsgZ2V0R3JpZFV0aWxpdHlDbGFzcyB9IGZyb20gJy4vZ3JpZENsYXNzZXMnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmZ1bmN0aW9uIGdldE9mZnNldCh2YWwpIHtcbiAgY29uc3QgcGFyc2UgPSBwYXJzZUZsb2F0KHZhbCk7XG4gIHJldHVybiBgJHtwYXJzZX0ke1N0cmluZyh2YWwpLnJlcGxhY2UoU3RyaW5nKHBhcnNlKSwgJycpIHx8ICdweCd9YDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZW5lcmF0ZUdyaWQoe1xuICB0aGVtZSxcbiAgb3duZXJTdGF0ZVxufSkge1xuICBsZXQgc2l6ZTtcbiAgcmV0dXJuIHRoZW1lLmJyZWFrcG9pbnRzLmtleXMucmVkdWNlKChnbG9iYWxTdHlsZXMsIGJyZWFrcG9pbnQpID0+IHtcbiAgICAvLyBVc2Ugc2lkZSBlZmZlY3Qgb3ZlciBpbW11dGFiaWxpdHkgZm9yIGJldHRlciBwZXJmb3JtYW5jZS5cbiAgICBsZXQgc3R5bGVzID0ge307XG4gICAgaWYgKG93bmVyU3RhdGVbYnJlYWtwb2ludF0pIHtcbiAgICAgIHNpemUgPSBvd25lclN0YXRlW2JyZWFrcG9pbnRdO1xuICAgIH1cbiAgICBpZiAoIXNpemUpIHtcbiAgICAgIHJldHVybiBnbG9iYWxTdHlsZXM7XG4gICAgfVxuICAgIGlmIChzaXplID09PSB0cnVlKSB7XG4gICAgICAvLyBGb3IgdGhlIGF1dG8gbGF5b3V0aW5nXG4gICAgICBzdHlsZXMgPSB7XG4gICAgICAgIGZsZXhCYXNpczogMCxcbiAgICAgICAgZmxleEdyb3c6IDEsXG4gICAgICAgIG1heFdpZHRoOiAnMTAwJSdcbiAgICAgIH07XG4gICAgfSBlbHNlIGlmIChzaXplID09PSAnYXV0bycpIHtcbiAgICAgIHN0eWxlcyA9IHtcbiAgICAgICAgZmxleEJhc2lzOiAnYXV0bycsXG4gICAgICAgIGZsZXhHcm93OiAwLFxuICAgICAgICBmbGV4U2hyaW5rOiAwLFxuICAgICAgICBtYXhXaWR0aDogJ25vbmUnLFxuICAgICAgICB3aWR0aDogJ2F1dG8nXG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBjb2x1bW5zQnJlYWtwb2ludFZhbHVlcyA9IHJlc29sdmVCcmVha3BvaW50VmFsdWVzKHtcbiAgICAgICAgdmFsdWVzOiBvd25lclN0YXRlLmNvbHVtbnMsXG4gICAgICAgIGJyZWFrcG9pbnRzOiB0aGVtZS5icmVha3BvaW50cy52YWx1ZXNcbiAgICAgIH0pO1xuICAgICAgY29uc3QgY29sdW1uVmFsdWUgPSB0eXBlb2YgY29sdW1uc0JyZWFrcG9pbnRWYWx1ZXMgPT09ICdvYmplY3QnID8gY29sdW1uc0JyZWFrcG9pbnRWYWx1ZXNbYnJlYWtwb2ludF0gOiBjb2x1bW5zQnJlYWtwb2ludFZhbHVlcztcbiAgICAgIGlmIChjb2x1bW5WYWx1ZSA9PT0gdW5kZWZpbmVkIHx8IGNvbHVtblZhbHVlID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBnbG9iYWxTdHlsZXM7XG4gICAgICB9XG4gICAgICAvLyBLZWVwIDcgc2lnbmlmaWNhbnQgbnVtYmVycy5cbiAgICAgIGNvbnN0IHdpZHRoID0gYCR7TWF0aC5yb3VuZChzaXplIC8gY29sdW1uVmFsdWUgKiAxMGU3KSAvIDEwZTV9JWA7XG4gICAgICBsZXQgbW9yZSA9IHt9O1xuICAgICAgaWYgKG93bmVyU3RhdGUuY29udGFpbmVyICYmIG93bmVyU3RhdGUuaXRlbSAmJiBvd25lclN0YXRlLmNvbHVtblNwYWNpbmcgIT09IDApIHtcbiAgICAgICAgY29uc3QgdGhlbWVTcGFjaW5nID0gdGhlbWUuc3BhY2luZyhvd25lclN0YXRlLmNvbHVtblNwYWNpbmcpO1xuICAgICAgICBpZiAodGhlbWVTcGFjaW5nICE9PSAnMHB4Jykge1xuICAgICAgICAgIGNvbnN0IGZ1bGxXaWR0aCA9IGBjYWxjKCR7d2lkdGh9ICsgJHtnZXRPZmZzZXQodGhlbWVTcGFjaW5nKX0pYDtcbiAgICAgICAgICBtb3JlID0ge1xuICAgICAgICAgICAgZmxleEJhc2lzOiBmdWxsV2lkdGgsXG4gICAgICAgICAgICBtYXhXaWR0aDogZnVsbFdpZHRoXG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBDbG9zZSB0byB0aGUgYm9vdHN0cmFwIGltcGxlbWVudGF0aW9uOlxuICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvOGZjY2FhMjQzOWU5N2VjNzJhNGI3ZGM0MmNjYzFmNjQ5NzkwYWRiMC9zY3NzL21peGlucy9fZ3JpZC5zY3NzI0w0MVxuICAgICAgc3R5bGVzID0gX2V4dGVuZHMoe1xuICAgICAgICBmbGV4QmFzaXM6IHdpZHRoLFxuICAgICAgICBmbGV4R3JvdzogMCxcbiAgICAgICAgbWF4V2lkdGg6IHdpZHRoXG4gICAgICB9LCBtb3JlKTtcbiAgICB9XG5cbiAgICAvLyBObyBuZWVkIGZvciBhIG1lZGlhIHF1ZXJ5IGZvciB0aGUgZmlyc3Qgc2l6ZS5cbiAgICBpZiAodGhlbWUuYnJlYWtwb2ludHMudmFsdWVzW2JyZWFrcG9pbnRdID09PSAwKSB7XG4gICAgICBPYmplY3QuYXNzaWduKGdsb2JhbFN0eWxlcywgc3R5bGVzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZ2xvYmFsU3R5bGVzW3RoZW1lLmJyZWFrcG9pbnRzLnVwKGJyZWFrcG9pbnQpXSA9IHN0eWxlcztcbiAgICB9XG4gICAgcmV0dXJuIGdsb2JhbFN0eWxlcztcbiAgfSwge30pO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdlbmVyYXRlRGlyZWN0aW9uKHtcbiAgdGhlbWUsXG4gIG93bmVyU3RhdGVcbn0pIHtcbiAgY29uc3QgZGlyZWN0aW9uVmFsdWVzID0gcmVzb2x2ZUJyZWFrcG9pbnRWYWx1ZXMoe1xuICAgIHZhbHVlczogb3duZXJTdGF0ZS5kaXJlY3Rpb24sXG4gICAgYnJlYWtwb2ludHM6IHRoZW1lLmJyZWFrcG9pbnRzLnZhbHVlc1xuICB9KTtcbiAgcmV0dXJuIGhhbmRsZUJyZWFrcG9pbnRzKHtcbiAgICB0aGVtZVxuICB9LCBkaXJlY3Rpb25WYWx1ZXMsIHByb3BWYWx1ZSA9PiB7XG4gICAgY29uc3Qgb3V0cHV0ID0ge1xuICAgICAgZmxleERpcmVjdGlvbjogcHJvcFZhbHVlXG4gICAgfTtcbiAgICBpZiAocHJvcFZhbHVlLmluZGV4T2YoJ2NvbHVtbicpID09PSAwKSB7XG4gICAgICBvdXRwdXRbYCYgPiAuJHtncmlkQ2xhc3Nlcy5pdGVtfWBdID0ge1xuICAgICAgICBtYXhXaWR0aDogJ25vbmUnXG4gICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gb3V0cHV0O1xuICB9KTtcbn1cblxuLyoqXG4gKiBFeHRyYWN0cyB6ZXJvIHZhbHVlIGJyZWFrcG9pbnQga2V5cyBiZWZvcmUgYSBub24temVybyB2YWx1ZSBicmVha3BvaW50IGtleS5cbiAqIEBleGFtcGxlIHsgeHM6IDAsIHNtOiAwLCBtZDogMiwgbGc6IDAsIHhsOiAwIH0gb3IgWzAsIDAsIDIsIDAsIDBdXG4gKiBAcmV0dXJucyBbeHMsIHNtXVxuICovXG5mdW5jdGlvbiBleHRyYWN0WmVyb1ZhbHVlQnJlYWtwb2ludEtleXMoe1xuICBicmVha3BvaW50cyxcbiAgdmFsdWVzXG59KSB7XG4gIGxldCBub25aZXJvS2V5ID0gJyc7XG4gIE9iamVjdC5rZXlzKHZhbHVlcykuZm9yRWFjaChrZXkgPT4ge1xuICAgIGlmIChub25aZXJvS2V5ICE9PSAnJykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAodmFsdWVzW2tleV0gIT09IDApIHtcbiAgICAgIG5vblplcm9LZXkgPSBrZXk7XG4gICAgfVxuICB9KTtcbiAgY29uc3Qgc29ydGVkQnJlYWtwb2ludEtleXNCeVZhbHVlID0gT2JqZWN0LmtleXMoYnJlYWtwb2ludHMpLnNvcnQoKGEsIGIpID0+IHtcbiAgICByZXR1cm4gYnJlYWtwb2ludHNbYV0gLSBicmVha3BvaW50c1tiXTtcbiAgfSk7XG4gIHJldHVybiBzb3J0ZWRCcmVha3BvaW50S2V5c0J5VmFsdWUuc2xpY2UoMCwgc29ydGVkQnJlYWtwb2ludEtleXNCeVZhbHVlLmluZGV4T2Yobm9uWmVyb0tleSkpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdlbmVyYXRlUm93R2FwKHtcbiAgdGhlbWUsXG4gIG93bmVyU3RhdGVcbn0pIHtcbiAgY29uc3Qge1xuICAgIGNvbnRhaW5lcixcbiAgICByb3dTcGFjaW5nXG4gIH0gPSBvd25lclN0YXRlO1xuICBsZXQgc3R5bGVzID0ge307XG4gIGlmIChjb250YWluZXIgJiYgcm93U3BhY2luZyAhPT0gMCkge1xuICAgIGNvbnN0IHJvd1NwYWNpbmdWYWx1ZXMgPSByZXNvbHZlQnJlYWtwb2ludFZhbHVlcyh7XG4gICAgICB2YWx1ZXM6IHJvd1NwYWNpbmcsXG4gICAgICBicmVha3BvaW50czogdGhlbWUuYnJlYWtwb2ludHMudmFsdWVzXG4gICAgfSk7XG4gICAgbGV0IHplcm9WYWx1ZUJyZWFrcG9pbnRLZXlzO1xuICAgIGlmICh0eXBlb2Ygcm93U3BhY2luZ1ZhbHVlcyA9PT0gJ29iamVjdCcpIHtcbiAgICAgIHplcm9WYWx1ZUJyZWFrcG9pbnRLZXlzID0gZXh0cmFjdFplcm9WYWx1ZUJyZWFrcG9pbnRLZXlzKHtcbiAgICAgICAgYnJlYWtwb2ludHM6IHRoZW1lLmJyZWFrcG9pbnRzLnZhbHVlcyxcbiAgICAgICAgdmFsdWVzOiByb3dTcGFjaW5nVmFsdWVzXG4gICAgICB9KTtcbiAgICB9XG4gICAgc3R5bGVzID0gaGFuZGxlQnJlYWtwb2ludHMoe1xuICAgICAgdGhlbWVcbiAgICB9LCByb3dTcGFjaW5nVmFsdWVzLCAocHJvcFZhbHVlLCBicmVha3BvaW50KSA9PiB7XG4gICAgICB2YXIgX3plcm9WYWx1ZUJyZWFrcG9pbnRLO1xuICAgICAgY29uc3QgdGhlbWVTcGFjaW5nID0gdGhlbWUuc3BhY2luZyhwcm9wVmFsdWUpO1xuICAgICAgaWYgKHRoZW1lU3BhY2luZyAhPT0gJzBweCcpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBtYXJnaW5Ub3A6IGAtJHtnZXRPZmZzZXQodGhlbWVTcGFjaW5nKX1gLFxuICAgICAgICAgIFtgJiA+IC4ke2dyaWRDbGFzc2VzLml0ZW19YF06IHtcbiAgICAgICAgICAgIHBhZGRpbmdUb3A6IGdldE9mZnNldCh0aGVtZVNwYWNpbmcpXG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgaWYgKChfemVyb1ZhbHVlQnJlYWtwb2ludEsgPSB6ZXJvVmFsdWVCcmVha3BvaW50S2V5cykgIT0gbnVsbCAmJiBfemVyb1ZhbHVlQnJlYWtwb2ludEsuaW5jbHVkZXMoYnJlYWtwb2ludCkpIHtcbiAgICAgICAgcmV0dXJuIHt9O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbWFyZ2luVG9wOiAwLFxuICAgICAgICBbYCYgPiAuJHtncmlkQ2xhc3Nlcy5pdGVtfWBdOiB7XG4gICAgICAgICAgcGFkZGluZ1RvcDogMFxuICAgICAgICB9XG4gICAgICB9O1xuICAgIH0pO1xuICB9XG4gIHJldHVybiBzdHlsZXM7XG59XG5leHBvcnQgZnVuY3Rpb24gZ2VuZXJhdGVDb2x1bW5HYXAoe1xuICB0aGVtZSxcbiAgb3duZXJTdGF0ZVxufSkge1xuICBjb25zdCB7XG4gICAgY29udGFpbmVyLFxuICAgIGNvbHVtblNwYWNpbmdcbiAgfSA9IG93bmVyU3RhdGU7XG4gIGxldCBzdHlsZXMgPSB7fTtcbiAgaWYgKGNvbnRhaW5lciAmJiBjb2x1bW5TcGFjaW5nICE9PSAwKSB7XG4gICAgY29uc3QgY29sdW1uU3BhY2luZ1ZhbHVlcyA9IHJlc29sdmVCcmVha3BvaW50VmFsdWVzKHtcbiAgICAgIHZhbHVlczogY29sdW1uU3BhY2luZyxcbiAgICAgIGJyZWFrcG9pbnRzOiB0aGVtZS5icmVha3BvaW50cy52YWx1ZXNcbiAgICB9KTtcbiAgICBsZXQgemVyb1ZhbHVlQnJlYWtwb2ludEtleXM7XG4gICAgaWYgKHR5cGVvZiBjb2x1bW5TcGFjaW5nVmFsdWVzID09PSAnb2JqZWN0Jykge1xuICAgICAgemVyb1ZhbHVlQnJlYWtwb2ludEtleXMgPSBleHRyYWN0WmVyb1ZhbHVlQnJlYWtwb2ludEtleXMoe1xuICAgICAgICBicmVha3BvaW50czogdGhlbWUuYnJlYWtwb2ludHMudmFsdWVzLFxuICAgICAgICB2YWx1ZXM6IGNvbHVtblNwYWNpbmdWYWx1ZXNcbiAgICAgIH0pO1xuICAgIH1cbiAgICBzdHlsZXMgPSBoYW5kbGVCcmVha3BvaW50cyh7XG4gICAgICB0aGVtZVxuICAgIH0sIGNvbHVtblNwYWNpbmdWYWx1ZXMsIChwcm9wVmFsdWUsIGJyZWFrcG9pbnQpID0+IHtcbiAgICAgIHZhciBfemVyb1ZhbHVlQnJlYWtwb2ludEsyO1xuICAgICAgY29uc3QgdGhlbWVTcGFjaW5nID0gdGhlbWUuc3BhY2luZyhwcm9wVmFsdWUpO1xuICAgICAgaWYgKHRoZW1lU3BhY2luZyAhPT0gJzBweCcpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICB3aWR0aDogYGNhbGMoMTAwJSArICR7Z2V0T2Zmc2V0KHRoZW1lU3BhY2luZyl9KWAsXG4gICAgICAgICAgbWFyZ2luTGVmdDogYC0ke2dldE9mZnNldCh0aGVtZVNwYWNpbmcpfWAsXG4gICAgICAgICAgW2AmID4gLiR7Z3JpZENsYXNzZXMuaXRlbX1gXToge1xuICAgICAgICAgICAgcGFkZGluZ0xlZnQ6IGdldE9mZnNldCh0aGVtZVNwYWNpbmcpXG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgaWYgKChfemVyb1ZhbHVlQnJlYWtwb2ludEsyID0gemVyb1ZhbHVlQnJlYWtwb2ludEtleXMpICE9IG51bGwgJiYgX3plcm9WYWx1ZUJyZWFrcG9pbnRLMi5pbmNsdWRlcyhicmVha3BvaW50KSkge1xuICAgICAgICByZXR1cm4ge307XG4gICAgICB9XG4gICAgICByZXR1cm4ge1xuICAgICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgICBtYXJnaW5MZWZ0OiAwLFxuICAgICAgICBbYCYgPiAuJHtncmlkQ2xhc3Nlcy5pdGVtfWBdOiB7XG4gICAgICAgICAgcGFkZGluZ0xlZnQ6IDBcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9KTtcbiAgfVxuICByZXR1cm4gc3R5bGVzO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHJlc29sdmVTcGFjaW5nU3R5bGVzKHNwYWNpbmcsIGJyZWFrcG9pbnRzLCBzdHlsZXMgPSB7fSkge1xuICAvLyB1bmRlZmluZWQvbnVsbCBvciBgc3BhY2luZ2AgPD0gMFxuICBpZiAoIXNwYWNpbmcgfHwgc3BhY2luZyA8PSAwKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG4gIC8vIGluIGNhc2Ugb2Ygc3RyaW5nL251bWJlciBgc3BhY2luZ2BcbiAgaWYgKHR5cGVvZiBzcGFjaW5nID09PSAnc3RyaW5nJyAmJiAhTnVtYmVyLmlzTmFOKE51bWJlcihzcGFjaW5nKSkgfHwgdHlwZW9mIHNwYWNpbmcgPT09ICdudW1iZXInKSB7XG4gICAgcmV0dXJuIFtzdHlsZXNbYHNwYWNpbmcteHMtJHtTdHJpbmcoc3BhY2luZyl9YF1dO1xuICB9XG4gIC8vIGluIGNhc2Ugb2Ygb2JqZWN0IGBzcGFjaW5nYFxuICBjb25zdCBzcGFjaW5nU3R5bGVzID0gW107XG4gIGJyZWFrcG9pbnRzLmZvckVhY2goYnJlYWtwb2ludCA9PiB7XG4gICAgY29uc3QgdmFsdWUgPSBzcGFjaW5nW2JyZWFrcG9pbnRdO1xuICAgIGlmIChOdW1iZXIodmFsdWUpID4gMCkge1xuICAgICAgc3BhY2luZ1N0eWxlcy5wdXNoKHN0eWxlc1tgc3BhY2luZy0ke2JyZWFrcG9pbnR9LSR7U3RyaW5nKHZhbHVlKX1gXSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHNwYWNpbmdTdHlsZXM7XG59XG5cbi8vIERlZmF1bHQgQ1NTIHZhbHVlc1xuLy8gZmxleDogJzAgMSBhdXRvJyxcbi8vIGZsZXhEaXJlY3Rpb246ICdyb3cnLFxuLy8gYWxpZ25JdGVtczogJ2ZsZXgtc3RhcnQnLFxuLy8gZmxleFdyYXA6ICdub3dyYXAnLFxuLy8ganVzdGlmeUNvbnRlbnQ6ICdmbGV4LXN0YXJ0JyxcbmNvbnN0IEdyaWRSb290ID0gc3R5bGVkKCdkaXYnLCB7XG4gIG5hbWU6ICdNdWlHcmlkJyxcbiAgc2xvdDogJ1Jvb3QnLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBvd25lclN0YXRlXG4gICAgfSA9IHByb3BzO1xuICAgIGNvbnN0IHtcbiAgICAgIGNvbnRhaW5lcixcbiAgICAgIGRpcmVjdGlvbixcbiAgICAgIGl0ZW0sXG4gICAgICBzcGFjaW5nLFxuICAgICAgd3JhcCxcbiAgICAgIHplcm9NaW5XaWR0aCxcbiAgICAgIGJyZWFrcG9pbnRzXG4gICAgfSA9IG93bmVyU3RhdGU7XG4gICAgbGV0IHNwYWNpbmdTdHlsZXMgPSBbXTtcblxuICAgIC8vIGluIGNhc2Ugb2YgZ3JpZCBpdGVtXG4gICAgaWYgKGNvbnRhaW5lcikge1xuICAgICAgc3BhY2luZ1N0eWxlcyA9IHJlc29sdmVTcGFjaW5nU3R5bGVzKHNwYWNpbmcsIGJyZWFrcG9pbnRzLCBzdHlsZXMpO1xuICAgIH1cbiAgICBjb25zdCBicmVha3BvaW50c1N0eWxlcyA9IFtdO1xuICAgIGJyZWFrcG9pbnRzLmZvckVhY2goYnJlYWtwb2ludCA9PiB7XG4gICAgICBjb25zdCB2YWx1ZSA9IG93bmVyU3RhdGVbYnJlYWtwb2ludF07XG4gICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgYnJlYWtwb2ludHNTdHlsZXMucHVzaChzdHlsZXNbYGdyaWQtJHticmVha3BvaW50fS0ke1N0cmluZyh2YWx1ZSl9YF0pO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBbc3R5bGVzLnJvb3QsIGNvbnRhaW5lciAmJiBzdHlsZXMuY29udGFpbmVyLCBpdGVtICYmIHN0eWxlcy5pdGVtLCB6ZXJvTWluV2lkdGggJiYgc3R5bGVzLnplcm9NaW5XaWR0aCwgLi4uc3BhY2luZ1N0eWxlcywgZGlyZWN0aW9uICE9PSAncm93JyAmJiBzdHlsZXNbYGRpcmVjdGlvbi14cy0ke1N0cmluZyhkaXJlY3Rpb24pfWBdLCB3cmFwICE9PSAnd3JhcCcgJiYgc3R5bGVzW2B3cmFwLXhzLSR7U3RyaW5nKHdyYXApfWBdLCAuLi5icmVha3BvaW50c1N0eWxlc107XG4gIH1cbn0pKCh7XG4gIG93bmVyU3RhdGVcbn0pID0+IF9leHRlbmRzKHtcbiAgYm94U2l6aW5nOiAnYm9yZGVyLWJveCdcbn0sIG93bmVyU3RhdGUuY29udGFpbmVyICYmIHtcbiAgZGlzcGxheTogJ2ZsZXgnLFxuICBmbGV4V3JhcDogJ3dyYXAnLFxuICB3aWR0aDogJzEwMCUnXG59LCBvd25lclN0YXRlLml0ZW0gJiYge1xuICBtYXJnaW46IDAgLy8gRm9yIGluc3RhbmNlLCBpdCdzIHVzZWZ1bCB3aGVuIHVzZWQgd2l0aCBhIGBmaWd1cmVgIGVsZW1lbnQuXG59LCBvd25lclN0YXRlLnplcm9NaW5XaWR0aCAmJiB7XG4gIG1pbldpZHRoOiAwXG59LCBvd25lclN0YXRlLndyYXAgIT09ICd3cmFwJyAmJiB7XG4gIGZsZXhXcmFwOiBvd25lclN0YXRlLndyYXBcbn0pLCBnZW5lcmF0ZURpcmVjdGlvbiwgZ2VuZXJhdGVSb3dHYXAsIGdlbmVyYXRlQ29sdW1uR2FwLCBnZW5lcmF0ZUdyaWQpO1xuZXhwb3J0IGZ1bmN0aW9uIHJlc29sdmVTcGFjaW5nQ2xhc3NlcyhzcGFjaW5nLCBicmVha3BvaW50cykge1xuICAvLyB1bmRlZmluZWQvbnVsbCBvciBgc3BhY2luZ2AgPD0gMFxuICBpZiAoIXNwYWNpbmcgfHwgc3BhY2luZyA8PSAwKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG4gIC8vIGluIGNhc2Ugb2Ygc3RyaW5nL251bWJlciBgc3BhY2luZ2BcbiAgaWYgKHR5cGVvZiBzcGFjaW5nID09PSAnc3RyaW5nJyAmJiAhTnVtYmVyLmlzTmFOKE51bWJlcihzcGFjaW5nKSkgfHwgdHlwZW9mIHNwYWNpbmcgPT09ICdudW1iZXInKSB7XG4gICAgcmV0dXJuIFtgc3BhY2luZy14cy0ke1N0cmluZyhzcGFjaW5nKX1gXTtcbiAgfVxuICAvLyBpbiBjYXNlIG9mIG9iamVjdCBgc3BhY2luZ2BcbiAgY29uc3QgY2xhc3NlcyA9IFtdO1xuICBicmVha3BvaW50cy5mb3JFYWNoKGJyZWFrcG9pbnQgPT4ge1xuICAgIGNvbnN0IHZhbHVlID0gc3BhY2luZ1ticmVha3BvaW50XTtcbiAgICBpZiAoTnVtYmVyKHZhbHVlKSA+IDApIHtcbiAgICAgIGNvbnN0IGNsYXNzTmFtZSA9IGBzcGFjaW5nLSR7YnJlYWtwb2ludH0tJHtTdHJpbmcodmFsdWUpfWA7XG4gICAgICBjbGFzc2VzLnB1c2goY2xhc3NOYW1lKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gY2xhc3Nlcztcbn1cbmNvbnN0IHVzZVV0aWxpdHlDbGFzc2VzID0gb3duZXJTdGF0ZSA9PiB7XG4gIGNvbnN0IHtcbiAgICBjbGFzc2VzLFxuICAgIGNvbnRhaW5lcixcbiAgICBkaXJlY3Rpb24sXG4gICAgaXRlbSxcbiAgICBzcGFjaW5nLFxuICAgIHdyYXAsXG4gICAgemVyb01pbldpZHRoLFxuICAgIGJyZWFrcG9pbnRzXG4gIH0gPSBvd25lclN0YXRlO1xuICBsZXQgc3BhY2luZ0NsYXNzZXMgPSBbXTtcblxuICAvLyBpbiBjYXNlIG9mIGdyaWQgaXRlbVxuICBpZiAoY29udGFpbmVyKSB7XG4gICAgc3BhY2luZ0NsYXNzZXMgPSByZXNvbHZlU3BhY2luZ0NsYXNzZXMoc3BhY2luZywgYnJlYWtwb2ludHMpO1xuICB9XG4gIGNvbnN0IGJyZWFrcG9pbnRzQ2xhc3NlcyA9IFtdO1xuICBicmVha3BvaW50cy5mb3JFYWNoKGJyZWFrcG9pbnQgPT4ge1xuICAgIGNvbnN0IHZhbHVlID0gb3duZXJTdGF0ZVticmVha3BvaW50XTtcbiAgICBpZiAodmFsdWUpIHtcbiAgICAgIGJyZWFrcG9pbnRzQ2xhc3Nlcy5wdXNoKGBncmlkLSR7YnJlYWtwb2ludH0tJHtTdHJpbmcodmFsdWUpfWApO1xuICAgIH1cbiAgfSk7XG4gIGNvbnN0IHNsb3RzID0ge1xuICAgIHJvb3Q6IFsncm9vdCcsIGNvbnRhaW5lciAmJiAnY29udGFpbmVyJywgaXRlbSAmJiAnaXRlbScsIHplcm9NaW5XaWR0aCAmJiAnemVyb01pbldpZHRoJywgLi4uc3BhY2luZ0NsYXNzZXMsIGRpcmVjdGlvbiAhPT0gJ3JvdycgJiYgYGRpcmVjdGlvbi14cy0ke1N0cmluZyhkaXJlY3Rpb24pfWAsIHdyYXAgIT09ICd3cmFwJyAmJiBgd3JhcC14cy0ke1N0cmluZyh3cmFwKX1gLCAuLi5icmVha3BvaW50c0NsYXNzZXNdXG4gIH07XG4gIHJldHVybiBjb21wb3NlQ2xhc3NlcyhzbG90cywgZ2V0R3JpZFV0aWxpdHlDbGFzcywgY2xhc3Nlcyk7XG59O1xuY29uc3QgR3JpZCA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIEdyaWQoaW5Qcm9wcywgcmVmKSB7XG4gIGNvbnN0IHRoZW1lUHJvcHMgPSB1c2VEZWZhdWx0UHJvcHMoe1xuICAgIHByb3BzOiBpblByb3BzLFxuICAgIG5hbWU6ICdNdWlHcmlkJ1xuICB9KTtcbiAgY29uc3Qge1xuICAgIGJyZWFrcG9pbnRzXG4gIH0gPSB1c2VUaGVtZSgpO1xuICBjb25zdCBwcm9wcyA9IGV4dGVuZFN4UHJvcCh0aGVtZVByb3BzKTtcbiAgY29uc3Qge1xuICAgICAgY2xhc3NOYW1lLFxuICAgICAgY29sdW1uczogY29sdW1uc1Byb3AsXG4gICAgICBjb2x1bW5TcGFjaW5nOiBjb2x1bW5TcGFjaW5nUHJvcCxcbiAgICAgIGNvbXBvbmVudCA9ICdkaXYnLFxuICAgICAgY29udGFpbmVyID0gZmFsc2UsXG4gICAgICBkaXJlY3Rpb24gPSAncm93JyxcbiAgICAgIGl0ZW0gPSBmYWxzZSxcbiAgICAgIHJvd1NwYWNpbmc6IHJvd1NwYWNpbmdQcm9wLFxuICAgICAgc3BhY2luZyA9IDAsXG4gICAgICB3cmFwID0gJ3dyYXAnLFxuICAgICAgemVyb01pbldpZHRoID0gZmFsc2VcbiAgICB9ID0gcHJvcHMsXG4gICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkKTtcbiAgY29uc3Qgcm93U3BhY2luZyA9IHJvd1NwYWNpbmdQcm9wIHx8IHNwYWNpbmc7XG4gIGNvbnN0IGNvbHVtblNwYWNpbmcgPSBjb2x1bW5TcGFjaW5nUHJvcCB8fCBzcGFjaW5nO1xuICBjb25zdCBjb2x1bW5zQ29udGV4dCA9IFJlYWN0LnVzZUNvbnRleHQoR3JpZENvbnRleHQpO1xuXG4gIC8vIGNvbHVtbnMgc2V0IHdpdGggZGVmYXVsdCBicmVha3BvaW50IHVuaXQgb2YgMTJcbiAgY29uc3QgY29sdW1ucyA9IGNvbnRhaW5lciA/IGNvbHVtbnNQcm9wIHx8IDEyIDogY29sdW1uc0NvbnRleHQ7XG4gIGNvbnN0IGJyZWFrcG9pbnRzVmFsdWVzID0ge307XG4gIGNvbnN0IG90aGVyRmlsdGVyZWQgPSBfZXh0ZW5kcyh7fSwgb3RoZXIpO1xuICBicmVha3BvaW50cy5rZXlzLmZvckVhY2goYnJlYWtwb2ludCA9PiB7XG4gICAgaWYgKG90aGVyW2JyZWFrcG9pbnRdICE9IG51bGwpIHtcbiAgICAgIGJyZWFrcG9pbnRzVmFsdWVzW2JyZWFrcG9pbnRdID0gb3RoZXJbYnJlYWtwb2ludF07XG4gICAgICBkZWxldGUgb3RoZXJGaWx0ZXJlZFticmVha3BvaW50XTtcbiAgICB9XG4gIH0pO1xuICBjb25zdCBvd25lclN0YXRlID0gX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgY29sdW1ucyxcbiAgICBjb250YWluZXIsXG4gICAgZGlyZWN0aW9uLFxuICAgIGl0ZW0sXG4gICAgcm93U3BhY2luZyxcbiAgICBjb2x1bW5TcGFjaW5nLFxuICAgIHdyYXAsXG4gICAgemVyb01pbldpZHRoLFxuICAgIHNwYWNpbmdcbiAgfSwgYnJlYWtwb2ludHNWYWx1ZXMsIHtcbiAgICBicmVha3BvaW50czogYnJlYWtwb2ludHMua2V5c1xuICB9KTtcbiAgY29uc3QgY2xhc3NlcyA9IHVzZVV0aWxpdHlDbGFzc2VzKG93bmVyU3RhdGUpO1xuICByZXR1cm4gLyojX19QVVJFX18qL19qc3goR3JpZENvbnRleHQuUHJvdmlkZXIsIHtcbiAgICB2YWx1ZTogY29sdW1ucyxcbiAgICBjaGlsZHJlbjogLyojX19QVVJFX18qL19qc3goR3JpZFJvb3QsIF9leHRlbmRzKHtcbiAgICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGUsXG4gICAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWUpLFxuICAgICAgYXM6IGNvbXBvbmVudCxcbiAgICAgIHJlZjogcmVmXG4gICAgfSwgb3RoZXJGaWx0ZXJlZCkpXG4gIH0pO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBHcmlkLnByb3BUeXBlcyAvKiByZW1vdmUtcHJvcHR5cGVzICovID0ge1xuICAvLyDilIzilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIAgV2FybmluZyDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJBcbiAgLy8g4pSCIFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucy4g4pSCXG4gIC8vIOKUgiAgICBUbyB1cGRhdGUgdGhlbSwgZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gYHBucG0gcHJvcHR5cGVzYC4gICAgIOKUglxuICAvLyDilJTilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJhcbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogVGhlIG51bWJlciBvZiBjb2x1bW5zLlxuICAgKiBAZGVmYXVsdCAxMlxuICAgKi9cbiAgY29sdW1uczogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm51bWJlciksIFByb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5vYmplY3RdKSxcbiAgLyoqXG4gICAqIERlZmluZXMgdGhlIGhvcml6b250YWwgc3BhY2UgYmV0d2VlbiB0aGUgdHlwZSBgaXRlbWAgY29tcG9uZW50cy5cbiAgICogSXQgb3ZlcnJpZGVzIHRoZSB2YWx1ZSBvZiB0aGUgYHNwYWNpbmdgIHByb3AuXG4gICAqL1xuICBjb2x1bW5TcGFjaW5nOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc3RyaW5nXSkpLCBQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuc3RyaW5nXSksXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBIVE1MIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBjb21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGNvbXBvbmVudCB3aWxsIGhhdmUgdGhlIGZsZXggKmNvbnRhaW5lciogYmVoYXZpb3IuXG4gICAqIFlvdSBzaG91bGQgYmUgd3JhcHBpbmcgKml0ZW1zKiB3aXRoIGEgKmNvbnRhaW5lciouXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBjb250YWluZXI6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogRGVmaW5lcyB0aGUgYGZsZXgtZGlyZWN0aW9uYCBzdHlsZSBwcm9wZXJ0eS5cbiAgICogSXQgaXMgYXBwbGllZCBmb3IgYWxsIHNjcmVlbiBzaXplcy5cbiAgICogQGRlZmF1bHQgJ3JvdydcbiAgICovXG4gIGRpcmVjdGlvbjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsnY29sdW1uLXJldmVyc2UnLCAnY29sdW1uJywgJ3Jvdy1yZXZlcnNlJywgJ3JvdyddKSwgUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mKFsnY29sdW1uLXJldmVyc2UnLCAnY29sdW1uJywgJ3Jvdy1yZXZlcnNlJywgJ3JvdyddKSksIFByb3BUeXBlcy5vYmplY3RdKSxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGNvbXBvbmVudCB3aWxsIGhhdmUgdGhlIGZsZXggKml0ZW0qIGJlaGF2aW9yLlxuICAgKiBZb3Ugc2hvdWxkIGJlIHdyYXBwaW5nICppdGVtcyogd2l0aCBhICpjb250YWluZXIqLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgaXRlbTogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBJZiBhIG51bWJlciwgaXQgc2V0cyB0aGUgbnVtYmVyIG9mIGNvbHVtbnMgdGhlIGdyaWQgaXRlbSB1c2VzLlxuICAgKiBJdCBjYW4ndCBiZSBncmVhdGVyIHRoYW4gdGhlIHRvdGFsIG51bWJlciBvZiBjb2x1bW5zIG9mIHRoZSBjb250YWluZXIgKDEyIGJ5IGRlZmF1bHQpLlxuICAgKiBJZiAnYXV0bycsIHRoZSBncmlkIGl0ZW0ncyB3aWR0aCBtYXRjaGVzIGl0cyBjb250ZW50LlxuICAgKiBJZiBmYWxzZSwgdGhlIHByb3AgaXMgaWdub3JlZC5cbiAgICogSWYgdHJ1ZSwgdGhlIGdyaWQgaXRlbSdzIHdpZHRoIGdyb3dzIHRvIHVzZSB0aGUgc3BhY2UgYXZhaWxhYmxlIGluIHRoZSBncmlkIGNvbnRhaW5lci5cbiAgICogVGhlIHZhbHVlIGlzIGFwcGxpZWQgZm9yIHRoZSBgbGdgIGJyZWFrcG9pbnQgYW5kIHdpZGVyIHNjcmVlbnMgaWYgbm90IG92ZXJyaWRkZW4uXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBsZzogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsnYXV0byddKSwgUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLmJvb2xdKSxcbiAgLyoqXG4gICAqIElmIGEgbnVtYmVyLCBpdCBzZXRzIHRoZSBudW1iZXIgb2YgY29sdW1ucyB0aGUgZ3JpZCBpdGVtIHVzZXMuXG4gICAqIEl0IGNhbid0IGJlIGdyZWF0ZXIgdGhhbiB0aGUgdG90YWwgbnVtYmVyIG9mIGNvbHVtbnMgb2YgdGhlIGNvbnRhaW5lciAoMTIgYnkgZGVmYXVsdCkuXG4gICAqIElmICdhdXRvJywgdGhlIGdyaWQgaXRlbSdzIHdpZHRoIG1hdGNoZXMgaXRzIGNvbnRlbnQuXG4gICAqIElmIGZhbHNlLCB0aGUgcHJvcCBpcyBpZ25vcmVkLlxuICAgKiBJZiB0cnVlLCB0aGUgZ3JpZCBpdGVtJ3Mgd2lkdGggZ3Jvd3MgdG8gdXNlIHRoZSBzcGFjZSBhdmFpbGFibGUgaW4gdGhlIGdyaWQgY29udGFpbmVyLlxuICAgKiBUaGUgdmFsdWUgaXMgYXBwbGllZCBmb3IgdGhlIGBtZGAgYnJlYWtwb2ludCBhbmQgd2lkZXIgc2NyZWVucyBpZiBub3Qgb3ZlcnJpZGRlbi5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIG1kOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydhdXRvJ10pLCBQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuYm9vbF0pLFxuICAvKipcbiAgICogRGVmaW5lcyB0aGUgdmVydGljYWwgc3BhY2UgYmV0d2VlbiB0aGUgdHlwZSBgaXRlbWAgY29tcG9uZW50cy5cbiAgICogSXQgb3ZlcnJpZGVzIHRoZSB2YWx1ZSBvZiB0aGUgYHNwYWNpbmdgIHByb3AuXG4gICAqL1xuICByb3dTcGFjaW5nOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc3RyaW5nXSkpLCBQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuc3RyaW5nXSksXG4gIC8qKlxuICAgKiBJZiBhIG51bWJlciwgaXQgc2V0cyB0aGUgbnVtYmVyIG9mIGNvbHVtbnMgdGhlIGdyaWQgaXRlbSB1c2VzLlxuICAgKiBJdCBjYW4ndCBiZSBncmVhdGVyIHRoYW4gdGhlIHRvdGFsIG51bWJlciBvZiBjb2x1bW5zIG9mIHRoZSBjb250YWluZXIgKDEyIGJ5IGRlZmF1bHQpLlxuICAgKiBJZiAnYXV0bycsIHRoZSBncmlkIGl0ZW0ncyB3aWR0aCBtYXRjaGVzIGl0cyBjb250ZW50LlxuICAgKiBJZiBmYWxzZSwgdGhlIHByb3AgaXMgaWdub3JlZC5cbiAgICogSWYgdHJ1ZSwgdGhlIGdyaWQgaXRlbSdzIHdpZHRoIGdyb3dzIHRvIHVzZSB0aGUgc3BhY2UgYXZhaWxhYmxlIGluIHRoZSBncmlkIGNvbnRhaW5lci5cbiAgICogVGhlIHZhbHVlIGlzIGFwcGxpZWQgZm9yIHRoZSBgc21gIGJyZWFrcG9pbnQgYW5kIHdpZGVyIHNjcmVlbnMgaWYgbm90IG92ZXJyaWRkZW4uXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBzbTogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsnYXV0byddKSwgUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLmJvb2xdKSxcbiAgLyoqXG4gICAqIERlZmluZXMgdGhlIHNwYWNlIGJldHdlZW4gdGhlIHR5cGUgYGl0ZW1gIGNvbXBvbmVudHMuXG4gICAqIEl0IGNhbiBvbmx5IGJlIHVzZWQgb24gYSB0eXBlIGBjb250YWluZXJgIGNvbXBvbmVudC5cbiAgICogQGRlZmF1bHQgMFxuICAgKi9cbiAgc3BhY2luZzogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnN0cmluZ10pKSwgUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLnN0cmluZ10pLFxuICAvKipcbiAgICogVGhlIHN5c3RlbSBwcm9wIHRoYXQgYWxsb3dzIGRlZmluaW5nIHN5c3RlbSBvdmVycmlkZXMgYXMgd2VsbCBhcyBhZGRpdGlvbmFsIENTUyBzdHlsZXMuXG4gICAqL1xuICBzeDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5ib29sXSkpLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pLFxuICAvKipcbiAgICogRGVmaW5lcyB0aGUgYGZsZXgtd3JhcGAgc3R5bGUgcHJvcGVydHkuXG4gICAqIEl0J3MgYXBwbGllZCBmb3IgYWxsIHNjcmVlbiBzaXplcy5cbiAgICogQGRlZmF1bHQgJ3dyYXAnXG4gICAqL1xuICB3cmFwOiBQcm9wVHlwZXMub25lT2YoWydub3dyYXAnLCAnd3JhcC1yZXZlcnNlJywgJ3dyYXAnXSksXG4gIC8qKlxuICAgKiBJZiBhIG51bWJlciwgaXQgc2V0cyB0aGUgbnVtYmVyIG9mIGNvbHVtbnMgdGhlIGdyaWQgaXRlbSB1c2VzLlxuICAgKiBJdCBjYW4ndCBiZSBncmVhdGVyIHRoYW4gdGhlIHRvdGFsIG51bWJlciBvZiBjb2x1bW5zIG9mIHRoZSBjb250YWluZXIgKDEyIGJ5IGRlZmF1bHQpLlxuICAgKiBJZiAnYXV0bycsIHRoZSBncmlkIGl0ZW0ncyB3aWR0aCBtYXRjaGVzIGl0cyBjb250ZW50LlxuICAgKiBJZiBmYWxzZSwgdGhlIHByb3AgaXMgaWdub3JlZC5cbiAgICogSWYgdHJ1ZSwgdGhlIGdyaWQgaXRlbSdzIHdpZHRoIGdyb3dzIHRvIHVzZSB0aGUgc3BhY2UgYXZhaWxhYmxlIGluIHRoZSBncmlkIGNvbnRhaW5lci5cbiAgICogVGhlIHZhbHVlIGlzIGFwcGxpZWQgZm9yIHRoZSBgeGxgIGJyZWFrcG9pbnQgYW5kIHdpZGVyIHNjcmVlbnMgaWYgbm90IG92ZXJyaWRkZW4uXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICB4bDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsnYXV0byddKSwgUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLmJvb2xdKSxcbiAgLyoqXG4gICAqIElmIGEgbnVtYmVyLCBpdCBzZXRzIHRoZSBudW1iZXIgb2YgY29sdW1ucyB0aGUgZ3JpZCBpdGVtIHVzZXMuXG4gICAqIEl0IGNhbid0IGJlIGdyZWF0ZXIgdGhhbiB0aGUgdG90YWwgbnVtYmVyIG9mIGNvbHVtbnMgb2YgdGhlIGNvbnRhaW5lciAoMTIgYnkgZGVmYXVsdCkuXG4gICAqIElmICdhdXRvJywgdGhlIGdyaWQgaXRlbSdzIHdpZHRoIG1hdGNoZXMgaXRzIGNvbnRlbnQuXG4gICAqIElmIGZhbHNlLCB0aGUgcHJvcCBpcyBpZ25vcmVkLlxuICAgKiBJZiB0cnVlLCB0aGUgZ3JpZCBpdGVtJ3Mgd2lkdGggZ3Jvd3MgdG8gdXNlIHRoZSBzcGFjZSBhdmFpbGFibGUgaW4gdGhlIGdyaWQgY29udGFpbmVyLlxuICAgKiBUaGUgdmFsdWUgaXMgYXBwbGllZCBmb3IgYWxsIHRoZSBzY3JlZW4gc2l6ZXMgd2l0aCB0aGUgbG93ZXN0IHByaW9yaXR5LlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgeHM6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ2F1dG8nXSksIFByb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5ib29sXSksXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIGl0IHNldHMgYG1pbi13aWR0aDogMGAgb24gdGhlIGl0ZW0uXG4gICAqIFJlZmVyIHRvIHRoZSBsaW1pdGF0aW9ucyBzZWN0aW9uIG9mIHRoZSBkb2N1bWVudGF0aW9uIHRvIGJldHRlciB1bmRlcnN0YW5kIHRoZSB1c2UgY2FzZS5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIHplcm9NaW5XaWR0aDogUHJvcFR5cGVzLmJvb2xcbn0gOiB2b2lkIDA7XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBjb25zdCByZXF1aXJlUHJvcCA9IHJlcXVpcmVQcm9wRmFjdG9yeSgnR3JpZCcsIEdyaWQpO1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdXNlbGVzcy1jb25jYXRcbiAgR3JpZFsncHJvcFR5cGVzJyArICcnXSA9IF9leHRlbmRzKHt9LCBHcmlkLnByb3BUeXBlcywge1xuICAgIGRpcmVjdGlvbjogcmVxdWlyZVByb3AoJ2NvbnRhaW5lcicpLFxuICAgIGxnOiByZXF1aXJlUHJvcCgnaXRlbScpLFxuICAgIG1kOiByZXF1aXJlUHJvcCgnaXRlbScpLFxuICAgIHNtOiByZXF1aXJlUHJvcCgnaXRlbScpLFxuICAgIHNwYWNpbmc6IHJlcXVpcmVQcm9wKCdjb250YWluZXInKSxcbiAgICB3cmFwOiByZXF1aXJlUHJvcCgnY29udGFpbmVyJyksXG4gICAgeHM6IHJlcXVpcmVQcm9wKCdpdGVtJyksXG4gICAgemVyb01pbldpZHRoOiByZXF1aXJlUHJvcCgnaXRlbScpXG4gIH0pO1xufVxuZXhwb3J0IGRlZmF1bHQgR3JpZDsiLCJleHBvcnQgY29uc3QgZmlsdGVyQnJlYWtwb2ludEtleXMgPSAoYnJlYWtwb2ludHNLZXlzLCByZXNwb25zaXZlS2V5cykgPT4gYnJlYWtwb2ludHNLZXlzLmZpbHRlcihrZXkgPT4gcmVzcG9uc2l2ZUtleXMuaW5jbHVkZXMoa2V5KSk7XG5leHBvcnQgY29uc3QgdHJhdmVyc2VCcmVha3BvaW50cyA9IChicmVha3BvaW50cywgcmVzcG9uc2l2ZSwgaXRlcmF0b3IpID0+IHtcbiAgY29uc3Qgc21hbGxlc3RCcmVha3BvaW50ID0gYnJlYWtwb2ludHMua2V5c1swXTsgLy8gdGhlIGtleXMgaXMgc29ydGVkIGZyb20gc21hbGxlc3QgdG8gbGFyZ2VzdCBieSBgY3JlYXRlQnJlYWtwb2ludHNgLlxuXG4gIGlmIChBcnJheS5pc0FycmF5KHJlc3BvbnNpdmUpKSB7XG4gICAgcmVzcG9uc2l2ZS5mb3JFYWNoKChicmVha3BvaW50VmFsdWUsIGluZGV4KSA9PiB7XG4gICAgICBpdGVyYXRvcigocmVzcG9uc2l2ZVN0eWxlcywgc3R5bGUpID0+IHtcbiAgICAgICAgaWYgKGluZGV4IDw9IGJyZWFrcG9pbnRzLmtleXMubGVuZ3RoIC0gMSkge1xuICAgICAgICAgIGlmIChpbmRleCA9PT0gMCkge1xuICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihyZXNwb25zaXZlU3R5bGVzLCBzdHlsZSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlc3BvbnNpdmVTdHlsZXNbYnJlYWtwb2ludHMudXAoYnJlYWtwb2ludHMua2V5c1tpbmRleF0pXSA9IHN0eWxlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSwgYnJlYWtwb2ludFZhbHVlKTtcbiAgICB9KTtcbiAgfSBlbHNlIGlmIChyZXNwb25zaXZlICYmIHR5cGVvZiByZXNwb25zaXZlID09PSAnb2JqZWN0Jykge1xuICAgIC8vIHByZXZlbnQgbnVsbFxuICAgIC8vIHJlc3BvbnNpdmUgY291bGQgYmUgYSB2ZXJ5IGJpZyBvYmplY3QsIHBpY2sgdGhlIHNtYWxsZXN0IHJlc3BvbnNpdmUgdmFsdWVzXG5cbiAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMocmVzcG9uc2l2ZSkubGVuZ3RoID4gYnJlYWtwb2ludHMua2V5cy5sZW5ndGggPyBicmVha3BvaW50cy5rZXlzIDogZmlsdGVyQnJlYWtwb2ludEtleXMoYnJlYWtwb2ludHMua2V5cywgT2JqZWN0LmtleXMocmVzcG9uc2l2ZSkpO1xuICAgIGtleXMuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgaWYgKGJyZWFrcG9pbnRzLmtleXMuaW5kZXhPZihrZXkpICE9PSAtMSkge1xuICAgICAgICAvLyBAdHMtaWdub3JlIGFscmVhZHkgY2hlY2tlZCB0aGF0IHJlc3BvbnNpdmUgaXMgYW4gb2JqZWN0XG4gICAgICAgIGNvbnN0IGJyZWFrcG9pbnRWYWx1ZSA9IHJlc3BvbnNpdmVba2V5XTtcbiAgICAgICAgaWYgKGJyZWFrcG9pbnRWYWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgaXRlcmF0b3IoKHJlc3BvbnNpdmVTdHlsZXMsIHN0eWxlKSA9PiB7XG4gICAgICAgICAgICBpZiAoc21hbGxlc3RCcmVha3BvaW50ID09PSBrZXkpIHtcbiAgICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihyZXNwb25zaXZlU3R5bGVzLCBzdHlsZSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZXNwb25zaXZlU3R5bGVzW2JyZWFrcG9pbnRzLnVwKGtleSldID0gc3R5bGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSwgYnJlYWtwb2ludFZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9IGVsc2UgaWYgKHR5cGVvZiByZXNwb25zaXZlID09PSAnbnVtYmVyJyB8fCB0eXBlb2YgcmVzcG9uc2l2ZSA9PT0gJ3N0cmluZycpIHtcbiAgICBpdGVyYXRvcigocmVzcG9uc2l2ZVN0eWxlcywgc3R5bGUpID0+IHtcbiAgICAgIE9iamVjdC5hc3NpZ24ocmVzcG9uc2l2ZVN0eWxlcywgc3R5bGUpO1xuICAgIH0sIHJlc3BvbnNpdmUpO1xuICB9XG59OyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IHsgdHJhdmVyc2VCcmVha3BvaW50cyB9IGZyb20gJy4vdHJhdmVyc2VCcmVha3BvaW50cyc7XG5mdW5jdGlvbiBhcHBlbmRMZXZlbChsZXZlbCkge1xuICBpZiAoIWxldmVsKSB7XG4gICAgcmV0dXJuICcnO1xuICB9XG4gIHJldHVybiBgTGV2ZWwke2xldmVsfWA7XG59XG5mdW5jdGlvbiBpc05lc3RlZENvbnRhaW5lcihvd25lclN0YXRlKSB7XG4gIHJldHVybiBvd25lclN0YXRlLnVuc3RhYmxlX2xldmVsID4gMCAmJiBvd25lclN0YXRlLmNvbnRhaW5lcjtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUdldFNlbGZTcGFjaW5nKG93bmVyU3RhdGUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGdldFNlbGZTcGFjaW5nKGF4aXMpIHtcbiAgICByZXR1cm4gYHZhcigtLUdyaWQtJHtheGlzfVNwYWNpbmcke2FwcGVuZExldmVsKG93bmVyU3RhdGUudW5zdGFibGVfbGV2ZWwpfSlgO1xuICB9O1xufVxuZnVuY3Rpb24gY3JlYXRlR2V0UGFyZW50U3BhY2luZyhvd25lclN0YXRlKSB7XG4gIHJldHVybiBmdW5jdGlvbiBnZXRQYXJlbnRTcGFjaW5nKGF4aXMpIHtcbiAgICBpZiAob3duZXJTdGF0ZS51bnN0YWJsZV9sZXZlbCA9PT0gMCkge1xuICAgICAgcmV0dXJuIGB2YXIoLS1HcmlkLSR7YXhpc31TcGFjaW5nKWA7XG4gICAgfVxuICAgIHJldHVybiBgdmFyKC0tR3JpZC0ke2F4aXN9U3BhY2luZyR7YXBwZW5kTGV2ZWwob3duZXJTdGF0ZS51bnN0YWJsZV9sZXZlbCAtIDEpfSlgO1xuICB9O1xufVxuZnVuY3Rpb24gZ2V0UGFyZW50Q29sdW1ucyhvd25lclN0YXRlKSB7XG4gIGlmIChvd25lclN0YXRlLnVuc3RhYmxlX2xldmVsID09PSAwKSB7XG4gICAgcmV0dXJuIGB2YXIoLS1HcmlkLWNvbHVtbnMpYDtcbiAgfVxuICByZXR1cm4gYHZhcigtLUdyaWQtY29sdW1ucyR7YXBwZW5kTGV2ZWwob3duZXJTdGF0ZS51bnN0YWJsZV9sZXZlbCAtIDEpfSlgO1xufVxuZXhwb3J0IGNvbnN0IGdlbmVyYXRlR3JpZFNpemVTdHlsZXMgPSAoe1xuICB0aGVtZSxcbiAgb3duZXJTdGF0ZVxufSkgPT4ge1xuICBjb25zdCBnZXRTZWxmU3BhY2luZyA9IGNyZWF0ZUdldFNlbGZTcGFjaW5nKG93bmVyU3RhdGUpO1xuICBjb25zdCBzdHlsZXMgPSB7fTtcbiAgdHJhdmVyc2VCcmVha3BvaW50cyh0aGVtZS5icmVha3BvaW50cywgb3duZXJTdGF0ZS5ncmlkU2l6ZSwgKGFwcGVuZFN0eWxlLCB2YWx1ZSkgPT4ge1xuICAgIGxldCBzdHlsZSA9IHt9O1xuICAgIGlmICh2YWx1ZSA9PT0gdHJ1ZSkge1xuICAgICAgc3R5bGUgPSB7XG4gICAgICAgIGZsZXhCYXNpczogMCxcbiAgICAgICAgZmxleEdyb3c6IDEsXG4gICAgICAgIG1heFdpZHRoOiAnMTAwJSdcbiAgICAgIH07XG4gICAgfVxuICAgIGlmICh2YWx1ZSA9PT0gJ2F1dG8nKSB7XG4gICAgICBzdHlsZSA9IHtcbiAgICAgICAgZmxleEJhc2lzOiAnYXV0bycsXG4gICAgICAgIGZsZXhHcm93OiAwLFxuICAgICAgICBmbGV4U2hyaW5rOiAwLFxuICAgICAgICBtYXhXaWR0aDogJ25vbmUnLFxuICAgICAgICB3aWR0aDogJ2F1dG8nXG4gICAgICB9O1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykge1xuICAgICAgc3R5bGUgPSB7XG4gICAgICAgIGZsZXhHcm93OiAwLFxuICAgICAgICBmbGV4QmFzaXM6ICdhdXRvJyxcbiAgICAgICAgd2lkdGg6IGBjYWxjKDEwMCUgKiAke3ZhbHVlfSAvICR7Z2V0UGFyZW50Q29sdW1ucyhvd25lclN0YXRlKX0ke2lzTmVzdGVkQ29udGFpbmVyKG93bmVyU3RhdGUpID8gYCArICR7Z2V0U2VsZlNwYWNpbmcoJ2NvbHVtbicpfWAgOiAnJ30pYFxuICAgICAgfTtcbiAgICB9XG4gICAgYXBwZW5kU3R5bGUoc3R5bGVzLCBzdHlsZSk7XG4gIH0pO1xuICByZXR1cm4gc3R5bGVzO1xufTtcbmV4cG9ydCBjb25zdCBnZW5lcmF0ZUdyaWRPZmZzZXRTdHlsZXMgPSAoe1xuICB0aGVtZSxcbiAgb3duZXJTdGF0ZVxufSkgPT4ge1xuICBjb25zdCBzdHlsZXMgPSB7fTtcbiAgdHJhdmVyc2VCcmVha3BvaW50cyh0aGVtZS5icmVha3BvaW50cywgb3duZXJTdGF0ZS5ncmlkT2Zmc2V0LCAoYXBwZW5kU3R5bGUsIHZhbHVlKSA9PiB7XG4gICAgbGV0IHN0eWxlID0ge307XG4gICAgaWYgKHZhbHVlID09PSAnYXV0bycpIHtcbiAgICAgIHN0eWxlID0ge1xuICAgICAgICBtYXJnaW5MZWZ0OiAnYXV0bydcbiAgICAgIH07XG4gICAgfVxuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKSB7XG4gICAgICBzdHlsZSA9IHtcbiAgICAgICAgbWFyZ2luTGVmdDogdmFsdWUgPT09IDAgPyAnMHB4JyA6IGBjYWxjKDEwMCUgKiAke3ZhbHVlfSAvICR7Z2V0UGFyZW50Q29sdW1ucyhvd25lclN0YXRlKX0pYFxuICAgICAgfTtcbiAgICB9XG4gICAgYXBwZW5kU3R5bGUoc3R5bGVzLCBzdHlsZSk7XG4gIH0pO1xuICByZXR1cm4gc3R5bGVzO1xufTtcbmV4cG9ydCBjb25zdCBnZW5lcmF0ZUdyaWRDb2x1bW5zU3R5bGVzID0gKHtcbiAgdGhlbWUsXG4gIG93bmVyU3RhdGVcbn0pID0+IHtcbiAgaWYgKCFvd25lclN0YXRlLmNvbnRhaW5lcikge1xuICAgIHJldHVybiB7fTtcbiAgfVxuICBjb25zdCBzdHlsZXMgPSBpc05lc3RlZENvbnRhaW5lcihvd25lclN0YXRlKSA/IHtcbiAgICBbYC0tR3JpZC1jb2x1bW5zJHthcHBlbmRMZXZlbChvd25lclN0YXRlLnVuc3RhYmxlX2xldmVsKX1gXTogZ2V0UGFyZW50Q29sdW1ucyhvd25lclN0YXRlKVxuICB9IDoge1xuICAgICctLUdyaWQtY29sdW1ucyc6IDEyXG4gIH07XG4gIHRyYXZlcnNlQnJlYWtwb2ludHModGhlbWUuYnJlYWtwb2ludHMsIG93bmVyU3RhdGUuY29sdW1ucywgKGFwcGVuZFN0eWxlLCB2YWx1ZSkgPT4ge1xuICAgIGFwcGVuZFN0eWxlKHN0eWxlcywge1xuICAgICAgW2AtLUdyaWQtY29sdW1ucyR7YXBwZW5kTGV2ZWwob3duZXJTdGF0ZS51bnN0YWJsZV9sZXZlbCl9YF06IHZhbHVlXG4gICAgfSk7XG4gIH0pO1xuICByZXR1cm4gc3R5bGVzO1xufTtcbmV4cG9ydCBjb25zdCBnZW5lcmF0ZUdyaWRSb3dTcGFjaW5nU3R5bGVzID0gKHtcbiAgdGhlbWUsXG4gIG93bmVyU3RhdGVcbn0pID0+IHtcbiAgaWYgKCFvd25lclN0YXRlLmNvbnRhaW5lcikge1xuICAgIHJldHVybiB7fTtcbiAgfVxuICBjb25zdCBnZXRQYXJlbnRTcGFjaW5nID0gY3JlYXRlR2V0UGFyZW50U3BhY2luZyhvd25lclN0YXRlKTtcbiAgY29uc3Qgc3R5bGVzID0gaXNOZXN0ZWRDb250YWluZXIob3duZXJTdGF0ZSkgPyB7XG4gICAgLy8gU2V0IHRoZSBkZWZhdWx0IHNwYWNpbmcgYXMgaXRzIHBhcmVudCBzcGFjaW5nLlxuICAgIC8vIEl0IHdpbGwgYmUgb3ZlcnJpZGRlbiBpZiBzcGFjaW5nIHByb3BzIGFyZSBwcm92aWRlZFxuICAgIFtgLS1HcmlkLXJvd1NwYWNpbmcke2FwcGVuZExldmVsKG93bmVyU3RhdGUudW5zdGFibGVfbGV2ZWwpfWBdOiBnZXRQYXJlbnRTcGFjaW5nKCdyb3cnKVxuICB9IDoge307XG4gIHRyYXZlcnNlQnJlYWtwb2ludHModGhlbWUuYnJlYWtwb2ludHMsIG93bmVyU3RhdGUucm93U3BhY2luZywgKGFwcGVuZFN0eWxlLCB2YWx1ZSkgPT4ge1xuICAgIHZhciBfdGhlbWUkc3BhY2luZztcbiAgICBhcHBlbmRTdHlsZShzdHlsZXMsIHtcbiAgICAgIFtgLS1HcmlkLXJvd1NwYWNpbmcke2FwcGVuZExldmVsKG93bmVyU3RhdGUudW5zdGFibGVfbGV2ZWwpfWBdOiB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnID8gdmFsdWUgOiAoX3RoZW1lJHNwYWNpbmcgPSB0aGVtZS5zcGFjaW5nKSA9PSBudWxsID8gdm9pZCAwIDogX3RoZW1lJHNwYWNpbmcuY2FsbCh0aGVtZSwgdmFsdWUpXG4gICAgfSk7XG4gIH0pO1xuICByZXR1cm4gc3R5bGVzO1xufTtcbmV4cG9ydCBjb25zdCBnZW5lcmF0ZUdyaWRDb2x1bW5TcGFjaW5nU3R5bGVzID0gKHtcbiAgdGhlbWUsXG4gIG93bmVyU3RhdGVcbn0pID0+IHtcbiAgaWYgKCFvd25lclN0YXRlLmNvbnRhaW5lcikge1xuICAgIHJldHVybiB7fTtcbiAgfVxuICBjb25zdCBnZXRQYXJlbnRTcGFjaW5nID0gY3JlYXRlR2V0UGFyZW50U3BhY2luZyhvd25lclN0YXRlKTtcbiAgY29uc3Qgc3R5bGVzID0gaXNOZXN0ZWRDb250YWluZXIob3duZXJTdGF0ZSkgPyB7XG4gICAgLy8gU2V0IHRoZSBkZWZhdWx0IHNwYWNpbmcgYXMgaXRzIHBhcmVudCBzcGFjaW5nLlxuICAgIC8vIEl0IHdpbGwgYmUgb3ZlcnJpZGRlbiBpZiBzcGFjaW5nIHByb3BzIGFyZSBwcm92aWRlZFxuICAgIFtgLS1HcmlkLWNvbHVtblNwYWNpbmcke2FwcGVuZExldmVsKG93bmVyU3RhdGUudW5zdGFibGVfbGV2ZWwpfWBdOiBnZXRQYXJlbnRTcGFjaW5nKCdjb2x1bW4nKVxuICB9IDoge307XG4gIHRyYXZlcnNlQnJlYWtwb2ludHModGhlbWUuYnJlYWtwb2ludHMsIG93bmVyU3RhdGUuY29sdW1uU3BhY2luZywgKGFwcGVuZFN0eWxlLCB2YWx1ZSkgPT4ge1xuICAgIHZhciBfdGhlbWUkc3BhY2luZzI7XG4gICAgYXBwZW5kU3R5bGUoc3R5bGVzLCB7XG4gICAgICBbYC0tR3JpZC1jb2x1bW5TcGFjaW5nJHthcHBlbmRMZXZlbChvd25lclN0YXRlLnVuc3RhYmxlX2xldmVsKX1gXTogdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyA/IHZhbHVlIDogKF90aGVtZSRzcGFjaW5nMiA9IHRoZW1lLnNwYWNpbmcpID09IG51bGwgPyB2b2lkIDAgOiBfdGhlbWUkc3BhY2luZzIuY2FsbCh0aGVtZSwgdmFsdWUpXG4gICAgfSk7XG4gIH0pO1xuICByZXR1cm4gc3R5bGVzO1xufTtcbmV4cG9ydCBjb25zdCBnZW5lcmF0ZUdyaWREaXJlY3Rpb25TdHlsZXMgPSAoe1xuICB0aGVtZSxcbiAgb3duZXJTdGF0ZVxufSkgPT4ge1xuICBpZiAoIW93bmVyU3RhdGUuY29udGFpbmVyKSB7XG4gICAgcmV0dXJuIHt9O1xuICB9XG4gIGNvbnN0IHN0eWxlcyA9IHt9O1xuICB0cmF2ZXJzZUJyZWFrcG9pbnRzKHRoZW1lLmJyZWFrcG9pbnRzLCBvd25lclN0YXRlLmRpcmVjdGlvbiwgKGFwcGVuZFN0eWxlLCB2YWx1ZSkgPT4ge1xuICAgIGFwcGVuZFN0eWxlKHN0eWxlcywge1xuICAgICAgZmxleERpcmVjdGlvbjogdmFsdWVcbiAgICB9KTtcbiAgfSk7XG4gIHJldHVybiBzdHlsZXM7XG59O1xuZXhwb3J0IGNvbnN0IGdlbmVyYXRlR3JpZFN0eWxlcyA9ICh7XG4gIG93bmVyU3RhdGVcbn0pID0+IHtcbiAgY29uc3QgZ2V0U2VsZlNwYWNpbmcgPSBjcmVhdGVHZXRTZWxmU3BhY2luZyhvd25lclN0YXRlKTtcbiAgY29uc3QgZ2V0UGFyZW50U3BhY2luZyA9IGNyZWF0ZUdldFBhcmVudFNwYWNpbmcob3duZXJTdGF0ZSk7XG4gIHJldHVybiBfZXh0ZW5kcyh7XG4gICAgbWluV2lkdGg6IDAsXG4gICAgYm94U2l6aW5nOiAnYm9yZGVyLWJveCdcbiAgfSwgb3duZXJTdGF0ZS5jb250YWluZXIgJiYgX2V4dGVuZHMoe1xuICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICBmbGV4V3JhcDogJ3dyYXAnXG4gIH0sIG93bmVyU3RhdGUud3JhcCAmJiBvd25lclN0YXRlLndyYXAgIT09ICd3cmFwJyAmJiB7XG4gICAgZmxleFdyYXA6IG93bmVyU3RhdGUud3JhcFxuICB9LCB7XG4gICAgbWFyZ2luOiBgY2FsYygke2dldFNlbGZTcGFjaW5nKCdyb3cnKX0gLyAtMikgY2FsYygke2dldFNlbGZTcGFjaW5nKCdjb2x1bW4nKX0gLyAtMilgXG4gIH0sIG93bmVyU3RhdGUuZGlzYWJsZUVxdWFsT3ZlcmZsb3cgJiYge1xuICAgIG1hcmdpbjogYGNhbGMoJHtnZXRTZWxmU3BhY2luZygncm93Jyl9ICogLTEpIDBweCAwcHggY2FsYygke2dldFNlbGZTcGFjaW5nKCdjb2x1bW4nKX0gKiAtMSlgXG4gIH0pLCAoIW93bmVyU3RhdGUuY29udGFpbmVyIHx8IGlzTmVzdGVkQ29udGFpbmVyKG93bmVyU3RhdGUpKSAmJiBfZXh0ZW5kcyh7XG4gICAgcGFkZGluZzogYGNhbGMoJHtnZXRQYXJlbnRTcGFjaW5nKCdyb3cnKX0gLyAyKSBjYWxjKCR7Z2V0UGFyZW50U3BhY2luZygnY29sdW1uJyl9IC8gMilgXG4gIH0sIChvd25lclN0YXRlLmRpc2FibGVFcXVhbE92ZXJmbG93IHx8IG93bmVyU3RhdGUucGFyZW50RGlzYWJsZUVxdWFsT3ZlcmZsb3cpICYmIHtcbiAgICBwYWRkaW5nOiBgJHtnZXRQYXJlbnRTcGFjaW5nKCdyb3cnKX0gMHB4IDBweCAke2dldFBhcmVudFNwYWNpbmcoJ2NvbHVtbicpfWBcbiAgfSkpO1xufTtcbmV4cG9ydCBjb25zdCBnZW5lcmF0ZVNpemVDbGFzc05hbWVzID0gZ3JpZFNpemUgPT4ge1xuICBjb25zdCBjbGFzc05hbWVzID0gW107XG4gIE9iamVjdC5lbnRyaWVzKGdyaWRTaXplKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICBpZiAodmFsdWUgIT09IGZhbHNlICYmIHZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGNsYXNzTmFtZXMucHVzaChgZ3JpZC0ke2tleX0tJHtTdHJpbmcodmFsdWUpfWApO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBjbGFzc05hbWVzO1xufTtcbmV4cG9ydCBjb25zdCBnZW5lcmF0ZVNwYWNpbmdDbGFzc05hbWVzID0gKHNwYWNpbmcsIHNtYWxsZXN0QnJlYWtwb2ludCA9ICd4cycpID0+IHtcbiAgZnVuY3Rpb24gaXNWYWxpZFNwYWNpbmcodmFsKSB7XG4gICAgaWYgKHZhbCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0eXBlb2YgdmFsID09PSAnc3RyaW5nJyAmJiAhTnVtYmVyLmlzTmFOKE51bWJlcih2YWwpKSB8fCB0eXBlb2YgdmFsID09PSAnbnVtYmVyJyAmJiB2YWwgPiAwO1xuICB9XG4gIGlmIChpc1ZhbGlkU3BhY2luZyhzcGFjaW5nKSkge1xuICAgIHJldHVybiBbYHNwYWNpbmctJHtzbWFsbGVzdEJyZWFrcG9pbnR9LSR7U3RyaW5nKHNwYWNpbmcpfWBdO1xuICB9XG4gIGlmICh0eXBlb2Ygc3BhY2luZyA9PT0gJ29iamVjdCcgJiYgIUFycmF5LmlzQXJyYXkoc3BhY2luZykpIHtcbiAgICBjb25zdCBjbGFzc05hbWVzID0gW107XG4gICAgT2JqZWN0LmVudHJpZXMoc3BhY2luZykuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICBpZiAoaXNWYWxpZFNwYWNpbmcodmFsdWUpKSB7XG4gICAgICAgIGNsYXNzTmFtZXMucHVzaChgc3BhY2luZy0ke2tleX0tJHtTdHJpbmcodmFsdWUpfWApO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBjbGFzc05hbWVzO1xuICB9XG4gIHJldHVybiBbXTtcbn07XG5leHBvcnQgY29uc3QgZ2VuZXJhdGVEaXJlY3Rpb25DbGFzc2VzID0gZGlyZWN0aW9uID0+IHtcbiAgaWYgKGRpcmVjdGlvbiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG4gIGlmICh0eXBlb2YgZGlyZWN0aW9uID09PSAnb2JqZWN0Jykge1xuICAgIHJldHVybiBPYmplY3QuZW50cmllcyhkaXJlY3Rpb24pLm1hcCgoW2tleSwgdmFsdWVdKSA9PiBgZGlyZWN0aW9uLSR7a2V5fS0ke3ZhbHVlfWApO1xuICB9XG4gIHJldHVybiBbYGRpcmVjdGlvbi14cy0ke1N0cmluZyhkaXJlY3Rpb24pfWBdO1xufTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiY2xhc3NOYW1lXCIsIFwiY2hpbGRyZW5cIiwgXCJjb2x1bW5zXCIsIFwiY29udGFpbmVyXCIsIFwiY29tcG9uZW50XCIsIFwiZGlyZWN0aW9uXCIsIFwid3JhcFwiLCBcInNwYWNpbmdcIiwgXCJyb3dTcGFjaW5nXCIsIFwiY29sdW1uU3BhY2luZ1wiLCBcImRpc2FibGVFcXVhbE92ZXJmbG93XCIsIFwidW5zdGFibGVfbGV2ZWxcIl07XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgaXNNdWlFbGVtZW50IGZyb20gJ0BtdWkvdXRpbHMvaXNNdWlFbGVtZW50JztcbmltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzJztcbmltcG9ydCBjb21wb3NlQ2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2NvbXBvc2VDbGFzc2VzJztcbmltcG9ydCBzeXN0ZW1TdHlsZWQgZnJvbSAnLi4vc3R5bGVkJztcbmltcG9ydCB1c2VUaGVtZVByb3BzU3lzdGVtIGZyb20gJy4uL3VzZVRoZW1lUHJvcHMnO1xuaW1wb3J0IHVzZVRoZW1lIGZyb20gJy4uL3VzZVRoZW1lJztcbmltcG9ydCB7IGV4dGVuZFN4UHJvcCB9IGZyb20gJy4uL3N0eWxlRnVuY3Rpb25TeCc7XG5pbXBvcnQgY3JlYXRlVGhlbWUgZnJvbSAnLi4vY3JlYXRlVGhlbWUnO1xuaW1wb3J0IHsgZ2VuZXJhdGVHcmlkU3R5bGVzLCBnZW5lcmF0ZUdyaWRTaXplU3R5bGVzLCBnZW5lcmF0ZUdyaWRDb2x1bW5zU3R5bGVzLCBnZW5lcmF0ZUdyaWRDb2x1bW5TcGFjaW5nU3R5bGVzLCBnZW5lcmF0ZUdyaWRSb3dTcGFjaW5nU3R5bGVzLCBnZW5lcmF0ZUdyaWREaXJlY3Rpb25TdHlsZXMsIGdlbmVyYXRlR3JpZE9mZnNldFN0eWxlcywgZ2VuZXJhdGVTaXplQ2xhc3NOYW1lcywgZ2VuZXJhdGVTcGFjaW5nQ2xhc3NOYW1lcywgZ2VuZXJhdGVEaXJlY3Rpb25DbGFzc2VzIH0gZnJvbSAnLi9ncmlkR2VuZXJhdG9yJztcbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5jb25zdCBkZWZhdWx0VGhlbWUgPSBjcmVhdGVUaGVtZSgpO1xuXG4vLyB3aWRlbmluZyBUaGVtZSB0byBhbnkgc28gdGhhdCB0aGUgY29uc3VtZXIgY2FuIG93biB0aGUgdGhlbWUgc3RydWN0dXJlLlxuY29uc3QgZGVmYXVsdENyZWF0ZVN0eWxlZENvbXBvbmVudCA9IHN5c3RlbVN0eWxlZCgnZGl2Jywge1xuICBuYW1lOiAnTXVpR3JpZCcsXG4gIHNsb3Q6ICdSb290JyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiBzdHlsZXMucm9vdFxufSk7XG5mdW5jdGlvbiB1c2VUaGVtZVByb3BzRGVmYXVsdChwcm9wcykge1xuICByZXR1cm4gdXNlVGhlbWVQcm9wc1N5c3RlbSh7XG4gICAgcHJvcHMsXG4gICAgbmFtZTogJ011aUdyaWQnLFxuICAgIGRlZmF1bHRUaGVtZVxuICB9KTtcbn1cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZUdyaWQob3B0aW9ucyA9IHt9KSB7XG4gIGNvbnN0IHtcbiAgICAvLyBUaGlzIHdpbGwgYWxsb3cgYWRkaW5nIGN1c3RvbSBzdHlsZWQgZm4gKGZvciBleGFtcGxlIGZvciBjdXN0b20gc3ggc3R5bGUgZnVuY3Rpb24pXG4gICAgY3JlYXRlU3R5bGVkQ29tcG9uZW50ID0gZGVmYXVsdENyZWF0ZVN0eWxlZENvbXBvbmVudCxcbiAgICB1c2VUaGVtZVByb3BzID0gdXNlVGhlbWVQcm9wc0RlZmF1bHQsXG4gICAgY29tcG9uZW50TmFtZSA9ICdNdWlHcmlkJ1xuICB9ID0gb3B0aW9ucztcbiAgY29uc3QgR3JpZE92ZXJmbG93Q29udGV4dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVDb250ZXh0KHVuZGVmaW5lZCk7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgR3JpZE92ZXJmbG93Q29udGV4dC5kaXNwbGF5TmFtZSA9ICdHcmlkT3ZlcmZsb3dDb250ZXh0JztcbiAgfVxuICBjb25zdCB1c2VVdGlsaXR5Q2xhc3NlcyA9IChvd25lclN0YXRlLCB0aGVtZSkgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIGNvbnRhaW5lcixcbiAgICAgIGRpcmVjdGlvbixcbiAgICAgIHNwYWNpbmcsXG4gICAgICB3cmFwLFxuICAgICAgZ3JpZFNpemVcbiAgICB9ID0gb3duZXJTdGF0ZTtcbiAgICBjb25zdCBzbG90cyA9IHtcbiAgICAgIHJvb3Q6IFsncm9vdCcsIGNvbnRhaW5lciAmJiAnY29udGFpbmVyJywgd3JhcCAhPT0gJ3dyYXAnICYmIGB3cmFwLXhzLSR7U3RyaW5nKHdyYXApfWAsIC4uLmdlbmVyYXRlRGlyZWN0aW9uQ2xhc3NlcyhkaXJlY3Rpb24pLCAuLi5nZW5lcmF0ZVNpemVDbGFzc05hbWVzKGdyaWRTaXplKSwgLi4uKGNvbnRhaW5lciA/IGdlbmVyYXRlU3BhY2luZ0NsYXNzTmFtZXMoc3BhY2luZywgdGhlbWUuYnJlYWtwb2ludHMua2V5c1swXSkgOiBbXSldXG4gICAgfTtcbiAgICByZXR1cm4gY29tcG9zZUNsYXNzZXMoc2xvdHMsIHNsb3QgPT4gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoY29tcG9uZW50TmFtZSwgc2xvdCksIHt9KTtcbiAgfTtcbiAgY29uc3QgR3JpZFJvb3QgPSBjcmVhdGVTdHlsZWRDb21wb25lbnQoZ2VuZXJhdGVHcmlkQ29sdW1uc1N0eWxlcywgZ2VuZXJhdGVHcmlkQ29sdW1uU3BhY2luZ1N0eWxlcywgZ2VuZXJhdGVHcmlkUm93U3BhY2luZ1N0eWxlcywgZ2VuZXJhdGVHcmlkU2l6ZVN0eWxlcywgZ2VuZXJhdGVHcmlkRGlyZWN0aW9uU3R5bGVzLCBnZW5lcmF0ZUdyaWRTdHlsZXMsIGdlbmVyYXRlR3JpZE9mZnNldFN0eWxlcyk7XG4gIGNvbnN0IEdyaWQgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBHcmlkKGluUHJvcHMsIHJlZikge1xuICAgIHZhciBfaW5Qcm9wcyRjb2x1bW5zLCBfaW5Qcm9wcyRzcGFjaW5nLCBfcmVmLCBfaW5Qcm9wcyRyb3dTcGFjaW5nLCBfcmVmMiwgX2luUHJvcHMkY29sdW1uU3BhY2luLCBfcmVmMywgX2Rpc2FibGVFcXVhbE92ZXJmbG93O1xuICAgIGNvbnN0IHRoZW1lID0gdXNlVGhlbWUoKTtcbiAgICBjb25zdCB0aGVtZVByb3BzID0gdXNlVGhlbWVQcm9wcyhpblByb3BzKTtcbiAgICBjb25zdCBwcm9wcyA9IGV4dGVuZFN4UHJvcCh0aGVtZVByb3BzKTsgLy8gYGNvbG9yYCB0eXBlIGNvbmZsaWN0cyB3aXRoIGh0bWwgY29sb3IgYXR0cmlidXRlLlxuICAgIGNvbnN0IG92ZXJmbG93ID0gUmVhY3QudXNlQ29udGV4dChHcmlkT3ZlcmZsb3dDb250ZXh0KTtcbiAgICBjb25zdCB7XG4gICAgICAgIGNsYXNzTmFtZSxcbiAgICAgICAgY2hpbGRyZW4sXG4gICAgICAgIGNvbHVtbnM6IGNvbHVtbnNQcm9wID0gMTIsXG4gICAgICAgIGNvbnRhaW5lciA9IGZhbHNlLFxuICAgICAgICBjb21wb25lbnQgPSAnZGl2JyxcbiAgICAgICAgZGlyZWN0aW9uID0gJ3JvdycsXG4gICAgICAgIHdyYXAgPSAnd3JhcCcsXG4gICAgICAgIHNwYWNpbmc6IHNwYWNpbmdQcm9wID0gMCxcbiAgICAgICAgcm93U3BhY2luZzogcm93U3BhY2luZ1Byb3AgPSBzcGFjaW5nUHJvcCxcbiAgICAgICAgY29sdW1uU3BhY2luZzogY29sdW1uU3BhY2luZ1Byb3AgPSBzcGFjaW5nUHJvcCxcbiAgICAgICAgZGlzYWJsZUVxdWFsT3ZlcmZsb3c6IHRoZW1lRGlzYWJsZUVxdWFsT3ZlcmZsb3csXG4gICAgICAgIHVuc3RhYmxlX2xldmVsOiBsZXZlbCA9IDBcbiAgICAgIH0gPSBwcm9wcyxcbiAgICAgIHJlc3QgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkKTtcbiAgICAvLyBCZWNhdXNlIGBkaXNhYmxlRXF1YWxPdmVyZmxvd2AgY2FuIGJlIHNldCBmcm9tIHRoZSB0aGVtZSdzIGRlZmF1bHRQcm9wcywgdGhlICoqbmVzdGVkKiogZ3JpZCBzaG91bGQgbG9vayBhdCB0aGUgaW5zdGFuY2UgcHJvcHMgaW5zdGVhZC5cbiAgICBsZXQgZGlzYWJsZUVxdWFsT3ZlcmZsb3cgPSB0aGVtZURpc2FibGVFcXVhbE92ZXJmbG93O1xuICAgIGlmIChsZXZlbCAmJiB0aGVtZURpc2FibGVFcXVhbE92ZXJmbG93ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGRpc2FibGVFcXVhbE92ZXJmbG93ID0gaW5Qcm9wcy5kaXNhYmxlRXF1YWxPdmVyZmxvdztcbiAgICB9XG4gICAgLy8gY29sbGVjdCBicmVha3BvaW50cyByZWxhdGVkIHByb3BzIGJlY2F1c2UgdGhleSBjYW4gYmUgY3VzdG9taXplZCBmcm9tIHRoZSB0aGVtZS5cbiAgICBjb25zdCBncmlkU2l6ZSA9IHt9O1xuICAgIGNvbnN0IGdyaWRPZmZzZXQgPSB7fTtcbiAgICBjb25zdCBvdGhlciA9IHt9O1xuICAgIE9iamVjdC5lbnRyaWVzKHJlc3QpLmZvckVhY2goKFtrZXksIHZhbF0pID0+IHtcbiAgICAgIGlmICh0aGVtZS5icmVha3BvaW50cy52YWx1ZXNba2V5XSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGdyaWRTaXplW2tleV0gPSB2YWw7XG4gICAgICB9IGVsc2UgaWYgKHRoZW1lLmJyZWFrcG9pbnRzLnZhbHVlc1trZXkucmVwbGFjZSgnT2Zmc2V0JywgJycpXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGdyaWRPZmZzZXRba2V5LnJlcGxhY2UoJ09mZnNldCcsICcnKV0gPSB2YWw7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvdGhlcltrZXldID0gdmFsO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGNvbnN0IGNvbHVtbnMgPSAoX2luUHJvcHMkY29sdW1ucyA9IGluUHJvcHMuY29sdW1ucykgIT0gbnVsbCA/IF9pblByb3BzJGNvbHVtbnMgOiBsZXZlbCA/IHVuZGVmaW5lZCA6IGNvbHVtbnNQcm9wO1xuICAgIGNvbnN0IHNwYWNpbmcgPSAoX2luUHJvcHMkc3BhY2luZyA9IGluUHJvcHMuc3BhY2luZykgIT0gbnVsbCA/IF9pblByb3BzJHNwYWNpbmcgOiBsZXZlbCA/IHVuZGVmaW5lZCA6IHNwYWNpbmdQcm9wO1xuICAgIGNvbnN0IHJvd1NwYWNpbmcgPSAoX3JlZiA9IChfaW5Qcm9wcyRyb3dTcGFjaW5nID0gaW5Qcm9wcy5yb3dTcGFjaW5nKSAhPSBudWxsID8gX2luUHJvcHMkcm93U3BhY2luZyA6IGluUHJvcHMuc3BhY2luZykgIT0gbnVsbCA/IF9yZWYgOiBsZXZlbCA/IHVuZGVmaW5lZCA6IHJvd1NwYWNpbmdQcm9wO1xuICAgIGNvbnN0IGNvbHVtblNwYWNpbmcgPSAoX3JlZjIgPSAoX2luUHJvcHMkY29sdW1uU3BhY2luID0gaW5Qcm9wcy5jb2x1bW5TcGFjaW5nKSAhPSBudWxsID8gX2luUHJvcHMkY29sdW1uU3BhY2luIDogaW5Qcm9wcy5zcGFjaW5nKSAhPSBudWxsID8gX3JlZjIgOiBsZXZlbCA/IHVuZGVmaW5lZCA6IGNvbHVtblNwYWNpbmdQcm9wO1xuICAgIGNvbnN0IG93bmVyU3RhdGUgPSBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICAgIGxldmVsLFxuICAgICAgY29sdW1ucyxcbiAgICAgIGNvbnRhaW5lcixcbiAgICAgIGRpcmVjdGlvbixcbiAgICAgIHdyYXAsXG4gICAgICBzcGFjaW5nLFxuICAgICAgcm93U3BhY2luZyxcbiAgICAgIGNvbHVtblNwYWNpbmcsXG4gICAgICBncmlkU2l6ZSxcbiAgICAgIGdyaWRPZmZzZXQsXG4gICAgICBkaXNhYmxlRXF1YWxPdmVyZmxvdzogKF9yZWYzID0gKF9kaXNhYmxlRXF1YWxPdmVyZmxvdyA9IGRpc2FibGVFcXVhbE92ZXJmbG93KSAhPSBudWxsID8gX2Rpc2FibGVFcXVhbE92ZXJmbG93IDogb3ZlcmZsb3cpICE9IG51bGwgPyBfcmVmMyA6IGZhbHNlLFxuICAgICAgLy8gdXNlIGNvbnRleHQgdmFsdWUgaWYgZXhpc3RzLlxuICAgICAgcGFyZW50RGlzYWJsZUVxdWFsT3ZlcmZsb3c6IG92ZXJmbG93IC8vIGZvciBuZXN0ZWQgZ3JpZFxuICAgIH0pO1xuICAgIGNvbnN0IGNsYXNzZXMgPSB1c2VVdGlsaXR5Q2xhc3Nlcyhvd25lclN0YXRlLCB0aGVtZSk7XG4gICAgbGV0IHJlc3VsdCA9IC8qI19fUFVSRV9fKi9fanN4KEdyaWRSb290LCBfZXh0ZW5kcyh7XG4gICAgICByZWY6IHJlZixcbiAgICAgIGFzOiBjb21wb25lbnQsXG4gICAgICBvd25lclN0YXRlOiBvd25lclN0YXRlLFxuICAgICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lKVxuICAgIH0sIG90aGVyLCB7XG4gICAgICBjaGlsZHJlbjogUmVhY3QuQ2hpbGRyZW4ubWFwKGNoaWxkcmVuLCBjaGlsZCA9PiB7XG4gICAgICAgIGlmICggLyojX19QVVJFX18qL1JlYWN0LmlzVmFsaWRFbGVtZW50KGNoaWxkKSAmJiBpc011aUVsZW1lbnQoY2hpbGQsIFsnR3JpZCddKSkge1xuICAgICAgICAgIHZhciBfY2hpbGQkcHJvcHMkdW5zdGFibGU7XG4gICAgICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jbG9uZUVsZW1lbnQoY2hpbGQsIHtcbiAgICAgICAgICAgIHVuc3RhYmxlX2xldmVsOiAoX2NoaWxkJHByb3BzJHVuc3RhYmxlID0gY2hpbGQucHJvcHMudW5zdGFibGVfbGV2ZWwpICE9IG51bGwgPyBfY2hpbGQkcHJvcHMkdW5zdGFibGUgOiBsZXZlbCArIDFcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY2hpbGQ7XG4gICAgICB9KVxuICAgIH0pKTtcbiAgICBpZiAoZGlzYWJsZUVxdWFsT3ZlcmZsb3cgIT09IHVuZGVmaW5lZCAmJiBkaXNhYmxlRXF1YWxPdmVyZmxvdyAhPT0gKG92ZXJmbG93ICE9IG51bGwgPyBvdmVyZmxvdyA6IGZhbHNlKSkge1xuICAgICAgLy8gVGhlcmUgYXJlIDIgcG9zc2liaWxpdGllcyB0aGF0IHNob3VsZCB3cmFwIHdpdGggdGhlIEdyaWRPdmVyZmxvd0NvbnRleHQgdG8gY29tbXVuaWNhdGUgd2l0aCB0aGUgbmVzdGVkIGdyaWRzOlxuICAgICAgLy8gMS4gSXQgaXMgdGhlIHJvb3QgZ3JpZCB3aXRoIGBkaXNhYmxlRXF1YWxPdmVyZmxvd2AuXG4gICAgICAvLyAyLiBJdCBpcyBhIG5lc3RlZCBncmlkIHdpdGggZGlmZmVyZW50IGBkaXNhYmxlRXF1YWxPdmVyZmxvd2AgZnJvbSB0aGUgY29udGV4dC5cbiAgICAgIHJlc3VsdCA9IC8qI19fUFVSRV9fKi9fanN4KEdyaWRPdmVyZmxvd0NvbnRleHQuUHJvdmlkZXIsIHtcbiAgICAgICAgdmFsdWU6IGRpc2FibGVFcXVhbE92ZXJmbG93LFxuICAgICAgICBjaGlsZHJlbjogcmVzdWx0XG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfSk7XG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IEdyaWQucHJvcFR5cGVzIC8qIHJlbW92ZS1wcm9wdHlwZXMgKi8gPSB7XG4gICAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAgIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBjb2x1bW5zOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMubnVtYmVyKSwgUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLm9iamVjdF0pLFxuICAgIGNvbHVtblNwYWNpbmc6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zdHJpbmddKSksIFByb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5zdHJpbmddKSxcbiAgICBjb21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcbiAgICBjb250YWluZXI6IFByb3BUeXBlcy5ib29sLFxuICAgIGRpcmVjdGlvbjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsnY29sdW1uLXJldmVyc2UnLCAnY29sdW1uJywgJ3Jvdy1yZXZlcnNlJywgJ3JvdyddKSwgUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mKFsnY29sdW1uLXJldmVyc2UnLCAnY29sdW1uJywgJ3Jvdy1yZXZlcnNlJywgJ3JvdyddKSksIFByb3BUeXBlcy5vYmplY3RdKSxcbiAgICBkaXNhYmxlRXF1YWxPdmVyZmxvdzogUHJvcFR5cGVzLmJvb2wsXG4gICAgbGc6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ2F1dG8nXSksIFByb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5ib29sXSksXG4gICAgbGdPZmZzZXQ6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ2F1dG8nXSksIFByb3BUeXBlcy5udW1iZXJdKSxcbiAgICBtZDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsnYXV0byddKSwgUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLmJvb2xdKSxcbiAgICBtZE9mZnNldDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsnYXV0byddKSwgUHJvcFR5cGVzLm51bWJlcl0pLFxuICAgIHJvd1NwYWNpbmc6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zdHJpbmddKSksIFByb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5zdHJpbmddKSxcbiAgICBzbTogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsnYXV0byddKSwgUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLmJvb2xdKSxcbiAgICBzbU9mZnNldDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsnYXV0byddKSwgUHJvcFR5cGVzLm51bWJlcl0pLFxuICAgIHNwYWNpbmc6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zdHJpbmddKSksIFByb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5zdHJpbmddKSxcbiAgICBzeDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5ib29sXSkpLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pLFxuICAgIHdyYXA6IFByb3BUeXBlcy5vbmVPZihbJ25vd3JhcCcsICd3cmFwLXJldmVyc2UnLCAnd3JhcCddKSxcbiAgICB4bDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsnYXV0byddKSwgUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLmJvb2xdKSxcbiAgICB4bE9mZnNldDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsnYXV0byddKSwgUHJvcFR5cGVzLm51bWJlcl0pLFxuICAgIHhzOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydhdXRvJ10pLCBQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuYm9vbF0pLFxuICAgIHhzT2Zmc2V0OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydhdXRvJ10pLCBQcm9wVHlwZXMubnVtYmVyXSlcbiAgfSA6IHZvaWQgMDtcblxuICAvLyBAdHMtaWdub3JlIGludGVybmFsIGxvZ2ljIGZvciBuZXN0ZWQgZ3JpZFxuICBHcmlkLm11aU5hbWUgPSAnR3JpZCc7XG4gIHJldHVybiBHcmlkO1xufSIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IGNyZWF0ZUdyaWQgYXMgY3JlYXRlR3JpZDIgfSBmcm9tICdAbXVpL3N5c3RlbS9VbnN0YWJsZV9HcmlkJztcbmltcG9ydCB7IHN0eWxlZCB9IGZyb20gJy4uL3N0eWxlcyc7XG5pbXBvcnQgeyB1c2VEZWZhdWx0UHJvcHMgfSBmcm9tICcuLi9EZWZhdWx0UHJvcHNQcm92aWRlcic7XG5jb25zdCBHcmlkMiA9IGNyZWF0ZUdyaWQyKHtcbiAgY3JlYXRlU3R5bGVkQ29tcG9uZW50OiBzdHlsZWQoJ2RpdicsIHtcbiAgICBuYW1lOiAnTXVpR3JpZDInLFxuICAgIHNsb3Q6ICdSb290JyxcbiAgICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHN0eWxlcy5yb290XG4gIH0pLFxuICBjb21wb25lbnROYW1lOiAnTXVpR3JpZDInLFxuICB1c2VUaGVtZVByb3BzOiBpblByb3BzID0+IHVzZURlZmF1bHRQcm9wcyh7XG4gICAgcHJvcHM6IGluUHJvcHMsXG4gICAgbmFtZTogJ011aUdyaWQyJ1xuICB9KVxufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBHcmlkMi5wcm9wVHlwZXMgLyogcmVtb3ZlLXByb3B0eXBlcyAqLyA9IHtcbiAgLy8g4pSM4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAIFdhcm5pbmcg4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSQXG4gIC8vIOKUgiBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMuIOKUglxuICAvLyDilIIgVG8gdXBkYXRlIHRoZW0sIGVkaXQgdGhlIFR5cGVTY3JpcHQgdHlwZXMgYW5kIHJ1biBgcG5wbSBwcm9wdHlwZXNgLiDilIJcbiAgLy8g4pSU4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSYXG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgc3g6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuYm9vbF0pKSwgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IEdyaWQyOyIsImltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3Nlcyc7XG5pbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3MgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzcyc7XG5leHBvcnQgZnVuY3Rpb24gZ2V0R3JpZDJVdGlsaXR5Q2xhc3Moc2xvdCkge1xuICByZXR1cm4gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoJ011aUdyaWQyJywgc2xvdCk7XG59XG5jb25zdCBTUEFDSU5HUyA9IFswLCAxLCAyLCAzLCA0LCA1LCA2LCA3LCA4LCA5LCAxMF07XG5jb25zdCBESVJFQ1RJT05TID0gWydjb2x1bW4tcmV2ZXJzZScsICdjb2x1bW4nLCAncm93LXJldmVyc2UnLCAncm93J107XG5jb25zdCBXUkFQUyA9IFsnbm93cmFwJywgJ3dyYXAtcmV2ZXJzZScsICd3cmFwJ107XG5jb25zdCBHUklEX1NJWkVTID0gWydhdXRvJywgdHJ1ZSwgMSwgMiwgMywgNCwgNSwgNiwgNywgOCwgOSwgMTAsIDExLCAxMl07XG5jb25zdCBncmlkMkNsYXNzZXMgPSBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzKCdNdWlHcmlkMicsIFsncm9vdCcsICdjb250YWluZXInLCAnaXRlbScsICd6ZXJvTWluV2lkdGgnLFxuLy8gc3BhY2luZ3Ncbi4uLlNQQUNJTkdTLm1hcChzcGFjaW5nID0+IGBzcGFjaW5nLXhzLSR7c3BhY2luZ31gKSxcbi8vIGRpcmVjdGlvbiB2YWx1ZXNcbi4uLkRJUkVDVElPTlMubWFwKGRpcmVjdGlvbiA9PiBgZGlyZWN0aW9uLXhzLSR7ZGlyZWN0aW9ufWApLFxuLy8gd3JhcCB2YWx1ZXNcbi4uLldSQVBTLm1hcCh3cmFwID0+IGB3cmFwLXhzLSR7d3JhcH1gKSxcbi8vIGdyaWQgc2l6ZXMgZm9yIGFsbCBicmVha3BvaW50c1xuLi4uR1JJRF9TSVpFUy5tYXAoc2l6ZSA9PiBgZ3JpZC14cy0ke3NpemV9YCksIC4uLkdSSURfU0laRVMubWFwKHNpemUgPT4gYGdyaWQtc20tJHtzaXplfWApLCAuLi5HUklEX1NJWkVTLm1hcChzaXplID0+IGBncmlkLW1kLSR7c2l6ZX1gKSwgLi4uR1JJRF9TSVpFUy5tYXAoc2l6ZSA9PiBgZ3JpZC1sZy0ke3NpemV9YCksIC4uLkdSSURfU0laRVMubWFwKHNpemUgPT4gYGdyaWQteGwtJHtzaXplfWApXSk7XG5leHBvcnQgZGVmYXVsdCBncmlkMkNsYXNzZXM7IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgdXNlRW5oYW5jZWRFZmZlY3QgZnJvbSAnQG11aS91dGlscy91c2VFbmhhbmNlZEVmZmVjdCc7XG5pbXBvcnQgeyBnZXRUaGVtZVByb3BzIH0gZnJvbSAnLi4vdXNlVGhlbWVQcm9wcyc7XG5pbXBvcnQgdXNlVGhlbWUgZnJvbSAnLi4vdXNlVGhlbWVXaXRob3V0RGVmYXVsdCc7XG5cbi8qKlxuICogQGRlcHJlY2F0ZWQgTm90IHVzZWQgaW50ZXJuYWxseS4gVXNlIGBNZWRpYVF1ZXJ5TGlzdEV2ZW50YCBmcm9tIGxpYi5kb20uZC50cyBpbnN0ZWFkLlxuICovXG5cbi8qKlxuICogQGRlcHJlY2F0ZWQgTm90IHVzZWQgaW50ZXJuYWxseS4gVXNlIGBNZWRpYVF1ZXJ5TGlzdGAgZnJvbSBsaWIuZG9tLmQudHMgaW5zdGVhZC5cbiAqL1xuXG4vKipcbiAqIEBkZXByZWNhdGVkIE5vdCB1c2VkIGludGVybmFsbHkuIFVzZSBgKGV2ZW50OiBNZWRpYVF1ZXJ5TGlzdEV2ZW50KSA9PiB2b2lkYCBpbnN0ZWFkLlxuICovXG5cbmZ1bmN0aW9uIHVzZU1lZGlhUXVlcnlPbGQocXVlcnksIGRlZmF1bHRNYXRjaGVzLCBtYXRjaE1lZGlhLCBzc3JNYXRjaE1lZGlhLCBub1Nzcikge1xuICBjb25zdCBbbWF0Y2gsIHNldE1hdGNoXSA9IFJlYWN0LnVzZVN0YXRlKCgpID0+IHtcbiAgICBpZiAobm9Tc3IgJiYgbWF0Y2hNZWRpYSkge1xuICAgICAgcmV0dXJuIG1hdGNoTWVkaWEocXVlcnkpLm1hdGNoZXM7XG4gICAgfVxuICAgIGlmIChzc3JNYXRjaE1lZGlhKSB7XG4gICAgICByZXR1cm4gc3NyTWF0Y2hNZWRpYShxdWVyeSkubWF0Y2hlcztcbiAgICB9XG5cbiAgICAvLyBPbmNlIHRoZSBjb21wb25lbnQgaXMgbW91bnRlZCwgd2UgcmVseSBvbiB0aGVcbiAgICAvLyBldmVudCBsaXN0ZW5lcnMgdG8gcmV0dXJuIHRoZSBjb3JyZWN0IG1hdGNoZXMgdmFsdWUuXG4gICAgcmV0dXJuIGRlZmF1bHRNYXRjaGVzO1xuICB9KTtcbiAgdXNlRW5oYW5jZWRFZmZlY3QoKCkgPT4ge1xuICAgIGxldCBhY3RpdmUgPSB0cnVlO1xuICAgIGlmICghbWF0Y2hNZWRpYSkge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgY29uc3QgcXVlcnlMaXN0ID0gbWF0Y2hNZWRpYShxdWVyeSk7XG4gICAgY29uc3QgdXBkYXRlTWF0Y2ggPSAoKSA9PiB7XG4gICAgICAvLyBXb3JrYXJvdW5kIFNhZmFyaSB3cm9uZyBpbXBsZW1lbnRhdGlvbiBvZiBtYXRjaE1lZGlhXG4gICAgICAvLyBUT0RPIGNhbiB3ZSByZW1vdmUgaXQ/XG4gICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vbXVpL21hdGVyaWFsLXVpL3B1bGwvMTczMTUjaXNzdWVjb21tZW50LTUyODI4NjY3N1xuICAgICAgaWYgKGFjdGl2ZSkge1xuICAgICAgICBzZXRNYXRjaChxdWVyeUxpc3QubWF0Y2hlcyk7XG4gICAgICB9XG4gICAgfTtcbiAgICB1cGRhdGVNYXRjaCgpO1xuICAgIC8vIFRPRE86IFVzZSBgYWRkRXZlbnRMaXN0ZW5lcmAgb25jZSBzdXBwb3J0IGZvciBTYWZhcmkgPCAxNCBpcyBkcm9wcGVkXG4gICAgcXVlcnlMaXN0LmFkZExpc3RlbmVyKHVwZGF0ZU1hdGNoKTtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgYWN0aXZlID0gZmFsc2U7XG4gICAgICBxdWVyeUxpc3QucmVtb3ZlTGlzdGVuZXIodXBkYXRlTWF0Y2gpO1xuICAgIH07XG4gIH0sIFtxdWVyeSwgbWF0Y2hNZWRpYV0pO1xuICByZXR1cm4gbWF0Y2g7XG59XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11c2VsZXNzLWNvbmNhdCAtLSBXb3JrYXJvdW5kIGZvciBodHRwczovL2dpdGh1Yi5jb20vd2VicGFjay93ZWJwYWNrL2lzc3Vlcy8xNDgxNFxuY29uc3QgbWF5YmVSZWFjdFVzZVN5bmNFeHRlcm5hbFN0b3JlID0gUmVhY3RbJ3VzZVN5bmNFeHRlcm5hbFN0b3JlJyArICcnXTtcbmZ1bmN0aW9uIHVzZU1lZGlhUXVlcnlOZXcocXVlcnksIGRlZmF1bHRNYXRjaGVzLCBtYXRjaE1lZGlhLCBzc3JNYXRjaE1lZGlhLCBub1Nzcikge1xuICBjb25zdCBnZXREZWZhdWx0U25hcHNob3QgPSBSZWFjdC51c2VDYWxsYmFjaygoKSA9PiBkZWZhdWx0TWF0Y2hlcywgW2RlZmF1bHRNYXRjaGVzXSk7XG4gIGNvbnN0IGdldFNlcnZlclNuYXBzaG90ID0gUmVhY3QudXNlTWVtbygoKSA9PiB7XG4gICAgaWYgKG5vU3NyICYmIG1hdGNoTWVkaWEpIHtcbiAgICAgIHJldHVybiAoKSA9PiBtYXRjaE1lZGlhKHF1ZXJ5KS5tYXRjaGVzO1xuICAgIH1cbiAgICBpZiAoc3NyTWF0Y2hNZWRpYSAhPT0gbnVsbCkge1xuICAgICAgY29uc3Qge1xuICAgICAgICBtYXRjaGVzXG4gICAgICB9ID0gc3NyTWF0Y2hNZWRpYShxdWVyeSk7XG4gICAgICByZXR1cm4gKCkgPT4gbWF0Y2hlcztcbiAgICB9XG4gICAgcmV0dXJuIGdldERlZmF1bHRTbmFwc2hvdDtcbiAgfSwgW2dldERlZmF1bHRTbmFwc2hvdCwgcXVlcnksIHNzck1hdGNoTWVkaWEsIG5vU3NyLCBtYXRjaE1lZGlhXSk7XG4gIGNvbnN0IFtnZXRTbmFwc2hvdCwgc3Vic2NyaWJlXSA9IFJlYWN0LnVzZU1lbW8oKCkgPT4ge1xuICAgIGlmIChtYXRjaE1lZGlhID09PSBudWxsKSB7XG4gICAgICByZXR1cm4gW2dldERlZmF1bHRTbmFwc2hvdCwgKCkgPT4gKCkgPT4ge31dO1xuICAgIH1cbiAgICBjb25zdCBtZWRpYVF1ZXJ5TGlzdCA9IG1hdGNoTWVkaWEocXVlcnkpO1xuICAgIHJldHVybiBbKCkgPT4gbWVkaWFRdWVyeUxpc3QubWF0Y2hlcywgbm90aWZ5ID0+IHtcbiAgICAgIC8vIFRPRE86IFVzZSBgYWRkRXZlbnRMaXN0ZW5lcmAgb25jZSBzdXBwb3J0IGZvciBTYWZhcmkgPCAxNCBpcyBkcm9wcGVkXG4gICAgICBtZWRpYVF1ZXJ5TGlzdC5hZGRMaXN0ZW5lcihub3RpZnkpO1xuICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgbWVkaWFRdWVyeUxpc3QucmVtb3ZlTGlzdGVuZXIobm90aWZ5KTtcbiAgICAgIH07XG4gICAgfV07XG4gIH0sIFtnZXREZWZhdWx0U25hcHNob3QsIG1hdGNoTWVkaWEsIHF1ZXJ5XSk7XG4gIGNvbnN0IG1hdGNoID0gbWF5YmVSZWFjdFVzZVN5bmNFeHRlcm5hbFN0b3JlKHN1YnNjcmliZSwgZ2V0U25hcHNob3QsIGdldFNlcnZlclNuYXBzaG90KTtcbiAgcmV0dXJuIG1hdGNoO1xufVxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXNlTWVkaWFRdWVyeShxdWVyeUlucHV0LCBvcHRpb25zID0ge30pIHtcbiAgY29uc3QgdGhlbWUgPSB1c2VUaGVtZSgpO1xuICAvLyBXYWl0IGZvciBqc2RvbSB0byBzdXBwb3J0IHRoZSBtYXRjaCBtZWRpYSBmZWF0dXJlLlxuICAvLyBBbGwgdGhlIGJyb3dzZXJzIE1VSSBzdXBwb3J0IGhhdmUgdGhpcyBidWlsdC1pbi5cbiAgLy8gVGhpcyBkZWZlbnNpdmUgY2hlY2sgaXMgaGVyZSBmb3Igc2ltcGxpY2l0eS5cbiAgLy8gTW9zdCBvZiB0aGUgdGltZSwgdGhlIG1hdGNoIG1lZGlhIGxvZ2ljIGlzbid0IGNlbnRyYWwgdG8gcGVvcGxlIHRlc3RzLlxuICBjb25zdCBzdXBwb3J0TWF0Y2hNZWRpYSA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiB3aW5kb3cubWF0Y2hNZWRpYSAhPT0gJ3VuZGVmaW5lZCc7XG4gIGNvbnN0IHtcbiAgICBkZWZhdWx0TWF0Y2hlcyA9IGZhbHNlLFxuICAgIG1hdGNoTWVkaWEgPSBzdXBwb3J0TWF0Y2hNZWRpYSA/IHdpbmRvdy5tYXRjaE1lZGlhIDogbnVsbCxcbiAgICBzc3JNYXRjaE1lZGlhID0gbnVsbCxcbiAgICBub1NzciA9IGZhbHNlXG4gIH0gPSBnZXRUaGVtZVByb3BzKHtcbiAgICBuYW1lOiAnTXVpVXNlTWVkaWFRdWVyeScsXG4gICAgcHJvcHM6IG9wdGlvbnMsXG4gICAgdGhlbWVcbiAgfSk7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaWYgKHR5cGVvZiBxdWVyeUlucHV0ID09PSAnZnVuY3Rpb24nICYmIHRoZW1lID09PSBudWxsKSB7XG4gICAgICBjb25zb2xlLmVycm9yKFsnTVVJOiBUaGUgYHF1ZXJ5YCBhcmd1bWVudCBwcm92aWRlZCBpcyBpbnZhbGlkLicsICdZb3UgYXJlIHByb3ZpZGluZyBhIGZ1bmN0aW9uIHdpdGhvdXQgYSB0aGVtZSBpbiB0aGUgY29udGV4dC4nLCAnT25lIG9mIHRoZSBwYXJlbnQgZWxlbWVudHMgbmVlZHMgdG8gdXNlIGEgVGhlbWVQcm92aWRlci4nXS5qb2luKCdcXG4nKSk7XG4gICAgfVxuICB9XG4gIGxldCBxdWVyeSA9IHR5cGVvZiBxdWVyeUlucHV0ID09PSAnZnVuY3Rpb24nID8gcXVlcnlJbnB1dCh0aGVtZSkgOiBxdWVyeUlucHV0O1xuICBxdWVyeSA9IHF1ZXJ5LnJlcGxhY2UoL15AbWVkaWEoID8pL20sICcnKTtcblxuICAvLyBUT0RPOiBEcm9wIGB1c2VNZWRpYVF1ZXJ5T2xkYCBhbmQgdXNlICBgdXNlLXN5bmMtZXh0ZXJuYWwtc3RvcmVgIHNoaW0gaW4gYHVzZU1lZGlhUXVlcnlOZXdgIG9uY2UgdGhlIHBhY2thZ2UgaXMgc3RhYmxlXG4gIGNvbnN0IHVzZU1lZGlhUXVlcnlJbXBsZW1lbnRhdGlvbiA9IG1heWJlUmVhY3RVc2VTeW5jRXh0ZXJuYWxTdG9yZSAhPT0gdW5kZWZpbmVkID8gdXNlTWVkaWFRdWVyeU5ldyA6IHVzZU1lZGlhUXVlcnlPbGQ7XG4gIGNvbnN0IG1hdGNoID0gdXNlTWVkaWFRdWVyeUltcGxlbWVudGF0aW9uKHF1ZXJ5LCBkZWZhdWx0TWF0Y2hlcywgbWF0Y2hNZWRpYSwgc3NyTWF0Y2hNZWRpYSwgbm9Tc3IpO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9ydWxlcy1vZi1ob29rc1xuICAgIFJlYWN0LnVzZURlYnVnVmFsdWUoe1xuICAgICAgcXVlcnksXG4gICAgICBtYXRjaFxuICAgIH0pO1xuICB9XG4gIHJldHVybiBtYXRjaDtcbn0iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiaW5pdGlhbFdpZHRoXCIsIFwid2lkdGhcIl07XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGdldERpc3BsYXlOYW1lIGZyb20gJ0BtdWkvdXRpbHMvZ2V0RGlzcGxheU5hbWUnO1xuaW1wb3J0IHsgZ2V0VGhlbWVQcm9wcyB9IGZyb20gJ0BtdWkvc3lzdGVtL3VzZVRoZW1lUHJvcHMnO1xuaW1wb3J0IHVzZVRoZW1lIGZyb20gJy4uL3N0eWxlcy91c2VUaGVtZSc7XG5pbXBvcnQgdXNlRW5oYW5jZWRFZmZlY3QgZnJvbSAnLi4vdXRpbHMvdXNlRW5oYW5jZWRFZmZlY3QnO1xuaW1wb3J0IHVzZU1lZGlhUXVlcnkgZnJvbSAnLi4vdXNlTWVkaWFRdWVyeSc7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuY29uc3QgYnJlYWtwb2ludEtleXMgPSBbJ3hzJywgJ3NtJywgJ21kJywgJ2xnJywgJ3hsJ107XG5cbi8vIEJ5IGRlZmF1bHQsIHJldHVybnMgdHJ1ZSBpZiBzY3JlZW4gd2lkdGggaXMgdGhlIHNhbWUgb3IgZ3JlYXRlciB0aGFuIHRoZSBnaXZlbiBicmVha3BvaW50LlxuZXhwb3J0IGNvbnN0IGlzV2lkdGhVcCA9IChicmVha3BvaW50LCB3aWR0aCwgaW5jbHVzaXZlID0gdHJ1ZSkgPT4ge1xuICBpZiAoaW5jbHVzaXZlKSB7XG4gICAgcmV0dXJuIGJyZWFrcG9pbnRLZXlzLmluZGV4T2YoYnJlYWtwb2ludCkgPD0gYnJlYWtwb2ludEtleXMuaW5kZXhPZih3aWR0aCk7XG4gIH1cbiAgcmV0dXJuIGJyZWFrcG9pbnRLZXlzLmluZGV4T2YoYnJlYWtwb2ludCkgPCBicmVha3BvaW50S2V5cy5pbmRleE9mKHdpZHRoKTtcbn07XG5cbi8vIEJ5IGRlZmF1bHQsIHJldHVybnMgdHJ1ZSBpZiBzY3JlZW4gd2lkdGggaXMgbGVzcyB0aGFuIHRoZSBnaXZlbiBicmVha3BvaW50LlxuZXhwb3J0IGNvbnN0IGlzV2lkdGhEb3duID0gKGJyZWFrcG9pbnQsIHdpZHRoLCBpbmNsdXNpdmUgPSBmYWxzZSkgPT4ge1xuICBpZiAoaW5jbHVzaXZlKSB7XG4gICAgcmV0dXJuIGJyZWFrcG9pbnRLZXlzLmluZGV4T2Yod2lkdGgpIDw9IGJyZWFrcG9pbnRLZXlzLmluZGV4T2YoYnJlYWtwb2ludCk7XG4gIH1cbiAgcmV0dXJuIGJyZWFrcG9pbnRLZXlzLmluZGV4T2Yod2lkdGgpIDwgYnJlYWtwb2ludEtleXMuaW5kZXhPZihicmVha3BvaW50KTtcbn07XG5jb25zdCB3aXRoV2lkdGggPSAob3B0aW9ucyA9IHt9KSA9PiBDb21wb25lbnQgPT4ge1xuICBjb25zdCB7XG4gICAgd2l0aFRoZW1lOiB3aXRoVGhlbWVPcHRpb24gPSBmYWxzZSxcbiAgICBub1NTUiA9IGZhbHNlLFxuICAgIGluaXRpYWxXaWR0aDogaW5pdGlhbFdpZHRoT3B0aW9uXG4gIH0gPSBvcHRpb25zO1xuICBmdW5jdGlvbiBXaXRoV2lkdGgocHJvcHMpIHtcbiAgICBjb25zdCBjb250ZXh0VGhlbWUgPSB1c2VUaGVtZSgpO1xuICAgIGNvbnN0IHRoZW1lID0gcHJvcHMudGhlbWUgfHwgY29udGV4dFRoZW1lO1xuICAgIGNvbnN0IF9nZXRUaGVtZVByb3BzID0gZ2V0VGhlbWVQcm9wcyh7XG4gICAgICAgIHRoZW1lLFxuICAgICAgICBuYW1lOiAnTXVpV2l0aFdpZHRoJyxcbiAgICAgICAgcHJvcHNcbiAgICAgIH0pLFxuICAgICAge1xuICAgICAgICBpbml0aWFsV2lkdGgsXG4gICAgICAgIHdpZHRoXG4gICAgICB9ID0gX2dldFRoZW1lUHJvcHMsXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9nZXRUaGVtZVByb3BzLCBfZXhjbHVkZWQpO1xuICAgIGNvbnN0IFttb3VudGVkU3RhdGUsIHNldE1vdW50ZWRTdGF0ZV0gPSBSZWFjdC51c2VTdGF0ZShmYWxzZSk7XG4gICAgdXNlRW5oYW5jZWRFZmZlY3QoKCkgPT4ge1xuICAgICAgc2V0TW91bnRlZFN0YXRlKHRydWUpO1xuICAgIH0sIFtdKTtcblxuICAgIC8qKlxuICAgICAqIGlubmVyV2lkdGggfHhzICAgICAgc20gICAgICBtZCAgICAgIGxnICAgICAgeGxcbiAgICAgKiAgICAgICAgICAgIHwtLS0tLS0tfC0tLS0tLS18LS0tLS0tLXwtLS0tLS0tfC0tLS0tLT5cbiAgICAgKiB3aWR0aCAgICAgIHwgIHhzICAgfCAgc20gICB8ICBtZCAgIHwgIGxnICAgfCAgeGxcbiAgICAgKi9cbiAgICBjb25zdCBrZXlzID0gdGhlbWUuYnJlYWtwb2ludHMua2V5cy5zbGljZSgpLnJldmVyc2UoKTtcbiAgICBjb25zdCB3aWR0aENvbXB1dGVkID0ga2V5cy5yZWR1Y2UoKG91dHB1dCwga2V5KSA9PiB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvcnVsZXMtb2YtaG9va3NcbiAgICAgIGNvbnN0IG1hdGNoZXMgPSB1c2VNZWRpYVF1ZXJ5KHRoZW1lLmJyZWFrcG9pbnRzLnVwKGtleSkpO1xuICAgICAgcmV0dXJuICFvdXRwdXQgJiYgbWF0Y2hlcyA/IGtleSA6IG91dHB1dDtcbiAgICB9LCBudWxsKTtcbiAgICBjb25zdCBtb3JlID0gX2V4dGVuZHMoe1xuICAgICAgd2lkdGg6IHdpZHRoIHx8IChtb3VudGVkU3RhdGUgfHwgbm9TU1IgPyB3aWR0aENvbXB1dGVkIDogdW5kZWZpbmVkKSB8fCBpbml0aWFsV2lkdGggfHwgaW5pdGlhbFdpZHRoT3B0aW9uXG4gICAgfSwgd2l0aFRoZW1lT3B0aW9uID8ge1xuICAgICAgdGhlbWVcbiAgICB9IDoge30sIG90aGVyKTtcblxuICAgIC8vIFdoZW4gcmVuZGVyaW5nIHRoZSBjb21wb25lbnQgb24gdGhlIHNlcnZlcixcbiAgICAvLyB3ZSBoYXZlIG5vIGlkZWEgYWJvdXQgdGhlIGNsaWVudCBicm93c2VyIHNjcmVlbiB3aWR0aC5cbiAgICAvLyBJbiBvcmRlciB0byBwcmV2ZW50IGJsaW5rcyBhbmQgaGVscCB0aGUgcmVjb25jaWxpYXRpb24gb2YgdGhlIFJlYWN0IHRyZWVcbiAgICAvLyB3ZSBhcmUgbm90IHJlbmRlcmluZyB0aGUgY2hpbGQgY29tcG9uZW50LlxuICAgIC8vXG4gICAgLy8gQW4gYWx0ZXJuYXRpdmUgaXMgdG8gdXNlIHRoZSBgaW5pdGlhbFdpZHRoYCBwcm9wZXJ0eS5cbiAgICBpZiAobW9yZS53aWR0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KENvbXBvbmVudCwgX2V4dGVuZHMoe30sIG1vcmUpKTtcbiAgfVxuICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBXaXRoV2lkdGgucHJvcFR5cGVzID0ge1xuICAgIC8qKlxuICAgICAqIEFzIGB3aW5kb3cuaW5uZXJXaWR0aGAgaXMgdW5hdmFpbGFibGUgb24gdGhlIHNlcnZlcixcbiAgICAgKiB3ZSBkZWZhdWx0IHRvIHJlbmRlcmluZyBhbiBlbXB0eSBjb21wb25lbnQgZHVyaW5nIHRoZSBmaXJzdCBtb3VudC5cbiAgICAgKiBZb3UgbWlnaHQgd2FudCB0byB1c2UgYSBoZXVyaXN0aWMgdG8gYXBwcm94aW1hdGVcbiAgICAgKiB0aGUgc2NyZWVuIHdpZHRoIG9mIHRoZSBjbGllbnQgYnJvd3NlciBzY3JlZW4gd2lkdGguXG4gICAgICpcbiAgICAgKiBGb3IgaW5zdGFuY2UsIHlvdSBjb3VsZCBiZSB1c2luZyB0aGUgdXNlci1hZ2VudCBvciB0aGUgY2xpZW50LWhpbnRzLlxuICAgICAqIGh0dHBzOi8vY2FuaXVzZS5jb20vI3NlYXJjaD1jbGllbnQlMjBoaW50XG4gICAgICovXG4gICAgaW5pdGlhbFdpZHRoOiBQcm9wVHlwZXMub25lT2YoWyd4cycsICdzbScsICdtZCcsICdsZycsICd4bCddKSxcbiAgICAvKipcbiAgICAgKiBAaWdub3JlXG4gICAgICovXG4gICAgdGhlbWU6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgLyoqXG4gICAgICogQnlwYXNzIHRoZSB3aWR0aCBjYWxjdWxhdGlvbiBsb2dpYy5cbiAgICAgKi9cbiAgICB3aWR0aDogUHJvcFR5cGVzLm9uZU9mKFsneHMnLCAnc20nLCAnbWQnLCAnbGcnLCAneGwnXSlcbiAgfSA6IHZvaWQgMDtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBXaXRoV2lkdGguZGlzcGxheU5hbWUgPSBgV2l0aFdpZHRoKCR7Z2V0RGlzcGxheU5hbWUoQ29tcG9uZW50KX0pYDtcbiAgfVxuICByZXR1cm4gV2l0aFdpZHRoO1xufTtcbmV4cG9ydCBkZWZhdWx0IHdpdGhXaWR0aDsiLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgZXhhY3RQcm9wIGZyb20gJ0BtdWkvdXRpbHMvZXhhY3RQcm9wJztcbmltcG9ydCB3aXRoV2lkdGgsIHsgaXNXaWR0aERvd24sIGlzV2lkdGhVcCB9IGZyb20gJy4vd2l0aFdpZHRoJztcbmltcG9ydCB1c2VUaGVtZSBmcm9tICcuLi9zdHlsZXMvdXNlVGhlbWUnO1xuXG4vKipcbiAqIEBpZ25vcmUgLSBpbnRlcm5hbCBjb21wb25lbnQuXG4gKi9cbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5mdW5jdGlvbiBIaWRkZW5Kcyhwcm9wcykge1xuICBjb25zdCB7XG4gICAgY2hpbGRyZW4sXG4gICAgb25seSxcbiAgICB3aWR0aFxuICB9ID0gcHJvcHM7XG4gIGNvbnN0IHRoZW1lID0gdXNlVGhlbWUoKTtcbiAgbGV0IHZpc2libGUgPSB0cnVlO1xuXG4gIC8vIGBvbmx5YCBjaGVjayBpcyBmYXN0ZXIgdG8gZ2V0IG91dCBzb29uZXIgaWYgdXNlZC5cbiAgaWYgKG9ubHkpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShvbmx5KSkge1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBvbmx5Lmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGNvbnN0IGJyZWFrcG9pbnQgPSBvbmx5W2ldO1xuICAgICAgICBpZiAod2lkdGggPT09IGJyZWFrcG9pbnQpIHtcbiAgICAgICAgICB2aXNpYmxlID0gZmFsc2U7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKG9ubHkgJiYgd2lkdGggPT09IG9ubHkpIHtcbiAgICAgIHZpc2libGUgPSBmYWxzZTtcbiAgICB9XG4gIH1cblxuICAvLyBBbGxvdyBgb25seWAgdG8gYmUgY29tYmluZWQgd2l0aCBvdGhlciBwcm9wcy4gSWYgYWxyZWFkeSBoaWRkZW4sIG5vIG5lZWQgdG8gY2hlY2sgb3RoZXJzLlxuICBpZiAodmlzaWJsZSkge1xuICAgIC8vIGRldGVybWluZSB2aXNpYmlsaXR5IGJhc2VkIG9uIHRoZSBzbWFsbGVzdCBzaXplIHVwXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGVtZS5icmVha3BvaW50cy5rZXlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBjb25zdCBicmVha3BvaW50ID0gdGhlbWUuYnJlYWtwb2ludHMua2V5c1tpXTtcbiAgICAgIGNvbnN0IGJyZWFrcG9pbnRVcCA9IHByb3BzW2Ake2JyZWFrcG9pbnR9VXBgXTtcbiAgICAgIGNvbnN0IGJyZWFrcG9pbnREb3duID0gcHJvcHNbYCR7YnJlYWtwb2ludH1Eb3duYF07XG4gICAgICBpZiAoYnJlYWtwb2ludFVwICYmIGlzV2lkdGhVcChicmVha3BvaW50LCB3aWR0aCkgfHwgYnJlYWtwb2ludERvd24gJiYgaXNXaWR0aERvd24oYnJlYWtwb2ludCwgd2lkdGgpKSB7XG4gICAgICAgIHZpc2libGUgPSBmYWxzZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGlmICghdmlzaWJsZSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeChSZWFjdC5GcmFnbWVudCwge1xuICAgIGNoaWxkcmVuOiBjaGlsZHJlblxuICB9KTtcbn1cbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IEhpZGRlbkpzLnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHNjcmVlbnMgdGhpcyBzaXplIGFuZCBkb3duIGFyZSBoaWRkZW4uXG4gICAqL1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3Qvbm8tdW51c2VkLXByb3AtdHlwZXNcbiAgbGdEb3duOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgc2NyZWVucyB0aGlzIHNpemUgYW5kIHVwIGFyZSBoaWRkZW4uXG4gICAqL1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3Qvbm8tdW51c2VkLXByb3AtdHlwZXNcbiAgbGdVcDogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHNjcmVlbnMgdGhpcyBzaXplIGFuZCBkb3duIGFyZSBoaWRkZW4uXG4gICAqL1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3Qvbm8tdW51c2VkLXByb3AtdHlwZXNcbiAgbWREb3duOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgc2NyZWVucyB0aGlzIHNpemUgYW5kIHVwIGFyZSBoaWRkZW4uXG4gICAqL1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3Qvbm8tdW51c2VkLXByb3AtdHlwZXNcbiAgbWRVcDogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBIaWRlIHRoZSBnaXZlbiBicmVha3BvaW50KHMpLlxuICAgKi9cbiAgb25seTogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsneHMnLCAnc20nLCAnbWQnLCAnbGcnLCAneGwnXSksIFByb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZihbJ3hzJywgJ3NtJywgJ21kJywgJ2xnJywgJ3hsJ10pKV0pLFxuICAvKipcbiAgICogSWYgYHRydWVgLCBzY3JlZW5zIHRoaXMgc2l6ZSBhbmQgZG93biBhcmUgaGlkZGVuLlxuICAgKi9cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0L25vLXVudXNlZC1wcm9wLXR5cGVzXG4gIHNtRG93bjogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHNjcmVlbnMgdGhpcyBzaXplIGFuZCB1cCBhcmUgaGlkZGVuLlxuICAgKi9cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0L25vLXVudXNlZC1wcm9wLXR5cGVzXG4gIHNtVXA6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKiB3aWR0aCBwcm9wIHByb3ZpZGVkIGJ5IHdpdGhXaWR0aCBkZWNvcmF0b3IuXG4gICAqL1xuICB3aWR0aDogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICAvKipcbiAgICogSWYgYHRydWVgLCBzY3JlZW5zIHRoaXMgc2l6ZSBhbmQgZG93biBhcmUgaGlkZGVuLlxuICAgKi9cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0L25vLXVudXNlZC1wcm9wLXR5cGVzXG4gIHhsRG93bjogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHNjcmVlbnMgdGhpcyBzaXplIGFuZCB1cCBhcmUgaGlkZGVuLlxuICAgKi9cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0L25vLXVudXNlZC1wcm9wLXR5cGVzXG4gIHhsVXA6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogSWYgYHRydWVgLCBzY3JlZW5zIHRoaXMgc2l6ZSBhbmQgZG93biBhcmUgaGlkZGVuLlxuICAgKi9cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0L25vLXVudXNlZC1wcm9wLXR5cGVzXG4gIHhzRG93bjogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHNjcmVlbnMgdGhpcyBzaXplIGFuZCB1cCBhcmUgaGlkZGVuLlxuICAgKi9cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0L25vLXVudXNlZC1wcm9wLXR5cGVzXG4gIHhzVXA6IFByb3BUeXBlcy5ib29sXG59IDogdm9pZCAwO1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gSGlkZGVuSnMucHJvcFR5cGVzID0gZXhhY3RQcm9wKEhpZGRlbkpzLnByb3BUeXBlcykgOiB2b2lkIDA7XG59XG5leHBvcnQgZGVmYXVsdCB3aXRoV2lkdGgoKShIaWRkZW5Kcyk7IiwiaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzc2VzJztcbmltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzJztcbmV4cG9ydCBmdW5jdGlvbiBnZXRIaWRkZW5Dc3NVdGlsaXR5Q2xhc3Moc2xvdCkge1xuICByZXR1cm4gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoJ1ByaXZhdGVIaWRkZW5Dc3MnLCBzbG90KTtcbn1cbmNvbnN0IGhpZGRlbkNzc0NsYXNzZXMgPSBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzKCdQcml2YXRlSGlkZGVuQ3NzJywgWydyb290JywgJ3hsRG93bicsICd4bFVwJywgJ29ubHlYbCcsICdsZ0Rvd24nLCAnbGdVcCcsICdvbmx5TGcnLCAnbWREb3duJywgJ21kVXAnLCAnb25seU1kJywgJ3NtRG93bicsICdzbVVwJywgJ29ubHlTbScsICd4c0Rvd24nLCAneHNVcCcsICdvbmx5WHMnXSk7XG5leHBvcnQgZGVmYXVsdCBoaWRkZW5Dc3NDbGFzc2VzOyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImNoaWxkcmVuXCIsIFwiY2xhc3NOYW1lXCIsIFwib25seVwiXTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjb21wb3NlQ2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2NvbXBvc2VDbGFzc2VzJztcbmltcG9ydCBjYXBpdGFsaXplIGZyb20gJy4uL3V0aWxzL2NhcGl0YWxpemUnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICcuLi9zdHlsZXMvc3R5bGVkJztcbmltcG9ydCB1c2VUaGVtZSBmcm9tICcuLi9zdHlsZXMvdXNlVGhlbWUnO1xuaW1wb3J0IHsgZ2V0SGlkZGVuQ3NzVXRpbGl0eUNsYXNzIH0gZnJvbSAnLi9oaWRkZW5Dc3NDbGFzc2VzJztcbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5jb25zdCB1c2VVdGlsaXR5Q2xhc3NlcyA9IG93bmVyU3RhdGUgPT4ge1xuICBjb25zdCB7XG4gICAgY2xhc3NlcyxcbiAgICBicmVha3BvaW50c1xuICB9ID0gb3duZXJTdGF0ZTtcbiAgY29uc3Qgc2xvdHMgPSB7XG4gICAgcm9vdDogWydyb290JywgLi4uYnJlYWtwb2ludHMubWFwKCh7XG4gICAgICBicmVha3BvaW50LFxuICAgICAgZGlyXG4gICAgfSkgPT4ge1xuICAgICAgcmV0dXJuIGRpciA9PT0gJ29ubHknID8gYCR7ZGlyfSR7Y2FwaXRhbGl6ZShicmVha3BvaW50KX1gIDogYCR7YnJlYWtwb2ludH0ke2NhcGl0YWxpemUoZGlyKX1gO1xuICAgIH0pXVxuICB9O1xuICByZXR1cm4gY29tcG9zZUNsYXNzZXMoc2xvdHMsIGdldEhpZGRlbkNzc1V0aWxpdHlDbGFzcywgY2xhc3Nlcyk7XG59O1xuY29uc3QgSGlkZGVuQ3NzUm9vdCA9IHN0eWxlZCgnZGl2Jywge1xuICBuYW1lOiAnUHJpdmF0ZUhpZGRlbkNzcycsXG4gIHNsb3Q6ICdSb290J1xufSkoKHtcbiAgdGhlbWUsXG4gIG93bmVyU3RhdGVcbn0pID0+IHtcbiAgY29uc3QgaGlkZGVuID0ge1xuICAgIGRpc3BsYXk6ICdub25lJ1xuICB9O1xuICByZXR1cm4gX2V4dGVuZHMoe30sIG93bmVyU3RhdGUuYnJlYWtwb2ludHMubWFwKCh7XG4gICAgYnJlYWtwb2ludCxcbiAgICBkaXJcbiAgfSkgPT4ge1xuICAgIGlmIChkaXIgPT09ICdvbmx5Jykge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgW3RoZW1lLmJyZWFrcG9pbnRzLm9ubHkoYnJlYWtwb2ludCldOiBoaWRkZW5cbiAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiBkaXIgPT09ICd1cCcgPyB7XG4gICAgICBbdGhlbWUuYnJlYWtwb2ludHMudXAoYnJlYWtwb2ludCldOiBoaWRkZW5cbiAgICB9IDoge1xuICAgICAgW3RoZW1lLmJyZWFrcG9pbnRzLmRvd24oYnJlYWtwb2ludCldOiBoaWRkZW5cbiAgICB9O1xuICB9KS5yZWR1Y2UoKHIsIG8pID0+IHtcbiAgICBPYmplY3Qua2V5cyhvKS5mb3JFYWNoKGsgPT4ge1xuICAgICAgcltrXSA9IG9ba107XG4gICAgfSk7XG4gICAgcmV0dXJuIHI7XG4gIH0sIHt9KSk7XG59KTtcblxuLyoqXG4gKiBAaWdub3JlIC0gaW50ZXJuYWwgY29tcG9uZW50LlxuICovXG5mdW5jdGlvbiBIaWRkZW5Dc3MocHJvcHMpIHtcbiAgY29uc3Qge1xuICAgICAgY2hpbGRyZW4sXG4gICAgICBjbGFzc05hbWUsXG4gICAgICBvbmx5XG4gICAgfSA9IHByb3BzLFxuICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIF9leGNsdWRlZCk7XG4gIGNvbnN0IHRoZW1lID0gdXNlVGhlbWUoKTtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBjb25zdCB1bmtub3duUHJvcHMgPSBPYmplY3Qua2V5cyhvdGhlcikuZmlsdGVyKHByb3BOYW1lID0+IHtcbiAgICAgIGNvbnN0IGlzVW5kZWNsYXJlZEJyZWFrcG9pbnQgPSAhdGhlbWUuYnJlYWtwb2ludHMua2V5cy5zb21lKGJyZWFrcG9pbnQgPT4ge1xuICAgICAgICByZXR1cm4gYCR7YnJlYWtwb2ludH1VcGAgPT09IHByb3BOYW1lIHx8IGAke2JyZWFrcG9pbnR9RG93bmAgPT09IHByb3BOYW1lO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gIVsnY2xhc3NlcycsICd0aGVtZScsICdpc1J0bCcsICdzeCddLmluY2x1ZGVzKHByb3BOYW1lKSAmJiBpc1VuZGVjbGFyZWRCcmVha3BvaW50O1xuICAgIH0pO1xuICAgIGlmICh1bmtub3duUHJvcHMubGVuZ3RoID4gMCkge1xuICAgICAgY29uc29sZS5lcnJvcihgTVVJOiBVbnN1cHBvcnRlZCBwcm9wcyByZWNlaXZlZCBieSBcXGA8SGlkZGVuIGltcGxlbWVudGF0aW9uPVwiY3NzXCIgLz5cXGA6ICR7dW5rbm93blByb3BzLmpvaW4oJywgJyl9LiBEaWQgeW91IGZvcmdldCB0byB3cmFwIHRoaXMgY29tcG9uZW50IGluIGEgVGhlbWVQcm92aWRlciBkZWNsYXJpbmcgdGhlc2UgYnJlYWtwb2ludHM/YCk7XG4gICAgfVxuICB9XG4gIGNvbnN0IGJyZWFrcG9pbnRzID0gW107XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgdGhlbWUuYnJlYWtwb2ludHMua2V5cy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGNvbnN0IGJyZWFrcG9pbnQgPSB0aGVtZS5icmVha3BvaW50cy5rZXlzW2ldO1xuICAgIGNvbnN0IGJyZWFrcG9pbnRVcCA9IG90aGVyW2Ake2JyZWFrcG9pbnR9VXBgXTtcbiAgICBjb25zdCBicmVha3BvaW50RG93biA9IG90aGVyW2Ake2JyZWFrcG9pbnR9RG93bmBdO1xuICAgIGlmIChicmVha3BvaW50VXApIHtcbiAgICAgIGJyZWFrcG9pbnRzLnB1c2goe1xuICAgICAgICBicmVha3BvaW50LFxuICAgICAgICBkaXI6ICd1cCdcbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoYnJlYWtwb2ludERvd24pIHtcbiAgICAgIGJyZWFrcG9pbnRzLnB1c2goe1xuICAgICAgICBicmVha3BvaW50LFxuICAgICAgICBkaXI6ICdkb3duJ1xuICAgICAgfSk7XG4gICAgfVxuICB9XG4gIGlmIChvbmx5KSB7XG4gICAgY29uc3Qgb25seUJyZWFrcG9pbnRzID0gQXJyYXkuaXNBcnJheShvbmx5KSA/IG9ubHkgOiBbb25seV07XG4gICAgb25seUJyZWFrcG9pbnRzLmZvckVhY2goYnJlYWtwb2ludCA9PiB7XG4gICAgICBicmVha3BvaW50cy5wdXNoKHtcbiAgICAgICAgYnJlYWtwb2ludCxcbiAgICAgICAgZGlyOiAnb25seSdcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG4gIGNvbnN0IG93bmVyU3RhdGUgPSBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICBicmVha3BvaW50c1xuICB9KTtcbiAgY29uc3QgY2xhc3NlcyA9IHVzZVV0aWxpdHlDbGFzc2VzKG93bmVyU3RhdGUpO1xuICByZXR1cm4gLyojX19QVVJFX18qL19qc3goSGlkZGVuQ3NzUm9vdCwge1xuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSksXG4gICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZSxcbiAgICBjaGlsZHJlbjogY2hpbGRyZW5cbiAgfSk7XG59XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBIaWRkZW5Dc3MucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIFNwZWNpZnkgd2hpY2ggaW1wbGVtZW50YXRpb24gdG8gdXNlLiAgJ2pzJyBpcyB0aGUgZGVmYXVsdCwgJ2Nzcycgd29ya3MgYmV0dGVyIGZvclxuICAgKiBzZXJ2ZXItc2lkZSByZW5kZXJpbmcuXG4gICAqL1xuICBpbXBsZW1lbnRhdGlvbjogUHJvcFR5cGVzLm9uZU9mKFsnanMnLCAnY3NzJ10pLFxuICAvKipcbiAgICogSWYgYHRydWVgLCBzY3JlZW5zIHRoaXMgc2l6ZSBhbmQgZG93biBhcmUgaGlkZGVuLlxuICAgKi9cbiAgbGdEb3duOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgc2NyZWVucyB0aGlzIHNpemUgYW5kIHVwIGFyZSBoaWRkZW4uXG4gICAqL1xuICBsZ1VwOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgc2NyZWVucyB0aGlzIHNpemUgYW5kIGRvd24gYXJlIGhpZGRlbi5cbiAgICovXG4gIG1kRG93bjogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHNjcmVlbnMgdGhpcyBzaXplIGFuZCB1cCBhcmUgaGlkZGVuLlxuICAgKi9cbiAgbWRVcDogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBIaWRlIHRoZSBnaXZlbiBicmVha3BvaW50KHMpLlxuICAgKi9cbiAgb25seTogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsneHMnLCAnc20nLCAnbWQnLCAnbGcnLCAneGwnXSksIFByb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZihbJ3hzJywgJ3NtJywgJ21kJywgJ2xnJywgJ3hsJ10pKV0pLFxuICAvKipcbiAgICogSWYgYHRydWVgLCBzY3JlZW5zIHRoaXMgc2l6ZSBhbmQgZG93biBhcmUgaGlkZGVuLlxuICAgKi9cbiAgc21Eb3duOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgc2NyZWVucyB0aGlzIHNpemUgYW5kIHVwIGFyZSBoaWRkZW4uXG4gICAqL1xuICBzbVVwOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgc2NyZWVucyB0aGlzIHNpemUgYW5kIGRvd24gYXJlIGhpZGRlbi5cbiAgICovXG4gIHhsRG93bjogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHNjcmVlbnMgdGhpcyBzaXplIGFuZCB1cCBhcmUgaGlkZGVuLlxuICAgKi9cbiAgeGxVcDogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHNjcmVlbnMgdGhpcyBzaXplIGFuZCBkb3duIGFyZSBoaWRkZW4uXG4gICAqL1xuICB4c0Rvd246IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogSWYgYHRydWVgLCBzY3JlZW5zIHRoaXMgc2l6ZSBhbmQgdXAgYXJlIGhpZGRlbi5cbiAgICovXG4gIHhzVXA6IFByb3BUeXBlcy5ib29sXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgSGlkZGVuQ3NzOyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImltcGxlbWVudGF0aW9uXCIsIFwibGdEb3duXCIsIFwibGdVcFwiLCBcIm1kRG93blwiLCBcIm1kVXBcIiwgXCJzbURvd25cIiwgXCJzbVVwXCIsIFwieGxEb3duXCIsIFwieGxVcFwiLCBcInhzRG93blwiLCBcInhzVXBcIl07XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IEhpZGRlbkpzIGZyb20gJy4vSGlkZGVuSnMnO1xuaW1wb3J0IEhpZGRlbkNzcyBmcm9tICcuL0hpZGRlbkNzcyc7XG5cbi8qKlxuICogUmVzcG9uc2l2ZWx5IGhpZGVzIGNoaWxkcmVuIGJhc2VkIG9uIHRoZSBzZWxlY3RlZCBpbXBsZW1lbnRhdGlvbi5cbiAqXG4gKiBAZGVwcmVjYXRlZCBUaGUgSGlkZGVuIGNvbXBvbmVudCB3YXMgZGVwcmVjYXRlZCBpbiBNYXRlcmlhbCBVSSB2NS4gVG8gbGVhcm4gbW9yZSwgc2VlIFt0aGUgSGlkZGVuIHNlY3Rpb25dKC9tYXRlcmlhbC11aS9taWdyYXRpb24vdjUtY29tcG9uZW50LWNoYW5nZXMvI2hpZGRlbikgb2YgdGhlIG1pZ3JhdGlvbiBkb2NzLlxuICovXG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuZnVuY3Rpb24gSGlkZGVuKHByb3BzKSB7XG4gIGNvbnN0IHtcbiAgICAgIGltcGxlbWVudGF0aW9uID0gJ2pzJyxcbiAgICAgIGxnRG93biA9IGZhbHNlLFxuICAgICAgbGdVcCA9IGZhbHNlLFxuICAgICAgbWREb3duID0gZmFsc2UsXG4gICAgICBtZFVwID0gZmFsc2UsXG4gICAgICBzbURvd24gPSBmYWxzZSxcbiAgICAgIHNtVXAgPSBmYWxzZSxcbiAgICAgIHhsRG93biA9IGZhbHNlLFxuICAgICAgeGxVcCA9IGZhbHNlLFxuICAgICAgeHNEb3duID0gZmFsc2UsXG4gICAgICB4c1VwID0gZmFsc2VcbiAgICB9ID0gcHJvcHMsXG4gICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkKTtcbiAgaWYgKGltcGxlbWVudGF0aW9uID09PSAnanMnKSB7XG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KEhpZGRlbkpzLCBfZXh0ZW5kcyh7XG4gICAgICBsZ0Rvd246IGxnRG93bixcbiAgICAgIGxnVXA6IGxnVXAsXG4gICAgICBtZERvd246IG1kRG93bixcbiAgICAgIG1kVXA6IG1kVXAsXG4gICAgICBzbURvd246IHNtRG93bixcbiAgICAgIHNtVXA6IHNtVXAsXG4gICAgICB4bERvd246IHhsRG93bixcbiAgICAgIHhsVXA6IHhsVXAsXG4gICAgICB4c0Rvd246IHhzRG93bixcbiAgICAgIHhzVXA6IHhzVXBcbiAgICB9LCBvdGhlcikpO1xuICB9XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeChIaWRkZW5Dc3MsIF9leHRlbmRzKHtcbiAgICBsZ0Rvd246IGxnRG93bixcbiAgICBsZ1VwOiBsZ1VwLFxuICAgIG1kRG93bjogbWREb3duLFxuICAgIG1kVXA6IG1kVXAsXG4gICAgc21Eb3duOiBzbURvd24sXG4gICAgc21VcDogc21VcCxcbiAgICB4bERvd246IHhsRG93bixcbiAgICB4bFVwOiB4bFVwLFxuICAgIHhzRG93bjogeHNEb3duLFxuICAgIHhzVXA6IHhzVXBcbiAgfSwgb3RoZXIpKTtcbn1cbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IEhpZGRlbi5wcm9wVHlwZXMgLyogcmVtb3ZlLXByb3B0eXBlcyAqLyA9IHtcbiAgLy8g4pSM4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAIFdhcm5pbmcg4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSQXG4gIC8vIOKUgiBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMuIOKUglxuICAvLyDilIIgICAgVG8gdXBkYXRlIHRoZW0sIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIGBwbnBtIHByb3B0eXBlc2AuICAgICDilIJcbiAgLy8g4pSU4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSYXG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogU3BlY2lmeSB3aGljaCBpbXBsZW1lbnRhdGlvbiB0byB1c2UuICAnanMnIGlzIHRoZSBkZWZhdWx0LCAnY3NzJyB3b3JrcyBiZXR0ZXIgZm9yXG4gICAqIHNlcnZlci1zaWRlIHJlbmRlcmluZy5cbiAgICogQGRlZmF1bHQgJ2pzJ1xuICAgKi9cbiAgaW1wbGVtZW50YXRpb246IFByb3BUeXBlcy5vbmVPZihbJ2NzcycsICdqcyddKSxcbiAgLyoqXG4gICAqIFlvdSBjYW4gdXNlIHRoaXMgcHJvcCB3aGVuIGNob29zaW5nIHRoZSBganNgIGltcGxlbWVudGF0aW9uIHdpdGggc2VydmVyLXNpZGUgcmVuZGVyaW5nLlxuICAgKlxuICAgKiBBcyBgd2luZG93LmlubmVyV2lkdGhgIGlzIHVuYXZhaWxhYmxlIG9uIHRoZSBzZXJ2ZXIsXG4gICAqIHdlIGRlZmF1bHQgdG8gcmVuZGVyaW5nIGFuIGVtcHR5IGNvbXBvbmVudCBkdXJpbmcgdGhlIGZpcnN0IG1vdW50LlxuICAgKiBZb3UgbWlnaHQgd2FudCB0byB1c2UgYSBoZXVyaXN0aWMgdG8gYXBwcm94aW1hdGVcbiAgICogdGhlIHNjcmVlbiB3aWR0aCBvZiB0aGUgY2xpZW50IGJyb3dzZXIgc2NyZWVuIHdpZHRoLlxuICAgKlxuICAgKiBGb3IgaW5zdGFuY2UsIHlvdSBjb3VsZCBiZSB1c2luZyB0aGUgdXNlci1hZ2VudCBvciB0aGUgY2xpZW50LWhpbnRzLlxuICAgKiBodHRwczovL2Nhbml1c2UuY29tLyNzZWFyY2g9Y2xpZW50JTIwaGludFxuICAgKi9cbiAgaW5pdGlhbFdpZHRoOiBQcm9wVHlwZXMub25lT2YoWyd4cycsICdzbScsICdtZCcsICdsZycsICd4bCddKSxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgY29tcG9uZW50IGlzIGhpZGRlbiBvbiBzY3JlZW5zIGJlbG93IChidXQgbm90IGluY2x1ZGluZykgdGhpcyBzaXplLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgbGdEb3duOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgY29tcG9uZW50IGlzIGhpZGRlbiBvbiBzY3JlZW5zIHRoaXMgc2l6ZSBhbmQgYWJvdmUuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBsZ1VwOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgY29tcG9uZW50IGlzIGhpZGRlbiBvbiBzY3JlZW5zIGJlbG93IChidXQgbm90IGluY2x1ZGluZykgdGhpcyBzaXplLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgbWREb3duOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgY29tcG9uZW50IGlzIGhpZGRlbiBvbiBzY3JlZW5zIHRoaXMgc2l6ZSBhbmQgYWJvdmUuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBtZFVwOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIEhpZGUgdGhlIGdpdmVuIGJyZWFrcG9pbnQocykuXG4gICAqL1xuICBvbmx5OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWyd4cycsICdzbScsICdtZCcsICdsZycsICd4bCddKSwgUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mKFsneHMnLCAnc20nLCAnbWQnLCAnbGcnLCAneGwnXSkuaXNSZXF1aXJlZCldKSxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgY29tcG9uZW50IGlzIGhpZGRlbiBvbiBzY3JlZW5zIGJlbG93IChidXQgbm90IGluY2x1ZGluZykgdGhpcyBzaXplLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgc21Eb3duOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgY29tcG9uZW50IGlzIGhpZGRlbiBvbiBzY3JlZW5zIHRoaXMgc2l6ZSBhbmQgYWJvdmUuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBzbVVwOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgY29tcG9uZW50IGlzIGhpZGRlbiBvbiBzY3JlZW5zIGJlbG93IChidXQgbm90IGluY2x1ZGluZykgdGhpcyBzaXplLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgeGxEb3duOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgY29tcG9uZW50IGlzIGhpZGRlbiBvbiBzY3JlZW5zIHRoaXMgc2l6ZSBhbmQgYWJvdmUuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICB4bFVwOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgY29tcG9uZW50IGlzIGhpZGRlbiBvbiBzY3JlZW5zIGJlbG93IChidXQgbm90IGluY2x1ZGluZykgdGhpcyBzaXplLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgeHNEb3duOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgY29tcG9uZW50IGlzIGhpZGRlbiBvbiBzY3JlZW5zIHRoaXMgc2l6ZSBhbmQgYWJvdmUuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICB4c1VwOiBQcm9wVHlwZXMuYm9vbFxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IEhpZGRlbjsiLCJpbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzZXMnO1xuaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3MnO1xuZXhwb3J0IGZ1bmN0aW9uIGdldEljb25VdGlsaXR5Q2xhc3Moc2xvdCkge1xuICByZXR1cm4gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoJ011aUljb24nLCBzbG90KTtcbn1cbmNvbnN0IGljb25DbGFzc2VzID0gZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcygnTXVpSWNvbicsIFsncm9vdCcsICdjb2xvclByaW1hcnknLCAnY29sb3JTZWNvbmRhcnknLCAnY29sb3JBY3Rpb24nLCAnY29sb3JFcnJvcicsICdjb2xvckRpc2FibGVkJywgJ2ZvbnRTaXplSW5oZXJpdCcsICdmb250U2l6ZVNtYWxsJywgJ2ZvbnRTaXplTWVkaXVtJywgJ2ZvbnRTaXplTGFyZ2UnXSk7XG5leHBvcnQgZGVmYXVsdCBpY29uQ2xhc3NlczsiLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJiYXNlQ2xhc3NOYW1lXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29sb3JcIiwgXCJjb21wb25lbnRcIiwgXCJmb250U2l6ZVwiXTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCBjb21wb3NlQ2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2NvbXBvc2VDbGFzc2VzJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnLi4vc3R5bGVzL3N0eWxlZCc7XG5pbXBvcnQgeyB1c2VEZWZhdWx0UHJvcHMgfSBmcm9tICcuLi9EZWZhdWx0UHJvcHNQcm92aWRlcic7XG5pbXBvcnQgY2FwaXRhbGl6ZSBmcm9tICcuLi91dGlscy9jYXBpdGFsaXplJztcbmltcG9ydCB7IGdldEljb25VdGlsaXR5Q2xhc3MgfSBmcm9tICcuL2ljb25DbGFzc2VzJztcbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5jb25zdCB1c2VVdGlsaXR5Q2xhc3NlcyA9IG93bmVyU3RhdGUgPT4ge1xuICBjb25zdCB7XG4gICAgY29sb3IsXG4gICAgZm9udFNpemUsXG4gICAgY2xhc3Nlc1xuICB9ID0gb3duZXJTdGF0ZTtcbiAgY29uc3Qgc2xvdHMgPSB7XG4gICAgcm9vdDogWydyb290JywgY29sb3IgIT09ICdpbmhlcml0JyAmJiBgY29sb3Ike2NhcGl0YWxpemUoY29sb3IpfWAsIGBmb250U2l6ZSR7Y2FwaXRhbGl6ZShmb250U2l6ZSl9YF1cbiAgfTtcbiAgcmV0dXJuIGNvbXBvc2VDbGFzc2VzKHNsb3RzLCBnZXRJY29uVXRpbGl0eUNsYXNzLCBjbGFzc2VzKTtcbn07XG5jb25zdCBJY29uUm9vdCA9IHN0eWxlZCgnc3BhbicsIHtcbiAgbmFtZTogJ011aUljb24nLFxuICBzbG90OiAnUm9vdCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9ID0gcHJvcHM7XG4gICAgcmV0dXJuIFtzdHlsZXMucm9vdCwgb3duZXJTdGF0ZS5jb2xvciAhPT0gJ2luaGVyaXQnICYmIHN0eWxlc1tgY29sb3Ike2NhcGl0YWxpemUob3duZXJTdGF0ZS5jb2xvcil9YF0sIHN0eWxlc1tgZm9udFNpemUke2NhcGl0YWxpemUob3duZXJTdGF0ZS5mb250U2l6ZSl9YF1dO1xuICB9XG59KSgoe1xuICB0aGVtZSxcbiAgb3duZXJTdGF0ZVxufSkgPT4gKHtcbiAgdXNlclNlbGVjdDogJ25vbmUnLFxuICB3aWR0aDogJzFlbScsXG4gIGhlaWdodDogJzFlbScsXG4gIC8vIENocm9tZSBmaXggZm9yIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTgyMDU0MVxuICAvLyBUbyByZW1vdmUgYXQgc29tZSBwb2ludC5cbiAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxuICBkaXNwbGF5OiAnaW5saW5lLWJsb2NrJyxcbiAgLy8gYWxsb3cgb3ZlcmZsb3cgaGlkZGVuIHRvIHRha2UgYWN0aW9uXG4gIHRleHRBbGlnbjogJ2NlbnRlcicsXG4gIC8vIHN1cHBvcnQgbm9uLXNxdWFyZSBpY29uXG4gIGZsZXhTaHJpbms6IDAsXG4gIGZvbnRTaXplOiB7XG4gICAgaW5oZXJpdDogJ2luaGVyaXQnLFxuICAgIHNtYWxsOiB0aGVtZS50eXBvZ3JhcGh5LnB4VG9SZW0oMjApLFxuICAgIG1lZGl1bTogdGhlbWUudHlwb2dyYXBoeS5weFRvUmVtKDI0KSxcbiAgICBsYXJnZTogdGhlbWUudHlwb2dyYXBoeS5weFRvUmVtKDM2KVxuICB9W293bmVyU3RhdGUuZm9udFNpemVdLFxuICAvLyBUT0RPIHY1IGRlcHJlY2F0ZSwgdjYgcmVtb3ZlIGZvciBzeFxuICBjb2xvcjoge1xuICAgIHByaW1hcnk6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlLnByaW1hcnkubWFpbixcbiAgICBzZWNvbmRhcnk6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlLnNlY29uZGFyeS5tYWluLFxuICAgIGluZm86ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlLmluZm8ubWFpbixcbiAgICBzdWNjZXNzOiAodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZS5zdWNjZXNzLm1haW4sXG4gICAgd2FybmluZzogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGUud2FybmluZy5tYWluLFxuICAgIGFjdGlvbjogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGUuYWN0aW9uLmFjdGl2ZSxcbiAgICBlcnJvcjogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGUuZXJyb3IubWFpbixcbiAgICBkaXNhYmxlZDogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGUuYWN0aW9uLmRpc2FibGVkLFxuICAgIGluaGVyaXQ6IHVuZGVmaW5lZFxuICB9W293bmVyU3RhdGUuY29sb3JdXG59KSk7XG5jb25zdCBJY29uID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gSWNvbihpblByb3BzLCByZWYpIHtcbiAgY29uc3QgcHJvcHMgPSB1c2VEZWZhdWx0UHJvcHMoe1xuICAgIHByb3BzOiBpblByb3BzLFxuICAgIG5hbWU6ICdNdWlJY29uJ1xuICB9KTtcbiAgY29uc3Qge1xuICAgICAgYmFzZUNsYXNzTmFtZSA9ICdtYXRlcmlhbC1pY29ucycsXG4gICAgICBjbGFzc05hbWUsXG4gICAgICBjb2xvciA9ICdpbmhlcml0JyxcbiAgICAgIGNvbXBvbmVudDogQ29tcG9uZW50ID0gJ3NwYW4nLFxuICAgICAgZm9udFNpemUgPSAnbWVkaXVtJ1xuICAgIH0gPSBwcm9wcyxcbiAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQpO1xuICBjb25zdCBvd25lclN0YXRlID0gX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgYmFzZUNsYXNzTmFtZSxcbiAgICBjb2xvcixcbiAgICBjb21wb25lbnQ6IENvbXBvbmVudCxcbiAgICBmb250U2l6ZVxuICB9KTtcbiAgY29uc3QgY2xhc3NlcyA9IHVzZVV0aWxpdHlDbGFzc2VzKG93bmVyU3RhdGUpO1xuICByZXR1cm4gLyojX19QVVJFX18qL19qc3goSWNvblJvb3QsIF9leHRlbmRzKHtcbiAgICBhczogQ29tcG9uZW50LFxuICAgIGNsYXNzTmFtZTogY2xzeChiYXNlQ2xhc3NOYW1lLFxuICAgIC8vIFByZXZlbnQgdGhlIHRyYW5zbGF0aW9uIG9mIHRoZSB0ZXh0IGNvbnRlbnQuXG4gICAgLy8gVGhlIGZvbnQgcmVsaWVzIG9uIHRoZSBleGFjdCB0ZXh0IGNvbnRlbnQgdG8gcmVuZGVyIHRoZSBpY29uLlxuICAgICdub3RyYW5zbGF0ZScsIGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lKSxcbiAgICBvd25lclN0YXRlOiBvd25lclN0YXRlLFxuICAgIFwiYXJpYS1oaWRkZW5cIjogdHJ1ZSxcbiAgICByZWY6IHJlZlxuICB9LCBvdGhlcikpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBJY29uLnByb3BUeXBlcyAvKiByZW1vdmUtcHJvcHR5cGVzICovID0ge1xuICAvLyDilIzilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIAgV2FybmluZyDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJBcbiAgLy8g4pSCIFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucy4g4pSCXG4gIC8vIOKUgiAgICBUbyB1cGRhdGUgdGhlbSwgZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gYHBucG0gcHJvcHR5cGVzYC4gICAgIOKUglxuICAvLyDilJTilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJhcbiAgLyoqXG4gICAqIFRoZSBiYXNlIGNsYXNzIGFwcGxpZWQgdG8gdGhlIGljb24uIERlZmF1bHRzIHRvICdtYXRlcmlhbC1pY29ucycsIGJ1dCBjYW4gYmUgY2hhbmdlZCB0byBhbnlcbiAgICogb3RoZXIgYmFzZSBjbGFzcyB0aGF0IHN1aXRzIHRoZSBpY29uIGZvbnQgeW91J3JlIHVzaW5nIChmb3IgZXhhbXBsZSBtYXRlcmlhbC1pY29ucy1yb3VuZGVkLCBmYXMsIGV0YykuXG4gICAqIEBkZWZhdWx0ICdtYXRlcmlhbC1pY29ucydcbiAgICovXG4gIGJhc2VDbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBUaGUgbmFtZSBvZiB0aGUgaWNvbiBmb250IGxpZ2F0dXJlLlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIFRoZSBjb2xvciBvZiB0aGUgY29tcG9uZW50LlxuICAgKiBJdCBzdXBwb3J0cyBib3RoIGRlZmF1bHQgYW5kIGN1c3RvbSB0aGVtZSBjb2xvcnMsIHdoaWNoIGNhbiBiZSBhZGRlZCBhcyBzaG93biBpbiB0aGVcbiAgICogW3BhbGV0dGUgY3VzdG9taXphdGlvbiBndWlkZV0oaHR0cHM6Ly9tdWkuY29tL21hdGVyaWFsLXVpL2N1c3RvbWl6YXRpb24vcGFsZXR0ZS8jY3VzdG9tLWNvbG9ycykuXG4gICAqIEBkZWZhdWx0ICdpbmhlcml0J1xuICAgKi9cbiAgY29sb3I6IFByb3BUeXBlcyAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsnaW5oZXJpdCcsICdhY3Rpb24nLCAnZGlzYWJsZWQnLCAncHJpbWFyeScsICdzZWNvbmRhcnknLCAnZXJyb3InLCAnaW5mbycsICdzdWNjZXNzJywgJ3dhcm5pbmcnXSksIFByb3BUeXBlcy5zdHJpbmddKSxcbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHJvb3Qgbm9kZS5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIEhUTUwgZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuICAvKipcbiAgICogVGhlIGZvbnRTaXplIGFwcGxpZWQgdG8gdGhlIGljb24uIERlZmF1bHRzIHRvIDI0cHgsIGJ1dCBjYW4gYmUgY29uZmlndXJlIHRvIGluaGVyaXQgZm9udCBzaXplLlxuICAgKiBAZGVmYXVsdCAnbWVkaXVtJ1xuICAgKi9cbiAgZm9udFNpemU6IFByb3BUeXBlcyAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsnaW5oZXJpdCcsICdsYXJnZScsICdtZWRpdW0nLCAnc21hbGwnXSksIFByb3BUeXBlcy5zdHJpbmddKSxcbiAgLyoqXG4gICAqIFRoZSBzeXN0ZW0gcHJvcCB0aGF0IGFsbG93cyBkZWZpbmluZyBzeXN0ZW0gb3ZlcnJpZGVzIGFzIHdlbGwgYXMgYWRkaXRpb25hbCBDU1Mgc3R5bGVzLlxuICAgKi9cbiAgc3g6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuYm9vbF0pKSwgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKVxufSA6IHZvaWQgMDtcbkljb24ubXVpTmFtZSA9ICdJY29uJztcbmV4cG9ydCBkZWZhdWx0IEljb247IiwiaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzc2VzJztcbmltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzJztcbmV4cG9ydCBmdW5jdGlvbiBnZXRJbWFnZUxpc3RVdGlsaXR5Q2xhc3Moc2xvdCkge1xuICByZXR1cm4gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoJ011aUltYWdlTGlzdCcsIHNsb3QpO1xufVxuY29uc3QgaW1hZ2VMaXN0Q2xhc3NlcyA9IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMoJ011aUltYWdlTGlzdCcsIFsncm9vdCcsICdtYXNvbnJ5JywgJ3F1aWx0ZWQnLCAnc3RhbmRhcmQnLCAnd292ZW4nXSk7XG5leHBvcnQgZGVmYXVsdCBpbWFnZUxpc3RDbGFzc2VzOyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG4vKipcbiAqIEBpZ25vcmUgLSBpbnRlcm5hbCBjb21wb25lbnQuXG4gKiBAdHlwZSB7UmVhY3QuQ29udGV4dDx7fSB8IHtleHBhbmRlZDogYm9vbGVhbiwgZGlzYWJsZWQ6IGJvb2xlYW4sIHRvZ2dsZTogKCkgPT4gdm9pZH0+fVxuICovXG5jb25zdCBJbWFnZUxpc3RDb250ZXh0ID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUNvbnRleHQoe30pO1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgSW1hZ2VMaXN0Q29udGV4dC5kaXNwbGF5TmFtZSA9ICdJbWFnZUxpc3RDb250ZXh0Jztcbn1cbmV4cG9ydCBkZWZhdWx0IEltYWdlTGlzdENvbnRleHQ7IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiY2hpbGRyZW5cIiwgXCJjbGFzc05hbWVcIiwgXCJjb2xzXCIsIFwiY29tcG9uZW50XCIsIFwicm93SGVpZ2h0XCIsIFwiZ2FwXCIsIFwic3R5bGVcIiwgXCJ2YXJpYW50XCJdO1xuaW1wb3J0IGNvbXBvc2VDbGFzc2VzIGZyb20gJ0BtdWkvdXRpbHMvY29tcG9zZUNsYXNzZXMnO1xuaW1wb3J0IGludGVnZXJQcm9wVHlwZSBmcm9tICdAbXVpL3V0aWxzL2ludGVnZXJQcm9wVHlwZSc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJy4uL3N0eWxlcy9zdHlsZWQnO1xuaW1wb3J0IHsgdXNlRGVmYXVsdFByb3BzIH0gZnJvbSAnLi4vRGVmYXVsdFByb3BzUHJvdmlkZXInO1xuaW1wb3J0IHsgZ2V0SW1hZ2VMaXN0VXRpbGl0eUNsYXNzIH0gZnJvbSAnLi9pbWFnZUxpc3RDbGFzc2VzJztcbmltcG9ydCBJbWFnZUxpc3RDb250ZXh0IGZyb20gJy4vSW1hZ2VMaXN0Q29udGV4dCc7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuY29uc3QgdXNlVXRpbGl0eUNsYXNzZXMgPSBvd25lclN0YXRlID0+IHtcbiAgY29uc3Qge1xuICAgIGNsYXNzZXMsXG4gICAgdmFyaWFudFxuICB9ID0gb3duZXJTdGF0ZTtcbiAgY29uc3Qgc2xvdHMgPSB7XG4gICAgcm9vdDogWydyb290JywgdmFyaWFudF1cbiAgfTtcbiAgcmV0dXJuIGNvbXBvc2VDbGFzc2VzKHNsb3RzLCBnZXRJbWFnZUxpc3RVdGlsaXR5Q2xhc3MsIGNsYXNzZXMpO1xufTtcbmNvbnN0IEltYWdlTGlzdFJvb3QgPSBzdHlsZWQoJ3VsJywge1xuICBuYW1lOiAnTXVpSW1hZ2VMaXN0JyxcbiAgc2xvdDogJ1Jvb3QnLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBvd25lclN0YXRlXG4gICAgfSA9IHByb3BzO1xuICAgIHJldHVybiBbc3R5bGVzLnJvb3QsIHN0eWxlc1tvd25lclN0YXRlLnZhcmlhbnRdXTtcbiAgfVxufSkoKHtcbiAgb3duZXJTdGF0ZVxufSkgPT4ge1xuICByZXR1cm4gX2V4dGVuZHMoe1xuICAgIGRpc3BsYXk6ICdncmlkJyxcbiAgICBvdmVyZmxvd1k6ICdhdXRvJyxcbiAgICBsaXN0U3R5bGU6ICdub25lJyxcbiAgICBwYWRkaW5nOiAwLFxuICAgIC8vIEFkZCBpT1MgbW9tZW50dW0gc2Nyb2xsaW5nIGZvciBpT1MgPCAxMy4wXG4gICAgV2Via2l0T3ZlcmZsb3dTY3JvbGxpbmc6ICd0b3VjaCdcbiAgfSwgb3duZXJTdGF0ZS52YXJpYW50ID09PSAnbWFzb25yeScgJiYge1xuICAgIGRpc3BsYXk6ICdibG9jaydcbiAgfSk7XG59KTtcbmNvbnN0IEltYWdlTGlzdCA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIEltYWdlTGlzdChpblByb3BzLCByZWYpIHtcbiAgY29uc3QgcHJvcHMgPSB1c2VEZWZhdWx0UHJvcHMoe1xuICAgIHByb3BzOiBpblByb3BzLFxuICAgIG5hbWU6ICdNdWlJbWFnZUxpc3QnXG4gIH0pO1xuICBjb25zdCB7XG4gICAgICBjaGlsZHJlbixcbiAgICAgIGNsYXNzTmFtZSxcbiAgICAgIGNvbHMgPSAyLFxuICAgICAgY29tcG9uZW50ID0gJ3VsJyxcbiAgICAgIHJvd0hlaWdodCA9ICdhdXRvJyxcbiAgICAgIGdhcCA9IDQsXG4gICAgICBzdHlsZTogc3R5bGVQcm9wLFxuICAgICAgdmFyaWFudCA9ICdzdGFuZGFyZCdcbiAgICB9ID0gcHJvcHMsXG4gICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkKTtcbiAgY29uc3QgY29udGV4dFZhbHVlID0gUmVhY3QudXNlTWVtbygoKSA9PiAoe1xuICAgIHJvd0hlaWdodCxcbiAgICBnYXAsXG4gICAgdmFyaWFudFxuICB9KSwgW3Jvd0hlaWdodCwgZ2FwLCB2YXJpYW50XSk7XG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIC8vIERldGVjdCBJbnRlcm5ldCBFeHBsb3JlciA4K1xuICAgICAgaWYgKGRvY3VtZW50ICE9PSB1bmRlZmluZWQgJiYgJ29iamVjdEZpdCcgaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlID09PSBmYWxzZSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFsnTVVJOiBJbWFnZUxpc3QgdjUrIG5vIGxvbmdlciBuYXRpdmVseSBzdXBwb3J0cyBJbnRlcm5ldCBFeHBsb3Jlci4nLCAnVXNlIHY0IG9mIHRoaXMgY29tcG9uZW50IGluc3RlYWQsIG9yIHBvbHlmaWxsIENTUyBvYmplY3QtZml0LiddLmpvaW4oJ1xcbicpKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIFtdKTtcbiAgY29uc3Qgc3R5bGUgPSB2YXJpYW50ID09PSAnbWFzb25yeScgPyBfZXh0ZW5kcyh7XG4gICAgY29sdW1uQ291bnQ6IGNvbHMsXG4gICAgY29sdW1uR2FwOiBnYXBcbiAgfSwgc3R5bGVQcm9wKSA6IF9leHRlbmRzKHtcbiAgICBncmlkVGVtcGxhdGVDb2x1bW5zOiBgcmVwZWF0KCR7Y29sc30sIDFmcilgLFxuICAgIGdhcFxuICB9LCBzdHlsZVByb3ApO1xuICBjb25zdCBvd25lclN0YXRlID0gX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgY29tcG9uZW50LFxuICAgIGdhcCxcbiAgICByb3dIZWlnaHQsXG4gICAgdmFyaWFudFxuICB9KTtcbiAgY29uc3QgY2xhc3NlcyA9IHVzZVV0aWxpdHlDbGFzc2VzKG93bmVyU3RhdGUpO1xuICByZXR1cm4gLyojX19QVVJFX18qL19qc3goSW1hZ2VMaXN0Um9vdCwgX2V4dGVuZHMoe1xuICAgIGFzOiBjb21wb25lbnQsXG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3Nlc1t2YXJpYW50XSwgY2xhc3NOYW1lKSxcbiAgICByZWY6IHJlZixcbiAgICBzdHlsZTogc3R5bGUsXG4gICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZVxuICB9LCBvdGhlciwge1xuICAgIGNoaWxkcmVuOiAvKiNfX1BVUkVfXyovX2pzeChJbWFnZUxpc3RDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgICB2YWx1ZTogY29udGV4dFZhbHVlLFxuICAgICAgY2hpbGRyZW46IGNoaWxkcmVuXG4gICAgfSlcbiAgfSkpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBJbWFnZUxpc3QucHJvcFR5cGVzIC8qIHJlbW92ZS1wcm9wdHlwZXMgKi8gPSB7XG4gIC8vIOKUjOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgCBXYXJuaW5nIOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUkFxuICAvLyDilIIgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zLiDilIJcbiAgLy8g4pSCICAgIFRvIHVwZGF0ZSB0aGVtLCBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBgcG5wbSBwcm9wdHlwZXNgLiAgICAg4pSCXG4gIC8vIOKUlOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUmFxuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGNvbXBvbmVudCwgbm9ybWFsbHkgYEltYWdlTGlzdEl0ZW1gcy5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqLy5ub2RlLmlzUmVxdWlyZWQsXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogTnVtYmVyIG9mIGNvbHVtbnMuXG4gICAqIEBkZWZhdWx0IDJcbiAgICovXG4gIGNvbHM6IGludGVnZXJQcm9wVHlwZSxcbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHJvb3Qgbm9kZS5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIEhUTUwgZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuICAvKipcbiAgICogVGhlIGdhcCBiZXR3ZWVuIGl0ZW1zIGluIHB4LlxuICAgKiBAZGVmYXVsdCA0XG4gICAqL1xuICBnYXA6IFByb3BUeXBlcy5udW1iZXIsXG4gIC8qKlxuICAgKiBUaGUgaGVpZ2h0IG9mIG9uZSByb3cgaW4gcHguXG4gICAqIEBkZWZhdWx0ICdhdXRvJ1xuICAgKi9cbiAgcm93SGVpZ2h0OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydhdXRvJ10pLCBQcm9wVHlwZXMubnVtYmVyXSksXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBzdHlsZTogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqXG4gICAqIFRoZSBzeXN0ZW0gcHJvcCB0aGF0IGFsbG93cyBkZWZpbmluZyBzeXN0ZW0gb3ZlcnJpZGVzIGFzIHdlbGwgYXMgYWRkaXRpb25hbCBDU1Mgc3R5bGVzLlxuICAgKi9cbiAgc3g6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuYm9vbF0pKSwgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKSxcbiAgLyoqXG4gICAqIFRoZSB2YXJpYW50IHRvIHVzZS5cbiAgICogQGRlZmF1bHQgJ3N0YW5kYXJkJ1xuICAgKi9cbiAgdmFyaWFudDogUHJvcFR5cGVzIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi8ub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydtYXNvbnJ5JywgJ3F1aWx0ZWQnLCAnc3RhbmRhcmQnLCAnd292ZW4nXSksIFByb3BUeXBlcy5zdHJpbmddKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IEltYWdlTGlzdDsiLCJpbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzZXMnO1xuaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3MnO1xuZXhwb3J0IGZ1bmN0aW9uIGdldEltYWdlTGlzdEl0ZW1VdGlsaXR5Q2xhc3Moc2xvdCkge1xuICByZXR1cm4gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoJ011aUltYWdlTGlzdEl0ZW0nLCBzbG90KTtcbn1cbmNvbnN0IGltYWdlTGlzdEl0ZW1DbGFzc2VzID0gZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcygnTXVpSW1hZ2VMaXN0SXRlbScsIFsncm9vdCcsICdpbWcnLCAnc3RhbmRhcmQnLCAnd292ZW4nLCAnbWFzb25yeScsICdxdWlsdGVkJ10pO1xuZXhwb3J0IGRlZmF1bHQgaW1hZ2VMaXN0SXRlbUNsYXNzZXM7IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiY2hpbGRyZW5cIiwgXCJjbGFzc05hbWVcIiwgXCJjb2xzXCIsIFwiY29tcG9uZW50XCIsIFwicm93c1wiLCBcInN0eWxlXCJdO1xuaW1wb3J0IGNvbXBvc2VDbGFzc2VzIGZyb20gJ0BtdWkvdXRpbHMvY29tcG9zZUNsYXNzZXMnO1xuaW1wb3J0IGludGVnZXJQcm9wVHlwZSBmcm9tICdAbXVpL3V0aWxzL2ludGVnZXJQcm9wVHlwZSc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBpc0ZyYWdtZW50IH0gZnJvbSAncmVhY3QtaXMnO1xuaW1wb3J0IEltYWdlTGlzdENvbnRleHQgZnJvbSAnLi4vSW1hZ2VMaXN0L0ltYWdlTGlzdENvbnRleHQnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICcuLi9zdHlsZXMvc3R5bGVkJztcbmltcG9ydCB7IHVzZURlZmF1bHRQcm9wcyB9IGZyb20gJy4uL0RlZmF1bHRQcm9wc1Byb3ZpZGVyJztcbmltcG9ydCBpc011aUVsZW1lbnQgZnJvbSAnLi4vdXRpbHMvaXNNdWlFbGVtZW50JztcbmltcG9ydCBpbWFnZUxpc3RJdGVtQ2xhc3NlcywgeyBnZXRJbWFnZUxpc3RJdGVtVXRpbGl0eUNsYXNzIH0gZnJvbSAnLi9pbWFnZUxpc3RJdGVtQ2xhc3Nlcyc7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuY29uc3QgdXNlVXRpbGl0eUNsYXNzZXMgPSBvd25lclN0YXRlID0+IHtcbiAgY29uc3Qge1xuICAgIGNsYXNzZXMsXG4gICAgdmFyaWFudFxuICB9ID0gb3duZXJTdGF0ZTtcbiAgY29uc3Qgc2xvdHMgPSB7XG4gICAgcm9vdDogWydyb290JywgdmFyaWFudF0sXG4gICAgaW1nOiBbJ2ltZyddXG4gIH07XG4gIHJldHVybiBjb21wb3NlQ2xhc3NlcyhzbG90cywgZ2V0SW1hZ2VMaXN0SXRlbVV0aWxpdHlDbGFzcywgY2xhc3Nlcyk7XG59O1xuY29uc3QgSW1hZ2VMaXN0SXRlbVJvb3QgPSBzdHlsZWQoJ2xpJywge1xuICBuYW1lOiAnTXVpSW1hZ2VMaXN0SXRlbScsXG4gIHNsb3Q6ICdSb290JyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgb3duZXJTdGF0ZVxuICAgIH0gPSBwcm9wcztcbiAgICByZXR1cm4gW3tcbiAgICAgIFtgJiAuJHtpbWFnZUxpc3RJdGVtQ2xhc3Nlcy5pbWd9YF06IHN0eWxlcy5pbWdcbiAgICB9LCBzdHlsZXMucm9vdCwgc3R5bGVzW293bmVyU3RhdGUudmFyaWFudF1dO1xuICB9XG59KSgoe1xuICBvd25lclN0YXRlXG59KSA9PiBfZXh0ZW5kcyh7XG4gIGRpc3BsYXk6ICdibG9jaycsXG4gIHBvc2l0aW9uOiAncmVsYXRpdmUnXG59LCBvd25lclN0YXRlLnZhcmlhbnQgPT09ICdzdGFuZGFyZCcgJiYge1xuICAvLyBGb3IgdGl0bGViYXIgdW5kZXIgbGlzdCBpdGVtXG4gIGRpc3BsYXk6ICdmbGV4JyxcbiAgZmxleERpcmVjdGlvbjogJ2NvbHVtbidcbn0sIG93bmVyU3RhdGUudmFyaWFudCA9PT0gJ3dvdmVuJyAmJiB7XG4gIGhlaWdodDogJzEwMCUnLFxuICBhbGlnblNlbGY6ICdjZW50ZXInLFxuICAnJjpudGgtb2YtdHlwZShldmVuKSc6IHtcbiAgICBoZWlnaHQ6ICc3MCUnXG4gIH1cbn0sIHtcbiAgW2AmIC4ke2ltYWdlTGlzdEl0ZW1DbGFzc2VzLmltZ31gXTogX2V4dGVuZHMoe1xuICAgIG9iamVjdEZpdDogJ2NvdmVyJyxcbiAgICB3aWR0aDogJzEwMCUnLFxuICAgIGhlaWdodDogJzEwMCUnLFxuICAgIGRpc3BsYXk6ICdibG9jaydcbiAgfSwgb3duZXJTdGF0ZS52YXJpYW50ID09PSAnc3RhbmRhcmQnICYmIHtcbiAgICBoZWlnaHQ6ICdhdXRvJyxcbiAgICBmbGV4R3JvdzogMVxuICB9KVxufSkpO1xuY29uc3QgSW1hZ2VMaXN0SXRlbSA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIEltYWdlTGlzdEl0ZW0oaW5Qcm9wcywgcmVmKSB7XG4gIGNvbnN0IHByb3BzID0gdXNlRGVmYXVsdFByb3BzKHtcbiAgICBwcm9wczogaW5Qcm9wcyxcbiAgICBuYW1lOiAnTXVpSW1hZ2VMaXN0SXRlbSdcbiAgfSk7XG5cbiAgLy8gVE9ETzogLSBVc2UganNkb2MgQGRlZmF1bHQ/OiBcImNvbHMgcm93cyBkZWZhdWx0IHZhbHVlcyBhcmUgZm9yIGRvY3Mgb25seVwiXG4gIGNvbnN0IHtcbiAgICAgIGNoaWxkcmVuLFxuICAgICAgY2xhc3NOYW1lLFxuICAgICAgY29scyA9IDEsXG4gICAgICBjb21wb25lbnQgPSAnbGknLFxuICAgICAgcm93cyA9IDEsXG4gICAgICBzdHlsZVxuICAgIH0gPSBwcm9wcyxcbiAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQpO1xuICBjb25zdCB7XG4gICAgcm93SGVpZ2h0ID0gJ2F1dG8nLFxuICAgIGdhcCxcbiAgICB2YXJpYW50XG4gIH0gPSBSZWFjdC51c2VDb250ZXh0KEltYWdlTGlzdENvbnRleHQpO1xuICBsZXQgaGVpZ2h0ID0gJ2F1dG8nO1xuICBpZiAodmFyaWFudCA9PT0gJ3dvdmVuJykge1xuICAgIGhlaWdodCA9IHVuZGVmaW5lZDtcbiAgfSBlbHNlIGlmIChyb3dIZWlnaHQgIT09ICdhdXRvJykge1xuICAgIGhlaWdodCA9IHJvd0hlaWdodCAqIHJvd3MgKyBnYXAgKiAocm93cyAtIDEpO1xuICB9XG4gIGNvbnN0IG93bmVyU3RhdGUgPSBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICBjb2xzLFxuICAgIGNvbXBvbmVudCxcbiAgICBnYXAsXG4gICAgcm93SGVpZ2h0LFxuICAgIHJvd3MsXG4gICAgdmFyaWFudFxuICB9KTtcbiAgY29uc3QgY2xhc3NlcyA9IHVzZVV0aWxpdHlDbGFzc2VzKG93bmVyU3RhdGUpO1xuICByZXR1cm4gLyojX19QVVJFX18qL19qc3goSW1hZ2VMaXN0SXRlbVJvb3QsIF9leHRlbmRzKHtcbiAgICBhczogY29tcG9uZW50LFxuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzZXNbdmFyaWFudF0sIGNsYXNzTmFtZSksXG4gICAgcmVmOiByZWYsXG4gICAgc3R5bGU6IF9leHRlbmRzKHtcbiAgICAgIGhlaWdodCxcbiAgICAgIGdyaWRDb2x1bW5FbmQ6IHZhcmlhbnQgIT09ICdtYXNvbnJ5JyA/IGBzcGFuICR7Y29sc31gIDogdW5kZWZpbmVkLFxuICAgICAgZ3JpZFJvd0VuZDogdmFyaWFudCAhPT0gJ21hc29ucnknID8gYHNwYW4gJHtyb3dzfWAgOiB1bmRlZmluZWQsXG4gICAgICBtYXJnaW5Cb3R0b206IHZhcmlhbnQgPT09ICdtYXNvbnJ5JyA/IGdhcCA6IHVuZGVmaW5lZCxcbiAgICAgIGJyZWFrSW5zaWRlOiB2YXJpYW50ID09PSAnbWFzb25yeScgPyAnYXZvaWQnIDogdW5kZWZpbmVkXG4gICAgfSwgc3R5bGUpLFxuICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGVcbiAgfSwgb3RoZXIsIHtcbiAgICBjaGlsZHJlbjogUmVhY3QuQ2hpbGRyZW4ubWFwKGNoaWxkcmVuLCBjaGlsZCA9PiB7XG4gICAgICBpZiAoISAvKiNfX1BVUkVfXyovUmVhY3QuaXNWYWxpZEVsZW1lbnQoY2hpbGQpKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgaWYgKGlzRnJhZ21lbnQoY2hpbGQpKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihbXCJNVUk6IFRoZSBJbWFnZUxpc3RJdGVtIGNvbXBvbmVudCBkb2Vzbid0IGFjY2VwdCBhIEZyYWdtZW50IGFzIGEgY2hpbGQuXCIsICdDb25zaWRlciBwcm92aWRpbmcgYW4gYXJyYXkgaW5zdGVhZC4nXS5qb2luKCdcXG4nKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChjaGlsZC50eXBlID09PSAnaW1nJyB8fCBpc011aUVsZW1lbnQoY2hpbGQsIFsnSW1hZ2UnXSkpIHtcbiAgICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jbG9uZUVsZW1lbnQoY2hpbGQsIHtcbiAgICAgICAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5pbWcsIGNoaWxkLnByb3BzLmNsYXNzTmFtZSlcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gY2hpbGQ7XG4gICAgfSlcbiAgfSkpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBJbWFnZUxpc3RJdGVtLnByb3BUeXBlcyAvKiByZW1vdmUtcHJvcHR5cGVzICovID0ge1xuICAvLyDilIzilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIAgV2FybmluZyDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJBcbiAgLy8g4pSCIFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucy4g4pSCXG4gIC8vIOKUgiAgICBUbyB1cGRhdGUgdGhlbSwgZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gYHBucG0gcHJvcHR5cGVzYC4gICAgIOKUglxuICAvLyDilJTilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJhcbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBjb21wb25lbnQsIG5vcm1hbGx5IGFuIGA8aW1nPmAuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogV2lkdGggb2YgdGhlIGl0ZW0gaW4gbnVtYmVyIG9mIGdyaWQgY29sdW1ucy5cbiAgICogQGRlZmF1bHQgMVxuICAgKi9cbiAgY29sczogaW50ZWdlclByb3BUeXBlLFxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgcm9vdCBub2RlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgSFRNTCBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKi9cbiAgY29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG4gIC8qKlxuICAgKiBIZWlnaHQgb2YgdGhlIGl0ZW0gaW4gbnVtYmVyIG9mIGdyaWQgcm93cy5cbiAgICogQGRlZmF1bHQgMVxuICAgKi9cbiAgcm93czogaW50ZWdlclByb3BUeXBlLFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgc3R5bGU6IFByb3BUeXBlcy5vYmplY3QsXG4gIC8qKlxuICAgKiBUaGUgc3lzdGVtIHByb3AgdGhhdCBhbGxvd3MgZGVmaW5pbmcgc3lzdGVtIG92ZXJyaWRlcyBhcyB3ZWxsIGFzIGFkZGl0aW9uYWwgQ1NTIHN0eWxlcy5cbiAgICovXG4gIHN4OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLmJvb2xdKSksIFByb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCBJbWFnZUxpc3RJdGVtOyIsImltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3Nlcyc7XG5pbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3MgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzcyc7XG5leHBvcnQgZnVuY3Rpb24gZ2V0SW1hZ2VMaXN0SXRlbUJhclV0aWxpdHlDbGFzcyhzbG90KSB7XG4gIHJldHVybiBnZW5lcmF0ZVV0aWxpdHlDbGFzcygnTXVpSW1hZ2VMaXN0SXRlbUJhcicsIHNsb3QpO1xufVxuY29uc3QgaW1hZ2VMaXN0SXRlbUJhckNsYXNzZXMgPSBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzKCdNdWlJbWFnZUxpc3RJdGVtQmFyJywgWydyb290JywgJ3Bvc2l0aW9uQm90dG9tJywgJ3Bvc2l0aW9uVG9wJywgJ3Bvc2l0aW9uQmVsb3cnLCAndGl0bGVXcmFwJywgJ3RpdGxlV3JhcEJvdHRvbScsICd0aXRsZVdyYXBUb3AnLCAndGl0bGVXcmFwQmVsb3cnLCAndGl0bGVXcmFwQWN0aW9uUG9zTGVmdCcsICd0aXRsZVdyYXBBY3Rpb25Qb3NSaWdodCcsICd0aXRsZScsICdzdWJ0aXRsZScsICdhY3Rpb25JY29uJywgJ2FjdGlvbkljb25BY3Rpb25Qb3NMZWZ0JywgJ2FjdGlvbkljb25BY3Rpb25Qb3NSaWdodCddKTtcbmV4cG9ydCBkZWZhdWx0IGltYWdlTGlzdEl0ZW1CYXJDbGFzc2VzOyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImFjdGlvbkljb25cIiwgXCJhY3Rpb25Qb3NpdGlvblwiLCBcImNsYXNzTmFtZVwiLCBcInN1YnRpdGxlXCIsIFwidGl0bGVcIiwgXCJwb3NpdGlvblwiXTtcbmltcG9ydCBjb21wb3NlQ2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2NvbXBvc2VDbGFzc2VzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBzdHlsZWQgZnJvbSAnLi4vc3R5bGVzL3N0eWxlZCc7XG5pbXBvcnQgeyB1c2VEZWZhdWx0UHJvcHMgfSBmcm9tICcuLi9EZWZhdWx0UHJvcHNQcm92aWRlcic7XG5pbXBvcnQgY2FwaXRhbGl6ZSBmcm9tICcuLi91dGlscy9jYXBpdGFsaXplJztcbmltcG9ydCB7IGdldEltYWdlTGlzdEl0ZW1CYXJVdGlsaXR5Q2xhc3MgfSBmcm9tICcuL2ltYWdlTGlzdEl0ZW1CYXJDbGFzc2VzJztcbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5pbXBvcnQgeyBqc3hzIGFzIF9qc3hzIH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5jb25zdCB1c2VVdGlsaXR5Q2xhc3NlcyA9IG93bmVyU3RhdGUgPT4ge1xuICBjb25zdCB7XG4gICAgY2xhc3NlcyxcbiAgICBwb3NpdGlvbixcbiAgICBhY3Rpb25JY29uLFxuICAgIGFjdGlvblBvc2l0aW9uXG4gIH0gPSBvd25lclN0YXRlO1xuICBjb25zdCBzbG90cyA9IHtcbiAgICByb290OiBbJ3Jvb3QnLCBgcG9zaXRpb24ke2NhcGl0YWxpemUocG9zaXRpb24pfWBdLFxuICAgIHRpdGxlV3JhcDogWyd0aXRsZVdyYXAnLCBgdGl0bGVXcmFwJHtjYXBpdGFsaXplKHBvc2l0aW9uKX1gLCBhY3Rpb25JY29uICYmIGB0aXRsZVdyYXBBY3Rpb25Qb3Mke2NhcGl0YWxpemUoYWN0aW9uUG9zaXRpb24pfWBdLFxuICAgIHRpdGxlOiBbJ3RpdGxlJ10sXG4gICAgc3VidGl0bGU6IFsnc3VidGl0bGUnXSxcbiAgICBhY3Rpb25JY29uOiBbJ2FjdGlvbkljb24nLCBgYWN0aW9uSWNvbkFjdGlvblBvcyR7Y2FwaXRhbGl6ZShhY3Rpb25Qb3NpdGlvbil9YF1cbiAgfTtcbiAgcmV0dXJuIGNvbXBvc2VDbGFzc2VzKHNsb3RzLCBnZXRJbWFnZUxpc3RJdGVtQmFyVXRpbGl0eUNsYXNzLCBjbGFzc2VzKTtcbn07XG5jb25zdCBJbWFnZUxpc3RJdGVtQmFyUm9vdCA9IHN0eWxlZCgnZGl2Jywge1xuICBuYW1lOiAnTXVpSW1hZ2VMaXN0SXRlbUJhcicsXG4gIHNsb3Q6ICdSb290JyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgb3duZXJTdGF0ZVxuICAgIH0gPSBwcm9wcztcbiAgICByZXR1cm4gW3N0eWxlcy5yb290LCBzdHlsZXNbYHBvc2l0aW9uJHtjYXBpdGFsaXplKG93bmVyU3RhdGUucG9zaXRpb24pfWBdXTtcbiAgfVxufSkoKHtcbiAgdGhlbWUsXG4gIG93bmVyU3RhdGVcbn0pID0+IHtcbiAgcmV0dXJuIF9leHRlbmRzKHtcbiAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICBsZWZ0OiAwLFxuICAgIHJpZ2h0OiAwLFxuICAgIGJhY2tncm91bmQ6ICdyZ2JhKDAsIDAsIDAsIDAuNSknLFxuICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICBmb250RmFtaWx5OiB0aGVtZS50eXBvZ3JhcGh5LmZvbnRGYW1pbHlcbiAgfSwgb3duZXJTdGF0ZS5wb3NpdGlvbiA9PT0gJ2JvdHRvbScgJiYge1xuICAgIGJvdHRvbTogMFxuICB9LCBvd25lclN0YXRlLnBvc2l0aW9uID09PSAndG9wJyAmJiB7XG4gICAgdG9wOiAwXG4gIH0sIG93bmVyU3RhdGUucG9zaXRpb24gPT09ICdiZWxvdycgJiYge1xuICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgIGJhY2tncm91bmQ6ICd0cmFuc3BhcmVudCcsXG4gICAgYWxpZ25JdGVtczogJ25vcm1hbCdcbiAgfSk7XG59KTtcbmNvbnN0IEltYWdlTGlzdEl0ZW1CYXJUaXRsZVdyYXAgPSBzdHlsZWQoJ2RpdicsIHtcbiAgbmFtZTogJ011aUltYWdlTGlzdEl0ZW1CYXInLFxuICBzbG90OiAnVGl0bGVXcmFwJyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgb3duZXJTdGF0ZVxuICAgIH0gPSBwcm9wcztcbiAgICByZXR1cm4gW3N0eWxlcy50aXRsZVdyYXAsIHN0eWxlc1tgdGl0bGVXcmFwJHtjYXBpdGFsaXplKG93bmVyU3RhdGUucG9zaXRpb24pfWBdLCBvd25lclN0YXRlLmFjdGlvbkljb24gJiYgc3R5bGVzW2B0aXRsZVdyYXBBY3Rpb25Qb3Mke2NhcGl0YWxpemUob3duZXJTdGF0ZS5hY3Rpb25Qb3NpdGlvbil9YF1dO1xuICB9XG59KSgoe1xuICB0aGVtZSxcbiAgb3duZXJTdGF0ZVxufSkgPT4ge1xuICByZXR1cm4gX2V4dGVuZHMoe1xuICAgIGZsZXhHcm93OiAxLFxuICAgIHBhZGRpbmc6ICcxMnB4IDE2cHgnLFxuICAgIGNvbG9yOiAodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZS5jb21tb24ud2hpdGUsXG4gICAgb3ZlcmZsb3c6ICdoaWRkZW4nXG4gIH0sIG93bmVyU3RhdGUucG9zaXRpb24gPT09ICdiZWxvdycgJiYge1xuICAgIHBhZGRpbmc6ICc2cHggMCAxMnB4JyxcbiAgICBjb2xvcjogJ2luaGVyaXQnXG4gIH0sIG93bmVyU3RhdGUuYWN0aW9uSWNvbiAmJiBvd25lclN0YXRlLmFjdGlvblBvc2l0aW9uID09PSAnbGVmdCcgJiYge1xuICAgIHBhZGRpbmdMZWZ0OiAwXG4gIH0sIG93bmVyU3RhdGUuYWN0aW9uSWNvbiAmJiBvd25lclN0YXRlLmFjdGlvblBvc2l0aW9uID09PSAncmlnaHQnICYmIHtcbiAgICBwYWRkaW5nUmlnaHQ6IDBcbiAgfSk7XG59KTtcbmNvbnN0IEltYWdlTGlzdEl0ZW1CYXJUaXRsZSA9IHN0eWxlZCgnZGl2Jywge1xuICBuYW1lOiAnTXVpSW1hZ2VMaXN0SXRlbUJhcicsXG4gIHNsb3Q6ICdUaXRsZScsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4gc3R5bGVzLnRpdGxlXG59KSgoe1xuICB0aGVtZVxufSkgPT4ge1xuICByZXR1cm4ge1xuICAgIGZvbnRTaXplOiB0aGVtZS50eXBvZ3JhcGh5LnB4VG9SZW0oMTYpLFxuICAgIGxpbmVIZWlnaHQ6ICcyNHB4JyxcbiAgICB0ZXh0T3ZlcmZsb3c6ICdlbGxpcHNpcycsXG4gICAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxuICAgIHdoaXRlU3BhY2U6ICdub3dyYXAnXG4gIH07XG59KTtcbmNvbnN0IEltYWdlTGlzdEl0ZW1CYXJTdWJ0aXRsZSA9IHN0eWxlZCgnZGl2Jywge1xuICBuYW1lOiAnTXVpSW1hZ2VMaXN0SXRlbUJhcicsXG4gIHNsb3Q6ICdTdWJ0aXRsZScsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4gc3R5bGVzLnN1YnRpdGxlXG59KSgoe1xuICB0aGVtZVxufSkgPT4ge1xuICByZXR1cm4ge1xuICAgIGZvbnRTaXplOiB0aGVtZS50eXBvZ3JhcGh5LnB4VG9SZW0oMTIpLFxuICAgIGxpbmVIZWlnaHQ6IDEsXG4gICAgdGV4dE92ZXJmbG93OiAnZWxsaXBzaXMnLFxuICAgIG92ZXJmbG93OiAnaGlkZGVuJyxcbiAgICB3aGl0ZVNwYWNlOiAnbm93cmFwJ1xuICB9O1xufSk7XG5jb25zdCBJbWFnZUxpc3RJdGVtQmFyQWN0aW9uSWNvbiA9IHN0eWxlZCgnZGl2Jywge1xuICBuYW1lOiAnTXVpSW1hZ2VMaXN0SXRlbUJhcicsXG4gIHNsb3Q6ICdBY3Rpb25JY29uJyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgb3duZXJTdGF0ZVxuICAgIH0gPSBwcm9wcztcbiAgICByZXR1cm4gW3N0eWxlcy5hY3Rpb25JY29uLCBzdHlsZXNbYGFjdGlvbkljb25BY3Rpb25Qb3Mke2NhcGl0YWxpemUob3duZXJTdGF0ZS5hY3Rpb25Qb3NpdGlvbil9YF1dO1xuICB9XG59KSgoe1xuICBvd25lclN0YXRlXG59KSA9PiB7XG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgb3duZXJTdGF0ZS5hY3Rpb25Qb3NpdGlvbiA9PT0gJ2xlZnQnICYmIHtcbiAgICBvcmRlcjogLTFcbiAgfSk7XG59KTtcbmNvbnN0IEltYWdlTGlzdEl0ZW1CYXIgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBJbWFnZUxpc3RJdGVtQmFyKGluUHJvcHMsIHJlZikge1xuICBjb25zdCBwcm9wcyA9IHVzZURlZmF1bHRQcm9wcyh7XG4gICAgcHJvcHM6IGluUHJvcHMsXG4gICAgbmFtZTogJ011aUltYWdlTGlzdEl0ZW1CYXInXG4gIH0pO1xuICBjb25zdCB7XG4gICAgICBhY3Rpb25JY29uLFxuICAgICAgYWN0aW9uUG9zaXRpb24gPSAncmlnaHQnLFxuICAgICAgY2xhc3NOYW1lLFxuICAgICAgc3VidGl0bGUsXG4gICAgICB0aXRsZSxcbiAgICAgIHBvc2l0aW9uID0gJ2JvdHRvbSdcbiAgICB9ID0gcHJvcHMsXG4gICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkKTtcbiAgY29uc3Qgb3duZXJTdGF0ZSA9IF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgIHBvc2l0aW9uLFxuICAgIGFjdGlvblBvc2l0aW9uXG4gIH0pO1xuICBjb25zdCBjbGFzc2VzID0gdXNlVXRpbGl0eUNsYXNzZXMob3duZXJTdGF0ZSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeHMoSW1hZ2VMaXN0SXRlbUJhclJvb3QsIF9leHRlbmRzKHtcbiAgICBvd25lclN0YXRlOiBvd25lclN0YXRlLFxuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSksXG4gICAgcmVmOiByZWZcbiAgfSwgb3RoZXIsIHtcbiAgICBjaGlsZHJlbjogWy8qI19fUFVSRV9fKi9fanN4cyhJbWFnZUxpc3RJdGVtQmFyVGl0bGVXcmFwLCB7XG4gICAgICBvd25lclN0YXRlOiBvd25lclN0YXRlLFxuICAgICAgY2xhc3NOYW1lOiBjbGFzc2VzLnRpdGxlV3JhcCxcbiAgICAgIGNoaWxkcmVuOiBbLyojX19QVVJFX18qL19qc3goSW1hZ2VMaXN0SXRlbUJhclRpdGxlLCB7XG4gICAgICAgIGNsYXNzTmFtZTogY2xhc3Nlcy50aXRsZSxcbiAgICAgICAgY2hpbGRyZW46IHRpdGxlXG4gICAgICB9KSwgc3VidGl0bGUgPyAvKiNfX1BVUkVfXyovX2pzeChJbWFnZUxpc3RJdGVtQmFyU3VidGl0bGUsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBjbGFzc2VzLnN1YnRpdGxlLFxuICAgICAgICBjaGlsZHJlbjogc3VidGl0bGVcbiAgICAgIH0pIDogbnVsbF1cbiAgICB9KSwgYWN0aW9uSWNvbiA/IC8qI19fUFVSRV9fKi9fanN4KEltYWdlTGlzdEl0ZW1CYXJBY3Rpb25JY29uLCB7XG4gICAgICBvd25lclN0YXRlOiBvd25lclN0YXRlLFxuICAgICAgY2xhc3NOYW1lOiBjbGFzc2VzLmFjdGlvbkljb24sXG4gICAgICBjaGlsZHJlbjogYWN0aW9uSWNvblxuICAgIH0pIDogbnVsbF1cbiAgfSkpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBJbWFnZUxpc3RJdGVtQmFyLnByb3BUeXBlcyAvKiByZW1vdmUtcHJvcHR5cGVzICovID0ge1xuICAvLyDilIzilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIAgV2FybmluZyDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJBcbiAgLy8g4pSCIFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucy4g4pSCXG4gIC8vIOKUgiAgICBUbyB1cGRhdGUgdGhlbSwgZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gYHBucG0gcHJvcHR5cGVzYC4gICAgIOKUglxuICAvLyDilJTilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJhcbiAgLyoqXG4gICAqIEFuIEljb25CdXR0b24gZWxlbWVudCB0byBiZSB1c2VkIGFzIHNlY29uZGFyeSBhY3Rpb24gdGFyZ2V0XG4gICAqIChwcmltYXJ5IGFjdGlvbiB0YXJnZXQgaXMgdGhlIGl0ZW0gaXRzZWxmKS5cbiAgICovXG4gIGFjdGlvbkljb246IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogUG9zaXRpb24gb2Ygc2Vjb25kYXJ5IGFjdGlvbiBJY29uQnV0dG9uLlxuICAgKiBAZGVmYXVsdCAncmlnaHQnXG4gICAqL1xuICBhY3Rpb25Qb3NpdGlvbjogUHJvcFR5cGVzLm9uZU9mKFsnbGVmdCcsICdyaWdodCddKSxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBQb3NpdGlvbiBvZiB0aGUgdGl0bGUgYmFyLlxuICAgKiBAZGVmYXVsdCAnYm90dG9tJ1xuICAgKi9cbiAgcG9zaXRpb246IFByb3BUeXBlcy5vbmVPZihbJ2JlbG93JywgJ2JvdHRvbScsICd0b3AnXSksXG4gIC8qKlxuICAgKiBTdHJpbmcgb3IgZWxlbWVudCBzZXJ2aW5nIGFzIHN1YnRpdGxlIChzdXBwb3J0IHRleHQpLlxuICAgKi9cbiAgc3VidGl0bGU6IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogVGhlIHN5c3RlbSBwcm9wIHRoYXQgYWxsb3dzIGRlZmluaW5nIHN5c3RlbSBvdmVycmlkZXMgYXMgd2VsbCBhcyBhZGRpdGlvbmFsIENTUyBzdHlsZXMuXG4gICAqL1xuICBzeDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5ib29sXSkpLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pLFxuICAvKipcbiAgICogVGl0bGUgdG8gYmUgZGlzcGxheWVkLlxuICAgKi9cbiAgdGl0bGU6IFByb3BUeXBlcy5ub2RlXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgSW1hZ2VMaXN0SXRlbUJhcjsiLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJkaXNhYmxlVW5kZXJsaW5lXCIsIFwiY29tcG9uZW50c1wiLCBcImNvbXBvbmVudHNQcm9wc1wiLCBcImZ1bGxXaWR0aFwiLCBcImlucHV0Q29tcG9uZW50XCIsIFwibXVsdGlsaW5lXCIsIFwic2xvdFByb3BzXCIsIFwic2xvdHNcIiwgXCJ0eXBlXCJdO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjb21wb3NlQ2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2NvbXBvc2VDbGFzc2VzJztcbmltcG9ydCBkZWVwbWVyZ2UgZnJvbSAnQG11aS91dGlscy9kZWVwbWVyZ2UnO1xuaW1wb3J0IHJlZlR5cGUgZnJvbSAnQG11aS91dGlscy9yZWZUeXBlJztcbmltcG9ydCBJbnB1dEJhc2UgZnJvbSAnLi4vSW5wdXRCYXNlJztcbmltcG9ydCBzdHlsZWQsIHsgcm9vdFNob3VsZEZvcndhcmRQcm9wIH0gZnJvbSAnLi4vc3R5bGVzL3N0eWxlZCc7XG5pbXBvcnQgeyB1c2VEZWZhdWx0UHJvcHMgfSBmcm9tICcuLi9EZWZhdWx0UHJvcHNQcm92aWRlcic7XG5pbXBvcnQgaW5wdXRDbGFzc2VzLCB7IGdldElucHV0VXRpbGl0eUNsYXNzIH0gZnJvbSAnLi9pbnB1dENsYXNzZXMnO1xuaW1wb3J0IHsgcm9vdE92ZXJyaWRlc1Jlc29sdmVyIGFzIGlucHV0QmFzZVJvb3RPdmVycmlkZXNSZXNvbHZlciwgaW5wdXRPdmVycmlkZXNSZXNvbHZlciBhcyBpbnB1dEJhc2VJbnB1dE92ZXJyaWRlc1Jlc29sdmVyLCBJbnB1dEJhc2VSb290LCBJbnB1dEJhc2VDb21wb25lbnQgYXMgSW5wdXRCYXNlSW5wdXQgfSBmcm9tICcuLi9JbnB1dEJhc2UvSW5wdXRCYXNlJztcbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5jb25zdCB1c2VVdGlsaXR5Q2xhc3NlcyA9IG93bmVyU3RhdGUgPT4ge1xuICBjb25zdCB7XG4gICAgY2xhc3NlcyxcbiAgICBkaXNhYmxlVW5kZXJsaW5lXG4gIH0gPSBvd25lclN0YXRlO1xuICBjb25zdCBzbG90cyA9IHtcbiAgICByb290OiBbJ3Jvb3QnLCAhZGlzYWJsZVVuZGVybGluZSAmJiAndW5kZXJsaW5lJ10sXG4gICAgaW5wdXQ6IFsnaW5wdXQnXVxuICB9O1xuICBjb25zdCBjb21wb3NlZENsYXNzZXMgPSBjb21wb3NlQ2xhc3NlcyhzbG90cywgZ2V0SW5wdXRVdGlsaXR5Q2xhc3MsIGNsYXNzZXMpO1xuICByZXR1cm4gX2V4dGVuZHMoe30sIGNsYXNzZXMsIGNvbXBvc2VkQ2xhc3Nlcyk7XG59O1xuY29uc3QgSW5wdXRSb290ID0gc3R5bGVkKElucHV0QmFzZVJvb3QsIHtcbiAgc2hvdWxkRm9yd2FyZFByb3A6IHByb3AgPT4gcm9vdFNob3VsZEZvcndhcmRQcm9wKHByb3ApIHx8IHByb3AgPT09ICdjbGFzc2VzJyxcbiAgbmFtZTogJ011aUlucHV0JyxcbiAgc2xvdDogJ1Jvb3QnLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBvd25lclN0YXRlXG4gICAgfSA9IHByb3BzO1xuICAgIHJldHVybiBbLi4uaW5wdXRCYXNlUm9vdE92ZXJyaWRlc1Jlc29sdmVyKHByb3BzLCBzdHlsZXMpLCAhb3duZXJTdGF0ZS5kaXNhYmxlVW5kZXJsaW5lICYmIHN0eWxlcy51bmRlcmxpbmVdO1xuICB9XG59KSgoe1xuICB0aGVtZSxcbiAgb3duZXJTdGF0ZVxufSkgPT4ge1xuICBjb25zdCBsaWdodCA9IHRoZW1lLnBhbGV0dGUubW9kZSA9PT0gJ2xpZ2h0JztcbiAgbGV0IGJvdHRvbUxpbmVDb2xvciA9IGxpZ2h0ID8gJ3JnYmEoMCwgMCwgMCwgMC40MiknIDogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC43KSc7XG4gIGlmICh0aGVtZS52YXJzKSB7XG4gICAgYm90dG9tTGluZUNvbG9yID0gYHJnYmEoJHt0aGVtZS52YXJzLnBhbGV0dGUuY29tbW9uLm9uQmFja2dyb3VuZENoYW5uZWx9IC8gJHt0aGVtZS52YXJzLm9wYWNpdHkuaW5wdXRVbmRlcmxpbmV9KWA7XG4gIH1cbiAgcmV0dXJuIF9leHRlbmRzKHtcbiAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJ1xuICB9LCBvd25lclN0YXRlLmZvcm1Db250cm9sICYmIHtcbiAgICAnbGFiZWwgKyAmJzoge1xuICAgICAgbWFyZ2luVG9wOiAxNlxuICAgIH1cbiAgfSwgIW93bmVyU3RhdGUuZGlzYWJsZVVuZGVybGluZSAmJiB7XG4gICAgJyY6OmFmdGVyJzoge1xuICAgICAgYm9yZGVyQm90dG9tOiBgMnB4IHNvbGlkICR7KHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGVbb3duZXJTdGF0ZS5jb2xvcl0ubWFpbn1gLFxuICAgICAgbGVmdDogMCxcbiAgICAgIGJvdHRvbTogMCxcbiAgICAgIC8vIERvaW5nIHRoZSBvdGhlciB3YXkgYXJvdW5kIGNyYXNoIG9uIElFMTEgXCInJ1wiIGh0dHBzOi8vZ2l0aHViLmNvbS9jc3NpbmpzL2pzcy9pc3N1ZXMvMjQyXG4gICAgICBjb250ZW50OiAnXCJcIicsXG4gICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgIHJpZ2h0OiAwLFxuICAgICAgdHJhbnNmb3JtOiAnc2NhbGVYKDApJyxcbiAgICAgIHRyYW5zaXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZSgndHJhbnNmb3JtJywge1xuICAgICAgICBkdXJhdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuZHVyYXRpb24uc2hvcnRlcixcbiAgICAgICAgZWFzaW5nOiB0aGVtZS50cmFuc2l0aW9ucy5lYXNpbmcuZWFzZU91dFxuICAgICAgfSksXG4gICAgICBwb2ludGVyRXZlbnRzOiAnbm9uZScgLy8gVHJhbnNwYXJlbnQgdG8gdGhlIGhvdmVyIHN0eWxlLlxuICAgIH0sXG4gICAgW2AmLiR7aW5wdXRDbGFzc2VzLmZvY3VzZWR9OmFmdGVyYF06IHtcbiAgICAgIC8vIHRyYW5zbGF0ZVgoMCkgaXMgYSB3b3JrYXJvdW5kIGZvciBTYWZhcmkgdHJhbnNmb3JtIHNjYWxlIGJ1Z1xuICAgICAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9tdWkvbWF0ZXJpYWwtdWkvaXNzdWVzLzMxNzY2XG4gICAgICB0cmFuc2Zvcm06ICdzY2FsZVgoMSkgdHJhbnNsYXRlWCgwKSdcbiAgICB9LFxuICAgIFtgJi4ke2lucHV0Q2xhc3Nlcy5lcnJvcn1gXToge1xuICAgICAgJyY6OmJlZm9yZSwgJjo6YWZ0ZXInOiB7XG4gICAgICAgIGJvcmRlckJvdHRvbUNvbG9yOiAodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZS5lcnJvci5tYWluXG4gICAgICB9XG4gICAgfSxcbiAgICAnJjo6YmVmb3JlJzoge1xuICAgICAgYm9yZGVyQm90dG9tOiBgMXB4IHNvbGlkICR7Ym90dG9tTGluZUNvbG9yfWAsXG4gICAgICBsZWZ0OiAwLFxuICAgICAgYm90dG9tOiAwLFxuICAgICAgLy8gRG9pbmcgdGhlIG90aGVyIHdheSBhcm91bmQgY3Jhc2ggb24gSUUxMSBcIicnXCIgaHR0cHM6Ly9naXRodWIuY29tL2Nzc2luanMvanNzL2lzc3Vlcy8yNDJcbiAgICAgIGNvbnRlbnQ6ICdcIlxcXFwwMGEwXCInLFxuICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICByaWdodDogMCxcbiAgICAgIHRyYW5zaXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZSgnYm9yZGVyLWJvdHRvbS1jb2xvcicsIHtcbiAgICAgICAgZHVyYXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmR1cmF0aW9uLnNob3J0ZXJcbiAgICAgIH0pLFxuICAgICAgcG9pbnRlckV2ZW50czogJ25vbmUnIC8vIFRyYW5zcGFyZW50IHRvIHRoZSBob3ZlciBzdHlsZS5cbiAgICB9LFxuICAgIFtgJjpob3Zlcjpub3QoLiR7aW5wdXRDbGFzc2VzLmRpc2FibGVkfSwgLiR7aW5wdXRDbGFzc2VzLmVycm9yfSk6YmVmb3JlYF06IHtcbiAgICAgIGJvcmRlckJvdHRvbTogYDJweCBzb2xpZCAkeyh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlLnRleHQucHJpbWFyeX1gLFxuICAgICAgLy8gUmVzZXQgb24gdG91Y2ggZGV2aWNlcywgaXQgZG9lc24ndCBhZGQgc3BlY2lmaWNpdHlcbiAgICAgICdAbWVkaWEgKGhvdmVyOiBub25lKSc6IHtcbiAgICAgICAgYm9yZGVyQm90dG9tOiBgMXB4IHNvbGlkICR7Ym90dG9tTGluZUNvbG9yfWBcbiAgICAgIH1cbiAgICB9LFxuICAgIFtgJi4ke2lucHV0Q2xhc3Nlcy5kaXNhYmxlZH06YmVmb3JlYF06IHtcbiAgICAgIGJvcmRlckJvdHRvbVN0eWxlOiAnZG90dGVkJ1xuICAgIH1cbiAgfSk7XG59KTtcbmNvbnN0IElucHV0SW5wdXQgPSBzdHlsZWQoSW5wdXRCYXNlSW5wdXQsIHtcbiAgbmFtZTogJ011aUlucHV0JyxcbiAgc2xvdDogJ0lucHV0JyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IGlucHV0QmFzZUlucHV0T3ZlcnJpZGVzUmVzb2x2ZXJcbn0pKHt9KTtcbmNvbnN0IElucHV0ID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gSW5wdXQoaW5Qcm9wcywgcmVmKSB7XG4gIHZhciBfcmVmLCBfc2xvdHMkcm9vdCwgX3JlZjIsIF9zbG90cyRpbnB1dDtcbiAgY29uc3QgcHJvcHMgPSB1c2VEZWZhdWx0UHJvcHMoe1xuICAgIHByb3BzOiBpblByb3BzLFxuICAgIG5hbWU6ICdNdWlJbnB1dCdcbiAgfSk7XG4gIGNvbnN0IHtcbiAgICAgIGRpc2FibGVVbmRlcmxpbmUsXG4gICAgICBjb21wb25lbnRzID0ge30sXG4gICAgICBjb21wb25lbnRzUHJvcHM6IGNvbXBvbmVudHNQcm9wc1Byb3AsXG4gICAgICBmdWxsV2lkdGggPSBmYWxzZSxcbiAgICAgIGlucHV0Q29tcG9uZW50ID0gJ2lucHV0JyxcbiAgICAgIG11bHRpbGluZSA9IGZhbHNlLFxuICAgICAgc2xvdFByb3BzLFxuICAgICAgc2xvdHMgPSB7fSxcbiAgICAgIHR5cGUgPSAndGV4dCdcbiAgICB9ID0gcHJvcHMsXG4gICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkKTtcbiAgY29uc3QgY2xhc3NlcyA9IHVzZVV0aWxpdHlDbGFzc2VzKHByb3BzKTtcbiAgY29uc3Qgb3duZXJTdGF0ZSA9IHtcbiAgICBkaXNhYmxlVW5kZXJsaW5lXG4gIH07XG4gIGNvbnN0IGlucHV0Q29tcG9uZW50c1Byb3BzID0ge1xuICAgIHJvb3Q6IHtcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9XG4gIH07XG4gIGNvbnN0IGNvbXBvbmVudHNQcm9wcyA9IChzbG90UHJvcHMgIT0gbnVsbCA/IHNsb3RQcm9wcyA6IGNvbXBvbmVudHNQcm9wc1Byb3ApID8gZGVlcG1lcmdlKHNsb3RQcm9wcyAhPSBudWxsID8gc2xvdFByb3BzIDogY29tcG9uZW50c1Byb3BzUHJvcCwgaW5wdXRDb21wb25lbnRzUHJvcHMpIDogaW5wdXRDb21wb25lbnRzUHJvcHM7XG4gIGNvbnN0IFJvb3RTbG90ID0gKF9yZWYgPSAoX3Nsb3RzJHJvb3QgPSBzbG90cy5yb290KSAhPSBudWxsID8gX3Nsb3RzJHJvb3QgOiBjb21wb25lbnRzLlJvb3QpICE9IG51bGwgPyBfcmVmIDogSW5wdXRSb290O1xuICBjb25zdCBJbnB1dFNsb3QgPSAoX3JlZjIgPSAoX3Nsb3RzJGlucHV0ID0gc2xvdHMuaW5wdXQpICE9IG51bGwgPyBfc2xvdHMkaW5wdXQgOiBjb21wb25lbnRzLklucHV0KSAhPSBudWxsID8gX3JlZjIgOiBJbnB1dElucHV0O1xuICByZXR1cm4gLyojX19QVVJFX18qL19qc3goSW5wdXRCYXNlLCBfZXh0ZW5kcyh7XG4gICAgc2xvdHM6IHtcbiAgICAgIHJvb3Q6IFJvb3RTbG90LFxuICAgICAgaW5wdXQ6IElucHV0U2xvdFxuICAgIH0sXG4gICAgc2xvdFByb3BzOiBjb21wb25lbnRzUHJvcHMsXG4gICAgZnVsbFdpZHRoOiBmdWxsV2lkdGgsXG4gICAgaW5wdXRDb21wb25lbnQ6IGlucHV0Q29tcG9uZW50LFxuICAgIG11bHRpbGluZTogbXVsdGlsaW5lLFxuICAgIHJlZjogcmVmLFxuICAgIHR5cGU6IHR5cGVcbiAgfSwgb3RoZXIsIHtcbiAgICBjbGFzc2VzOiBjbGFzc2VzXG4gIH0pKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gSW5wdXQucHJvcFR5cGVzIC8qIHJlbW92ZS1wcm9wdHlwZXMgKi8gPSB7XG4gIC8vIOKUjOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgCBXYXJuaW5nIOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUkFxuICAvLyDilIIgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zLiDilIJcbiAgLy8g4pSCICAgIFRvIHVwZGF0ZSB0aGVtLCBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBgcG5wbSBwcm9wdHlwZXNgLiAgICAg4pSCXG4gIC8vIOKUlOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUmFxuICAvKipcbiAgICogVGhpcyBwcm9wIGhlbHBzIHVzZXJzIHRvIGZpbGwgZm9ybXMgZmFzdGVyLCBlc3BlY2lhbGx5IG9uIG1vYmlsZSBkZXZpY2VzLlxuICAgKiBUaGUgbmFtZSBjYW4gYmUgY29uZnVzaW5nLCBhcyBpdCdzIG1vcmUgbGlrZSBhbiBhdXRvZmlsbC5cbiAgICogWW91IGNhbiBsZWFybiBtb3JlIGFib3V0IGl0IFtmb2xsb3dpbmcgdGhlIHNwZWNpZmljYXRpb25dKGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm0tY29udHJvbC1pbmZyYXN0cnVjdHVyZS5odG1sI2F1dG9maWxsKS5cbiAgICovXG4gIGF1dG9Db21wbGV0ZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGBpbnB1dGAgZWxlbWVudCBpcyBmb2N1c2VkIGR1cmluZyB0aGUgZmlyc3QgbW91bnQuXG4gICAqL1xuICBhdXRvRm9jdXM6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqXG4gICAqIFRoZSBjb2xvciBvZiB0aGUgY29tcG9uZW50LlxuICAgKiBJdCBzdXBwb3J0cyBib3RoIGRlZmF1bHQgYW5kIGN1c3RvbSB0aGVtZSBjb2xvcnMsIHdoaWNoIGNhbiBiZSBhZGRlZCBhcyBzaG93biBpbiB0aGVcbiAgICogW3BhbGV0dGUgY3VzdG9taXphdGlvbiBndWlkZV0oaHR0cHM6Ly9tdWkuY29tL21hdGVyaWFsLXVpL2N1c3RvbWl6YXRpb24vcGFsZXR0ZS8jY3VzdG9tLWNvbG9ycykuXG4gICAqIFRoZSBwcm9wIGRlZmF1bHRzIHRvIHRoZSB2YWx1ZSAoYCdwcmltYXJ5J2ApIGluaGVyaXRlZCBmcm9tIHRoZSBwYXJlbnQgRm9ybUNvbnRyb2wgY29tcG9uZW50LlxuICAgKi9cbiAgY29sb3I6IFByb3BUeXBlcyAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsncHJpbWFyeScsICdzZWNvbmRhcnknXSksIFByb3BUeXBlcy5zdHJpbmddKSxcbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnRzIHVzZWQgZm9yIGVhY2ggc2xvdCBpbnNpZGUuXG4gICAqXG4gICAqIFRoaXMgcHJvcCBpcyBhbiBhbGlhcyBmb3IgdGhlIGBzbG90c2AgcHJvcC5cbiAgICogSXQncyByZWNvbW1lbmRlZCB0byB1c2UgdGhlIGBzbG90c2AgcHJvcCBpbnN0ZWFkLlxuICAgKlxuICAgKiBAZGVmYXVsdCB7fVxuICAgKi9cbiAgY29tcG9uZW50czogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBJbnB1dDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuICAgIFJvb3Q6IFByb3BUeXBlcy5lbGVtZW50VHlwZVxuICB9KSxcbiAgLyoqXG4gICAqIFRoZSBleHRyYSBwcm9wcyBmb3IgdGhlIHNsb3QgY29tcG9uZW50cy5cbiAgICogWW91IGNhbiBvdmVycmlkZSB0aGUgZXhpc3RpbmcgcHJvcHMgb3IgYWRkIG5ldyBvbmVzLlxuICAgKlxuICAgKiBUaGlzIHByb3AgaXMgYW4gYWxpYXMgZm9yIHRoZSBgc2xvdFByb3BzYCBwcm9wLlxuICAgKiBJdCdzIHJlY29tbWVuZGVkIHRvIHVzZSB0aGUgYHNsb3RQcm9wc2AgcHJvcCBpbnN0ZWFkLCBhcyBgY29tcG9uZW50c1Byb3BzYCB3aWxsIGJlIGRlcHJlY2F0ZWQgaW4gdGhlIGZ1dHVyZS5cbiAgICpcbiAgICogQGRlZmF1bHQge31cbiAgICovXG4gIGNvbXBvbmVudHNQcm9wczogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBpbnB1dDogUHJvcFR5cGVzLm9iamVjdCxcbiAgICByb290OiBQcm9wVHlwZXMub2JqZWN0XG4gIH0pLFxuICAvKipcbiAgICogVGhlIGRlZmF1bHQgdmFsdWUuIFVzZSB3aGVuIHRoZSBjb21wb25lbnQgaXMgbm90IGNvbnRyb2xsZWQuXG4gICAqL1xuICBkZWZhdWx0VmFsdWU6IFByb3BUeXBlcy5hbnksXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBjb21wb25lbnQgaXMgZGlzYWJsZWQuXG4gICAqIFRoZSBwcm9wIGRlZmF1bHRzIHRvIHRoZSB2YWx1ZSAoYGZhbHNlYCkgaW5oZXJpdGVkIGZyb20gdGhlIHBhcmVudCBGb3JtQ29udHJvbCBjb21wb25lbnQuXG4gICAqL1xuICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBgaW5wdXRgIHdpbGwgbm90IGhhdmUgYW4gdW5kZXJsaW5lLlxuICAgKi9cbiAgZGlzYWJsZVVuZGVybGluZTogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBFbmQgYElucHV0QWRvcm5tZW50YCBmb3IgdGhpcyBjb21wb25lbnQuXG4gICAqL1xuICBlbmRBZG9ybm1lbnQ6IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgYGlucHV0YCB3aWxsIGluZGljYXRlIGFuIGVycm9yLlxuICAgKiBUaGUgcHJvcCBkZWZhdWx0cyB0byB0aGUgdmFsdWUgKGBmYWxzZWApIGluaGVyaXRlZCBmcm9tIHRoZSBwYXJlbnQgRm9ybUNvbnRyb2wgY29tcG9uZW50LlxuICAgKi9cbiAgZXJyb3I6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgYGlucHV0YCB3aWxsIHRha2UgdXAgdGhlIGZ1bGwgd2lkdGggb2YgaXRzIGNvbnRhaW5lci5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGZ1bGxXaWR0aDogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBUaGUgaWQgb2YgdGhlIGBpbnB1dGAgZWxlbWVudC5cbiAgICovXG4gIGlkOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgYGlucHV0YCBlbGVtZW50LlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgSFRNTCBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKiBAZGVmYXVsdCAnaW5wdXQnXG4gICAqL1xuICBpbnB1dENvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuICAvKipcbiAgICogW0F0dHJpYnV0ZXNdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUTUwvRWxlbWVudC9pbnB1dCNBdHRyaWJ1dGVzKSBhcHBsaWVkIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAqIEBkZWZhdWx0IHt9XG4gICAqL1xuICBpbnB1dFByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogUGFzcyBhIHJlZiB0byB0aGUgYGlucHV0YCBlbGVtZW50LlxuICAgKi9cbiAgaW5wdXRSZWY6IHJlZlR5cGUsXG4gIC8qKlxuICAgKiBJZiBgZGVuc2VgLCB3aWxsIGFkanVzdCB2ZXJ0aWNhbCBzcGFjaW5nLiBUaGlzIGlzIG5vcm1hbGx5IG9idGFpbmVkIHZpYSBjb250ZXh0IGZyb21cbiAgICogRm9ybUNvbnRyb2wuXG4gICAqIFRoZSBwcm9wIGRlZmF1bHRzIHRvIHRoZSB2YWx1ZSAoYCdub25lJ2ApIGluaGVyaXRlZCBmcm9tIHRoZSBwYXJlbnQgRm9ybUNvbnRyb2wgY29tcG9uZW50LlxuICAgKi9cbiAgbWFyZ2luOiBQcm9wVHlwZXMub25lT2YoWydkZW5zZScsICdub25lJ10pLFxuICAvKipcbiAgICogTWF4aW11bSBudW1iZXIgb2Ygcm93cyB0byBkaXNwbGF5IHdoZW4gbXVsdGlsaW5lIG9wdGlvbiBpcyBzZXQgdG8gdHJ1ZS5cbiAgICovXG4gIG1heFJvd3M6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zdHJpbmddKSxcbiAgLyoqXG4gICAqIE1pbmltdW0gbnVtYmVyIG9mIHJvd3MgdG8gZGlzcGxheSB3aGVuIG11bHRpbGluZSBvcHRpb24gaXMgc2V0IHRvIHRydWUuXG4gICAqL1xuICBtaW5Sb3dzOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc3RyaW5nXSksXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIGEgW1RleHRhcmVhQXV0b3NpemVdKC9tYXRlcmlhbC11aS9yZWFjdC10ZXh0YXJlYS1hdXRvc2l6ZS8pIGVsZW1lbnQgaXMgcmVuZGVyZWQuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBtdWx0aWxpbmU6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogTmFtZSBhdHRyaWJ1dGUgb2YgdGhlIGBpbnB1dGAgZWxlbWVudC5cbiAgICovXG4gIG5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSB2YWx1ZSBpcyBjaGFuZ2VkLlxuICAgKlxuICAgKiBAcGFyYW0ge1JlYWN0LkNoYW5nZUV2ZW50PEhUTUxUZXh0QXJlYUVsZW1lbnQgfCBIVE1MSW5wdXRFbGVtZW50Pn0gZXZlbnQgVGhlIGV2ZW50IHNvdXJjZSBvZiB0aGUgY2FsbGJhY2suXG4gICAqIFlvdSBjYW4gcHVsbCBvdXQgdGhlIG5ldyB2YWx1ZSBieSBhY2Nlc3NpbmcgYGV2ZW50LnRhcmdldC52YWx1ZWAgKHN0cmluZykuXG4gICAqL1xuICBvbkNoYW5nZTogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBUaGUgc2hvcnQgaGludCBkaXNwbGF5ZWQgaW4gdGhlIGBpbnB1dGAgYmVmb3JlIHRoZSB1c2VyIGVudGVycyBhIHZhbHVlLlxuICAgKi9cbiAgcGxhY2Vob2xkZXI6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBJdCBwcmV2ZW50cyB0aGUgdXNlciBmcm9tIGNoYW5naW5nIHRoZSB2YWx1ZSBvZiB0aGUgZmllbGRcbiAgICogKG5vdCBmcm9tIGludGVyYWN0aW5nIHdpdGggdGhlIGZpZWxkKS5cbiAgICovXG4gIHJlYWRPbmx5OiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGBpbnB1dGAgZWxlbWVudCBpcyByZXF1aXJlZC5cbiAgICogVGhlIHByb3AgZGVmYXVsdHMgdG8gdGhlIHZhbHVlIChgZmFsc2VgKSBpbmhlcml0ZWQgZnJvbSB0aGUgcGFyZW50IEZvcm1Db250cm9sIGNvbXBvbmVudC5cbiAgICovXG4gIHJlcXVpcmVkOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIE51bWJlciBvZiByb3dzIHRvIGRpc3BsYXkgd2hlbiBtdWx0aWxpbmUgb3B0aW9uIGlzIHNldCB0byB0cnVlLlxuICAgKi9cbiAgcm93czogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnN0cmluZ10pLFxuICAvKipcbiAgICogVGhlIGV4dHJhIHByb3BzIGZvciB0aGUgc2xvdCBjb21wb25lbnRzLlxuICAgKiBZb3UgY2FuIG92ZXJyaWRlIHRoZSBleGlzdGluZyBwcm9wcyBvciBhZGQgbmV3IG9uZXMuXG4gICAqXG4gICAqIFRoaXMgcHJvcCBpcyBhbiBhbGlhcyBmb3IgdGhlIGBjb21wb25lbnRzUHJvcHNgIHByb3AsIHdoaWNoIHdpbGwgYmUgZGVwcmVjYXRlZCBpbiB0aGUgZnV0dXJlLlxuICAgKlxuICAgKiBAZGVmYXVsdCB7fVxuICAgKi9cbiAgc2xvdFByb3BzOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGlucHV0OiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIHJvb3Q6IFByb3BUeXBlcy5vYmplY3RcbiAgfSksXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50cyB1c2VkIGZvciBlYWNoIHNsb3QgaW5zaWRlLlxuICAgKlxuICAgKiBUaGlzIHByb3AgaXMgYW4gYWxpYXMgZm9yIHRoZSBgY29tcG9uZW50c2AgcHJvcCwgd2hpY2ggd2lsbCBiZSBkZXByZWNhdGVkIGluIHRoZSBmdXR1cmUuXG4gICAqXG4gICAqIEBkZWZhdWx0IHt9XG4gICAqL1xuICBzbG90czogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBpbnB1dDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuICAgIHJvb3Q6IFByb3BUeXBlcy5lbGVtZW50VHlwZVxuICB9KSxcbiAgLyoqXG4gICAqIFN0YXJ0IGBJbnB1dEFkb3JubWVudGAgZm9yIHRoaXMgY29tcG9uZW50LlxuICAgKi9cbiAgc3RhcnRBZG9ybm1lbnQ6IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogVGhlIHN5c3RlbSBwcm9wIHRoYXQgYWxsb3dzIGRlZmluaW5nIHN5c3RlbSBvdmVycmlkZXMgYXMgd2VsbCBhcyBhZGRpdGlvbmFsIENTUyBzdHlsZXMuXG4gICAqL1xuICBzeDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5ib29sXSkpLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pLFxuICAvKipcbiAgICogVHlwZSBvZiB0aGUgYGlucHV0YCBlbGVtZW50LiBJdCBzaG91bGQgYmUgW2EgdmFsaWQgSFRNTDUgaW5wdXQgdHlwZV0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRNTC9FbGVtZW50L2lucHV0I0Zvcm1fJTNDaW5wdXQlM0VfdHlwZXMpLlxuICAgKiBAZGVmYXVsdCAndGV4dCdcbiAgICovXG4gIHR5cGU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBUaGUgdmFsdWUgb2YgdGhlIGBpbnB1dGAgZWxlbWVudCwgcmVxdWlyZWQgZm9yIGEgY29udHJvbGxlZCBjb21wb25lbnQuXG4gICAqL1xuICB2YWx1ZTogUHJvcFR5cGVzLmFueVxufSA6IHZvaWQgMDtcbklucHV0Lm11aU5hbWUgPSAnSW5wdXQnO1xuZXhwb3J0IGRlZmF1bHQgSW5wdXQ7IiwiaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzc2VzJztcbmltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzJztcbmV4cG9ydCBmdW5jdGlvbiBnZXRJbnB1dEFkb3JubWVudFV0aWxpdHlDbGFzcyhzbG90KSB7XG4gIHJldHVybiBnZW5lcmF0ZVV0aWxpdHlDbGFzcygnTXVpSW5wdXRBZG9ybm1lbnQnLCBzbG90KTtcbn1cbmNvbnN0IGlucHV0QWRvcm5tZW50Q2xhc3NlcyA9IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMoJ011aUlucHV0QWRvcm5tZW50JywgWydyb290JywgJ2ZpbGxlZCcsICdzdGFuZGFyZCcsICdvdXRsaW5lZCcsICdwb3NpdGlvblN0YXJ0JywgJ3Bvc2l0aW9uRW5kJywgJ2Rpc2FibGVQb2ludGVyRXZlbnRzJywgJ2hpZGRlbkxhYmVsJywgJ3NpemVTbWFsbCddKTtcbmV4cG9ydCBkZWZhdWx0IGlucHV0QWRvcm5tZW50Q2xhc3NlczsiLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG52YXIgX3NwYW47XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJjaGlsZHJlblwiLCBcImNsYXNzTmFtZVwiLCBcImNvbXBvbmVudFwiLCBcImRpc2FibGVQb2ludGVyRXZlbnRzXCIsIFwiZGlzYWJsZVR5cG9ncmFwaHlcIiwgXCJwb3NpdGlvblwiLCBcInZhcmlhbnRcIl07XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgY29tcG9zZUNsYXNzZXMgZnJvbSAnQG11aS91dGlscy9jb21wb3NlQ2xhc3Nlcyc7XG5pbXBvcnQgY2FwaXRhbGl6ZSBmcm9tICcuLi91dGlscy9jYXBpdGFsaXplJztcbmltcG9ydCBUeXBvZ3JhcGh5IGZyb20gJy4uL1R5cG9ncmFwaHknO1xuaW1wb3J0IEZvcm1Db250cm9sQ29udGV4dCBmcm9tICcuLi9Gb3JtQ29udHJvbC9Gb3JtQ29udHJvbENvbnRleHQnO1xuaW1wb3J0IHVzZUZvcm1Db250cm9sIGZyb20gJy4uL0Zvcm1Db250cm9sL3VzZUZvcm1Db250cm9sJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnLi4vc3R5bGVzL3N0eWxlZCc7XG5pbXBvcnQgaW5wdXRBZG9ybm1lbnRDbGFzc2VzLCB7IGdldElucHV0QWRvcm5tZW50VXRpbGl0eUNsYXNzIH0gZnJvbSAnLi9pbnB1dEFkb3JubWVudENsYXNzZXMnO1xuaW1wb3J0IHsgdXNlRGVmYXVsdFByb3BzIH0gZnJvbSAnLi4vRGVmYXVsdFByb3BzUHJvdmlkZXInO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmltcG9ydCB7IGpzeHMgYXMgX2pzeHMgfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmNvbnN0IG92ZXJyaWRlc1Jlc29sdmVyID0gKHByb3BzLCBzdHlsZXMpID0+IHtcbiAgY29uc3Qge1xuICAgIG93bmVyU3RhdGVcbiAgfSA9IHByb3BzO1xuICByZXR1cm4gW3N0eWxlcy5yb290LCBzdHlsZXNbYHBvc2l0aW9uJHtjYXBpdGFsaXplKG93bmVyU3RhdGUucG9zaXRpb24pfWBdLCBvd25lclN0YXRlLmRpc2FibGVQb2ludGVyRXZlbnRzID09PSB0cnVlICYmIHN0eWxlcy5kaXNhYmxlUG9pbnRlckV2ZW50cywgc3R5bGVzW293bmVyU3RhdGUudmFyaWFudF1dO1xufTtcbmNvbnN0IHVzZVV0aWxpdHlDbGFzc2VzID0gb3duZXJTdGF0ZSA9PiB7XG4gIGNvbnN0IHtcbiAgICBjbGFzc2VzLFxuICAgIGRpc2FibGVQb2ludGVyRXZlbnRzLFxuICAgIGhpZGRlbkxhYmVsLFxuICAgIHBvc2l0aW9uLFxuICAgIHNpemUsXG4gICAgdmFyaWFudFxuICB9ID0gb3duZXJTdGF0ZTtcbiAgY29uc3Qgc2xvdHMgPSB7XG4gICAgcm9vdDogWydyb290JywgZGlzYWJsZVBvaW50ZXJFdmVudHMgJiYgJ2Rpc2FibGVQb2ludGVyRXZlbnRzJywgcG9zaXRpb24gJiYgYHBvc2l0aW9uJHtjYXBpdGFsaXplKHBvc2l0aW9uKX1gLCB2YXJpYW50LCBoaWRkZW5MYWJlbCAmJiAnaGlkZGVuTGFiZWwnLCBzaXplICYmIGBzaXplJHtjYXBpdGFsaXplKHNpemUpfWBdXG4gIH07XG4gIHJldHVybiBjb21wb3NlQ2xhc3NlcyhzbG90cywgZ2V0SW5wdXRBZG9ybm1lbnRVdGlsaXR5Q2xhc3MsIGNsYXNzZXMpO1xufTtcbmNvbnN0IElucHV0QWRvcm5tZW50Um9vdCA9IHN0eWxlZCgnZGl2Jywge1xuICBuYW1lOiAnTXVpSW5wdXRBZG9ybm1lbnQnLFxuICBzbG90OiAnUm9vdCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyXG59KSgoe1xuICB0aGVtZSxcbiAgb3duZXJTdGF0ZVxufSkgPT4gX2V4dGVuZHMoe1xuICBkaXNwbGF5OiAnZmxleCcsXG4gIGhlaWdodDogJzAuMDFlbScsXG4gIC8vIEZpeCBJRTExIGZsZXhib3ggYWxpZ25tZW50LiBUbyByZW1vdmUgYXQgc29tZSBwb2ludC5cbiAgbWF4SGVpZ2h0OiAnMmVtJyxcbiAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gIHdoaXRlU3BhY2U6ICdub3dyYXAnLFxuICBjb2xvcjogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGUuYWN0aW9uLmFjdGl2ZVxufSwgb3duZXJTdGF0ZS52YXJpYW50ID09PSAnZmlsbGVkJyAmJiB7XG4gIC8vIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJmaWxsZWRcImAuXG4gIFtgJi4ke2lucHV0QWRvcm5tZW50Q2xhc3Nlcy5wb3NpdGlvblN0YXJ0fSY6bm90KC4ke2lucHV0QWRvcm5tZW50Q2xhc3Nlcy5oaWRkZW5MYWJlbH0pYF06IHtcbiAgICBtYXJnaW5Ub3A6IDE2XG4gIH1cbn0sIG93bmVyU3RhdGUucG9zaXRpb24gPT09ICdzdGFydCcgJiYge1xuICAvLyBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBwb3NpdGlvbj1cInN0YXJ0XCJgLlxuICBtYXJnaW5SaWdodDogOFxufSwgb3duZXJTdGF0ZS5wb3NpdGlvbiA9PT0gJ2VuZCcgJiYge1xuICAvLyBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBwb3NpdGlvbj1cImVuZFwiYC5cbiAgbWFyZ2luTGVmdDogOFxufSwgb3duZXJTdGF0ZS5kaXNhYmxlUG9pbnRlckV2ZW50cyA9PT0gdHJ1ZSAmJiB7XG4gIC8vIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGRpc2FibGVQb2ludGVyRXZlbnRzPXt0cnVlfWAuXG4gIHBvaW50ZXJFdmVudHM6ICdub25lJ1xufSkpO1xuY29uc3QgSW5wdXRBZG9ybm1lbnQgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBJbnB1dEFkb3JubWVudChpblByb3BzLCByZWYpIHtcbiAgY29uc3QgcHJvcHMgPSB1c2VEZWZhdWx0UHJvcHMoe1xuICAgIHByb3BzOiBpblByb3BzLFxuICAgIG5hbWU6ICdNdWlJbnB1dEFkb3JubWVudCdcbiAgfSk7XG4gIGNvbnN0IHtcbiAgICAgIGNoaWxkcmVuLFxuICAgICAgY2xhc3NOYW1lLFxuICAgICAgY29tcG9uZW50ID0gJ2RpdicsXG4gICAgICBkaXNhYmxlUG9pbnRlckV2ZW50cyA9IGZhbHNlLFxuICAgICAgZGlzYWJsZVR5cG9ncmFwaHkgPSBmYWxzZSxcbiAgICAgIHBvc2l0aW9uLFxuICAgICAgdmFyaWFudDogdmFyaWFudFByb3BcbiAgICB9ID0gcHJvcHMsXG4gICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkKTtcbiAgY29uc3QgbXVpRm9ybUNvbnRyb2wgPSB1c2VGb3JtQ29udHJvbCgpIHx8IHt9O1xuICBsZXQgdmFyaWFudCA9IHZhcmlhbnRQcm9wO1xuICBpZiAodmFyaWFudFByb3AgJiYgbXVpRm9ybUNvbnRyb2wudmFyaWFudCkge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAodmFyaWFudFByb3AgPT09IG11aUZvcm1Db250cm9sLnZhcmlhbnQpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignTVVJOiBUaGUgYElucHV0QWRvcm5tZW50YCB2YXJpYW50IGluZmVycyB0aGUgdmFyaWFudCBwcm9wICcgKyAneW91IGRvIG5vdCBoYXZlIHRvIHByb3ZpZGUgb25lLicpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBpZiAobXVpRm9ybUNvbnRyb2wgJiYgIXZhcmlhbnQpIHtcbiAgICB2YXJpYW50ID0gbXVpRm9ybUNvbnRyb2wudmFyaWFudDtcbiAgfVxuICBjb25zdCBvd25lclN0YXRlID0gX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgaGlkZGVuTGFiZWw6IG11aUZvcm1Db250cm9sLmhpZGRlbkxhYmVsLFxuICAgIHNpemU6IG11aUZvcm1Db250cm9sLnNpemUsXG4gICAgZGlzYWJsZVBvaW50ZXJFdmVudHMsXG4gICAgcG9zaXRpb24sXG4gICAgdmFyaWFudFxuICB9KTtcbiAgY29uc3QgY2xhc3NlcyA9IHVzZVV0aWxpdHlDbGFzc2VzKG93bmVyU3RhdGUpO1xuICByZXR1cm4gLyojX19QVVJFX18qL19qc3goRm9ybUNvbnRyb2xDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IG51bGwsXG4gICAgY2hpbGRyZW46IC8qI19fUFVSRV9fKi9fanN4KElucHV0QWRvcm5tZW50Um9vdCwgX2V4dGVuZHMoe1xuICAgICAgYXM6IGNvbXBvbmVudCxcbiAgICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGUsXG4gICAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWUpLFxuICAgICAgcmVmOiByZWZcbiAgICB9LCBvdGhlciwge1xuICAgICAgY2hpbGRyZW46IHR5cGVvZiBjaGlsZHJlbiA9PT0gJ3N0cmluZycgJiYgIWRpc2FibGVUeXBvZ3JhcGh5ID8gLyojX19QVVJFX18qL19qc3goVHlwb2dyYXBoeSwge1xuICAgICAgICBjb2xvcjogXCJ0ZXh0LnNlY29uZGFyeVwiLFxuICAgICAgICBjaGlsZHJlbjogY2hpbGRyZW5cbiAgICAgIH0pIDogLyojX19QVVJFX18qL19qc3hzKFJlYWN0LkZyYWdtZW50LCB7XG4gICAgICAgIGNoaWxkcmVuOiBbcG9zaXRpb24gPT09ICdzdGFydCcgPyAoIC8qIG5vdHJhbnNsYXRlIG5lZWRlZCB3aGlsZSBHb29nbGUgVHJhbnNsYXRlIHdpbGwgbm90IGZpeCB6ZXJvLXdpZHRoIHNwYWNlIGlzc3VlICovX3NwYW4gfHwgKF9zcGFuID0gLyojX19QVVJFX18qL19qc3goXCJzcGFuXCIsIHtcbiAgICAgICAgICBjbGFzc05hbWU6IFwibm90cmFuc2xhdGVcIixcbiAgICAgICAgICBjaGlsZHJlbjogXCJcXHUyMDBCXCJcbiAgICAgICAgfSkpKSA6IG51bGwsIGNoaWxkcmVuXVxuICAgICAgfSlcbiAgICB9KSlcbiAgfSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IElucHV0QWRvcm5tZW50LnByb3BUeXBlcyAvKiByZW1vdmUtcHJvcHR5cGVzICovID0ge1xuICAvLyDilIzilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIAgV2FybmluZyDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJBcbiAgLy8g4pSCIFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucy4g4pSCXG4gIC8vIOKUgiAgICBUbyB1cGRhdGUgdGhlbSwgZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gYHBucG0gcHJvcHR5cGVzYC4gICAgIOKUglxuICAvLyDilJTilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJhcbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBjb21wb25lbnQsIG5vcm1hbGx5IGFuIGBJY29uQnV0dG9uYCBvciBzdHJpbmcuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgcm9vdCBub2RlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgSFRNTCBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKi9cbiAgY29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG4gIC8qKlxuICAgKiBEaXNhYmxlIHBvaW50ZXIgZXZlbnRzIG9uIHRoZSByb290LlxuICAgKiBUaGlzIGFsbG93cyBmb3IgdGhlIGNvbnRlbnQgb2YgdGhlIGFkb3JubWVudCB0byBmb2N1cyB0aGUgYGlucHV0YCBvbiBjbGljay5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRpc2FibGVQb2ludGVyRXZlbnRzOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIElmIGNoaWxkcmVuIGlzIGEgc3RyaW5nIHRoZW4gZGlzYWJsZSB3cmFwcGluZyBpbiBhIFR5cG9ncmFwaHkgY29tcG9uZW50LlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZGlzYWJsZVR5cG9ncmFwaHk6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogVGhlIHBvc2l0aW9uIHRoaXMgYWRvcm5tZW50IHNob3VsZCBhcHBlYXIgcmVsYXRpdmUgdG8gdGhlIGBJbnB1dGAuXG4gICAqL1xuICBwb3NpdGlvbjogUHJvcFR5cGVzLm9uZU9mKFsnZW5kJywgJ3N0YXJ0J10pLmlzUmVxdWlyZWQsXG4gIC8qKlxuICAgKiBUaGUgc3lzdGVtIHByb3AgdGhhdCBhbGxvd3MgZGVmaW5pbmcgc3lzdGVtIG92ZXJyaWRlcyBhcyB3ZWxsIGFzIGFkZGl0aW9uYWwgQ1NTIHN0eWxlcy5cbiAgICovXG4gIHN4OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLmJvb2xdKSksIFByb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSksXG4gIC8qKlxuICAgKiBUaGUgdmFyaWFudCB0byB1c2UuXG4gICAqIE5vdGU6IElmIHlvdSBhcmUgdXNpbmcgdGhlIGBUZXh0RmllbGRgIGNvbXBvbmVudCBvciB0aGUgYEZvcm1Db250cm9sYCBjb21wb25lbnRcbiAgICogeW91IGRvIG5vdCBoYXZlIHRvIHNldCB0aGlzIG1hbnVhbGx5LlxuICAgKi9cbiAgdmFyaWFudDogUHJvcFR5cGVzLm9uZU9mKFsnZmlsbGVkJywgJ291dGxpbmVkJywgJ3N0YW5kYXJkJ10pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgSW5wdXRBZG9ybm1lbnQ7IiwiaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzc2VzJztcbmltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzJztcbmV4cG9ydCBmdW5jdGlvbiBnZXRJbnB1dExhYmVsVXRpbGl0eUNsYXNzZXMoc2xvdCkge1xuICByZXR1cm4gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoJ011aUlucHV0TGFiZWwnLCBzbG90KTtcbn1cbmNvbnN0IGlucHV0TGFiZWxDbGFzc2VzID0gZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcygnTXVpSW5wdXRMYWJlbCcsIFsncm9vdCcsICdmb2N1c2VkJywgJ2Rpc2FibGVkJywgJ2Vycm9yJywgJ3JlcXVpcmVkJywgJ2FzdGVyaXNrJywgJ2Zvcm1Db250cm9sJywgJ3NpemVTbWFsbCcsICdzaHJpbmsnLCAnYW5pbWF0ZWQnLCAnc3RhbmRhcmQnLCAnZmlsbGVkJywgJ291dGxpbmVkJ10pO1xuZXhwb3J0IGRlZmF1bHQgaW5wdXRMYWJlbENsYXNzZXM7IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiZGlzYWJsZUFuaW1hdGlvblwiLCBcIm1hcmdpblwiLCBcInNocmlua1wiLCBcInZhcmlhbnRcIiwgXCJjbGFzc05hbWVcIl07XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNvbXBvc2VDbGFzc2VzIGZyb20gJ0BtdWkvdXRpbHMvY29tcG9zZUNsYXNzZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgZm9ybUNvbnRyb2xTdGF0ZSBmcm9tICcuLi9Gb3JtQ29udHJvbC9mb3JtQ29udHJvbFN0YXRlJztcbmltcG9ydCB1c2VGb3JtQ29udHJvbCBmcm9tICcuLi9Gb3JtQ29udHJvbC91c2VGb3JtQ29udHJvbCc7XG5pbXBvcnQgRm9ybUxhYmVsLCB7IGZvcm1MYWJlbENsYXNzZXMgfSBmcm9tICcuLi9Gb3JtTGFiZWwnO1xuaW1wb3J0IHsgdXNlRGVmYXVsdFByb3BzIH0gZnJvbSAnLi4vRGVmYXVsdFByb3BzUHJvdmlkZXInO1xuaW1wb3J0IGNhcGl0YWxpemUgZnJvbSAnLi4vdXRpbHMvY2FwaXRhbGl6ZSc7XG5pbXBvcnQgc3R5bGVkLCB7IHJvb3RTaG91bGRGb3J3YXJkUHJvcCB9IGZyb20gJy4uL3N0eWxlcy9zdHlsZWQnO1xuaW1wb3J0IHsgZ2V0SW5wdXRMYWJlbFV0aWxpdHlDbGFzc2VzIH0gZnJvbSAnLi9pbnB1dExhYmVsQ2xhc3Nlcyc7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuY29uc3QgdXNlVXRpbGl0eUNsYXNzZXMgPSBvd25lclN0YXRlID0+IHtcbiAgY29uc3Qge1xuICAgIGNsYXNzZXMsXG4gICAgZm9ybUNvbnRyb2wsXG4gICAgc2l6ZSxcbiAgICBzaHJpbmssXG4gICAgZGlzYWJsZUFuaW1hdGlvbixcbiAgICB2YXJpYW50LFxuICAgIHJlcXVpcmVkXG4gIH0gPSBvd25lclN0YXRlO1xuICBjb25zdCBzbG90cyA9IHtcbiAgICByb290OiBbJ3Jvb3QnLCBmb3JtQ29udHJvbCAmJiAnZm9ybUNvbnRyb2wnLCAhZGlzYWJsZUFuaW1hdGlvbiAmJiAnYW5pbWF0ZWQnLCBzaHJpbmsgJiYgJ3NocmluaycsIHNpemUgJiYgc2l6ZSAhPT0gJ25vcm1hbCcgJiYgYHNpemUke2NhcGl0YWxpemUoc2l6ZSl9YCwgdmFyaWFudF0sXG4gICAgYXN0ZXJpc2s6IFtyZXF1aXJlZCAmJiAnYXN0ZXJpc2snXVxuICB9O1xuICBjb25zdCBjb21wb3NlZENsYXNzZXMgPSBjb21wb3NlQ2xhc3NlcyhzbG90cywgZ2V0SW5wdXRMYWJlbFV0aWxpdHlDbGFzc2VzLCBjbGFzc2VzKTtcbiAgcmV0dXJuIF9leHRlbmRzKHt9LCBjbGFzc2VzLCBjb21wb3NlZENsYXNzZXMpO1xufTtcbmNvbnN0IElucHV0TGFiZWxSb290ID0gc3R5bGVkKEZvcm1MYWJlbCwge1xuICBzaG91bGRGb3J3YXJkUHJvcDogcHJvcCA9PiByb290U2hvdWxkRm9yd2FyZFByb3AocHJvcCkgfHwgcHJvcCA9PT0gJ2NsYXNzZXMnLFxuICBuYW1lOiAnTXVpSW5wdXRMYWJlbCcsXG4gIHNsb3Q6ICdSb290JyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgb3duZXJTdGF0ZVxuICAgIH0gPSBwcm9wcztcbiAgICByZXR1cm4gW3tcbiAgICAgIFtgJiAuJHtmb3JtTGFiZWxDbGFzc2VzLmFzdGVyaXNrfWBdOiBzdHlsZXMuYXN0ZXJpc2tcbiAgICB9LCBzdHlsZXMucm9vdCwgb3duZXJTdGF0ZS5mb3JtQ29udHJvbCAmJiBzdHlsZXMuZm9ybUNvbnRyb2wsIG93bmVyU3RhdGUuc2l6ZSA9PT0gJ3NtYWxsJyAmJiBzdHlsZXMuc2l6ZVNtYWxsLCBvd25lclN0YXRlLnNocmluayAmJiBzdHlsZXMuc2hyaW5rLCAhb3duZXJTdGF0ZS5kaXNhYmxlQW5pbWF0aW9uICYmIHN0eWxlcy5hbmltYXRlZCwgb3duZXJTdGF0ZS5mb2N1c2VkICYmIHN0eWxlcy5mb2N1c2VkLCBzdHlsZXNbb3duZXJTdGF0ZS52YXJpYW50XV07XG4gIH1cbn0pKCh7XG4gIHRoZW1lLFxuICBvd25lclN0YXRlXG59KSA9PiBfZXh0ZW5kcyh7XG4gIGRpc3BsYXk6ICdibG9jaycsXG4gIHRyYW5zZm9ybU9yaWdpbjogJ3RvcCBsZWZ0JyxcbiAgd2hpdGVTcGFjZTogJ25vd3JhcCcsXG4gIG92ZXJmbG93OiAnaGlkZGVuJyxcbiAgdGV4dE92ZXJmbG93OiAnZWxsaXBzaXMnLFxuICBtYXhXaWR0aDogJzEwMCUnXG59LCBvd25lclN0YXRlLmZvcm1Db250cm9sICYmIHtcbiAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gIGxlZnQ6IDAsXG4gIHRvcDogMCxcbiAgLy8gc2xpZ2h0IGFsdGVyYXRpb24gdG8gc3BlYyBzcGFjaW5nIHRvIG1hdGNoIHZpc3VhbCBzcGVjIHJlc3VsdFxuICB0cmFuc2Zvcm06ICd0cmFuc2xhdGUoMCwgMjBweCkgc2NhbGUoMSknXG59LCBvd25lclN0YXRlLnNpemUgPT09ICdzbWFsbCcgJiYge1xuICAvLyBDb21wZW5zYXRpb24gZm9yIHRoZSBgSW5wdXQuaW5wdXRTaXplU21hbGxgIHN0eWxlLlxuICB0cmFuc2Zvcm06ICd0cmFuc2xhdGUoMCwgMTdweCkgc2NhbGUoMSknXG59LCBvd25lclN0YXRlLnNocmluayAmJiB7XG4gIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZSgwLCAtMS41cHgpIHNjYWxlKDAuNzUpJyxcbiAgdHJhbnNmb3JtT3JpZ2luOiAndG9wIGxlZnQnLFxuICBtYXhXaWR0aDogJzEzMyUnXG59LCAhb3duZXJTdGF0ZS5kaXNhYmxlQW5pbWF0aW9uICYmIHtcbiAgdHJhbnNpdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKFsnY29sb3InLCAndHJhbnNmb3JtJywgJ21heC13aWR0aCddLCB7XG4gICAgZHVyYXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmR1cmF0aW9uLnNob3J0ZXIsXG4gICAgZWFzaW5nOiB0aGVtZS50cmFuc2l0aW9ucy5lYXNpbmcuZWFzZU91dFxuICB9KVxufSwgb3duZXJTdGF0ZS52YXJpYW50ID09PSAnZmlsbGVkJyAmJiBfZXh0ZW5kcyh7XG4gIC8vIENocm9tZSdzIGF1dG9maWxsIGZlYXR1cmUgZ2l2ZXMgdGhlIGlucHV0IGZpZWxkIGEgeWVsbG93IGJhY2tncm91bmQuXG4gIC8vIFNpbmNlIHRoZSBpbnB1dCBmaWVsZCBpcyBiZWhpbmQgdGhlIGxhYmVsIGluIHRoZSBIVE1MIHRyZWUsXG4gIC8vIHRoZSBpbnB1dCBmaWVsZCBpcyBkcmF3biBsYXN0IGFuZCBoaWRlcyB0aGUgbGFiZWwgd2l0aCBhbiBvcGFxdWUgYmFja2dyb3VuZCBjb2xvci5cbiAgLy8gekluZGV4OiAxIHdpbGwgcmFpc2UgdGhlIGxhYmVsIGFib3ZlIG9wYXF1ZSBiYWNrZ3JvdW5kLWNvbG9ycyBvZiBpbnB1dC5cbiAgekluZGV4OiAxLFxuICBwb2ludGVyRXZlbnRzOiAnbm9uZScsXG4gIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZSgxMnB4LCAxNnB4KSBzY2FsZSgxKScsXG4gIG1heFdpZHRoOiAnY2FsYygxMDAlIC0gMjRweCknXG59LCBvd25lclN0YXRlLnNpemUgPT09ICdzbWFsbCcgJiYge1xuICB0cmFuc2Zvcm06ICd0cmFuc2xhdGUoMTJweCwgMTNweCkgc2NhbGUoMSknXG59LCBvd25lclN0YXRlLnNocmluayAmJiBfZXh0ZW5kcyh7XG4gIHVzZXJTZWxlY3Q6ICdub25lJyxcbiAgcG9pbnRlckV2ZW50czogJ2F1dG8nLFxuICB0cmFuc2Zvcm06ICd0cmFuc2xhdGUoMTJweCwgN3B4KSBzY2FsZSgwLjc1KScsXG4gIG1heFdpZHRoOiAnY2FsYygxMzMlIC0gMjRweCknXG59LCBvd25lclN0YXRlLnNpemUgPT09ICdzbWFsbCcgJiYge1xuICB0cmFuc2Zvcm06ICd0cmFuc2xhdGUoMTJweCwgNHB4KSBzY2FsZSgwLjc1KSdcbn0pKSwgb3duZXJTdGF0ZS52YXJpYW50ID09PSAnb3V0bGluZWQnICYmIF9leHRlbmRzKHtcbiAgLy8gc2VlIGNvbW1lbnQgYWJvdmUgb24gZmlsbGVkLnpJbmRleFxuICB6SW5kZXg6IDEsXG4gIHBvaW50ZXJFdmVudHM6ICdub25lJyxcbiAgdHJhbnNmb3JtOiAndHJhbnNsYXRlKDE0cHgsIDE2cHgpIHNjYWxlKDEpJyxcbiAgbWF4V2lkdGg6ICdjYWxjKDEwMCUgLSAyNHB4KSdcbn0sIG93bmVyU3RhdGUuc2l6ZSA9PT0gJ3NtYWxsJyAmJiB7XG4gIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZSgxNHB4LCA5cHgpIHNjYWxlKDEpJ1xufSwgb3duZXJTdGF0ZS5zaHJpbmsgJiYge1xuICB1c2VyU2VsZWN0OiAnbm9uZScsXG4gIHBvaW50ZXJFdmVudHM6ICdhdXRvJyxcbiAgLy8gVGhlb3JldGljYWxseSwgd2Ugc2hvdWxkIGhhdmUgKDgrNSkqMi8wLjc1ID0gMzRweFxuICAvLyBidXQgaXQgZmVlbHMgYSBiZXR0ZXIgd2hlbiBpdCBibGVlZHMgYSBiaXQgb24gdGhlIGxlZnQsIHNvIDMycHguXG4gIG1heFdpZHRoOiAnY2FsYygxMzMlIC0gMzJweCknLFxuICB0cmFuc2Zvcm06ICd0cmFuc2xhdGUoMTRweCwgLTlweCkgc2NhbGUoMC43NSknXG59KSkpO1xuY29uc3QgSW5wdXRMYWJlbCA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIElucHV0TGFiZWwoaW5Qcm9wcywgcmVmKSB7XG4gIGNvbnN0IHByb3BzID0gdXNlRGVmYXVsdFByb3BzKHtcbiAgICBuYW1lOiAnTXVpSW5wdXRMYWJlbCcsXG4gICAgcHJvcHM6IGluUHJvcHNcbiAgfSk7XG4gIGNvbnN0IHtcbiAgICAgIGRpc2FibGVBbmltYXRpb24gPSBmYWxzZSxcbiAgICAgIHNocmluazogc2hyaW5rUHJvcCxcbiAgICAgIGNsYXNzTmFtZVxuICAgIH0gPSBwcm9wcyxcbiAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQpO1xuICBjb25zdCBtdWlGb3JtQ29udHJvbCA9IHVzZUZvcm1Db250cm9sKCk7XG4gIGxldCBzaHJpbmsgPSBzaHJpbmtQcm9wO1xuICBpZiAodHlwZW9mIHNocmluayA9PT0gJ3VuZGVmaW5lZCcgJiYgbXVpRm9ybUNvbnRyb2wpIHtcbiAgICBzaHJpbmsgPSBtdWlGb3JtQ29udHJvbC5maWxsZWQgfHwgbXVpRm9ybUNvbnRyb2wuZm9jdXNlZCB8fCBtdWlGb3JtQ29udHJvbC5hZG9ybmVkU3RhcnQ7XG4gIH1cbiAgY29uc3QgZmNzID0gZm9ybUNvbnRyb2xTdGF0ZSh7XG4gICAgcHJvcHMsXG4gICAgbXVpRm9ybUNvbnRyb2wsXG4gICAgc3RhdGVzOiBbJ3NpemUnLCAndmFyaWFudCcsICdyZXF1aXJlZCcsICdmb2N1c2VkJ11cbiAgfSk7XG4gIGNvbnN0IG93bmVyU3RhdGUgPSBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICBkaXNhYmxlQW5pbWF0aW9uLFxuICAgIGZvcm1Db250cm9sOiBtdWlGb3JtQ29udHJvbCxcbiAgICBzaHJpbmssXG4gICAgc2l6ZTogZmNzLnNpemUsXG4gICAgdmFyaWFudDogZmNzLnZhcmlhbnQsXG4gICAgcmVxdWlyZWQ6IGZjcy5yZXF1aXJlZCxcbiAgICBmb2N1c2VkOiBmY3MuZm9jdXNlZFxuICB9KTtcbiAgY29uc3QgY2xhc3NlcyA9IHVzZVV0aWxpdHlDbGFzc2VzKG93bmVyU3RhdGUpO1xuICByZXR1cm4gLyojX19QVVJFX18qL19qc3goSW5wdXRMYWJlbFJvb3QsIF9leHRlbmRzKHtcbiAgICBcImRhdGEtc2hyaW5rXCI6IHNocmluayxcbiAgICBvd25lclN0YXRlOiBvd25lclN0YXRlLFxuICAgIHJlZjogcmVmLFxuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSlcbiAgfSwgb3RoZXIsIHtcbiAgICBjbGFzc2VzOiBjbGFzc2VzXG4gIH0pKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gSW5wdXRMYWJlbC5wcm9wVHlwZXMgLyogcmVtb3ZlLXByb3B0eXBlcyAqLyA9IHtcbiAgLy8g4pSM4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAIFdhcm5pbmcg4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSQXG4gIC8vIOKUgiBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMuIOKUglxuICAvLyDilIIgICAgVG8gdXBkYXRlIHRoZW0sIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIGBwbnBtIHByb3B0eXBlc2AuICAgICDilIJcbiAgLy8g4pSU4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSYXG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIFRoZSBjb2xvciBvZiB0aGUgY29tcG9uZW50LlxuICAgKiBJdCBzdXBwb3J0cyBib3RoIGRlZmF1bHQgYW5kIGN1c3RvbSB0aGVtZSBjb2xvcnMsIHdoaWNoIGNhbiBiZSBhZGRlZCBhcyBzaG93biBpbiB0aGVcbiAgICogW3BhbGV0dGUgY3VzdG9taXphdGlvbiBndWlkZV0oaHR0cHM6Ly9tdWkuY29tL21hdGVyaWFsLXVpL2N1c3RvbWl6YXRpb24vcGFsZXR0ZS8jY3VzdG9tLWNvbG9ycykuXG4gICAqL1xuICBjb2xvcjogUHJvcFR5cGVzIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi8ub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydlcnJvcicsICdpbmZvJywgJ3ByaW1hcnknLCAnc2Vjb25kYXJ5JywgJ3N1Y2Nlc3MnLCAnd2FybmluZyddKSwgUHJvcFR5cGVzLnN0cmluZ10pLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgdHJhbnNpdGlvbiBhbmltYXRpb24gaXMgZGlzYWJsZWQuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkaXNhYmxlQW5pbWF0aW9uOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGNvbXBvbmVudCBpcyBkaXNhYmxlZC5cbiAgICovXG4gIGRpc2FibGVkOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGxhYmVsIGlzIGRpc3BsYXllZCBpbiBhbiBlcnJvciBzdGF0ZS5cbiAgICovXG4gIGVycm9yOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGBpbnB1dGAgb2YgdGhpcyBsYWJlbCBpcyBmb2N1c2VkLlxuICAgKi9cbiAgZm9jdXNlZDogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBJZiBgZGVuc2VgLCB3aWxsIGFkanVzdCB2ZXJ0aWNhbCBzcGFjaW5nLiBUaGlzIGlzIG5vcm1hbGx5IG9idGFpbmVkIHZpYSBjb250ZXh0IGZyb21cbiAgICogRm9ybUNvbnRyb2wuXG4gICAqL1xuICBtYXJnaW46IFByb3BUeXBlcy5vbmVPZihbJ2RlbnNlJ10pLFxuICAvKipcbiAgICogaWYgYHRydWVgLCB0aGUgbGFiZWwgd2lsbCBpbmRpY2F0ZSB0aGF0IHRoZSBgaW5wdXRgIGlzIHJlcXVpcmVkLlxuICAgKi9cbiAgcmVxdWlyZWQ6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgbGFiZWwgaXMgc2hydW5rLlxuICAgKi9cbiAgc2hyaW5rOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIFRoZSBzaXplIG9mIHRoZSBjb21wb25lbnQuXG4gICAqIEBkZWZhdWx0ICdub3JtYWwnXG4gICAqL1xuICBzaXplOiBQcm9wVHlwZXMgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqLy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ25vcm1hbCcsICdzbWFsbCddKSwgUHJvcFR5cGVzLnN0cmluZ10pLFxuICAvKipcbiAgICogVGhlIHN5c3RlbSBwcm9wIHRoYXQgYWxsb3dzIGRlZmluaW5nIHN5c3RlbSBvdmVycmlkZXMgYXMgd2VsbCBhcyBhZGRpdGlvbmFsIENTUyBzdHlsZXMuXG4gICAqL1xuICBzeDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5ib29sXSkpLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pLFxuICAvKipcbiAgICogVGhlIHZhcmlhbnQgdG8gdXNlLlxuICAgKi9cbiAgdmFyaWFudDogUHJvcFR5cGVzLm9uZU9mKFsnZmlsbGVkJywgJ291dGxpbmVkJywgJ3N0YW5kYXJkJ10pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgSW5wdXRMYWJlbDsiLCJpbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzZXMnO1xuaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3MnO1xuZXhwb3J0IGZ1bmN0aW9uIGdldExpbmVhclByb2dyZXNzVXRpbGl0eUNsYXNzKHNsb3QpIHtcbiAgcmV0dXJuIGdlbmVyYXRlVXRpbGl0eUNsYXNzKCdNdWlMaW5lYXJQcm9ncmVzcycsIHNsb3QpO1xufVxuY29uc3QgbGluZWFyUHJvZ3Jlc3NDbGFzc2VzID0gZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcygnTXVpTGluZWFyUHJvZ3Jlc3MnLCBbJ3Jvb3QnLCAnY29sb3JQcmltYXJ5JywgJ2NvbG9yU2Vjb25kYXJ5JywgJ2RldGVybWluYXRlJywgJ2luZGV0ZXJtaW5hdGUnLCAnYnVmZmVyJywgJ3F1ZXJ5JywgJ2Rhc2hlZCcsICdkYXNoZWRDb2xvclByaW1hcnknLCAnZGFzaGVkQ29sb3JTZWNvbmRhcnknLCAnYmFyJywgJ2JhckNvbG9yUHJpbWFyeScsICdiYXJDb2xvclNlY29uZGFyeScsICdiYXIxSW5kZXRlcm1pbmF0ZScsICdiYXIxRGV0ZXJtaW5hdGUnLCAnYmFyMUJ1ZmZlcicsICdiYXIySW5kZXRlcm1pbmF0ZScsICdiYXIyQnVmZmVyJ10pO1xuZXhwb3J0IGRlZmF1bHQgbGluZWFyUHJvZ3Jlc3NDbGFzc2VzOyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImNsYXNzTmFtZVwiLCBcImNvbG9yXCIsIFwidmFsdWVcIiwgXCJ2YWx1ZUJ1ZmZlclwiLCBcInZhcmlhbnRcIl07XG5sZXQgXyA9IHQgPT4gdCxcbiAgX3QsXG4gIF90MixcbiAgX3QzLFxuICBfdDQsXG4gIF90NSxcbiAgX3Q2O1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IGNvbXBvc2VDbGFzc2VzIGZyb20gJ0BtdWkvdXRpbHMvY29tcG9zZUNsYXNzZXMnO1xuaW1wb3J0IHsga2V5ZnJhbWVzLCBjc3MgfSBmcm9tICdAbXVpL3N5c3RlbSc7XG5pbXBvcnQgeyBkYXJrZW4sIGxpZ2h0ZW4gfSBmcm9tICdAbXVpL3N5c3RlbS9jb2xvck1hbmlwdWxhdG9yJztcbmltcG9ydCB7IHVzZVJ0bCB9IGZyb20gJ0BtdWkvc3lzdGVtL1J0bFByb3ZpZGVyJztcbmltcG9ydCBjYXBpdGFsaXplIGZyb20gJy4uL3V0aWxzL2NhcGl0YWxpemUnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICcuLi9zdHlsZXMvc3R5bGVkJztcbmltcG9ydCB7IHVzZURlZmF1bHRQcm9wcyB9IGZyb20gJy4uL0RlZmF1bHRQcm9wc1Byb3ZpZGVyJztcbmltcG9ydCB7IGdldExpbmVhclByb2dyZXNzVXRpbGl0eUNsYXNzIH0gZnJvbSAnLi9saW5lYXJQcm9ncmVzc0NsYXNzZXMnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmltcG9ydCB7IGpzeHMgYXMgX2pzeHMgfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmNvbnN0IFRSQU5TSVRJT05fRFVSQVRJT04gPSA0OyAvLyBzZWNvbmRzXG5jb25zdCBpbmRldGVybWluYXRlMUtleWZyYW1lID0ga2V5ZnJhbWVzKF90IHx8IChfdCA9IF9gXG4gIDAlIHtcbiAgICBsZWZ0OiAtMzUlO1xuICAgIHJpZ2h0OiAxMDAlO1xuICB9XG5cbiAgNjAlIHtcbiAgICBsZWZ0OiAxMDAlO1xuICAgIHJpZ2h0OiAtOTAlO1xuICB9XG5cbiAgMTAwJSB7XG4gICAgbGVmdDogMTAwJTtcbiAgICByaWdodDogLTkwJTtcbiAgfVxuYCkpO1xuY29uc3QgaW5kZXRlcm1pbmF0ZTJLZXlmcmFtZSA9IGtleWZyYW1lcyhfdDIgfHwgKF90MiA9IF9gXG4gIDAlIHtcbiAgICBsZWZ0OiAtMjAwJTtcbiAgICByaWdodDogMTAwJTtcbiAgfVxuXG4gIDYwJSB7XG4gICAgbGVmdDogMTA3JTtcbiAgICByaWdodDogLTglO1xuICB9XG5cbiAgMTAwJSB7XG4gICAgbGVmdDogMTA3JTtcbiAgICByaWdodDogLTglO1xuICB9XG5gKSk7XG5jb25zdCBidWZmZXJLZXlmcmFtZSA9IGtleWZyYW1lcyhfdDMgfHwgKF90MyA9IF9gXG4gIDAlIHtcbiAgICBvcGFjaXR5OiAxO1xuICAgIGJhY2tncm91bmQtcG9zaXRpb246IDAgLTIzcHg7XG4gIH1cblxuICA2MCUge1xuICAgIG9wYWNpdHk6IDA7XG4gICAgYmFja2dyb3VuZC1wb3NpdGlvbjogMCAtMjNweDtcbiAgfVxuXG4gIDEwMCUge1xuICAgIG9wYWNpdHk6IDE7XG4gICAgYmFja2dyb3VuZC1wb3NpdGlvbjogLTIwMHB4IC0yM3B4O1xuICB9XG5gKSk7XG5jb25zdCB1c2VVdGlsaXR5Q2xhc3NlcyA9IG93bmVyU3RhdGUgPT4ge1xuICBjb25zdCB7XG4gICAgY2xhc3NlcyxcbiAgICB2YXJpYW50LFxuICAgIGNvbG9yXG4gIH0gPSBvd25lclN0YXRlO1xuICBjb25zdCBzbG90cyA9IHtcbiAgICByb290OiBbJ3Jvb3QnLCBgY29sb3Ike2NhcGl0YWxpemUoY29sb3IpfWAsIHZhcmlhbnRdLFxuICAgIGRhc2hlZDogWydkYXNoZWQnLCBgZGFzaGVkQ29sb3Ike2NhcGl0YWxpemUoY29sb3IpfWBdLFxuICAgIGJhcjE6IFsnYmFyJywgYGJhckNvbG9yJHtjYXBpdGFsaXplKGNvbG9yKX1gLCAodmFyaWFudCA9PT0gJ2luZGV0ZXJtaW5hdGUnIHx8IHZhcmlhbnQgPT09ICdxdWVyeScpICYmICdiYXIxSW5kZXRlcm1pbmF0ZScsIHZhcmlhbnQgPT09ICdkZXRlcm1pbmF0ZScgJiYgJ2JhcjFEZXRlcm1pbmF0ZScsIHZhcmlhbnQgPT09ICdidWZmZXInICYmICdiYXIxQnVmZmVyJ10sXG4gICAgYmFyMjogWydiYXInLCB2YXJpYW50ICE9PSAnYnVmZmVyJyAmJiBgYmFyQ29sb3Ike2NhcGl0YWxpemUoY29sb3IpfWAsIHZhcmlhbnQgPT09ICdidWZmZXInICYmIGBjb2xvciR7Y2FwaXRhbGl6ZShjb2xvcil9YCwgKHZhcmlhbnQgPT09ICdpbmRldGVybWluYXRlJyB8fCB2YXJpYW50ID09PSAncXVlcnknKSAmJiAnYmFyMkluZGV0ZXJtaW5hdGUnLCB2YXJpYW50ID09PSAnYnVmZmVyJyAmJiAnYmFyMkJ1ZmZlciddXG4gIH07XG4gIHJldHVybiBjb21wb3NlQ2xhc3NlcyhzbG90cywgZ2V0TGluZWFyUHJvZ3Jlc3NVdGlsaXR5Q2xhc3MsIGNsYXNzZXMpO1xufTtcbmNvbnN0IGdldENvbG9yU2hhZGUgPSAodGhlbWUsIGNvbG9yKSA9PiB7XG4gIGlmIChjb2xvciA9PT0gJ2luaGVyaXQnKSB7XG4gICAgcmV0dXJuICdjdXJyZW50Q29sb3InO1xuICB9XG4gIGlmICh0aGVtZS52YXJzKSB7XG4gICAgcmV0dXJuIHRoZW1lLnZhcnMucGFsZXR0ZS5MaW5lYXJQcm9ncmVzc1tgJHtjb2xvcn1CZ2BdO1xuICB9XG4gIHJldHVybiB0aGVtZS5wYWxldHRlLm1vZGUgPT09ICdsaWdodCcgPyBsaWdodGVuKHRoZW1lLnBhbGV0dGVbY29sb3JdLm1haW4sIDAuNjIpIDogZGFya2VuKHRoZW1lLnBhbGV0dGVbY29sb3JdLm1haW4sIDAuNSk7XG59O1xuY29uc3QgTGluZWFyUHJvZ3Jlc3NSb290ID0gc3R5bGVkKCdzcGFuJywge1xuICBuYW1lOiAnTXVpTGluZWFyUHJvZ3Jlc3MnLFxuICBzbG90OiAnUm9vdCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9ID0gcHJvcHM7XG4gICAgcmV0dXJuIFtzdHlsZXMucm9vdCwgc3R5bGVzW2Bjb2xvciR7Y2FwaXRhbGl6ZShvd25lclN0YXRlLmNvbG9yKX1gXSwgc3R5bGVzW293bmVyU3RhdGUudmFyaWFudF1dO1xuICB9XG59KSgoe1xuICBvd25lclN0YXRlLFxuICB0aGVtZVxufSkgPT4gX2V4dGVuZHMoe1xuICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxuICBkaXNwbGF5OiAnYmxvY2snLFxuICBoZWlnaHQ6IDQsXG4gIHpJbmRleDogMCxcbiAgLy8gRml4IFNhZmFyaSdzIGJ1ZyBkdXJpbmcgY29tcG9zaXRpb24gb2YgZGlmZmVyZW50IHBhaW50LlxuICAnQG1lZGlhIHByaW50Jzoge1xuICAgIGNvbG9yQWRqdXN0OiAnZXhhY3QnXG4gIH0sXG4gIGJhY2tncm91bmRDb2xvcjogZ2V0Q29sb3JTaGFkZSh0aGVtZSwgb3duZXJTdGF0ZS5jb2xvcilcbn0sIG93bmVyU3RhdGUuY29sb3IgPT09ICdpbmhlcml0JyAmJiBvd25lclN0YXRlLnZhcmlhbnQgIT09ICdidWZmZXInICYmIHtcbiAgYmFja2dyb3VuZENvbG9yOiAnbm9uZScsXG4gICcmOjpiZWZvcmUnOiB7XG4gICAgY29udGVudDogJ1wiXCInLFxuICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgIGxlZnQ6IDAsXG4gICAgdG9wOiAwLFxuICAgIHJpZ2h0OiAwLFxuICAgIGJvdHRvbTogMCxcbiAgICBiYWNrZ3JvdW5kQ29sb3I6ICdjdXJyZW50Q29sb3InLFxuICAgIG9wYWNpdHk6IDAuM1xuICB9XG59LCBvd25lclN0YXRlLnZhcmlhbnQgPT09ICdidWZmZXInICYmIHtcbiAgYmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnXG59LCBvd25lclN0YXRlLnZhcmlhbnQgPT09ICdxdWVyeScgJiYge1xuICB0cmFuc2Zvcm06ICdyb3RhdGUoMTgwZGVnKSdcbn0pKTtcbmNvbnN0IExpbmVhclByb2dyZXNzRGFzaGVkID0gc3R5bGVkKCdzcGFuJywge1xuICBuYW1lOiAnTXVpTGluZWFyUHJvZ3Jlc3MnLFxuICBzbG90OiAnRGFzaGVkJyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgb3duZXJTdGF0ZVxuICAgIH0gPSBwcm9wcztcbiAgICByZXR1cm4gW3N0eWxlcy5kYXNoZWQsIHN0eWxlc1tgZGFzaGVkQ29sb3Ike2NhcGl0YWxpemUob3duZXJTdGF0ZS5jb2xvcil9YF1dO1xuICB9XG59KSgoe1xuICBvd25lclN0YXRlLFxuICB0aGVtZVxufSkgPT4ge1xuICBjb25zdCBiYWNrZ3JvdW5kQ29sb3IgPSBnZXRDb2xvclNoYWRlKHRoZW1lLCBvd25lclN0YXRlLmNvbG9yKTtcbiAgcmV0dXJuIF9leHRlbmRzKHtcbiAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICBtYXJnaW5Ub3A6IDAsXG4gICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgd2lkdGg6ICcxMDAlJ1xuICB9LCBvd25lclN0YXRlLmNvbG9yID09PSAnaW5oZXJpdCcgJiYge1xuICAgIG9wYWNpdHk6IDAuM1xuICB9LCB7XG4gICAgYmFja2dyb3VuZEltYWdlOiBgcmFkaWFsLWdyYWRpZW50KCR7YmFja2dyb3VuZENvbG9yfSAwJSwgJHtiYWNrZ3JvdW5kQ29sb3J9IDE2JSwgdHJhbnNwYXJlbnQgNDIlKWAsXG4gICAgYmFja2dyb3VuZFNpemU6ICcxMHB4IDEwcHgnLFxuICAgIGJhY2tncm91bmRQb3NpdGlvbjogJzAgLTIzcHgnXG4gIH0pO1xufSwgY3NzKF90NCB8fCAoX3Q0ID0gX2BcbiAgICBhbmltYXRpb246ICR7MH0gM3MgaW5maW5pdGUgbGluZWFyO1xuICBgKSwgYnVmZmVyS2V5ZnJhbWUpKTtcbmNvbnN0IExpbmVhclByb2dyZXNzQmFyMSA9IHN0eWxlZCgnc3BhbicsIHtcbiAgbmFtZTogJ011aUxpbmVhclByb2dyZXNzJyxcbiAgc2xvdDogJ0JhcjEnLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBvd25lclN0YXRlXG4gICAgfSA9IHByb3BzO1xuICAgIHJldHVybiBbc3R5bGVzLmJhciwgc3R5bGVzW2BiYXJDb2xvciR7Y2FwaXRhbGl6ZShvd25lclN0YXRlLmNvbG9yKX1gXSwgKG93bmVyU3RhdGUudmFyaWFudCA9PT0gJ2luZGV0ZXJtaW5hdGUnIHx8IG93bmVyU3RhdGUudmFyaWFudCA9PT0gJ3F1ZXJ5JykgJiYgc3R5bGVzLmJhcjFJbmRldGVybWluYXRlLCBvd25lclN0YXRlLnZhcmlhbnQgPT09ICdkZXRlcm1pbmF0ZScgJiYgc3R5bGVzLmJhcjFEZXRlcm1pbmF0ZSwgb3duZXJTdGF0ZS52YXJpYW50ID09PSAnYnVmZmVyJyAmJiBzdHlsZXMuYmFyMUJ1ZmZlcl07XG4gIH1cbn0pKCh7XG4gIG93bmVyU3RhdGUsXG4gIHRoZW1lXG59KSA9PiBfZXh0ZW5kcyh7XG4gIHdpZHRoOiAnMTAwJScsXG4gIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICBsZWZ0OiAwLFxuICBib3R0b206IDAsXG4gIHRvcDogMCxcbiAgdHJhbnNpdGlvbjogJ3RyYW5zZm9ybSAwLjJzIGxpbmVhcicsXG4gIHRyYW5zZm9ybU9yaWdpbjogJ2xlZnQnLFxuICBiYWNrZ3JvdW5kQ29sb3I6IG93bmVyU3RhdGUuY29sb3IgPT09ICdpbmhlcml0JyA/ICdjdXJyZW50Q29sb3InIDogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGVbb3duZXJTdGF0ZS5jb2xvcl0ubWFpblxufSwgb3duZXJTdGF0ZS52YXJpYW50ID09PSAnZGV0ZXJtaW5hdGUnICYmIHtcbiAgdHJhbnNpdGlvbjogYHRyYW5zZm9ybSAuJHtUUkFOU0lUSU9OX0RVUkFUSU9OfXMgbGluZWFyYFxufSwgb3duZXJTdGF0ZS52YXJpYW50ID09PSAnYnVmZmVyJyAmJiB7XG4gIHpJbmRleDogMSxcbiAgdHJhbnNpdGlvbjogYHRyYW5zZm9ybSAuJHtUUkFOU0lUSU9OX0RVUkFUSU9OfXMgbGluZWFyYFxufSksICh7XG4gIG93bmVyU3RhdGVcbn0pID0+IChvd25lclN0YXRlLnZhcmlhbnQgPT09ICdpbmRldGVybWluYXRlJyB8fCBvd25lclN0YXRlLnZhcmlhbnQgPT09ICdxdWVyeScpICYmIGNzcyhfdDUgfHwgKF90NSA9IF9gXG4gICAgICB3aWR0aDogYXV0bztcbiAgICAgIGFuaW1hdGlvbjogJHswfSAyLjFzIGN1YmljLWJlemllcigwLjY1LCAwLjgxNSwgMC43MzUsIDAuMzk1KSBpbmZpbml0ZTtcbiAgICBgKSwgaW5kZXRlcm1pbmF0ZTFLZXlmcmFtZSkpO1xuY29uc3QgTGluZWFyUHJvZ3Jlc3NCYXIyID0gc3R5bGVkKCdzcGFuJywge1xuICBuYW1lOiAnTXVpTGluZWFyUHJvZ3Jlc3MnLFxuICBzbG90OiAnQmFyMicsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9ID0gcHJvcHM7XG4gICAgcmV0dXJuIFtzdHlsZXMuYmFyLCBzdHlsZXNbYGJhckNvbG9yJHtjYXBpdGFsaXplKG93bmVyU3RhdGUuY29sb3IpfWBdLCAob3duZXJTdGF0ZS52YXJpYW50ID09PSAnaW5kZXRlcm1pbmF0ZScgfHwgb3duZXJTdGF0ZS52YXJpYW50ID09PSAncXVlcnknKSAmJiBzdHlsZXMuYmFyMkluZGV0ZXJtaW5hdGUsIG93bmVyU3RhdGUudmFyaWFudCA9PT0gJ2J1ZmZlcicgJiYgc3R5bGVzLmJhcjJCdWZmZXJdO1xuICB9XG59KSgoe1xuICBvd25lclN0YXRlLFxuICB0aGVtZVxufSkgPT4gX2V4dGVuZHMoe1xuICB3aWR0aDogJzEwMCUnLFxuICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgbGVmdDogMCxcbiAgYm90dG9tOiAwLFxuICB0b3A6IDAsXG4gIHRyYW5zaXRpb246ICd0cmFuc2Zvcm0gMC4ycyBsaW5lYXInLFxuICB0cmFuc2Zvcm1PcmlnaW46ICdsZWZ0J1xufSwgb3duZXJTdGF0ZS52YXJpYW50ICE9PSAnYnVmZmVyJyAmJiB7XG4gIGJhY2tncm91bmRDb2xvcjogb3duZXJTdGF0ZS5jb2xvciA9PT0gJ2luaGVyaXQnID8gJ2N1cnJlbnRDb2xvcicgOiAodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZVtvd25lclN0YXRlLmNvbG9yXS5tYWluXG59LCBvd25lclN0YXRlLmNvbG9yID09PSAnaW5oZXJpdCcgJiYge1xuICBvcGFjaXR5OiAwLjNcbn0sIG93bmVyU3RhdGUudmFyaWFudCA9PT0gJ2J1ZmZlcicgJiYge1xuICBiYWNrZ3JvdW5kQ29sb3I6IGdldENvbG9yU2hhZGUodGhlbWUsIG93bmVyU3RhdGUuY29sb3IpLFxuICB0cmFuc2l0aW9uOiBgdHJhbnNmb3JtIC4ke1RSQU5TSVRJT05fRFVSQVRJT059cyBsaW5lYXJgXG59KSwgKHtcbiAgb3duZXJTdGF0ZVxufSkgPT4gKG93bmVyU3RhdGUudmFyaWFudCA9PT0gJ2luZGV0ZXJtaW5hdGUnIHx8IG93bmVyU3RhdGUudmFyaWFudCA9PT0gJ3F1ZXJ5JykgJiYgY3NzKF90NiB8fCAoX3Q2ID0gX2BcbiAgICAgIHdpZHRoOiBhdXRvO1xuICAgICAgYW5pbWF0aW9uOiAkezB9IDIuMXMgY3ViaWMtYmV6aWVyKDAuMTY1LCAwLjg0LCAwLjQ0LCAxKSAxLjE1cyBpbmZpbml0ZTtcbiAgICBgKSwgaW5kZXRlcm1pbmF0ZTJLZXlmcmFtZSkpO1xuXG4vKipcbiAqICMjIEFSSUFcbiAqXG4gKiBJZiB0aGUgcHJvZ3Jlc3MgYmFyIGlzIGRlc2NyaWJpbmcgdGhlIGxvYWRpbmcgcHJvZ3Jlc3Mgb2YgYSBwYXJ0aWN1bGFyIHJlZ2lvbiBvZiBhIHBhZ2UsXG4gKiB5b3Ugc2hvdWxkIHVzZSBgYXJpYS1kZXNjcmliZWRieWAgdG8gcG9pbnQgdG8gdGhlIHByb2dyZXNzIGJhciwgYW5kIHNldCB0aGUgYGFyaWEtYnVzeWBcbiAqIGF0dHJpYnV0ZSB0byBgdHJ1ZWAgb24gdGhhdCByZWdpb24gdW50aWwgaXQgaGFzIGZpbmlzaGVkIGxvYWRpbmcuXG4gKi9cbmNvbnN0IExpbmVhclByb2dyZXNzID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gTGluZWFyUHJvZ3Jlc3MoaW5Qcm9wcywgcmVmKSB7XG4gIGNvbnN0IHByb3BzID0gdXNlRGVmYXVsdFByb3BzKHtcbiAgICBwcm9wczogaW5Qcm9wcyxcbiAgICBuYW1lOiAnTXVpTGluZWFyUHJvZ3Jlc3MnXG4gIH0pO1xuICBjb25zdCB7XG4gICAgICBjbGFzc05hbWUsXG4gICAgICBjb2xvciA9ICdwcmltYXJ5JyxcbiAgICAgIHZhbHVlLFxuICAgICAgdmFsdWVCdWZmZXIsXG4gICAgICB2YXJpYW50ID0gJ2luZGV0ZXJtaW5hdGUnXG4gICAgfSA9IHByb3BzLFxuICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIF9leGNsdWRlZCk7XG4gIGNvbnN0IG93bmVyU3RhdGUgPSBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICBjb2xvcixcbiAgICB2YXJpYW50XG4gIH0pO1xuICBjb25zdCBjbGFzc2VzID0gdXNlVXRpbGl0eUNsYXNzZXMob3duZXJTdGF0ZSk7XG4gIGNvbnN0IGlzUnRsID0gdXNlUnRsKCk7XG4gIGNvbnN0IHJvb3RQcm9wcyA9IHt9O1xuICBjb25zdCBpbmxpbmVTdHlsZXMgPSB7XG4gICAgYmFyMToge30sXG4gICAgYmFyMjoge31cbiAgfTtcbiAgaWYgKHZhcmlhbnQgPT09ICdkZXRlcm1pbmF0ZScgfHwgdmFyaWFudCA9PT0gJ2J1ZmZlcicpIHtcbiAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcm9vdFByb3BzWydhcmlhLXZhbHVlbm93J10gPSBNYXRoLnJvdW5kKHZhbHVlKTtcbiAgICAgIHJvb3RQcm9wc1snYXJpYS12YWx1ZW1pbiddID0gMDtcbiAgICAgIHJvb3RQcm9wc1snYXJpYS12YWx1ZW1heCddID0gMTAwO1xuICAgICAgbGV0IHRyYW5zZm9ybSA9IHZhbHVlIC0gMTAwO1xuICAgICAgaWYgKGlzUnRsKSB7XG4gICAgICAgIHRyYW5zZm9ybSA9IC10cmFuc2Zvcm07XG4gICAgICB9XG4gICAgICBpbmxpbmVTdHlsZXMuYmFyMS50cmFuc2Zvcm0gPSBgdHJhbnNsYXRlWCgke3RyYW5zZm9ybX0lKWA7XG4gICAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdNVUk6IFlvdSBuZWVkIHRvIHByb3ZpZGUgYSB2YWx1ZSBwcm9wICcgKyAnd2hlbiB1c2luZyB0aGUgZGV0ZXJtaW5hdGUgb3IgYnVmZmVyIHZhcmlhbnQgb2YgTGluZWFyUHJvZ3Jlc3MgLicpO1xuICAgIH1cbiAgfVxuICBpZiAodmFyaWFudCA9PT0gJ2J1ZmZlcicpIHtcbiAgICBpZiAodmFsdWVCdWZmZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgbGV0IHRyYW5zZm9ybSA9ICh2YWx1ZUJ1ZmZlciB8fCAwKSAtIDEwMDtcbiAgICAgIGlmIChpc1J0bCkge1xuICAgICAgICB0cmFuc2Zvcm0gPSAtdHJhbnNmb3JtO1xuICAgICAgfVxuICAgICAgaW5saW5lU3R5bGVzLmJhcjIudHJhbnNmb3JtID0gYHRyYW5zbGF0ZVgoJHt0cmFuc2Zvcm19JSlgO1xuICAgIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgY29uc29sZS5lcnJvcignTVVJOiBZb3UgbmVlZCB0byBwcm92aWRlIGEgdmFsdWVCdWZmZXIgcHJvcCAnICsgJ3doZW4gdXNpbmcgdGhlIGJ1ZmZlciB2YXJpYW50IG9mIExpbmVhclByb2dyZXNzLicpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gLyojX19QVVJFX18qL19qc3hzKExpbmVhclByb2dyZXNzUm9vdCwgX2V4dGVuZHMoe1xuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSksXG4gICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZSxcbiAgICByb2xlOiBcInByb2dyZXNzYmFyXCJcbiAgfSwgcm9vdFByb3BzLCB7XG4gICAgcmVmOiByZWZcbiAgfSwgb3RoZXIsIHtcbiAgICBjaGlsZHJlbjogW3ZhcmlhbnQgPT09ICdidWZmZXInID8gLyojX19QVVJFX18qL19qc3goTGluZWFyUHJvZ3Jlc3NEYXNoZWQsIHtcbiAgICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5kYXNoZWQsXG4gICAgICBvd25lclN0YXRlOiBvd25lclN0YXRlXG4gICAgfSkgOiBudWxsLCAvKiNfX1BVUkVfXyovX2pzeChMaW5lYXJQcm9ncmVzc0JhcjEsIHtcbiAgICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5iYXIxLFxuICAgICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZSxcbiAgICAgIHN0eWxlOiBpbmxpbmVTdHlsZXMuYmFyMVxuICAgIH0pLCB2YXJpYW50ID09PSAnZGV0ZXJtaW5hdGUnID8gbnVsbCA6IC8qI19fUFVSRV9fKi9fanN4KExpbmVhclByb2dyZXNzQmFyMiwge1xuICAgICAgY2xhc3NOYW1lOiBjbGFzc2VzLmJhcjIsXG4gICAgICBvd25lclN0YXRlOiBvd25lclN0YXRlLFxuICAgICAgc3R5bGU6IGlubGluZVN0eWxlcy5iYXIyXG4gICAgfSldXG4gIH0pKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gTGluZWFyUHJvZ3Jlc3MucHJvcFR5cGVzIC8qIHJlbW92ZS1wcm9wdHlwZXMgKi8gPSB7XG4gIC8vIOKUjOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgCBXYXJuaW5nIOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUkFxuICAvLyDilIIgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zLiDilIJcbiAgLy8g4pSCICAgIFRvIHVwZGF0ZSB0aGVtLCBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBgcG5wbSBwcm9wdHlwZXNgLiAgICAg4pSCXG4gIC8vIOKUlOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUmFxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIFRoZSBjb2xvciBvZiB0aGUgY29tcG9uZW50LlxuICAgKiBJdCBzdXBwb3J0cyBib3RoIGRlZmF1bHQgYW5kIGN1c3RvbSB0aGVtZSBjb2xvcnMsIHdoaWNoIGNhbiBiZSBhZGRlZCBhcyBzaG93biBpbiB0aGVcbiAgICogW3BhbGV0dGUgY3VzdG9taXphdGlvbiBndWlkZV0oaHR0cHM6Ly9tdWkuY29tL21hdGVyaWFsLXVpL2N1c3RvbWl6YXRpb24vcGFsZXR0ZS8jY3VzdG9tLWNvbG9ycykuXG4gICAqIEBkZWZhdWx0ICdwcmltYXJ5J1xuICAgKi9cbiAgY29sb3I6IFByb3BUeXBlcyAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsnaW5oZXJpdCcsICdwcmltYXJ5JywgJ3NlY29uZGFyeSddKSwgUHJvcFR5cGVzLnN0cmluZ10pLFxuICAvKipcbiAgICogVGhlIHN5c3RlbSBwcm9wIHRoYXQgYWxsb3dzIGRlZmluaW5nIHN5c3RlbSBvdmVycmlkZXMgYXMgd2VsbCBhcyBhZGRpdGlvbmFsIENTUyBzdHlsZXMuXG4gICAqL1xuICBzeDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5ib29sXSkpLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pLFxuICAvKipcbiAgICogVGhlIHZhbHVlIG9mIHRoZSBwcm9ncmVzcyBpbmRpY2F0b3IgZm9yIHRoZSBkZXRlcm1pbmF0ZSBhbmQgYnVmZmVyIHZhcmlhbnRzLlxuICAgKiBWYWx1ZSBiZXR3ZWVuIDAgYW5kIDEwMC5cbiAgICovXG4gIHZhbHVlOiBQcm9wVHlwZXMubnVtYmVyLFxuICAvKipcbiAgICogVGhlIHZhbHVlIGZvciB0aGUgYnVmZmVyIHZhcmlhbnQuXG4gICAqIFZhbHVlIGJldHdlZW4gMCBhbmQgMTAwLlxuICAgKi9cbiAgdmFsdWVCdWZmZXI6IFByb3BUeXBlcy5udW1iZXIsXG4gIC8qKlxuICAgKiBUaGUgdmFyaWFudCB0byB1c2UuXG4gICAqIFVzZSBpbmRldGVybWluYXRlIG9yIHF1ZXJ5IHdoZW4gdGhlcmUgaXMgbm8gcHJvZ3Jlc3MgdmFsdWUuXG4gICAqIEBkZWZhdWx0ICdpbmRldGVybWluYXRlJ1xuICAgKi9cbiAgdmFyaWFudDogUHJvcFR5cGVzLm9uZU9mKFsnYnVmZmVyJywgJ2RldGVybWluYXRlJywgJ2luZGV0ZXJtaW5hdGUnLCAncXVlcnknXSlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCBMaW5lYXJQcm9ncmVzczsiLCJpbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzZXMnO1xuaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3MnO1xuZXhwb3J0IGZ1bmN0aW9uIGdldExpbmtVdGlsaXR5Q2xhc3Moc2xvdCkge1xuICByZXR1cm4gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoJ011aUxpbmsnLCBzbG90KTtcbn1cbmNvbnN0IGxpbmtDbGFzc2VzID0gZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcygnTXVpTGluaycsIFsncm9vdCcsICd1bmRlcmxpbmVOb25lJywgJ3VuZGVybGluZUhvdmVyJywgJ3VuZGVybGluZUFsd2F5cycsICdidXR0b24nLCAnZm9jdXNWaXNpYmxlJ10pO1xuZXhwb3J0IGRlZmF1bHQgbGlua0NsYXNzZXM7IiwiaW1wb3J0IHsgZ2V0UGF0aCB9IGZyb20gJ0BtdWkvc3lzdGVtJztcbmltcG9ydCB7IGFscGhhIH0gZnJvbSAnQG11aS9zeXN0ZW0vY29sb3JNYW5pcHVsYXRvcic7XG5leHBvcnQgY29uc3QgY29sb3JUcmFuc2Zvcm1hdGlvbnMgPSB7XG4gIHByaW1hcnk6ICdwcmltYXJ5Lm1haW4nLFxuICB0ZXh0UHJpbWFyeTogJ3RleHQucHJpbWFyeScsXG4gIHNlY29uZGFyeTogJ3NlY29uZGFyeS5tYWluJyxcbiAgdGV4dFNlY29uZGFyeTogJ3RleHQuc2Vjb25kYXJ5JyxcbiAgZXJyb3I6ICdlcnJvci5tYWluJ1xufTtcbmNvbnN0IHRyYW5zZm9ybURlcHJlY2F0ZWRDb2xvcnMgPSBjb2xvciA9PiB7XG4gIHJldHVybiBjb2xvclRyYW5zZm9ybWF0aW9uc1tjb2xvcl0gfHwgY29sb3I7XG59O1xuY29uc3QgZ2V0VGV4dERlY29yYXRpb24gPSAoe1xuICB0aGVtZSxcbiAgb3duZXJTdGF0ZVxufSkgPT4ge1xuICBjb25zdCB0cmFuc2Zvcm1lZENvbG9yID0gdHJhbnNmb3JtRGVwcmVjYXRlZENvbG9ycyhvd25lclN0YXRlLmNvbG9yKTtcbiAgY29uc3QgY29sb3IgPSBnZXRQYXRoKHRoZW1lLCBgcGFsZXR0ZS4ke3RyYW5zZm9ybWVkQ29sb3J9YCwgZmFsc2UpIHx8IG93bmVyU3RhdGUuY29sb3I7XG4gIGNvbnN0IGNoYW5uZWxDb2xvciA9IGdldFBhdGgodGhlbWUsIGBwYWxldHRlLiR7dHJhbnNmb3JtZWRDb2xvcn1DaGFubmVsYCk7XG4gIGlmICgndmFycycgaW4gdGhlbWUgJiYgY2hhbm5lbENvbG9yKSB7XG4gICAgcmV0dXJuIGByZ2JhKCR7Y2hhbm5lbENvbG9yfSAvIDAuNClgO1xuICB9XG4gIHJldHVybiBhbHBoYShjb2xvciwgMC40KTtcbn07XG5leHBvcnQgZGVmYXVsdCBnZXRUZXh0RGVjb3JhdGlvbjsiLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJjbGFzc05hbWVcIiwgXCJjb2xvclwiLCBcImNvbXBvbmVudFwiLCBcIm9uQmx1clwiLCBcIm9uRm9jdXNcIiwgXCJUeXBvZ3JhcGh5Q2xhc3Nlc1wiLCBcInVuZGVybGluZVwiLCBcInZhcmlhbnRcIiwgXCJzeFwiXTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCBlbGVtZW50VHlwZUFjY2VwdGluZ1JlZiBmcm9tICdAbXVpL3V0aWxzL2VsZW1lbnRUeXBlQWNjZXB0aW5nUmVmJztcbmltcG9ydCBjb21wb3NlQ2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2NvbXBvc2VDbGFzc2VzJztcbmltcG9ydCBjYXBpdGFsaXplIGZyb20gJy4uL3V0aWxzL2NhcGl0YWxpemUnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICcuLi9zdHlsZXMvc3R5bGVkJztcbmltcG9ydCB7IHVzZURlZmF1bHRQcm9wcyB9IGZyb20gJy4uL0RlZmF1bHRQcm9wc1Byb3ZpZGVyJztcbmltcG9ydCB1c2VJc0ZvY3VzVmlzaWJsZSBmcm9tICcuLi91dGlscy91c2VJc0ZvY3VzVmlzaWJsZSc7XG5pbXBvcnQgdXNlRm9ya1JlZiBmcm9tICcuLi91dGlscy91c2VGb3JrUmVmJztcbmltcG9ydCBUeXBvZ3JhcGh5IGZyb20gJy4uL1R5cG9ncmFwaHknO1xuaW1wb3J0IGxpbmtDbGFzc2VzLCB7IGdldExpbmtVdGlsaXR5Q2xhc3MgfSBmcm9tICcuL2xpbmtDbGFzc2VzJztcbmltcG9ydCBnZXRUZXh0RGVjb3JhdGlvbiwgeyBjb2xvclRyYW5zZm9ybWF0aW9ucyB9IGZyb20gJy4vZ2V0VGV4dERlY29yYXRpb24nO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmNvbnN0IHVzZVV0aWxpdHlDbGFzc2VzID0gb3duZXJTdGF0ZSA9PiB7XG4gIGNvbnN0IHtcbiAgICBjbGFzc2VzLFxuICAgIGNvbXBvbmVudCxcbiAgICBmb2N1c1Zpc2libGUsXG4gICAgdW5kZXJsaW5lXG4gIH0gPSBvd25lclN0YXRlO1xuICBjb25zdCBzbG90cyA9IHtcbiAgICByb290OiBbJ3Jvb3QnLCBgdW5kZXJsaW5lJHtjYXBpdGFsaXplKHVuZGVybGluZSl9YCwgY29tcG9uZW50ID09PSAnYnV0dG9uJyAmJiAnYnV0dG9uJywgZm9jdXNWaXNpYmxlICYmICdmb2N1c1Zpc2libGUnXVxuICB9O1xuICByZXR1cm4gY29tcG9zZUNsYXNzZXMoc2xvdHMsIGdldExpbmtVdGlsaXR5Q2xhc3MsIGNsYXNzZXMpO1xufTtcbmNvbnN0IExpbmtSb290ID0gc3R5bGVkKFR5cG9ncmFwaHksIHtcbiAgbmFtZTogJ011aUxpbmsnLFxuICBzbG90OiAnUm9vdCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9ID0gcHJvcHM7XG4gICAgcmV0dXJuIFtzdHlsZXMucm9vdCwgc3R5bGVzW2B1bmRlcmxpbmUke2NhcGl0YWxpemUob3duZXJTdGF0ZS51bmRlcmxpbmUpfWBdLCBvd25lclN0YXRlLmNvbXBvbmVudCA9PT0gJ2J1dHRvbicgJiYgc3R5bGVzLmJ1dHRvbl07XG4gIH1cbn0pKCh7XG4gIHRoZW1lLFxuICBvd25lclN0YXRlXG59KSA9PiB7XG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgb3duZXJTdGF0ZS51bmRlcmxpbmUgPT09ICdub25lJyAmJiB7XG4gICAgdGV4dERlY29yYXRpb246ICdub25lJ1xuICB9LCBvd25lclN0YXRlLnVuZGVybGluZSA9PT0gJ2hvdmVyJyAmJiB7XG4gICAgdGV4dERlY29yYXRpb246ICdub25lJyxcbiAgICAnJjpob3Zlcic6IHtcbiAgICAgIHRleHREZWNvcmF0aW9uOiAndW5kZXJsaW5lJ1xuICAgIH1cbiAgfSwgb3duZXJTdGF0ZS51bmRlcmxpbmUgPT09ICdhbHdheXMnICYmIF9leHRlbmRzKHtcbiAgICB0ZXh0RGVjb3JhdGlvbjogJ3VuZGVybGluZSdcbiAgfSwgb3duZXJTdGF0ZS5jb2xvciAhPT0gJ2luaGVyaXQnICYmIHtcbiAgICB0ZXh0RGVjb3JhdGlvbkNvbG9yOiBnZXRUZXh0RGVjb3JhdGlvbih7XG4gICAgICB0aGVtZSxcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9KVxuICB9LCB7XG4gICAgJyY6aG92ZXInOiB7XG4gICAgICB0ZXh0RGVjb3JhdGlvbkNvbG9yOiAnaW5oZXJpdCdcbiAgICB9XG4gIH0pLCBvd25lclN0YXRlLmNvbXBvbmVudCA9PT0gJ2J1dHRvbicgJiYge1xuICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgIFdlYmtpdFRhcEhpZ2hsaWdodENvbG9yOiAndHJhbnNwYXJlbnQnLFxuICAgIGJhY2tncm91bmRDb2xvcjogJ3RyYW5zcGFyZW50JyxcbiAgICAvLyBSZXNldCBkZWZhdWx0IHZhbHVlXG4gICAgLy8gV2UgZGlzYWJsZSB0aGUgZm9jdXMgcmluZyBmb3IgbW91c2UsIHRvdWNoIGFuZCBrZXlib2FyZCB1c2Vycy5cbiAgICBvdXRsaW5lOiAwLFxuICAgIGJvcmRlcjogMCxcbiAgICBtYXJnaW46IDAsXG4gICAgLy8gUmVtb3ZlIHRoZSBtYXJnaW4gaW4gU2FmYXJpXG4gICAgYm9yZGVyUmFkaXVzOiAwLFxuICAgIHBhZGRpbmc6IDAsXG4gICAgLy8gUmVtb3ZlIHRoZSBwYWRkaW5nIGluIEZpcmVmb3hcbiAgICBjdXJzb3I6ICdwb2ludGVyJyxcbiAgICB1c2VyU2VsZWN0OiAnbm9uZScsXG4gICAgdmVydGljYWxBbGlnbjogJ21pZGRsZScsXG4gICAgTW96QXBwZWFyYW5jZTogJ25vbmUnLFxuICAgIC8vIFJlc2V0XG4gICAgV2Via2l0QXBwZWFyYW5jZTogJ25vbmUnLFxuICAgIC8vIFJlc2V0XG4gICAgJyY6Oi1tb3otZm9jdXMtaW5uZXInOiB7XG4gICAgICBib3JkZXJTdHlsZTogJ25vbmUnIC8vIFJlbW92ZSBGaXJlZm94IGRvdHRlZCBvdXRsaW5lLlxuICAgIH0sXG4gICAgW2AmLiR7bGlua0NsYXNzZXMuZm9jdXNWaXNpYmxlfWBdOiB7XG4gICAgICBvdXRsaW5lOiAnYXV0bydcbiAgICB9XG4gIH0pO1xufSk7XG5jb25zdCBMaW5rID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gTGluayhpblByb3BzLCByZWYpIHtcbiAgY29uc3QgcHJvcHMgPSB1c2VEZWZhdWx0UHJvcHMoe1xuICAgIHByb3BzOiBpblByb3BzLFxuICAgIG5hbWU6ICdNdWlMaW5rJ1xuICB9KTtcbiAgY29uc3Qge1xuICAgICAgY2xhc3NOYW1lLFxuICAgICAgY29sb3IgPSAncHJpbWFyeScsXG4gICAgICBjb21wb25lbnQgPSAnYScsXG4gICAgICBvbkJsdXIsXG4gICAgICBvbkZvY3VzLFxuICAgICAgVHlwb2dyYXBoeUNsYXNzZXMsXG4gICAgICB1bmRlcmxpbmUgPSAnYWx3YXlzJyxcbiAgICAgIHZhcmlhbnQgPSAnaW5oZXJpdCcsXG4gICAgICBzeFxuICAgIH0gPSBwcm9wcyxcbiAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQpO1xuICBjb25zdCB7XG4gICAgaXNGb2N1c1Zpc2libGVSZWYsXG4gICAgb25CbHVyOiBoYW5kbGVCbHVyVmlzaWJsZSxcbiAgICBvbkZvY3VzOiBoYW5kbGVGb2N1c1Zpc2libGUsXG4gICAgcmVmOiBmb2N1c1Zpc2libGVSZWZcbiAgfSA9IHVzZUlzRm9jdXNWaXNpYmxlKCk7XG4gIGNvbnN0IFtmb2N1c1Zpc2libGUsIHNldEZvY3VzVmlzaWJsZV0gPSBSZWFjdC51c2VTdGF0ZShmYWxzZSk7XG4gIGNvbnN0IGhhbmRsZXJSZWYgPSB1c2VGb3JrUmVmKHJlZiwgZm9jdXNWaXNpYmxlUmVmKTtcbiAgY29uc3QgaGFuZGxlQmx1ciA9IGV2ZW50ID0+IHtcbiAgICBoYW5kbGVCbHVyVmlzaWJsZShldmVudCk7XG4gICAgaWYgKGlzRm9jdXNWaXNpYmxlUmVmLmN1cnJlbnQgPT09IGZhbHNlKSB7XG4gICAgICBzZXRGb2N1c1Zpc2libGUoZmFsc2UpO1xuICAgIH1cbiAgICBpZiAob25CbHVyKSB7XG4gICAgICBvbkJsdXIoZXZlbnQpO1xuICAgIH1cbiAgfTtcbiAgY29uc3QgaGFuZGxlRm9jdXMgPSBldmVudCA9PiB7XG4gICAgaGFuZGxlRm9jdXNWaXNpYmxlKGV2ZW50KTtcbiAgICBpZiAoaXNGb2N1c1Zpc2libGVSZWYuY3VycmVudCA9PT0gdHJ1ZSkge1xuICAgICAgc2V0Rm9jdXNWaXNpYmxlKHRydWUpO1xuICAgIH1cbiAgICBpZiAob25Gb2N1cykge1xuICAgICAgb25Gb2N1cyhldmVudCk7XG4gICAgfVxuICB9O1xuICBjb25zdCBvd25lclN0YXRlID0gX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgY29sb3IsXG4gICAgY29tcG9uZW50LFxuICAgIGZvY3VzVmlzaWJsZSxcbiAgICB1bmRlcmxpbmUsXG4gICAgdmFyaWFudFxuICB9KTtcbiAgY29uc3QgY2xhc3NlcyA9IHVzZVV0aWxpdHlDbGFzc2VzKG93bmVyU3RhdGUpO1xuICByZXR1cm4gLyojX19QVVJFX18qL19qc3goTGlua1Jvb3QsIF9leHRlbmRzKHtcbiAgICBjb2xvcjogY29sb3IsXG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lKSxcbiAgICBjbGFzc2VzOiBUeXBvZ3JhcGh5Q2xhc3NlcyxcbiAgICBjb21wb25lbnQ6IGNvbXBvbmVudCxcbiAgICBvbkJsdXI6IGhhbmRsZUJsdXIsXG4gICAgb25Gb2N1czogaGFuZGxlRm9jdXMsXG4gICAgcmVmOiBoYW5kbGVyUmVmLFxuICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGUsXG4gICAgdmFyaWFudDogdmFyaWFudCxcbiAgICBzeDogWy4uLighT2JqZWN0LmtleXMoY29sb3JUcmFuc2Zvcm1hdGlvbnMpLmluY2x1ZGVzKGNvbG9yKSA/IFt7XG4gICAgICBjb2xvclxuICAgIH1dIDogW10pLCAuLi4oQXJyYXkuaXNBcnJheShzeCkgPyBzeCA6IFtzeF0pXVxuICB9LCBvdGhlcikpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBMaW5rLnByb3BUeXBlcyAvKiByZW1vdmUtcHJvcHR5cGVzICovID0ge1xuICAvLyDilIzilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIAgV2FybmluZyDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJBcbiAgLy8g4pSCIFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucy4g4pSCXG4gIC8vIOKUgiAgICBUbyB1cGRhdGUgdGhlbSwgZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gYHBucG0gcHJvcHR5cGVzYC4gICAgIOKUglxuICAvLyDilJTilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJhcbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogVGhlIGNvbG9yIG9mIHRoZSBsaW5rLlxuICAgKiBAZGVmYXVsdCAncHJpbWFyeSdcbiAgICovXG4gIGNvbG9yOiBQcm9wVHlwZXMgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqLy5hbnksXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBIVE1MIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBjb21wb25lbnQ6IGVsZW1lbnRUeXBlQWNjZXB0aW5nUmVmLFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25CbHVyOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uRm9jdXM6IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogVGhlIHN5c3RlbSBwcm9wIHRoYXQgYWxsb3dzIGRlZmluaW5nIHN5c3RlbSBvdmVycmlkZXMgYXMgd2VsbCBhcyBhZGRpdGlvbmFsIENTUyBzdHlsZXMuXG4gICAqL1xuICBzeDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5ib29sXSkpLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pLFxuICAvKipcbiAgICogYGNsYXNzZXNgIHByb3AgYXBwbGllZCB0byB0aGUgW2BUeXBvZ3JhcGh5YF0oL21hdGVyaWFsLXVpL2FwaS90eXBvZ3JhcGh5LykgZWxlbWVudC5cbiAgICovXG4gIFR5cG9ncmFwaHlDbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogQ29udHJvbHMgd2hlbiB0aGUgbGluayBzaG91bGQgaGF2ZSBhbiB1bmRlcmxpbmUuXG4gICAqIEBkZWZhdWx0ICdhbHdheXMnXG4gICAqL1xuICB1bmRlcmxpbmU6IFByb3BUeXBlcy5vbmVPZihbJ2Fsd2F5cycsICdob3ZlcicsICdub25lJ10pLFxuICAvKipcbiAgICogQXBwbGllcyB0aGUgdGhlbWUgdHlwb2dyYXBoeSBzdHlsZXMuXG4gICAqIEBkZWZhdWx0ICdpbmhlcml0J1xuICAgKi9cbiAgdmFyaWFudDogUHJvcFR5cGVzIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi8ub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydib2R5MScsICdib2R5MicsICdidXR0b24nLCAnY2FwdGlvbicsICdoMScsICdoMicsICdoMycsICdoNCcsICdoNScsICdoNicsICdpbmhlcml0JywgJ292ZXJsaW5lJywgJ3N1YnRpdGxlMScsICdzdWJ0aXRsZTInXSksIFByb3BUeXBlcy5zdHJpbmddKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IExpbms7IiwiaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzc2VzJztcbmltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzJztcbmV4cG9ydCBmdW5jdGlvbiBnZXRMaXN0SXRlbVV0aWxpdHlDbGFzcyhzbG90KSB7XG4gIHJldHVybiBnZW5lcmF0ZVV0aWxpdHlDbGFzcygnTXVpTGlzdEl0ZW0nLCBzbG90KTtcbn1cbmNvbnN0IGxpc3RJdGVtQ2xhc3NlcyA9IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMoJ011aUxpc3RJdGVtJywgWydyb290JywgJ2NvbnRhaW5lcicsICdmb2N1c1Zpc2libGUnLCAnZGVuc2UnLCAnYWxpZ25JdGVtc0ZsZXhTdGFydCcsICdkaXNhYmxlZCcsICdkaXZpZGVyJywgJ2d1dHRlcnMnLCAncGFkZGluZycsICdidXR0b24nLCAnc2Vjb25kYXJ5QWN0aW9uJywgJ3NlbGVjdGVkJ10pO1xuZXhwb3J0IGRlZmF1bHQgbGlzdEl0ZW1DbGFzc2VzOyIsImltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3Nlcyc7XG5pbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3MgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzcyc7XG5leHBvcnQgZnVuY3Rpb24gZ2V0TGlzdEl0ZW1CdXR0b25VdGlsaXR5Q2xhc3Moc2xvdCkge1xuICByZXR1cm4gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoJ011aUxpc3RJdGVtQnV0dG9uJywgc2xvdCk7XG59XG5jb25zdCBsaXN0SXRlbUJ1dHRvbkNsYXNzZXMgPSBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzKCdNdWlMaXN0SXRlbUJ1dHRvbicsIFsncm9vdCcsICdmb2N1c1Zpc2libGUnLCAnZGVuc2UnLCAnYWxpZ25JdGVtc0ZsZXhTdGFydCcsICdkaXNhYmxlZCcsICdkaXZpZGVyJywgJ2d1dHRlcnMnLCAnc2VsZWN0ZWQnXSk7XG5leHBvcnQgZGVmYXVsdCBsaXN0SXRlbUJ1dHRvbkNsYXNzZXM7IiwiaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzc2VzJztcbmltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzJztcbmV4cG9ydCBmdW5jdGlvbiBnZXRMaXN0SXRlbVNlY29uZGFyeUFjdGlvbkNsYXNzZXNVdGlsaXR5Q2xhc3Moc2xvdCkge1xuICByZXR1cm4gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoJ011aUxpc3RJdGVtU2Vjb25kYXJ5QWN0aW9uJywgc2xvdCk7XG59XG5jb25zdCBsaXN0SXRlbVNlY29uZGFyeUFjdGlvbkNsYXNzZXMgPSBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzKCdNdWlMaXN0SXRlbVNlY29uZGFyeUFjdGlvbicsIFsncm9vdCcsICdkaXNhYmxlR3V0dGVycyddKTtcbmV4cG9ydCBkZWZhdWx0IGxpc3RJdGVtU2Vjb25kYXJ5QWN0aW9uQ2xhc3NlczsiLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJjbGFzc05hbWVcIl07XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgY29tcG9zZUNsYXNzZXMgZnJvbSAnQG11aS91dGlscy9jb21wb3NlQ2xhc3Nlcyc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJy4uL3N0eWxlcy9zdHlsZWQnO1xuaW1wb3J0IHsgdXNlRGVmYXVsdFByb3BzIH0gZnJvbSAnLi4vRGVmYXVsdFByb3BzUHJvdmlkZXInO1xuaW1wb3J0IExpc3RDb250ZXh0IGZyb20gJy4uL0xpc3QvTGlzdENvbnRleHQnO1xuaW1wb3J0IHsgZ2V0TGlzdEl0ZW1TZWNvbmRhcnlBY3Rpb25DbGFzc2VzVXRpbGl0eUNsYXNzIH0gZnJvbSAnLi9saXN0SXRlbVNlY29uZGFyeUFjdGlvbkNsYXNzZXMnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmNvbnN0IHVzZVV0aWxpdHlDbGFzc2VzID0gb3duZXJTdGF0ZSA9PiB7XG4gIGNvbnN0IHtcbiAgICBkaXNhYmxlR3V0dGVycyxcbiAgICBjbGFzc2VzXG4gIH0gPSBvd25lclN0YXRlO1xuICBjb25zdCBzbG90cyA9IHtcbiAgICByb290OiBbJ3Jvb3QnLCBkaXNhYmxlR3V0dGVycyAmJiAnZGlzYWJsZUd1dHRlcnMnXVxuICB9O1xuICByZXR1cm4gY29tcG9zZUNsYXNzZXMoc2xvdHMsIGdldExpc3RJdGVtU2Vjb25kYXJ5QWN0aW9uQ2xhc3Nlc1V0aWxpdHlDbGFzcywgY2xhc3Nlcyk7XG59O1xuY29uc3QgTGlzdEl0ZW1TZWNvbmRhcnlBY3Rpb25Sb290ID0gc3R5bGVkKCdkaXYnLCB7XG4gIG5hbWU6ICdNdWlMaXN0SXRlbVNlY29uZGFyeUFjdGlvbicsXG4gIHNsb3Q6ICdSb290JyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgb3duZXJTdGF0ZVxuICAgIH0gPSBwcm9wcztcbiAgICByZXR1cm4gW3N0eWxlcy5yb290LCBvd25lclN0YXRlLmRpc2FibGVHdXR0ZXJzICYmIHN0eWxlcy5kaXNhYmxlR3V0dGVyc107XG4gIH1cbn0pKCh7XG4gIG93bmVyU3RhdGVcbn0pID0+IF9leHRlbmRzKHtcbiAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gIHJpZ2h0OiAxNixcbiAgdG9wOiAnNTAlJyxcbiAgdHJhbnNmb3JtOiAndHJhbnNsYXRlWSgtNTAlKSdcbn0sIG93bmVyU3RhdGUuZGlzYWJsZUd1dHRlcnMgJiYge1xuICByaWdodDogMFxufSkpO1xuXG4vKipcbiAqIE11c3QgYmUgdXNlZCBhcyB0aGUgbGFzdCBjaGlsZCBvZiBMaXN0SXRlbSB0byBmdW5jdGlvbiBwcm9wZXJseS5cbiAqL1xuY29uc3QgTGlzdEl0ZW1TZWNvbmRhcnlBY3Rpb24gPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBMaXN0SXRlbVNlY29uZGFyeUFjdGlvbihpblByb3BzLCByZWYpIHtcbiAgY29uc3QgcHJvcHMgPSB1c2VEZWZhdWx0UHJvcHMoe1xuICAgIHByb3BzOiBpblByb3BzLFxuICAgIG5hbWU6ICdNdWlMaXN0SXRlbVNlY29uZGFyeUFjdGlvbidcbiAgfSk7XG4gIGNvbnN0IHtcbiAgICAgIGNsYXNzTmFtZVxuICAgIH0gPSBwcm9wcyxcbiAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQpO1xuICBjb25zdCBjb250ZXh0ID0gUmVhY3QudXNlQ29udGV4dChMaXN0Q29udGV4dCk7XG4gIGNvbnN0IG93bmVyU3RhdGUgPSBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICBkaXNhYmxlR3V0dGVyczogY29udGV4dC5kaXNhYmxlR3V0dGVyc1xuICB9KTtcbiAgY29uc3QgY2xhc3NlcyA9IHVzZVV0aWxpdHlDbGFzc2VzKG93bmVyU3RhdGUpO1xuICByZXR1cm4gLyojX19QVVJFX18qL19qc3goTGlzdEl0ZW1TZWNvbmRhcnlBY3Rpb25Sb290LCBfZXh0ZW5kcyh7XG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lKSxcbiAgICBvd25lclN0YXRlOiBvd25lclN0YXRlLFxuICAgIHJlZjogcmVmXG4gIH0sIG90aGVyKSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IExpc3RJdGVtU2Vjb25kYXJ5QWN0aW9uLnByb3BUeXBlcyAvKiByZW1vdmUtcHJvcHR5cGVzICovID0ge1xuICAvLyDilIzilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIAgV2FybmluZyDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJBcbiAgLy8g4pSCIFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucy4g4pSCXG4gIC8vIOKUgiAgICBUbyB1cGRhdGUgdGhlbSwgZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gYHBucG0gcHJvcHR5cGVzYC4gICAgIOKUglxuICAvLyDilJTilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJhcbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBjb21wb25lbnQsIG5vcm1hbGx5IGFuIGBJY29uQnV0dG9uYCBvciBzZWxlY3Rpb24gY29udHJvbC5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBUaGUgc3lzdGVtIHByb3AgdGhhdCBhbGxvd3MgZGVmaW5pbmcgc3lzdGVtIG92ZXJyaWRlcyBhcyB3ZWxsIGFzIGFkZGl0aW9uYWwgQ1NTIHN0eWxlcy5cbiAgICovXG4gIHN4OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLmJvb2xdKSksIFByb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSlcbn0gOiB2b2lkIDA7XG5MaXN0SXRlbVNlY29uZGFyeUFjdGlvbi5tdWlOYW1lID0gJ0xpc3RJdGVtU2Vjb25kYXJ5QWN0aW9uJztcbmV4cG9ydCBkZWZhdWx0IExpc3RJdGVtU2Vjb25kYXJ5QWN0aW9uOyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImNsYXNzTmFtZVwiXSxcbiAgX2V4Y2x1ZGVkMiA9IFtcImFsaWduSXRlbXNcIiwgXCJhdXRvRm9jdXNcIiwgXCJidXR0b25cIiwgXCJjaGlsZHJlblwiLCBcImNsYXNzTmFtZVwiLCBcImNvbXBvbmVudFwiLCBcImNvbXBvbmVudHNcIiwgXCJjb21wb25lbnRzUHJvcHNcIiwgXCJDb250YWluZXJDb21wb25lbnRcIiwgXCJDb250YWluZXJQcm9wc1wiLCBcImRlbnNlXCIsIFwiZGlzYWJsZWRcIiwgXCJkaXNhYmxlR3V0dGVyc1wiLCBcImRpc2FibGVQYWRkaW5nXCIsIFwiZGl2aWRlclwiLCBcImZvY3VzVmlzaWJsZUNsYXNzTmFtZVwiLCBcInNlY29uZGFyeUFjdGlvblwiLCBcInNlbGVjdGVkXCIsIFwic2xvdFByb3BzXCIsIFwic2xvdHNcIl07XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgY29tcG9zZUNsYXNzZXMgZnJvbSAnQG11aS91dGlscy9jb21wb3NlQ2xhc3Nlcyc7XG5pbXBvcnQgZWxlbWVudFR5cGVBY2NlcHRpbmdSZWYgZnJvbSAnQG11aS91dGlscy9lbGVtZW50VHlwZUFjY2VwdGluZ1JlZic7XG5pbXBvcnQgY2hhaW5Qcm9wVHlwZXMgZnJvbSAnQG11aS91dGlscy9jaGFpblByb3BUeXBlcyc7XG5pbXBvcnQgeyBhbHBoYSB9IGZyb20gJ0BtdWkvc3lzdGVtL2NvbG9yTWFuaXB1bGF0b3InO1xuaW1wb3J0IGlzSG9zdENvbXBvbmVudCBmcm9tICdAbXVpL3V0aWxzL2lzSG9zdENvbXBvbmVudCc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJy4uL3N0eWxlcy9zdHlsZWQnO1xuaW1wb3J0IHsgdXNlRGVmYXVsdFByb3BzIH0gZnJvbSAnLi4vRGVmYXVsdFByb3BzUHJvdmlkZXInO1xuaW1wb3J0IEJ1dHRvbkJhc2UgZnJvbSAnLi4vQnV0dG9uQmFzZSc7XG5pbXBvcnQgaXNNdWlFbGVtZW50IGZyb20gJy4uL3V0aWxzL2lzTXVpRWxlbWVudCc7XG5pbXBvcnQgdXNlRW5oYW5jZWRFZmZlY3QgZnJvbSAnLi4vdXRpbHMvdXNlRW5oYW5jZWRFZmZlY3QnO1xuaW1wb3J0IHVzZUZvcmtSZWYgZnJvbSAnLi4vdXRpbHMvdXNlRm9ya1JlZic7XG5pbXBvcnQgTGlzdENvbnRleHQgZnJvbSAnLi4vTGlzdC9MaXN0Q29udGV4dCc7XG5pbXBvcnQgbGlzdEl0ZW1DbGFzc2VzLCB7IGdldExpc3RJdGVtVXRpbGl0eUNsYXNzIH0gZnJvbSAnLi9saXN0SXRlbUNsYXNzZXMnO1xuaW1wb3J0IHsgbGlzdEl0ZW1CdXR0b25DbGFzc2VzIH0gZnJvbSAnLi4vTGlzdEl0ZW1CdXR0b24nO1xuaW1wb3J0IExpc3RJdGVtU2Vjb25kYXJ5QWN0aW9uIGZyb20gJy4uL0xpc3RJdGVtU2Vjb25kYXJ5QWN0aW9uJztcbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5pbXBvcnQgeyBqc3hzIGFzIF9qc3hzIH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5leHBvcnQgY29uc3Qgb3ZlcnJpZGVzUmVzb2x2ZXIgPSAocHJvcHMsIHN0eWxlcykgPT4ge1xuICBjb25zdCB7XG4gICAgb3duZXJTdGF0ZVxuICB9ID0gcHJvcHM7XG4gIHJldHVybiBbc3R5bGVzLnJvb3QsIG93bmVyU3RhdGUuZGVuc2UgJiYgc3R5bGVzLmRlbnNlLCBvd25lclN0YXRlLmFsaWduSXRlbXMgPT09ICdmbGV4LXN0YXJ0JyAmJiBzdHlsZXMuYWxpZ25JdGVtc0ZsZXhTdGFydCwgb3duZXJTdGF0ZS5kaXZpZGVyICYmIHN0eWxlcy5kaXZpZGVyLCAhb3duZXJTdGF0ZS5kaXNhYmxlR3V0dGVycyAmJiBzdHlsZXMuZ3V0dGVycywgIW93bmVyU3RhdGUuZGlzYWJsZVBhZGRpbmcgJiYgc3R5bGVzLnBhZGRpbmcsIG93bmVyU3RhdGUuYnV0dG9uICYmIHN0eWxlcy5idXR0b24sIG93bmVyU3RhdGUuaGFzU2Vjb25kYXJ5QWN0aW9uICYmIHN0eWxlcy5zZWNvbmRhcnlBY3Rpb25dO1xufTtcbmNvbnN0IHVzZVV0aWxpdHlDbGFzc2VzID0gb3duZXJTdGF0ZSA9PiB7XG4gIGNvbnN0IHtcbiAgICBhbGlnbkl0ZW1zLFxuICAgIGJ1dHRvbixcbiAgICBjbGFzc2VzLFxuICAgIGRlbnNlLFxuICAgIGRpc2FibGVkLFxuICAgIGRpc2FibGVHdXR0ZXJzLFxuICAgIGRpc2FibGVQYWRkaW5nLFxuICAgIGRpdmlkZXIsXG4gICAgaGFzU2Vjb25kYXJ5QWN0aW9uLFxuICAgIHNlbGVjdGVkXG4gIH0gPSBvd25lclN0YXRlO1xuICBjb25zdCBzbG90cyA9IHtcbiAgICByb290OiBbJ3Jvb3QnLCBkZW5zZSAmJiAnZGVuc2UnLCAhZGlzYWJsZUd1dHRlcnMgJiYgJ2d1dHRlcnMnLCAhZGlzYWJsZVBhZGRpbmcgJiYgJ3BhZGRpbmcnLCBkaXZpZGVyICYmICdkaXZpZGVyJywgZGlzYWJsZWQgJiYgJ2Rpc2FibGVkJywgYnV0dG9uICYmICdidXR0b24nLCBhbGlnbkl0ZW1zID09PSAnZmxleC1zdGFydCcgJiYgJ2FsaWduSXRlbXNGbGV4U3RhcnQnLCBoYXNTZWNvbmRhcnlBY3Rpb24gJiYgJ3NlY29uZGFyeUFjdGlvbicsIHNlbGVjdGVkICYmICdzZWxlY3RlZCddLFxuICAgIGNvbnRhaW5lcjogWydjb250YWluZXInXVxuICB9O1xuICByZXR1cm4gY29tcG9zZUNsYXNzZXMoc2xvdHMsIGdldExpc3RJdGVtVXRpbGl0eUNsYXNzLCBjbGFzc2VzKTtcbn07XG5leHBvcnQgY29uc3QgTGlzdEl0ZW1Sb290ID0gc3R5bGVkKCdkaXYnLCB7XG4gIG5hbWU6ICdNdWlMaXN0SXRlbScsXG4gIHNsb3Q6ICdSb290JyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXJcbn0pKCh7XG4gIHRoZW1lLFxuICBvd25lclN0YXRlXG59KSA9PiBfZXh0ZW5kcyh7XG4gIGRpc3BsYXk6ICdmbGV4JyxcbiAganVzdGlmeUNvbnRlbnQ6ICdmbGV4LXN0YXJ0JyxcbiAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICB0ZXh0RGVjb3JhdGlvbjogJ25vbmUnLFxuICB3aWR0aDogJzEwMCUnLFxuICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcbiAgdGV4dEFsaWduOiAnbGVmdCdcbn0sICFvd25lclN0YXRlLmRpc2FibGVQYWRkaW5nICYmIF9leHRlbmRzKHtcbiAgcGFkZGluZ1RvcDogOCxcbiAgcGFkZGluZ0JvdHRvbTogOFxufSwgb3duZXJTdGF0ZS5kZW5zZSAmJiB7XG4gIHBhZGRpbmdUb3A6IDQsXG4gIHBhZGRpbmdCb3R0b206IDRcbn0sICFvd25lclN0YXRlLmRpc2FibGVHdXR0ZXJzICYmIHtcbiAgcGFkZGluZ0xlZnQ6IDE2LFxuICBwYWRkaW5nUmlnaHQ6IDE2XG59LCAhIW93bmVyU3RhdGUuc2Vjb25kYXJ5QWN0aW9uICYmIHtcbiAgLy8gQWRkIHNvbWUgc3BhY2UgdG8gYXZvaWQgY29sbGlzaW9uIGFzIGBMaXN0SXRlbVNlY29uZGFyeUFjdGlvbmBcbiAgLy8gaXMgYWJzb2x1dGVseSBwb3NpdGlvbmVkLlxuICBwYWRkaW5nUmlnaHQ6IDQ4XG59KSwgISFvd25lclN0YXRlLnNlY29uZGFyeUFjdGlvbiAmJiB7XG4gIFtgJiA+IC4ke2xpc3RJdGVtQnV0dG9uQ2xhc3Nlcy5yb290fWBdOiB7XG4gICAgcGFkZGluZ1JpZ2h0OiA0OFxuICB9XG59LCB7XG4gIFtgJi4ke2xpc3RJdGVtQ2xhc3Nlcy5mb2N1c1Zpc2libGV9YF06IHtcbiAgICBiYWNrZ3JvdW5kQ29sb3I6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlLmFjdGlvbi5mb2N1c1xuICB9LFxuICBbYCYuJHtsaXN0SXRlbUNsYXNzZXMuc2VsZWN0ZWR9YF06IHtcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnZhcnMgPyBgcmdiYSgke3RoZW1lLnZhcnMucGFsZXR0ZS5wcmltYXJ5Lm1haW5DaGFubmVsfSAvICR7dGhlbWUudmFycy5wYWxldHRlLmFjdGlvbi5zZWxlY3RlZE9wYWNpdHl9KWAgOiBhbHBoYSh0aGVtZS5wYWxldHRlLnByaW1hcnkubWFpbiwgdGhlbWUucGFsZXR0ZS5hY3Rpb24uc2VsZWN0ZWRPcGFjaXR5KSxcbiAgICBbYCYuJHtsaXN0SXRlbUNsYXNzZXMuZm9jdXNWaXNpYmxlfWBdOiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnZhcnMgPyBgcmdiYSgke3RoZW1lLnZhcnMucGFsZXR0ZS5wcmltYXJ5Lm1haW5DaGFubmVsfSAvIGNhbGMoJHt0aGVtZS52YXJzLnBhbGV0dGUuYWN0aW9uLnNlbGVjdGVkT3BhY2l0eX0gKyAke3RoZW1lLnZhcnMucGFsZXR0ZS5hY3Rpb24uZm9jdXNPcGFjaXR5fSkpYCA6IGFscGhhKHRoZW1lLnBhbGV0dGUucHJpbWFyeS5tYWluLCB0aGVtZS5wYWxldHRlLmFjdGlvbi5zZWxlY3RlZE9wYWNpdHkgKyB0aGVtZS5wYWxldHRlLmFjdGlvbi5mb2N1c09wYWNpdHkpXG4gICAgfVxuICB9LFxuICBbYCYuJHtsaXN0SXRlbUNsYXNzZXMuZGlzYWJsZWR9YF06IHtcbiAgICBvcGFjaXR5OiAodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZS5hY3Rpb24uZGlzYWJsZWRPcGFjaXR5XG4gIH1cbn0sIG93bmVyU3RhdGUuYWxpZ25JdGVtcyA9PT0gJ2ZsZXgtc3RhcnQnICYmIHtcbiAgYWxpZ25JdGVtczogJ2ZsZXgtc3RhcnQnXG59LCBvd25lclN0YXRlLmRpdmlkZXIgJiYge1xuICBib3JkZXJCb3R0b206IGAxcHggc29saWQgJHsodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZS5kaXZpZGVyfWAsXG4gIGJhY2tncm91bmRDbGlwOiAncGFkZGluZy1ib3gnXG59LCBvd25lclN0YXRlLmJ1dHRvbiAmJiB7XG4gIHRyYW5zaXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZSgnYmFja2dyb3VuZC1jb2xvcicsIHtcbiAgICBkdXJhdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuZHVyYXRpb24uc2hvcnRlc3RcbiAgfSksXG4gICcmOmhvdmVyJzoge1xuICAgIHRleHREZWNvcmF0aW9uOiAnbm9uZScsXG4gICAgYmFja2dyb3VuZENvbG9yOiAodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZS5hY3Rpb24uaG92ZXIsXG4gICAgLy8gUmVzZXQgb24gdG91Y2ggZGV2aWNlcywgaXQgZG9lc24ndCBhZGQgc3BlY2lmaWNpdHlcbiAgICAnQG1lZGlhIChob3Zlcjogbm9uZSknOiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6ICd0cmFuc3BhcmVudCdcbiAgICB9XG4gIH0sXG4gIFtgJi4ke2xpc3RJdGVtQ2xhc3Nlcy5zZWxlY3RlZH06aG92ZXJgXToge1xuICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUudmFycyA/IGByZ2JhKCR7dGhlbWUudmFycy5wYWxldHRlLnByaW1hcnkubWFpbkNoYW5uZWx9IC8gY2FsYygke3RoZW1lLnZhcnMucGFsZXR0ZS5hY3Rpb24uc2VsZWN0ZWRPcGFjaXR5fSArICR7dGhlbWUudmFycy5wYWxldHRlLmFjdGlvbi5ob3Zlck9wYWNpdHl9KSlgIDogYWxwaGEodGhlbWUucGFsZXR0ZS5wcmltYXJ5Lm1haW4sIHRoZW1lLnBhbGV0dGUuYWN0aW9uLnNlbGVjdGVkT3BhY2l0eSArIHRoZW1lLnBhbGV0dGUuYWN0aW9uLmhvdmVyT3BhY2l0eSksXG4gICAgLy8gUmVzZXQgb24gdG91Y2ggZGV2aWNlcywgaXQgZG9lc24ndCBhZGQgc3BlY2lmaWNpdHlcbiAgICAnQG1lZGlhIChob3Zlcjogbm9uZSknOiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnZhcnMgPyBgcmdiYSgke3RoZW1lLnZhcnMucGFsZXR0ZS5wcmltYXJ5Lm1haW5DaGFubmVsfSAvICR7dGhlbWUudmFycy5wYWxldHRlLmFjdGlvbi5zZWxlY3RlZE9wYWNpdHl9KWAgOiBhbHBoYSh0aGVtZS5wYWxldHRlLnByaW1hcnkubWFpbiwgdGhlbWUucGFsZXR0ZS5hY3Rpb24uc2VsZWN0ZWRPcGFjaXR5KVxuICAgIH1cbiAgfVxufSwgb3duZXJTdGF0ZS5oYXNTZWNvbmRhcnlBY3Rpb24gJiYge1xuICAvLyBBZGQgc29tZSBzcGFjZSB0byBhdm9pZCBjb2xsaXNpb24gYXMgYExpc3RJdGVtU2Vjb25kYXJ5QWN0aW9uYFxuICAvLyBpcyBhYnNvbHV0ZWx5IHBvc2l0aW9uZWQuXG4gIHBhZGRpbmdSaWdodDogNDhcbn0pKTtcbmNvbnN0IExpc3RJdGVtQ29udGFpbmVyID0gc3R5bGVkKCdsaScsIHtcbiAgbmFtZTogJ011aUxpc3RJdGVtJyxcbiAgc2xvdDogJ0NvbnRhaW5lcicsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4gc3R5bGVzLmNvbnRhaW5lclxufSkoe1xuICBwb3NpdGlvbjogJ3JlbGF0aXZlJ1xufSk7XG5cbi8qKlxuICogVXNlcyBhbiBhZGRpdGlvbmFsIGNvbnRhaW5lciBjb21wb25lbnQgaWYgYExpc3RJdGVtU2Vjb25kYXJ5QWN0aW9uYCBpcyB0aGUgbGFzdCBjaGlsZC5cbiAqL1xuY29uc3QgTGlzdEl0ZW0gPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBMaXN0SXRlbShpblByb3BzLCByZWYpIHtcbiAgY29uc3QgcHJvcHMgPSB1c2VEZWZhdWx0UHJvcHMoe1xuICAgIHByb3BzOiBpblByb3BzLFxuICAgIG5hbWU6ICdNdWlMaXN0SXRlbSdcbiAgfSk7XG4gIGNvbnN0IHtcbiAgICAgIGFsaWduSXRlbXMgPSAnY2VudGVyJyxcbiAgICAgIGF1dG9Gb2N1cyA9IGZhbHNlLFxuICAgICAgYnV0dG9uID0gZmFsc2UsXG4gICAgICBjaGlsZHJlbjogY2hpbGRyZW5Qcm9wLFxuICAgICAgY2xhc3NOYW1lLFxuICAgICAgY29tcG9uZW50OiBjb21wb25lbnRQcm9wLFxuICAgICAgY29tcG9uZW50cyA9IHt9LFxuICAgICAgY29tcG9uZW50c1Byb3BzID0ge30sXG4gICAgICBDb250YWluZXJDb21wb25lbnQgPSAnbGknLFxuICAgICAgQ29udGFpbmVyUHJvcHM6IHtcbiAgICAgICAgY2xhc3NOYW1lOiBDb250YWluZXJDbGFzc05hbWVcbiAgICAgIH0gPSB7fSxcbiAgICAgIGRlbnNlID0gZmFsc2UsXG4gICAgICBkaXNhYmxlZCA9IGZhbHNlLFxuICAgICAgZGlzYWJsZUd1dHRlcnMgPSBmYWxzZSxcbiAgICAgIGRpc2FibGVQYWRkaW5nID0gZmFsc2UsXG4gICAgICBkaXZpZGVyID0gZmFsc2UsXG4gICAgICBmb2N1c1Zpc2libGVDbGFzc05hbWUsXG4gICAgICBzZWNvbmRhcnlBY3Rpb24sXG4gICAgICBzZWxlY3RlZCA9IGZhbHNlLFxuICAgICAgc2xvdFByb3BzID0ge30sXG4gICAgICBzbG90cyA9IHt9XG4gICAgfSA9IHByb3BzLFxuICAgIENvbnRhaW5lclByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMuQ29udGFpbmVyUHJvcHMsIF9leGNsdWRlZCksXG4gICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkMik7XG4gIGNvbnN0IGNvbnRleHQgPSBSZWFjdC51c2VDb250ZXh0KExpc3RDb250ZXh0KTtcbiAgY29uc3QgY2hpbGRDb250ZXh0ID0gUmVhY3QudXNlTWVtbygoKSA9PiAoe1xuICAgIGRlbnNlOiBkZW5zZSB8fCBjb250ZXh0LmRlbnNlIHx8IGZhbHNlLFxuICAgIGFsaWduSXRlbXMsXG4gICAgZGlzYWJsZUd1dHRlcnNcbiAgfSksIFthbGlnbkl0ZW1zLCBjb250ZXh0LmRlbnNlLCBkZW5zZSwgZGlzYWJsZUd1dHRlcnNdKTtcbiAgY29uc3QgbGlzdEl0ZW1SZWYgPSBSZWFjdC51c2VSZWYobnVsbCk7XG4gIHVzZUVuaGFuY2VkRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoYXV0b0ZvY3VzKSB7XG4gICAgICBpZiAobGlzdEl0ZW1SZWYuY3VycmVudCkge1xuICAgICAgICBsaXN0SXRlbVJlZi5jdXJyZW50LmZvY3VzKCk7XG4gICAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignTVVJOiBVbmFibGUgdG8gc2V0IGZvY3VzIHRvIGEgTGlzdEl0ZW0gd2hvc2UgY29tcG9uZW50IGhhcyBub3QgYmVlbiByZW5kZXJlZC4nKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIFthdXRvRm9jdXNdKTtcbiAgY29uc3QgY2hpbGRyZW4gPSBSZWFjdC5DaGlsZHJlbi50b0FycmF5KGNoaWxkcmVuUHJvcCk7XG5cbiAgLy8gdjQgaW1wbGVtZW50YXRpb24sIGRlcHJlY2F0ZWQgaW4gdjUsIHdpbGwgYmUgcmVtb3ZlZCBpbiB2NlxuICBjb25zdCBoYXNTZWNvbmRhcnlBY3Rpb24gPSBjaGlsZHJlbi5sZW5ndGggJiYgaXNNdWlFbGVtZW50KGNoaWxkcmVuW2NoaWxkcmVuLmxlbmd0aCAtIDFdLCBbJ0xpc3RJdGVtU2Vjb25kYXJ5QWN0aW9uJ10pO1xuICBjb25zdCBvd25lclN0YXRlID0gX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgYWxpZ25JdGVtcyxcbiAgICBhdXRvRm9jdXMsXG4gICAgYnV0dG9uLFxuICAgIGRlbnNlOiBjaGlsZENvbnRleHQuZGVuc2UsXG4gICAgZGlzYWJsZWQsXG4gICAgZGlzYWJsZUd1dHRlcnMsXG4gICAgZGlzYWJsZVBhZGRpbmcsXG4gICAgZGl2aWRlcixcbiAgICBoYXNTZWNvbmRhcnlBY3Rpb24sXG4gICAgc2VsZWN0ZWRcbiAgfSk7XG4gIGNvbnN0IGNsYXNzZXMgPSB1c2VVdGlsaXR5Q2xhc3Nlcyhvd25lclN0YXRlKTtcbiAgY29uc3QgaGFuZGxlUmVmID0gdXNlRm9ya1JlZihsaXN0SXRlbVJlZiwgcmVmKTtcbiAgY29uc3QgUm9vdCA9IHNsb3RzLnJvb3QgfHwgY29tcG9uZW50cy5Sb290IHx8IExpc3RJdGVtUm9vdDtcbiAgY29uc3Qgcm9vdFByb3BzID0gc2xvdFByb3BzLnJvb3QgfHwgY29tcG9uZW50c1Byb3BzLnJvb3QgfHwge307XG4gIGNvbnN0IGNvbXBvbmVudFByb3BzID0gX2V4dGVuZHMoe1xuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIHJvb3RQcm9wcy5jbGFzc05hbWUsIGNsYXNzTmFtZSksXG4gICAgZGlzYWJsZWRcbiAgfSwgb3RoZXIpO1xuICBsZXQgQ29tcG9uZW50ID0gY29tcG9uZW50UHJvcCB8fCAnbGknO1xuICBpZiAoYnV0dG9uKSB7XG4gICAgY29tcG9uZW50UHJvcHMuY29tcG9uZW50ID0gY29tcG9uZW50UHJvcCB8fCAnZGl2JztcbiAgICBjb21wb25lbnRQcm9wcy5mb2N1c1Zpc2libGVDbGFzc05hbWUgPSBjbHN4KGxpc3RJdGVtQ2xhc3Nlcy5mb2N1c1Zpc2libGUsIGZvY3VzVmlzaWJsZUNsYXNzTmFtZSk7XG4gICAgQ29tcG9uZW50ID0gQnV0dG9uQmFzZTtcbiAgfVxuXG4gIC8vIHY0IGltcGxlbWVudGF0aW9uLCBkZXByZWNhdGVkIGluIHY1LCB3aWxsIGJlIHJlbW92ZWQgaW4gdjZcbiAgaWYgKGhhc1NlY29uZGFyeUFjdGlvbikge1xuICAgIC8vIFVzZSBkaXYgYnkgZGVmYXVsdC5cbiAgICBDb21wb25lbnQgPSAhY29tcG9uZW50UHJvcHMuY29tcG9uZW50ICYmICFjb21wb25lbnRQcm9wID8gJ2RpdicgOiBDb21wb25lbnQ7XG5cbiAgICAvLyBBdm9pZCBuZXN0aW5nIG9mIGxpID4gbGkuXG4gICAgaWYgKENvbnRhaW5lckNvbXBvbmVudCA9PT0gJ2xpJykge1xuICAgICAgaWYgKENvbXBvbmVudCA9PT0gJ2xpJykge1xuICAgICAgICBDb21wb25lbnQgPSAnZGl2JztcbiAgICAgIH0gZWxzZSBpZiAoY29tcG9uZW50UHJvcHMuY29tcG9uZW50ID09PSAnbGknKSB7XG4gICAgICAgIGNvbXBvbmVudFByb3BzLmNvbXBvbmVudCA9ICdkaXYnO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gLyojX19QVVJFX18qL19qc3goTGlzdENvbnRleHQuUHJvdmlkZXIsIHtcbiAgICAgIHZhbHVlOiBjaGlsZENvbnRleHQsXG4gICAgICBjaGlsZHJlbjogLyojX19QVVJFX18qL19qc3hzKExpc3RJdGVtQ29udGFpbmVyLCBfZXh0ZW5kcyh7XG4gICAgICAgIGFzOiBDb250YWluZXJDb21wb25lbnQsXG4gICAgICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLmNvbnRhaW5lciwgQ29udGFpbmVyQ2xhc3NOYW1lKSxcbiAgICAgICAgcmVmOiBoYW5kbGVSZWYsXG4gICAgICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGVcbiAgICAgIH0sIENvbnRhaW5lclByb3BzLCB7XG4gICAgICAgIGNoaWxkcmVuOiBbLyojX19QVVJFX18qL19qc3goUm9vdCwgX2V4dGVuZHMoe30sIHJvb3RQcm9wcywgIWlzSG9zdENvbXBvbmVudChSb290KSAmJiB7XG4gICAgICAgICAgYXM6IENvbXBvbmVudCxcbiAgICAgICAgICBvd25lclN0YXRlOiBfZXh0ZW5kcyh7fSwgb3duZXJTdGF0ZSwgcm9vdFByb3BzLm93bmVyU3RhdGUpXG4gICAgICAgIH0sIGNvbXBvbmVudFByb3BzLCB7XG4gICAgICAgICAgY2hpbGRyZW46IGNoaWxkcmVuXG4gICAgICAgIH0pKSwgY2hpbGRyZW4ucG9wKCldXG4gICAgICB9KSlcbiAgICB9KTtcbiAgfVxuICByZXR1cm4gLyojX19QVVJFX18qL19qc3goTGlzdENvbnRleHQuUHJvdmlkZXIsIHtcbiAgICB2YWx1ZTogY2hpbGRDb250ZXh0LFxuICAgIGNoaWxkcmVuOiAvKiNfX1BVUkVfXyovX2pzeHMoUm9vdCwgX2V4dGVuZHMoe30sIHJvb3RQcm9wcywge1xuICAgICAgYXM6IENvbXBvbmVudCxcbiAgICAgIHJlZjogaGFuZGxlUmVmXG4gICAgfSwgIWlzSG9zdENvbXBvbmVudChSb290KSAmJiB7XG4gICAgICBvd25lclN0YXRlOiBfZXh0ZW5kcyh7fSwgb3duZXJTdGF0ZSwgcm9vdFByb3BzLm93bmVyU3RhdGUpXG4gICAgfSwgY29tcG9uZW50UHJvcHMsIHtcbiAgICAgIGNoaWxkcmVuOiBbY2hpbGRyZW4sIHNlY29uZGFyeUFjdGlvbiAmJiAvKiNfX1BVUkVfXyovX2pzeChMaXN0SXRlbVNlY29uZGFyeUFjdGlvbiwge1xuICAgICAgICBjaGlsZHJlbjogc2Vjb25kYXJ5QWN0aW9uXG4gICAgICB9KV1cbiAgICB9KSlcbiAgfSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IExpc3RJdGVtLnByb3BUeXBlcyAvKiByZW1vdmUtcHJvcHR5cGVzICovID0ge1xuICAvLyDilIzilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIAgV2FybmluZyDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJBcbiAgLy8g4pSCIFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucy4g4pSCXG4gIC8vIOKUgiAgICBUbyB1cGRhdGUgdGhlbSwgZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gYHBucG0gcHJvcHR5cGVzYC4gICAgIOKUglxuICAvLyDilJTilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJhcbiAgLyoqXG4gICAqIERlZmluZXMgdGhlIGBhbGlnbi1pdGVtc2Agc3R5bGUgcHJvcGVydHkuXG4gICAqIEBkZWZhdWx0ICdjZW50ZXInXG4gICAqL1xuICBhbGlnbkl0ZW1zOiBQcm9wVHlwZXMub25lT2YoWydjZW50ZXInLCAnZmxleC1zdGFydCddKSxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGxpc3QgaXRlbSBpcyBmb2N1c2VkIGR1cmluZyB0aGUgZmlyc3QgbW91bnQuXG4gICAqIEZvY3VzIHdpbGwgYWxzbyBiZSB0cmlnZ2VyZWQgaWYgdGhlIHZhbHVlIGNoYW5nZXMgZnJvbSBmYWxzZSB0byB0cnVlLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKiBAZGVwcmVjYXRlZCBjaGVja291dCBbTGlzdEl0ZW1CdXR0b25dKC9tYXRlcmlhbC11aS9hcGkvbGlzdC1pdGVtLWJ1dHRvbi8pIGluc3RlYWRcbiAgICovXG4gIGF1dG9Gb2N1czogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBsaXN0IGl0ZW0gaXMgYSBidXR0b24gKHVzaW5nIGBCdXR0b25CYXNlYCkuIFByb3BzIGludGVuZGVkXG4gICAqIGZvciBgQnV0dG9uQmFzZWAgY2FuIHRoZW4gYmUgYXBwbGllZCB0byBgTGlzdEl0ZW1gLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKiBAZGVwcmVjYXRlZCBjaGVja291dCBbTGlzdEl0ZW1CdXR0b25dKC9tYXRlcmlhbC11aS9hcGkvbGlzdC1pdGVtLWJ1dHRvbi8pIGluc3RlYWRcbiAgICovXG4gIGJ1dHRvbjogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgY29tcG9uZW50IGlmIGEgYExpc3RJdGVtU2Vjb25kYXJ5QWN0aW9uYCBpcyB1c2VkIGl0IG11c3RcbiAgICogYmUgdGhlIGxhc3QgY2hpbGQuXG4gICAqL1xuICBjaGlsZHJlbjogY2hhaW5Qcm9wVHlwZXMoUHJvcFR5cGVzLm5vZGUsIHByb3BzID0+IHtcbiAgICBjb25zdCBjaGlsZHJlbiA9IFJlYWN0LkNoaWxkcmVuLnRvQXJyYXkocHJvcHMuY2hpbGRyZW4pO1xuXG4gICAgLy8gUmVhY3QuQ2hpbGRyZW4udG9BcnJheShwcm9wcy5jaGlsZHJlbikuZmluZExhc3RJbmRleChpc0xpc3RJdGVtU2Vjb25kYXJ5QWN0aW9uKVxuICAgIGxldCBzZWNvbmRhcnlBY3Rpb25JbmRleCA9IC0xO1xuICAgIGZvciAobGV0IGkgPSBjaGlsZHJlbi5sZW5ndGggLSAxOyBpID49IDA7IGkgLT0gMSkge1xuICAgICAgY29uc3QgY2hpbGQgPSBjaGlsZHJlbltpXTtcbiAgICAgIGlmIChpc011aUVsZW1lbnQoY2hpbGQsIFsnTGlzdEl0ZW1TZWNvbmRhcnlBY3Rpb24nXSkpIHtcbiAgICAgICAgc2Vjb25kYXJ5QWN0aW9uSW5kZXggPSBpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyAgaXMgTGlzdEl0ZW1TZWNvbmRhcnlBY3Rpb24gdGhlIGxhc3QgY2hpbGQgb2YgTGlzdEl0ZW1cbiAgICBpZiAoc2Vjb25kYXJ5QWN0aW9uSW5kZXggIT09IC0xICYmIHNlY29uZGFyeUFjdGlvbkluZGV4ICE9PSBjaGlsZHJlbi5sZW5ndGggLSAxKSB7XG4gICAgICByZXR1cm4gbmV3IEVycm9yKCdNVUk6IFlvdSB1c2VkIGFuIGVsZW1lbnQgYWZ0ZXIgTGlzdEl0ZW1TZWNvbmRhcnlBY3Rpb24uICcgKyAnRm9yIExpc3RJdGVtIHRvIGRldGVjdCB0aGF0IGl0IGhhcyBhIHNlY29uZGFyeSBhY3Rpb24gJyArICd5b3UgbXVzdCBwYXNzIGl0IGFzIHRoZSBsYXN0IGNoaWxkIHRvIExpc3RJdGVtLicpO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfSksXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgcm9vdCBub2RlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgSFRNTCBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKi9cbiAgY29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50cyB1c2VkIGZvciBlYWNoIHNsb3QgaW5zaWRlLlxuICAgKlxuICAgKiBUaGlzIHByb3AgaXMgYW4gYWxpYXMgZm9yIHRoZSBgc2xvdHNgIHByb3AuXG4gICAqIEl0J3MgcmVjb21tZW5kZWQgdG8gdXNlIHRoZSBgc2xvdHNgIHByb3AgaW5zdGVhZC5cbiAgICpcbiAgICogQGRlZmF1bHQge31cbiAgICovXG4gIGNvbXBvbmVudHM6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgUm9vdDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlXG4gIH0pLFxuICAvKipcbiAgICogVGhlIGV4dHJhIHByb3BzIGZvciB0aGUgc2xvdCBjb21wb25lbnRzLlxuICAgKiBZb3UgY2FuIG92ZXJyaWRlIHRoZSBleGlzdGluZyBwcm9wcyBvciBhZGQgbmV3IG9uZXMuXG4gICAqXG4gICAqIFRoaXMgcHJvcCBpcyBhbiBhbGlhcyBmb3IgdGhlIGBzbG90UHJvcHNgIHByb3AuXG4gICAqIEl0J3MgcmVjb21tZW5kZWQgdG8gdXNlIHRoZSBgc2xvdFByb3BzYCBwcm9wIGluc3RlYWQsIGFzIGBjb21wb25lbnRzUHJvcHNgIHdpbGwgYmUgZGVwcmVjYXRlZCBpbiB0aGUgZnV0dXJlLlxuICAgKlxuICAgKiBAZGVmYXVsdCB7fVxuICAgKi9cbiAgY29tcG9uZW50c1Byb3BzOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIHJvb3Q6IFByb3BUeXBlcy5vYmplY3RcbiAgfSksXG4gIC8qKlxuICAgKiBUaGUgY29udGFpbmVyIGNvbXBvbmVudCB1c2VkIHdoZW4gYSBgTGlzdEl0ZW1TZWNvbmRhcnlBY3Rpb25gIGlzIHRoZSBsYXN0IGNoaWxkLlxuICAgKiBAZGVmYXVsdCAnbGknXG4gICAqIEBkZXByZWNhdGVkXG4gICAqL1xuICBDb250YWluZXJDb21wb25lbnQ6IGVsZW1lbnRUeXBlQWNjZXB0aW5nUmVmLFxuICAvKipcbiAgICogUHJvcHMgYXBwbGllZCB0byB0aGUgY29udGFpbmVyIGNvbXBvbmVudCBpZiB1c2VkLlxuICAgKiBAZGVmYXVsdCB7fVxuICAgKiBAZGVwcmVjYXRlZFxuICAgKi9cbiAgQ29udGFpbmVyUHJvcHM6IFByb3BUeXBlcy5vYmplY3QsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIGNvbXBhY3QgdmVydGljYWwgcGFkZGluZyBkZXNpZ25lZCBmb3Iga2V5Ym9hcmQgYW5kIG1vdXNlIGlucHV0IGlzIHVzZWQuXG4gICAqIFRoZSBwcm9wIGRlZmF1bHRzIHRvIHRoZSB2YWx1ZSBpbmhlcml0ZWQgZnJvbSB0aGUgcGFyZW50IExpc3QgY29tcG9uZW50LlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZGVuc2U6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgY29tcG9uZW50IGlzIGRpc2FibGVkLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKiBAZGVwcmVjYXRlZCBjaGVja291dCBbTGlzdEl0ZW1CdXR0b25dKC9tYXRlcmlhbC11aS9hcGkvbGlzdC1pdGVtLWJ1dHRvbi8pIGluc3RlYWRcbiAgICovXG4gIGRpc2FibGVkOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGxlZnQgYW5kIHJpZ2h0IHBhZGRpbmcgaXMgcmVtb3ZlZC5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRpc2FibGVHdXR0ZXJzOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgYWxsIHBhZGRpbmcgaXMgcmVtb3ZlZC5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRpc2FibGVQYWRkaW5nOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgYSAxcHggbGlnaHQgYm9yZGVyIGlzIGFkZGVkIHRvIHRoZSBib3R0b20gb2YgdGhlIGxpc3QgaXRlbS5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRpdmlkZXI6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgZm9jdXNWaXNpYmxlQ2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogVGhlIGVsZW1lbnQgdG8gZGlzcGxheSBhdCB0aGUgZW5kIG9mIExpc3RJdGVtLlxuICAgKi9cbiAgc2Vjb25kYXJ5QWN0aW9uOiBQcm9wVHlwZXMubm9kZSxcbiAgLyoqXG4gICAqIFVzZSB0byBhcHBseSBzZWxlY3RlZCBzdHlsaW5nLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKiBAZGVwcmVjYXRlZCBjaGVja291dCBbTGlzdEl0ZW1CdXR0b25dKC9tYXRlcmlhbC11aS9hcGkvbGlzdC1pdGVtLWJ1dHRvbi8pIGluc3RlYWRcbiAgICovXG4gIHNlbGVjdGVkOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIFRoZSBleHRyYSBwcm9wcyBmb3IgdGhlIHNsb3QgY29tcG9uZW50cy5cbiAgICogWW91IGNhbiBvdmVycmlkZSB0aGUgZXhpc3RpbmcgcHJvcHMgb3IgYWRkIG5ldyBvbmVzLlxuICAgKlxuICAgKiBUaGlzIHByb3AgaXMgYW4gYWxpYXMgZm9yIHRoZSBgY29tcG9uZW50c1Byb3BzYCBwcm9wLCB3aGljaCB3aWxsIGJlIGRlcHJlY2F0ZWQgaW4gdGhlIGZ1dHVyZS5cbiAgICpcbiAgICogQGRlZmF1bHQge31cbiAgICovXG4gIHNsb3RQcm9wczogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICByb290OiBQcm9wVHlwZXMub2JqZWN0XG4gIH0pLFxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudHMgdXNlZCBmb3IgZWFjaCBzbG90IGluc2lkZS5cbiAgICpcbiAgICogVGhpcyBwcm9wIGlzIGFuIGFsaWFzIGZvciB0aGUgYGNvbXBvbmVudHNgIHByb3AsIHdoaWNoIHdpbGwgYmUgZGVwcmVjYXRlZCBpbiB0aGUgZnV0dXJlLlxuICAgKlxuICAgKiBAZGVmYXVsdCB7fVxuICAgKi9cbiAgc2xvdHM6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgcm9vdDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlXG4gIH0pLFxuICAvKipcbiAgICogVGhlIHN5c3RlbSBwcm9wIHRoYXQgYWxsb3dzIGRlZmluaW5nIHN5c3RlbSBvdmVycmlkZXMgYXMgd2VsbCBhcyBhZGRpdGlvbmFsIENTUyBzdHlsZXMuXG4gICAqL1xuICBzeDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5ib29sXSkpLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgTGlzdEl0ZW07IiwiaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzc2VzJztcbmltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzJztcbmV4cG9ydCBmdW5jdGlvbiBnZXRMaXN0SXRlbUF2YXRhclV0aWxpdHlDbGFzcyhzbG90KSB7XG4gIHJldHVybiBnZW5lcmF0ZVV0aWxpdHlDbGFzcygnTXVpTGlzdEl0ZW1BdmF0YXInLCBzbG90KTtcbn1cbmNvbnN0IGxpc3RJdGVtQXZhdGFyQ2xhc3NlcyA9IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMoJ011aUxpc3RJdGVtQXZhdGFyJywgWydyb290JywgJ2FsaWduSXRlbXNGbGV4U3RhcnQnXSk7XG5leHBvcnQgZGVmYXVsdCBsaXN0SXRlbUF2YXRhckNsYXNzZXM7IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiY2xhc3NOYW1lXCJdO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IGNvbXBvc2VDbGFzc2VzIGZyb20gJ0BtdWkvdXRpbHMvY29tcG9zZUNsYXNzZXMnO1xuaW1wb3J0IExpc3RDb250ZXh0IGZyb20gJy4uL0xpc3QvTGlzdENvbnRleHQnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICcuLi9zdHlsZXMvc3R5bGVkJztcbmltcG9ydCB7IHVzZURlZmF1bHRQcm9wcyB9IGZyb20gJy4uL0RlZmF1bHRQcm9wc1Byb3ZpZGVyJztcbmltcG9ydCB7IGdldExpc3RJdGVtQXZhdGFyVXRpbGl0eUNsYXNzIH0gZnJvbSAnLi9saXN0SXRlbUF2YXRhckNsYXNzZXMnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmNvbnN0IHVzZVV0aWxpdHlDbGFzc2VzID0gb3duZXJTdGF0ZSA9PiB7XG4gIGNvbnN0IHtcbiAgICBhbGlnbkl0ZW1zLFxuICAgIGNsYXNzZXNcbiAgfSA9IG93bmVyU3RhdGU7XG4gIGNvbnN0IHNsb3RzID0ge1xuICAgIHJvb3Q6IFsncm9vdCcsIGFsaWduSXRlbXMgPT09ICdmbGV4LXN0YXJ0JyAmJiAnYWxpZ25JdGVtc0ZsZXhTdGFydCddXG4gIH07XG4gIHJldHVybiBjb21wb3NlQ2xhc3NlcyhzbG90cywgZ2V0TGlzdEl0ZW1BdmF0YXJVdGlsaXR5Q2xhc3MsIGNsYXNzZXMpO1xufTtcbmNvbnN0IExpc3RJdGVtQXZhdGFyUm9vdCA9IHN0eWxlZCgnZGl2Jywge1xuICBuYW1lOiAnTXVpTGlzdEl0ZW1BdmF0YXInLFxuICBzbG90OiAnUm9vdCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9ID0gcHJvcHM7XG4gICAgcmV0dXJuIFtzdHlsZXMucm9vdCwgb3duZXJTdGF0ZS5hbGlnbkl0ZW1zID09PSAnZmxleC1zdGFydCcgJiYgc3R5bGVzLmFsaWduSXRlbXNGbGV4U3RhcnRdO1xuICB9XG59KSgoe1xuICBvd25lclN0YXRlXG59KSA9PiBfZXh0ZW5kcyh7XG4gIG1pbldpZHRoOiA1NixcbiAgZmxleFNocmluazogMFxufSwgb3duZXJTdGF0ZS5hbGlnbkl0ZW1zID09PSAnZmxleC1zdGFydCcgJiYge1xuICBtYXJnaW5Ub3A6IDhcbn0pKTtcblxuLyoqXG4gKiBBIHNpbXBsZSB3cmFwcGVyIHRvIGFwcGx5IGBMaXN0YCBzdHlsZXMgdG8gYW4gYEF2YXRhcmAuXG4gKi9cbmNvbnN0IExpc3RJdGVtQXZhdGFyID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gTGlzdEl0ZW1BdmF0YXIoaW5Qcm9wcywgcmVmKSB7XG4gIGNvbnN0IHByb3BzID0gdXNlRGVmYXVsdFByb3BzKHtcbiAgICBwcm9wczogaW5Qcm9wcyxcbiAgICBuYW1lOiAnTXVpTGlzdEl0ZW1BdmF0YXInXG4gIH0pO1xuICBjb25zdCB7XG4gICAgICBjbGFzc05hbWVcbiAgICB9ID0gcHJvcHMsXG4gICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkKTtcbiAgY29uc3QgY29udGV4dCA9IFJlYWN0LnVzZUNvbnRleHQoTGlzdENvbnRleHQpO1xuICBjb25zdCBvd25lclN0YXRlID0gX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgYWxpZ25JdGVtczogY29udGV4dC5hbGlnbkl0ZW1zXG4gIH0pO1xuICBjb25zdCBjbGFzc2VzID0gdXNlVXRpbGl0eUNsYXNzZXMob3duZXJTdGF0ZSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeChMaXN0SXRlbUF2YXRhclJvb3QsIF9leHRlbmRzKHtcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWUpLFxuICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGUsXG4gICAgcmVmOiByZWZcbiAgfSwgb3RoZXIpKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gTGlzdEl0ZW1BdmF0YXIucHJvcFR5cGVzIC8qIHJlbW92ZS1wcm9wdHlwZXMgKi8gPSB7XG4gIC8vIOKUjOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgCBXYXJuaW5nIOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUkFxuICAvLyDilIIgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zLiDilIJcbiAgLy8g4pSCICAgIFRvIHVwZGF0ZSB0aGVtLCBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBgcG5wbSBwcm9wdHlwZXNgLiAgICAg4pSCXG4gIC8vIOKUlOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUmFxuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGNvbXBvbmVudCwgbm9ybWFsbHkgYW4gYEF2YXRhcmAuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogVGhlIHN5c3RlbSBwcm9wIHRoYXQgYWxsb3dzIGRlZmluaW5nIHN5c3RlbSBvdmVycmlkZXMgYXMgd2VsbCBhcyBhZGRpdGlvbmFsIENTUyBzdHlsZXMuXG4gICAqL1xuICBzeDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5ib29sXSkpLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgTGlzdEl0ZW1BdmF0YXI7IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiYWxpZ25JdGVtc1wiLCBcImF1dG9Gb2N1c1wiLCBcImNvbXBvbmVudFwiLCBcImNoaWxkcmVuXCIsIFwiZGVuc2VcIiwgXCJkaXNhYmxlR3V0dGVyc1wiLCBcImRpdmlkZXJcIiwgXCJmb2N1c1Zpc2libGVDbGFzc05hbWVcIiwgXCJzZWxlY3RlZFwiLCBcImNsYXNzTmFtZVwiXTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCBjb21wb3NlQ2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2NvbXBvc2VDbGFzc2VzJztcbmltcG9ydCB7IGFscGhhIH0gZnJvbSAnQG11aS9zeXN0ZW0vY29sb3JNYW5pcHVsYXRvcic7XG5pbXBvcnQgc3R5bGVkLCB7IHJvb3RTaG91bGRGb3J3YXJkUHJvcCB9IGZyb20gJy4uL3N0eWxlcy9zdHlsZWQnO1xuaW1wb3J0IHsgdXNlRGVmYXVsdFByb3BzIH0gZnJvbSAnLi4vRGVmYXVsdFByb3BzUHJvdmlkZXInO1xuaW1wb3J0IEJ1dHRvbkJhc2UgZnJvbSAnLi4vQnV0dG9uQmFzZSc7XG5pbXBvcnQgdXNlRW5oYW5jZWRFZmZlY3QgZnJvbSAnLi4vdXRpbHMvdXNlRW5oYW5jZWRFZmZlY3QnO1xuaW1wb3J0IHVzZUZvcmtSZWYgZnJvbSAnLi4vdXRpbHMvdXNlRm9ya1JlZic7XG5pbXBvcnQgTGlzdENvbnRleHQgZnJvbSAnLi4vTGlzdC9MaXN0Q29udGV4dCc7XG5pbXBvcnQgbGlzdEl0ZW1CdXR0b25DbGFzc2VzLCB7IGdldExpc3RJdGVtQnV0dG9uVXRpbGl0eUNsYXNzIH0gZnJvbSAnLi9saXN0SXRlbUJ1dHRvbkNsYXNzZXMnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmV4cG9ydCBjb25zdCBvdmVycmlkZXNSZXNvbHZlciA9IChwcm9wcywgc3R5bGVzKSA9PiB7XG4gIGNvbnN0IHtcbiAgICBvd25lclN0YXRlXG4gIH0gPSBwcm9wcztcbiAgcmV0dXJuIFtzdHlsZXMucm9vdCwgb3duZXJTdGF0ZS5kZW5zZSAmJiBzdHlsZXMuZGVuc2UsIG93bmVyU3RhdGUuYWxpZ25JdGVtcyA9PT0gJ2ZsZXgtc3RhcnQnICYmIHN0eWxlcy5hbGlnbkl0ZW1zRmxleFN0YXJ0LCBvd25lclN0YXRlLmRpdmlkZXIgJiYgc3R5bGVzLmRpdmlkZXIsICFvd25lclN0YXRlLmRpc2FibGVHdXR0ZXJzICYmIHN0eWxlcy5ndXR0ZXJzXTtcbn07XG5jb25zdCB1c2VVdGlsaXR5Q2xhc3NlcyA9IG93bmVyU3RhdGUgPT4ge1xuICBjb25zdCB7XG4gICAgYWxpZ25JdGVtcyxcbiAgICBjbGFzc2VzLFxuICAgIGRlbnNlLFxuICAgIGRpc2FibGVkLFxuICAgIGRpc2FibGVHdXR0ZXJzLFxuICAgIGRpdmlkZXIsXG4gICAgc2VsZWN0ZWRcbiAgfSA9IG93bmVyU3RhdGU7XG4gIGNvbnN0IHNsb3RzID0ge1xuICAgIHJvb3Q6IFsncm9vdCcsIGRlbnNlICYmICdkZW5zZScsICFkaXNhYmxlR3V0dGVycyAmJiAnZ3V0dGVycycsIGRpdmlkZXIgJiYgJ2RpdmlkZXInLCBkaXNhYmxlZCAmJiAnZGlzYWJsZWQnLCBhbGlnbkl0ZW1zID09PSAnZmxleC1zdGFydCcgJiYgJ2FsaWduSXRlbXNGbGV4U3RhcnQnLCBzZWxlY3RlZCAmJiAnc2VsZWN0ZWQnXVxuICB9O1xuICBjb25zdCBjb21wb3NlZENsYXNzZXMgPSBjb21wb3NlQ2xhc3NlcyhzbG90cywgZ2V0TGlzdEl0ZW1CdXR0b25VdGlsaXR5Q2xhc3MsIGNsYXNzZXMpO1xuICByZXR1cm4gX2V4dGVuZHMoe30sIGNsYXNzZXMsIGNvbXBvc2VkQ2xhc3Nlcyk7XG59O1xuY29uc3QgTGlzdEl0ZW1CdXR0b25Sb290ID0gc3R5bGVkKEJ1dHRvbkJhc2UsIHtcbiAgc2hvdWxkRm9yd2FyZFByb3A6IHByb3AgPT4gcm9vdFNob3VsZEZvcndhcmRQcm9wKHByb3ApIHx8IHByb3AgPT09ICdjbGFzc2VzJyxcbiAgbmFtZTogJ011aUxpc3RJdGVtQnV0dG9uJyxcbiAgc2xvdDogJ1Jvb3QnLFxuICBvdmVycmlkZXNSZXNvbHZlclxufSkoKHtcbiAgdGhlbWUsXG4gIG93bmVyU3RhdGVcbn0pID0+IF9leHRlbmRzKHtcbiAgZGlzcGxheTogJ2ZsZXgnLFxuICBmbGV4R3JvdzogMSxcbiAganVzdGlmeUNvbnRlbnQ6ICdmbGV4LXN0YXJ0JyxcbiAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICB0ZXh0RGVjb3JhdGlvbjogJ25vbmUnLFxuICBtaW5XaWR0aDogMCxcbiAgYm94U2l6aW5nOiAnYm9yZGVyLWJveCcsXG4gIHRleHRBbGlnbjogJ2xlZnQnLFxuICBwYWRkaW5nVG9wOiA4LFxuICBwYWRkaW5nQm90dG9tOiA4LFxuICB0cmFuc2l0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoJ2JhY2tncm91bmQtY29sb3InLCB7XG4gICAgZHVyYXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmR1cmF0aW9uLnNob3J0ZXN0XG4gIH0pLFxuICAnJjpob3Zlcic6IHtcbiAgICB0ZXh0RGVjb3JhdGlvbjogJ25vbmUnLFxuICAgIGJhY2tncm91bmRDb2xvcjogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGUuYWN0aW9uLmhvdmVyLFxuICAgIC8vIFJlc2V0IG9uIHRvdWNoIGRldmljZXMsIGl0IGRvZXNuJ3QgYWRkIHNwZWNpZmljaXR5XG4gICAgJ0BtZWRpYSAoaG92ZXI6IG5vbmUpJzoge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnXG4gICAgfVxuICB9LFxuICBbYCYuJHtsaXN0SXRlbUJ1dHRvbkNsYXNzZXMuc2VsZWN0ZWR9YF06IHtcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnZhcnMgPyBgcmdiYSgke3RoZW1lLnZhcnMucGFsZXR0ZS5wcmltYXJ5Lm1haW5DaGFubmVsfSAvICR7dGhlbWUudmFycy5wYWxldHRlLmFjdGlvbi5zZWxlY3RlZE9wYWNpdHl9KWAgOiBhbHBoYSh0aGVtZS5wYWxldHRlLnByaW1hcnkubWFpbiwgdGhlbWUucGFsZXR0ZS5hY3Rpb24uc2VsZWN0ZWRPcGFjaXR5KSxcbiAgICBbYCYuJHtsaXN0SXRlbUJ1dHRvbkNsYXNzZXMuZm9jdXNWaXNpYmxlfWBdOiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnZhcnMgPyBgcmdiYSgke3RoZW1lLnZhcnMucGFsZXR0ZS5wcmltYXJ5Lm1haW5DaGFubmVsfSAvIGNhbGMoJHt0aGVtZS52YXJzLnBhbGV0dGUuYWN0aW9uLnNlbGVjdGVkT3BhY2l0eX0gKyAke3RoZW1lLnZhcnMucGFsZXR0ZS5hY3Rpb24uZm9jdXNPcGFjaXR5fSkpYCA6IGFscGhhKHRoZW1lLnBhbGV0dGUucHJpbWFyeS5tYWluLCB0aGVtZS5wYWxldHRlLmFjdGlvbi5zZWxlY3RlZE9wYWNpdHkgKyB0aGVtZS5wYWxldHRlLmFjdGlvbi5mb2N1c09wYWNpdHkpXG4gICAgfVxuICB9LFxuICBbYCYuJHtsaXN0SXRlbUJ1dHRvbkNsYXNzZXMuc2VsZWN0ZWR9OmhvdmVyYF06IHtcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnZhcnMgPyBgcmdiYSgke3RoZW1lLnZhcnMucGFsZXR0ZS5wcmltYXJ5Lm1haW5DaGFubmVsfSAvIGNhbGMoJHt0aGVtZS52YXJzLnBhbGV0dGUuYWN0aW9uLnNlbGVjdGVkT3BhY2l0eX0gKyAke3RoZW1lLnZhcnMucGFsZXR0ZS5hY3Rpb24uaG92ZXJPcGFjaXR5fSkpYCA6IGFscGhhKHRoZW1lLnBhbGV0dGUucHJpbWFyeS5tYWluLCB0aGVtZS5wYWxldHRlLmFjdGlvbi5zZWxlY3RlZE9wYWNpdHkgKyB0aGVtZS5wYWxldHRlLmFjdGlvbi5ob3Zlck9wYWNpdHkpLFxuICAgIC8vIFJlc2V0IG9uIHRvdWNoIGRldmljZXMsIGl0IGRvZXNuJ3QgYWRkIHNwZWNpZmljaXR5XG4gICAgJ0BtZWRpYSAoaG92ZXI6IG5vbmUpJzoge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS52YXJzID8gYHJnYmEoJHt0aGVtZS52YXJzLnBhbGV0dGUucHJpbWFyeS5tYWluQ2hhbm5lbH0gLyAke3RoZW1lLnZhcnMucGFsZXR0ZS5hY3Rpb24uc2VsZWN0ZWRPcGFjaXR5fSlgIDogYWxwaGEodGhlbWUucGFsZXR0ZS5wcmltYXJ5Lm1haW4sIHRoZW1lLnBhbGV0dGUuYWN0aW9uLnNlbGVjdGVkT3BhY2l0eSlcbiAgICB9XG4gIH0sXG4gIFtgJi4ke2xpc3RJdGVtQnV0dG9uQ2xhc3Nlcy5mb2N1c1Zpc2libGV9YF06IHtcbiAgICBiYWNrZ3JvdW5kQ29sb3I6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlLmFjdGlvbi5mb2N1c1xuICB9LFxuICBbYCYuJHtsaXN0SXRlbUJ1dHRvbkNsYXNzZXMuZGlzYWJsZWR9YF06IHtcbiAgICBvcGFjaXR5OiAodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZS5hY3Rpb24uZGlzYWJsZWRPcGFjaXR5XG4gIH1cbn0sIG93bmVyU3RhdGUuZGl2aWRlciAmJiB7XG4gIGJvcmRlckJvdHRvbTogYDFweCBzb2xpZCAkeyh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlLmRpdmlkZXJ9YCxcbiAgYmFja2dyb3VuZENsaXA6ICdwYWRkaW5nLWJveCdcbn0sIG93bmVyU3RhdGUuYWxpZ25JdGVtcyA9PT0gJ2ZsZXgtc3RhcnQnICYmIHtcbiAgYWxpZ25JdGVtczogJ2ZsZXgtc3RhcnQnXG59LCAhb3duZXJTdGF0ZS5kaXNhYmxlR3V0dGVycyAmJiB7XG4gIHBhZGRpbmdMZWZ0OiAxNixcbiAgcGFkZGluZ1JpZ2h0OiAxNlxufSwgb3duZXJTdGF0ZS5kZW5zZSAmJiB7XG4gIHBhZGRpbmdUb3A6IDQsXG4gIHBhZGRpbmdCb3R0b206IDRcbn0pKTtcbmNvbnN0IExpc3RJdGVtQnV0dG9uID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gTGlzdEl0ZW1CdXR0b24oaW5Qcm9wcywgcmVmKSB7XG4gIGNvbnN0IHByb3BzID0gdXNlRGVmYXVsdFByb3BzKHtcbiAgICBwcm9wczogaW5Qcm9wcyxcbiAgICBuYW1lOiAnTXVpTGlzdEl0ZW1CdXR0b24nXG4gIH0pO1xuICBjb25zdCB7XG4gICAgICBhbGlnbkl0ZW1zID0gJ2NlbnRlcicsXG4gICAgICBhdXRvRm9jdXMgPSBmYWxzZSxcbiAgICAgIGNvbXBvbmVudCA9ICdkaXYnLFxuICAgICAgY2hpbGRyZW4sXG4gICAgICBkZW5zZSA9IGZhbHNlLFxuICAgICAgZGlzYWJsZUd1dHRlcnMgPSBmYWxzZSxcbiAgICAgIGRpdmlkZXIgPSBmYWxzZSxcbiAgICAgIGZvY3VzVmlzaWJsZUNsYXNzTmFtZSxcbiAgICAgIHNlbGVjdGVkID0gZmFsc2UsXG4gICAgICBjbGFzc05hbWVcbiAgICB9ID0gcHJvcHMsXG4gICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkKTtcbiAgY29uc3QgY29udGV4dCA9IFJlYWN0LnVzZUNvbnRleHQoTGlzdENvbnRleHQpO1xuICBjb25zdCBjaGlsZENvbnRleHQgPSBSZWFjdC51c2VNZW1vKCgpID0+ICh7XG4gICAgZGVuc2U6IGRlbnNlIHx8IGNvbnRleHQuZGVuc2UgfHwgZmFsc2UsXG4gICAgYWxpZ25JdGVtcyxcbiAgICBkaXNhYmxlR3V0dGVyc1xuICB9KSwgW2FsaWduSXRlbXMsIGNvbnRleHQuZGVuc2UsIGRlbnNlLCBkaXNhYmxlR3V0dGVyc10pO1xuICBjb25zdCBsaXN0SXRlbVJlZiA9IFJlYWN0LnVzZVJlZihudWxsKTtcbiAgdXNlRW5oYW5jZWRFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChhdXRvRm9jdXMpIHtcbiAgICAgIGlmIChsaXN0SXRlbVJlZi5jdXJyZW50KSB7XG4gICAgICAgIGxpc3RJdGVtUmVmLmN1cnJlbnQuZm9jdXMoKTtcbiAgICAgIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdNVUk6IFVuYWJsZSB0byBzZXQgZm9jdXMgdG8gYSBMaXN0SXRlbUJ1dHRvbiB3aG9zZSBjb21wb25lbnQgaGFzIG5vdCBiZWVuIHJlbmRlcmVkLicpO1xuICAgICAgfVxuICAgIH1cbiAgfSwgW2F1dG9Gb2N1c10pO1xuICBjb25zdCBvd25lclN0YXRlID0gX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgYWxpZ25JdGVtcyxcbiAgICBkZW5zZTogY2hpbGRDb250ZXh0LmRlbnNlLFxuICAgIGRpc2FibGVHdXR0ZXJzLFxuICAgIGRpdmlkZXIsXG4gICAgc2VsZWN0ZWRcbiAgfSk7XG4gIGNvbnN0IGNsYXNzZXMgPSB1c2VVdGlsaXR5Q2xhc3Nlcyhvd25lclN0YXRlKTtcbiAgY29uc3QgaGFuZGxlUmVmID0gdXNlRm9ya1JlZihsaXN0SXRlbVJlZiwgcmVmKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KExpc3RDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IGNoaWxkQ29udGV4dCxcbiAgICBjaGlsZHJlbjogLyojX19QVVJFX18qL19qc3goTGlzdEl0ZW1CdXR0b25Sb290LCBfZXh0ZW5kcyh7XG4gICAgICByZWY6IGhhbmRsZVJlZixcbiAgICAgIGhyZWY6IG90aGVyLmhyZWYgfHwgb3RoZXIudG9cbiAgICAgIC8vIGBCdXR0b25CYXNlYCBwcm9jZXNzZXMgYGhyZWZgIG9yIGB0b2AgaWYgYGNvbXBvbmVudGAgaXMgc2V0IHRvICdidXR0b24nXG4gICAgICAsXG4gICAgICBjb21wb25lbnQ6IChvdGhlci5ocmVmIHx8IG90aGVyLnRvKSAmJiBjb21wb25lbnQgPT09ICdkaXYnID8gJ2J1dHRvbicgOiBjb21wb25lbnQsXG4gICAgICBmb2N1c1Zpc2libGVDbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5mb2N1c1Zpc2libGUsIGZvY3VzVmlzaWJsZUNsYXNzTmFtZSksXG4gICAgICBvd25lclN0YXRlOiBvd25lclN0YXRlLFxuICAgICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lKVxuICAgIH0sIG90aGVyLCB7XG4gICAgICBjbGFzc2VzOiBjbGFzc2VzLFxuICAgICAgY2hpbGRyZW46IGNoaWxkcmVuXG4gICAgfSkpXG4gIH0pO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBMaXN0SXRlbUJ1dHRvbi5wcm9wVHlwZXMgLyogcmVtb3ZlLXByb3B0eXBlcyAqLyA9IHtcbiAgLy8g4pSM4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAIFdhcm5pbmcg4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSQXG4gIC8vIOKUgiBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMuIOKUglxuICAvLyDilIIgICAgVG8gdXBkYXRlIHRoZW0sIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIGBwbnBtIHByb3B0eXBlc2AuICAgICDilIJcbiAgLy8g4pSU4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSYXG4gIC8qKlxuICAgKiBEZWZpbmVzIHRoZSBgYWxpZ24taXRlbXNgIHN0eWxlIHByb3BlcnR5LlxuICAgKiBAZGVmYXVsdCAnY2VudGVyJ1xuICAgKi9cbiAgYWxpZ25JdGVtczogUHJvcFR5cGVzLm9uZU9mKFsnY2VudGVyJywgJ2ZsZXgtc3RhcnQnXSksXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBsaXN0IGl0ZW0gaXMgZm9jdXNlZCBkdXJpbmcgdGhlIGZpcnN0IG1vdW50LlxuICAgKiBGb2N1cyB3aWxsIGFsc28gYmUgdHJpZ2dlcmVkIGlmIHRoZSB2YWx1ZSBjaGFuZ2VzIGZyb20gZmFsc2UgdG8gdHJ1ZS5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGF1dG9Gb2N1czogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgY29tcG9uZW50IGlmIGEgYExpc3RJdGVtU2Vjb25kYXJ5QWN0aW9uYCBpcyB1c2VkIGl0IG11c3RcbiAgICogYmUgdGhlIGxhc3QgY2hpbGQuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgcm9vdCBub2RlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgSFRNTCBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKi9cbiAgY29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIGNvbXBhY3QgdmVydGljYWwgcGFkZGluZyBkZXNpZ25lZCBmb3Iga2V5Ym9hcmQgYW5kIG1vdXNlIGlucHV0IGlzIHVzZWQuXG4gICAqIFRoZSBwcm9wIGRlZmF1bHRzIHRvIHRoZSB2YWx1ZSBpbmhlcml0ZWQgZnJvbSB0aGUgcGFyZW50IExpc3QgY29tcG9uZW50LlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZGVuc2U6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgY29tcG9uZW50IGlzIGRpc2FibGVkLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZGlzYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgbGVmdCBhbmQgcmlnaHQgcGFkZGluZyBpcyByZW1vdmVkLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZGlzYWJsZUd1dHRlcnM6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogSWYgYHRydWVgLCBhIDFweCBsaWdodCBib3JkZXIgaXMgYWRkZWQgdG8gdGhlIGJvdHRvbSBvZiB0aGUgbGlzdCBpdGVtLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZGl2aWRlcjogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBUaGlzIHByb3AgY2FuIGhlbHAgaWRlbnRpZnkgd2hpY2ggZWxlbWVudCBoYXMga2V5Ym9hcmQgZm9jdXMuXG4gICAqIFRoZSBjbGFzcyBuYW1lIHdpbGwgYmUgYXBwbGllZCB3aGVuIHRoZSBlbGVtZW50IGdhaW5zIHRoZSBmb2N1cyB0aHJvdWdoIGtleWJvYXJkIGludGVyYWN0aW9uLlxuICAgKiBJdCdzIGEgcG9seWZpbGwgZm9yIHRoZSBbQ1NTIDpmb2N1cy12aXNpYmxlIHNlbGVjdG9yXShodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvc2VsZWN0b3JzLTQvI3RoZS1mb2N1cy12aXNpYmxlLXBzZXVkbykuXG4gICAqIFRoZSByYXRpb25hbGUgZm9yIHVzaW5nIHRoaXMgZmVhdHVyZSBbaXMgZXhwbGFpbmVkIGhlcmVdKGh0dHBzOi8vZ2l0aHViLmNvbS9XSUNHL2ZvY3VzLXZpc2libGUvYmxvYi9IRUFEL2V4cGxhaW5lci5tZCkuXG4gICAqIEEgW3BvbHlmaWxsIGNhbiBiZSB1c2VkXShodHRwczovL2dpdGh1Yi5jb20vV0lDRy9mb2N1cy12aXNpYmxlKSB0byBhcHBseSBhIGBmb2N1cy12aXNpYmxlYCBjbGFzcyB0byBvdGhlciBjb21wb25lbnRzXG4gICAqIGlmIG5lZWRlZC5cbiAgICovXG4gIGZvY3VzVmlzaWJsZUNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGhyZWY6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBVc2UgdG8gYXBwbHkgc2VsZWN0ZWQgc3R5bGluZy5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIHNlbGVjdGVkOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIFRoZSBzeXN0ZW0gcHJvcCB0aGF0IGFsbG93cyBkZWZpbmluZyBzeXN0ZW0gb3ZlcnJpZGVzIGFzIHdlbGwgYXMgYWRkaXRpb25hbCBDU1Mgc3R5bGVzLlxuICAgKi9cbiAgc3g6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuYm9vbF0pKSwgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IExpc3RJdGVtQnV0dG9uOyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImNsYXNzTmFtZVwiXTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCBjb21wb3NlQ2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2NvbXBvc2VDbGFzc2VzJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnLi4vc3R5bGVzL3N0eWxlZCc7XG5pbXBvcnQgeyB1c2VEZWZhdWx0UHJvcHMgfSBmcm9tICcuLi9EZWZhdWx0UHJvcHNQcm92aWRlcic7XG5pbXBvcnQgeyBnZXRMaXN0SXRlbUljb25VdGlsaXR5Q2xhc3MgfSBmcm9tICcuL2xpc3RJdGVtSWNvbkNsYXNzZXMnO1xuaW1wb3J0IExpc3RDb250ZXh0IGZyb20gJy4uL0xpc3QvTGlzdENvbnRleHQnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmNvbnN0IHVzZVV0aWxpdHlDbGFzc2VzID0gb3duZXJTdGF0ZSA9PiB7XG4gIGNvbnN0IHtcbiAgICBhbGlnbkl0ZW1zLFxuICAgIGNsYXNzZXNcbiAgfSA9IG93bmVyU3RhdGU7XG4gIGNvbnN0IHNsb3RzID0ge1xuICAgIHJvb3Q6IFsncm9vdCcsIGFsaWduSXRlbXMgPT09ICdmbGV4LXN0YXJ0JyAmJiAnYWxpZ25JdGVtc0ZsZXhTdGFydCddXG4gIH07XG4gIHJldHVybiBjb21wb3NlQ2xhc3NlcyhzbG90cywgZ2V0TGlzdEl0ZW1JY29uVXRpbGl0eUNsYXNzLCBjbGFzc2VzKTtcbn07XG5jb25zdCBMaXN0SXRlbUljb25Sb290ID0gc3R5bGVkKCdkaXYnLCB7XG4gIG5hbWU6ICdNdWlMaXN0SXRlbUljb24nLFxuICBzbG90OiAnUm9vdCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9ID0gcHJvcHM7XG4gICAgcmV0dXJuIFtzdHlsZXMucm9vdCwgb3duZXJTdGF0ZS5hbGlnbkl0ZW1zID09PSAnZmxleC1zdGFydCcgJiYgc3R5bGVzLmFsaWduSXRlbXNGbGV4U3RhcnRdO1xuICB9XG59KSgoe1xuICB0aGVtZSxcbiAgb3duZXJTdGF0ZVxufSkgPT4gX2V4dGVuZHMoe1xuICBtaW5XaWR0aDogNTYsXG4gIGNvbG9yOiAodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZS5hY3Rpb24uYWN0aXZlLFxuICBmbGV4U2hyaW5rOiAwLFxuICBkaXNwbGF5OiAnaW5saW5lLWZsZXgnXG59LCBvd25lclN0YXRlLmFsaWduSXRlbXMgPT09ICdmbGV4LXN0YXJ0JyAmJiB7XG4gIG1hcmdpblRvcDogOFxufSkpO1xuXG4vKipcbiAqIEEgc2ltcGxlIHdyYXBwZXIgdG8gYXBwbHkgYExpc3RgIHN0eWxlcyB0byBhbiBgSWNvbmAgb3IgYFN2Z0ljb25gLlxuICovXG5jb25zdCBMaXN0SXRlbUljb24gPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBMaXN0SXRlbUljb24oaW5Qcm9wcywgcmVmKSB7XG4gIGNvbnN0IHByb3BzID0gdXNlRGVmYXVsdFByb3BzKHtcbiAgICBwcm9wczogaW5Qcm9wcyxcbiAgICBuYW1lOiAnTXVpTGlzdEl0ZW1JY29uJ1xuICB9KTtcbiAgY29uc3Qge1xuICAgICAgY2xhc3NOYW1lXG4gICAgfSA9IHByb3BzLFxuICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIF9leGNsdWRlZCk7XG4gIGNvbnN0IGNvbnRleHQgPSBSZWFjdC51c2VDb250ZXh0KExpc3RDb250ZXh0KTtcbiAgY29uc3Qgb3duZXJTdGF0ZSA9IF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgIGFsaWduSXRlbXM6IGNvbnRleHQuYWxpZ25JdGVtc1xuICB9KTtcbiAgY29uc3QgY2xhc3NlcyA9IHVzZVV0aWxpdHlDbGFzc2VzKG93bmVyU3RhdGUpO1xuICByZXR1cm4gLyojX19QVVJFX18qL19qc3goTGlzdEl0ZW1JY29uUm9vdCwgX2V4dGVuZHMoe1xuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSksXG4gICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZSxcbiAgICByZWY6IHJlZlxuICB9LCBvdGhlcikpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBMaXN0SXRlbUljb24ucHJvcFR5cGVzIC8qIHJlbW92ZS1wcm9wdHlwZXMgKi8gPSB7XG4gIC8vIOKUjOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgCBXYXJuaW5nIOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUkFxuICAvLyDilIIgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zLiDilIJcbiAgLy8g4pSCICAgIFRvIHVwZGF0ZSB0aGVtLCBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBgcG5wbSBwcm9wdHlwZXNgLiAgICAg4pSCXG4gIC8vIOKUlOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUmFxuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGNvbXBvbmVudCwgbm9ybWFsbHkgYEljb25gLCBgU3ZnSWNvbmAsXG4gICAqIG9yIGEgYEBtdWkvaWNvbnMtbWF0ZXJpYWxgIFNWRyBpY29uIGVsZW1lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogVGhlIHN5c3RlbSBwcm9wIHRoYXQgYWxsb3dzIGRlZmluaW5nIHN5c3RlbSBvdmVycmlkZXMgYXMgd2VsbCBhcyBhZGRpdGlvbmFsIENTUyBzdHlsZXMuXG4gICAqL1xuICBzeDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5ib29sXSkpLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgTGlzdEl0ZW1JY29uOyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImNoaWxkcmVuXCIsIFwiY2xhc3NOYW1lXCIsIFwiZGlzYWJsZVR5cG9ncmFwaHlcIiwgXCJpbnNldFwiLCBcInByaW1hcnlcIiwgXCJwcmltYXJ5VHlwb2dyYXBoeVByb3BzXCIsIFwic2Vjb25kYXJ5XCIsIFwic2Vjb25kYXJ5VHlwb2dyYXBoeVByb3BzXCJdO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IGNvbXBvc2VDbGFzc2VzIGZyb20gJ0BtdWkvdXRpbHMvY29tcG9zZUNsYXNzZXMnO1xuaW1wb3J0IFR5cG9ncmFwaHkgZnJvbSAnLi4vVHlwb2dyYXBoeSc7XG5pbXBvcnQgTGlzdENvbnRleHQgZnJvbSAnLi4vTGlzdC9MaXN0Q29udGV4dCc7XG5pbXBvcnQgeyB1c2VEZWZhdWx0UHJvcHMgfSBmcm9tICcuLi9EZWZhdWx0UHJvcHNQcm92aWRlcic7XG5pbXBvcnQgc3R5bGVkIGZyb20gJy4uL3N0eWxlcy9zdHlsZWQnO1xuaW1wb3J0IGxpc3RJdGVtVGV4dENsYXNzZXMsIHsgZ2V0TGlzdEl0ZW1UZXh0VXRpbGl0eUNsYXNzIH0gZnJvbSAnLi9saXN0SXRlbVRleHRDbGFzc2VzJztcbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5pbXBvcnQgeyBqc3hzIGFzIF9qc3hzIH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5jb25zdCB1c2VVdGlsaXR5Q2xhc3NlcyA9IG93bmVyU3RhdGUgPT4ge1xuICBjb25zdCB7XG4gICAgY2xhc3NlcyxcbiAgICBpbnNldCxcbiAgICBwcmltYXJ5LFxuICAgIHNlY29uZGFyeSxcbiAgICBkZW5zZVxuICB9ID0gb3duZXJTdGF0ZTtcbiAgY29uc3Qgc2xvdHMgPSB7XG4gICAgcm9vdDogWydyb290JywgaW5zZXQgJiYgJ2luc2V0JywgZGVuc2UgJiYgJ2RlbnNlJywgcHJpbWFyeSAmJiBzZWNvbmRhcnkgJiYgJ211bHRpbGluZSddLFxuICAgIHByaW1hcnk6IFsncHJpbWFyeSddLFxuICAgIHNlY29uZGFyeTogWydzZWNvbmRhcnknXVxuICB9O1xuICByZXR1cm4gY29tcG9zZUNsYXNzZXMoc2xvdHMsIGdldExpc3RJdGVtVGV4dFV0aWxpdHlDbGFzcywgY2xhc3Nlcyk7XG59O1xuY29uc3QgTGlzdEl0ZW1UZXh0Um9vdCA9IHN0eWxlZCgnZGl2Jywge1xuICBuYW1lOiAnTXVpTGlzdEl0ZW1UZXh0JyxcbiAgc2xvdDogJ1Jvb3QnLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBvd25lclN0YXRlXG4gICAgfSA9IHByb3BzO1xuICAgIHJldHVybiBbe1xuICAgICAgW2AmIC4ke2xpc3RJdGVtVGV4dENsYXNzZXMucHJpbWFyeX1gXTogc3R5bGVzLnByaW1hcnlcbiAgICB9LCB7XG4gICAgICBbYCYgLiR7bGlzdEl0ZW1UZXh0Q2xhc3Nlcy5zZWNvbmRhcnl9YF06IHN0eWxlcy5zZWNvbmRhcnlcbiAgICB9LCBzdHlsZXMucm9vdCwgb3duZXJTdGF0ZS5pbnNldCAmJiBzdHlsZXMuaW5zZXQsIG93bmVyU3RhdGUucHJpbWFyeSAmJiBvd25lclN0YXRlLnNlY29uZGFyeSAmJiBzdHlsZXMubXVsdGlsaW5lLCBvd25lclN0YXRlLmRlbnNlICYmIHN0eWxlcy5kZW5zZV07XG4gIH1cbn0pKCh7XG4gIG93bmVyU3RhdGVcbn0pID0+IF9leHRlbmRzKHtcbiAgZmxleDogJzEgMSBhdXRvJyxcbiAgbWluV2lkdGg6IDAsXG4gIG1hcmdpblRvcDogNCxcbiAgbWFyZ2luQm90dG9tOiA0XG59LCBvd25lclN0YXRlLnByaW1hcnkgJiYgb3duZXJTdGF0ZS5zZWNvbmRhcnkgJiYge1xuICBtYXJnaW5Ub3A6IDYsXG4gIG1hcmdpbkJvdHRvbTogNlxufSwgb3duZXJTdGF0ZS5pbnNldCAmJiB7XG4gIHBhZGRpbmdMZWZ0OiA1NlxufSkpO1xuY29uc3QgTGlzdEl0ZW1UZXh0ID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gTGlzdEl0ZW1UZXh0KGluUHJvcHMsIHJlZikge1xuICBjb25zdCBwcm9wcyA9IHVzZURlZmF1bHRQcm9wcyh7XG4gICAgcHJvcHM6IGluUHJvcHMsXG4gICAgbmFtZTogJ011aUxpc3RJdGVtVGV4dCdcbiAgfSk7XG4gIGNvbnN0IHtcbiAgICAgIGNoaWxkcmVuLFxuICAgICAgY2xhc3NOYW1lLFxuICAgICAgZGlzYWJsZVR5cG9ncmFwaHkgPSBmYWxzZSxcbiAgICAgIGluc2V0ID0gZmFsc2UsXG4gICAgICBwcmltYXJ5OiBwcmltYXJ5UHJvcCxcbiAgICAgIHByaW1hcnlUeXBvZ3JhcGh5UHJvcHMsXG4gICAgICBzZWNvbmRhcnk6IHNlY29uZGFyeVByb3AsXG4gICAgICBzZWNvbmRhcnlUeXBvZ3JhcGh5UHJvcHNcbiAgICB9ID0gcHJvcHMsXG4gICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkKTtcbiAgY29uc3Qge1xuICAgIGRlbnNlXG4gIH0gPSBSZWFjdC51c2VDb250ZXh0KExpc3RDb250ZXh0KTtcbiAgbGV0IHByaW1hcnkgPSBwcmltYXJ5UHJvcCAhPSBudWxsID8gcHJpbWFyeVByb3AgOiBjaGlsZHJlbjtcbiAgbGV0IHNlY29uZGFyeSA9IHNlY29uZGFyeVByb3A7XG4gIGNvbnN0IG93bmVyU3RhdGUgPSBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICBkaXNhYmxlVHlwb2dyYXBoeSxcbiAgICBpbnNldCxcbiAgICBwcmltYXJ5OiAhIXByaW1hcnksXG4gICAgc2Vjb25kYXJ5OiAhIXNlY29uZGFyeSxcbiAgICBkZW5zZVxuICB9KTtcbiAgY29uc3QgY2xhc3NlcyA9IHVzZVV0aWxpdHlDbGFzc2VzKG93bmVyU3RhdGUpO1xuICBpZiAocHJpbWFyeSAhPSBudWxsICYmIHByaW1hcnkudHlwZSAhPT0gVHlwb2dyYXBoeSAmJiAhZGlzYWJsZVR5cG9ncmFwaHkpIHtcbiAgICBwcmltYXJ5ID0gLyojX19QVVJFX18qL19qc3goVHlwb2dyYXBoeSwgX2V4dGVuZHMoe1xuICAgICAgdmFyaWFudDogZGVuc2UgPyAnYm9keTInIDogJ2JvZHkxJyxcbiAgICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5wcmltYXJ5LFxuICAgICAgY29tcG9uZW50OiBwcmltYXJ5VHlwb2dyYXBoeVByb3BzICE9IG51bGwgJiYgcHJpbWFyeVR5cG9ncmFwaHlQcm9wcy52YXJpYW50ID8gdW5kZWZpbmVkIDogJ3NwYW4nLFxuICAgICAgZGlzcGxheTogXCJibG9ja1wiXG4gICAgfSwgcHJpbWFyeVR5cG9ncmFwaHlQcm9wcywge1xuICAgICAgY2hpbGRyZW46IHByaW1hcnlcbiAgICB9KSk7XG4gIH1cbiAgaWYgKHNlY29uZGFyeSAhPSBudWxsICYmIHNlY29uZGFyeS50eXBlICE9PSBUeXBvZ3JhcGh5ICYmICFkaXNhYmxlVHlwb2dyYXBoeSkge1xuICAgIHNlY29uZGFyeSA9IC8qI19fUFVSRV9fKi9fanN4KFR5cG9ncmFwaHksIF9leHRlbmRzKHtcbiAgICAgIHZhcmlhbnQ6IFwiYm9keTJcIixcbiAgICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5zZWNvbmRhcnksXG4gICAgICBjb2xvcjogXCJ0ZXh0LnNlY29uZGFyeVwiLFxuICAgICAgZGlzcGxheTogXCJibG9ja1wiXG4gICAgfSwgc2Vjb25kYXJ5VHlwb2dyYXBoeVByb3BzLCB7XG4gICAgICBjaGlsZHJlbjogc2Vjb25kYXJ5XG4gICAgfSkpO1xuICB9XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeHMoTGlzdEl0ZW1UZXh0Um9vdCwgX2V4dGVuZHMoe1xuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSksXG4gICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZSxcbiAgICByZWY6IHJlZlxuICB9LCBvdGhlciwge1xuICAgIGNoaWxkcmVuOiBbcHJpbWFyeSwgc2Vjb25kYXJ5XVxuICB9KSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IExpc3RJdGVtVGV4dC5wcm9wVHlwZXMgLyogcmVtb3ZlLXByb3B0eXBlcyAqLyA9IHtcbiAgLy8g4pSM4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAIFdhcm5pbmcg4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSQXG4gIC8vIOKUgiBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMuIOKUglxuICAvLyDilIIgICAgVG8gdXBkYXRlIHRoZW0sIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIGBwbnBtIHByb3B0eXBlc2AuICAgICDilIJcbiAgLy8g4pSU4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSYXG4gIC8qKlxuICAgKiBBbGlhcyBmb3IgdGhlIGBwcmltYXJ5YCBwcm9wLlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGNoaWxkcmVuIHdvbid0IGJlIHdyYXBwZWQgYnkgYSBUeXBvZ3JhcGh5IGNvbXBvbmVudC5cbiAgICogVGhpcyBjYW4gYmUgdXNlZnVsIHRvIHJlbmRlciBhbiBhbHRlcm5hdGl2ZSBUeXBvZ3JhcGh5IHZhcmlhbnQgYnkgd3JhcHBpbmdcbiAgICogdGhlIGBjaGlsZHJlbmAgKG9yIGBwcmltYXJ5YCkgdGV4dCwgYW5kIG9wdGlvbmFsIGBzZWNvbmRhcnlgIHRleHRcbiAgICogd2l0aCB0aGUgVHlwb2dyYXBoeSBjb21wb25lbnQuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkaXNhYmxlVHlwb2dyYXBoeTogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBjaGlsZHJlbiBhcmUgaW5kZW50ZWQuXG4gICAqIFRoaXMgc2hvdWxkIGJlIHVzZWQgaWYgdGhlcmUgaXMgbm8gbGVmdCBhdmF0YXIgb3IgbGVmdCBpY29uLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgaW5zZXQ6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogVGhlIG1haW4gY29udGVudCBlbGVtZW50LlxuICAgKi9cbiAgcHJpbWFyeTogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBUaGVzZSBwcm9wcyB3aWxsIGJlIGZvcndhcmRlZCB0byB0aGUgcHJpbWFyeSB0eXBvZ3JhcGh5IGNvbXBvbmVudFxuICAgKiAoYXMgbG9uZyBhcyBkaXNhYmxlVHlwb2dyYXBoeSBpcyBub3QgYHRydWVgKS5cbiAgICovXG4gIHByaW1hcnlUeXBvZ3JhcGh5UHJvcHM6IFByb3BUeXBlcy5vYmplY3QsXG4gIC8qKlxuICAgKiBUaGUgc2Vjb25kYXJ5IGNvbnRlbnQgZWxlbWVudC5cbiAgICovXG4gIHNlY29uZGFyeTogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBUaGVzZSBwcm9wcyB3aWxsIGJlIGZvcndhcmRlZCB0byB0aGUgc2Vjb25kYXJ5IHR5cG9ncmFwaHkgY29tcG9uZW50XG4gICAqIChhcyBsb25nIGFzIGRpc2FibGVUeXBvZ3JhcGh5IGlzIG5vdCBgdHJ1ZWApLlxuICAgKi9cbiAgc2Vjb25kYXJ5VHlwb2dyYXBoeVByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogVGhlIHN5c3RlbSBwcm9wIHRoYXQgYWxsb3dzIGRlZmluaW5nIHN5c3RlbSBvdmVycmlkZXMgYXMgd2VsbCBhcyBhZGRpdGlvbmFsIENTUyBzdHlsZXMuXG4gICAqL1xuICBzeDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5ib29sXSkpLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgTGlzdEl0ZW1UZXh0OyIsImltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3Nlcyc7XG5pbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3MgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzcyc7XG5leHBvcnQgZnVuY3Rpb24gZ2V0TW9iaWxlU3RlcHBlclV0aWxpdHlDbGFzcyhzbG90KSB7XG4gIHJldHVybiBnZW5lcmF0ZVV0aWxpdHlDbGFzcygnTXVpTW9iaWxlU3RlcHBlcicsIHNsb3QpO1xufVxuY29uc3QgbW9iaWxlU3RlcHBlckNsYXNzZXMgPSBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzKCdNdWlNb2JpbGVTdGVwcGVyJywgWydyb290JywgJ3Bvc2l0aW9uQm90dG9tJywgJ3Bvc2l0aW9uVG9wJywgJ3Bvc2l0aW9uU3RhdGljJywgJ2RvdHMnLCAnZG90JywgJ2RvdEFjdGl2ZScsICdwcm9ncmVzcyddKTtcbmV4cG9ydCBkZWZhdWx0IG1vYmlsZVN0ZXBwZXJDbGFzc2VzOyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImFjdGl2ZVN0ZXBcIiwgXCJiYWNrQnV0dG9uXCIsIFwiY2xhc3NOYW1lXCIsIFwiTGluZWFyUHJvZ3Jlc3NQcm9wc1wiLCBcIm5leHRCdXR0b25cIiwgXCJwb3NpdGlvblwiLCBcInN0ZXBzXCIsIFwidmFyaWFudFwiXTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCBpbnRlZ2VyUHJvcFR5cGUgZnJvbSAnQG11aS91dGlscy9pbnRlZ2VyUHJvcFR5cGUnO1xuaW1wb3J0IGNvbXBvc2VDbGFzc2VzIGZyb20gJ0BtdWkvdXRpbHMvY29tcG9zZUNsYXNzZXMnO1xuaW1wb3J0IFBhcGVyIGZyb20gJy4uL1BhcGVyJztcbmltcG9ydCBjYXBpdGFsaXplIGZyb20gJy4uL3V0aWxzL2NhcGl0YWxpemUnO1xuaW1wb3J0IExpbmVhclByb2dyZXNzIGZyb20gJy4uL0xpbmVhclByb2dyZXNzJztcbmltcG9ydCB7IHVzZURlZmF1bHRQcm9wcyB9IGZyb20gJy4uL0RlZmF1bHRQcm9wc1Byb3ZpZGVyJztcbmltcG9ydCBzdHlsZWQsIHsgc2xvdFNob3VsZEZvcndhcmRQcm9wIH0gZnJvbSAnLi4vc3R5bGVzL3N0eWxlZCc7XG5pbXBvcnQgeyBnZXRNb2JpbGVTdGVwcGVyVXRpbGl0eUNsYXNzIH0gZnJvbSAnLi9tb2JpbGVTdGVwcGVyQ2xhc3Nlcyc7XG5pbXBvcnQgeyBqc3hzIGFzIF9qc3hzIH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuY29uc3QgdXNlVXRpbGl0eUNsYXNzZXMgPSBvd25lclN0YXRlID0+IHtcbiAgY29uc3Qge1xuICAgIGNsYXNzZXMsXG4gICAgcG9zaXRpb25cbiAgfSA9IG93bmVyU3RhdGU7XG4gIGNvbnN0IHNsb3RzID0ge1xuICAgIHJvb3Q6IFsncm9vdCcsIGBwb3NpdGlvbiR7Y2FwaXRhbGl6ZShwb3NpdGlvbil9YF0sXG4gICAgZG90czogWydkb3RzJ10sXG4gICAgZG90OiBbJ2RvdCddLFxuICAgIGRvdEFjdGl2ZTogWydkb3RBY3RpdmUnXSxcbiAgICBwcm9ncmVzczogWydwcm9ncmVzcyddXG4gIH07XG4gIHJldHVybiBjb21wb3NlQ2xhc3NlcyhzbG90cywgZ2V0TW9iaWxlU3RlcHBlclV0aWxpdHlDbGFzcywgY2xhc3Nlcyk7XG59O1xuY29uc3QgTW9iaWxlU3RlcHBlclJvb3QgPSBzdHlsZWQoUGFwZXIsIHtcbiAgbmFtZTogJ011aU1vYmlsZVN0ZXBwZXInLFxuICBzbG90OiAnUm9vdCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9ID0gcHJvcHM7XG4gICAgcmV0dXJuIFtzdHlsZXMucm9vdCwgc3R5bGVzW2Bwb3NpdGlvbiR7Y2FwaXRhbGl6ZShvd25lclN0YXRlLnBvc2l0aW9uKX1gXV07XG4gIH1cbn0pKCh7XG4gIHRoZW1lLFxuICBvd25lclN0YXRlXG59KSA9PiBfZXh0ZW5kcyh7XG4gIGRpc3BsYXk6ICdmbGV4JyxcbiAgZmxleERpcmVjdGlvbjogJ3JvdycsXG4gIGp1c3RpZnlDb250ZW50OiAnc3BhY2UtYmV0d2VlbicsXG4gIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICBiYWNrZ3JvdW5kOiAodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZS5iYWNrZ3JvdW5kLmRlZmF1bHQsXG4gIHBhZGRpbmc6IDhcbn0sIG93bmVyU3RhdGUucG9zaXRpb24gPT09ICdib3R0b20nICYmIHtcbiAgcG9zaXRpb246ICdmaXhlZCcsXG4gIGJvdHRvbTogMCxcbiAgbGVmdDogMCxcbiAgcmlnaHQ6IDAsXG4gIHpJbmRleDogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnpJbmRleC5tb2JpbGVTdGVwcGVyXG59LCBvd25lclN0YXRlLnBvc2l0aW9uID09PSAndG9wJyAmJiB7XG4gIHBvc2l0aW9uOiAnZml4ZWQnLFxuICB0b3A6IDAsXG4gIGxlZnQ6IDAsXG4gIHJpZ2h0OiAwLFxuICB6SW5kZXg6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS56SW5kZXgubW9iaWxlU3RlcHBlclxufSkpO1xuY29uc3QgTW9iaWxlU3RlcHBlckRvdHMgPSBzdHlsZWQoJ2RpdicsIHtcbiAgbmFtZTogJ011aU1vYmlsZVN0ZXBwZXInLFxuICBzbG90OiAnRG90cycsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4gc3R5bGVzLmRvdHNcbn0pKCh7XG4gIG93bmVyU3RhdGVcbn0pID0+IF9leHRlbmRzKHt9LCBvd25lclN0YXRlLnZhcmlhbnQgPT09ICdkb3RzJyAmJiB7XG4gIGRpc3BsYXk6ICdmbGV4JyxcbiAgZmxleERpcmVjdGlvbjogJ3Jvdydcbn0pKTtcbmNvbnN0IE1vYmlsZVN0ZXBwZXJEb3QgPSBzdHlsZWQoJ2RpdicsIHtcbiAgbmFtZTogJ011aU1vYmlsZVN0ZXBwZXInLFxuICBzbG90OiAnRG90JyxcbiAgc2hvdWxkRm9yd2FyZFByb3A6IHByb3AgPT4gc2xvdFNob3VsZEZvcndhcmRQcm9wKHByb3ApICYmIHByb3AgIT09ICdkb3RBY3RpdmUnLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBkb3RBY3RpdmVcbiAgICB9ID0gcHJvcHM7XG4gICAgcmV0dXJuIFtzdHlsZXMuZG90LCBkb3RBY3RpdmUgJiYgc3R5bGVzLmRvdEFjdGl2ZV07XG4gIH1cbn0pKCh7XG4gIHRoZW1lLFxuICBvd25lclN0YXRlLFxuICBkb3RBY3RpdmVcbn0pID0+IF9leHRlbmRzKHt9LCBvd25lclN0YXRlLnZhcmlhbnQgPT09ICdkb3RzJyAmJiBfZXh0ZW5kcyh7XG4gIHRyYW5zaXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZSgnYmFja2dyb3VuZC1jb2xvcicsIHtcbiAgICBkdXJhdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuZHVyYXRpb24uc2hvcnRlc3RcbiAgfSksXG4gIGJhY2tncm91bmRDb2xvcjogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGUuYWN0aW9uLmRpc2FibGVkLFxuICBib3JkZXJSYWRpdXM6ICc1MCUnLFxuICB3aWR0aDogOCxcbiAgaGVpZ2h0OiA4LFxuICBtYXJnaW46ICcwIDJweCdcbn0sIGRvdEFjdGl2ZSAmJiB7XG4gIGJhY2tncm91bmRDb2xvcjogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGUucHJpbWFyeS5tYWluXG59KSkpO1xuY29uc3QgTW9iaWxlU3RlcHBlclByb2dyZXNzID0gc3R5bGVkKExpbmVhclByb2dyZXNzLCB7XG4gIG5hbWU6ICdNdWlNb2JpbGVTdGVwcGVyJyxcbiAgc2xvdDogJ1Byb2dyZXNzJyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiBzdHlsZXMucHJvZ3Jlc3Ncbn0pKCh7XG4gIG93bmVyU3RhdGVcbn0pID0+IF9leHRlbmRzKHt9LCBvd25lclN0YXRlLnZhcmlhbnQgPT09ICdwcm9ncmVzcycgJiYge1xuICB3aWR0aDogJzUwJSdcbn0pKTtcbmNvbnN0IE1vYmlsZVN0ZXBwZXIgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBNb2JpbGVTdGVwcGVyKGluUHJvcHMsIHJlZikge1xuICBjb25zdCBwcm9wcyA9IHVzZURlZmF1bHRQcm9wcyh7XG4gICAgcHJvcHM6IGluUHJvcHMsXG4gICAgbmFtZTogJ011aU1vYmlsZVN0ZXBwZXInXG4gIH0pO1xuICBjb25zdCB7XG4gICAgICBhY3RpdmVTdGVwID0gMCxcbiAgICAgIGJhY2tCdXR0b24sXG4gICAgICBjbGFzc05hbWUsXG4gICAgICBMaW5lYXJQcm9ncmVzc1Byb3BzLFxuICAgICAgbmV4dEJ1dHRvbixcbiAgICAgIHBvc2l0aW9uID0gJ2JvdHRvbScsXG4gICAgICBzdGVwcyxcbiAgICAgIHZhcmlhbnQgPSAnZG90cydcbiAgICB9ID0gcHJvcHMsXG4gICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkKTtcbiAgY29uc3Qgb3duZXJTdGF0ZSA9IF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgIGFjdGl2ZVN0ZXAsXG4gICAgcG9zaXRpb24sXG4gICAgdmFyaWFudFxuICB9KTtcbiAgbGV0IHZhbHVlO1xuICBpZiAodmFyaWFudCA9PT0gJ3Byb2dyZXNzJykge1xuICAgIGlmIChzdGVwcyA9PT0gMSkge1xuICAgICAgdmFsdWUgPSAxMDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhbHVlID0gTWF0aC5jZWlsKGFjdGl2ZVN0ZXAgLyAoc3RlcHMgLSAxKSAqIDEwMCk7XG4gICAgfVxuICB9XG4gIGNvbnN0IGNsYXNzZXMgPSB1c2VVdGlsaXR5Q2xhc3Nlcyhvd25lclN0YXRlKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4cyhNb2JpbGVTdGVwcGVyUm9vdCwgX2V4dGVuZHMoe1xuICAgIHNxdWFyZTogdHJ1ZSxcbiAgICBlbGV2YXRpb246IDAsXG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lKSxcbiAgICByZWY6IHJlZixcbiAgICBvd25lclN0YXRlOiBvd25lclN0YXRlXG4gIH0sIG90aGVyLCB7XG4gICAgY2hpbGRyZW46IFtiYWNrQnV0dG9uLCB2YXJpYW50ID09PSAndGV4dCcgJiYgLyojX19QVVJFX18qL19qc3hzKFJlYWN0LkZyYWdtZW50LCB7XG4gICAgICBjaGlsZHJlbjogW2FjdGl2ZVN0ZXAgKyAxLCBcIiAvIFwiLCBzdGVwc11cbiAgICB9KSwgdmFyaWFudCA9PT0gJ2RvdHMnICYmIC8qI19fUFVSRV9fKi9fanN4KE1vYmlsZVN0ZXBwZXJEb3RzLCB7XG4gICAgICBvd25lclN0YXRlOiBvd25lclN0YXRlLFxuICAgICAgY2xhc3NOYW1lOiBjbGFzc2VzLmRvdHMsXG4gICAgICBjaGlsZHJlbjogWy4uLm5ldyBBcnJheShzdGVwcyldLm1hcCgoXywgaW5kZXgpID0+IC8qI19fUFVSRV9fKi9fanN4KE1vYmlsZVN0ZXBwZXJEb3QsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMuZG90LCBpbmRleCA9PT0gYWN0aXZlU3RlcCAmJiBjbGFzc2VzLmRvdEFjdGl2ZSksXG4gICAgICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGUsXG4gICAgICAgIGRvdEFjdGl2ZTogaW5kZXggPT09IGFjdGl2ZVN0ZXBcbiAgICAgIH0sIGluZGV4KSlcbiAgICB9KSwgdmFyaWFudCA9PT0gJ3Byb2dyZXNzJyAmJiAvKiNfX1BVUkVfXyovX2pzeChNb2JpbGVTdGVwcGVyUHJvZ3Jlc3MsIF9leHRlbmRzKHtcbiAgICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGUsXG4gICAgICBjbGFzc05hbWU6IGNsYXNzZXMucHJvZ3Jlc3MsXG4gICAgICB2YXJpYW50OiBcImRldGVybWluYXRlXCIsXG4gICAgICB2YWx1ZTogdmFsdWVcbiAgICB9LCBMaW5lYXJQcm9ncmVzc1Byb3BzKSksIG5leHRCdXR0b25dXG4gIH0pKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gTW9iaWxlU3RlcHBlci5wcm9wVHlwZXMgLyogcmVtb3ZlLXByb3B0eXBlcyAqLyA9IHtcbiAgLy8g4pSM4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAIFdhcm5pbmcg4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSQXG4gIC8vIOKUgiBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMuIOKUglxuICAvLyDilIIgICAgVG8gdXBkYXRlIHRoZW0sIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIGBwbnBtIHByb3B0eXBlc2AuICAgICDilIJcbiAgLy8g4pSU4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSYXG4gIC8qKlxuICAgKiBTZXQgdGhlIGFjdGl2ZSBzdGVwICh6ZXJvIGJhc2VkIGluZGV4KS5cbiAgICogRGVmaW5lcyB3aGljaCBkb3QgaXMgaGlnaGxpZ2h0ZWQgd2hlbiB0aGUgdmFyaWFudCBpcyAnZG90cycuXG4gICAqIEBkZWZhdWx0IDBcbiAgICovXG4gIGFjdGl2ZVN0ZXA6IGludGVnZXJQcm9wVHlwZSxcbiAgLyoqXG4gICAqIEEgYmFjayBidXR0b24gZWxlbWVudC4gRm9yIGluc3RhbmNlLCBpdCBjYW4gYmUgYSBgQnV0dG9uYCBvciBhbiBgSWNvbkJ1dHRvbmAuXG4gICAqL1xuICBiYWNrQnV0dG9uOiBQcm9wVHlwZXMubm9kZSxcbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBQcm9wcyBhcHBsaWVkIHRvIHRoZSBgTGluZWFyUHJvZ3Jlc3NgIGVsZW1lbnQuXG4gICAqL1xuICBMaW5lYXJQcm9ncmVzc1Byb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogQSBuZXh0IGJ1dHRvbiBlbGVtZW50LiBGb3IgaW5zdGFuY2UsIGl0IGNhbiBiZSBhIGBCdXR0b25gIG9yIGFuIGBJY29uQnV0dG9uYC5cbiAgICovXG4gIG5leHRCdXR0b246IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogU2V0IHRoZSBwb3NpdGlvbmluZyB0eXBlLlxuICAgKiBAZGVmYXVsdCAnYm90dG9tJ1xuICAgKi9cbiAgcG9zaXRpb246IFByb3BUeXBlcy5vbmVPZihbJ2JvdHRvbScsICdzdGF0aWMnLCAndG9wJ10pLFxuICAvKipcbiAgICogVGhlIHRvdGFsIHN0ZXBzLlxuICAgKi9cbiAgc3RlcHM6IGludGVnZXJQcm9wVHlwZS5pc1JlcXVpcmVkLFxuICAvKipcbiAgICogVGhlIHN5c3RlbSBwcm9wIHRoYXQgYWxsb3dzIGRlZmluaW5nIHN5c3RlbSBvdmVycmlkZXMgYXMgd2VsbCBhcyBhZGRpdGlvbmFsIENTUyBzdHlsZXMuXG4gICAqL1xuICBzeDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5ib29sXSkpLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pLFxuICAvKipcbiAgICogVGhlIHZhcmlhbnQgdG8gdXNlLlxuICAgKiBAZGVmYXVsdCAnZG90cydcbiAgICovXG4gIHZhcmlhbnQ6IFByb3BUeXBlcy5vbmVPZihbJ2RvdHMnLCAncHJvZ3Jlc3MnLCAndGV4dCddKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IE1vYmlsZVN0ZXBwZXI7IiwiaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzc2VzJztcbmltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzJztcbmV4cG9ydCBmdW5jdGlvbiBnZXROYXRpdmVTZWxlY3RVdGlsaXR5Q2xhc3NlcyhzbG90KSB7XG4gIHJldHVybiBnZW5lcmF0ZVV0aWxpdHlDbGFzcygnTXVpTmF0aXZlU2VsZWN0Jywgc2xvdCk7XG59XG5jb25zdCBuYXRpdmVTZWxlY3RDbGFzc2VzID0gZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcygnTXVpTmF0aXZlU2VsZWN0JywgWydyb290JywgJ3NlbGVjdCcsICdtdWx0aXBsZScsICdmaWxsZWQnLCAnb3V0bGluZWQnLCAnc3RhbmRhcmQnLCAnZGlzYWJsZWQnLCAnaWNvbicsICdpY29uT3BlbicsICdpY29uRmlsbGVkJywgJ2ljb25PdXRsaW5lZCcsICdpY29uU3RhbmRhcmQnLCAnbmF0aXZlSW5wdXQnLCAnZXJyb3InXSk7XG5leHBvcnQgZGVmYXVsdCBuYXRpdmVTZWxlY3RDbGFzc2VzOyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImNsYXNzTmFtZVwiLCBcImRpc2FibGVkXCIsIFwiZXJyb3JcIiwgXCJJY29uQ29tcG9uZW50XCIsIFwiaW5wdXRSZWZcIiwgXCJ2YXJpYW50XCJdO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHJlZlR5cGUgZnJvbSAnQG11aS91dGlscy9yZWZUeXBlJztcbmltcG9ydCBjb21wb3NlQ2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2NvbXBvc2VDbGFzc2VzJztcbmltcG9ydCBjYXBpdGFsaXplIGZyb20gJy4uL3V0aWxzL2NhcGl0YWxpemUnO1xuaW1wb3J0IG5hdGl2ZVNlbGVjdENsYXNzZXMsIHsgZ2V0TmF0aXZlU2VsZWN0VXRpbGl0eUNsYXNzZXMgfSBmcm9tICcuL25hdGl2ZVNlbGVjdENsYXNzZXMnO1xuaW1wb3J0IHN0eWxlZCwgeyByb290U2hvdWxkRm9yd2FyZFByb3AgfSBmcm9tICcuLi9zdHlsZXMvc3R5bGVkJztcbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5pbXBvcnQgeyBqc3hzIGFzIF9qc3hzIH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5jb25zdCB1c2VVdGlsaXR5Q2xhc3NlcyA9IG93bmVyU3RhdGUgPT4ge1xuICBjb25zdCB7XG4gICAgY2xhc3NlcyxcbiAgICB2YXJpYW50LFxuICAgIGRpc2FibGVkLFxuICAgIG11bHRpcGxlLFxuICAgIG9wZW4sXG4gICAgZXJyb3JcbiAgfSA9IG93bmVyU3RhdGU7XG4gIGNvbnN0IHNsb3RzID0ge1xuICAgIHNlbGVjdDogWydzZWxlY3QnLCB2YXJpYW50LCBkaXNhYmxlZCAmJiAnZGlzYWJsZWQnLCBtdWx0aXBsZSAmJiAnbXVsdGlwbGUnLCBlcnJvciAmJiAnZXJyb3InXSxcbiAgICBpY29uOiBbJ2ljb24nLCBgaWNvbiR7Y2FwaXRhbGl6ZSh2YXJpYW50KX1gLCBvcGVuICYmICdpY29uT3BlbicsIGRpc2FibGVkICYmICdkaXNhYmxlZCddXG4gIH07XG4gIHJldHVybiBjb21wb3NlQ2xhc3NlcyhzbG90cywgZ2V0TmF0aXZlU2VsZWN0VXRpbGl0eUNsYXNzZXMsIGNsYXNzZXMpO1xufTtcbmV4cG9ydCBjb25zdCBuYXRpdmVTZWxlY3RTZWxlY3RTdHlsZXMgPSAoe1xuICBvd25lclN0YXRlLFxuICB0aGVtZVxufSkgPT4gX2V4dGVuZHMoe1xuICBNb3pBcHBlYXJhbmNlOiAnbm9uZScsXG4gIC8vIFJlc2V0XG4gIFdlYmtpdEFwcGVhcmFuY2U6ICdub25lJyxcbiAgLy8gUmVzZXRcbiAgLy8gV2hlbiBpbnRlcmFjdGluZyBxdWlja2x5LCB0aGUgdGV4dCBjYW4gZW5kIHVwIHNlbGVjdGVkLlxuICAvLyBOYXRpdmUgc2VsZWN0IGNhbid0IGJlIHNlbGVjdGVkIGVpdGhlci5cbiAgdXNlclNlbGVjdDogJ25vbmUnLFxuICBib3JkZXJSYWRpdXM6IDAsXG4gIC8vIFJlc2V0XG4gIGN1cnNvcjogJ3BvaW50ZXInLFxuICAnJjpmb2N1cyc6IF9leHRlbmRzKHt9LCB0aGVtZS52YXJzID8ge1xuICAgIGJhY2tncm91bmRDb2xvcjogYHJnYmEoJHt0aGVtZS52YXJzLnBhbGV0dGUuY29tbW9uLm9uQmFja2dyb3VuZENoYW5uZWx9IC8gMC4wNSlgXG4gIH0gOiB7XG4gICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLm1vZGUgPT09ICdsaWdodCcgPyAncmdiYSgwLCAwLCAwLCAwLjA1KScgOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjA1KSdcbiAgfSwge1xuICAgIGJvcmRlclJhZGl1czogMCAvLyBSZXNldCBDaHJvbWUgc3R5bGVcbiAgfSksXG4gIC8vIFJlbW92ZSBJRTExIGFycm93XG4gICcmOjotbXMtZXhwYW5kJzoge1xuICAgIGRpc3BsYXk6ICdub25lJ1xuICB9LFxuICBbYCYuJHtuYXRpdmVTZWxlY3RDbGFzc2VzLmRpc2FibGVkfWBdOiB7XG4gICAgY3Vyc29yOiAnZGVmYXVsdCdcbiAgfSxcbiAgJyZbbXVsdGlwbGVdJzoge1xuICAgIGhlaWdodDogJ2F1dG8nXG4gIH0sXG4gICcmOm5vdChbbXVsdGlwbGVdKSBvcHRpb24sICY6bm90KFttdWx0aXBsZV0pIG9wdGdyb3VwJzoge1xuICAgIGJhY2tncm91bmRDb2xvcjogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGUuYmFja2dyb3VuZC5wYXBlclxuICB9LFxuICAvLyBCdW1wIHNwZWNpZmljaXR5IHRvIGFsbG93IGV4dGVuZGluZyBjdXN0b20gaW5wdXRzXG4gICcmJiYnOiB7XG4gICAgcGFkZGluZ1JpZ2h0OiAyNCxcbiAgICBtaW5XaWR0aDogMTYgLy8gU28gaXQgZG9lc24ndCBjb2xsYXBzZS5cbiAgfVxufSwgb3duZXJTdGF0ZS52YXJpYW50ID09PSAnZmlsbGVkJyAmJiB7XG4gICcmJiYnOiB7XG4gICAgcGFkZGluZ1JpZ2h0OiAzMlxuICB9XG59LCBvd25lclN0YXRlLnZhcmlhbnQgPT09ICdvdXRsaW5lZCcgJiYge1xuICBib3JkZXJSYWRpdXM6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5zaGFwZS5ib3JkZXJSYWRpdXMsXG4gICcmOmZvY3VzJzoge1xuICAgIGJvcmRlclJhZGl1czogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnNoYXBlLmJvcmRlclJhZGl1cyAvLyBSZXNldCB0aGUgcmVzZXQgZm9yIENocm9tZSBzdHlsZVxuICB9LFxuICAnJiYmJzoge1xuICAgIHBhZGRpbmdSaWdodDogMzJcbiAgfVxufSk7XG5jb25zdCBOYXRpdmVTZWxlY3RTZWxlY3QgPSBzdHlsZWQoJ3NlbGVjdCcsIHtcbiAgbmFtZTogJ011aU5hdGl2ZVNlbGVjdCcsXG4gIHNsb3Q6ICdTZWxlY3QnLFxuICBzaG91bGRGb3J3YXJkUHJvcDogcm9vdFNob3VsZEZvcndhcmRQcm9wLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBvd25lclN0YXRlXG4gICAgfSA9IHByb3BzO1xuICAgIHJldHVybiBbc3R5bGVzLnNlbGVjdCwgc3R5bGVzW293bmVyU3RhdGUudmFyaWFudF0sIG93bmVyU3RhdGUuZXJyb3IgJiYgc3R5bGVzLmVycm9yLCB7XG4gICAgICBbYCYuJHtuYXRpdmVTZWxlY3RDbGFzc2VzLm11bHRpcGxlfWBdOiBzdHlsZXMubXVsdGlwbGVcbiAgICB9XTtcbiAgfVxufSkobmF0aXZlU2VsZWN0U2VsZWN0U3R5bGVzKTtcbmV4cG9ydCBjb25zdCBuYXRpdmVTZWxlY3RJY29uU3R5bGVzID0gKHtcbiAgb3duZXJTdGF0ZSxcbiAgdGhlbWVcbn0pID0+IF9leHRlbmRzKHtcbiAgLy8gV2UgdXNlIGEgcG9zaXRpb24gYWJzb2x1dGUgb3ZlciBhIGZsZXhib3ggaW4gb3JkZXIgdG8gZm9yd2FyZCB0aGUgcG9pbnRlciBldmVudHNcbiAgLy8gdG8gdGhlIGlucHV0IGFuZCB0byBzdXBwb3J0IHdyYXBwaW5nIHRhZ3MuLlxuICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgcmlnaHQ6IDAsXG4gIHRvcDogJ2NhbGMoNTAlIC0gLjVlbSknLFxuICAvLyBDZW50ZXIgdmVydGljYWxseSwgaGVpZ2h0IGlzIDFlbVxuICBwb2ludGVyRXZlbnRzOiAnbm9uZScsXG4gIC8vIERvbid0IGJsb2NrIHBvaW50ZXIgZXZlbnRzIG9uIHRoZSBzZWxlY3QgdW5kZXIgdGhlIGljb24uXG4gIGNvbG9yOiAodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZS5hY3Rpb24uYWN0aXZlLFxuICBbYCYuJHtuYXRpdmVTZWxlY3RDbGFzc2VzLmRpc2FibGVkfWBdOiB7XG4gICAgY29sb3I6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlLmFjdGlvbi5kaXNhYmxlZFxuICB9XG59LCBvd25lclN0YXRlLm9wZW4gJiYge1xuICB0cmFuc2Zvcm06ICdyb3RhdGUoMTgwZGVnKSdcbn0sIG93bmVyU3RhdGUudmFyaWFudCA9PT0gJ2ZpbGxlZCcgJiYge1xuICByaWdodDogN1xufSwgb3duZXJTdGF0ZS52YXJpYW50ID09PSAnb3V0bGluZWQnICYmIHtcbiAgcmlnaHQ6IDdcbn0pO1xuY29uc3QgTmF0aXZlU2VsZWN0SWNvbiA9IHN0eWxlZCgnc3ZnJywge1xuICBuYW1lOiAnTXVpTmF0aXZlU2VsZWN0JyxcbiAgc2xvdDogJ0ljb24nLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBvd25lclN0YXRlXG4gICAgfSA9IHByb3BzO1xuICAgIHJldHVybiBbc3R5bGVzLmljb24sIG93bmVyU3RhdGUudmFyaWFudCAmJiBzdHlsZXNbYGljb24ke2NhcGl0YWxpemUob3duZXJTdGF0ZS52YXJpYW50KX1gXSwgb3duZXJTdGF0ZS5vcGVuICYmIHN0eWxlcy5pY29uT3Blbl07XG4gIH1cbn0pKG5hdGl2ZVNlbGVjdEljb25TdHlsZXMpO1xuXG4vKipcbiAqIEBpZ25vcmUgLSBpbnRlcm5hbCBjb21wb25lbnQuXG4gKi9cbmNvbnN0IE5hdGl2ZVNlbGVjdElucHV0ID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gTmF0aXZlU2VsZWN0SW5wdXQocHJvcHMsIHJlZikge1xuICBjb25zdCB7XG4gICAgICBjbGFzc05hbWUsXG4gICAgICBkaXNhYmxlZCxcbiAgICAgIGVycm9yLFxuICAgICAgSWNvbkNvbXBvbmVudCxcbiAgICAgIGlucHV0UmVmLFxuICAgICAgdmFyaWFudCA9ICdzdGFuZGFyZCdcbiAgICB9ID0gcHJvcHMsXG4gICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkKTtcbiAgY29uc3Qgb3duZXJTdGF0ZSA9IF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgIGRpc2FibGVkLFxuICAgIHZhcmlhbnQsXG4gICAgZXJyb3JcbiAgfSk7XG4gIGNvbnN0IGNsYXNzZXMgPSB1c2VVdGlsaXR5Q2xhc3Nlcyhvd25lclN0YXRlKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4cyhSZWFjdC5GcmFnbWVudCwge1xuICAgIGNoaWxkcmVuOiBbLyojX19QVVJFX18qL19qc3goTmF0aXZlU2VsZWN0U2VsZWN0LCBfZXh0ZW5kcyh7XG4gICAgICBvd25lclN0YXRlOiBvd25lclN0YXRlLFxuICAgICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMuc2VsZWN0LCBjbGFzc05hbWUpLFxuICAgICAgZGlzYWJsZWQ6IGRpc2FibGVkLFxuICAgICAgcmVmOiBpbnB1dFJlZiB8fCByZWZcbiAgICB9LCBvdGhlcikpLCBwcm9wcy5tdWx0aXBsZSA/IG51bGwgOiAvKiNfX1BVUkVfXyovX2pzeChOYXRpdmVTZWxlY3RJY29uLCB7XG4gICAgICBhczogSWNvbkNvbXBvbmVudCxcbiAgICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGUsXG4gICAgICBjbGFzc05hbWU6IGNsYXNzZXMuaWNvblxuICAgIH0pXVxuICB9KTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gTmF0aXZlU2VsZWN0SW5wdXQucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogVGhlIG9wdGlvbiBlbGVtZW50cyB0byBwb3B1bGF0ZSB0aGUgc2VsZWN0IHdpdGguXG4gICAqIENhbiBiZSBzb21lIGA8b3B0aW9uPmAgZWxlbWVudHMuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogVGhlIENTUyBjbGFzcyBuYW1lIG9mIHRoZSBzZWxlY3QgZWxlbWVudC5cbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIHNlbGVjdCBpcyBkaXNhYmxlZC5cbiAgICovXG4gIGRpc2FibGVkOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGBzZWxlY3QgaW5wdXRgIHdpbGwgaW5kaWNhdGUgYW4gZXJyb3IuXG4gICAqL1xuICBlcnJvcjogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBUaGUgaWNvbiB0aGF0IGRpc3BsYXlzIHRoZSBhcnJvdy5cbiAgICovXG4gIEljb25Db21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZS5pc1JlcXVpcmVkLFxuICAvKipcbiAgICogVXNlIHRoYXQgcHJvcCB0byBwYXNzIGEgcmVmIHRvIHRoZSBuYXRpdmUgc2VsZWN0IGVsZW1lbnQuXG4gICAqIEBkZXByZWNhdGVkXG4gICAqL1xuICBpbnB1dFJlZjogcmVmVHlwZSxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG11bHRpcGxlOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIE5hbWUgYXR0cmlidXRlIG9mIHRoZSBgc2VsZWN0YCBvciBoaWRkZW4gYGlucHV0YCBlbGVtZW50LlxuICAgKi9cbiAgbmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gYSBtZW51IGl0ZW0gaXMgc2VsZWN0ZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBldmVudCBUaGUgZXZlbnQgc291cmNlIG9mIHRoZSBjYWxsYmFjay5cbiAgICogWW91IGNhbiBwdWxsIG91dCB0aGUgbmV3IHZhbHVlIGJ5IGFjY2Vzc2luZyBgZXZlbnQudGFyZ2V0LnZhbHVlYCAoc3RyaW5nKS5cbiAgICovXG4gIG9uQ2hhbmdlOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIFRoZSBpbnB1dCB2YWx1ZS5cbiAgICovXG4gIHZhbHVlOiBQcm9wVHlwZXMuYW55LFxuICAvKipcbiAgICogVGhlIHZhcmlhbnQgdG8gdXNlLlxuICAgKi9cbiAgdmFyaWFudDogUHJvcFR5cGVzLm9uZU9mKFsnc3RhbmRhcmQnLCAnb3V0bGluZWQnLCAnZmlsbGVkJ10pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgTmF0aXZlU2VsZWN0SW5wdXQ7IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiY2xhc3NOYW1lXCIsIFwiY2hpbGRyZW5cIiwgXCJjbGFzc2VzXCIsIFwiSWNvbkNvbXBvbmVudFwiLCBcImlucHV0XCIsIFwiaW5wdXRQcm9wc1wiLCBcInZhcmlhbnRcIl0sXG4gIF9leGNsdWRlZDIgPSBbXCJyb290XCJdO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNvbXBvc2VDbGFzc2VzIGZyb20gJ0BtdWkvdXRpbHMvY29tcG9zZUNsYXNzZXMnO1xuaW1wb3J0IE5hdGl2ZVNlbGVjdElucHV0IGZyb20gJy4vTmF0aXZlU2VsZWN0SW5wdXQnO1xuaW1wb3J0IGZvcm1Db250cm9sU3RhdGUgZnJvbSAnLi4vRm9ybUNvbnRyb2wvZm9ybUNvbnRyb2xTdGF0ZSc7XG5pbXBvcnQgdXNlRm9ybUNvbnRyb2wgZnJvbSAnLi4vRm9ybUNvbnRyb2wvdXNlRm9ybUNvbnRyb2wnO1xuaW1wb3J0IEFycm93RHJvcERvd25JY29uIGZyb20gJy4uL2ludGVybmFsL3N2Zy1pY29ucy9BcnJvd0Ryb3BEb3duJztcbmltcG9ydCBJbnB1dCBmcm9tICcuLi9JbnB1dCc7XG5pbXBvcnQgeyB1c2VEZWZhdWx0UHJvcHMgfSBmcm9tICcuLi9EZWZhdWx0UHJvcHNQcm92aWRlcic7XG5pbXBvcnQgeyBnZXROYXRpdmVTZWxlY3RVdGlsaXR5Q2xhc3NlcyB9IGZyb20gJy4vbmF0aXZlU2VsZWN0Q2xhc3Nlcyc7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuY29uc3QgdXNlVXRpbGl0eUNsYXNzZXMgPSBvd25lclN0YXRlID0+IHtcbiAgY29uc3Qge1xuICAgIGNsYXNzZXNcbiAgfSA9IG93bmVyU3RhdGU7XG4gIGNvbnN0IHNsb3RzID0ge1xuICAgIHJvb3Q6IFsncm9vdCddXG4gIH07XG4gIHJldHVybiBjb21wb3NlQ2xhc3NlcyhzbG90cywgZ2V0TmF0aXZlU2VsZWN0VXRpbGl0eUNsYXNzZXMsIGNsYXNzZXMpO1xufTtcbmNvbnN0IGRlZmF1bHRJbnB1dCA9IC8qI19fUFVSRV9fKi9fanN4KElucHV0LCB7fSk7XG4vKipcbiAqIEFuIGFsdGVybmF0aXZlIHRvIGA8U2VsZWN0IG5hdGl2ZSAvPmAgd2l0aCBhIG11Y2ggc21hbGxlciBidW5kbGUgc2l6ZSBmb290cHJpbnQuXG4gKi9cbmNvbnN0IE5hdGl2ZVNlbGVjdCA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIE5hdGl2ZVNlbGVjdChpblByb3BzLCByZWYpIHtcbiAgY29uc3QgcHJvcHMgPSB1c2VEZWZhdWx0UHJvcHMoe1xuICAgIG5hbWU6ICdNdWlOYXRpdmVTZWxlY3QnLFxuICAgIHByb3BzOiBpblByb3BzXG4gIH0pO1xuICBjb25zdCB7XG4gICAgICBjbGFzc05hbWUsXG4gICAgICBjaGlsZHJlbixcbiAgICAgIGNsYXNzZXM6IGNsYXNzZXNQcm9wID0ge30sXG4gICAgICBJY29uQ29tcG9uZW50ID0gQXJyb3dEcm9wRG93bkljb24sXG4gICAgICBpbnB1dCA9IGRlZmF1bHRJbnB1dCxcbiAgICAgIGlucHV0UHJvcHNcbiAgICB9ID0gcHJvcHMsXG4gICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkKTtcbiAgY29uc3QgbXVpRm9ybUNvbnRyb2wgPSB1c2VGb3JtQ29udHJvbCgpO1xuICBjb25zdCBmY3MgPSBmb3JtQ29udHJvbFN0YXRlKHtcbiAgICBwcm9wcyxcbiAgICBtdWlGb3JtQ29udHJvbCxcbiAgICBzdGF0ZXM6IFsndmFyaWFudCddXG4gIH0pO1xuICBjb25zdCBvd25lclN0YXRlID0gX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgY2xhc3NlczogY2xhc3Nlc1Byb3BcbiAgfSk7XG4gIGNvbnN0IGNsYXNzZXMgPSB1c2VVdGlsaXR5Q2xhc3Nlcyhvd25lclN0YXRlKTtcbiAgY29uc3Qgb3RoZXJDbGFzc2VzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoY2xhc3Nlc1Byb3AsIF9leGNsdWRlZDIpO1xuICByZXR1cm4gLyojX19QVVJFX18qL19qc3goUmVhY3QuRnJhZ21lbnQsIHtcbiAgICBjaGlsZHJlbjogLyojX19QVVJFX18qL1JlYWN0LmNsb25lRWxlbWVudChpbnB1dCwgX2V4dGVuZHMoe1xuICAgICAgLy8gTW9zdCBvZiB0aGUgbG9naWMgaXMgaW1wbGVtZW50ZWQgaW4gYE5hdGl2ZVNlbGVjdElucHV0YC5cbiAgICAgIC8vIFRoZSBgU2VsZWN0YCBjb21wb25lbnQgaXMgYSBzaW1wbGUgQVBJIHdyYXBwZXIgdG8gZXhwb3NlIHNvbWV0aGluZyBiZXR0ZXIgdG8gcGxheSB3aXRoLlxuICAgICAgaW5wdXRDb21wb25lbnQ6IE5hdGl2ZVNlbGVjdElucHV0LFxuICAgICAgaW5wdXRQcm9wczogX2V4dGVuZHMoe1xuICAgICAgICBjaGlsZHJlbixcbiAgICAgICAgY2xhc3Nlczogb3RoZXJDbGFzc2VzLFxuICAgICAgICBJY29uQ29tcG9uZW50LFxuICAgICAgICB2YXJpYW50OiBmY3MudmFyaWFudCxcbiAgICAgICAgdHlwZTogdW5kZWZpbmVkXG4gICAgICB9LCBpbnB1dFByb3BzLCBpbnB1dCA/IGlucHV0LnByb3BzLmlucHV0UHJvcHMgOiB7fSksXG4gICAgICByZWZcbiAgICB9LCBvdGhlciwge1xuICAgICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgaW5wdXQucHJvcHMuY2xhc3NOYW1lLCBjbGFzc05hbWUpXG4gICAgfSkpXG4gIH0pO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBOYXRpdmVTZWxlY3QucHJvcFR5cGVzIC8qIHJlbW92ZS1wcm9wdHlwZXMgKi8gPSB7XG4gIC8vIOKUjOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgCBXYXJuaW5nIOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUkFxuICAvLyDilIIgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zLiDilIJcbiAgLy8g4pSCICAgIFRvIHVwZGF0ZSB0aGVtLCBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBgcG5wbSBwcm9wdHlwZXNgLiAgICAg4pSCXG4gIC8vIOKUlOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUmFxuICAvKipcbiAgICogVGhlIG9wdGlvbiBlbGVtZW50cyB0byBwb3B1bGF0ZSB0aGUgc2VsZWN0IHdpdGguXG4gICAqIENhbiBiZSBzb21lIGA8b3B0aW9uPmAgZWxlbWVudHMuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIEBkZWZhdWx0IHt9XG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogVGhlIGljb24gdGhhdCBkaXNwbGF5cyB0aGUgYXJyb3cuXG4gICAqIEBkZWZhdWx0IEFycm93RHJvcERvd25JY29uXG4gICAqL1xuICBJY29uQ29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG4gIC8qKlxuICAgKiBBbiBgSW5wdXRgIGVsZW1lbnQ7IGRvZXMgbm90IGhhdmUgdG8gYmUgYSBtYXRlcmlhbC11aSBzcGVjaWZpYyBgSW5wdXRgLlxuICAgKiBAZGVmYXVsdCA8SW5wdXQgLz5cbiAgICovXG4gIGlucHV0OiBQcm9wVHlwZXMuZWxlbWVudCxcbiAgLyoqXG4gICAqIFtBdHRyaWJ1dGVzXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVE1ML0VsZW1lbnQvc2VsZWN0I2F0dHJpYnV0ZXMpIGFwcGxpZWQgdG8gdGhlIGBzZWxlY3RgIGVsZW1lbnQuXG4gICAqL1xuICBpbnB1dFByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiBhIG1lbnUgaXRlbSBpcyBzZWxlY3RlZC5cbiAgICpcbiAgICogQHBhcmFtIHtSZWFjdC5DaGFuZ2VFdmVudDxIVE1MU2VsZWN0RWxlbWVudD59IGV2ZW50IFRoZSBldmVudCBzb3VyY2Ugb2YgdGhlIGNhbGxiYWNrLlxuICAgKiBZb3UgY2FuIHB1bGwgb3V0IHRoZSBuZXcgdmFsdWUgYnkgYWNjZXNzaW5nIGBldmVudC50YXJnZXQudmFsdWVgIChzdHJpbmcpLlxuICAgKi9cbiAgb25DaGFuZ2U6IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogVGhlIHN5c3RlbSBwcm9wIHRoYXQgYWxsb3dzIGRlZmluaW5nIHN5c3RlbSBvdmVycmlkZXMgYXMgd2VsbCBhcyBhZGRpdGlvbmFsIENTUyBzdHlsZXMuXG4gICAqL1xuICBzeDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5ib29sXSkpLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pLFxuICAvKipcbiAgICogVGhlIGBpbnB1dGAgdmFsdWUuIFRoZSBET00gQVBJIGNhc3RzIHRoaXMgdG8gYSBzdHJpbmcuXG4gICAqL1xuICB2YWx1ZTogUHJvcFR5cGVzLmFueSxcbiAgLyoqXG4gICAqIFRoZSB2YXJpYW50IHRvIHVzZS5cbiAgICovXG4gIHZhcmlhbnQ6IFByb3BUeXBlcy5vbmVPZihbJ2ZpbGxlZCcsICdvdXRsaW5lZCcsICdzdGFuZGFyZCddKVxufSA6IHZvaWQgMDtcbk5hdGl2ZVNlbGVjdC5tdWlOYW1lID0gJ1NlbGVjdCc7XG5leHBvcnQgZGVmYXVsdCBOYXRpdmVTZWxlY3Q7IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgZXhhY3RQcm9wLCB1bnN0YWJsZV91c2VFbmhhbmNlZEVmZmVjdCBhcyB1c2VFbmhhbmNlZEVmZmVjdCB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbi8qKlxuICogTm9Tc3IgcHVycG9zZWx5IHJlbW92ZXMgY29tcG9uZW50cyBmcm9tIHRoZSBzdWJqZWN0IG9mIFNlcnZlciBTaWRlIFJlbmRlcmluZyAoU1NSKS5cbiAqXG4gKiBUaGlzIGNvbXBvbmVudCBjYW4gYmUgdXNlZnVsIGluIGEgdmFyaWV0eSBvZiBzaXR1YXRpb25zOlxuICpcbiAqICogICBFc2NhcGUgaGF0Y2ggZm9yIGJyb2tlbiBkZXBlbmRlbmNpZXMgbm90IHN1cHBvcnRpbmcgU1NSLlxuICogKiAgIEltcHJvdmUgdGhlIHRpbWUtdG8tZmlyc3QgcGFpbnQgb24gdGhlIGNsaWVudCBieSBvbmx5IHJlbmRlcmluZyBhYm92ZSB0aGUgZm9sZC5cbiAqICogICBSZWR1Y2UgdGhlIHJlbmRlcmluZyB0aW1lIG9uIHRoZSBzZXJ2ZXIuXG4gKiAqICAgVW5kZXIgdG9vIGhlYXZ5IHNlcnZlciBsb2FkLCB5b3UgY2FuIHR1cm4gb24gc2VydmljZSBkZWdyYWRhdGlvbi5cbiAqXG4gKiBEZW1vczpcbiAqXG4gKiAtIFtObyBTU1JdKGh0dHBzOi8vbXVpLmNvbS9tYXRlcmlhbC11aS9yZWFjdC1uby1zc3IvKVxuICpcbiAqIEFQSTpcbiAqXG4gKiAtIFtOb1NzciBBUEldKGh0dHBzOi8vbXVpLmNvbS9tYXRlcmlhbC11aS9hcGkvbm8tc3NyLylcbiAqL1xuZnVuY3Rpb24gTm9Tc3IocHJvcHMpIHtcbiAgY29uc3Qge1xuICAgIGNoaWxkcmVuLFxuICAgIGRlZmVyID0gZmFsc2UsXG4gICAgZmFsbGJhY2sgPSBudWxsXG4gIH0gPSBwcm9wcztcbiAgY29uc3QgW21vdW50ZWRTdGF0ZSwgc2V0TW91bnRlZFN0YXRlXSA9IFJlYWN0LnVzZVN0YXRlKGZhbHNlKTtcbiAgdXNlRW5oYW5jZWRFZmZlY3QoKCkgPT4ge1xuICAgIGlmICghZGVmZXIpIHtcbiAgICAgIHNldE1vdW50ZWRTdGF0ZSh0cnVlKTtcbiAgICB9XG4gIH0sIFtkZWZlcl0pO1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChkZWZlcikge1xuICAgICAgc2V0TW91bnRlZFN0YXRlKHRydWUpO1xuICAgIH1cbiAgfSwgW2RlZmVyXSk7XG5cbiAgLy8gV2UgbmVlZCB0aGUgRnJhZ21lbnQgaGVyZSB0byBmb3JjZSByZWFjdC1kb2NnZW4gdG8gcmVjb2duaXNlIE5vU3NyIGFzIGEgY29tcG9uZW50LlxuICByZXR1cm4gLyojX19QVVJFX18qL19qc3goUmVhY3QuRnJhZ21lbnQsIHtcbiAgICBjaGlsZHJlbjogbW91bnRlZFN0YXRlID8gY2hpbGRyZW4gOiBmYWxsYmFja1xuICB9KTtcbn1cbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IE5vU3NyLnByb3BUeXBlcyAvKiByZW1vdmUtcHJvcHR5cGVzICovID0ge1xuICAvLyDilIzilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIAgV2FybmluZyDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJBcbiAgLy8g4pSCIFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucy4g4pSCXG4gIC8vIOKUgiBUbyB1cGRhdGUgdGhlbSwgZWRpdCB0aGUgVHlwZVNjcmlwdCB0eXBlcyBhbmQgcnVuIGBwbnBtIHByb3B0eXBlc2AuIOKUglxuICAvLyDilJTilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJhcbiAgLyoqXG4gICAqIFlvdSBjYW4gd3JhcCBhIG5vZGUuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBjb21wb25lbnQgd2lsbCBub3Qgb25seSBwcmV2ZW50IHNlcnZlci1zaWRlIHJlbmRlcmluZy5cbiAgICogSXQgd2lsbCBhbHNvIGRlZmVyIHRoZSByZW5kZXJpbmcgb2YgdGhlIGNoaWxkcmVuIGludG8gYSBkaWZmZXJlbnQgc2NyZWVuIGZyYW1lLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZGVmZXI6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogVGhlIGZhbGxiYWNrIGNvbnRlbnQgdG8gZGlzcGxheS5cbiAgICogQGRlZmF1bHQgbnVsbFxuICAgKi9cbiAgZmFsbGJhY2s6IFByb3BUeXBlcy5ub2RlXG59IDogdm9pZCAwO1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gIE5vU3NyWydwcm9wVHlwZXMnICsgJyddID0gZXhhY3RQcm9wKE5vU3NyLnByb3BUeXBlcyk7XG59XG5leHBvcnQgZGVmYXVsdCBOb1NzcjsiLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG52YXIgX3NwYW47XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJjaGlsZHJlblwiLCBcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJsYWJlbFwiLCBcIm5vdGNoZWRcIl07XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHN0eWxlZCwgeyByb290U2hvdWxkRm9yd2FyZFByb3AgfSBmcm9tICcuLi9zdHlsZXMvc3R5bGVkJztcbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5jb25zdCBOb3RjaGVkT3V0bGluZVJvb3QgPSBzdHlsZWQoJ2ZpZWxkc2V0Jywge1xuICBzaG91bGRGb3J3YXJkUHJvcDogcm9vdFNob3VsZEZvcndhcmRQcm9wXG59KSh7XG4gIHRleHRBbGlnbjogJ2xlZnQnLFxuICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgYm90dG9tOiAwLFxuICByaWdodDogMCxcbiAgdG9wOiAtNSxcbiAgbGVmdDogMCxcbiAgbWFyZ2luOiAwLFxuICBwYWRkaW5nOiAnMCA4cHgnLFxuICBwb2ludGVyRXZlbnRzOiAnbm9uZScsXG4gIGJvcmRlclJhZGl1czogJ2luaGVyaXQnLFxuICBib3JkZXJTdHlsZTogJ3NvbGlkJyxcbiAgYm9yZGVyV2lkdGg6IDEsXG4gIG92ZXJmbG93OiAnaGlkZGVuJyxcbiAgbWluV2lkdGg6ICcwJSdcbn0pO1xuY29uc3QgTm90Y2hlZE91dGxpbmVMZWdlbmQgPSBzdHlsZWQoJ2xlZ2VuZCcsIHtcbiAgc2hvdWxkRm9yd2FyZFByb3A6IHJvb3RTaG91bGRGb3J3YXJkUHJvcFxufSkoKHtcbiAgb3duZXJTdGF0ZSxcbiAgdGhlbWVcbn0pID0+IF9leHRlbmRzKHtcbiAgZmxvYXQ6ICd1bnNldCcsXG4gIC8vIEZpeCBjb25mbGljdCB3aXRoIGJvb3RzdHJhcFxuICB3aWR0aDogJ2F1dG8nLFxuICAvLyBGaXggY29uZmxpY3Qgd2l0aCBib290c3RyYXBcbiAgb3ZlcmZsb3c6ICdoaWRkZW4nXG59LCAhb3duZXJTdGF0ZS53aXRoTGFiZWwgJiYge1xuICBwYWRkaW5nOiAwLFxuICBsaW5lSGVpZ2h0OiAnMTFweCcsXG4gIC8vIHN5bmMgd2l0aCBgaGVpZ2h0YCBpbiBgbGVnZW5kYCBzdHlsZXNcbiAgdHJhbnNpdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCd3aWR0aCcsIHtcbiAgICBkdXJhdGlvbjogMTUwLFxuICAgIGVhc2luZzogdGhlbWUudHJhbnNpdGlvbnMuZWFzaW5nLmVhc2VPdXRcbiAgfSlcbn0sIG93bmVyU3RhdGUud2l0aExhYmVsICYmIF9leHRlbmRzKHtcbiAgZGlzcGxheTogJ2Jsb2NrJyxcbiAgLy8gRml4IGNvbmZsaWN0IHdpdGggbm9ybWFsaXplLmNzcyBhbmQgc2FuaXRpemUuY3NzXG4gIHBhZGRpbmc6IDAsXG4gIGhlaWdodDogMTEsXG4gIC8vIHN5bmMgd2l0aCBgbGluZUhlaWdodGAgaW4gYGxlZ2VuZGAgc3R5bGVzXG4gIGZvbnRTaXplOiAnMC43NWVtJyxcbiAgdmlzaWJpbGl0eTogJ2hpZGRlbicsXG4gIG1heFdpZHRoOiAwLjAxLFxuICB0cmFuc2l0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoJ21heC13aWR0aCcsIHtcbiAgICBkdXJhdGlvbjogNTAsXG4gICAgZWFzaW5nOiB0aGVtZS50cmFuc2l0aW9ucy5lYXNpbmcuZWFzZU91dFxuICB9KSxcbiAgd2hpdGVTcGFjZTogJ25vd3JhcCcsXG4gICcmID4gc3Bhbic6IHtcbiAgICBwYWRkaW5nTGVmdDogNSxcbiAgICBwYWRkaW5nUmlnaHQ6IDUsXG4gICAgZGlzcGxheTogJ2lubGluZS1ibG9jaycsXG4gICAgb3BhY2l0eTogMCxcbiAgICB2aXNpYmlsaXR5OiAndmlzaWJsZSdcbiAgfVxufSwgb3duZXJTdGF0ZS5ub3RjaGVkICYmIHtcbiAgbWF4V2lkdGg6ICcxMDAlJyxcbiAgdHJhbnNpdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCdtYXgtd2lkdGgnLCB7XG4gICAgZHVyYXRpb246IDEwMCxcbiAgICBlYXNpbmc6IHRoZW1lLnRyYW5zaXRpb25zLmVhc2luZy5lYXNlT3V0LFxuICAgIGRlbGF5OiA1MFxuICB9KVxufSkpKTtcblxuLyoqXG4gKiBAaWdub3JlIC0gaW50ZXJuYWwgY29tcG9uZW50LlxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBOb3RjaGVkT3V0bGluZShwcm9wcykge1xuICBjb25zdCB7XG4gICAgICBjbGFzc05hbWUsXG4gICAgICBsYWJlbCxcbiAgICAgIG5vdGNoZWRcbiAgICB9ID0gcHJvcHMsXG4gICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkKTtcbiAgY29uc3Qgd2l0aExhYmVsID0gbGFiZWwgIT0gbnVsbCAmJiBsYWJlbCAhPT0gJyc7XG4gIGNvbnN0IG93bmVyU3RhdGUgPSBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICBub3RjaGVkLFxuICAgIHdpdGhMYWJlbFxuICB9KTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KE5vdGNoZWRPdXRsaW5lUm9vdCwgX2V4dGVuZHMoe1xuICAgIFwiYXJpYS1oaWRkZW5cIjogdHJ1ZSxcbiAgICBjbGFzc05hbWU6IGNsYXNzTmFtZSxcbiAgICBvd25lclN0YXRlOiBvd25lclN0YXRlXG4gIH0sIG90aGVyLCB7XG4gICAgY2hpbGRyZW46IC8qI19fUFVSRV9fKi9fanN4KE5vdGNoZWRPdXRsaW5lTGVnZW5kLCB7XG4gICAgICBvd25lclN0YXRlOiBvd25lclN0YXRlLFxuICAgICAgY2hpbGRyZW46IHdpdGhMYWJlbCA/IC8qI19fUFVSRV9fKi9fanN4KFwic3BhblwiLCB7XG4gICAgICAgIGNoaWxkcmVuOiBsYWJlbFxuICAgICAgfSkgOiAvLyBub3RyYW5zbGF0ZSBuZWVkZWQgd2hpbGUgR29vZ2xlIFRyYW5zbGF0ZSB3aWxsIG5vdCBmaXggemVyby13aWR0aCBzcGFjZSBpc3N1ZVxuICAgICAgX3NwYW4gfHwgKF9zcGFuID0gLyojX19QVVJFX18qL19qc3goXCJzcGFuXCIsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBcIm5vdHJhbnNsYXRlXCIsXG4gICAgICAgIGNoaWxkcmVuOiBcIlxcdTIwMEJcIlxuICAgICAgfSkpXG4gICAgfSlcbiAgfSkpO1xufVxucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gTm90Y2hlZE91dGxpbmUucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBUaGUgbGFiZWwuXG4gICAqL1xuICBsYWJlbDogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBvdXRsaW5lIGlzIG5vdGNoZWQgdG8gYWNjb21tb2RhdGUgdGhlIGxhYmVsLlxuICAgKi9cbiAgbm90Y2hlZDogUHJvcFR5cGVzLmJvb2wuaXNSZXF1aXJlZCxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHN0eWxlOiBQcm9wVHlwZXMub2JqZWN0XG59IDogdm9pZCAwOyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImNvbXBvbmVudHNcIiwgXCJmdWxsV2lkdGhcIiwgXCJpbnB1dENvbXBvbmVudFwiLCBcImxhYmVsXCIsIFwibXVsdGlsaW5lXCIsIFwibm90Y2hlZFwiLCBcInNsb3RzXCIsIFwidHlwZVwiXTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgcmVmVHlwZSBmcm9tICdAbXVpL3V0aWxzL3JlZlR5cGUnO1xuaW1wb3J0IGNvbXBvc2VDbGFzc2VzIGZyb20gJ0BtdWkvdXRpbHMvY29tcG9zZUNsYXNzZXMnO1xuaW1wb3J0IE5vdGNoZWRPdXRsaW5lIGZyb20gJy4vTm90Y2hlZE91dGxpbmUnO1xuaW1wb3J0IHVzZUZvcm1Db250cm9sIGZyb20gJy4uL0Zvcm1Db250cm9sL3VzZUZvcm1Db250cm9sJztcbmltcG9ydCBmb3JtQ29udHJvbFN0YXRlIGZyb20gJy4uL0Zvcm1Db250cm9sL2Zvcm1Db250cm9sU3RhdGUnO1xuaW1wb3J0IHN0eWxlZCwgeyByb290U2hvdWxkRm9yd2FyZFByb3AgfSBmcm9tICcuLi9zdHlsZXMvc3R5bGVkJztcbmltcG9ydCBvdXRsaW5lZElucHV0Q2xhc3NlcywgeyBnZXRPdXRsaW5lZElucHV0VXRpbGl0eUNsYXNzIH0gZnJvbSAnLi9vdXRsaW5lZElucHV0Q2xhc3Nlcyc7XG5pbXBvcnQgSW5wdXRCYXNlLCB7IHJvb3RPdmVycmlkZXNSZXNvbHZlciBhcyBpbnB1dEJhc2VSb290T3ZlcnJpZGVzUmVzb2x2ZXIsIGlucHV0T3ZlcnJpZGVzUmVzb2x2ZXIgYXMgaW5wdXRCYXNlSW5wdXRPdmVycmlkZXNSZXNvbHZlciwgSW5wdXRCYXNlUm9vdCwgSW5wdXRCYXNlQ29tcG9uZW50IGFzIElucHV0QmFzZUlucHV0IH0gZnJvbSAnLi4vSW5wdXRCYXNlL0lucHV0QmFzZSc7XG5pbXBvcnQgeyB1c2VEZWZhdWx0UHJvcHMgfSBmcm9tICcuLi9EZWZhdWx0UHJvcHNQcm92aWRlcic7XG5pbXBvcnQgeyBqc3hzIGFzIF9qc3hzIH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuY29uc3QgdXNlVXRpbGl0eUNsYXNzZXMgPSBvd25lclN0YXRlID0+IHtcbiAgY29uc3Qge1xuICAgIGNsYXNzZXNcbiAgfSA9IG93bmVyU3RhdGU7XG4gIGNvbnN0IHNsb3RzID0ge1xuICAgIHJvb3Q6IFsncm9vdCddLFxuICAgIG5vdGNoZWRPdXRsaW5lOiBbJ25vdGNoZWRPdXRsaW5lJ10sXG4gICAgaW5wdXQ6IFsnaW5wdXQnXVxuICB9O1xuICBjb25zdCBjb21wb3NlZENsYXNzZXMgPSBjb21wb3NlQ2xhc3NlcyhzbG90cywgZ2V0T3V0bGluZWRJbnB1dFV0aWxpdHlDbGFzcywgY2xhc3Nlcyk7XG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgY2xhc3NlcywgY29tcG9zZWRDbGFzc2VzKTtcbn07XG5jb25zdCBPdXRsaW5lZElucHV0Um9vdCA9IHN0eWxlZChJbnB1dEJhc2VSb290LCB7XG4gIHNob3VsZEZvcndhcmRQcm9wOiBwcm9wID0+IHJvb3RTaG91bGRGb3J3YXJkUHJvcChwcm9wKSB8fCBwcm9wID09PSAnY2xhc3NlcycsXG4gIG5hbWU6ICdNdWlPdXRsaW5lZElucHV0JyxcbiAgc2xvdDogJ1Jvb3QnLFxuICBvdmVycmlkZXNSZXNvbHZlcjogaW5wdXRCYXNlUm9vdE92ZXJyaWRlc1Jlc29sdmVyXG59KSgoe1xuICB0aGVtZSxcbiAgb3duZXJTdGF0ZVxufSkgPT4ge1xuICBjb25zdCBib3JkZXJDb2xvciA9IHRoZW1lLnBhbGV0dGUubW9kZSA9PT0gJ2xpZ2h0JyA/ICdyZ2JhKDAsIDAsIDAsIDAuMjMpJyA6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMjMpJztcbiAgcmV0dXJuIF9leHRlbmRzKHtcbiAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICBib3JkZXJSYWRpdXM6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5zaGFwZS5ib3JkZXJSYWRpdXMsXG4gICAgW2AmOmhvdmVyIC4ke291dGxpbmVkSW5wdXRDbGFzc2VzLm5vdGNoZWRPdXRsaW5lfWBdOiB7XG4gICAgICBib3JkZXJDb2xvcjogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGUudGV4dC5wcmltYXJ5XG4gICAgfSxcbiAgICAvLyBSZXNldCBvbiB0b3VjaCBkZXZpY2VzLCBpdCBkb2Vzbid0IGFkZCBzcGVjaWZpY2l0eVxuICAgICdAbWVkaWEgKGhvdmVyOiBub25lKSc6IHtcbiAgICAgIFtgJjpob3ZlciAuJHtvdXRsaW5lZElucHV0Q2xhc3Nlcy5ub3RjaGVkT3V0bGluZX1gXToge1xuICAgICAgICBib3JkZXJDb2xvcjogdGhlbWUudmFycyA/IGByZ2JhKCR7dGhlbWUudmFycy5wYWxldHRlLmNvbW1vbi5vbkJhY2tncm91bmRDaGFubmVsfSAvIDAuMjMpYCA6IGJvcmRlckNvbG9yXG4gICAgICB9XG4gICAgfSxcbiAgICBbYCYuJHtvdXRsaW5lZElucHV0Q2xhc3Nlcy5mb2N1c2VkfSAuJHtvdXRsaW5lZElucHV0Q2xhc3Nlcy5ub3RjaGVkT3V0bGluZX1gXToge1xuICAgICAgYm9yZGVyQ29sb3I6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlW293bmVyU3RhdGUuY29sb3JdLm1haW4sXG4gICAgICBib3JkZXJXaWR0aDogMlxuICAgIH0sXG4gICAgW2AmLiR7b3V0bGluZWRJbnB1dENsYXNzZXMuZXJyb3J9IC4ke291dGxpbmVkSW5wdXRDbGFzc2VzLm5vdGNoZWRPdXRsaW5lfWBdOiB7XG4gICAgICBib3JkZXJDb2xvcjogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGUuZXJyb3IubWFpblxuICAgIH0sXG4gICAgW2AmLiR7b3V0bGluZWRJbnB1dENsYXNzZXMuZGlzYWJsZWR9IC4ke291dGxpbmVkSW5wdXRDbGFzc2VzLm5vdGNoZWRPdXRsaW5lfWBdOiB7XG4gICAgICBib3JkZXJDb2xvcjogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGUuYWN0aW9uLmRpc2FibGVkXG4gICAgfVxuICB9LCBvd25lclN0YXRlLnN0YXJ0QWRvcm5tZW50ICYmIHtcbiAgICBwYWRkaW5nTGVmdDogMTRcbiAgfSwgb3duZXJTdGF0ZS5lbmRBZG9ybm1lbnQgJiYge1xuICAgIHBhZGRpbmdSaWdodDogMTRcbiAgfSwgb3duZXJTdGF0ZS5tdWx0aWxpbmUgJiYgX2V4dGVuZHMoe1xuICAgIHBhZGRpbmc6ICcxNi41cHggMTRweCdcbiAgfSwgb3duZXJTdGF0ZS5zaXplID09PSAnc21hbGwnICYmIHtcbiAgICBwYWRkaW5nOiAnOC41cHggMTRweCdcbiAgfSkpO1xufSk7XG5jb25zdCBOb3RjaGVkT3V0bGluZVJvb3QgPSBzdHlsZWQoTm90Y2hlZE91dGxpbmUsIHtcbiAgbmFtZTogJ011aU91dGxpbmVkSW5wdXQnLFxuICBzbG90OiAnTm90Y2hlZE91dGxpbmUnLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHN0eWxlcy5ub3RjaGVkT3V0bGluZVxufSkoKHtcbiAgdGhlbWVcbn0pID0+IHtcbiAgY29uc3QgYm9yZGVyQ29sb3IgPSB0aGVtZS5wYWxldHRlLm1vZGUgPT09ICdsaWdodCcgPyAncmdiYSgwLCAwLCAwLCAwLjIzKScgOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjIzKSc7XG4gIHJldHVybiB7XG4gICAgYm9yZGVyQ29sb3I6IHRoZW1lLnZhcnMgPyBgcmdiYSgke3RoZW1lLnZhcnMucGFsZXR0ZS5jb21tb24ub25CYWNrZ3JvdW5kQ2hhbm5lbH0gLyAwLjIzKWAgOiBib3JkZXJDb2xvclxuICB9O1xufSk7XG5jb25zdCBPdXRsaW5lZElucHV0SW5wdXQgPSBzdHlsZWQoSW5wdXRCYXNlSW5wdXQsIHtcbiAgbmFtZTogJ011aU91dGxpbmVkSW5wdXQnLFxuICBzbG90OiAnSW5wdXQnLFxuICBvdmVycmlkZXNSZXNvbHZlcjogaW5wdXRCYXNlSW5wdXRPdmVycmlkZXNSZXNvbHZlclxufSkoKHtcbiAgdGhlbWUsXG4gIG93bmVyU3RhdGVcbn0pID0+IF9leHRlbmRzKHtcbiAgcGFkZGluZzogJzE2LjVweCAxNHB4J1xufSwgIXRoZW1lLnZhcnMgJiYge1xuICAnJjotd2Via2l0LWF1dG9maWxsJzoge1xuICAgIFdlYmtpdEJveFNoYWRvdzogdGhlbWUucGFsZXR0ZS5tb2RlID09PSAnbGlnaHQnID8gbnVsbCA6ICcwIDAgMCAxMDBweCAjMjY2Nzk4IGluc2V0JyxcbiAgICBXZWJraXRUZXh0RmlsbENvbG9yOiB0aGVtZS5wYWxldHRlLm1vZGUgPT09ICdsaWdodCcgPyBudWxsIDogJyNmZmYnLFxuICAgIGNhcmV0Q29sb3I6IHRoZW1lLnBhbGV0dGUubW9kZSA9PT0gJ2xpZ2h0JyA/IG51bGwgOiAnI2ZmZicsXG4gICAgYm9yZGVyUmFkaXVzOiAnaW5oZXJpdCdcbiAgfVxufSwgdGhlbWUudmFycyAmJiB7XG4gICcmOi13ZWJraXQtYXV0b2ZpbGwnOiB7XG4gICAgYm9yZGVyUmFkaXVzOiAnaW5oZXJpdCdcbiAgfSxcbiAgW3RoZW1lLmdldENvbG9yU2NoZW1lU2VsZWN0b3IoJ2RhcmsnKV06IHtcbiAgICAnJjotd2Via2l0LWF1dG9maWxsJzoge1xuICAgICAgV2Via2l0Qm94U2hhZG93OiAnMCAwIDAgMTAwcHggIzI2Njc5OCBpbnNldCcsXG4gICAgICBXZWJraXRUZXh0RmlsbENvbG9yOiAnI2ZmZicsXG4gICAgICBjYXJldENvbG9yOiAnI2ZmZidcbiAgICB9XG4gIH1cbn0sIG93bmVyU3RhdGUuc2l6ZSA9PT0gJ3NtYWxsJyAmJiB7XG4gIHBhZGRpbmc6ICc4LjVweCAxNHB4J1xufSwgb3duZXJTdGF0ZS5tdWx0aWxpbmUgJiYge1xuICBwYWRkaW5nOiAwXG59LCBvd25lclN0YXRlLnN0YXJ0QWRvcm5tZW50ICYmIHtcbiAgcGFkZGluZ0xlZnQ6IDBcbn0sIG93bmVyU3RhdGUuZW5kQWRvcm5tZW50ICYmIHtcbiAgcGFkZGluZ1JpZ2h0OiAwXG59KSk7XG5jb25zdCBPdXRsaW5lZElucHV0ID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gT3V0bGluZWRJbnB1dChpblByb3BzLCByZWYpIHtcbiAgdmFyIF9yZWYsIF9zbG90cyRyb290LCBfcmVmMiwgX3Nsb3RzJGlucHV0LCBfUmVhY3QkRnJhZ21lbnQ7XG4gIGNvbnN0IHByb3BzID0gdXNlRGVmYXVsdFByb3BzKHtcbiAgICBwcm9wczogaW5Qcm9wcyxcbiAgICBuYW1lOiAnTXVpT3V0bGluZWRJbnB1dCdcbiAgfSk7XG4gIGNvbnN0IHtcbiAgICAgIGNvbXBvbmVudHMgPSB7fSxcbiAgICAgIGZ1bGxXaWR0aCA9IGZhbHNlLFxuICAgICAgaW5wdXRDb21wb25lbnQgPSAnaW5wdXQnLFxuICAgICAgbGFiZWwsXG4gICAgICBtdWx0aWxpbmUgPSBmYWxzZSxcbiAgICAgIG5vdGNoZWQsXG4gICAgICBzbG90cyA9IHt9LFxuICAgICAgdHlwZSA9ICd0ZXh0J1xuICAgIH0gPSBwcm9wcyxcbiAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQpO1xuICBjb25zdCBjbGFzc2VzID0gdXNlVXRpbGl0eUNsYXNzZXMocHJvcHMpO1xuICBjb25zdCBtdWlGb3JtQ29udHJvbCA9IHVzZUZvcm1Db250cm9sKCk7XG4gIGNvbnN0IGZjcyA9IGZvcm1Db250cm9sU3RhdGUoe1xuICAgIHByb3BzLFxuICAgIG11aUZvcm1Db250cm9sLFxuICAgIHN0YXRlczogWydjb2xvcicsICdkaXNhYmxlZCcsICdlcnJvcicsICdmb2N1c2VkJywgJ2hpZGRlbkxhYmVsJywgJ3NpemUnLCAncmVxdWlyZWQnXVxuICB9KTtcbiAgY29uc3Qgb3duZXJTdGF0ZSA9IF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgIGNvbG9yOiBmY3MuY29sb3IgfHwgJ3ByaW1hcnknLFxuICAgIGRpc2FibGVkOiBmY3MuZGlzYWJsZWQsXG4gICAgZXJyb3I6IGZjcy5lcnJvcixcbiAgICBmb2N1c2VkOiBmY3MuZm9jdXNlZCxcbiAgICBmb3JtQ29udHJvbDogbXVpRm9ybUNvbnRyb2wsXG4gICAgZnVsbFdpZHRoLFxuICAgIGhpZGRlbkxhYmVsOiBmY3MuaGlkZGVuTGFiZWwsXG4gICAgbXVsdGlsaW5lLFxuICAgIHNpemU6IGZjcy5zaXplLFxuICAgIHR5cGVcbiAgfSk7XG4gIGNvbnN0IFJvb3RTbG90ID0gKF9yZWYgPSAoX3Nsb3RzJHJvb3QgPSBzbG90cy5yb290KSAhPSBudWxsID8gX3Nsb3RzJHJvb3QgOiBjb21wb25lbnRzLlJvb3QpICE9IG51bGwgPyBfcmVmIDogT3V0bGluZWRJbnB1dFJvb3Q7XG4gIGNvbnN0IElucHV0U2xvdCA9IChfcmVmMiA9IChfc2xvdHMkaW5wdXQgPSBzbG90cy5pbnB1dCkgIT0gbnVsbCA/IF9zbG90cyRpbnB1dCA6IGNvbXBvbmVudHMuSW5wdXQpICE9IG51bGwgPyBfcmVmMiA6IE91dGxpbmVkSW5wdXRJbnB1dDtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KElucHV0QmFzZSwgX2V4dGVuZHMoe1xuICAgIHNsb3RzOiB7XG4gICAgICByb290OiBSb290U2xvdCxcbiAgICAgIGlucHV0OiBJbnB1dFNsb3RcbiAgICB9LFxuICAgIHJlbmRlclN1ZmZpeDogc3RhdGUgPT4gLyojX19QVVJFX18qL19qc3goTm90Y2hlZE91dGxpbmVSb290LCB7XG4gICAgICBvd25lclN0YXRlOiBvd25lclN0YXRlLFxuICAgICAgY2xhc3NOYW1lOiBjbGFzc2VzLm5vdGNoZWRPdXRsaW5lLFxuICAgICAgbGFiZWw6IGxhYmVsICE9IG51bGwgJiYgbGFiZWwgIT09ICcnICYmIGZjcy5yZXF1aXJlZCA/IF9SZWFjdCRGcmFnbWVudCB8fCAoX1JlYWN0JEZyYWdtZW50ID0gLyojX19QVVJFX18qL19qc3hzKFJlYWN0LkZyYWdtZW50LCB7XG4gICAgICAgIGNoaWxkcmVuOiBbbGFiZWwsIFwiXFx1MjAwOVwiLCAnKiddXG4gICAgICB9KSkgOiBsYWJlbCxcbiAgICAgIG5vdGNoZWQ6IHR5cGVvZiBub3RjaGVkICE9PSAndW5kZWZpbmVkJyA/IG5vdGNoZWQgOiBCb29sZWFuKHN0YXRlLnN0YXJ0QWRvcm5tZW50IHx8IHN0YXRlLmZpbGxlZCB8fCBzdGF0ZS5mb2N1c2VkKVxuICAgIH0pLFxuICAgIGZ1bGxXaWR0aDogZnVsbFdpZHRoLFxuICAgIGlucHV0Q29tcG9uZW50OiBpbnB1dENvbXBvbmVudCxcbiAgICBtdWx0aWxpbmU6IG11bHRpbGluZSxcbiAgICByZWY6IHJlZixcbiAgICB0eXBlOiB0eXBlXG4gIH0sIG90aGVyLCB7XG4gICAgY2xhc3NlczogX2V4dGVuZHMoe30sIGNsYXNzZXMsIHtcbiAgICAgIG5vdGNoZWRPdXRsaW5lOiBudWxsXG4gICAgfSlcbiAgfSkpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBPdXRsaW5lZElucHV0LnByb3BUeXBlcyAvKiByZW1vdmUtcHJvcHR5cGVzICovID0ge1xuICAvLyDilIzilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIAgV2FybmluZyDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJBcbiAgLy8g4pSCIFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucy4g4pSCXG4gIC8vIOKUgiAgICBUbyB1cGRhdGUgdGhlbSwgZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gYHBucG0gcHJvcHR5cGVzYC4gICAgIOKUglxuICAvLyDilJTilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJhcbiAgLyoqXG4gICAqIFRoaXMgcHJvcCBoZWxwcyB1c2VycyB0byBmaWxsIGZvcm1zIGZhc3RlciwgZXNwZWNpYWxseSBvbiBtb2JpbGUgZGV2aWNlcy5cbiAgICogVGhlIG5hbWUgY2FuIGJlIGNvbmZ1c2luZywgYXMgaXQncyBtb3JlIGxpa2UgYW4gYXV0b2ZpbGwuXG4gICAqIFlvdSBjYW4gbGVhcm4gbW9yZSBhYm91dCBpdCBbZm9sbG93aW5nIHRoZSBzcGVjaWZpY2F0aW9uXShodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9mb3JtLWNvbnRyb2wtaW5mcmFzdHJ1Y3R1cmUuaHRtbCNhdXRvZmlsbCkuXG4gICAqL1xuICBhdXRvQ29tcGxldGU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBgaW5wdXRgIGVsZW1lbnQgaXMgZm9jdXNlZCBkdXJpbmcgdGhlIGZpcnN0IG1vdW50LlxuICAgKi9cbiAgYXV0b0ZvY3VzOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG4gIC8qKlxuICAgKiBUaGUgY29sb3Igb2YgdGhlIGNvbXBvbmVudC5cbiAgICogSXQgc3VwcG9ydHMgYm90aCBkZWZhdWx0IGFuZCBjdXN0b20gdGhlbWUgY29sb3JzLCB3aGljaCBjYW4gYmUgYWRkZWQgYXMgc2hvd24gaW4gdGhlXG4gICAqIFtwYWxldHRlIGN1c3RvbWl6YXRpb24gZ3VpZGVdKGh0dHBzOi8vbXVpLmNvbS9tYXRlcmlhbC11aS9jdXN0b21pemF0aW9uL3BhbGV0dGUvI2N1c3RvbS1jb2xvcnMpLlxuICAgKiBUaGUgcHJvcCBkZWZhdWx0cyB0byB0aGUgdmFsdWUgKGAncHJpbWFyeSdgKSBpbmhlcml0ZWQgZnJvbSB0aGUgcGFyZW50IEZvcm1Db250cm9sIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbG9yOiBQcm9wVHlwZXMgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqLy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ3ByaW1hcnknLCAnc2Vjb25kYXJ5J10pLCBQcm9wVHlwZXMuc3RyaW5nXSksXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50cyB1c2VkIGZvciBlYWNoIHNsb3QgaW5zaWRlLlxuICAgKlxuICAgKiBUaGlzIHByb3AgaXMgYW4gYWxpYXMgZm9yIHRoZSBgc2xvdHNgIHByb3AuXG4gICAqIEl0J3MgcmVjb21tZW5kZWQgdG8gdXNlIHRoZSBgc2xvdHNgIHByb3AgaW5zdGVhZC5cbiAgICpcbiAgICogQGRlZmF1bHQge31cbiAgICovXG4gIGNvbXBvbmVudHM6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgSW5wdXQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcbiAgICBSb290OiBQcm9wVHlwZXMuZWxlbWVudFR5cGVcbiAgfSksXG4gIC8qKlxuICAgKiBUaGUgZGVmYXVsdCB2YWx1ZS4gVXNlIHdoZW4gdGhlIGNvbXBvbmVudCBpcyBub3QgY29udHJvbGxlZC5cbiAgICovXG4gIGRlZmF1bHRWYWx1ZTogUHJvcFR5cGVzLmFueSxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGNvbXBvbmVudCBpcyBkaXNhYmxlZC5cbiAgICogVGhlIHByb3AgZGVmYXVsdHMgdG8gdGhlIHZhbHVlIChgZmFsc2VgKSBpbmhlcml0ZWQgZnJvbSB0aGUgcGFyZW50IEZvcm1Db250cm9sIGNvbXBvbmVudC5cbiAgICovXG4gIGRpc2FibGVkOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIEVuZCBgSW5wdXRBZG9ybm1lbnRgIGZvciB0aGlzIGNvbXBvbmVudC5cbiAgICovXG4gIGVuZEFkb3JubWVudDogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBgaW5wdXRgIHdpbGwgaW5kaWNhdGUgYW4gZXJyb3IuXG4gICAqIFRoZSBwcm9wIGRlZmF1bHRzIHRvIHRoZSB2YWx1ZSAoYGZhbHNlYCkgaW5oZXJpdGVkIGZyb20gdGhlIHBhcmVudCBGb3JtQ29udHJvbCBjb21wb25lbnQuXG4gICAqL1xuICBlcnJvcjogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBgaW5wdXRgIHdpbGwgdGFrZSB1cCB0aGUgZnVsbCB3aWR0aCBvZiBpdHMgY29udGFpbmVyLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZnVsbFdpZHRoOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIFRoZSBpZCBvZiB0aGUgYGlucHV0YCBlbGVtZW50LlxuICAgKi9cbiAgaWQ6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBIVE1MIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqIEBkZWZhdWx0ICdpbnB1dCdcbiAgICovXG4gIGlucHV0Q29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG4gIC8qKlxuICAgKiBbQXR0cmlidXRlc10oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRNTC9FbGVtZW50L2lucHV0I0F0dHJpYnV0ZXMpIGFwcGxpZWQgdG8gdGhlIGBpbnB1dGAgZWxlbWVudC5cbiAgICogQGRlZmF1bHQge31cbiAgICovXG4gIGlucHV0UHJvcHM6IFByb3BUeXBlcy5vYmplY3QsXG4gIC8qKlxuICAgKiBQYXNzIGEgcmVmIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAqL1xuICBpbnB1dFJlZjogcmVmVHlwZSxcbiAgLyoqXG4gICAqIFRoZSBsYWJlbCBvZiB0aGUgYGlucHV0YC4gSXQgaXMgb25seSB1c2VkIGZvciBsYXlvdXQuIFRoZSBhY3R1YWwgbGFiZWxsaW5nXG4gICAqIGlzIGhhbmRsZWQgYnkgYElucHV0TGFiZWxgLlxuICAgKi9cbiAgbGFiZWw6IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogSWYgYGRlbnNlYCwgd2lsbCBhZGp1c3QgdmVydGljYWwgc3BhY2luZy4gVGhpcyBpcyBub3JtYWxseSBvYnRhaW5lZCB2aWEgY29udGV4dCBmcm9tXG4gICAqIEZvcm1Db250cm9sLlxuICAgKiBUaGUgcHJvcCBkZWZhdWx0cyB0byB0aGUgdmFsdWUgKGAnbm9uZSdgKSBpbmhlcml0ZWQgZnJvbSB0aGUgcGFyZW50IEZvcm1Db250cm9sIGNvbXBvbmVudC5cbiAgICovXG4gIG1hcmdpbjogUHJvcFR5cGVzLm9uZU9mKFsnZGVuc2UnLCAnbm9uZSddKSxcbiAgLyoqXG4gICAqIE1heGltdW0gbnVtYmVyIG9mIHJvd3MgdG8gZGlzcGxheSB3aGVuIG11bHRpbGluZSBvcHRpb24gaXMgc2V0IHRvIHRydWUuXG4gICAqL1xuICBtYXhSb3dzOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc3RyaW5nXSksXG4gIC8qKlxuICAgKiBNaW5pbXVtIG51bWJlciBvZiByb3dzIHRvIGRpc3BsYXkgd2hlbiBtdWx0aWxpbmUgb3B0aW9uIGlzIHNldCB0byB0cnVlLlxuICAgKi9cbiAgbWluUm93czogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnN0cmluZ10pLFxuICAvKipcbiAgICogSWYgYHRydWVgLCBhIFtUZXh0YXJlYUF1dG9zaXplXSgvbWF0ZXJpYWwtdWkvcmVhY3QtdGV4dGFyZWEtYXV0b3NpemUvKSBlbGVtZW50IGlzIHJlbmRlcmVkLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgbXVsdGlsaW5lOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIE5hbWUgYXR0cmlidXRlIG9mIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAqL1xuICBuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgb3V0bGluZSBpcyBub3RjaGVkIHRvIGFjY29tbW9kYXRlIHRoZSBsYWJlbC5cbiAgICovXG4gIG5vdGNoZWQ6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgdmFsdWUgaXMgY2hhbmdlZC5cbiAgICpcbiAgICogQHBhcmFtIHtSZWFjdC5DaGFuZ2VFdmVudDxIVE1MVGV4dEFyZWFFbGVtZW50IHwgSFRNTElucHV0RWxlbWVudD59IGV2ZW50IFRoZSBldmVudCBzb3VyY2Ugb2YgdGhlIGNhbGxiYWNrLlxuICAgKiBZb3UgY2FuIHB1bGwgb3V0IHRoZSBuZXcgdmFsdWUgYnkgYWNjZXNzaW5nIGBldmVudC50YXJnZXQudmFsdWVgIChzdHJpbmcpLlxuICAgKi9cbiAgb25DaGFuZ2U6IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogVGhlIHNob3J0IGhpbnQgZGlzcGxheWVkIGluIHRoZSBgaW5wdXRgIGJlZm9yZSB0aGUgdXNlciBlbnRlcnMgYSB2YWx1ZS5cbiAgICovXG4gIHBsYWNlaG9sZGVyOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogSXQgcHJldmVudHMgdGhlIHVzZXIgZnJvbSBjaGFuZ2luZyB0aGUgdmFsdWUgb2YgdGhlIGZpZWxkXG4gICAqIChub3QgZnJvbSBpbnRlcmFjdGluZyB3aXRoIHRoZSBmaWVsZCkuXG4gICAqL1xuICByZWFkT25seTogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBgaW5wdXRgIGVsZW1lbnQgaXMgcmVxdWlyZWQuXG4gICAqIFRoZSBwcm9wIGRlZmF1bHRzIHRvIHRoZSB2YWx1ZSAoYGZhbHNlYCkgaW5oZXJpdGVkIGZyb20gdGhlIHBhcmVudCBGb3JtQ29udHJvbCBjb21wb25lbnQuXG4gICAqL1xuICByZXF1aXJlZDogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBOdW1iZXIgb2Ygcm93cyB0byBkaXNwbGF5IHdoZW4gbXVsdGlsaW5lIG9wdGlvbiBpcyBzZXQgdG8gdHJ1ZS5cbiAgICovXG4gIHJvd3M6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zdHJpbmddKSxcbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnRzIHVzZWQgZm9yIGVhY2ggc2xvdCBpbnNpZGUuXG4gICAqXG4gICAqIFRoaXMgcHJvcCBpcyBhbiBhbGlhcyBmb3IgdGhlIGBjb21wb25lbnRzYCBwcm9wLCB3aGljaCB3aWxsIGJlIGRlcHJlY2F0ZWQgaW4gdGhlIGZ1dHVyZS5cbiAgICpcbiAgICogQGRlZmF1bHQge31cbiAgICovXG4gIHNsb3RzOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGlucHV0OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG4gICAgcm9vdDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlXG4gIH0pLFxuICAvKipcbiAgICogU3RhcnQgYElucHV0QWRvcm5tZW50YCBmb3IgdGhpcyBjb21wb25lbnQuXG4gICAqL1xuICBzdGFydEFkb3JubWVudDogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBUaGUgc3lzdGVtIHByb3AgdGhhdCBhbGxvd3MgZGVmaW5pbmcgc3lzdGVtIG92ZXJyaWRlcyBhcyB3ZWxsIGFzIGFkZGl0aW9uYWwgQ1NTIHN0eWxlcy5cbiAgICovXG4gIHN4OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLmJvb2xdKSksIFByb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSksXG4gIC8qKlxuICAgKiBUeXBlIG9mIHRoZSBgaW5wdXRgIGVsZW1lbnQuIEl0IHNob3VsZCBiZSBbYSB2YWxpZCBIVE1MNSBpbnB1dCB0eXBlXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVE1ML0VsZW1lbnQvaW5wdXQjRm9ybV8lM0NpbnB1dCUzRV90eXBlcykuXG4gICAqIEBkZWZhdWx0ICd0ZXh0J1xuICAgKi9cbiAgdHlwZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIFRoZSB2YWx1ZSBvZiB0aGUgYGlucHV0YCBlbGVtZW50LCByZXF1aXJlZCBmb3IgYSBjb250cm9sbGVkIGNvbXBvbmVudC5cbiAgICovXG4gIHZhbHVlOiBQcm9wVHlwZXMuYW55XG59IDogdm9pZCAwO1xuT3V0bGluZWRJbnB1dC5tdWlOYW1lID0gJ0lucHV0JztcbmV4cG9ydCBkZWZhdWx0IE91dGxpbmVkSW5wdXQ7IiwiaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzc2VzJztcbmltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzJztcbmV4cG9ydCBmdW5jdGlvbiBnZXRQYWdpbmF0aW9uVXRpbGl0eUNsYXNzKHNsb3QpIHtcbiAgcmV0dXJuIGdlbmVyYXRlVXRpbGl0eUNsYXNzKCdNdWlQYWdpbmF0aW9uJywgc2xvdCk7XG59XG5jb25zdCBwYWdpbmF0aW9uQ2xhc3NlcyA9IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMoJ011aVBhZ2luYXRpb24nLCBbJ3Jvb3QnLCAndWwnLCAnb3V0bGluZWQnLCAndGV4dCddKTtcbmV4cG9ydCBkZWZhdWx0IHBhZ2luYXRpb25DbGFzc2VzOyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImJvdW5kYXJ5Q291bnRcIiwgXCJjb21wb25lbnROYW1lXCIsIFwiY291bnRcIiwgXCJkZWZhdWx0UGFnZVwiLCBcImRpc2FibGVkXCIsIFwiaGlkZU5leHRCdXR0b25cIiwgXCJoaWRlUHJldkJ1dHRvblwiLCBcIm9uQ2hhbmdlXCIsIFwicGFnZVwiLCBcInNob3dGaXJzdEJ1dHRvblwiLCBcInNob3dMYXN0QnV0dG9uXCIsIFwic2libGluZ0NvdW50XCJdO1xuaW1wb3J0IHVzZUNvbnRyb2xsZWQgZnJvbSAnQG11aS91dGlscy91c2VDb250cm9sbGVkJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVzZVBhZ2luYXRpb24ocHJvcHMgPSB7fSkge1xuICAvLyBrZWVwIGRlZmF1bHQgdmFsdWVzIGluIHN5bmMgd2l0aCBAZGVmYXVsdCB0YWdzIGluIFBhZ2luYXRpb24ucHJvcFR5cGVzXG4gIGNvbnN0IHtcbiAgICAgIGJvdW5kYXJ5Q291bnQgPSAxLFxuICAgICAgY29tcG9uZW50TmFtZSA9ICd1c2VQYWdpbmF0aW9uJyxcbiAgICAgIGNvdW50ID0gMSxcbiAgICAgIGRlZmF1bHRQYWdlID0gMSxcbiAgICAgIGRpc2FibGVkID0gZmFsc2UsXG4gICAgICBoaWRlTmV4dEJ1dHRvbiA9IGZhbHNlLFxuICAgICAgaGlkZVByZXZCdXR0b24gPSBmYWxzZSxcbiAgICAgIG9uQ2hhbmdlOiBoYW5kbGVDaGFuZ2UsXG4gICAgICBwYWdlOiBwYWdlUHJvcCxcbiAgICAgIHNob3dGaXJzdEJ1dHRvbiA9IGZhbHNlLFxuICAgICAgc2hvd0xhc3RCdXR0b24gPSBmYWxzZSxcbiAgICAgIHNpYmxpbmdDb3VudCA9IDFcbiAgICB9ID0gcHJvcHMsXG4gICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkKTtcbiAgY29uc3QgW3BhZ2UsIHNldFBhZ2VTdGF0ZV0gPSB1c2VDb250cm9sbGVkKHtcbiAgICBjb250cm9sbGVkOiBwYWdlUHJvcCxcbiAgICBkZWZhdWx0OiBkZWZhdWx0UGFnZSxcbiAgICBuYW1lOiBjb21wb25lbnROYW1lLFxuICAgIHN0YXRlOiAncGFnZSdcbiAgfSk7XG4gIGNvbnN0IGhhbmRsZUNsaWNrID0gKGV2ZW50LCB2YWx1ZSkgPT4ge1xuICAgIGlmICghcGFnZVByb3ApIHtcbiAgICAgIHNldFBhZ2VTdGF0ZSh2YWx1ZSk7XG4gICAgfVxuICAgIGlmIChoYW5kbGVDaGFuZ2UpIHtcbiAgICAgIGhhbmRsZUNoYW5nZShldmVudCwgdmFsdWUpO1xuICAgIH1cbiAgfTtcblxuICAvLyBodHRwczovL2Rldi50by9uYW1pcnNhYi9jb21tZW50LzIwNTBcbiAgY29uc3QgcmFuZ2UgPSAoc3RhcnQsIGVuZCkgPT4ge1xuICAgIGNvbnN0IGxlbmd0aCA9IGVuZCAtIHN0YXJ0ICsgMTtcbiAgICByZXR1cm4gQXJyYXkuZnJvbSh7XG4gICAgICBsZW5ndGhcbiAgICB9LCAoXywgaSkgPT4gc3RhcnQgKyBpKTtcbiAgfTtcbiAgY29uc3Qgc3RhcnRQYWdlcyA9IHJhbmdlKDEsIE1hdGgubWluKGJvdW5kYXJ5Q291bnQsIGNvdW50KSk7XG4gIGNvbnN0IGVuZFBhZ2VzID0gcmFuZ2UoTWF0aC5tYXgoY291bnQgLSBib3VuZGFyeUNvdW50ICsgMSwgYm91bmRhcnlDb3VudCArIDEpLCBjb3VudCk7XG4gIGNvbnN0IHNpYmxpbmdzU3RhcnQgPSBNYXRoLm1heChNYXRoLm1pbihcbiAgLy8gTmF0dXJhbCBzdGFydFxuICBwYWdlIC0gc2libGluZ0NvdW50LFxuICAvLyBMb3dlciBib3VuZGFyeSB3aGVuIHBhZ2UgaXMgaGlnaFxuICBjb3VudCAtIGJvdW5kYXJ5Q291bnQgLSBzaWJsaW5nQ291bnQgKiAyIC0gMSksXG4gIC8vIEdyZWF0ZXIgdGhhbiBzdGFydFBhZ2VzXG4gIGJvdW5kYXJ5Q291bnQgKyAyKTtcbiAgY29uc3Qgc2libGluZ3NFbmQgPSBNYXRoLm1pbihNYXRoLm1heChcbiAgLy8gTmF0dXJhbCBlbmRcbiAgcGFnZSArIHNpYmxpbmdDb3VudCxcbiAgLy8gVXBwZXIgYm91bmRhcnkgd2hlbiBwYWdlIGlzIGxvd1xuICBib3VuZGFyeUNvdW50ICsgc2libGluZ0NvdW50ICogMiArIDIpLFxuICAvLyBMZXNzIHRoYW4gZW5kUGFnZXNcbiAgZW5kUGFnZXMubGVuZ3RoID4gMCA/IGVuZFBhZ2VzWzBdIC0gMiA6IGNvdW50IC0gMSk7XG5cbiAgLy8gQmFzaWMgbGlzdCBvZiBpdGVtcyB0byByZW5kZXJcbiAgLy8gZm9yIGV4YW1wbGUgaXRlbUxpc3QgPSBbJ2ZpcnN0JywgJ3ByZXZpb3VzJywgMSwgJ2VsbGlwc2lzJywgNCwgNSwgNiwgJ2VsbGlwc2lzJywgMTAsICduZXh0JywgJ2xhc3QnXVxuICBjb25zdCBpdGVtTGlzdCA9IFsuLi4oc2hvd0ZpcnN0QnV0dG9uID8gWydmaXJzdCddIDogW10pLCAuLi4oaGlkZVByZXZCdXR0b24gPyBbXSA6IFsncHJldmlvdXMnXSksIC4uLnN0YXJ0UGFnZXMsXG4gIC8vIFN0YXJ0IGVsbGlwc2lzXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXN0ZWQtdGVybmFyeVxuICAuLi4oc2libGluZ3NTdGFydCA+IGJvdW5kYXJ5Q291bnQgKyAyID8gWydzdGFydC1lbGxpcHNpcyddIDogYm91bmRhcnlDb3VudCArIDEgPCBjb3VudCAtIGJvdW5kYXJ5Q291bnQgPyBbYm91bmRhcnlDb3VudCArIDFdIDogW10pLFxuICAvLyBTaWJsaW5nIHBhZ2VzXG4gIC4uLnJhbmdlKHNpYmxpbmdzU3RhcnQsIHNpYmxpbmdzRW5kKSxcbiAgLy8gRW5kIGVsbGlwc2lzXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXN0ZWQtdGVybmFyeVxuICAuLi4oc2libGluZ3NFbmQgPCBjb3VudCAtIGJvdW5kYXJ5Q291bnQgLSAxID8gWydlbmQtZWxsaXBzaXMnXSA6IGNvdW50IC0gYm91bmRhcnlDb3VudCA+IGJvdW5kYXJ5Q291bnQgPyBbY291bnQgLSBib3VuZGFyeUNvdW50XSA6IFtdKSwgLi4uZW5kUGFnZXMsIC4uLihoaWRlTmV4dEJ1dHRvbiA/IFtdIDogWyduZXh0J10pLCAuLi4oc2hvd0xhc3RCdXR0b24gPyBbJ2xhc3QnXSA6IFtdKV07XG5cbiAgLy8gTWFwIHRoZSBidXR0b24gdHlwZSB0byBpdHMgcGFnZSBudW1iZXJcbiAgY29uc3QgYnV0dG9uUGFnZSA9IHR5cGUgPT4ge1xuICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgY2FzZSAnZmlyc3QnOlxuICAgICAgICByZXR1cm4gMTtcbiAgICAgIGNhc2UgJ3ByZXZpb3VzJzpcbiAgICAgICAgcmV0dXJuIHBhZ2UgLSAxO1xuICAgICAgY2FzZSAnbmV4dCc6XG4gICAgICAgIHJldHVybiBwYWdlICsgMTtcbiAgICAgIGNhc2UgJ2xhc3QnOlxuICAgICAgICByZXR1cm4gY291bnQ7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH07XG5cbiAgLy8gQ29udmVydCB0aGUgYmFzaWMgaXRlbSBsaXN0IHRvIFBhZ2luYXRpb25JdGVtIHByb3BzIG9iamVjdHNcbiAgY29uc3QgaXRlbXMgPSBpdGVtTGlzdC5tYXAoaXRlbSA9PiB7XG4gICAgcmV0dXJuIHR5cGVvZiBpdGVtID09PSAnbnVtYmVyJyA/IHtcbiAgICAgIG9uQ2xpY2s6IGV2ZW50ID0+IHtcbiAgICAgICAgaGFuZGxlQ2xpY2soZXZlbnQsIGl0ZW0pO1xuICAgICAgfSxcbiAgICAgIHR5cGU6ICdwYWdlJyxcbiAgICAgIHBhZ2U6IGl0ZW0sXG4gICAgICBzZWxlY3RlZDogaXRlbSA9PT0gcGFnZSxcbiAgICAgIGRpc2FibGVkLFxuICAgICAgJ2FyaWEtY3VycmVudCc6IGl0ZW0gPT09IHBhZ2UgPyAndHJ1ZScgOiB1bmRlZmluZWRcbiAgICB9IDoge1xuICAgICAgb25DbGljazogZXZlbnQgPT4ge1xuICAgICAgICBoYW5kbGVDbGljayhldmVudCwgYnV0dG9uUGFnZShpdGVtKSk7XG4gICAgICB9LFxuICAgICAgdHlwZTogaXRlbSxcbiAgICAgIHBhZ2U6IGJ1dHRvblBhZ2UoaXRlbSksXG4gICAgICBzZWxlY3RlZDogZmFsc2UsXG4gICAgICBkaXNhYmxlZDogZGlzYWJsZWQgfHwgaXRlbS5pbmRleE9mKCdlbGxpcHNpcycpID09PSAtMSAmJiAoaXRlbSA9PT0gJ25leHQnIHx8IGl0ZW0gPT09ICdsYXN0JyA/IHBhZ2UgPj0gY291bnQgOiBwYWdlIDw9IDEpXG4gICAgfTtcbiAgfSk7XG4gIHJldHVybiBfZXh0ZW5kcyh7XG4gICAgaXRlbXNcbiAgfSwgb3RoZXIpO1xufSIsImltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3Nlcyc7XG5pbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3MgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzcyc7XG5leHBvcnQgZnVuY3Rpb24gZ2V0UGFnaW5hdGlvbkl0ZW1VdGlsaXR5Q2xhc3Moc2xvdCkge1xuICByZXR1cm4gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoJ011aVBhZ2luYXRpb25JdGVtJywgc2xvdCk7XG59XG5jb25zdCBwYWdpbmF0aW9uSXRlbUNsYXNzZXMgPSBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzKCdNdWlQYWdpbmF0aW9uSXRlbScsIFsncm9vdCcsICdwYWdlJywgJ3NpemVTbWFsbCcsICdzaXplTGFyZ2UnLCAndGV4dCcsICd0ZXh0UHJpbWFyeScsICd0ZXh0U2Vjb25kYXJ5JywgJ291dGxpbmVkJywgJ291dGxpbmVkUHJpbWFyeScsICdvdXRsaW5lZFNlY29uZGFyeScsICdyb3VuZGVkJywgJ2VsbGlwc2lzJywgJ2ZpcnN0TGFzdCcsICdwcmV2aW91c05leHQnLCAnZm9jdXNWaXNpYmxlJywgJ2Rpc2FibGVkJywgJ3NlbGVjdGVkJywgJ2ljb24nLCAnY29sb3JQcmltYXJ5JywgJ2NvbG9yU2Vjb25kYXJ5J10pO1xuZXhwb3J0IGRlZmF1bHQgcGFnaW5hdGlvbkl0ZW1DbGFzc2VzOyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNyZWF0ZVN2Z0ljb24gZnJvbSAnLi4vLi4vdXRpbHMvY3JlYXRlU3ZnSWNvbic7XG5cbi8qKlxuICogQGlnbm9yZSAtIGludGVybmFsIGNvbXBvbmVudC5cbiAqL1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZVN2Z0ljb24oIC8qI19fUFVSRV9fKi9fanN4KFwicGF0aFwiLCB7XG4gIGQ6IFwiTTE4LjQxIDE2LjU5TDEzLjgyIDEybDQuNTktNC41OUwxNyA2bC02IDYgNiA2ek02IDZoMnYxMkg2elwiXG59KSwgJ0ZpcnN0UGFnZScpOyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNyZWF0ZVN2Z0ljb24gZnJvbSAnLi4vLi4vdXRpbHMvY3JlYXRlU3ZnSWNvbic7XG5cbi8qKlxuICogQGlnbm9yZSAtIGludGVybmFsIGNvbXBvbmVudC5cbiAqL1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZVN2Z0ljb24oIC8qI19fUFVSRV9fKi9fanN4KFwicGF0aFwiLCB7XG4gIGQ6IFwiTTUuNTkgNy40MUwxMC4xOCAxMmwtNC41OSA0LjU5TDcgMThsNi02LTYtNnpNMTYgNmgydjEyaC0yelwiXG59KSwgJ0xhc3RQYWdlJyk7IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgY3JlYXRlU3ZnSWNvbiBmcm9tICcuLi8uLi91dGlscy9jcmVhdGVTdmdJY29uJztcblxuLyoqXG4gKiBAaWdub3JlIC0gaW50ZXJuYWwgY29tcG9uZW50LlxuICovXG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuZXhwb3J0IGRlZmF1bHQgY3JlYXRlU3ZnSWNvbiggLyojX19QVVJFX18qL19qc3goXCJwYXRoXCIsIHtcbiAgZDogXCJNMTUuNDEgNy40MUwxNCA2bC02IDYgNiA2IDEuNDEtMS40MUwxMC44MyAxMnpcIlxufSksICdOYXZpZ2F0ZUJlZm9yZScpOyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNyZWF0ZVN2Z0ljb24gZnJvbSAnLi4vLi4vdXRpbHMvY3JlYXRlU3ZnSWNvbic7XG5cbi8qKlxuICogQGlnbm9yZSAtIGludGVybmFsIGNvbXBvbmVudC5cbiAqL1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZVN2Z0ljb24oIC8qI19fUFVSRV9fKi9fanN4KFwicGF0aFwiLCB7XG4gIGQ6IFwiTTEwIDZMOC41OSA3LjQxIDEzLjE3IDEybC00LjU4IDQuNTlMMTAgMThsNi02elwiXG59KSwgJ05hdmlnYXRlTmV4dCcpOyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImNsYXNzTmFtZVwiLCBcImNvbG9yXCIsIFwiY29tcG9uZW50XCIsIFwiY29tcG9uZW50c1wiLCBcImRpc2FibGVkXCIsIFwicGFnZVwiLCBcInNlbGVjdGVkXCIsIFwic2hhcGVcIiwgXCJzaXplXCIsIFwic2xvdHNcIiwgXCJ0eXBlXCIsIFwidmFyaWFudFwiXTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCBjb21wb3NlQ2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2NvbXBvc2VDbGFzc2VzJztcbmltcG9ydCB7IGFscGhhIH0gZnJvbSAnQG11aS9zeXN0ZW0vY29sb3JNYW5pcHVsYXRvcic7XG5pbXBvcnQgeyB1c2VSdGwgfSBmcm9tICdAbXVpL3N5c3RlbS9SdGxQcm92aWRlcic7XG5pbXBvcnQgeyB1c2VEZWZhdWx0UHJvcHMgfSBmcm9tICcuLi9EZWZhdWx0UHJvcHNQcm92aWRlcic7XG5pbXBvcnQgcGFnaW5hdGlvbkl0ZW1DbGFzc2VzLCB7IGdldFBhZ2luYXRpb25JdGVtVXRpbGl0eUNsYXNzIH0gZnJvbSAnLi9wYWdpbmF0aW9uSXRlbUNsYXNzZXMnO1xuaW1wb3J0IEJ1dHRvbkJhc2UgZnJvbSAnLi4vQnV0dG9uQmFzZSc7XG5pbXBvcnQgY2FwaXRhbGl6ZSBmcm9tICcuLi91dGlscy9jYXBpdGFsaXplJztcbmltcG9ydCBGaXJzdFBhZ2VJY29uIGZyb20gJy4uL2ludGVybmFsL3N2Zy1pY29ucy9GaXJzdFBhZ2UnO1xuaW1wb3J0IExhc3RQYWdlSWNvbiBmcm9tICcuLi9pbnRlcm5hbC9zdmctaWNvbnMvTGFzdFBhZ2UnO1xuaW1wb3J0IE5hdmlnYXRlQmVmb3JlSWNvbiBmcm9tICcuLi9pbnRlcm5hbC9zdmctaWNvbnMvTmF2aWdhdGVCZWZvcmUnO1xuaW1wb3J0IE5hdmlnYXRlTmV4dEljb24gZnJvbSAnLi4vaW50ZXJuYWwvc3ZnLWljb25zL05hdmlnYXRlTmV4dCc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJy4uL3N0eWxlcy9zdHlsZWQnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmltcG9ydCB7IGpzeHMgYXMgX2pzeHMgfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmNvbnN0IG92ZXJyaWRlc1Jlc29sdmVyID0gKHByb3BzLCBzdHlsZXMpID0+IHtcbiAgY29uc3Qge1xuICAgIG93bmVyU3RhdGVcbiAgfSA9IHByb3BzO1xuICByZXR1cm4gW3N0eWxlcy5yb290LCBzdHlsZXNbb3duZXJTdGF0ZS52YXJpYW50XSwgc3R5bGVzW2BzaXplJHtjYXBpdGFsaXplKG93bmVyU3RhdGUuc2l6ZSl9YF0sIG93bmVyU3RhdGUudmFyaWFudCA9PT0gJ3RleHQnICYmIHN0eWxlc1tgdGV4dCR7Y2FwaXRhbGl6ZShvd25lclN0YXRlLmNvbG9yKX1gXSwgb3duZXJTdGF0ZS52YXJpYW50ID09PSAnb3V0bGluZWQnICYmIHN0eWxlc1tgb3V0bGluZWQke2NhcGl0YWxpemUob3duZXJTdGF0ZS5jb2xvcil9YF0sIG93bmVyU3RhdGUuc2hhcGUgPT09ICdyb3VuZGVkJyAmJiBzdHlsZXMucm91bmRlZCwgb3duZXJTdGF0ZS50eXBlID09PSAncGFnZScgJiYgc3R5bGVzLnBhZ2UsIChvd25lclN0YXRlLnR5cGUgPT09ICdzdGFydC1lbGxpcHNpcycgfHwgb3duZXJTdGF0ZS50eXBlID09PSAnZW5kLWVsbGlwc2lzJykgJiYgc3R5bGVzLmVsbGlwc2lzLCAob3duZXJTdGF0ZS50eXBlID09PSAncHJldmlvdXMnIHx8IG93bmVyU3RhdGUudHlwZSA9PT0gJ25leHQnKSAmJiBzdHlsZXMucHJldmlvdXNOZXh0LCAob3duZXJTdGF0ZS50eXBlID09PSAnZmlyc3QnIHx8IG93bmVyU3RhdGUudHlwZSA9PT0gJ2xhc3QnKSAmJiBzdHlsZXMuZmlyc3RMYXN0XTtcbn07XG5jb25zdCB1c2VVdGlsaXR5Q2xhc3NlcyA9IG93bmVyU3RhdGUgPT4ge1xuICBjb25zdCB7XG4gICAgY2xhc3NlcyxcbiAgICBjb2xvcixcbiAgICBkaXNhYmxlZCxcbiAgICBzZWxlY3RlZCxcbiAgICBzaXplLFxuICAgIHNoYXBlLFxuICAgIHR5cGUsXG4gICAgdmFyaWFudFxuICB9ID0gb3duZXJTdGF0ZTtcbiAgY29uc3Qgc2xvdHMgPSB7XG4gICAgcm9vdDogWydyb290JywgYHNpemUke2NhcGl0YWxpemUoc2l6ZSl9YCwgdmFyaWFudCwgc2hhcGUsIGNvbG9yICE9PSAnc3RhbmRhcmQnICYmIGBjb2xvciR7Y2FwaXRhbGl6ZShjb2xvcil9YCwgY29sb3IgIT09ICdzdGFuZGFyZCcgJiYgYCR7dmFyaWFudH0ke2NhcGl0YWxpemUoY29sb3IpfWAsIGRpc2FibGVkICYmICdkaXNhYmxlZCcsIHNlbGVjdGVkICYmICdzZWxlY3RlZCcsIHtcbiAgICAgIHBhZ2U6ICdwYWdlJyxcbiAgICAgIGZpcnN0OiAnZmlyc3RMYXN0JyxcbiAgICAgIGxhc3Q6ICdmaXJzdExhc3QnLFxuICAgICAgJ3N0YXJ0LWVsbGlwc2lzJzogJ2VsbGlwc2lzJyxcbiAgICAgICdlbmQtZWxsaXBzaXMnOiAnZWxsaXBzaXMnLFxuICAgICAgcHJldmlvdXM6ICdwcmV2aW91c05leHQnLFxuICAgICAgbmV4dDogJ3ByZXZpb3VzTmV4dCdcbiAgICB9W3R5cGVdXSxcbiAgICBpY29uOiBbJ2ljb24nXVxuICB9O1xuICByZXR1cm4gY29tcG9zZUNsYXNzZXMoc2xvdHMsIGdldFBhZ2luYXRpb25JdGVtVXRpbGl0eUNsYXNzLCBjbGFzc2VzKTtcbn07XG5jb25zdCBQYWdpbmF0aW9uSXRlbUVsbGlwc2lzID0gc3R5bGVkKCdkaXYnLCB7XG4gIG5hbWU6ICdNdWlQYWdpbmF0aW9uSXRlbScsXG4gIHNsb3Q6ICdSb290JyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXJcbn0pKCh7XG4gIHRoZW1lLFxuICBvd25lclN0YXRlXG59KSA9PiBfZXh0ZW5kcyh7fSwgdGhlbWUudHlwb2dyYXBoeS5ib2R5Miwge1xuICBib3JkZXJSYWRpdXM6IDMyIC8gMixcbiAgdGV4dEFsaWduOiAnY2VudGVyJyxcbiAgYm94U2l6aW5nOiAnYm9yZGVyLWJveCcsXG4gIG1pbldpZHRoOiAzMixcbiAgcGFkZGluZzogJzAgNnB4JyxcbiAgbWFyZ2luOiAnMCAzcHgnLFxuICBjb2xvcjogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGUudGV4dC5wcmltYXJ5LFxuICBoZWlnaHQ6ICdhdXRvJyxcbiAgW2AmLiR7cGFnaW5hdGlvbkl0ZW1DbGFzc2VzLmRpc2FibGVkfWBdOiB7XG4gICAgb3BhY2l0eTogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGUuYWN0aW9uLmRpc2FibGVkT3BhY2l0eVxuICB9XG59LCBvd25lclN0YXRlLnNpemUgPT09ICdzbWFsbCcgJiYge1xuICBtaW5XaWR0aDogMjYsXG4gIGJvcmRlclJhZGl1czogMjYgLyAyLFxuICBtYXJnaW46ICcwIDFweCcsXG4gIHBhZGRpbmc6ICcwIDRweCdcbn0sIG93bmVyU3RhdGUuc2l6ZSA9PT0gJ2xhcmdlJyAmJiB7XG4gIG1pbldpZHRoOiA0MCxcbiAgYm9yZGVyUmFkaXVzOiA0MCAvIDIsXG4gIHBhZGRpbmc6ICcwIDEwcHgnLFxuICBmb250U2l6ZTogdGhlbWUudHlwb2dyYXBoeS5weFRvUmVtKDE1KVxufSkpO1xuY29uc3QgUGFnaW5hdGlvbkl0ZW1QYWdlID0gc3R5bGVkKEJ1dHRvbkJhc2UsIHtcbiAgbmFtZTogJ011aVBhZ2luYXRpb25JdGVtJyxcbiAgc2xvdDogJ1Jvb3QnLFxuICBvdmVycmlkZXNSZXNvbHZlclxufSkoKHtcbiAgdGhlbWUsXG4gIG93bmVyU3RhdGVcbn0pID0+IF9leHRlbmRzKHt9LCB0aGVtZS50eXBvZ3JhcGh5LmJvZHkyLCB7XG4gIGJvcmRlclJhZGl1czogMzIgLyAyLFxuICB0ZXh0QWxpZ246ICdjZW50ZXInLFxuICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcbiAgbWluV2lkdGg6IDMyLFxuICBoZWlnaHQ6IDMyLFxuICBwYWRkaW5nOiAnMCA2cHgnLFxuICBtYXJnaW46ICcwIDNweCcsXG4gIGNvbG9yOiAodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZS50ZXh0LnByaW1hcnksXG4gIFtgJi4ke3BhZ2luYXRpb25JdGVtQ2xhc3Nlcy5mb2N1c1Zpc2libGV9YF06IHtcbiAgICBiYWNrZ3JvdW5kQ29sb3I6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlLmFjdGlvbi5mb2N1c1xuICB9LFxuICBbYCYuJHtwYWdpbmF0aW9uSXRlbUNsYXNzZXMuZGlzYWJsZWR9YF06IHtcbiAgICBvcGFjaXR5OiAodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZS5hY3Rpb24uZGlzYWJsZWRPcGFjaXR5XG4gIH0sXG4gIHRyYW5zaXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZShbJ2NvbG9yJywgJ2JhY2tncm91bmQtY29sb3InXSwge1xuICAgIGR1cmF0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5kdXJhdGlvbi5zaG9ydFxuICB9KSxcbiAgJyY6aG92ZXInOiB7XG4gICAgYmFja2dyb3VuZENvbG9yOiAodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZS5hY3Rpb24uaG92ZXIsXG4gICAgLy8gUmVzZXQgb24gdG91Y2ggZGV2aWNlcywgaXQgZG9lc24ndCBhZGQgc3BlY2lmaWNpdHlcbiAgICAnQG1lZGlhIChob3Zlcjogbm9uZSknOiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6ICd0cmFuc3BhcmVudCdcbiAgICB9XG4gIH0sXG4gIFtgJi4ke3BhZ2luYXRpb25JdGVtQ2xhc3Nlcy5zZWxlY3RlZH1gXToge1xuICAgIGJhY2tncm91bmRDb2xvcjogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGUuYWN0aW9uLnNlbGVjdGVkLFxuICAgICcmOmhvdmVyJzoge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS52YXJzID8gYHJnYmEoJHt0aGVtZS52YXJzLnBhbGV0dGUuYWN0aW9uLnNlbGVjdGVkQ2hhbm5lbH0gLyBjYWxjKCR7dGhlbWUudmFycy5wYWxldHRlLmFjdGlvbi5zZWxlY3RlZE9wYWNpdHl9ICsgJHt0aGVtZS52YXJzLnBhbGV0dGUuYWN0aW9uLmhvdmVyT3BhY2l0eX0pKWAgOiBhbHBoYSh0aGVtZS5wYWxldHRlLmFjdGlvbi5zZWxlY3RlZCwgdGhlbWUucGFsZXR0ZS5hY3Rpb24uc2VsZWN0ZWRPcGFjaXR5ICsgdGhlbWUucGFsZXR0ZS5hY3Rpb24uaG92ZXJPcGFjaXR5KSxcbiAgICAgIC8vIFJlc2V0IG9uIHRvdWNoIGRldmljZXMsIGl0IGRvZXNuJ3QgYWRkIHNwZWNpZmljaXR5XG4gICAgICAnQG1lZGlhIChob3Zlcjogbm9uZSknOiB7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGUuYWN0aW9uLnNlbGVjdGVkXG4gICAgICB9XG4gICAgfSxcbiAgICBbYCYuJHtwYWdpbmF0aW9uSXRlbUNsYXNzZXMuZm9jdXNWaXNpYmxlfWBdOiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnZhcnMgPyBgcmdiYSgke3RoZW1lLnZhcnMucGFsZXR0ZS5hY3Rpb24uc2VsZWN0ZWRDaGFubmVsfSAvIGNhbGMoJHt0aGVtZS52YXJzLnBhbGV0dGUuYWN0aW9uLnNlbGVjdGVkT3BhY2l0eX0gKyAke3RoZW1lLnZhcnMucGFsZXR0ZS5hY3Rpb24uZm9jdXNPcGFjaXR5fSkpYCA6IGFscGhhKHRoZW1lLnBhbGV0dGUuYWN0aW9uLnNlbGVjdGVkLCB0aGVtZS5wYWxldHRlLmFjdGlvbi5zZWxlY3RlZE9wYWNpdHkgKyB0aGVtZS5wYWxldHRlLmFjdGlvbi5mb2N1c09wYWNpdHkpXG4gICAgfSxcbiAgICBbYCYuJHtwYWdpbmF0aW9uSXRlbUNsYXNzZXMuZGlzYWJsZWR9YF06IHtcbiAgICAgIG9wYWNpdHk6IDEsXG4gICAgICBjb2xvcjogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGUuYWN0aW9uLmRpc2FibGVkLFxuICAgICAgYmFja2dyb3VuZENvbG9yOiAodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZS5hY3Rpb24uc2VsZWN0ZWRcbiAgICB9XG4gIH1cbn0sIG93bmVyU3RhdGUuc2l6ZSA9PT0gJ3NtYWxsJyAmJiB7XG4gIG1pbldpZHRoOiAyNixcbiAgaGVpZ2h0OiAyNixcbiAgYm9yZGVyUmFkaXVzOiAyNiAvIDIsXG4gIG1hcmdpbjogJzAgMXB4JyxcbiAgcGFkZGluZzogJzAgNHB4J1xufSwgb3duZXJTdGF0ZS5zaXplID09PSAnbGFyZ2UnICYmIHtcbiAgbWluV2lkdGg6IDQwLFxuICBoZWlnaHQ6IDQwLFxuICBib3JkZXJSYWRpdXM6IDQwIC8gMixcbiAgcGFkZGluZzogJzAgMTBweCcsXG4gIGZvbnRTaXplOiB0aGVtZS50eXBvZ3JhcGh5LnB4VG9SZW0oMTUpXG59LCBvd25lclN0YXRlLnNoYXBlID09PSAncm91bmRlZCcgJiYge1xuICBib3JkZXJSYWRpdXM6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5zaGFwZS5ib3JkZXJSYWRpdXNcbn0pLCAoe1xuICB0aGVtZSxcbiAgb3duZXJTdGF0ZVxufSkgPT4gX2V4dGVuZHMoe30sIG93bmVyU3RhdGUudmFyaWFudCA9PT0gJ3RleHQnICYmIHtcbiAgW2AmLiR7cGFnaW5hdGlvbkl0ZW1DbGFzc2VzLnNlbGVjdGVkfWBdOiBfZXh0ZW5kcyh7fSwgb3duZXJTdGF0ZS5jb2xvciAhPT0gJ3N0YW5kYXJkJyAmJiB7XG4gICAgY29sb3I6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlW293bmVyU3RhdGUuY29sb3JdLmNvbnRyYXN0VGV4dCxcbiAgICBiYWNrZ3JvdW5kQ29sb3I6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlW293bmVyU3RhdGUuY29sb3JdLm1haW4sXG4gICAgJyY6aG92ZXInOiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlW293bmVyU3RhdGUuY29sb3JdLmRhcmssXG4gICAgICAvLyBSZXNldCBvbiB0b3VjaCBkZXZpY2VzLCBpdCBkb2Vzbid0IGFkZCBzcGVjaWZpY2l0eVxuICAgICAgJ0BtZWRpYSAoaG92ZXI6IG5vbmUpJzoge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlW293bmVyU3RhdGUuY29sb3JdLm1haW5cbiAgICAgIH1cbiAgICB9LFxuICAgIFtgJi4ke3BhZ2luYXRpb25JdGVtQ2xhc3Nlcy5mb2N1c1Zpc2libGV9YF06IHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGVbb3duZXJTdGF0ZS5jb2xvcl0uZGFya1xuICAgIH1cbiAgfSwge1xuICAgIFtgJi4ke3BhZ2luYXRpb25JdGVtQ2xhc3Nlcy5kaXNhYmxlZH1gXToge1xuICAgICAgY29sb3I6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlLmFjdGlvbi5kaXNhYmxlZFxuICAgIH1cbiAgfSlcbn0sIG93bmVyU3RhdGUudmFyaWFudCA9PT0gJ291dGxpbmVkJyAmJiB7XG4gIGJvcmRlcjogdGhlbWUudmFycyA/IGAxcHggc29saWQgcmdiYSgke3RoZW1lLnZhcnMucGFsZXR0ZS5jb21tb24ub25CYWNrZ3JvdW5kQ2hhbm5lbH0gLyAwLjIzKWAgOiBgMXB4IHNvbGlkICR7dGhlbWUucGFsZXR0ZS5tb2RlID09PSAnbGlnaHQnID8gJ3JnYmEoMCwgMCwgMCwgMC4yMyknIDogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC4yMyknfWAsXG4gIFtgJi4ke3BhZ2luYXRpb25JdGVtQ2xhc3Nlcy5zZWxlY3RlZH1gXTogX2V4dGVuZHMoe30sIG93bmVyU3RhdGUuY29sb3IgIT09ICdzdGFuZGFyZCcgJiYge1xuICAgIGNvbG9yOiAodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZVtvd25lclN0YXRlLmNvbG9yXS5tYWluLFxuICAgIGJvcmRlcjogYDFweCBzb2xpZCAke3RoZW1lLnZhcnMgPyBgcmdiYSgke3RoZW1lLnZhcnMucGFsZXR0ZVtvd25lclN0YXRlLmNvbG9yXS5tYWluQ2hhbm5lbH0gLyAwLjUpYCA6IGFscGhhKHRoZW1lLnBhbGV0dGVbb3duZXJTdGF0ZS5jb2xvcl0ubWFpbiwgMC41KX1gLFxuICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUudmFycyA/IGByZ2JhKCR7dGhlbWUudmFycy5wYWxldHRlW293bmVyU3RhdGUuY29sb3JdLm1haW5DaGFubmVsfSAvICR7dGhlbWUudmFycy5wYWxldHRlLmFjdGlvbi5hY3RpdmF0ZWRPcGFjaXR5fSlgIDogYWxwaGEodGhlbWUucGFsZXR0ZVtvd25lclN0YXRlLmNvbG9yXS5tYWluLCB0aGVtZS5wYWxldHRlLmFjdGlvbi5hY3RpdmF0ZWRPcGFjaXR5KSxcbiAgICAnJjpob3Zlcic6IHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUudmFycyA/IGByZ2JhKCR7dGhlbWUudmFycy5wYWxldHRlW293bmVyU3RhdGUuY29sb3JdLm1haW5DaGFubmVsfSAvIGNhbGMoJHt0aGVtZS52YXJzLnBhbGV0dGUuYWN0aW9uLmFjdGl2YXRlZE9wYWNpdHl9ICsgJHt0aGVtZS52YXJzLnBhbGV0dGUuYWN0aW9uLmZvY3VzT3BhY2l0eX0pKWAgOiBhbHBoYSh0aGVtZS5wYWxldHRlW293bmVyU3RhdGUuY29sb3JdLm1haW4sIHRoZW1lLnBhbGV0dGUuYWN0aW9uLmFjdGl2YXRlZE9wYWNpdHkgKyB0aGVtZS5wYWxldHRlLmFjdGlvbi5mb2N1c09wYWNpdHkpLFxuICAgICAgLy8gUmVzZXQgb24gdG91Y2ggZGV2aWNlcywgaXQgZG9lc24ndCBhZGQgc3BlY2lmaWNpdHlcbiAgICAgICdAbWVkaWEgKGhvdmVyOiBub25lKSc6IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnXG4gICAgICB9XG4gICAgfSxcbiAgICBbYCYuJHtwYWdpbmF0aW9uSXRlbUNsYXNzZXMuZm9jdXNWaXNpYmxlfWBdOiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnZhcnMgPyBgcmdiYSgke3RoZW1lLnZhcnMucGFsZXR0ZVtvd25lclN0YXRlLmNvbG9yXS5tYWluQ2hhbm5lbH0gLyBjYWxjKCR7dGhlbWUudmFycy5wYWxldHRlLmFjdGlvbi5hY3RpdmF0ZWRPcGFjaXR5fSArICR7dGhlbWUudmFycy5wYWxldHRlLmFjdGlvbi5mb2N1c09wYWNpdHl9KSlgIDogYWxwaGEodGhlbWUucGFsZXR0ZVtvd25lclN0YXRlLmNvbG9yXS5tYWluLCB0aGVtZS5wYWxldHRlLmFjdGlvbi5hY3RpdmF0ZWRPcGFjaXR5ICsgdGhlbWUucGFsZXR0ZS5hY3Rpb24uZm9jdXNPcGFjaXR5KVxuICAgIH1cbiAgfSwge1xuICAgIFtgJi4ke3BhZ2luYXRpb25JdGVtQ2xhc3Nlcy5kaXNhYmxlZH1gXToge1xuICAgICAgYm9yZGVyQ29sb3I6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlLmFjdGlvbi5kaXNhYmxlZEJhY2tncm91bmQsXG4gICAgICBjb2xvcjogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGUuYWN0aW9uLmRpc2FibGVkXG4gICAgfVxuICB9KVxufSkpO1xuY29uc3QgUGFnaW5hdGlvbkl0ZW1QYWdlSWNvbiA9IHN0eWxlZCgnZGl2Jywge1xuICBuYW1lOiAnTXVpUGFnaW5hdGlvbkl0ZW0nLFxuICBzbG90OiAnSWNvbicsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4gc3R5bGVzLmljb25cbn0pKCh7XG4gIHRoZW1lLFxuICBvd25lclN0YXRlXG59KSA9PiBfZXh0ZW5kcyh7XG4gIGZvbnRTaXplOiB0aGVtZS50eXBvZ3JhcGh5LnB4VG9SZW0oMjApLFxuICBtYXJnaW46ICcwIC04cHgnXG59LCBvd25lclN0YXRlLnNpemUgPT09ICdzbWFsbCcgJiYge1xuICBmb250U2l6ZTogdGhlbWUudHlwb2dyYXBoeS5weFRvUmVtKDE4KVxufSwgb3duZXJTdGF0ZS5zaXplID09PSAnbGFyZ2UnICYmIHtcbiAgZm9udFNpemU6IHRoZW1lLnR5cG9ncmFwaHkucHhUb1JlbSgyMilcbn0pKTtcbmNvbnN0IFBhZ2luYXRpb25JdGVtID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gUGFnaW5hdGlvbkl0ZW0oaW5Qcm9wcywgcmVmKSB7XG4gIGNvbnN0IHByb3BzID0gdXNlRGVmYXVsdFByb3BzKHtcbiAgICBwcm9wczogaW5Qcm9wcyxcbiAgICBuYW1lOiAnTXVpUGFnaW5hdGlvbkl0ZW0nXG4gIH0pO1xuICBjb25zdCB7XG4gICAgICBjbGFzc05hbWUsXG4gICAgICBjb2xvciA9ICdzdGFuZGFyZCcsXG4gICAgICBjb21wb25lbnQsXG4gICAgICBjb21wb25lbnRzID0ge30sXG4gICAgICBkaXNhYmxlZCA9IGZhbHNlLFxuICAgICAgcGFnZSxcbiAgICAgIHNlbGVjdGVkID0gZmFsc2UsXG4gICAgICBzaGFwZSA9ICdjaXJjdWxhcicsXG4gICAgICBzaXplID0gJ21lZGl1bScsXG4gICAgICBzbG90cyA9IHt9LFxuICAgICAgdHlwZSA9ICdwYWdlJyxcbiAgICAgIHZhcmlhbnQgPSAndGV4dCdcbiAgICB9ID0gcHJvcHMsXG4gICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkKTtcbiAgY29uc3Qgb3duZXJTdGF0ZSA9IF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgIGNvbG9yLFxuICAgIGRpc2FibGVkLFxuICAgIHNlbGVjdGVkLFxuICAgIHNoYXBlLFxuICAgIHNpemUsXG4gICAgdHlwZSxcbiAgICB2YXJpYW50XG4gIH0pO1xuICBjb25zdCBpc1J0bCA9IHVzZVJ0bCgpO1xuICBjb25zdCBjbGFzc2VzID0gdXNlVXRpbGl0eUNsYXNzZXMob3duZXJTdGF0ZSk7XG4gIGNvbnN0IG5vcm1hbGl6ZWRJY29ucyA9IGlzUnRsID8ge1xuICAgIHByZXZpb3VzOiBzbG90cy5uZXh0IHx8IGNvbXBvbmVudHMubmV4dCB8fCBOYXZpZ2F0ZU5leHRJY29uLFxuICAgIG5leHQ6IHNsb3RzLnByZXZpb3VzIHx8IGNvbXBvbmVudHMucHJldmlvdXMgfHwgTmF2aWdhdGVCZWZvcmVJY29uLFxuICAgIGxhc3Q6IHNsb3RzLmZpcnN0IHx8IGNvbXBvbmVudHMuZmlyc3QgfHwgRmlyc3RQYWdlSWNvbixcbiAgICBmaXJzdDogc2xvdHMubGFzdCB8fCBjb21wb25lbnRzLmxhc3QgfHwgTGFzdFBhZ2VJY29uXG4gIH0gOiB7XG4gICAgcHJldmlvdXM6IHNsb3RzLnByZXZpb3VzIHx8IGNvbXBvbmVudHMucHJldmlvdXMgfHwgTmF2aWdhdGVCZWZvcmVJY29uLFxuICAgIG5leHQ6IHNsb3RzLm5leHQgfHwgY29tcG9uZW50cy5uZXh0IHx8IE5hdmlnYXRlTmV4dEljb24sXG4gICAgZmlyc3Q6IHNsb3RzLmZpcnN0IHx8IGNvbXBvbmVudHMuZmlyc3QgfHwgRmlyc3RQYWdlSWNvbixcbiAgICBsYXN0OiBzbG90cy5sYXN0IHx8IGNvbXBvbmVudHMubGFzdCB8fCBMYXN0UGFnZUljb25cbiAgfTtcbiAgY29uc3QgSWNvbiA9IG5vcm1hbGl6ZWRJY29uc1t0eXBlXTtcbiAgcmV0dXJuIHR5cGUgPT09ICdzdGFydC1lbGxpcHNpcycgfHwgdHlwZSA9PT0gJ2VuZC1lbGxpcHNpcycgPyAvKiNfX1BVUkVfXyovX2pzeChQYWdpbmF0aW9uSXRlbUVsbGlwc2lzLCB7XG4gICAgcmVmOiByZWYsXG4gICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZSxcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWUpLFxuICAgIGNoaWxkcmVuOiBcIlxcdTIwMjZcIlxuICB9KSA6IC8qI19fUFVSRV9fKi9fanN4cyhQYWdpbmF0aW9uSXRlbVBhZ2UsIF9leHRlbmRzKHtcbiAgICByZWY6IHJlZixcbiAgICBvd25lclN0YXRlOiBvd25lclN0YXRlLFxuICAgIGNvbXBvbmVudDogY29tcG9uZW50LFxuICAgIGRpc2FibGVkOiBkaXNhYmxlZCxcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWUpXG4gIH0sIG90aGVyLCB7XG4gICAgY2hpbGRyZW46IFt0eXBlID09PSAncGFnZScgJiYgcGFnZSwgSWNvbiA/IC8qI19fUFVSRV9fKi9fanN4KFBhZ2luYXRpb25JdGVtUGFnZUljb24sIHtcbiAgICAgIGFzOiBJY29uLFxuICAgICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZSxcbiAgICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5pY29uXG4gICAgfSkgOiBudWxsXVxuICB9KSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFBhZ2luYXRpb25JdGVtLnByb3BUeXBlcyAvKiByZW1vdmUtcHJvcHR5cGVzICovID0ge1xuICAvLyDilIzilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIAgV2FybmluZyDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJBcbiAgLy8g4pSCIFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucy4g4pSCXG4gIC8vIOKUgiAgICBUbyB1cGRhdGUgdGhlbSwgZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gYHBucG0gcHJvcHR5cGVzYC4gICAgIOKUglxuICAvLyDilJTilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJhcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBUaGUgYWN0aXZlIGNvbG9yLlxuICAgKiBJdCBzdXBwb3J0cyBib3RoIGRlZmF1bHQgYW5kIGN1c3RvbSB0aGVtZSBjb2xvcnMsIHdoaWNoIGNhbiBiZSBhZGRlZCBhcyBzaG93biBpbiB0aGVcbiAgICogW3BhbGV0dGUgY3VzdG9taXphdGlvbiBndWlkZV0oaHR0cHM6Ly9tdWkuY29tL21hdGVyaWFsLXVpL2N1c3RvbWl6YXRpb24vcGFsZXR0ZS8jY3VzdG9tLWNvbG9ycykuXG4gICAqIEBkZWZhdWx0ICdzdGFuZGFyZCdcbiAgICovXG4gIGNvbG9yOiBQcm9wVHlwZXMgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqLy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ3ByaW1hcnknLCAnc2Vjb25kYXJ5JywgJ3N0YW5kYXJkJ10pLCBQcm9wVHlwZXMuc3RyaW5nXSksXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBIVE1MIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBjb21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnRzIHVzZWQgZm9yIGVhY2ggc2xvdCBpbnNpZGUuXG4gICAqXG4gICAqIFRoaXMgcHJvcCBpcyBhbiBhbGlhcyBmb3IgdGhlIGBzbG90c2AgcHJvcC5cbiAgICogSXQncyByZWNvbW1lbmRlZCB0byB1c2UgdGhlIGBzbG90c2AgcHJvcCBpbnN0ZWFkLlxuICAgKlxuICAgKiBAZGVmYXVsdCB7fVxuICAgKi9cbiAgY29tcG9uZW50czogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBmaXJzdDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuICAgIGxhc3Q6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcbiAgICBuZXh0OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG4gICAgcHJldmlvdXM6IFByb3BUeXBlcy5lbGVtZW50VHlwZVxuICB9KSxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGNvbXBvbmVudCBpcyBkaXNhYmxlZC5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRpc2FibGVkOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIFRoZSBjdXJyZW50IHBhZ2UgbnVtYmVyLlxuICAgKi9cbiAgcGFnZTogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAgdGhlIHBhZ2luYXRpb24gaXRlbSBpcyBzZWxlY3RlZC5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIHNlbGVjdGVkOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIFRoZSBzaGFwZSBvZiB0aGUgcGFnaW5hdGlvbiBpdGVtLlxuICAgKiBAZGVmYXVsdCAnY2lyY3VsYXInXG4gICAqL1xuICBzaGFwZTogUHJvcFR5cGVzLm9uZU9mKFsnY2lyY3VsYXInLCAncm91bmRlZCddKSxcbiAgLyoqXG4gICAqIFRoZSBzaXplIG9mIHRoZSBjb21wb25lbnQuXG4gICAqIEBkZWZhdWx0ICdtZWRpdW0nXG4gICAqL1xuICBzaXplOiBQcm9wVHlwZXMgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqLy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ3NtYWxsJywgJ21lZGl1bScsICdsYXJnZSddKSwgUHJvcFR5cGVzLnN0cmluZ10pLFxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudHMgdXNlZCBmb3IgZWFjaCBzbG90IGluc2lkZS5cbiAgICpcbiAgICogVGhpcyBwcm9wIGlzIGFuIGFsaWFzIGZvciB0aGUgYGNvbXBvbmVudHNgIHByb3AsIHdoaWNoIHdpbGwgYmUgZGVwcmVjYXRlZCBpbiB0aGUgZnV0dXJlLlxuICAgKlxuICAgKiBAZGVmYXVsdCB7fVxuICAgKi9cbiAgc2xvdHM6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgZmlyc3Q6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcbiAgICBsYXN0OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG4gICAgbmV4dDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuICAgIHByZXZpb3VzOiBQcm9wVHlwZXMuZWxlbWVudFR5cGVcbiAgfSksXG4gIC8qKlxuICAgKiBUaGUgc3lzdGVtIHByb3AgdGhhdCBhbGxvd3MgZGVmaW5pbmcgc3lzdGVtIG92ZXJyaWRlcyBhcyB3ZWxsIGFzIGFkZGl0aW9uYWwgQ1NTIHN0eWxlcy5cbiAgICovXG4gIHN4OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLmJvb2xdKSksIFByb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSksXG4gIC8qKlxuICAgKiBUaGUgdHlwZSBvZiBwYWdpbmF0aW9uIGl0ZW0uXG4gICAqIEBkZWZhdWx0ICdwYWdlJ1xuICAgKi9cbiAgdHlwZTogUHJvcFR5cGVzLm9uZU9mKFsnZW5kLWVsbGlwc2lzJywgJ2ZpcnN0JywgJ2xhc3QnLCAnbmV4dCcsICdwYWdlJywgJ3ByZXZpb3VzJywgJ3N0YXJ0LWVsbGlwc2lzJ10pLFxuICAvKipcbiAgICogVGhlIHZhcmlhbnQgdG8gdXNlLlxuICAgKiBAZGVmYXVsdCAndGV4dCdcbiAgICovXG4gIHZhcmlhbnQ6IFByb3BUeXBlcyAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsnb3V0bGluZWQnLCAndGV4dCddKSwgUHJvcFR5cGVzLnN0cmluZ10pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgUGFnaW5hdGlvbkl0ZW07IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiYm91bmRhcnlDb3VudFwiLCBcImNsYXNzTmFtZVwiLCBcImNvbG9yXCIsIFwiY291bnRcIiwgXCJkZWZhdWx0UGFnZVwiLCBcImRpc2FibGVkXCIsIFwiZ2V0SXRlbUFyaWFMYWJlbFwiLCBcImhpZGVOZXh0QnV0dG9uXCIsIFwiaGlkZVByZXZCdXR0b25cIiwgXCJvbkNoYW5nZVwiLCBcInBhZ2VcIiwgXCJyZW5kZXJJdGVtXCIsIFwic2hhcGVcIiwgXCJzaG93Rmlyc3RCdXR0b25cIiwgXCJzaG93TGFzdEJ1dHRvblwiLCBcInNpYmxpbmdDb3VudFwiLCBcInNpemVcIiwgXCJ2YXJpYW50XCJdO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IGNvbXBvc2VDbGFzc2VzIGZyb20gJ0BtdWkvdXRpbHMvY29tcG9zZUNsYXNzZXMnO1xuaW1wb3J0IGludGVnZXJQcm9wVHlwZSBmcm9tICdAbXVpL3V0aWxzL2ludGVnZXJQcm9wVHlwZSc7XG5pbXBvcnQgeyB1c2VEZWZhdWx0UHJvcHMgfSBmcm9tICcuLi9EZWZhdWx0UHJvcHNQcm92aWRlcic7XG5pbXBvcnQgeyBnZXRQYWdpbmF0aW9uVXRpbGl0eUNsYXNzIH0gZnJvbSAnLi9wYWdpbmF0aW9uQ2xhc3Nlcyc7XG5pbXBvcnQgdXNlUGFnaW5hdGlvbiBmcm9tICcuLi91c2VQYWdpbmF0aW9uJztcbmltcG9ydCBQYWdpbmF0aW9uSXRlbSBmcm9tICcuLi9QYWdpbmF0aW9uSXRlbSc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJy4uL3N0eWxlcy9zdHlsZWQnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmNvbnN0IHVzZVV0aWxpdHlDbGFzc2VzID0gb3duZXJTdGF0ZSA9PiB7XG4gIGNvbnN0IHtcbiAgICBjbGFzc2VzLFxuICAgIHZhcmlhbnRcbiAgfSA9IG93bmVyU3RhdGU7XG4gIGNvbnN0IHNsb3RzID0ge1xuICAgIHJvb3Q6IFsncm9vdCcsIHZhcmlhbnRdLFxuICAgIHVsOiBbJ3VsJ11cbiAgfTtcbiAgcmV0dXJuIGNvbXBvc2VDbGFzc2VzKHNsb3RzLCBnZXRQYWdpbmF0aW9uVXRpbGl0eUNsYXNzLCBjbGFzc2VzKTtcbn07XG5jb25zdCBQYWdpbmF0aW9uUm9vdCA9IHN0eWxlZCgnbmF2Jywge1xuICBuYW1lOiAnTXVpUGFnaW5hdGlvbicsXG4gIHNsb3Q6ICdSb290JyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgb3duZXJTdGF0ZVxuICAgIH0gPSBwcm9wcztcbiAgICByZXR1cm4gW3N0eWxlcy5yb290LCBzdHlsZXNbb3duZXJTdGF0ZS52YXJpYW50XV07XG4gIH1cbn0pKHt9KTtcbmNvbnN0IFBhZ2luYXRpb25VbCA9IHN0eWxlZCgndWwnLCB7XG4gIG5hbWU6ICdNdWlQYWdpbmF0aW9uJyxcbiAgc2xvdDogJ1VsJyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiBzdHlsZXMudWxcbn0pKHtcbiAgZGlzcGxheTogJ2ZsZXgnLFxuICBmbGV4V3JhcDogJ3dyYXAnLFxuICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgcGFkZGluZzogMCxcbiAgbWFyZ2luOiAwLFxuICBsaXN0U3R5bGU6ICdub25lJ1xufSk7XG5mdW5jdGlvbiBkZWZhdWx0R2V0QXJpYUxhYmVsKHR5cGUsIHBhZ2UsIHNlbGVjdGVkKSB7XG4gIGlmICh0eXBlID09PSAncGFnZScpIHtcbiAgICByZXR1cm4gYCR7c2VsZWN0ZWQgPyAnJyA6ICdHbyB0byAnfXBhZ2UgJHtwYWdlfWA7XG4gIH1cbiAgcmV0dXJuIGBHbyB0byAke3R5cGV9IHBhZ2VgO1xufVxuY29uc3QgUGFnaW5hdGlvbiA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIFBhZ2luYXRpb24oaW5Qcm9wcywgcmVmKSB7XG4gIGNvbnN0IHByb3BzID0gdXNlRGVmYXVsdFByb3BzKHtcbiAgICBwcm9wczogaW5Qcm9wcyxcbiAgICBuYW1lOiAnTXVpUGFnaW5hdGlvbidcbiAgfSk7XG4gIGNvbnN0IHtcbiAgICAgIGJvdW5kYXJ5Q291bnQgPSAxLFxuICAgICAgY2xhc3NOYW1lLFxuICAgICAgY29sb3IgPSAnc3RhbmRhcmQnLFxuICAgICAgY291bnQgPSAxLFxuICAgICAgZGVmYXVsdFBhZ2UgPSAxLFxuICAgICAgZGlzYWJsZWQgPSBmYWxzZSxcbiAgICAgIGdldEl0ZW1BcmlhTGFiZWwgPSBkZWZhdWx0R2V0QXJpYUxhYmVsLFxuICAgICAgaGlkZU5leHRCdXR0b24gPSBmYWxzZSxcbiAgICAgIGhpZGVQcmV2QnV0dG9uID0gZmFsc2UsXG4gICAgICByZW5kZXJJdGVtID0gaXRlbSA9PiAvKiNfX1BVUkVfXyovX2pzeChQYWdpbmF0aW9uSXRlbSwgX2V4dGVuZHMoe30sIGl0ZW0pKSxcbiAgICAgIHNoYXBlID0gJ2NpcmN1bGFyJyxcbiAgICAgIHNob3dGaXJzdEJ1dHRvbiA9IGZhbHNlLFxuICAgICAgc2hvd0xhc3RCdXR0b24gPSBmYWxzZSxcbiAgICAgIHNpYmxpbmdDb3VudCA9IDEsXG4gICAgICBzaXplID0gJ21lZGl1bScsXG4gICAgICB2YXJpYW50ID0gJ3RleHQnXG4gICAgfSA9IHByb3BzLFxuICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIF9leGNsdWRlZCk7XG4gIGNvbnN0IHtcbiAgICBpdGVtc1xuICB9ID0gdXNlUGFnaW5hdGlvbihfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICBjb21wb25lbnROYW1lOiAnUGFnaW5hdGlvbidcbiAgfSkpO1xuICBjb25zdCBvd25lclN0YXRlID0gX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgYm91bmRhcnlDb3VudCxcbiAgICBjb2xvcixcbiAgICBjb3VudCxcbiAgICBkZWZhdWx0UGFnZSxcbiAgICBkaXNhYmxlZCxcbiAgICBnZXRJdGVtQXJpYUxhYmVsLFxuICAgIGhpZGVOZXh0QnV0dG9uLFxuICAgIGhpZGVQcmV2QnV0dG9uLFxuICAgIHJlbmRlckl0ZW0sXG4gICAgc2hhcGUsXG4gICAgc2hvd0ZpcnN0QnV0dG9uLFxuICAgIHNob3dMYXN0QnV0dG9uLFxuICAgIHNpYmxpbmdDb3VudCxcbiAgICBzaXplLFxuICAgIHZhcmlhbnRcbiAgfSk7XG4gIGNvbnN0IGNsYXNzZXMgPSB1c2VVdGlsaXR5Q2xhc3Nlcyhvd25lclN0YXRlKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KFBhZ2luYXRpb25Sb290LCBfZXh0ZW5kcyh7XG4gICAgXCJhcmlhLWxhYmVsXCI6IFwicGFnaW5hdGlvbiBuYXZpZ2F0aW9uXCIsXG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lKSxcbiAgICBvd25lclN0YXRlOiBvd25lclN0YXRlLFxuICAgIHJlZjogcmVmXG4gIH0sIG90aGVyLCB7XG4gICAgY2hpbGRyZW46IC8qI19fUFVSRV9fKi9fanN4KFBhZ2luYXRpb25VbCwge1xuICAgICAgY2xhc3NOYW1lOiBjbGFzc2VzLnVsLFxuICAgICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZSxcbiAgICAgIGNoaWxkcmVuOiBpdGVtcy5tYXAoKGl0ZW0sIGluZGV4KSA9PiAvKiNfX1BVUkVfXyovX2pzeChcImxpXCIsIHtcbiAgICAgICAgY2hpbGRyZW46IHJlbmRlckl0ZW0oX2V4dGVuZHMoe30sIGl0ZW0sIHtcbiAgICAgICAgICBjb2xvcixcbiAgICAgICAgICAnYXJpYS1sYWJlbCc6IGdldEl0ZW1BcmlhTGFiZWwoaXRlbS50eXBlLCBpdGVtLnBhZ2UsIGl0ZW0uc2VsZWN0ZWQpLFxuICAgICAgICAgIHNoYXBlLFxuICAgICAgICAgIHNpemUsXG4gICAgICAgICAgdmFyaWFudFxuICAgICAgICB9KSlcbiAgICAgIH0sIGluZGV4KSlcbiAgICB9KVxuICB9KSk7XG59KTtcblxuLy8gQGRlZmF1bHQgdGFncyBzeW5jZWQgd2l0aCBkZWZhdWx0IHZhbHVlcyBmcm9tIHVzZVBhZ2luYXRpb25cblxucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gUGFnaW5hdGlvbi5wcm9wVHlwZXMgLyogcmVtb3ZlLXByb3B0eXBlcyAqLyA9IHtcbiAgLy8g4pSM4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAIFdhcm5pbmcg4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSQXG4gIC8vIOKUgiBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMuIOKUglxuICAvLyDilIIgICAgVG8gdXBkYXRlIHRoZW0sIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIGBwbnBtIHByb3B0eXBlc2AuICAgICDilIJcbiAgLy8g4pSU4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSYXG4gIC8qKlxuICAgKiBOdW1iZXIgb2YgYWx3YXlzIHZpc2libGUgcGFnZXMgYXQgdGhlIGJlZ2lubmluZyBhbmQgZW5kLlxuICAgKiBAZGVmYXVsdCAxXG4gICAqL1xuICBib3VuZGFyeUNvdW50OiBpbnRlZ2VyUHJvcFR5cGUsXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogVGhlIGFjdGl2ZSBjb2xvci5cbiAgICogSXQgc3VwcG9ydHMgYm90aCBkZWZhdWx0IGFuZCBjdXN0b20gdGhlbWUgY29sb3JzLCB3aGljaCBjYW4gYmUgYWRkZWQgYXMgc2hvd24gaW4gdGhlXG4gICAqIFtwYWxldHRlIGN1c3RvbWl6YXRpb24gZ3VpZGVdKGh0dHBzOi8vbXVpLmNvbS9tYXRlcmlhbC11aS9jdXN0b21pemF0aW9uL3BhbGV0dGUvI2N1c3RvbS1jb2xvcnMpLlxuICAgKiBAZGVmYXVsdCAnc3RhbmRhcmQnXG4gICAqL1xuICBjb2xvcjogUHJvcFR5cGVzIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi8ub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydwcmltYXJ5JywgJ3NlY29uZGFyeScsICdzdGFuZGFyZCddKSwgUHJvcFR5cGVzLnN0cmluZ10pLFxuICAvKipcbiAgICogVGhlIHRvdGFsIG51bWJlciBvZiBwYWdlcy5cbiAgICogQGRlZmF1bHQgMVxuICAgKi9cbiAgY291bnQ6IGludGVnZXJQcm9wVHlwZSxcbiAgLyoqXG4gICAqIFRoZSBwYWdlIHNlbGVjdGVkIGJ5IGRlZmF1bHQgd2hlbiB0aGUgY29tcG9uZW50IGlzIHVuY29udHJvbGxlZC5cbiAgICogQGRlZmF1bHQgMVxuICAgKi9cbiAgZGVmYXVsdFBhZ2U6IGludGVnZXJQcm9wVHlwZSxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGNvbXBvbmVudCBpcyBkaXNhYmxlZC5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRpc2FibGVkOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIEFjY2VwdHMgYSBmdW5jdGlvbiB3aGljaCByZXR1cm5zIGEgc3RyaW5nIHZhbHVlIHRoYXQgcHJvdmlkZXMgYSB1c2VyLWZyaWVuZGx5IG5hbWUgZm9yIHRoZSBjdXJyZW50IHBhZ2UuXG4gICAqIFRoaXMgaXMgaW1wb3J0YW50IGZvciBzY3JlZW4gcmVhZGVyIHVzZXJzLlxuICAgKlxuICAgKiBGb3IgbG9jYWxpemF0aW9uIHB1cnBvc2VzLCB5b3UgY2FuIHVzZSB0aGUgcHJvdmlkZWQgW3RyYW5zbGF0aW9uc10oL21hdGVyaWFsLXVpL2d1aWRlcy9sb2NhbGl6YXRpb24vKS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgVGhlIGxpbmsgb3IgYnV0dG9uIHR5cGUgdG8gZm9ybWF0ICgncGFnZScgfCAnZmlyc3QnIHwgJ2xhc3QnIHwgJ25leHQnIHwgJ3ByZXZpb3VzJyB8ICdzdGFydC1lbGxpcHNpcycgfCAnZW5kLWVsbGlwc2lzJykuIERlZmF1bHRzIHRvICdwYWdlJy5cbiAgICogQHBhcmFtIHtudW1iZXJ9IHBhZ2UgVGhlIHBhZ2UgbnVtYmVyIHRvIGZvcm1hdC5cbiAgICogQHBhcmFtIHtib29sfSBzZWxlY3RlZCBJZiB0cnVlLCB0aGUgY3VycmVudCBwYWdlIGlzIHNlbGVjdGVkLlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgKi9cbiAgZ2V0SXRlbUFyaWFMYWJlbDogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIGhpZGUgdGhlIG5leHQtcGFnZSBidXR0b24uXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBoaWRlTmV4dEJ1dHRvbjogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIGhpZGUgdGhlIHByZXZpb3VzLXBhZ2UgYnV0dG9uLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgaGlkZVByZXZCdXR0b246IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgcGFnZSBpcyBjaGFuZ2VkLlxuICAgKlxuICAgKiBAcGFyYW0ge1JlYWN0LkNoYW5nZUV2ZW50PHVua25vd24+fSBldmVudCBUaGUgZXZlbnQgc291cmNlIG9mIHRoZSBjYWxsYmFjay5cbiAgICogQHBhcmFtIHtudW1iZXJ9IHBhZ2UgVGhlIHBhZ2Ugc2VsZWN0ZWQuXG4gICAqL1xuICBvbkNoYW5nZTogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBUaGUgY3VycmVudCBwYWdlLiBVbmxpa2UgYFRhYmxlUGFnaW5hdGlvbmAsIHdoaWNoIHN0YXJ0cyBudW1iZXJpbmcgZnJvbSBgMGAsIHRoaXMgcGFnaW5hdGlvbiBzdGFydHMgZnJvbSBgMWAuXG4gICAqL1xuICBwYWdlOiBpbnRlZ2VyUHJvcFR5cGUsXG4gIC8qKlxuICAgKiBSZW5kZXIgdGhlIGl0ZW0uXG4gICAqIEBwYXJhbSB7UGFnaW5hdGlvblJlbmRlckl0ZW1QYXJhbXN9IHBhcmFtcyBUaGUgcHJvcHMgdG8gc3ByZWFkIG9uIGEgUGFnaW5hdGlvbkl0ZW0uXG4gICAqIEByZXR1cm5zIHtSZWFjdE5vZGV9XG4gICAqIEBkZWZhdWx0IChpdGVtKSA9PiA8UGFnaW5hdGlvbkl0ZW0gey4uLml0ZW19IC8+XG4gICAqL1xuICByZW5kZXJJdGVtOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIFRoZSBzaGFwZSBvZiB0aGUgcGFnaW5hdGlvbiBpdGVtcy5cbiAgICogQGRlZmF1bHQgJ2NpcmN1bGFyJ1xuICAgKi9cbiAgc2hhcGU6IFByb3BUeXBlcy5vbmVPZihbJ2NpcmN1bGFyJywgJ3JvdW5kZWQnXSksXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHNob3cgdGhlIGZpcnN0LXBhZ2UgYnV0dG9uLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgc2hvd0ZpcnN0QnV0dG9uOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgc2hvdyB0aGUgbGFzdC1wYWdlIGJ1dHRvbi5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIHNob3dMYXN0QnV0dG9uOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIE51bWJlciBvZiBhbHdheXMgdmlzaWJsZSBwYWdlcyBiZWZvcmUgYW5kIGFmdGVyIHRoZSBjdXJyZW50IHBhZ2UuXG4gICAqIEBkZWZhdWx0IDFcbiAgICovXG4gIHNpYmxpbmdDb3VudDogaW50ZWdlclByb3BUeXBlLFxuICAvKipcbiAgICogVGhlIHNpemUgb2YgdGhlIGNvbXBvbmVudC5cbiAgICogQGRlZmF1bHQgJ21lZGl1bSdcbiAgICovXG4gIHNpemU6IFByb3BUeXBlcyAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsnc21hbGwnLCAnbWVkaXVtJywgJ2xhcmdlJ10pLCBQcm9wVHlwZXMuc3RyaW5nXSksXG4gIC8qKlxuICAgKiBUaGUgc3lzdGVtIHByb3AgdGhhdCBhbGxvd3MgZGVmaW5pbmcgc3lzdGVtIG92ZXJyaWRlcyBhcyB3ZWxsIGFzIGFkZGl0aW9uYWwgQ1NTIHN0eWxlcy5cbiAgICovXG4gIHN4OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLmJvb2xdKSksIFByb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSksXG4gIC8qKlxuICAgKiBUaGUgdmFyaWFudCB0byB1c2UuXG4gICAqIEBkZWZhdWx0ICd0ZXh0J1xuICAgKi9cbiAgdmFyaWFudDogUHJvcFR5cGVzIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi8ub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydvdXRsaW5lZCcsICd0ZXh0J10pLCBQcm9wVHlwZXMuc3RyaW5nXSlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCBQYWdpbmF0aW9uOyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNyZWF0ZVN2Z0ljb24gZnJvbSAnLi4vLi4vdXRpbHMvY3JlYXRlU3ZnSWNvbic7XG5cbi8qKlxuICogQGlnbm9yZSAtIGludGVybmFsIGNvbXBvbmVudC5cbiAqL1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZVN2Z0ljb24oIC8qI19fUFVSRV9fKi9fanN4KFwicGF0aFwiLCB7XG4gIGQ6IFwiTTEyIDJDNi40OCAyIDIgNi40OCAyIDEyczQuNDggMTAgMTAgMTAgMTAtNC40OCAxMC0xMFMxNy41MiAyIDEyIDJ6bTAgMThjLTQuNDIgMC04LTMuNTgtOC04czMuNTgtOCA4LTggOCAzLjU4IDggOC0zLjU4IDgtOCA4elwiXG59KSwgJ1JhZGlvQnV0dG9uVW5jaGVja2VkJyk7IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgY3JlYXRlU3ZnSWNvbiBmcm9tICcuLi8uLi91dGlscy9jcmVhdGVTdmdJY29uJztcblxuLyoqXG4gKiBAaWdub3JlIC0gaW50ZXJuYWwgY29tcG9uZW50LlxuICovXG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuZXhwb3J0IGRlZmF1bHQgY3JlYXRlU3ZnSWNvbiggLyojX19QVVJFX18qL19qc3goXCJwYXRoXCIsIHtcbiAgZDogXCJNOC40NjUgOC40NjVDOS4zNyA3LjU2IDEwLjYyIDcgMTIgN0MxNC43NiA3IDE3IDkuMjQgMTcgMTJDMTcgMTMuMzggMTYuNDQgMTQuNjMgMTUuNTM1IDE1LjUzNUMxNC42MyAxNi40NCAxMy4zOCAxNyAxMiAxN0M5LjI0IDE3IDcgMTQuNzYgNyAxMkM3IDEwLjYyIDcuNTYgOS4zNyA4LjQ2NSA4LjQ2NVpcIlxufSksICdSYWRpb0J1dHRvbkNoZWNrZWQnKTsiLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSYWRpb0J1dHRvblVuY2hlY2tlZEljb24gZnJvbSAnLi4vaW50ZXJuYWwvc3ZnLWljb25zL1JhZGlvQnV0dG9uVW5jaGVja2VkJztcbmltcG9ydCBSYWRpb0J1dHRvbkNoZWNrZWRJY29uIGZyb20gJy4uL2ludGVybmFsL3N2Zy1pY29ucy9SYWRpb0J1dHRvbkNoZWNrZWQnO1xuaW1wb3J0IHN0eWxlZCwgeyByb290U2hvdWxkRm9yd2FyZFByb3AgfSBmcm9tICcuLi9zdHlsZXMvc3R5bGVkJztcbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5pbXBvcnQgeyBqc3hzIGFzIF9qc3hzIH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5jb25zdCBSYWRpb0J1dHRvbkljb25Sb290ID0gc3R5bGVkKCdzcGFuJywge1xuICBzaG91bGRGb3J3YXJkUHJvcDogcm9vdFNob3VsZEZvcndhcmRQcm9wXG59KSh7XG4gIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICBkaXNwbGF5OiAnZmxleCdcbn0pO1xuY29uc3QgUmFkaW9CdXR0b25JY29uQmFja2dyb3VuZCA9IHN0eWxlZChSYWRpb0J1dHRvblVuY2hlY2tlZEljb24pKHtcbiAgLy8gU2NhbGUgYXBwbGllZCB0byBwcmV2ZW50IGRvdCBtaXNhbGlnbm1lbnQgaW4gU2FmYXJpXG4gIHRyYW5zZm9ybTogJ3NjYWxlKDEpJ1xufSk7XG5jb25zdCBSYWRpb0J1dHRvbkljb25Eb3QgPSBzdHlsZWQoUmFkaW9CdXR0b25DaGVja2VkSWNvbikoKHtcbiAgdGhlbWUsXG4gIG93bmVyU3RhdGVcbn0pID0+IF9leHRlbmRzKHtcbiAgbGVmdDogMCxcbiAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gIHRyYW5zZm9ybTogJ3NjYWxlKDApJyxcbiAgdHJhbnNpdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCd0cmFuc2Zvcm0nLCB7XG4gICAgZWFzaW5nOiB0aGVtZS50cmFuc2l0aW9ucy5lYXNpbmcuZWFzZUluLFxuICAgIGR1cmF0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5kdXJhdGlvbi5zaG9ydGVzdFxuICB9KVxufSwgb3duZXJTdGF0ZS5jaGVja2VkICYmIHtcbiAgdHJhbnNmb3JtOiAnc2NhbGUoMSknLFxuICB0cmFuc2l0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoJ3RyYW5zZm9ybScsIHtcbiAgICBlYXNpbmc6IHRoZW1lLnRyYW5zaXRpb25zLmVhc2luZy5lYXNlT3V0LFxuICAgIGR1cmF0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5kdXJhdGlvbi5zaG9ydGVzdFxuICB9KVxufSkpO1xuXG4vKipcbiAqIEBpZ25vcmUgLSBpbnRlcm5hbCBjb21wb25lbnQuXG4gKi9cbmZ1bmN0aW9uIFJhZGlvQnV0dG9uSWNvbihwcm9wcykge1xuICBjb25zdCB7XG4gICAgY2hlY2tlZCA9IGZhbHNlLFxuICAgIGNsYXNzZXMgPSB7fSxcbiAgICBmb250U2l6ZVxuICB9ID0gcHJvcHM7XG4gIGNvbnN0IG93bmVyU3RhdGUgPSBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICBjaGVja2VkXG4gIH0pO1xuICByZXR1cm4gLyojX19QVVJFX18qL19qc3hzKFJhZGlvQnV0dG9uSWNvblJvb3QsIHtcbiAgICBjbGFzc05hbWU6IGNsYXNzZXMucm9vdCxcbiAgICBvd25lclN0YXRlOiBvd25lclN0YXRlLFxuICAgIGNoaWxkcmVuOiBbLyojX19QVVJFX18qL19qc3goUmFkaW9CdXR0b25JY29uQmFja2dyb3VuZCwge1xuICAgICAgZm9udFNpemU6IGZvbnRTaXplLFxuICAgICAgY2xhc3NOYW1lOiBjbGFzc2VzLmJhY2tncm91bmQsXG4gICAgICBvd25lclN0YXRlOiBvd25lclN0YXRlXG4gICAgfSksIC8qI19fUFVSRV9fKi9fanN4KFJhZGlvQnV0dG9uSWNvbkRvdCwge1xuICAgICAgZm9udFNpemU6IGZvbnRTaXplLFxuICAgICAgY2xhc3NOYW1lOiBjbGFzc2VzLmRvdCxcbiAgICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGVcbiAgICB9KV1cbiAgfSk7XG59XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBSYWRpb0J1dHRvbkljb24ucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgY29tcG9uZW50IGlzIGNoZWNrZWQuXG4gICAqL1xuICBjaGVja2VkOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG4gIC8qKlxuICAgKiBUaGUgc2l6ZSBvZiB0aGUgY29tcG9uZW50LlxuICAgKiBgc21hbGxgIGlzIGVxdWl2YWxlbnQgdG8gdGhlIGRlbnNlIHJhZGlvIHN0eWxpbmcuXG4gICAqL1xuICBmb250U2l6ZTogUHJvcFR5cGVzLm9uZU9mKFsnc21hbGwnLCAnbWVkaXVtJ10pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgUmFkaW9CdXR0b25JY29uOyIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0Jztcbi8qKlxuICogQGlnbm9yZSAtIGludGVybmFsIGNvbXBvbmVudC5cbiAqL1xuY29uc3QgUmFkaW9Hcm91cENvbnRleHQgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlQ29udGV4dCh1bmRlZmluZWQpO1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgUmFkaW9Hcm91cENvbnRleHQuZGlzcGxheU5hbWUgPSAnUmFkaW9Hcm91cENvbnRleHQnO1xufVxuZXhwb3J0IGRlZmF1bHQgUmFkaW9Hcm91cENvbnRleHQ7IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUmFkaW9Hcm91cENvbnRleHQgZnJvbSAnLi9SYWRpb0dyb3VwQ29udGV4dCc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1c2VSYWRpb0dyb3VwKCkge1xuICByZXR1cm4gUmVhY3QudXNlQ29udGV4dChSYWRpb0dyb3VwQ29udGV4dCk7XG59IiwiaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzc2VzJztcbmltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzJztcbmV4cG9ydCBmdW5jdGlvbiBnZXRSYWRpb1V0aWxpdHlDbGFzcyhzbG90KSB7XG4gIHJldHVybiBnZW5lcmF0ZVV0aWxpdHlDbGFzcygnTXVpUmFkaW8nLCBzbG90KTtcbn1cbmNvbnN0IHJhZGlvQ2xhc3NlcyA9IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMoJ011aVJhZGlvJywgWydyb290JywgJ2NoZWNrZWQnLCAnZGlzYWJsZWQnLCAnY29sb3JQcmltYXJ5JywgJ2NvbG9yU2Vjb25kYXJ5JywgJ3NpemVTbWFsbCddKTtcbmV4cG9ydCBkZWZhdWx0IHJhZGlvQ2xhc3NlczsiLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJjaGVja2VkXCIsIFwiY2hlY2tlZEljb25cIiwgXCJjb2xvclwiLCBcImljb25cIiwgXCJuYW1lXCIsIFwib25DaGFuZ2VcIiwgXCJzaXplXCIsIFwiY2xhc3NOYW1lXCJdO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHJlZlR5cGUgZnJvbSAnQG11aS91dGlscy9yZWZUeXBlJztcbmltcG9ydCBjb21wb3NlQ2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2NvbXBvc2VDbGFzc2VzJztcbmltcG9ydCB7IGFscGhhIH0gZnJvbSAnQG11aS9zeXN0ZW0vY29sb3JNYW5pcHVsYXRvcic7XG5pbXBvcnQgU3dpdGNoQmFzZSBmcm9tICcuLi9pbnRlcm5hbC9Td2l0Y2hCYXNlJztcbmltcG9ydCB7IHVzZURlZmF1bHRQcm9wcyB9IGZyb20gJy4uL0RlZmF1bHRQcm9wc1Byb3ZpZGVyJztcbmltcG9ydCBSYWRpb0J1dHRvbkljb24gZnJvbSAnLi9SYWRpb0J1dHRvbkljb24nO1xuaW1wb3J0IGNhcGl0YWxpemUgZnJvbSAnLi4vdXRpbHMvY2FwaXRhbGl6ZSc7XG5pbXBvcnQgY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uIGZyb20gJy4uL3V0aWxzL2NyZWF0ZUNoYWluZWRGdW5jdGlvbic7XG5pbXBvcnQgdXNlUmFkaW9Hcm91cCBmcm9tICcuLi9SYWRpb0dyb3VwL3VzZVJhZGlvR3JvdXAnO1xuaW1wb3J0IHJhZGlvQ2xhc3NlcywgeyBnZXRSYWRpb1V0aWxpdHlDbGFzcyB9IGZyb20gJy4vcmFkaW9DbGFzc2VzJztcbmltcG9ydCBzdHlsZWQsIHsgcm9vdFNob3VsZEZvcndhcmRQcm9wIH0gZnJvbSAnLi4vc3R5bGVzL3N0eWxlZCc7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuY29uc3QgdXNlVXRpbGl0eUNsYXNzZXMgPSBvd25lclN0YXRlID0+IHtcbiAgY29uc3Qge1xuICAgIGNsYXNzZXMsXG4gICAgY29sb3IsXG4gICAgc2l6ZVxuICB9ID0gb3duZXJTdGF0ZTtcbiAgY29uc3Qgc2xvdHMgPSB7XG4gICAgcm9vdDogWydyb290JywgYGNvbG9yJHtjYXBpdGFsaXplKGNvbG9yKX1gLCBzaXplICE9PSAnbWVkaXVtJyAmJiBgc2l6ZSR7Y2FwaXRhbGl6ZShzaXplKX1gXVxuICB9O1xuICByZXR1cm4gX2V4dGVuZHMoe30sIGNsYXNzZXMsIGNvbXBvc2VDbGFzc2VzKHNsb3RzLCBnZXRSYWRpb1V0aWxpdHlDbGFzcywgY2xhc3NlcykpO1xufTtcbmNvbnN0IFJhZGlvUm9vdCA9IHN0eWxlZChTd2l0Y2hCYXNlLCB7XG4gIHNob3VsZEZvcndhcmRQcm9wOiBwcm9wID0+IHJvb3RTaG91bGRGb3J3YXJkUHJvcChwcm9wKSB8fCBwcm9wID09PSAnY2xhc3NlcycsXG4gIG5hbWU6ICdNdWlSYWRpbycsXG4gIHNsb3Q6ICdSb290JyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgb3duZXJTdGF0ZVxuICAgIH0gPSBwcm9wcztcbiAgICByZXR1cm4gW3N0eWxlcy5yb290LCBvd25lclN0YXRlLnNpemUgIT09ICdtZWRpdW0nICYmIHN0eWxlc1tgc2l6ZSR7Y2FwaXRhbGl6ZShvd25lclN0YXRlLnNpemUpfWBdLCBzdHlsZXNbYGNvbG9yJHtjYXBpdGFsaXplKG93bmVyU3RhdGUuY29sb3IpfWBdXTtcbiAgfVxufSkoKHtcbiAgdGhlbWUsXG4gIG93bmVyU3RhdGVcbn0pID0+IF9leHRlbmRzKHtcbiAgY29sb3I6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlLnRleHQuc2Vjb25kYXJ5XG59LCAhb3duZXJTdGF0ZS5kaXNhYmxlUmlwcGxlICYmIHtcbiAgJyY6aG92ZXInOiB7XG4gICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS52YXJzID8gYHJnYmEoJHtvd25lclN0YXRlLmNvbG9yID09PSAnZGVmYXVsdCcgPyB0aGVtZS52YXJzLnBhbGV0dGUuYWN0aW9uLmFjdGl2ZUNoYW5uZWwgOiB0aGVtZS52YXJzLnBhbGV0dGVbb3duZXJTdGF0ZS5jb2xvcl0ubWFpbkNoYW5uZWx9IC8gJHt0aGVtZS52YXJzLnBhbGV0dGUuYWN0aW9uLmhvdmVyT3BhY2l0eX0pYCA6IGFscGhhKG93bmVyU3RhdGUuY29sb3IgPT09ICdkZWZhdWx0JyA/IHRoZW1lLnBhbGV0dGUuYWN0aW9uLmFjdGl2ZSA6IHRoZW1lLnBhbGV0dGVbb3duZXJTdGF0ZS5jb2xvcl0ubWFpbiwgdGhlbWUucGFsZXR0ZS5hY3Rpb24uaG92ZXJPcGFjaXR5KSxcbiAgICAvLyBSZXNldCBvbiB0b3VjaCBkZXZpY2VzLCBpdCBkb2Vzbid0IGFkZCBzcGVjaWZpY2l0eVxuICAgICdAbWVkaWEgKGhvdmVyOiBub25lKSc6IHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogJ3RyYW5zcGFyZW50J1xuICAgIH1cbiAgfVxufSwgb3duZXJTdGF0ZS5jb2xvciAhPT0gJ2RlZmF1bHQnICYmIHtcbiAgW2AmLiR7cmFkaW9DbGFzc2VzLmNoZWNrZWR9YF06IHtcbiAgICBjb2xvcjogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGVbb3duZXJTdGF0ZS5jb2xvcl0ubWFpblxuICB9XG59LCB7XG4gIFtgJi4ke3JhZGlvQ2xhc3Nlcy5kaXNhYmxlZH1gXToge1xuICAgIGNvbG9yOiAodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZS5hY3Rpb24uZGlzYWJsZWRcbiAgfVxufSkpO1xuZnVuY3Rpb24gYXJlRXF1YWxWYWx1ZXMoYSwgYikge1xuICBpZiAodHlwZW9mIGIgPT09ICdvYmplY3QnICYmIGIgIT09IG51bGwpIHtcbiAgICByZXR1cm4gYSA9PT0gYjtcbiAgfVxuXG4gIC8vIFRoZSB2YWx1ZSBjb3VsZCBiZSBhIG51bWJlciwgdGhlIERPTSB3aWxsIHN0cmluZ2lmeSBpdCBhbnl3YXkuXG4gIHJldHVybiBTdHJpbmcoYSkgPT09IFN0cmluZyhiKTtcbn1cbmNvbnN0IGRlZmF1bHRDaGVja2VkSWNvbiA9IC8qI19fUFVSRV9fKi9fanN4KFJhZGlvQnV0dG9uSWNvbiwge1xuICBjaGVja2VkOiB0cnVlXG59KTtcbmNvbnN0IGRlZmF1bHRJY29uID0gLyojX19QVVJFX18qL19qc3goUmFkaW9CdXR0b25JY29uLCB7fSk7XG5jb25zdCBSYWRpbyA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIFJhZGlvKGluUHJvcHMsIHJlZikge1xuICB2YXIgX2RlZmF1bHRJY29uJHByb3BzJGZvLCBfZGVmYXVsdENoZWNrZWRJY29uJHA7XG4gIGNvbnN0IHByb3BzID0gdXNlRGVmYXVsdFByb3BzKHtcbiAgICBwcm9wczogaW5Qcm9wcyxcbiAgICBuYW1lOiAnTXVpUmFkaW8nXG4gIH0pO1xuICBjb25zdCB7XG4gICAgICBjaGVja2VkOiBjaGVja2VkUHJvcCxcbiAgICAgIGNoZWNrZWRJY29uID0gZGVmYXVsdENoZWNrZWRJY29uLFxuICAgICAgY29sb3IgPSAncHJpbWFyeScsXG4gICAgICBpY29uID0gZGVmYXVsdEljb24sXG4gICAgICBuYW1lOiBuYW1lUHJvcCxcbiAgICAgIG9uQ2hhbmdlOiBvbkNoYW5nZVByb3AsXG4gICAgICBzaXplID0gJ21lZGl1bScsXG4gICAgICBjbGFzc05hbWVcbiAgICB9ID0gcHJvcHMsXG4gICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkKTtcbiAgY29uc3Qgb3duZXJTdGF0ZSA9IF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgIGNvbG9yLFxuICAgIHNpemVcbiAgfSk7XG4gIGNvbnN0IGNsYXNzZXMgPSB1c2VVdGlsaXR5Q2xhc3Nlcyhvd25lclN0YXRlKTtcbiAgY29uc3QgcmFkaW9Hcm91cCA9IHVzZVJhZGlvR3JvdXAoKTtcbiAgbGV0IGNoZWNrZWQgPSBjaGVja2VkUHJvcDtcbiAgY29uc3Qgb25DaGFuZ2UgPSBjcmVhdGVDaGFpbmVkRnVuY3Rpb24ob25DaGFuZ2VQcm9wLCByYWRpb0dyb3VwICYmIHJhZGlvR3JvdXAub25DaGFuZ2UpO1xuICBsZXQgbmFtZSA9IG5hbWVQcm9wO1xuICBpZiAocmFkaW9Hcm91cCkge1xuICAgIGlmICh0eXBlb2YgY2hlY2tlZCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNoZWNrZWQgPSBhcmVFcXVhbFZhbHVlcyhyYWRpb0dyb3VwLnZhbHVlLCBwcm9wcy52YWx1ZSk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgbmFtZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIG5hbWUgPSByYWRpb0dyb3VwLm5hbWU7XG4gICAgfVxuICB9XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeChSYWRpb1Jvb3QsIF9leHRlbmRzKHtcbiAgICB0eXBlOiBcInJhZGlvXCIsXG4gICAgaWNvbjogLyojX19QVVJFX18qL1JlYWN0LmNsb25lRWxlbWVudChpY29uLCB7XG4gICAgICBmb250U2l6ZTogKF9kZWZhdWx0SWNvbiRwcm9wcyRmbyA9IGRlZmF1bHRJY29uLnByb3BzLmZvbnRTaXplKSAhPSBudWxsID8gX2RlZmF1bHRJY29uJHByb3BzJGZvIDogc2l6ZVxuICAgIH0pLFxuICAgIGNoZWNrZWRJY29uOiAvKiNfX1BVUkVfXyovUmVhY3QuY2xvbmVFbGVtZW50KGNoZWNrZWRJY29uLCB7XG4gICAgICBmb250U2l6ZTogKF9kZWZhdWx0Q2hlY2tlZEljb24kcCA9IGRlZmF1bHRDaGVja2VkSWNvbi5wcm9wcy5mb250U2l6ZSkgIT0gbnVsbCA/IF9kZWZhdWx0Q2hlY2tlZEljb24kcCA6IHNpemVcbiAgICB9KSxcbiAgICBvd25lclN0YXRlOiBvd25lclN0YXRlLFxuICAgIGNsYXNzZXM6IGNsYXNzZXMsXG4gICAgbmFtZTogbmFtZSxcbiAgICBjaGVja2VkOiBjaGVja2VkLFxuICAgIG9uQ2hhbmdlOiBvbkNoYW5nZSxcbiAgICByZWY6IHJlZixcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWUpXG4gIH0sIG90aGVyKSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFJhZGlvLnByb3BUeXBlcyAvKiByZW1vdmUtcHJvcHR5cGVzICovID0ge1xuICAvLyDilIzilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIAgV2FybmluZyDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJBcbiAgLy8g4pSCIFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucy4g4pSCXG4gIC8vIOKUgiAgICBUbyB1cGRhdGUgdGhlbSwgZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gYHBucG0gcHJvcHR5cGVzYC4gICAgIOKUglxuICAvLyDilJTilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJhcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGNvbXBvbmVudCBpcyBjaGVja2VkLlxuICAgKi9cbiAgY2hlY2tlZDogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBUaGUgaWNvbiB0byBkaXNwbGF5IHdoZW4gdGhlIGNvbXBvbmVudCBpcyBjaGVja2VkLlxuICAgKiBAZGVmYXVsdCA8UmFkaW9CdXR0b25JY29uIGNoZWNrZWQgLz5cbiAgICovXG4gIGNoZWNrZWRJY29uOiBQcm9wVHlwZXMubm9kZSxcbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBUaGUgY29sb3Igb2YgdGhlIGNvbXBvbmVudC5cbiAgICogSXQgc3VwcG9ydHMgYm90aCBkZWZhdWx0IGFuZCBjdXN0b20gdGhlbWUgY29sb3JzLCB3aGljaCBjYW4gYmUgYWRkZWQgYXMgc2hvd24gaW4gdGhlXG4gICAqIFtwYWxldHRlIGN1c3RvbWl6YXRpb24gZ3VpZGVdKGh0dHBzOi8vbXVpLmNvbS9tYXRlcmlhbC11aS9jdXN0b21pemF0aW9uL3BhbGV0dGUvI2N1c3RvbS1jb2xvcnMpLlxuICAgKiBAZGVmYXVsdCAncHJpbWFyeSdcbiAgICovXG4gIGNvbG9yOiBQcm9wVHlwZXMgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqLy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ2RlZmF1bHQnLCAncHJpbWFyeScsICdzZWNvbmRhcnknLCAnZXJyb3InLCAnaW5mbycsICdzdWNjZXNzJywgJ3dhcm5pbmcnXSksIFByb3BUeXBlcy5zdHJpbmddKSxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGNvbXBvbmVudCBpcyBkaXNhYmxlZC5cbiAgICovXG4gIGRpc2FibGVkOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIHJpcHBsZSBlZmZlY3QgaXMgZGlzYWJsZWQuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkaXNhYmxlUmlwcGxlOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIFRoZSBpY29uIHRvIGRpc3BsYXkgd2hlbiB0aGUgY29tcG9uZW50IGlzIHVuY2hlY2tlZC5cbiAgICogQGRlZmF1bHQgPFJhZGlvQnV0dG9uSWNvbiAvPlxuICAgKi9cbiAgaWNvbjogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBUaGUgaWQgb2YgdGhlIGBpbnB1dGAgZWxlbWVudC5cbiAgICovXG4gIGlkOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogW0F0dHJpYnV0ZXNdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUTUwvRWxlbWVudC9pbnB1dCNBdHRyaWJ1dGVzKSBhcHBsaWVkIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAqL1xuICBpbnB1dFByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogUGFzcyBhIHJlZiB0byB0aGUgYGlucHV0YCBlbGVtZW50LlxuICAgKi9cbiAgaW5wdXRSZWY6IHJlZlR5cGUsXG4gIC8qKlxuICAgKiBOYW1lIGF0dHJpYnV0ZSBvZiB0aGUgYGlucHV0YCBlbGVtZW50LlxuICAgKi9cbiAgbmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIHN0YXRlIGlzIGNoYW5nZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7UmVhY3QuQ2hhbmdlRXZlbnQ8SFRNTElucHV0RWxlbWVudD59IGV2ZW50IFRoZSBldmVudCBzb3VyY2Ugb2YgdGhlIGNhbGxiYWNrLlxuICAgKiBZb3UgY2FuIHB1bGwgb3V0IHRoZSBuZXcgdmFsdWUgYnkgYWNjZXNzaW5nIGBldmVudC50YXJnZXQudmFsdWVgIChzdHJpbmcpLlxuICAgKiBZb3UgY2FuIHB1bGwgb3V0IHRoZSBuZXcgY2hlY2tlZCBzdGF0ZSBieSBhY2Nlc3NpbmcgYGV2ZW50LnRhcmdldC5jaGVja2VkYCAoYm9vbGVhbikuXG4gICAqL1xuICBvbkNoYW5nZTogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBgaW5wdXRgIGVsZW1lbnQgaXMgcmVxdWlyZWQuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICByZXF1aXJlZDogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBUaGUgc2l6ZSBvZiB0aGUgY29tcG9uZW50LlxuICAgKiBgc21hbGxgIGlzIGVxdWl2YWxlbnQgdG8gdGhlIGRlbnNlIHJhZGlvIHN0eWxpbmcuXG4gICAqIEBkZWZhdWx0ICdtZWRpdW0nXG4gICAqL1xuICBzaXplOiBQcm9wVHlwZXMgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqLy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ21lZGl1bScsICdzbWFsbCddKSwgUHJvcFR5cGVzLnN0cmluZ10pLFxuICAvKipcbiAgICogVGhlIHN5c3RlbSBwcm9wIHRoYXQgYWxsb3dzIGRlZmluaW5nIHN5c3RlbSBvdmVycmlkZXMgYXMgd2VsbCBhcyBhZGRpdGlvbmFsIENTUyBzdHlsZXMuXG4gICAqL1xuICBzeDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5ib29sXSkpLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pLFxuICAvKipcbiAgICogVGhlIHZhbHVlIG9mIHRoZSBjb21wb25lbnQuIFRoZSBET00gQVBJIGNhc3RzIHRoaXMgdG8gYSBzdHJpbmcuXG4gICAqL1xuICB2YWx1ZTogUHJvcFR5cGVzLmFueVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IFJhZGlvOyIsImltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3Nlcyc7XG5pbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3MgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzcyc7XG5leHBvcnQgZnVuY3Rpb24gZ2V0UmFkaW9Hcm91cFV0aWxpdHlDbGFzcyhzbG90KSB7XG4gIHJldHVybiBnZW5lcmF0ZVV0aWxpdHlDbGFzcygnTXVpUmFkaW9Hcm91cCcsIHNsb3QpO1xufVxuY29uc3QgcmFkaW9Hcm91cENsYXNzZXMgPSBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzKCdNdWlSYWRpb0dyb3VwJywgWydyb290JywgJ3JvdycsICdlcnJvciddKTtcbmV4cG9ydCBkZWZhdWx0IHJhZGlvR3JvdXBDbGFzc2VzOyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImFjdGlvbnNcIiwgXCJjaGlsZHJlblwiLCBcImNsYXNzTmFtZVwiLCBcImRlZmF1bHRWYWx1ZVwiLCBcIm5hbWVcIiwgXCJvbkNoYW5nZVwiLCBcInZhbHVlXCJdO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IGNvbXBvc2VDbGFzc2VzIGZyb20gJ0BtdWkvdXRpbHMvY29tcG9zZUNsYXNzZXMnO1xuaW1wb3J0IEZvcm1Hcm91cCBmcm9tICcuLi9Gb3JtR3JvdXAnO1xuaW1wb3J0IHsgZ2V0UmFkaW9Hcm91cFV0aWxpdHlDbGFzcyB9IGZyb20gJy4vcmFkaW9Hcm91cENsYXNzZXMnO1xuaW1wb3J0IHVzZUZvcmtSZWYgZnJvbSAnLi4vdXRpbHMvdXNlRm9ya1JlZic7XG5pbXBvcnQgdXNlQ29udHJvbGxlZCBmcm9tICcuLi91dGlscy91c2VDb250cm9sbGVkJztcbmltcG9ydCBSYWRpb0dyb3VwQ29udGV4dCBmcm9tICcuL1JhZGlvR3JvdXBDb250ZXh0JztcbmltcG9ydCB1c2VJZCBmcm9tICcuLi91dGlscy91c2VJZCc7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuY29uc3QgdXNlVXRpbGl0eUNsYXNzZXMgPSBwcm9wcyA9PiB7XG4gIGNvbnN0IHtcbiAgICBjbGFzc2VzLFxuICAgIHJvdyxcbiAgICBlcnJvclxuICB9ID0gcHJvcHM7XG4gIGNvbnN0IHNsb3RzID0ge1xuICAgIHJvb3Q6IFsncm9vdCcsIHJvdyAmJiAncm93JywgZXJyb3IgJiYgJ2Vycm9yJ11cbiAgfTtcbiAgcmV0dXJuIGNvbXBvc2VDbGFzc2VzKHNsb3RzLCBnZXRSYWRpb0dyb3VwVXRpbGl0eUNsYXNzLCBjbGFzc2VzKTtcbn07XG5jb25zdCBSYWRpb0dyb3VwID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gUmFkaW9Hcm91cChwcm9wcywgcmVmKSB7XG4gIGNvbnN0IHtcbiAgICAgIC8vIHByaXZhdGVcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC9wcm9wLXR5cGVzXG4gICAgICBhY3Rpb25zLFxuICAgICAgY2hpbGRyZW4sXG4gICAgICBjbGFzc05hbWUsXG4gICAgICBkZWZhdWx0VmFsdWUsXG4gICAgICBuYW1lOiBuYW1lUHJvcCxcbiAgICAgIG9uQ2hhbmdlLFxuICAgICAgdmFsdWU6IHZhbHVlUHJvcFxuICAgIH0gPSBwcm9wcyxcbiAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQpO1xuICBjb25zdCByb290UmVmID0gUmVhY3QudXNlUmVmKG51bGwpO1xuICBjb25zdCBjbGFzc2VzID0gdXNlVXRpbGl0eUNsYXNzZXMocHJvcHMpO1xuICBjb25zdCBbdmFsdWUsIHNldFZhbHVlU3RhdGVdID0gdXNlQ29udHJvbGxlZCh7XG4gICAgY29udHJvbGxlZDogdmFsdWVQcm9wLFxuICAgIGRlZmF1bHQ6IGRlZmF1bHRWYWx1ZSxcbiAgICBuYW1lOiAnUmFkaW9Hcm91cCdcbiAgfSk7XG4gIFJlYWN0LnVzZUltcGVyYXRpdmVIYW5kbGUoYWN0aW9ucywgKCkgPT4gKHtcbiAgICBmb2N1czogKCkgPT4ge1xuICAgICAgbGV0IGlucHV0ID0gcm9vdFJlZi5jdXJyZW50LnF1ZXJ5U2VsZWN0b3IoJ2lucHV0Om5vdCg6ZGlzYWJsZWQpOmNoZWNrZWQnKTtcbiAgICAgIGlmICghaW5wdXQpIHtcbiAgICAgICAgaW5wdXQgPSByb290UmVmLmN1cnJlbnQucXVlcnlTZWxlY3RvcignaW5wdXQ6bm90KDpkaXNhYmxlZCknKTtcbiAgICAgIH1cbiAgICAgIGlmIChpbnB1dCkge1xuICAgICAgICBpbnB1dC5mb2N1cygpO1xuICAgICAgfVxuICAgIH1cbiAgfSksIFtdKTtcbiAgY29uc3QgaGFuZGxlUmVmID0gdXNlRm9ya1JlZihyZWYsIHJvb3RSZWYpO1xuICBjb25zdCBuYW1lID0gdXNlSWQobmFtZVByb3ApO1xuICBjb25zdCBjb250ZXh0VmFsdWUgPSBSZWFjdC51c2VNZW1vKCgpID0+ICh7XG4gICAgbmFtZSxcbiAgICBvbkNoYW5nZShldmVudCkge1xuICAgICAgc2V0VmFsdWVTdGF0ZShldmVudC50YXJnZXQudmFsdWUpO1xuICAgICAgaWYgKG9uQ2hhbmdlKSB7XG4gICAgICAgIG9uQ2hhbmdlKGV2ZW50LCBldmVudC50YXJnZXQudmFsdWUpO1xuICAgICAgfVxuICAgIH0sXG4gICAgdmFsdWVcbiAgfSksIFtuYW1lLCBvbkNoYW5nZSwgc2V0VmFsdWVTdGF0ZSwgdmFsdWVdKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KFJhZGlvR3JvdXBDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IGNvbnRleHRWYWx1ZSxcbiAgICBjaGlsZHJlbjogLyojX19QVVJFX18qL19qc3goRm9ybUdyb3VwLCBfZXh0ZW5kcyh7XG4gICAgICByb2xlOiBcInJhZGlvZ3JvdXBcIixcbiAgICAgIHJlZjogaGFuZGxlUmVmLFxuICAgICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lKVxuICAgIH0sIG90aGVyLCB7XG4gICAgICBjaGlsZHJlbjogY2hpbGRyZW5cbiAgICB9KSlcbiAgfSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFJhZGlvR3JvdXAucHJvcFR5cGVzIC8qIHJlbW92ZS1wcm9wdHlwZXMgKi8gPSB7XG4gIC8vIOKUjOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgCBXYXJuaW5nIOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUkFxuICAvLyDilIIgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zLiDilIJcbiAgLy8g4pSCICAgIFRvIHVwZGF0ZSB0aGVtLCBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBgcG5wbSBwcm9wdHlwZXNgLiAgICAg4pSCXG4gIC8vIOKUlOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUmFxuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIFRoZSBkZWZhdWx0IHZhbHVlLiBVc2Ugd2hlbiB0aGUgY29tcG9uZW50IGlzIG5vdCBjb250cm9sbGVkLlxuICAgKi9cbiAgZGVmYXVsdFZhbHVlOiBQcm9wVHlwZXMuYW55LFxuICAvKipcbiAgICogVGhlIG5hbWUgdXNlZCB0byByZWZlcmVuY2UgdGhlIHZhbHVlIG9mIHRoZSBjb250cm9sLlxuICAgKiBJZiB5b3UgZG9uJ3QgcHJvdmlkZSB0aGlzIHByb3AsIGl0IGZhbGxzIGJhY2sgdG8gYSByYW5kb21seSBnZW5lcmF0ZWQgbmFtZS5cbiAgICovXG4gIG5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIGEgcmFkaW8gYnV0dG9uIGlzIHNlbGVjdGVkLlxuICAgKlxuICAgKiBAcGFyYW0ge1JlYWN0LkNoYW5nZUV2ZW50PEhUTUxJbnB1dEVsZW1lbnQ+fSBldmVudCBUaGUgZXZlbnQgc291cmNlIG9mIHRoZSBjYWxsYmFjay5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlIFRoZSB2YWx1ZSBvZiB0aGUgc2VsZWN0ZWQgcmFkaW8gYnV0dG9uLlxuICAgKiBZb3UgY2FuIHB1bGwgb3V0IHRoZSBuZXcgdmFsdWUgYnkgYWNjZXNzaW5nIGBldmVudC50YXJnZXQudmFsdWVgIChzdHJpbmcpLlxuICAgKi9cbiAgb25DaGFuZ2U6IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogVmFsdWUgb2YgdGhlIHNlbGVjdGVkIHJhZGlvIGJ1dHRvbi4gVGhlIERPTSBBUEkgY2FzdHMgdGhpcyB0byBhIHN0cmluZy5cbiAgICovXG4gIHZhbHVlOiBQcm9wVHlwZXMuYW55XG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgUmFkaW9Hcm91cDsiLCJjb25zdCB2aXN1YWxseUhpZGRlbiA9IHtcbiAgYm9yZGVyOiAwLFxuICBjbGlwOiAncmVjdCgwIDAgMCAwKScsXG4gIGhlaWdodDogJzFweCcsXG4gIG1hcmdpbjogJy0xcHgnLFxuICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gIHBhZGRpbmc6IDAsXG4gIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICB3aGl0ZVNwYWNlOiAnbm93cmFwJyxcbiAgd2lkdGg6ICcxcHgnXG59O1xuZXhwb3J0IGRlZmF1bHQgdmlzdWFsbHlIaWRkZW47IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgY3JlYXRlU3ZnSWNvbiBmcm9tICcuLi8uLi91dGlscy9jcmVhdGVTdmdJY29uJztcblxuLyoqXG4gKiBAaWdub3JlIC0gaW50ZXJuYWwgY29tcG9uZW50LlxuICovXG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuZXhwb3J0IGRlZmF1bHQgY3JlYXRlU3ZnSWNvbiggLyojX19QVVJFX18qL19qc3goXCJwYXRoXCIsIHtcbiAgZDogXCJNMTIgMTcuMjdMMTguMTggMjFsLTEuNjQtNy4wM0wyMiA5LjI0bC03LjE5LS42MUwxMiAyIDkuMTkgOC42MyAyIDkuMjRsNS40NiA0LjczTDUuODIgMjF6XCJcbn0pLCAnU3RhcicpOyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNyZWF0ZVN2Z0ljb24gZnJvbSAnLi4vLi4vdXRpbHMvY3JlYXRlU3ZnSWNvbic7XG5cbi8qKlxuICogQGlnbm9yZSAtIGludGVybmFsIGNvbXBvbmVudC5cbiAqL1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZVN2Z0ljb24oIC8qI19fUFVSRV9fKi9fanN4KFwicGF0aFwiLCB7XG4gIGQ6IFwiTTIyIDkuMjRsLTcuMTktLjYyTDEyIDIgOS4xOSA4LjYzIDIgOS4yNGw1LjQ2IDQuNzNMNS44MiAyMSAxMiAxNy4yNyAxOC4xOCAyMWwtMS42My03LjAzTDIyIDkuMjR6TTEyIDE1LjRsLTMuNzYgMi4yNyAxLTQuMjgtMy4zMi0yLjg4IDQuMzgtLjM4TDEyIDYuMWwxLjcxIDQuMDQgNC4zOC4zOC0zLjMyIDIuODggMSA0LjI4TDEyIDE1LjR6XCJcbn0pLCAnU3RhckJvcmRlcicpOyIsImltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3Nlcyc7XG5pbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3MgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzcyc7XG5leHBvcnQgZnVuY3Rpb24gZ2V0UmF0aW5nVXRpbGl0eUNsYXNzKHNsb3QpIHtcbiAgcmV0dXJuIGdlbmVyYXRlVXRpbGl0eUNsYXNzKCdNdWlSYXRpbmcnLCBzbG90KTtcbn1cbmNvbnN0IHJhdGluZ0NsYXNzZXMgPSBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzKCdNdWlSYXRpbmcnLCBbJ3Jvb3QnLCAnc2l6ZVNtYWxsJywgJ3NpemVNZWRpdW0nLCAnc2l6ZUxhcmdlJywgJ3JlYWRPbmx5JywgJ2Rpc2FibGVkJywgJ2ZvY3VzVmlzaWJsZScsICd2aXN1YWxseUhpZGRlbicsICdwcmlzdGluZScsICdsYWJlbCcsICdsYWJlbEVtcHR5VmFsdWVBY3RpdmUnLCAnaWNvbicsICdpY29uRW1wdHknLCAnaWNvbkZpbGxlZCcsICdpY29uSG92ZXInLCAnaWNvbkZvY3VzJywgJ2ljb25BY3RpdmUnLCAnZGVjaW1hbCddKTtcbmV4cG9ydCBkZWZhdWx0IHJhdGluZ0NsYXNzZXM7IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1widmFsdWVcIl0sXG4gIF9leGNsdWRlZDIgPSBbXCJjbGFzc05hbWVcIiwgXCJkZWZhdWx0VmFsdWVcIiwgXCJkaXNhYmxlZFwiLCBcImVtcHR5SWNvblwiLCBcImVtcHR5TGFiZWxUZXh0XCIsIFwiZ2V0TGFiZWxUZXh0XCIsIFwiaGlnaGxpZ2h0U2VsZWN0ZWRPbmx5XCIsIFwiaWNvblwiLCBcIkljb25Db250YWluZXJDb21wb25lbnRcIiwgXCJtYXhcIiwgXCJuYW1lXCIsIFwib25DaGFuZ2VcIiwgXCJvbkNoYW5nZUFjdGl2ZVwiLCBcIm9uTW91c2VMZWF2ZVwiLCBcIm9uTW91c2VNb3ZlXCIsIFwicHJlY2lzaW9uXCIsIFwicmVhZE9ubHlcIiwgXCJzaXplXCIsIFwidmFsdWVcIl07XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgY2xhbXAgZnJvbSAnQG11aS91dGlscy9jbGFtcCc7XG5pbXBvcnQgdmlzdWFsbHlIaWRkZW4gZnJvbSAnQG11aS91dGlscy92aXN1YWxseUhpZGRlbic7XG5pbXBvcnQgY2hhaW5Qcm9wVHlwZXMgZnJvbSAnQG11aS91dGlscy9jaGFpblByb3BUeXBlcyc7XG5pbXBvcnQgY29tcG9zZUNsYXNzZXMgZnJvbSAnQG11aS91dGlscy9jb21wb3NlQ2xhc3Nlcyc7XG5pbXBvcnQgeyB1c2VSdGwgfSBmcm9tICdAbXVpL3N5c3RlbS9SdGxQcm92aWRlcic7XG5pbXBvcnQgeyBjYXBpdGFsaXplLCB1c2VGb3JrUmVmLCB1c2VJc0ZvY3VzVmlzaWJsZSwgdXNlQ29udHJvbGxlZCwgdW5zdGFibGVfdXNlSWQgYXMgdXNlSWQgfSBmcm9tICcuLi91dGlscyc7XG5pbXBvcnQgU3RhciBmcm9tICcuLi9pbnRlcm5hbC9zdmctaWNvbnMvU3Rhcic7XG5pbXBvcnQgU3RhckJvcmRlciBmcm9tICcuLi9pbnRlcm5hbC9zdmctaWNvbnMvU3RhckJvcmRlcic7XG5pbXBvcnQgeyB1c2VEZWZhdWx0UHJvcHMgfSBmcm9tICcuLi9EZWZhdWx0UHJvcHNQcm92aWRlcic7XG5pbXBvcnQgc3R5bGVkLCB7IHNsb3RTaG91bGRGb3J3YXJkUHJvcCB9IGZyb20gJy4uL3N0eWxlcy9zdHlsZWQnO1xuaW1wb3J0IHJhdGluZ0NsYXNzZXMsIHsgZ2V0UmF0aW5nVXRpbGl0eUNsYXNzIH0gZnJvbSAnLi9yYXRpbmdDbGFzc2VzJztcbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5pbXBvcnQgeyBqc3hzIGFzIF9qc3hzIH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5mdW5jdGlvbiBnZXREZWNpbWFsUHJlY2lzaW9uKG51bSkge1xuICBjb25zdCBkZWNpbWFsUGFydCA9IG51bS50b1N0cmluZygpLnNwbGl0KCcuJylbMV07XG4gIHJldHVybiBkZWNpbWFsUGFydCA/IGRlY2ltYWxQYXJ0Lmxlbmd0aCA6IDA7XG59XG5mdW5jdGlvbiByb3VuZFZhbHVlVG9QcmVjaXNpb24odmFsdWUsIHByZWNpc2lvbikge1xuICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICBjb25zdCBuZWFyZXN0ID0gTWF0aC5yb3VuZCh2YWx1ZSAvIHByZWNpc2lvbikgKiBwcmVjaXNpb247XG4gIHJldHVybiBOdW1iZXIobmVhcmVzdC50b0ZpeGVkKGdldERlY2ltYWxQcmVjaXNpb24ocHJlY2lzaW9uKSkpO1xufVxuY29uc3QgdXNlVXRpbGl0eUNsYXNzZXMgPSBvd25lclN0YXRlID0+IHtcbiAgY29uc3Qge1xuICAgIGNsYXNzZXMsXG4gICAgc2l6ZSxcbiAgICByZWFkT25seSxcbiAgICBkaXNhYmxlZCxcbiAgICBlbXB0eVZhbHVlRm9jdXNlZCxcbiAgICBmb2N1c1Zpc2libGVcbiAgfSA9IG93bmVyU3RhdGU7XG4gIGNvbnN0IHNsb3RzID0ge1xuICAgIHJvb3Q6IFsncm9vdCcsIGBzaXplJHtjYXBpdGFsaXplKHNpemUpfWAsIGRpc2FibGVkICYmICdkaXNhYmxlZCcsIGZvY3VzVmlzaWJsZSAmJiAnZm9jdXNWaXNpYmxlJywgcmVhZE9ubHkgJiYgJ3JlYWRPbmx5J10sXG4gICAgbGFiZWw6IFsnbGFiZWwnLCAncHJpc3RpbmUnXSxcbiAgICBsYWJlbEVtcHR5VmFsdWU6IFtlbXB0eVZhbHVlRm9jdXNlZCAmJiAnbGFiZWxFbXB0eVZhbHVlQWN0aXZlJ10sXG4gICAgaWNvbjogWydpY29uJ10sXG4gICAgaWNvbkVtcHR5OiBbJ2ljb25FbXB0eSddLFxuICAgIGljb25GaWxsZWQ6IFsnaWNvbkZpbGxlZCddLFxuICAgIGljb25Ib3ZlcjogWydpY29uSG92ZXInXSxcbiAgICBpY29uRm9jdXM6IFsnaWNvbkZvY3VzJ10sXG4gICAgaWNvbkFjdGl2ZTogWydpY29uQWN0aXZlJ10sXG4gICAgZGVjaW1hbDogWydkZWNpbWFsJ10sXG4gICAgdmlzdWFsbHlIaWRkZW46IFsndmlzdWFsbHlIaWRkZW4nXVxuICB9O1xuICByZXR1cm4gY29tcG9zZUNsYXNzZXMoc2xvdHMsIGdldFJhdGluZ1V0aWxpdHlDbGFzcywgY2xhc3Nlcyk7XG59O1xuY29uc3QgUmF0aW5nUm9vdCA9IHN0eWxlZCgnc3BhbicsIHtcbiAgbmFtZTogJ011aVJhdGluZycsXG4gIHNsb3Q6ICdSb290JyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgb3duZXJTdGF0ZVxuICAgIH0gPSBwcm9wcztcbiAgICByZXR1cm4gW3tcbiAgICAgIFtgJiAuJHtyYXRpbmdDbGFzc2VzLnZpc3VhbGx5SGlkZGVufWBdOiBzdHlsZXMudmlzdWFsbHlIaWRkZW5cbiAgICB9LCBzdHlsZXMucm9vdCwgc3R5bGVzW2BzaXplJHtjYXBpdGFsaXplKG93bmVyU3RhdGUuc2l6ZSl9YF0sIG93bmVyU3RhdGUucmVhZE9ubHkgJiYgc3R5bGVzLnJlYWRPbmx5XTtcbiAgfVxufSkoKHtcbiAgdGhlbWUsXG4gIG93bmVyU3RhdGVcbn0pID0+IF9leHRlbmRzKHtcbiAgZGlzcGxheTogJ2lubGluZS1mbGV4JyxcbiAgLy8gUmVxdWlyZWQgdG8gcG9zaXRpb24gdGhlIHByaXN0aW5lIGlucHV0IGFic29sdXRlbHlcbiAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gIGZvbnRTaXplOiB0aGVtZS50eXBvZ3JhcGh5LnB4VG9SZW0oMjQpLFxuICBjb2xvcjogJyNmYWFmMDAnLFxuICBjdXJzb3I6ICdwb2ludGVyJyxcbiAgdGV4dEFsaWduOiAnbGVmdCcsXG4gIHdpZHRoOiAnbWluLWNvbnRlbnQnLFxuICBXZWJraXRUYXBIaWdobGlnaHRDb2xvcjogJ3RyYW5zcGFyZW50JyxcbiAgW2AmLiR7cmF0aW5nQ2xhc3Nlcy5kaXNhYmxlZH1gXToge1xuICAgIG9wYWNpdHk6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlLmFjdGlvbi5kaXNhYmxlZE9wYWNpdHksXG4gICAgcG9pbnRlckV2ZW50czogJ25vbmUnXG4gIH0sXG4gIFtgJi4ke3JhdGluZ0NsYXNzZXMuZm9jdXNWaXNpYmxlfSAuJHtyYXRpbmdDbGFzc2VzLmljb25BY3RpdmV9YF06IHtcbiAgICBvdXRsaW5lOiAnMXB4IHNvbGlkICM5OTknXG4gIH0sXG4gIFtgJiAuJHtyYXRpbmdDbGFzc2VzLnZpc3VhbGx5SGlkZGVufWBdOiB2aXN1YWxseUhpZGRlblxufSwgb3duZXJTdGF0ZS5zaXplID09PSAnc21hbGwnICYmIHtcbiAgZm9udFNpemU6IHRoZW1lLnR5cG9ncmFwaHkucHhUb1JlbSgxOClcbn0sIG93bmVyU3RhdGUuc2l6ZSA9PT0gJ2xhcmdlJyAmJiB7XG4gIGZvbnRTaXplOiB0aGVtZS50eXBvZ3JhcGh5LnB4VG9SZW0oMzApXG59LCBvd25lclN0YXRlLnJlYWRPbmx5ICYmIHtcbiAgcG9pbnRlckV2ZW50czogJ25vbmUnXG59KSk7XG5jb25zdCBSYXRpbmdMYWJlbCA9IHN0eWxlZCgnbGFiZWwnLCB7XG4gIG5hbWU6ICdNdWlSYXRpbmcnLFxuICBzbG90OiAnTGFiZWwnLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHtcbiAgICBvd25lclN0YXRlXG4gIH0sIHN0eWxlcykgPT4gW3N0eWxlcy5sYWJlbCwgb3duZXJTdGF0ZS5lbXB0eVZhbHVlRm9jdXNlZCAmJiBzdHlsZXMubGFiZWxFbXB0eVZhbHVlQWN0aXZlXVxufSkoKHtcbiAgb3duZXJTdGF0ZVxufSkgPT4gX2V4dGVuZHMoe1xuICBjdXJzb3I6ICdpbmhlcml0J1xufSwgb3duZXJTdGF0ZS5lbXB0eVZhbHVlRm9jdXNlZCAmJiB7XG4gIHRvcDogMCxcbiAgYm90dG9tOiAwLFxuICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgb3V0bGluZTogJzFweCBzb2xpZCAjOTk5JyxcbiAgd2lkdGg6ICcxMDAlJ1xufSkpO1xuY29uc3QgUmF0aW5nSWNvbiA9IHN0eWxlZCgnc3BhbicsIHtcbiAgbmFtZTogJ011aVJhdGluZycsXG4gIHNsb3Q6ICdJY29uJyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgb3duZXJTdGF0ZVxuICAgIH0gPSBwcm9wcztcbiAgICByZXR1cm4gW3N0eWxlcy5pY29uLCBvd25lclN0YXRlLmljb25FbXB0eSAmJiBzdHlsZXMuaWNvbkVtcHR5LCBvd25lclN0YXRlLmljb25GaWxsZWQgJiYgc3R5bGVzLmljb25GaWxsZWQsIG93bmVyU3RhdGUuaWNvbkhvdmVyICYmIHN0eWxlcy5pY29uSG92ZXIsIG93bmVyU3RhdGUuaWNvbkZvY3VzICYmIHN0eWxlcy5pY29uRm9jdXMsIG93bmVyU3RhdGUuaWNvbkFjdGl2ZSAmJiBzdHlsZXMuaWNvbkFjdGl2ZV07XG4gIH1cbn0pKCh7XG4gIHRoZW1lLFxuICBvd25lclN0YXRlXG59KSA9PiBfZXh0ZW5kcyh7XG4gIC8vIEZpdCB3cmFwcGVyIHRvIGFjdHVhbCBpY29uIHNpemUuXG4gIGRpc3BsYXk6ICdmbGV4JyxcbiAgdHJhbnNpdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCd0cmFuc2Zvcm0nLCB7XG4gICAgZHVyYXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmR1cmF0aW9uLnNob3J0ZXN0XG4gIH0pLFxuICAvLyBGaXggbW91c2VMZWF2ZSBpc3N1ZS5cbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2lzc3Vlcy80NDkyXG4gIHBvaW50ZXJFdmVudHM6ICdub25lJ1xufSwgb3duZXJTdGF0ZS5pY29uQWN0aXZlICYmIHtcbiAgdHJhbnNmb3JtOiAnc2NhbGUoMS4yKSdcbn0sIG93bmVyU3RhdGUuaWNvbkVtcHR5ICYmIHtcbiAgY29sb3I6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlLmFjdGlvbi5kaXNhYmxlZFxufSkpO1xuY29uc3QgUmF0aW5nRGVjaW1hbCA9IHN0eWxlZCgnc3BhbicsIHtcbiAgbmFtZTogJ011aVJhdGluZycsXG4gIHNsb3Q6ICdEZWNpbWFsJyxcbiAgc2hvdWxkRm9yd2FyZFByb3A6IHByb3AgPT4gc2xvdFNob3VsZEZvcndhcmRQcm9wKHByb3ApICYmIHByb3AgIT09ICdpY29uQWN0aXZlJyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgaWNvbkFjdGl2ZVxuICAgIH0gPSBwcm9wcztcbiAgICByZXR1cm4gW3N0eWxlcy5kZWNpbWFsLCBpY29uQWN0aXZlICYmIHN0eWxlcy5pY29uQWN0aXZlXTtcbiAgfVxufSkoKHtcbiAgaWNvbkFjdGl2ZVxufSkgPT4gX2V4dGVuZHMoe1xuICBwb3NpdGlvbjogJ3JlbGF0aXZlJ1xufSwgaWNvbkFjdGl2ZSAmJiB7XG4gIHRyYW5zZm9ybTogJ3NjYWxlKDEuMiknXG59KSk7XG5mdW5jdGlvbiBJY29uQ29udGFpbmVyKHByb3BzKSB7XG4gIGNvbnN0IG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIF9leGNsdWRlZCk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeChcInNwYW5cIiwgX2V4dGVuZHMoe30sIG90aGVyKSk7XG59XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBJY29uQ29udGFpbmVyLnByb3BUeXBlcyA9IHtcbiAgdmFsdWU6IFByb3BUeXBlcy5udW1iZXIuaXNSZXF1aXJlZFxufSA6IHZvaWQgMDtcbmZ1bmN0aW9uIFJhdGluZ0l0ZW0ocHJvcHMpIHtcbiAgY29uc3Qge1xuICAgIGNsYXNzZXMsXG4gICAgZGlzYWJsZWQsXG4gICAgZW1wdHlJY29uLFxuICAgIGZvY3VzLFxuICAgIGdldExhYmVsVGV4dCxcbiAgICBoaWdobGlnaHRTZWxlY3RlZE9ubHksXG4gICAgaG92ZXIsXG4gICAgaWNvbixcbiAgICBJY29uQ29udGFpbmVyQ29tcG9uZW50LFxuICAgIGlzQWN0aXZlLFxuICAgIGl0ZW1WYWx1ZSxcbiAgICBsYWJlbFByb3BzLFxuICAgIG5hbWUsXG4gICAgb25CbHVyLFxuICAgIG9uQ2hhbmdlLFxuICAgIG9uQ2xpY2ssXG4gICAgb25Gb2N1cyxcbiAgICByZWFkT25seSxcbiAgICBvd25lclN0YXRlLFxuICAgIHJhdGluZ1ZhbHVlLFxuICAgIHJhdGluZ1ZhbHVlUm91bmRlZFxuICB9ID0gcHJvcHM7XG4gIGNvbnN0IGlzRmlsbGVkID0gaGlnaGxpZ2h0U2VsZWN0ZWRPbmx5ID8gaXRlbVZhbHVlID09PSByYXRpbmdWYWx1ZSA6IGl0ZW1WYWx1ZSA8PSByYXRpbmdWYWx1ZTtcbiAgY29uc3QgaXNIb3ZlcmVkID0gaXRlbVZhbHVlIDw9IGhvdmVyO1xuICBjb25zdCBpc0ZvY3VzZWQgPSBpdGVtVmFsdWUgPD0gZm9jdXM7XG4gIGNvbnN0IGlzQ2hlY2tlZCA9IGl0ZW1WYWx1ZSA9PT0gcmF0aW5nVmFsdWVSb3VuZGVkO1xuICBjb25zdCBpZCA9IHVzZUlkKCk7XG4gIGNvbnN0IGNvbnRhaW5lciA9IC8qI19fUFVSRV9fKi9fanN4KFJhdGluZ0ljb24sIHtcbiAgICBhczogSWNvbkNvbnRhaW5lckNvbXBvbmVudCxcbiAgICB2YWx1ZTogaXRlbVZhbHVlLFxuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLmljb24sIGlzRmlsbGVkID8gY2xhc3Nlcy5pY29uRmlsbGVkIDogY2xhc3Nlcy5pY29uRW1wdHksIGlzSG92ZXJlZCAmJiBjbGFzc2VzLmljb25Ib3ZlciwgaXNGb2N1c2VkICYmIGNsYXNzZXMuaWNvbkZvY3VzLCBpc0FjdGl2ZSAmJiBjbGFzc2VzLmljb25BY3RpdmUpLFxuICAgIG93bmVyU3RhdGU6IF9leHRlbmRzKHt9LCBvd25lclN0YXRlLCB7XG4gICAgICBpY29uRW1wdHk6ICFpc0ZpbGxlZCxcbiAgICAgIGljb25GaWxsZWQ6IGlzRmlsbGVkLFxuICAgICAgaWNvbkhvdmVyOiBpc0hvdmVyZWQsXG4gICAgICBpY29uRm9jdXM6IGlzRm9jdXNlZCxcbiAgICAgIGljb25BY3RpdmU6IGlzQWN0aXZlXG4gICAgfSksXG4gICAgY2hpbGRyZW46IGVtcHR5SWNvbiAmJiAhaXNGaWxsZWQgPyBlbXB0eUljb24gOiBpY29uXG4gIH0pO1xuICBpZiAocmVhZE9ubHkpIHtcbiAgICByZXR1cm4gLyojX19QVVJFX18qL19qc3goXCJzcGFuXCIsIF9leHRlbmRzKHt9LCBsYWJlbFByb3BzLCB7XG4gICAgICBjaGlsZHJlbjogY29udGFpbmVyXG4gICAgfSkpO1xuICB9XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeHMoUmVhY3QuRnJhZ21lbnQsIHtcbiAgICBjaGlsZHJlbjogWy8qI19fUFVSRV9fKi9fanN4cyhSYXRpbmdMYWJlbCwgX2V4dGVuZHMoe1xuICAgICAgb3duZXJTdGF0ZTogX2V4dGVuZHMoe30sIG93bmVyU3RhdGUsIHtcbiAgICAgICAgZW1wdHlWYWx1ZUZvY3VzZWQ6IHVuZGVmaW5lZFxuICAgICAgfSksXG4gICAgICBodG1sRm9yOiBpZFxuICAgIH0sIGxhYmVsUHJvcHMsIHtcbiAgICAgIGNoaWxkcmVuOiBbY29udGFpbmVyLCAvKiNfX1BVUkVfXyovX2pzeChcInNwYW5cIiwge1xuICAgICAgICBjbGFzc05hbWU6IGNsYXNzZXMudmlzdWFsbHlIaWRkZW4sXG4gICAgICAgIGNoaWxkcmVuOiBnZXRMYWJlbFRleHQoaXRlbVZhbHVlKVxuICAgICAgfSldXG4gICAgfSkpLCAvKiNfX1BVUkVfXyovX2pzeChcImlucHV0XCIsIHtcbiAgICAgIGNsYXNzTmFtZTogY2xhc3Nlcy52aXN1YWxseUhpZGRlbixcbiAgICAgIG9uRm9jdXM6IG9uRm9jdXMsXG4gICAgICBvbkJsdXI6IG9uQmx1cixcbiAgICAgIG9uQ2hhbmdlOiBvbkNoYW5nZSxcbiAgICAgIG9uQ2xpY2s6IG9uQ2xpY2ssXG4gICAgICBkaXNhYmxlZDogZGlzYWJsZWQsXG4gICAgICB2YWx1ZTogaXRlbVZhbHVlLFxuICAgICAgaWQ6IGlkLFxuICAgICAgdHlwZTogXCJyYWRpb1wiLFxuICAgICAgbmFtZTogbmFtZSxcbiAgICAgIGNoZWNrZWQ6IGlzQ2hlY2tlZFxuICAgIH0pXVxuICB9KTtcbn1cbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFJhdGluZ0l0ZW0ucHJvcFR5cGVzID0ge1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG4gIGRpc2FibGVkOiBQcm9wVHlwZXMuYm9vbC5pc1JlcXVpcmVkLFxuICBlbXB0eUljb246IFByb3BUeXBlcy5ub2RlLFxuICBmb2N1czogUHJvcFR5cGVzLm51bWJlci5pc1JlcXVpcmVkLFxuICBnZXRMYWJlbFRleHQ6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIGhpZ2hsaWdodFNlbGVjdGVkT25seTogUHJvcFR5cGVzLmJvb2wuaXNSZXF1aXJlZCxcbiAgaG92ZXI6IFByb3BUeXBlcy5udW1iZXIuaXNSZXF1aXJlZCxcbiAgaWNvbjogUHJvcFR5cGVzLm5vZGUsXG4gIEljb25Db250YWluZXJDb21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZS5pc1JlcXVpcmVkLFxuICBpc0FjdGl2ZTogUHJvcFR5cGVzLmJvb2wuaXNSZXF1aXJlZCxcbiAgaXRlbVZhbHVlOiBQcm9wVHlwZXMubnVtYmVyLmlzUmVxdWlyZWQsXG4gIGxhYmVsUHJvcHM6IFByb3BUeXBlcy5vYmplY3QsXG4gIG5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIG9uQmx1cjogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgb25DaGFuZ2U6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIG9uQ2xpY2s6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIG9uRm9jdXM6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIG93bmVyU3RhdGU6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcbiAgcmF0aW5nVmFsdWU6IFByb3BUeXBlcy5udW1iZXIsXG4gIHJhdGluZ1ZhbHVlUm91bmRlZDogUHJvcFR5cGVzLm51bWJlcixcbiAgcmVhZE9ubHk6IFByb3BUeXBlcy5ib29sLmlzUmVxdWlyZWRcbn0gOiB2b2lkIDA7XG5jb25zdCBkZWZhdWx0SWNvbiA9IC8qI19fUFVSRV9fKi9fanN4KFN0YXIsIHtcbiAgZm9udFNpemU6IFwiaW5oZXJpdFwiXG59KTtcbmNvbnN0IGRlZmF1bHRFbXB0eUljb24gPSAvKiNfX1BVUkVfXyovX2pzeChTdGFyQm9yZGVyLCB7XG4gIGZvbnRTaXplOiBcImluaGVyaXRcIlxufSk7XG5mdW5jdGlvbiBkZWZhdWx0TGFiZWxUZXh0KHZhbHVlKSB7XG4gIHJldHVybiBgJHt2YWx1ZX0gU3RhciR7dmFsdWUgIT09IDEgPyAncycgOiAnJ31gO1xufVxuY29uc3QgUmF0aW5nID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gUmF0aW5nKGluUHJvcHMsIHJlZikge1xuICBjb25zdCBwcm9wcyA9IHVzZURlZmF1bHRQcm9wcyh7XG4gICAgbmFtZTogJ011aVJhdGluZycsXG4gICAgcHJvcHM6IGluUHJvcHNcbiAgfSk7XG4gIGNvbnN0IHtcbiAgICAgIGNsYXNzTmFtZSxcbiAgICAgIGRlZmF1bHRWYWx1ZSA9IG51bGwsXG4gICAgICBkaXNhYmxlZCA9IGZhbHNlLFxuICAgICAgZW1wdHlJY29uID0gZGVmYXVsdEVtcHR5SWNvbixcbiAgICAgIGVtcHR5TGFiZWxUZXh0ID0gJ0VtcHR5JyxcbiAgICAgIGdldExhYmVsVGV4dCA9IGRlZmF1bHRMYWJlbFRleHQsXG4gICAgICBoaWdobGlnaHRTZWxlY3RlZE9ubHkgPSBmYWxzZSxcbiAgICAgIGljb24gPSBkZWZhdWx0SWNvbixcbiAgICAgIEljb25Db250YWluZXJDb21wb25lbnQgPSBJY29uQ29udGFpbmVyLFxuICAgICAgbWF4ID0gNSxcbiAgICAgIG5hbWU6IG5hbWVQcm9wLFxuICAgICAgb25DaGFuZ2UsXG4gICAgICBvbkNoYW5nZUFjdGl2ZSxcbiAgICAgIG9uTW91c2VMZWF2ZSxcbiAgICAgIG9uTW91c2VNb3ZlLFxuICAgICAgcHJlY2lzaW9uID0gMSxcbiAgICAgIHJlYWRPbmx5ID0gZmFsc2UsXG4gICAgICBzaXplID0gJ21lZGl1bScsXG4gICAgICB2YWx1ZTogdmFsdWVQcm9wXG4gICAgfSA9IHByb3BzLFxuICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIF9leGNsdWRlZDIpO1xuICBjb25zdCBuYW1lID0gdXNlSWQobmFtZVByb3ApO1xuICBjb25zdCBbdmFsdWVEZXJpdmVkLCBzZXRWYWx1ZVN0YXRlXSA9IHVzZUNvbnRyb2xsZWQoe1xuICAgIGNvbnRyb2xsZWQ6IHZhbHVlUHJvcCxcbiAgICBkZWZhdWx0OiBkZWZhdWx0VmFsdWUsXG4gICAgbmFtZTogJ1JhdGluZydcbiAgfSk7XG4gIGNvbnN0IHZhbHVlUm91bmRlZCA9IHJvdW5kVmFsdWVUb1ByZWNpc2lvbih2YWx1ZURlcml2ZWQsIHByZWNpc2lvbik7XG4gIGNvbnN0IGlzUnRsID0gdXNlUnRsKCk7XG4gIGNvbnN0IFt7XG4gICAgaG92ZXIsXG4gICAgZm9jdXNcbiAgfSwgc2V0U3RhdGVdID0gUmVhY3QudXNlU3RhdGUoe1xuICAgIGhvdmVyOiAtMSxcbiAgICBmb2N1czogLTFcbiAgfSk7XG4gIGxldCB2YWx1ZSA9IHZhbHVlUm91bmRlZDtcbiAgaWYgKGhvdmVyICE9PSAtMSkge1xuICAgIHZhbHVlID0gaG92ZXI7XG4gIH1cbiAgaWYgKGZvY3VzICE9PSAtMSkge1xuICAgIHZhbHVlID0gZm9jdXM7XG4gIH1cbiAgY29uc3Qge1xuICAgIGlzRm9jdXNWaXNpYmxlUmVmLFxuICAgIG9uQmx1cjogaGFuZGxlQmx1clZpc2libGUsXG4gICAgb25Gb2N1czogaGFuZGxlRm9jdXNWaXNpYmxlLFxuICAgIHJlZjogZm9jdXNWaXNpYmxlUmVmXG4gIH0gPSB1c2VJc0ZvY3VzVmlzaWJsZSgpO1xuICBjb25zdCBbZm9jdXNWaXNpYmxlLCBzZXRGb2N1c1Zpc2libGVdID0gUmVhY3QudXNlU3RhdGUoZmFsc2UpO1xuICBjb25zdCByb290UmVmID0gUmVhY3QudXNlUmVmKCk7XG4gIGNvbnN0IGhhbmRsZVJlZiA9IHVzZUZvcmtSZWYoZm9jdXNWaXNpYmxlUmVmLCByb290UmVmLCByZWYpO1xuICBjb25zdCBoYW5kbGVNb3VzZU1vdmUgPSBldmVudCA9PiB7XG4gICAgaWYgKG9uTW91c2VNb3ZlKSB7XG4gICAgICBvbk1vdXNlTW92ZShldmVudCk7XG4gICAgfVxuICAgIGNvbnN0IHJvb3ROb2RlID0gcm9vdFJlZi5jdXJyZW50O1xuICAgIGNvbnN0IHtcbiAgICAgIHJpZ2h0LFxuICAgICAgbGVmdCxcbiAgICAgIHdpZHRoOiBjb250YWluZXJXaWR0aFxuICAgIH0gPSByb290Tm9kZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICBsZXQgcGVyY2VudDtcbiAgICBpZiAoaXNSdGwpIHtcbiAgICAgIHBlcmNlbnQgPSAocmlnaHQgLSBldmVudC5jbGllbnRYKSAvIGNvbnRhaW5lcldpZHRoO1xuICAgIH0gZWxzZSB7XG4gICAgICBwZXJjZW50ID0gKGV2ZW50LmNsaWVudFggLSBsZWZ0KSAvIGNvbnRhaW5lcldpZHRoO1xuICAgIH1cbiAgICBsZXQgbmV3SG92ZXIgPSByb3VuZFZhbHVlVG9QcmVjaXNpb24obWF4ICogcGVyY2VudCArIHByZWNpc2lvbiAvIDIsIHByZWNpc2lvbik7XG4gICAgbmV3SG92ZXIgPSBjbGFtcChuZXdIb3ZlciwgcHJlY2lzaW9uLCBtYXgpO1xuICAgIHNldFN0YXRlKHByZXYgPT4gcHJldi5ob3ZlciA9PT0gbmV3SG92ZXIgJiYgcHJldi5mb2N1cyA9PT0gbmV3SG92ZXIgPyBwcmV2IDoge1xuICAgICAgaG92ZXI6IG5ld0hvdmVyLFxuICAgICAgZm9jdXM6IG5ld0hvdmVyXG4gICAgfSk7XG4gICAgc2V0Rm9jdXNWaXNpYmxlKGZhbHNlKTtcbiAgICBpZiAob25DaGFuZ2VBY3RpdmUgJiYgaG92ZXIgIT09IG5ld0hvdmVyKSB7XG4gICAgICBvbkNoYW5nZUFjdGl2ZShldmVudCwgbmV3SG92ZXIpO1xuICAgIH1cbiAgfTtcbiAgY29uc3QgaGFuZGxlTW91c2VMZWF2ZSA9IGV2ZW50ID0+IHtcbiAgICBpZiAob25Nb3VzZUxlYXZlKSB7XG4gICAgICBvbk1vdXNlTGVhdmUoZXZlbnQpO1xuICAgIH1cbiAgICBjb25zdCBuZXdIb3ZlciA9IC0xO1xuICAgIHNldFN0YXRlKHtcbiAgICAgIGhvdmVyOiBuZXdIb3ZlcixcbiAgICAgIGZvY3VzOiBuZXdIb3ZlclxuICAgIH0pO1xuICAgIGlmIChvbkNoYW5nZUFjdGl2ZSAmJiBob3ZlciAhPT0gbmV3SG92ZXIpIHtcbiAgICAgIG9uQ2hhbmdlQWN0aXZlKGV2ZW50LCBuZXdIb3Zlcik7XG4gICAgfVxuICB9O1xuICBjb25zdCBoYW5kbGVDaGFuZ2UgPSBldmVudCA9PiB7XG4gICAgbGV0IG5ld1ZhbHVlID0gZXZlbnQudGFyZ2V0LnZhbHVlID09PSAnJyA/IG51bGwgOiBwYXJzZUZsb2F0KGV2ZW50LnRhcmdldC52YWx1ZSk7XG5cbiAgICAvLyBHaXZlIG1vdXNlIHByaW9yaXR5IG92ZXIga2V5Ym9hcmRcbiAgICAvLyBGaXggaHR0cHM6Ly9naXRodWIuY29tL211aS9tYXRlcmlhbC11aS9pc3N1ZXMvMjI4MjdcbiAgICBpZiAoaG92ZXIgIT09IC0xKSB7XG4gICAgICBuZXdWYWx1ZSA9IGhvdmVyO1xuICAgIH1cbiAgICBzZXRWYWx1ZVN0YXRlKG5ld1ZhbHVlKTtcbiAgICBpZiAob25DaGFuZ2UpIHtcbiAgICAgIG9uQ2hhbmdlKGV2ZW50LCBuZXdWYWx1ZSk7XG4gICAgfVxuICB9O1xuICBjb25zdCBoYW5kbGVDbGVhciA9IGV2ZW50ID0+IHtcbiAgICAvLyBJZ25vcmUga2V5Ym9hcmQgZXZlbnRzXG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2lzc3Vlcy83NDA3XG4gICAgaWYgKGV2ZW50LmNsaWVudFggPT09IDAgJiYgZXZlbnQuY2xpZW50WSA9PT0gMCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBzZXRTdGF0ZSh7XG4gICAgICBob3ZlcjogLTEsXG4gICAgICBmb2N1czogLTFcbiAgICB9KTtcbiAgICBzZXRWYWx1ZVN0YXRlKG51bGwpO1xuICAgIGlmIChvbkNoYW5nZSAmJiBwYXJzZUZsb2F0KGV2ZW50LnRhcmdldC52YWx1ZSkgPT09IHZhbHVlUm91bmRlZCkge1xuICAgICAgb25DaGFuZ2UoZXZlbnQsIG51bGwpO1xuICAgIH1cbiAgfTtcbiAgY29uc3QgaGFuZGxlRm9jdXMgPSBldmVudCA9PiB7XG4gICAgaGFuZGxlRm9jdXNWaXNpYmxlKGV2ZW50KTtcbiAgICBpZiAoaXNGb2N1c1Zpc2libGVSZWYuY3VycmVudCA9PT0gdHJ1ZSkge1xuICAgICAgc2V0Rm9jdXNWaXNpYmxlKHRydWUpO1xuICAgIH1cbiAgICBjb25zdCBuZXdGb2N1cyA9IHBhcnNlRmxvYXQoZXZlbnQudGFyZ2V0LnZhbHVlKTtcbiAgICBzZXRTdGF0ZShwcmV2ID0+ICh7XG4gICAgICBob3ZlcjogcHJldi5ob3ZlcixcbiAgICAgIGZvY3VzOiBuZXdGb2N1c1xuICAgIH0pKTtcbiAgfTtcbiAgY29uc3QgaGFuZGxlQmx1ciA9IGV2ZW50ID0+IHtcbiAgICBpZiAoaG92ZXIgIT09IC0xKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGhhbmRsZUJsdXJWaXNpYmxlKGV2ZW50KTtcbiAgICBpZiAoaXNGb2N1c1Zpc2libGVSZWYuY3VycmVudCA9PT0gZmFsc2UpIHtcbiAgICAgIHNldEZvY3VzVmlzaWJsZShmYWxzZSk7XG4gICAgfVxuICAgIGNvbnN0IG5ld0ZvY3VzID0gLTE7XG4gICAgc2V0U3RhdGUocHJldiA9PiAoe1xuICAgICAgaG92ZXI6IHByZXYuaG92ZXIsXG4gICAgICBmb2N1czogbmV3Rm9jdXNcbiAgICB9KSk7XG4gIH07XG4gIGNvbnN0IFtlbXB0eVZhbHVlRm9jdXNlZCwgc2V0RW1wdHlWYWx1ZUZvY3VzZWRdID0gUmVhY3QudXNlU3RhdGUoZmFsc2UpO1xuICBjb25zdCBvd25lclN0YXRlID0gX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgZGVmYXVsdFZhbHVlLFxuICAgIGRpc2FibGVkLFxuICAgIGVtcHR5SWNvbixcbiAgICBlbXB0eUxhYmVsVGV4dCxcbiAgICBlbXB0eVZhbHVlRm9jdXNlZCxcbiAgICBmb2N1c1Zpc2libGUsXG4gICAgZ2V0TGFiZWxUZXh0LFxuICAgIGljb24sXG4gICAgSWNvbkNvbnRhaW5lckNvbXBvbmVudCxcbiAgICBtYXgsXG4gICAgcHJlY2lzaW9uLFxuICAgIHJlYWRPbmx5LFxuICAgIHNpemVcbiAgfSk7XG4gIGNvbnN0IGNsYXNzZXMgPSB1c2VVdGlsaXR5Q2xhc3Nlcyhvd25lclN0YXRlKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4cyhSYXRpbmdSb290LCBfZXh0ZW5kcyh7XG4gICAgcmVmOiBoYW5kbGVSZWYsXG4gICAgb25Nb3VzZU1vdmU6IGhhbmRsZU1vdXNlTW92ZSxcbiAgICBvbk1vdXNlTGVhdmU6IGhhbmRsZU1vdXNlTGVhdmUsXG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lLCByZWFkT25seSAmJiAnTXVpUmF0aW5nLXJlYWRPbmx5JyksXG4gICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZSxcbiAgICByb2xlOiByZWFkT25seSA/ICdpbWcnIDogbnVsbCxcbiAgICBcImFyaWEtbGFiZWxcIjogcmVhZE9ubHkgPyBnZXRMYWJlbFRleHQodmFsdWUpIDogbnVsbFxuICB9LCBvdGhlciwge1xuICAgIGNoaWxkcmVuOiBbQXJyYXkuZnJvbShuZXcgQXJyYXkobWF4KSkubWFwKChfLCBpbmRleCkgPT4ge1xuICAgICAgY29uc3QgaXRlbVZhbHVlID0gaW5kZXggKyAxO1xuICAgICAgY29uc3QgcmF0aW5nSXRlbVByb3BzID0ge1xuICAgICAgICBjbGFzc2VzLFxuICAgICAgICBkaXNhYmxlZCxcbiAgICAgICAgZW1wdHlJY29uLFxuICAgICAgICBmb2N1cyxcbiAgICAgICAgZ2V0TGFiZWxUZXh0LFxuICAgICAgICBoaWdobGlnaHRTZWxlY3RlZE9ubHksXG4gICAgICAgIGhvdmVyLFxuICAgICAgICBpY29uLFxuICAgICAgICBJY29uQ29udGFpbmVyQ29tcG9uZW50LFxuICAgICAgICBuYW1lLFxuICAgICAgICBvbkJsdXI6IGhhbmRsZUJsdXIsXG4gICAgICAgIG9uQ2hhbmdlOiBoYW5kbGVDaGFuZ2UsXG4gICAgICAgIG9uQ2xpY2s6IGhhbmRsZUNsZWFyLFxuICAgICAgICBvbkZvY3VzOiBoYW5kbGVGb2N1cyxcbiAgICAgICAgcmF0aW5nVmFsdWU6IHZhbHVlLFxuICAgICAgICByYXRpbmdWYWx1ZVJvdW5kZWQ6IHZhbHVlUm91bmRlZCxcbiAgICAgICAgcmVhZE9ubHksXG4gICAgICAgIG93bmVyU3RhdGVcbiAgICAgIH07XG4gICAgICBjb25zdCBpc0FjdGl2ZSA9IGl0ZW1WYWx1ZSA9PT0gTWF0aC5jZWlsKHZhbHVlKSAmJiAoaG92ZXIgIT09IC0xIHx8IGZvY3VzICE9PSAtMSk7XG4gICAgICBpZiAocHJlY2lzaW9uIDwgMSkge1xuICAgICAgICBjb25zdCBpdGVtcyA9IEFycmF5LmZyb20obmV3IEFycmF5KDEgLyBwcmVjaXNpb24pKTtcbiAgICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KFJhdGluZ0RlY2ltYWwsIHtcbiAgICAgICAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5kZWNpbWFsLCBpc0FjdGl2ZSAmJiBjbGFzc2VzLmljb25BY3RpdmUpLFxuICAgICAgICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGUsXG4gICAgICAgICAgaWNvbkFjdGl2ZTogaXNBY3RpdmUsXG4gICAgICAgICAgY2hpbGRyZW46IGl0ZW1zLm1hcCgoJCwgaW5kZXhEZWNpbWFsKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBpdGVtRGVjaW1hbFZhbHVlID0gcm91bmRWYWx1ZVRvUHJlY2lzaW9uKGl0ZW1WYWx1ZSAtIDEgKyAoaW5kZXhEZWNpbWFsICsgMSkgKiBwcmVjaXNpb24sIHByZWNpc2lvbik7XG4gICAgICAgICAgICByZXR1cm4gLyojX19QVVJFX18qL19qc3goUmF0aW5nSXRlbSwgX2V4dGVuZHMoe30sIHJhdGluZ0l0ZW1Qcm9wcywge1xuICAgICAgICAgICAgICAvLyBUaGUgaWNvbiBpcyBhbHJlYWR5IGRpc3BsYXllZCBhcyBhY3RpdmVcbiAgICAgICAgICAgICAgaXNBY3RpdmU6IGZhbHNlLFxuICAgICAgICAgICAgICBpdGVtVmFsdWU6IGl0ZW1EZWNpbWFsVmFsdWUsXG4gICAgICAgICAgICAgIGxhYmVsUHJvcHM6IHtcbiAgICAgICAgICAgICAgICBzdHlsZTogaXRlbXMubGVuZ3RoIC0gMSA9PT0gaW5kZXhEZWNpbWFsID8ge30gOiB7XG4gICAgICAgICAgICAgICAgICB3aWR0aDogaXRlbURlY2ltYWxWYWx1ZSA9PT0gdmFsdWUgPyBgJHsoaW5kZXhEZWNpbWFsICsgMSkgKiBwcmVjaXNpb24gKiAxMDB9JWAgOiAnMCUnLFxuICAgICAgICAgICAgICAgICAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxuICAgICAgICAgICAgICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZSdcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pLCBpdGVtRGVjaW1hbFZhbHVlKTtcbiAgICAgICAgICB9KVxuICAgICAgICB9LCBpdGVtVmFsdWUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KFJhdGluZ0l0ZW0sIF9leHRlbmRzKHt9LCByYXRpbmdJdGVtUHJvcHMsIHtcbiAgICAgICAgaXNBY3RpdmU6IGlzQWN0aXZlLFxuICAgICAgICBpdGVtVmFsdWU6IGl0ZW1WYWx1ZVxuICAgICAgfSksIGl0ZW1WYWx1ZSk7XG4gICAgfSksICFyZWFkT25seSAmJiAhZGlzYWJsZWQgJiYgLyojX19QVVJFX18qL19qc3hzKFJhdGluZ0xhYmVsLCB7XG4gICAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5sYWJlbCwgY2xhc3Nlcy5sYWJlbEVtcHR5VmFsdWUpLFxuICAgICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZSxcbiAgICAgIGNoaWxkcmVuOiBbLyojX19QVVJFX18qL19qc3goXCJpbnB1dFwiLCB7XG4gICAgICAgIGNsYXNzTmFtZTogY2xhc3Nlcy52aXN1YWxseUhpZGRlbixcbiAgICAgICAgdmFsdWU6IFwiXCIsXG4gICAgICAgIGlkOiBgJHtuYW1lfS1lbXB0eWAsXG4gICAgICAgIHR5cGU6IFwicmFkaW9cIixcbiAgICAgICAgbmFtZTogbmFtZSxcbiAgICAgICAgY2hlY2tlZDogdmFsdWVSb3VuZGVkID09IG51bGwsXG4gICAgICAgIG9uRm9jdXM6ICgpID0+IHNldEVtcHR5VmFsdWVGb2N1c2VkKHRydWUpLFxuICAgICAgICBvbkJsdXI6ICgpID0+IHNldEVtcHR5VmFsdWVGb2N1c2VkKGZhbHNlKSxcbiAgICAgICAgb25DaGFuZ2U6IGhhbmRsZUNoYW5nZVxuICAgICAgfSksIC8qI19fUFVSRV9fKi9fanN4KFwic3BhblwiLCB7XG4gICAgICAgIGNsYXNzTmFtZTogY2xhc3Nlcy52aXN1YWxseUhpZGRlbixcbiAgICAgICAgY2hpbGRyZW46IGVtcHR5TGFiZWxUZXh0XG4gICAgICB9KV1cbiAgICB9KV1cbiAgfSkpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBSYXRpbmcucHJvcFR5cGVzIC8qIHJlbW92ZS1wcm9wdHlwZXMgKi8gPSB7XG4gIC8vIOKUjOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgCBXYXJuaW5nIOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUkFxuICAvLyDilIIgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zLiDilIJcbiAgLy8g4pSCICAgIFRvIHVwZGF0ZSB0aGVtLCBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBgcG5wbSBwcm9wdHlwZXNgLiAgICAg4pSCXG4gIC8vIOKUlOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUmFxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIFRoZSBkZWZhdWx0IHZhbHVlLiBVc2Ugd2hlbiB0aGUgY29tcG9uZW50IGlzIG5vdCBjb250cm9sbGVkLlxuICAgKiBAZGVmYXVsdCBudWxsXG4gICAqL1xuICBkZWZhdWx0VmFsdWU6IFByb3BUeXBlcy5udW1iZXIsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBjb21wb25lbnQgaXMgZGlzYWJsZWQuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBUaGUgaWNvbiB0byBkaXNwbGF5IHdoZW4gZW1wdHkuXG4gICAqIEBkZWZhdWx0IDxTdGFyQm9yZGVyIGZvbnRTaXplPVwiaW5oZXJpdFwiIC8+XG4gICAqL1xuICBlbXB0eUljb246IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogVGhlIGxhYmVsIHJlYWQgd2hlbiB0aGUgcmF0aW5nIGlucHV0IGlzIGVtcHR5LlxuICAgKiBAZGVmYXVsdCAnRW1wdHknXG4gICAqL1xuICBlbXB0eUxhYmVsVGV4dDogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBBY2NlcHRzIGEgZnVuY3Rpb24gd2hpY2ggcmV0dXJucyBhIHN0cmluZyB2YWx1ZSB0aGF0IHByb3ZpZGVzIGEgdXNlci1mcmllbmRseSBuYW1lIGZvciB0aGUgY3VycmVudCB2YWx1ZSBvZiB0aGUgcmF0aW5nLlxuICAgKiBUaGlzIGlzIGltcG9ydGFudCBmb3Igc2NyZWVuIHJlYWRlciB1c2Vycy5cbiAgICpcbiAgICogRm9yIGxvY2FsaXphdGlvbiBwdXJwb3NlcywgeW91IGNhbiB1c2UgdGhlIHByb3ZpZGVkIFt0cmFuc2xhdGlvbnNdKC9tYXRlcmlhbC11aS9ndWlkZXMvbG9jYWxpemF0aW9uLykuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZSBUaGUgcmF0aW5nIGxhYmVsJ3MgdmFsdWUgdG8gZm9ybWF0LlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgKiBAZGVmYXVsdCBmdW5jdGlvbiBkZWZhdWx0TGFiZWxUZXh0KHZhbHVlKSB7XG4gICAqICAgcmV0dXJuIGAke3ZhbHVlfSBTdGFyJHt2YWx1ZSAhPT0gMSA/ICdzJyA6ICcnfWA7XG4gICAqIH1cbiAgICovXG4gIGdldExhYmVsVGV4dDogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIG9ubHkgdGhlIHNlbGVjdGVkIGljb24gd2lsbCBiZSBoaWdobGlnaHRlZC5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGhpZ2hsaWdodFNlbGVjdGVkT25seTogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBUaGUgaWNvbiB0byBkaXNwbGF5LlxuICAgKiBAZGVmYXVsdCA8U3RhciBmb250U2l6ZT1cImluaGVyaXRcIiAvPlxuICAgKi9cbiAgaWNvbjogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IGNvbnRhaW5pbmcgdGhlIGljb24uXG4gICAqIEBkZWZhdWx0IGZ1bmN0aW9uIEljb25Db250YWluZXIocHJvcHMpIHtcbiAgICogICBjb25zdCB7IHZhbHVlLCAuLi5vdGhlciB9ID0gcHJvcHM7XG4gICAqICAgcmV0dXJuIDxzcGFuIHsuLi5vdGhlcn0gLz47XG4gICAqIH1cbiAgICovXG4gIEljb25Db250YWluZXJDb21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcbiAgLyoqXG4gICAqIE1heGltdW0gcmF0aW5nLlxuICAgKiBAZGVmYXVsdCA1XG4gICAqL1xuICBtYXg6IFByb3BUeXBlcy5udW1iZXIsXG4gIC8qKlxuICAgKiBUaGUgbmFtZSBhdHRyaWJ1dGUgb2YgdGhlIHJhZGlvIGBpbnB1dGAgZWxlbWVudHMuXG4gICAqIFRoaXMgaW5wdXQgYG5hbWVgIHNob3VsZCBiZSB1bmlxdWUgd2l0aGluIHRoZSBwYWdlLlxuICAgKiBCZWluZyB1bmlxdWUgd2l0aGluIGEgZm9ybSBpcyBpbnN1ZmZpY2llbnQgc2luY2UgdGhlIGBuYW1lYCBpcyB1c2VkIHRvIGdlbmVyYXRlZCBJRHMuXG4gICAqL1xuICBuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgdmFsdWUgY2hhbmdlcy5cbiAgICogQHBhcmFtIHtSZWFjdC5TeW50aGV0aWNFdmVudH0gZXZlbnQgVGhlIGV2ZW50IHNvdXJjZSBvZiB0aGUgY2FsbGJhY2suXG4gICAqIEBwYXJhbSB7bnVtYmVyfG51bGx9IHZhbHVlIFRoZSBuZXcgdmFsdWUuXG4gICAqL1xuICBvbkNoYW5nZTogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmdW5jdGlvbiB0aGF0IGlzIGZpcmVkIHdoZW4gdGhlIGhvdmVyIHN0YXRlIGNoYW5nZXMuXG4gICAqIEBwYXJhbSB7UmVhY3QuU3ludGhldGljRXZlbnR9IGV2ZW50IFRoZSBldmVudCBzb3VyY2Ugb2YgdGhlIGNhbGxiYWNrLlxuICAgKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgVGhlIG5ldyB2YWx1ZS5cbiAgICovXG4gIG9uQ2hhbmdlQWN0aXZlOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uTW91c2VMZWF2ZTogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbk1vdXNlTW92ZTogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBUaGUgbWluaW11bSBpbmNyZW1lbnQgdmFsdWUgY2hhbmdlIGFsbG93ZWQuXG4gICAqIEBkZWZhdWx0IDFcbiAgICovXG4gIHByZWNpc2lvbjogY2hhaW5Qcm9wVHlwZXMoUHJvcFR5cGVzLm51bWJlciwgcHJvcHMgPT4ge1xuICAgIGlmIChwcm9wcy5wcmVjaXNpb24gPCAwLjEpIHtcbiAgICAgIHJldHVybiBuZXcgRXJyb3IoWydNVUk6IFRoZSBwcm9wIGBwcmVjaXNpb25gIHNob3VsZCBiZSBhYm92ZSAwLjEuJywgJ0EgdmFsdWUgYmVsb3cgdGhpcyBsaW1pdCBoYXMgYW4gaW1wZXJjZXB0aWJsZSBpbXBhY3QuJ10uam9pbignXFxuJykpO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfSksXG4gIC8qKlxuICAgKiBSZW1vdmVzIGFsbCBob3ZlciBlZmZlY3RzIGFuZCBwb2ludGVyIGV2ZW50cy5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIHJlYWRPbmx5OiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIFRoZSBzaXplIG9mIHRoZSBjb21wb25lbnQuXG4gICAqIEBkZWZhdWx0ICdtZWRpdW0nXG4gICAqL1xuICBzaXplOiBQcm9wVHlwZXMgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqLy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ3NtYWxsJywgJ21lZGl1bScsICdsYXJnZSddKSwgUHJvcFR5cGVzLnN0cmluZ10pLFxuICAvKipcbiAgICogVGhlIHN5c3RlbSBwcm9wIHRoYXQgYWxsb3dzIGRlZmluaW5nIHN5c3RlbSBvdmVycmlkZXMgYXMgd2VsbCBhcyBhZGRpdGlvbmFsIENTUyBzdHlsZXMuXG4gICAqL1xuICBzeDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5ib29sXSkpLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pLFxuICAvKipcbiAgICogVGhlIHJhdGluZyB2YWx1ZS5cbiAgICovXG4gIHZhbHVlOiBQcm9wVHlwZXMubnVtYmVyXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgUmF0aW5nOyIsImltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3Nlcyc7XG5pbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3MgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzcyc7XG5leHBvcnQgZnVuY3Rpb24gZ2V0U2NvcGVkQ3NzQmFzZWxpbmVVdGlsaXR5Q2xhc3Moc2xvdCkge1xuICByZXR1cm4gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoJ011aVNjb3BlZENzc0Jhc2VsaW5lJywgc2xvdCk7XG59XG5jb25zdCBzY29wZWRDc3NCYXNlbGluZUNsYXNzZXMgPSBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzKCdNdWlTY29wZWRDc3NCYXNlbGluZScsIFsncm9vdCddKTtcbmV4cG9ydCBkZWZhdWx0IHNjb3BlZENzc0Jhc2VsaW5lQ2xhc3NlczsiLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJjbGFzc05hbWVcIiwgXCJjb21wb25lbnRcIiwgXCJlbmFibGVDb2xvclNjaGVtZVwiXTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCBjb21wb3NlQ2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2NvbXBvc2VDbGFzc2VzJztcbmltcG9ydCB7IHVzZURlZmF1bHRQcm9wcyB9IGZyb20gJy4uL0RlZmF1bHRQcm9wc1Byb3ZpZGVyJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnLi4vc3R5bGVzL3N0eWxlZCc7XG5pbXBvcnQgeyBodG1sLCBib2R5IH0gZnJvbSAnLi4vQ3NzQmFzZWxpbmUvQ3NzQmFzZWxpbmUnO1xuaW1wb3J0IHsgZ2V0U2NvcGVkQ3NzQmFzZWxpbmVVdGlsaXR5Q2xhc3MgfSBmcm9tICcuL3Njb3BlZENzc0Jhc2VsaW5lQ2xhc3Nlcyc7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuY29uc3QgdXNlVXRpbGl0eUNsYXNzZXMgPSBvd25lclN0YXRlID0+IHtcbiAgY29uc3Qge1xuICAgIGNsYXNzZXNcbiAgfSA9IG93bmVyU3RhdGU7XG4gIGNvbnN0IHNsb3RzID0ge1xuICAgIHJvb3Q6IFsncm9vdCddXG4gIH07XG4gIHJldHVybiBjb21wb3NlQ2xhc3NlcyhzbG90cywgZ2V0U2NvcGVkQ3NzQmFzZWxpbmVVdGlsaXR5Q2xhc3MsIGNsYXNzZXMpO1xufTtcbmNvbnN0IFNjb3BlZENzc0Jhc2VsaW5lUm9vdCA9IHN0eWxlZCgnZGl2Jywge1xuICBuYW1lOiAnTXVpU2NvcGVkQ3NzQmFzZWxpbmUnLFxuICBzbG90OiAnUm9vdCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4gc3R5bGVzLnJvb3Rcbn0pKCh7XG4gIHRoZW1lLFxuICBvd25lclN0YXRlXG59KSA9PiB7XG4gIGNvbnN0IGNvbG9yU2NoZW1lU3R5bGVzID0ge307XG4gIGlmIChvd25lclN0YXRlLmVuYWJsZUNvbG9yU2NoZW1lICYmIHRoZW1lLmNvbG9yU2NoZW1lcykge1xuICAgIE9iamVjdC5lbnRyaWVzKHRoZW1lLmNvbG9yU2NoZW1lcykuZm9yRWFjaCgoW2tleSwgc2NoZW1lXSkgPT4ge1xuICAgICAgdmFyIF9zY2hlbWUkcGFsZXR0ZTtcbiAgICAgIGNvbG9yU2NoZW1lU3R5bGVzW2AmJHt0aGVtZS5nZXRDb2xvclNjaGVtZVNlbGVjdG9yKGtleSkucmVwbGFjZSgvXFxzKiYvLCAnJyl9YF0gPSB7XG4gICAgICAgIGNvbG9yU2NoZW1lOiAoX3NjaGVtZSRwYWxldHRlID0gc2NoZW1lLnBhbGV0dGUpID09IG51bGwgPyB2b2lkIDAgOiBfc2NoZW1lJHBhbGV0dGUubW9kZVxuICAgICAgfTtcbiAgICB9KTtcbiAgfVxuICByZXR1cm4gX2V4dGVuZHMoe30sIGh0bWwodGhlbWUsIG93bmVyU3RhdGUuZW5hYmxlQ29sb3JTY2hlbWUpLCBib2R5KHRoZW1lKSwge1xuICAgICcmICosICYgKjo6YmVmb3JlLCAmICo6OmFmdGVyJzoge1xuICAgICAgYm94U2l6aW5nOiAnaW5oZXJpdCdcbiAgICB9LFxuICAgICcmIHN0cm9uZywgJiBiJzoge1xuICAgICAgZm9udFdlaWdodDogdGhlbWUudHlwb2dyYXBoeS5mb250V2VpZ2h0Qm9sZFxuICAgIH1cbiAgfSwgY29sb3JTY2hlbWVTdHlsZXMpO1xufSk7XG5jb25zdCBTY29wZWRDc3NCYXNlbGluZSA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIFNjb3BlZENzc0Jhc2VsaW5lKGluUHJvcHMsIHJlZikge1xuICBjb25zdCBwcm9wcyA9IHVzZURlZmF1bHRQcm9wcyh7XG4gICAgcHJvcHM6IGluUHJvcHMsXG4gICAgbmFtZTogJ011aVNjb3BlZENzc0Jhc2VsaW5lJ1xuICB9KTtcbiAgY29uc3Qge1xuICAgICAgY2xhc3NOYW1lLFxuICAgICAgY29tcG9uZW50ID0gJ2RpdidcbiAgICB9ID0gcHJvcHMsXG4gICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkKTtcbiAgY29uc3Qgb3duZXJTdGF0ZSA9IF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgIGNvbXBvbmVudFxuICB9KTtcbiAgY29uc3QgY2xhc3NlcyA9IHVzZVV0aWxpdHlDbGFzc2VzKG93bmVyU3RhdGUpO1xuICByZXR1cm4gLyojX19QVVJFX18qL19qc3goU2NvcGVkQ3NzQmFzZWxpbmVSb290LCBfZXh0ZW5kcyh7XG4gICAgYXM6IGNvbXBvbmVudCxcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWUpLFxuICAgIHJlZjogcmVmLFxuICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGVcbiAgfSwgb3RoZXIpKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gU2NvcGVkQ3NzQmFzZWxpbmUucHJvcFR5cGVzIC8qIHJlbW92ZS1wcm9wdHlwZXMgKi8gPSB7XG4gIC8vIOKUjOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgCBXYXJuaW5nIOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUkFxuICAvLyDilIIgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zLiDilIJcbiAgLy8g4pSCICAgIFRvIHVwZGF0ZSB0aGVtLCBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBgcG5wbSBwcm9wdHlwZXNgLiAgICAg4pSCXG4gIC8vIOKUlOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUmFxuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBIVE1MIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBjb21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcbiAgLyoqXG4gICAqIEVuYWJsZSBgY29sb3Itc2NoZW1lYCBDU1MgcHJvcGVydHkgdG8gdXNlIGB0aGVtZS5wYWxldHRlLm1vZGVgLlxuICAgKiBGb3IgbW9yZSBkZXRhaWxzLCBjaGVjayBvdXQgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL2NvbG9yLXNjaGVtZVxuICAgKiBGb3IgYnJvd3NlciBzdXBwb3J0LCBjaGVjayBvdXQgaHR0cHM6Ly9jYW5pdXNlLmNvbS8/c2VhcmNoPWNvbG9yLXNjaGVtZVxuICAgKi9cbiAgZW5hYmxlQ29sb3JTY2hlbWU6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogVGhlIHN5c3RlbSBwcm9wIHRoYXQgYWxsb3dzIGRlZmluaW5nIHN5c3RlbSBvdmVycmlkZXMgYXMgd2VsbCBhcyBhZGRpdGlvbmFsIENTUyBzdHlsZXMuXG4gICAqL1xuICBzeDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5ib29sXSkpLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgU2NvcGVkQ3NzQmFzZWxpbmU7IiwiaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzc2VzJztcbmltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzJztcbmV4cG9ydCBmdW5jdGlvbiBnZXRTZWxlY3RVdGlsaXR5Q2xhc3NlcyhzbG90KSB7XG4gIHJldHVybiBnZW5lcmF0ZVV0aWxpdHlDbGFzcygnTXVpU2VsZWN0Jywgc2xvdCk7XG59XG5jb25zdCBzZWxlY3RDbGFzc2VzID0gZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcygnTXVpU2VsZWN0JywgWydyb290JywgJ3NlbGVjdCcsICdtdWx0aXBsZScsICdmaWxsZWQnLCAnb3V0bGluZWQnLCAnc3RhbmRhcmQnLCAnZGlzYWJsZWQnLCAnZm9jdXNlZCcsICdpY29uJywgJ2ljb25PcGVuJywgJ2ljb25GaWxsZWQnLCAnaWNvbk91dGxpbmVkJywgJ2ljb25TdGFuZGFyZCcsICduYXRpdmVJbnB1dCcsICdlcnJvciddKTtcbmV4cG9ydCBkZWZhdWx0IHNlbGVjdENsYXNzZXM7IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9mb3JtYXRNdWlFcnJvck1lc3NhZ2UgZnJvbSBcIkBtdWkvdXRpbHMvZm9ybWF0TXVpRXJyb3JNZXNzYWdlXCI7XG52YXIgX3NwYW47XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJhcmlhLWRlc2NyaWJlZGJ5XCIsIFwiYXJpYS1sYWJlbFwiLCBcImF1dG9Gb2N1c1wiLCBcImF1dG9XaWR0aFwiLCBcImNoaWxkcmVuXCIsIFwiY2xhc3NOYW1lXCIsIFwiZGVmYXVsdE9wZW5cIiwgXCJkZWZhdWx0VmFsdWVcIiwgXCJkaXNhYmxlZFwiLCBcImRpc3BsYXlFbXB0eVwiLCBcImVycm9yXCIsIFwiSWNvbkNvbXBvbmVudFwiLCBcImlucHV0UmVmXCIsIFwibGFiZWxJZFwiLCBcIk1lbnVQcm9wc1wiLCBcIm11bHRpcGxlXCIsIFwibmFtZVwiLCBcIm9uQmx1clwiLCBcIm9uQ2hhbmdlXCIsIFwib25DbG9zZVwiLCBcIm9uRm9jdXNcIiwgXCJvbk9wZW5cIiwgXCJvcGVuXCIsIFwicmVhZE9ubHlcIiwgXCJyZW5kZXJWYWx1ZVwiLCBcIlNlbGVjdERpc3BsYXlQcm9wc1wiLCBcInRhYkluZGV4XCIsIFwidHlwZVwiLCBcInZhbHVlXCIsIFwidmFyaWFudFwiXTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGlzRnJhZ21lbnQgfSBmcm9tICdyZWFjdC1pcyc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgY29tcG9zZUNsYXNzZXMgZnJvbSAnQG11aS91dGlscy9jb21wb3NlQ2xhc3Nlcyc7XG5pbXBvcnQgdXNlSWQgZnJvbSAnQG11aS91dGlscy91c2VJZCc7XG5pbXBvcnQgcmVmVHlwZSBmcm9tICdAbXVpL3V0aWxzL3JlZlR5cGUnO1xuaW1wb3J0IG93bmVyRG9jdW1lbnQgZnJvbSAnLi4vdXRpbHMvb3duZXJEb2N1bWVudCc7XG5pbXBvcnQgY2FwaXRhbGl6ZSBmcm9tICcuLi91dGlscy9jYXBpdGFsaXplJztcbmltcG9ydCBNZW51IGZyb20gJy4uL01lbnUvTWVudSc7XG5pbXBvcnQgeyBuYXRpdmVTZWxlY3RTZWxlY3RTdHlsZXMsIG5hdGl2ZVNlbGVjdEljb25TdHlsZXMgfSBmcm9tICcuLi9OYXRpdmVTZWxlY3QvTmF0aXZlU2VsZWN0SW5wdXQnO1xuaW1wb3J0IHsgaXNGaWxsZWQgfSBmcm9tICcuLi9JbnB1dEJhc2UvdXRpbHMnO1xuaW1wb3J0IHN0eWxlZCwgeyBzbG90U2hvdWxkRm9yd2FyZFByb3AgfSBmcm9tICcuLi9zdHlsZXMvc3R5bGVkJztcbmltcG9ydCB1c2VGb3JrUmVmIGZyb20gJy4uL3V0aWxzL3VzZUZvcmtSZWYnO1xuaW1wb3J0IHVzZUNvbnRyb2xsZWQgZnJvbSAnLi4vdXRpbHMvdXNlQ29udHJvbGxlZCc7XG5pbXBvcnQgc2VsZWN0Q2xhc3NlcywgeyBnZXRTZWxlY3RVdGlsaXR5Q2xhc3NlcyB9IGZyb20gJy4vc2VsZWN0Q2xhc3Nlcyc7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuaW1wb3J0IHsganN4cyBhcyBfanN4cyB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuY29uc3QgU2VsZWN0U2VsZWN0ID0gc3R5bGVkKCdkaXYnLCB7XG4gIG5hbWU6ICdNdWlTZWxlY3QnLFxuICBzbG90OiAnU2VsZWN0JyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgb3duZXJTdGF0ZVxuICAgIH0gPSBwcm9wcztcbiAgICByZXR1cm4gW1xuICAgIC8vIFdpbiBzcGVjaWZpY2l0eSBvdmVyIHRoZSBpbnB1dCBiYXNlXG4gICAge1xuICAgICAgW2AmLiR7c2VsZWN0Q2xhc3Nlcy5zZWxlY3R9YF06IHN0eWxlcy5zZWxlY3RcbiAgICB9LCB7XG4gICAgICBbYCYuJHtzZWxlY3RDbGFzc2VzLnNlbGVjdH1gXTogc3R5bGVzW293bmVyU3RhdGUudmFyaWFudF1cbiAgICB9LCB7XG4gICAgICBbYCYuJHtzZWxlY3RDbGFzc2VzLmVycm9yfWBdOiBzdHlsZXMuZXJyb3JcbiAgICB9LCB7XG4gICAgICBbYCYuJHtzZWxlY3RDbGFzc2VzLm11bHRpcGxlfWBdOiBzdHlsZXMubXVsdGlwbGVcbiAgICB9XTtcbiAgfVxufSkobmF0aXZlU2VsZWN0U2VsZWN0U3R5bGVzLCB7XG4gIC8vIFdpbiBzcGVjaWZpY2l0eSBvdmVyIHRoZSBpbnB1dCBiYXNlXG4gIFtgJi4ke3NlbGVjdENsYXNzZXMuc2VsZWN0fWBdOiB7XG4gICAgaGVpZ2h0OiAnYXV0bycsXG4gICAgLy8gUmVzZXRzIGZvciBtdWx0aXBsZSBzZWxlY3Qgd2l0aCBjaGlwc1xuICAgIG1pbkhlaWdodDogJzEuNDM3NWVtJyxcbiAgICAvLyBSZXF1aXJlZCBmb3Igc2VsZWN0XFx0ZXh0LWZpZWxkIGhlaWdodCBjb25zaXN0ZW5jeVxuICAgIHRleHRPdmVyZmxvdzogJ2VsbGlwc2lzJyxcbiAgICB3aGl0ZVNwYWNlOiAnbm93cmFwJyxcbiAgICBvdmVyZmxvdzogJ2hpZGRlbidcbiAgfVxufSk7XG5jb25zdCBTZWxlY3RJY29uID0gc3R5bGVkKCdzdmcnLCB7XG4gIG5hbWU6ICdNdWlTZWxlY3QnLFxuICBzbG90OiAnSWNvbicsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9ID0gcHJvcHM7XG4gICAgcmV0dXJuIFtzdHlsZXMuaWNvbiwgb3duZXJTdGF0ZS52YXJpYW50ICYmIHN0eWxlc1tgaWNvbiR7Y2FwaXRhbGl6ZShvd25lclN0YXRlLnZhcmlhbnQpfWBdLCBvd25lclN0YXRlLm9wZW4gJiYgc3R5bGVzLmljb25PcGVuXTtcbiAgfVxufSkobmF0aXZlU2VsZWN0SWNvblN0eWxlcyk7XG5jb25zdCBTZWxlY3ROYXRpdmVJbnB1dCA9IHN0eWxlZCgnaW5wdXQnLCB7XG4gIHNob3VsZEZvcndhcmRQcm9wOiBwcm9wID0+IHNsb3RTaG91bGRGb3J3YXJkUHJvcChwcm9wKSAmJiBwcm9wICE9PSAnY2xhc3NlcycsXG4gIG5hbWU6ICdNdWlTZWxlY3QnLFxuICBzbG90OiAnTmF0aXZlSW5wdXQnLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHN0eWxlcy5uYXRpdmVJbnB1dFxufSkoe1xuICBib3R0b206IDAsXG4gIGxlZnQ6IDAsXG4gIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICBvcGFjaXR5OiAwLFxuICBwb2ludGVyRXZlbnRzOiAnbm9uZScsXG4gIHdpZHRoOiAnMTAwJScsXG4gIGJveFNpemluZzogJ2JvcmRlci1ib3gnXG59KTtcbmZ1bmN0aW9uIGFyZUVxdWFsVmFsdWVzKGEsIGIpIHtcbiAgaWYgKHR5cGVvZiBiID09PSAnb2JqZWN0JyAmJiBiICE9PSBudWxsKSB7XG4gICAgcmV0dXJuIGEgPT09IGI7XG4gIH1cblxuICAvLyBUaGUgdmFsdWUgY291bGQgYmUgYSBudW1iZXIsIHRoZSBET00gd2lsbCBzdHJpbmdpZnkgaXQgYW55d2F5LlxuICByZXR1cm4gU3RyaW5nKGEpID09PSBTdHJpbmcoYik7XG59XG5mdW5jdGlvbiBpc0VtcHR5KGRpc3BsYXkpIHtcbiAgcmV0dXJuIGRpc3BsYXkgPT0gbnVsbCB8fCB0eXBlb2YgZGlzcGxheSA9PT0gJ3N0cmluZycgJiYgIWRpc3BsYXkudHJpbSgpO1xufVxuY29uc3QgdXNlVXRpbGl0eUNsYXNzZXMgPSBvd25lclN0YXRlID0+IHtcbiAgY29uc3Qge1xuICAgIGNsYXNzZXMsXG4gICAgdmFyaWFudCxcbiAgICBkaXNhYmxlZCxcbiAgICBtdWx0aXBsZSxcbiAgICBvcGVuLFxuICAgIGVycm9yXG4gIH0gPSBvd25lclN0YXRlO1xuICBjb25zdCBzbG90cyA9IHtcbiAgICBzZWxlY3Q6IFsnc2VsZWN0JywgdmFyaWFudCwgZGlzYWJsZWQgJiYgJ2Rpc2FibGVkJywgbXVsdGlwbGUgJiYgJ211bHRpcGxlJywgZXJyb3IgJiYgJ2Vycm9yJ10sXG4gICAgaWNvbjogWydpY29uJywgYGljb24ke2NhcGl0YWxpemUodmFyaWFudCl9YCwgb3BlbiAmJiAnaWNvbk9wZW4nLCBkaXNhYmxlZCAmJiAnZGlzYWJsZWQnXSxcbiAgICBuYXRpdmVJbnB1dDogWyduYXRpdmVJbnB1dCddXG4gIH07XG4gIHJldHVybiBjb21wb3NlQ2xhc3NlcyhzbG90cywgZ2V0U2VsZWN0VXRpbGl0eUNsYXNzZXMsIGNsYXNzZXMpO1xufTtcblxuLyoqXG4gKiBAaWdub3JlIC0gaW50ZXJuYWwgY29tcG9uZW50LlxuICovXG5jb25zdCBTZWxlY3RJbnB1dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIFNlbGVjdElucHV0KHByb3BzLCByZWYpIHtcbiAgdmFyIF9NZW51UHJvcHMkc2xvdFByb3BzO1xuICBjb25zdCB7XG4gICAgICAnYXJpYS1kZXNjcmliZWRieSc6IGFyaWFEZXNjcmliZWRieSxcbiAgICAgICdhcmlhLWxhYmVsJzogYXJpYUxhYmVsLFxuICAgICAgYXV0b0ZvY3VzLFxuICAgICAgYXV0b1dpZHRoLFxuICAgICAgY2hpbGRyZW4sXG4gICAgICBjbGFzc05hbWUsXG4gICAgICBkZWZhdWx0T3BlbixcbiAgICAgIGRlZmF1bHRWYWx1ZSxcbiAgICAgIGRpc2FibGVkLFxuICAgICAgZGlzcGxheUVtcHR5LFxuICAgICAgZXJyb3IgPSBmYWxzZSxcbiAgICAgIEljb25Db21wb25lbnQsXG4gICAgICBpbnB1dFJlZjogaW5wdXRSZWZQcm9wLFxuICAgICAgbGFiZWxJZCxcbiAgICAgIE1lbnVQcm9wcyA9IHt9LFxuICAgICAgbXVsdGlwbGUsXG4gICAgICBuYW1lLFxuICAgICAgb25CbHVyLFxuICAgICAgb25DaGFuZ2UsXG4gICAgICBvbkNsb3NlLFxuICAgICAgb25Gb2N1cyxcbiAgICAgIG9uT3BlbixcbiAgICAgIG9wZW46IG9wZW5Qcm9wLFxuICAgICAgcmVhZE9ubHksXG4gICAgICByZW5kZXJWYWx1ZSxcbiAgICAgIFNlbGVjdERpc3BsYXlQcm9wcyA9IHt9LFxuICAgICAgdGFiSW5kZXg6IHRhYkluZGV4UHJvcFxuICAgICAgLy8gY2F0Y2hpbmcgYHR5cGVgIGZyb20gSW5wdXQgd2hpY2ggbWFrZXMgbm8gc2Vuc2UgZm9yIFNlbGVjdElucHV0XG4gICAgICAsXG5cbiAgICAgIHZhbHVlOiB2YWx1ZVByb3AsXG4gICAgICB2YXJpYW50ID0gJ3N0YW5kYXJkJ1xuICAgIH0gPSBwcm9wcyxcbiAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQpO1xuICBjb25zdCBbdmFsdWUsIHNldFZhbHVlU3RhdGVdID0gdXNlQ29udHJvbGxlZCh7XG4gICAgY29udHJvbGxlZDogdmFsdWVQcm9wLFxuICAgIGRlZmF1bHQ6IGRlZmF1bHRWYWx1ZSxcbiAgICBuYW1lOiAnU2VsZWN0J1xuICB9KTtcbiAgY29uc3QgW29wZW5TdGF0ZSwgc2V0T3BlblN0YXRlXSA9IHVzZUNvbnRyb2xsZWQoe1xuICAgIGNvbnRyb2xsZWQ6IG9wZW5Qcm9wLFxuICAgIGRlZmF1bHQ6IGRlZmF1bHRPcGVuLFxuICAgIG5hbWU6ICdTZWxlY3QnXG4gIH0pO1xuICBjb25zdCBpbnB1dFJlZiA9IFJlYWN0LnVzZVJlZihudWxsKTtcbiAgY29uc3QgZGlzcGxheVJlZiA9IFJlYWN0LnVzZVJlZihudWxsKTtcbiAgY29uc3QgW2Rpc3BsYXlOb2RlLCBzZXREaXNwbGF5Tm9kZV0gPSBSZWFjdC51c2VTdGF0ZShudWxsKTtcbiAgY29uc3Qge1xuICAgIGN1cnJlbnQ6IGlzT3BlbkNvbnRyb2xsZWRcbiAgfSA9IFJlYWN0LnVzZVJlZihvcGVuUHJvcCAhPSBudWxsKTtcbiAgY29uc3QgW21lbnVNaW5XaWR0aFN0YXRlLCBzZXRNZW51TWluV2lkdGhTdGF0ZV0gPSBSZWFjdC51c2VTdGF0ZSgpO1xuICBjb25zdCBoYW5kbGVSZWYgPSB1c2VGb3JrUmVmKHJlZiwgaW5wdXRSZWZQcm9wKTtcbiAgY29uc3QgaGFuZGxlRGlzcGxheVJlZiA9IFJlYWN0LnVzZUNhbGxiYWNrKG5vZGUgPT4ge1xuICAgIGRpc3BsYXlSZWYuY3VycmVudCA9IG5vZGU7XG4gICAgaWYgKG5vZGUpIHtcbiAgICAgIHNldERpc3BsYXlOb2RlKG5vZGUpO1xuICAgIH1cbiAgfSwgW10pO1xuICBjb25zdCBhbmNob3JFbGVtZW50ID0gZGlzcGxheU5vZGUgPT0gbnVsbCA/IHZvaWQgMCA6IGRpc3BsYXlOb2RlLnBhcmVudE5vZGU7XG4gIFJlYWN0LnVzZUltcGVyYXRpdmVIYW5kbGUoaGFuZGxlUmVmLCAoKSA9PiAoe1xuICAgIGZvY3VzOiAoKSA9PiB7XG4gICAgICBkaXNwbGF5UmVmLmN1cnJlbnQuZm9jdXMoKTtcbiAgICB9LFxuICAgIG5vZGU6IGlucHV0UmVmLmN1cnJlbnQsXG4gICAgdmFsdWVcbiAgfSksIFt2YWx1ZV0pO1xuXG4gIC8vIFJlc2l6ZSBtZW51IG9uIGBkZWZhdWx0T3BlbmAgYXV0b21hdGljIHRvZ2dsZS5cbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoZGVmYXVsdE9wZW4gJiYgb3BlblN0YXRlICYmIGRpc3BsYXlOb2RlICYmICFpc09wZW5Db250cm9sbGVkKSB7XG4gICAgICBzZXRNZW51TWluV2lkdGhTdGF0ZShhdXRvV2lkdGggPyBudWxsIDogYW5jaG9yRWxlbWVudC5jbGllbnRXaWR0aCk7XG4gICAgICBkaXNwbGF5UmVmLmN1cnJlbnQuZm9jdXMoKTtcbiAgICB9XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL2V4aGF1c3RpdmUtZGVwc1xuICB9LCBbZGlzcGxheU5vZGUsIGF1dG9XaWR0aF0pO1xuICAvLyBgaXNPcGVuQ29udHJvbGxlZGAgaXMgaWdub3JlZCBiZWNhdXNlIHRoZSBjb21wb25lbnQgc2hvdWxkIG5ldmVyIHN3aXRjaCBiZXR3ZWVuIGNvbnRyb2xsZWQgYW5kIHVuY29udHJvbGxlZCBtb2Rlcy5cbiAgLy8gYGRlZmF1bHRPcGVuYCBhbmQgYG9wZW5TdGF0ZWAgYXJlIGlnbm9yZWQgdG8gYXZvaWQgdW5uZWNlc3NhcnkgY2FsbGJhY2tzLlxuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChhdXRvRm9jdXMpIHtcbiAgICAgIGRpc3BsYXlSZWYuY3VycmVudC5mb2N1cygpO1xuICAgIH1cbiAgfSwgW2F1dG9Gb2N1c10pO1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmICghbGFiZWxJZCkge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgY29uc3QgbGFiZWwgPSBvd25lckRvY3VtZW50KGRpc3BsYXlSZWYuY3VycmVudCkuZ2V0RWxlbWVudEJ5SWQobGFiZWxJZCk7XG4gICAgaWYgKGxhYmVsKSB7XG4gICAgICBjb25zdCBoYW5kbGVyID0gKCkgPT4ge1xuICAgICAgICBpZiAoZ2V0U2VsZWN0aW9uKCkuaXNDb2xsYXBzZWQpIHtcbiAgICAgICAgICBkaXNwbGF5UmVmLmN1cnJlbnQuZm9jdXMoKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIGxhYmVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgaGFuZGxlcik7XG4gICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICBsYWJlbC5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIGhhbmRsZXIpO1xuICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfSwgW2xhYmVsSWRdKTtcbiAgY29uc3QgdXBkYXRlID0gKG9wZW4sIGV2ZW50KSA9PiB7XG4gICAgaWYgKG9wZW4pIHtcbiAgICAgIGlmIChvbk9wZW4pIHtcbiAgICAgICAgb25PcGVuKGV2ZW50KTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKG9uQ2xvc2UpIHtcbiAgICAgIG9uQ2xvc2UoZXZlbnQpO1xuICAgIH1cbiAgICBpZiAoIWlzT3BlbkNvbnRyb2xsZWQpIHtcbiAgICAgIHNldE1lbnVNaW5XaWR0aFN0YXRlKGF1dG9XaWR0aCA/IG51bGwgOiBhbmNob3JFbGVtZW50LmNsaWVudFdpZHRoKTtcbiAgICAgIHNldE9wZW5TdGF0ZShvcGVuKTtcbiAgICB9XG4gIH07XG4gIGNvbnN0IGhhbmRsZU1vdXNlRG93biA9IGV2ZW50ID0+IHtcbiAgICAvLyBJZ25vcmUgZXZlcnl0aGluZyBidXQgbGVmdC1jbGlja1xuICAgIGlmIChldmVudC5idXR0b24gIT09IDApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gSGlqYWNrIHRoZSBkZWZhdWx0IGZvY3VzIGJlaGF2aW9yLlxuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgZGlzcGxheVJlZi5jdXJyZW50LmZvY3VzKCk7XG4gICAgdXBkYXRlKHRydWUsIGV2ZW50KTtcbiAgfTtcbiAgY29uc3QgaGFuZGxlQ2xvc2UgPSBldmVudCA9PiB7XG4gICAgdXBkYXRlKGZhbHNlLCBldmVudCk7XG4gIH07XG4gIGNvbnN0IGNoaWxkcmVuQXJyYXkgPSBSZWFjdC5DaGlsZHJlbi50b0FycmF5KGNoaWxkcmVuKTtcblxuICAvLyBTdXBwb3J0IGF1dG9maWxsLlxuICBjb25zdCBoYW5kbGVDaGFuZ2UgPSBldmVudCA9PiB7XG4gICAgY29uc3QgY2hpbGQgPSBjaGlsZHJlbkFycmF5LmZpbmQoY2hpbGRJdGVtID0+IGNoaWxkSXRlbS5wcm9wcy52YWx1ZSA9PT0gZXZlbnQudGFyZ2V0LnZhbHVlKTtcbiAgICBpZiAoY2hpbGQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBzZXRWYWx1ZVN0YXRlKGNoaWxkLnByb3BzLnZhbHVlKTtcbiAgICBpZiAob25DaGFuZ2UpIHtcbiAgICAgIG9uQ2hhbmdlKGV2ZW50LCBjaGlsZCk7XG4gICAgfVxuICB9O1xuICBjb25zdCBoYW5kbGVJdGVtQ2xpY2sgPSBjaGlsZCA9PiBldmVudCA9PiB7XG4gICAgbGV0IG5ld1ZhbHVlO1xuXG4gICAgLy8gV2UgdXNlIHRoZSB0YWJpbmRleCBhdHRyaWJ1dGUgdG8gc2lnbmFsIHRoZSBhdmFpbGFibGUgb3B0aW9ucy5cbiAgICBpZiAoIWV2ZW50LmN1cnJlbnRUYXJnZXQuaGFzQXR0cmlidXRlKCd0YWJpbmRleCcpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChtdWx0aXBsZSkge1xuICAgICAgbmV3VmFsdWUgPSBBcnJheS5pc0FycmF5KHZhbHVlKSA/IHZhbHVlLnNsaWNlKCkgOiBbXTtcbiAgICAgIGNvbnN0IGl0ZW1JbmRleCA9IHZhbHVlLmluZGV4T2YoY2hpbGQucHJvcHMudmFsdWUpO1xuICAgICAgaWYgKGl0ZW1JbmRleCA9PT0gLTEpIHtcbiAgICAgICAgbmV3VmFsdWUucHVzaChjaGlsZC5wcm9wcy52YWx1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBuZXdWYWx1ZS5zcGxpY2UoaXRlbUluZGV4LCAxKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgbmV3VmFsdWUgPSBjaGlsZC5wcm9wcy52YWx1ZTtcbiAgICB9XG4gICAgaWYgKGNoaWxkLnByb3BzLm9uQ2xpY2spIHtcbiAgICAgIGNoaWxkLnByb3BzLm9uQ2xpY2soZXZlbnQpO1xuICAgIH1cbiAgICBpZiAodmFsdWUgIT09IG5ld1ZhbHVlKSB7XG4gICAgICBzZXRWYWx1ZVN0YXRlKG5ld1ZhbHVlKTtcbiAgICAgIGlmIChvbkNoYW5nZSkge1xuICAgICAgICAvLyBSZWRlZmluZSB0YXJnZXQgdG8gYWxsb3cgbmFtZSBhbmQgdmFsdWUgdG8gYmUgcmVhZC5cbiAgICAgICAgLy8gVGhpcyBhbGxvd3Mgc2VhbWxlc3MgaW50ZWdyYXRpb24gd2l0aCB0aGUgbW9zdCBwb3B1bGFyIGZvcm0gbGlicmFyaWVzLlxuICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vbXVpL21hdGVyaWFsLXVpL2lzc3Vlcy8xMzQ4NSNpc3N1ZWNvbW1lbnQtNjc2MDQ4NDkyXG4gICAgICAgIC8vIENsb25lIHRoZSBldmVudCB0byBub3Qgb3ZlcnJpZGUgYHRhcmdldGAgb2YgdGhlIG9yaWdpbmFsIGV2ZW50LlxuICAgICAgICBjb25zdCBuYXRpdmVFdmVudCA9IGV2ZW50Lm5hdGl2ZUV2ZW50IHx8IGV2ZW50O1xuICAgICAgICBjb25zdCBjbG9uZWRFdmVudCA9IG5ldyBuYXRpdmVFdmVudC5jb25zdHJ1Y3RvcihuYXRpdmVFdmVudC50eXBlLCBuYXRpdmVFdmVudCk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjbG9uZWRFdmVudCwgJ3RhcmdldCcsIHtcbiAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICB2YWx1ZToge1xuICAgICAgICAgICAgdmFsdWU6IG5ld1ZhbHVlLFxuICAgICAgICAgICAgbmFtZVxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIG9uQ2hhbmdlKGNsb25lZEV2ZW50LCBjaGlsZCk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmICghbXVsdGlwbGUpIHtcbiAgICAgIHVwZGF0ZShmYWxzZSwgZXZlbnQpO1xuICAgIH1cbiAgfTtcbiAgY29uc3QgaGFuZGxlS2V5RG93biA9IGV2ZW50ID0+IHtcbiAgICBpZiAoIXJlYWRPbmx5KSB7XG4gICAgICBjb25zdCB2YWxpZEtleXMgPSBbJyAnLCAnQXJyb3dVcCcsICdBcnJvd0Rvd24nLFxuICAgICAgLy8gVGhlIG5hdGl2ZSBzZWxlY3QgZG9lc24ndCByZXNwb25kIHRvIGVudGVyIG9uIG1hY09TLCBidXQgaXQncyByZWNvbW1lbmRlZCBieVxuICAgICAgLy8gaHR0cHM6Ly93d3cudzMub3JnL1dBSS9BUklBL2FwZy9wYXR0ZXJucy9jb21ib2JveC9leGFtcGxlcy9jb21ib2JveC1zZWxlY3Qtb25seS9cbiAgICAgICdFbnRlciddO1xuICAgICAgaWYgKHZhbGlkS2V5cy5pbmRleE9mKGV2ZW50LmtleSkgIT09IC0xKSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIHVwZGF0ZSh0cnVlLCBldmVudCk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuICBjb25zdCBvcGVuID0gZGlzcGxheU5vZGUgIT09IG51bGwgJiYgb3BlblN0YXRlO1xuICBjb25zdCBoYW5kbGVCbHVyID0gZXZlbnQgPT4ge1xuICAgIC8vIGlmIG9wZW4gZXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uXG4gICAgaWYgKCFvcGVuICYmIG9uQmx1cikge1xuICAgICAgLy8gUHJlYWN0IHN1cHBvcnQsIHRhcmdldCBpcyByZWFkIG9ubHkgcHJvcGVydHkgb24gYSBuYXRpdmUgZXZlbnQuXG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXZlbnQsICd0YXJnZXQnLCB7XG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICB2YWx1ZToge1xuICAgICAgICAgIHZhbHVlLFxuICAgICAgICAgIG5hbWVcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBvbkJsdXIoZXZlbnQpO1xuICAgIH1cbiAgfTtcbiAgZGVsZXRlIG90aGVyWydhcmlhLWludmFsaWQnXTtcbiAgbGV0IGRpc3BsYXk7XG4gIGxldCBkaXNwbGF5U2luZ2xlO1xuICBjb25zdCBkaXNwbGF5TXVsdGlwbGUgPSBbXTtcbiAgbGV0IGNvbXB1dGVEaXNwbGF5ID0gZmFsc2U7XG4gIGxldCBmb3VuZE1hdGNoID0gZmFsc2U7XG5cbiAgLy8gTm8gbmVlZCB0byBkaXNwbGF5IGFueSB2YWx1ZSBpZiB0aGUgZmllbGQgaXMgZW1wdHkuXG4gIGlmIChpc0ZpbGxlZCh7XG4gICAgdmFsdWVcbiAgfSkgfHwgZGlzcGxheUVtcHR5KSB7XG4gICAgaWYgKHJlbmRlclZhbHVlKSB7XG4gICAgICBkaXNwbGF5ID0gcmVuZGVyVmFsdWUodmFsdWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb21wdXRlRGlzcGxheSA9IHRydWU7XG4gICAgfVxuICB9XG4gIGNvbnN0IGl0ZW1zID0gY2hpbGRyZW5BcnJheS5tYXAoY2hpbGQgPT4ge1xuICAgIGlmICghIC8qI19fUFVSRV9fKi9SZWFjdC5pc1ZhbGlkRWxlbWVudChjaGlsZCkpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKGlzRnJhZ21lbnQoY2hpbGQpKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoW1wiTVVJOiBUaGUgU2VsZWN0IGNvbXBvbmVudCBkb2Vzbid0IGFjY2VwdCBhIEZyYWdtZW50IGFzIGEgY2hpbGQuXCIsICdDb25zaWRlciBwcm92aWRpbmcgYW4gYXJyYXkgaW5zdGVhZC4nXS5qb2luKCdcXG4nKSk7XG4gICAgICB9XG4gICAgfVxuICAgIGxldCBzZWxlY3RlZDtcbiAgICBpZiAobXVsdGlwbGUpIHtcbiAgICAgIGlmICghQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGBNVUk6IFRoZSBcXGB2YWx1ZVxcYCBwcm9wIG11c3QgYmUgYW4gYXJyYXkgd2hlbiB1c2luZyB0aGUgXFxgU2VsZWN0XFxgIGNvbXBvbmVudCB3aXRoIFxcYG11bHRpcGxlXFxgLmAgOiBfZm9ybWF0TXVpRXJyb3JNZXNzYWdlKDIpKTtcbiAgICAgIH1cbiAgICAgIHNlbGVjdGVkID0gdmFsdWUuc29tZSh2ID0+IGFyZUVxdWFsVmFsdWVzKHYsIGNoaWxkLnByb3BzLnZhbHVlKSk7XG4gICAgICBpZiAoc2VsZWN0ZWQgJiYgY29tcHV0ZURpc3BsYXkpIHtcbiAgICAgICAgZGlzcGxheU11bHRpcGxlLnB1c2goY2hpbGQucHJvcHMuY2hpbGRyZW4pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBzZWxlY3RlZCA9IGFyZUVxdWFsVmFsdWVzKHZhbHVlLCBjaGlsZC5wcm9wcy52YWx1ZSk7XG4gICAgICBpZiAoc2VsZWN0ZWQgJiYgY29tcHV0ZURpc3BsYXkpIHtcbiAgICAgICAgZGlzcGxheVNpbmdsZSA9IGNoaWxkLnByb3BzLmNoaWxkcmVuO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoc2VsZWN0ZWQpIHtcbiAgICAgIGZvdW5kTWF0Y2ggPSB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNsb25lRWxlbWVudChjaGlsZCwge1xuICAgICAgJ2FyaWEtc2VsZWN0ZWQnOiBzZWxlY3RlZCA/ICd0cnVlJyA6ICdmYWxzZScsXG4gICAgICBvbkNsaWNrOiBoYW5kbGVJdGVtQ2xpY2soY2hpbGQpLFxuICAgICAgb25LZXlVcDogZXZlbnQgPT4ge1xuICAgICAgICBpZiAoZXZlbnQua2V5ID09PSAnICcpIHtcbiAgICAgICAgICAvLyBvdGhlcndpc2Ugb3VyIE1lbnVJdGVtcyBkaXNwYXRjaGVzIGEgY2xpY2sgZXZlbnRcbiAgICAgICAgICAvLyBpdCdzIG5vdCBiZWhhdmlvciBvZiB0aGUgbmF0aXZlIDxvcHRpb24+IGFuZCBjYXVzZXNcbiAgICAgICAgICAvLyB0aGUgc2VsZWN0IHRvIGNsb3NlIGltbWVkaWF0ZWx5IHNpbmNlIHdlIG9wZW4gb24gc3BhY2Uga2V5ZG93blxuICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNoaWxkLnByb3BzLm9uS2V5VXApIHtcbiAgICAgICAgICBjaGlsZC5wcm9wcy5vbktleVVwKGV2ZW50KTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHJvbGU6ICdvcHRpb24nLFxuICAgICAgc2VsZWN0ZWQsXG4gICAgICB2YWx1ZTogdW5kZWZpbmVkLFxuICAgICAgLy8gVGhlIHZhbHVlIGlzIG1vc3QgbGlrZWx5IG5vdCBhIHZhbGlkIEhUTUwgYXR0cmlidXRlLlxuICAgICAgJ2RhdGEtdmFsdWUnOiBjaGlsZC5wcm9wcy52YWx1ZSAvLyBJbnN0ZWFkLCB3ZSBwcm92aWRlIGl0IGFzIGEgZGF0YSBhdHRyaWJ1dGUuXG4gICAgfSk7XG4gIH0pO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9ydWxlcy1vZi1ob29rc1xuICAgIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICBpZiAoIWZvdW5kTWF0Y2ggJiYgIW11bHRpcGxlICYmIHZhbHVlICE9PSAnJykge1xuICAgICAgICBjb25zdCB2YWx1ZXMgPSBjaGlsZHJlbkFycmF5Lm1hcChjaGlsZCA9PiBjaGlsZC5wcm9wcy52YWx1ZSk7XG4gICAgICAgIGNvbnNvbGUud2FybihbYE1VSTogWW91IGhhdmUgcHJvdmlkZWQgYW4gb3V0LW9mLXJhbmdlIHZhbHVlIFxcYCR7dmFsdWV9XFxgIGZvciB0aGUgc2VsZWN0ICR7bmFtZSA/IGAobmFtZT1cIiR7bmFtZX1cIikgYCA6ICcnfWNvbXBvbmVudC5gLCBcIkNvbnNpZGVyIHByb3ZpZGluZyBhIHZhbHVlIHRoYXQgbWF0Y2hlcyBvbmUgb2YgdGhlIGF2YWlsYWJsZSBvcHRpb25zIG9yICcnLlwiLCBgVGhlIGF2YWlsYWJsZSB2YWx1ZXMgYXJlICR7dmFsdWVzLmZpbHRlcih4ID0+IHggIT0gbnVsbCkubWFwKHggPT4gYFxcYCR7eH1cXGBgKS5qb2luKCcsICcpIHx8ICdcIlwiJ30uYF0uam9pbignXFxuJykpO1xuICAgICAgfVxuICAgIH0sIFtmb3VuZE1hdGNoLCBjaGlsZHJlbkFycmF5LCBtdWx0aXBsZSwgbmFtZSwgdmFsdWVdKTtcbiAgfVxuICBpZiAoY29tcHV0ZURpc3BsYXkpIHtcbiAgICBpZiAobXVsdGlwbGUpIHtcbiAgICAgIGlmIChkaXNwbGF5TXVsdGlwbGUubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIGRpc3BsYXkgPSBudWxsO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGlzcGxheSA9IGRpc3BsYXlNdWx0aXBsZS5yZWR1Y2UoKG91dHB1dCwgY2hpbGQsIGluZGV4KSA9PiB7XG4gICAgICAgICAgb3V0cHV0LnB1c2goY2hpbGQpO1xuICAgICAgICAgIGlmIChpbmRleCA8IGRpc3BsYXlNdWx0aXBsZS5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgICBvdXRwdXQucHVzaCgnLCAnKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIG91dHB1dDtcbiAgICAgICAgfSwgW10pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBkaXNwbGF5ID0gZGlzcGxheVNpbmdsZTtcbiAgICB9XG4gIH1cblxuICAvLyBBdm9pZCBwZXJmb3JtaW5nIGEgbGF5b3V0IGNvbXB1dGF0aW9uIGluIHRoZSByZW5kZXIgbWV0aG9kLlxuICBsZXQgbWVudU1pbldpZHRoID0gbWVudU1pbldpZHRoU3RhdGU7XG4gIGlmICghYXV0b1dpZHRoICYmIGlzT3BlbkNvbnRyb2xsZWQgJiYgZGlzcGxheU5vZGUpIHtcbiAgICBtZW51TWluV2lkdGggPSBhbmNob3JFbGVtZW50LmNsaWVudFdpZHRoO1xuICB9XG4gIGxldCB0YWJJbmRleDtcbiAgaWYgKHR5cGVvZiB0YWJJbmRleFByb3AgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgdGFiSW5kZXggPSB0YWJJbmRleFByb3A7XG4gIH0gZWxzZSB7XG4gICAgdGFiSW5kZXggPSBkaXNhYmxlZCA/IG51bGwgOiAwO1xuICB9XG4gIGNvbnN0IGJ1dHRvbklkID0gU2VsZWN0RGlzcGxheVByb3BzLmlkIHx8IChuYW1lID8gYG11aS1jb21wb25lbnQtc2VsZWN0LSR7bmFtZX1gIDogdW5kZWZpbmVkKTtcbiAgY29uc3Qgb3duZXJTdGF0ZSA9IF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgIHZhcmlhbnQsXG4gICAgdmFsdWUsXG4gICAgb3BlbixcbiAgICBlcnJvclxuICB9KTtcbiAgY29uc3QgY2xhc3NlcyA9IHVzZVV0aWxpdHlDbGFzc2VzKG93bmVyU3RhdGUpO1xuICBjb25zdCBwYXBlclByb3BzID0gX2V4dGVuZHMoe30sIE1lbnVQcm9wcy5QYXBlclByb3BzLCAoX01lbnVQcm9wcyRzbG90UHJvcHMgPSBNZW51UHJvcHMuc2xvdFByb3BzKSA9PSBudWxsID8gdm9pZCAwIDogX01lbnVQcm9wcyRzbG90UHJvcHMucGFwZXIpO1xuICBjb25zdCBsaXN0Ym94SWQgPSB1c2VJZCgpO1xuICByZXR1cm4gLyojX19QVVJFX18qL19qc3hzKFJlYWN0LkZyYWdtZW50LCB7XG4gICAgY2hpbGRyZW46IFsvKiNfX1BVUkVfXyovX2pzeChTZWxlY3RTZWxlY3QsIF9leHRlbmRzKHtcbiAgICAgIHJlZjogaGFuZGxlRGlzcGxheVJlZixcbiAgICAgIHRhYkluZGV4OiB0YWJJbmRleCxcbiAgICAgIHJvbGU6IFwiY29tYm9ib3hcIixcbiAgICAgIFwiYXJpYS1jb250cm9sc1wiOiBsaXN0Ym94SWQsXG4gICAgICBcImFyaWEtZGlzYWJsZWRcIjogZGlzYWJsZWQgPyAndHJ1ZScgOiB1bmRlZmluZWQsXG4gICAgICBcImFyaWEtZXhwYW5kZWRcIjogb3BlbiA/ICd0cnVlJyA6ICdmYWxzZScsXG4gICAgICBcImFyaWEtaGFzcG9wdXBcIjogXCJsaXN0Ym94XCIsXG4gICAgICBcImFyaWEtbGFiZWxcIjogYXJpYUxhYmVsLFxuICAgICAgXCJhcmlhLWxhYmVsbGVkYnlcIjogW2xhYmVsSWQsIGJ1dHRvbklkXS5maWx0ZXIoQm9vbGVhbikuam9pbignICcpIHx8IHVuZGVmaW5lZCxcbiAgICAgIFwiYXJpYS1kZXNjcmliZWRieVwiOiBhcmlhRGVzY3JpYmVkYnksXG4gICAgICBvbktleURvd246IGhhbmRsZUtleURvd24sXG4gICAgICBvbk1vdXNlRG93bjogZGlzYWJsZWQgfHwgcmVhZE9ubHkgPyBudWxsIDogaGFuZGxlTW91c2VEb3duLFxuICAgICAgb25CbHVyOiBoYW5kbGVCbHVyLFxuICAgICAgb25Gb2N1czogb25Gb2N1c1xuICAgIH0sIFNlbGVjdERpc3BsYXlQcm9wcywge1xuICAgICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZSxcbiAgICAgIGNsYXNzTmFtZTogY2xzeChTZWxlY3REaXNwbGF5UHJvcHMuY2xhc3NOYW1lLCBjbGFzc2VzLnNlbGVjdCwgY2xhc3NOYW1lKVxuICAgICAgLy8gVGhlIGlkIGlzIHJlcXVpcmVkIGZvciBwcm9wZXIgYTExeVxuICAgICAgLFxuICAgICAgaWQ6IGJ1dHRvbklkLFxuICAgICAgY2hpbGRyZW46IGlzRW1wdHkoZGlzcGxheSkgPyAvLyBub3RyYW5zbGF0ZSBuZWVkZWQgd2hpbGUgR29vZ2xlIFRyYW5zbGF0ZSB3aWxsIG5vdCBmaXggemVyby13aWR0aCBzcGFjZSBpc3N1ZVxuICAgICAgX3NwYW4gfHwgKF9zcGFuID0gLyojX19QVVJFX18qL19qc3goXCJzcGFuXCIsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBcIm5vdHJhbnNsYXRlXCIsXG4gICAgICAgIGNoaWxkcmVuOiBcIlxcdTIwMEJcIlxuICAgICAgfSkpIDogZGlzcGxheVxuICAgIH0pKSwgLyojX19QVVJFX18qL19qc3goU2VsZWN0TmF0aXZlSW5wdXQsIF9leHRlbmRzKHtcbiAgICAgIFwiYXJpYS1pbnZhbGlkXCI6IGVycm9yLFxuICAgICAgdmFsdWU6IEFycmF5LmlzQXJyYXkodmFsdWUpID8gdmFsdWUuam9pbignLCcpIDogdmFsdWUsXG4gICAgICBuYW1lOiBuYW1lLFxuICAgICAgcmVmOiBpbnB1dFJlZixcbiAgICAgIFwiYXJpYS1oaWRkZW5cIjogdHJ1ZSxcbiAgICAgIG9uQ2hhbmdlOiBoYW5kbGVDaGFuZ2UsXG4gICAgICB0YWJJbmRleDogLTEsXG4gICAgICBkaXNhYmxlZDogZGlzYWJsZWQsXG4gICAgICBjbGFzc05hbWU6IGNsYXNzZXMubmF0aXZlSW5wdXQsXG4gICAgICBhdXRvRm9jdXM6IGF1dG9Gb2N1cyxcbiAgICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGVcbiAgICB9LCBvdGhlcikpLCAvKiNfX1BVUkVfXyovX2pzeChTZWxlY3RJY29uLCB7XG4gICAgICBhczogSWNvbkNvbXBvbmVudCxcbiAgICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5pY29uLFxuICAgICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZVxuICAgIH0pLCAvKiNfX1BVUkVfXyovX2pzeChNZW51LCBfZXh0ZW5kcyh7XG4gICAgICBpZDogYG1lbnUtJHtuYW1lIHx8ICcnfWAsXG4gICAgICBhbmNob3JFbDogYW5jaG9yRWxlbWVudCxcbiAgICAgIG9wZW46IG9wZW4sXG4gICAgICBvbkNsb3NlOiBoYW5kbGVDbG9zZSxcbiAgICAgIGFuY2hvck9yaWdpbjoge1xuICAgICAgICB2ZXJ0aWNhbDogJ2JvdHRvbScsXG4gICAgICAgIGhvcml6b250YWw6ICdjZW50ZXInXG4gICAgICB9LFxuICAgICAgdHJhbnNmb3JtT3JpZ2luOiB7XG4gICAgICAgIHZlcnRpY2FsOiAndG9wJyxcbiAgICAgICAgaG9yaXpvbnRhbDogJ2NlbnRlcidcbiAgICAgIH1cbiAgICB9LCBNZW51UHJvcHMsIHtcbiAgICAgIE1lbnVMaXN0UHJvcHM6IF9leHRlbmRzKHtcbiAgICAgICAgJ2FyaWEtbGFiZWxsZWRieSc6IGxhYmVsSWQsXG4gICAgICAgIHJvbGU6ICdsaXN0Ym94JyxcbiAgICAgICAgJ2FyaWEtbXVsdGlzZWxlY3RhYmxlJzogbXVsdGlwbGUgPyAndHJ1ZScgOiB1bmRlZmluZWQsXG4gICAgICAgIGRpc2FibGVMaXN0V3JhcDogdHJ1ZSxcbiAgICAgICAgaWQ6IGxpc3Rib3hJZFxuICAgICAgfSwgTWVudVByb3BzLk1lbnVMaXN0UHJvcHMpLFxuICAgICAgc2xvdFByb3BzOiBfZXh0ZW5kcyh7fSwgTWVudVByb3BzLnNsb3RQcm9wcywge1xuICAgICAgICBwYXBlcjogX2V4dGVuZHMoe30sIHBhcGVyUHJvcHMsIHtcbiAgICAgICAgICBzdHlsZTogX2V4dGVuZHMoe1xuICAgICAgICAgICAgbWluV2lkdGg6IG1lbnVNaW5XaWR0aFxuICAgICAgICAgIH0sIHBhcGVyUHJvcHMgIT0gbnVsbCA/IHBhcGVyUHJvcHMuc3R5bGUgOiBudWxsKVxuICAgICAgICB9KVxuICAgICAgfSksXG4gICAgICBjaGlsZHJlbjogaXRlbXNcbiAgICB9KSldXG4gIH0pO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBTZWxlY3RJbnB1dC5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICAnYXJpYS1kZXNjcmliZWRieSc6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICAnYXJpYS1sYWJlbCc6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBhdXRvRm9jdXM6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgd2lkdGggb2YgdGhlIHBvcG92ZXIgd2lsbCBhdXRvbWF0aWNhbGx5IGJlIHNldCBhY2NvcmRpbmcgdG8gdGhlIGl0ZW1zIGluc2lkZSB0aGVcbiAgICogbWVudSwgb3RoZXJ3aXNlIGl0IHdpbGwgYmUgYXQgbGVhc3QgdGhlIHdpZHRoIG9mIHRoZSBzZWxlY3QgaW5wdXQuXG4gICAqL1xuICBhdXRvV2lkdGg6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogVGhlIG9wdGlvbiBlbGVtZW50cyB0byBwb3B1bGF0ZSB0aGUgc2VsZWN0IHdpdGguXG4gICAqIENhbiBiZSBzb21lIGA8TWVudUl0ZW0+YCBlbGVtZW50cy5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG4gIC8qKlxuICAgKiBUaGUgQ1NTIGNsYXNzIG5hbWUgb2YgdGhlIHNlbGVjdCBlbGVtZW50LlxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgY29tcG9uZW50IGlzIHRvZ2dsZWQgb24gbW91bnQuIFVzZSB3aGVuIHRoZSBjb21wb25lbnQgb3BlbiBzdGF0ZSBpcyBub3QgY29udHJvbGxlZC5cbiAgICogWW91IGNhbiBvbmx5IHVzZSBpdCB3aGVuIHRoZSBgbmF0aXZlYCBwcm9wIGlzIGBmYWxzZWAgKGRlZmF1bHQpLlxuICAgKi9cbiAgZGVmYXVsdE9wZW46IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogVGhlIGRlZmF1bHQgdmFsdWUuIFVzZSB3aGVuIHRoZSBjb21wb25lbnQgaXMgbm90IGNvbnRyb2xsZWQuXG4gICAqL1xuICBkZWZhdWx0VmFsdWU6IFByb3BUeXBlcy5hbnksXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBzZWxlY3QgaXMgZGlzYWJsZWQuXG4gICAqL1xuICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBzZWxlY3RlZCBpdGVtIGlzIGRpc3BsYXllZCBldmVuIGlmIGl0cyB2YWx1ZSBpcyBlbXB0eS5cbiAgICovXG4gIGRpc3BsYXlFbXB0eTogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBgc2VsZWN0IGlucHV0YCB3aWxsIGluZGljYXRlIGFuIGVycm9yLlxuICAgKi9cbiAgZXJyb3I6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogVGhlIGljb24gdGhhdCBkaXNwbGF5cyB0aGUgYXJyb3cuXG4gICAqL1xuICBJY29uQ29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUuaXNSZXF1aXJlZCxcbiAgLyoqXG4gICAqIEltcGVyYXRpdmUgaGFuZGxlIGltcGxlbWVudGluZyBgeyB2YWx1ZTogVCwgbm9kZTogSFRNTEVsZW1lbnQsIGZvY3VzKCk6IHZvaWQgfWBcbiAgICogRXF1aXZhbGVudCB0byBgcmVmYFxuICAgKi9cbiAgaW5wdXRSZWY6IHJlZlR5cGUsXG4gIC8qKlxuICAgKiBUaGUgSUQgb2YgYW4gZWxlbWVudCB0aGF0IGFjdHMgYXMgYW4gYWRkaXRpb25hbCBsYWJlbC4gVGhlIFNlbGVjdCB3aWxsXG4gICAqIGJlIGxhYmVsbGVkIGJ5IHRoZSBhZGRpdGlvbmFsIGxhYmVsIGFuZCB0aGUgc2VsZWN0ZWQgdmFsdWUuXG4gICAqL1xuICBsYWJlbElkOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogUHJvcHMgYXBwbGllZCB0byB0aGUgW2BNZW51YF0oL21hdGVyaWFsLXVpL2FwaS9tZW51LykgZWxlbWVudC5cbiAgICovXG4gIE1lbnVQcm9wczogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgYHZhbHVlYCBtdXN0IGJlIGFuIGFycmF5IGFuZCB0aGUgbWVudSB3aWxsIHN1cHBvcnQgbXVsdGlwbGUgc2VsZWN0aW9ucy5cbiAgICovXG4gIG11bHRpcGxlOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIE5hbWUgYXR0cmlidXRlIG9mIHRoZSBgc2VsZWN0YCBvciBoaWRkZW4gYGlucHV0YCBlbGVtZW50LlxuICAgKi9cbiAgbmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uQmx1cjogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIGEgbWVudSBpdGVtIGlzIHNlbGVjdGVkLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gZXZlbnQgVGhlIGV2ZW50IHNvdXJjZSBvZiB0aGUgY2FsbGJhY2suXG4gICAqIFlvdSBjYW4gcHVsbCBvdXQgdGhlIG5ldyB2YWx1ZSBieSBhY2Nlc3NpbmcgYGV2ZW50LnRhcmdldC52YWx1ZWAgKGFueSkuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBbY2hpbGRdIFRoZSByZWFjdCBlbGVtZW50IHRoYXQgd2FzIHNlbGVjdGVkLlxuICAgKi9cbiAgb25DaGFuZ2U6IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgY29tcG9uZW50IHJlcXVlc3RzIHRvIGJlIGNsb3NlZC5cbiAgICogVXNlIGluIGNvbnRyb2xsZWQgbW9kZSAoc2VlIG9wZW4pLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gZXZlbnQgVGhlIGV2ZW50IHNvdXJjZSBvZiB0aGUgY2FsbGJhY2suXG4gICAqL1xuICBvbkNsb3NlOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uRm9jdXM6IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgY29tcG9uZW50IHJlcXVlc3RzIHRvIGJlIG9wZW5lZC5cbiAgICogVXNlIGluIGNvbnRyb2xsZWQgbW9kZSAoc2VlIG9wZW4pLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gZXZlbnQgVGhlIGV2ZW50IHNvdXJjZSBvZiB0aGUgY2FsbGJhY2suXG4gICAqL1xuICBvbk9wZW46IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgY29tcG9uZW50IGlzIHNob3duLlxuICAgKi9cbiAgb3BlbjogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICByZWFkT25seTogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBSZW5kZXIgdGhlIHNlbGVjdGVkIHZhbHVlLlxuICAgKlxuICAgKiBAcGFyYW0ge2FueX0gdmFsdWUgVGhlIGB2YWx1ZWAgcHJvdmlkZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogQHJldHVybnMge1JlYWN0Tm9kZX1cbiAgICovXG4gIHJlbmRlclZhbHVlOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIFByb3BzIGFwcGxpZWQgdG8gdGhlIGNsaWNrYWJsZSBkaXYgZWxlbWVudC5cbiAgICovXG4gIFNlbGVjdERpc3BsYXlQcm9wczogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHRhYkluZGV4OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc3RyaW5nXSksXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICB0eXBlOiBQcm9wVHlwZXMuYW55LFxuICAvKipcbiAgICogVGhlIGlucHV0IHZhbHVlLlxuICAgKi9cbiAgdmFsdWU6IFByb3BUeXBlcy5hbnksXG4gIC8qKlxuICAgKiBUaGUgdmFyaWFudCB0byB1c2UuXG4gICAqL1xuICB2YXJpYW50OiBQcm9wVHlwZXMub25lT2YoWydzdGFuZGFyZCcsICdvdXRsaW5lZCcsICdmaWxsZWQnXSlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCBTZWxlY3RJbnB1dDsiLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJhdXRvV2lkdGhcIiwgXCJjaGlsZHJlblwiLCBcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJkZWZhdWx0T3BlblwiLCBcImRpc3BsYXlFbXB0eVwiLCBcIkljb25Db21wb25lbnRcIiwgXCJpZFwiLCBcImlucHV0XCIsIFwiaW5wdXRQcm9wc1wiLCBcImxhYmVsXCIsIFwibGFiZWxJZFwiLCBcIk1lbnVQcm9wc1wiLCBcIm11bHRpcGxlXCIsIFwibmF0aXZlXCIsIFwib25DbG9zZVwiLCBcIm9uT3BlblwiLCBcIm9wZW5cIiwgXCJyZW5kZXJWYWx1ZVwiLCBcIlNlbGVjdERpc3BsYXlQcm9wc1wiLCBcInZhcmlhbnRcIl0sXG4gIF9leGNsdWRlZDIgPSBbXCJyb290XCJdO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IGRlZXBtZXJnZSBmcm9tICdAbXVpL3V0aWxzL2RlZXBtZXJnZSc7XG5pbXBvcnQgU2VsZWN0SW5wdXQgZnJvbSAnLi9TZWxlY3RJbnB1dCc7XG5pbXBvcnQgZm9ybUNvbnRyb2xTdGF0ZSBmcm9tICcuLi9Gb3JtQ29udHJvbC9mb3JtQ29udHJvbFN0YXRlJztcbmltcG9ydCB1c2VGb3JtQ29udHJvbCBmcm9tICcuLi9Gb3JtQ29udHJvbC91c2VGb3JtQ29udHJvbCc7XG5pbXBvcnQgQXJyb3dEcm9wRG93bkljb24gZnJvbSAnLi4vaW50ZXJuYWwvc3ZnLWljb25zL0Fycm93RHJvcERvd24nO1xuaW1wb3J0IElucHV0IGZyb20gJy4uL0lucHV0JztcbmltcG9ydCBOYXRpdmVTZWxlY3RJbnB1dCBmcm9tICcuLi9OYXRpdmVTZWxlY3QvTmF0aXZlU2VsZWN0SW5wdXQnO1xuaW1wb3J0IEZpbGxlZElucHV0IGZyb20gJy4uL0ZpbGxlZElucHV0JztcbmltcG9ydCBPdXRsaW5lZElucHV0IGZyb20gJy4uL091dGxpbmVkSW5wdXQnO1xuaW1wb3J0IHsgdXNlRGVmYXVsdFByb3BzIH0gZnJvbSAnLi4vRGVmYXVsdFByb3BzUHJvdmlkZXInO1xuaW1wb3J0IHVzZUZvcmtSZWYgZnJvbSAnLi4vdXRpbHMvdXNlRm9ya1JlZic7XG5pbXBvcnQgc3R5bGVkLCB7IHJvb3RTaG91bGRGb3J3YXJkUHJvcCB9IGZyb20gJy4uL3N0eWxlcy9zdHlsZWQnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmNvbnN0IHVzZVV0aWxpdHlDbGFzc2VzID0gb3duZXJTdGF0ZSA9PiB7XG4gIGNvbnN0IHtcbiAgICBjbGFzc2VzXG4gIH0gPSBvd25lclN0YXRlO1xuICByZXR1cm4gY2xhc3Nlcztcbn07XG5jb25zdCBzdHlsZWRSb290Q29uZmlnID0ge1xuICBuYW1lOiAnTXVpU2VsZWN0JyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiBzdHlsZXMucm9vdCxcbiAgc2hvdWxkRm9yd2FyZFByb3A6IHByb3AgPT4gcm9vdFNob3VsZEZvcndhcmRQcm9wKHByb3ApICYmIHByb3AgIT09ICd2YXJpYW50JyxcbiAgc2xvdDogJ1Jvb3QnXG59O1xuY29uc3QgU3R5bGVkSW5wdXQgPSBzdHlsZWQoSW5wdXQsIHN0eWxlZFJvb3RDb25maWcpKCcnKTtcbmNvbnN0IFN0eWxlZE91dGxpbmVkSW5wdXQgPSBzdHlsZWQoT3V0bGluZWRJbnB1dCwgc3R5bGVkUm9vdENvbmZpZykoJycpO1xuY29uc3QgU3R5bGVkRmlsbGVkSW5wdXQgPSBzdHlsZWQoRmlsbGVkSW5wdXQsIHN0eWxlZFJvb3RDb25maWcpKCcnKTtcbmNvbnN0IFNlbGVjdCA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIFNlbGVjdChpblByb3BzLCByZWYpIHtcbiAgY29uc3QgcHJvcHMgPSB1c2VEZWZhdWx0UHJvcHMoe1xuICAgIG5hbWU6ICdNdWlTZWxlY3QnLFxuICAgIHByb3BzOiBpblByb3BzXG4gIH0pO1xuICBjb25zdCB7XG4gICAgICBhdXRvV2lkdGggPSBmYWxzZSxcbiAgICAgIGNoaWxkcmVuLFxuICAgICAgY2xhc3NlczogY2xhc3Nlc1Byb3AgPSB7fSxcbiAgICAgIGNsYXNzTmFtZSxcbiAgICAgIGRlZmF1bHRPcGVuID0gZmFsc2UsXG4gICAgICBkaXNwbGF5RW1wdHkgPSBmYWxzZSxcbiAgICAgIEljb25Db21wb25lbnQgPSBBcnJvd0Ryb3BEb3duSWNvbixcbiAgICAgIGlkLFxuICAgICAgaW5wdXQsXG4gICAgICBpbnB1dFByb3BzLFxuICAgICAgbGFiZWwsXG4gICAgICBsYWJlbElkLFxuICAgICAgTWVudVByb3BzLFxuICAgICAgbXVsdGlwbGUgPSBmYWxzZSxcbiAgICAgIG5hdGl2ZSA9IGZhbHNlLFxuICAgICAgb25DbG9zZSxcbiAgICAgIG9uT3BlbixcbiAgICAgIG9wZW4sXG4gICAgICByZW5kZXJWYWx1ZSxcbiAgICAgIFNlbGVjdERpc3BsYXlQcm9wcyxcbiAgICAgIHZhcmlhbnQ6IHZhcmlhbnRQcm9wID0gJ291dGxpbmVkJ1xuICAgIH0gPSBwcm9wcyxcbiAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQpO1xuICBjb25zdCBpbnB1dENvbXBvbmVudCA9IG5hdGl2ZSA/IE5hdGl2ZVNlbGVjdElucHV0IDogU2VsZWN0SW5wdXQ7XG4gIGNvbnN0IG11aUZvcm1Db250cm9sID0gdXNlRm9ybUNvbnRyb2woKTtcbiAgY29uc3QgZmNzID0gZm9ybUNvbnRyb2xTdGF0ZSh7XG4gICAgcHJvcHMsXG4gICAgbXVpRm9ybUNvbnRyb2wsXG4gICAgc3RhdGVzOiBbJ3ZhcmlhbnQnLCAnZXJyb3InXVxuICB9KTtcbiAgY29uc3QgdmFyaWFudCA9IGZjcy52YXJpYW50IHx8IHZhcmlhbnRQcm9wO1xuICBjb25zdCBvd25lclN0YXRlID0gX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgdmFyaWFudCxcbiAgICBjbGFzc2VzOiBjbGFzc2VzUHJvcFxuICB9KTtcbiAgY29uc3QgY2xhc3NlcyA9IHVzZVV0aWxpdHlDbGFzc2VzKG93bmVyU3RhdGUpO1xuICBjb25zdCByZXN0T2ZDbGFzc2VzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoY2xhc3NlcywgX2V4Y2x1ZGVkMik7XG4gIGNvbnN0IElucHV0Q29tcG9uZW50ID0gaW5wdXQgfHwge1xuICAgIHN0YW5kYXJkOiAvKiNfX1BVUkVfXyovX2pzeChTdHlsZWRJbnB1dCwge1xuICAgICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZVxuICAgIH0pLFxuICAgIG91dGxpbmVkOiAvKiNfX1BVUkVfXyovX2pzeChTdHlsZWRPdXRsaW5lZElucHV0LCB7XG4gICAgICBsYWJlbDogbGFiZWwsXG4gICAgICBvd25lclN0YXRlOiBvd25lclN0YXRlXG4gICAgfSksXG4gICAgZmlsbGVkOiAvKiNfX1BVUkVfXyovX2pzeChTdHlsZWRGaWxsZWRJbnB1dCwge1xuICAgICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZVxuICAgIH0pXG4gIH1bdmFyaWFudF07XG4gIGNvbnN0IGlucHV0Q29tcG9uZW50UmVmID0gdXNlRm9ya1JlZihyZWYsIElucHV0Q29tcG9uZW50LnJlZik7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeChSZWFjdC5GcmFnbWVudCwge1xuICAgIGNoaWxkcmVuOiAvKiNfX1BVUkVfXyovUmVhY3QuY2xvbmVFbGVtZW50KElucHV0Q29tcG9uZW50LCBfZXh0ZW5kcyh7XG4gICAgICAvLyBNb3N0IG9mIHRoZSBsb2dpYyBpcyBpbXBsZW1lbnRlZCBpbiBgU2VsZWN0SW5wdXRgLlxuICAgICAgLy8gVGhlIGBTZWxlY3RgIGNvbXBvbmVudCBpcyBhIHNpbXBsZSBBUEkgd3JhcHBlciB0byBleHBvc2Ugc29tZXRoaW5nIGJldHRlciB0byBwbGF5IHdpdGguXG4gICAgICBpbnB1dENvbXBvbmVudCxcbiAgICAgIGlucHV0UHJvcHM6IF9leHRlbmRzKHtcbiAgICAgICAgY2hpbGRyZW4sXG4gICAgICAgIGVycm9yOiBmY3MuZXJyb3IsXG4gICAgICAgIEljb25Db21wb25lbnQsXG4gICAgICAgIHZhcmlhbnQsXG4gICAgICAgIHR5cGU6IHVuZGVmaW5lZCxcbiAgICAgICAgLy8gV2UgcmVuZGVyIGEgc2VsZWN0LiBXZSBjYW4gaWdub3JlIHRoZSB0eXBlIHByb3ZpZGVkIGJ5IHRoZSBgSW5wdXRgLlxuICAgICAgICBtdWx0aXBsZVxuICAgICAgfSwgbmF0aXZlID8ge1xuICAgICAgICBpZFxuICAgICAgfSA6IHtcbiAgICAgICAgYXV0b1dpZHRoLFxuICAgICAgICBkZWZhdWx0T3BlbixcbiAgICAgICAgZGlzcGxheUVtcHR5LFxuICAgICAgICBsYWJlbElkLFxuICAgICAgICBNZW51UHJvcHMsXG4gICAgICAgIG9uQ2xvc2UsXG4gICAgICAgIG9uT3BlbixcbiAgICAgICAgb3BlbixcbiAgICAgICAgcmVuZGVyVmFsdWUsXG4gICAgICAgIFNlbGVjdERpc3BsYXlQcm9wczogX2V4dGVuZHMoe1xuICAgICAgICAgIGlkXG4gICAgICAgIH0sIFNlbGVjdERpc3BsYXlQcm9wcylcbiAgICAgIH0sIGlucHV0UHJvcHMsIHtcbiAgICAgICAgY2xhc3NlczogaW5wdXRQcm9wcyA/IGRlZXBtZXJnZShyZXN0T2ZDbGFzc2VzLCBpbnB1dFByb3BzLmNsYXNzZXMpIDogcmVzdE9mQ2xhc3Nlc1xuICAgICAgfSwgaW5wdXQgPyBpbnB1dC5wcm9wcy5pbnB1dFByb3BzIDoge30pXG4gICAgfSwgKG11bHRpcGxlICYmIG5hdGl2ZSB8fCBkaXNwbGF5RW1wdHkpICYmIHZhcmlhbnQgPT09ICdvdXRsaW5lZCcgPyB7XG4gICAgICBub3RjaGVkOiB0cnVlXG4gICAgfSA6IHt9LCB7XG4gICAgICByZWY6IGlucHV0Q29tcG9uZW50UmVmLFxuICAgICAgY2xhc3NOYW1lOiBjbHN4KElucHV0Q29tcG9uZW50LnByb3BzLmNsYXNzTmFtZSwgY2xhc3NOYW1lLCBjbGFzc2VzLnJvb3QpXG4gICAgfSwgIWlucHV0ICYmIHtcbiAgICAgIHZhcmlhbnRcbiAgICB9LCBvdGhlcikpXG4gIH0pO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBTZWxlY3QucHJvcFR5cGVzIC8qIHJlbW92ZS1wcm9wdHlwZXMgKi8gPSB7XG4gIC8vIOKUjOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgCBXYXJuaW5nIOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUkFxuICAvLyDilIIgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zLiDilIJcbiAgLy8g4pSCICAgIFRvIHVwZGF0ZSB0aGVtLCBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBgcG5wbSBwcm9wdHlwZXNgLiAgICAg4pSCXG4gIC8vIOKUlOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUmFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgd2lkdGggb2YgdGhlIHBvcG92ZXIgd2lsbCBhdXRvbWF0aWNhbGx5IGJlIHNldCBhY2NvcmRpbmcgdG8gdGhlIGl0ZW1zIGluc2lkZSB0aGVcbiAgICogbWVudSwgb3RoZXJ3aXNlIGl0IHdpbGwgYmUgYXQgbGVhc3QgdGhlIHdpZHRoIG9mIHRoZSBzZWxlY3QgaW5wdXQuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBhdXRvV2lkdGg6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogVGhlIG9wdGlvbiBlbGVtZW50cyB0byBwb3B1bGF0ZSB0aGUgc2VsZWN0IHdpdGguXG4gICAqIENhbiBiZSBzb21lIGBNZW51SXRlbWAgd2hlbiBgbmF0aXZlYCBpcyBmYWxzZSBhbmQgYG9wdGlvbmAgd2hlbiBgbmF0aXZlYCBpcyB0cnVlLlxuICAgKlxuICAgKiDimqDvuI9UaGUgYE1lbnVJdGVtYCBlbGVtZW50cyAqKm11c3QqKiBiZSBkaXJlY3QgZGVzY2VuZGFudHMgd2hlbiBgbmF0aXZlYCBpcyBmYWxzZS5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogQGRlZmF1bHQge31cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBjb21wb25lbnQgaXMgaW5pdGlhbGx5IG9wZW4uIFVzZSB3aGVuIHRoZSBjb21wb25lbnQgb3BlbiBzdGF0ZSBpcyBub3QgY29udHJvbGxlZCAoaS5lLiB0aGUgYG9wZW5gIHByb3AgaXMgbm90IGRlZmluZWQpLlxuICAgKiBZb3UgY2FuIG9ubHkgdXNlIGl0IHdoZW4gdGhlIGBuYXRpdmVgIHByb3AgaXMgYGZhbHNlYCAoZGVmYXVsdCkuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkZWZhdWx0T3BlbjogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBUaGUgZGVmYXVsdCB2YWx1ZS4gVXNlIHdoZW4gdGhlIGNvbXBvbmVudCBpcyBub3QgY29udHJvbGxlZC5cbiAgICovXG4gIGRlZmF1bHRWYWx1ZTogUHJvcFR5cGVzLmFueSxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgYSB2YWx1ZSBpcyBkaXNwbGF5ZWQgZXZlbiBpZiBubyBpdGVtcyBhcmUgc2VsZWN0ZWQuXG4gICAqXG4gICAqIEluIG9yZGVyIHRvIGRpc3BsYXkgYSBtZWFuaW5nZnVsIHZhbHVlLCBhIGZ1bmN0aW9uIGNhbiBiZSBwYXNzZWQgdG8gdGhlIGByZW5kZXJWYWx1ZWAgcHJvcCB3aGljaFxuICAgKiByZXR1cm5zIHRoZSB2YWx1ZSB0byBiZSBkaXNwbGF5ZWQgd2hlbiBubyBpdGVtcyBhcmUgc2VsZWN0ZWQuXG4gICAqXG4gICAqIOKaoO+4jyBXaGVuIHVzaW5nIHRoaXMgcHJvcCwgbWFrZSBzdXJlIHRoZSBsYWJlbCBkb2Vzbid0IG92ZXJsYXAgd2l0aCB0aGUgZW1wdHkgZGlzcGxheWVkIHZhbHVlLlxuICAgKiBUaGUgbGFiZWwgc2hvdWxkIGVpdGhlciBiZSBoaWRkZW4gb3IgZm9yY2VkIHRvIGEgc2hydW5rIHN0YXRlLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZGlzcGxheUVtcHR5OiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIFRoZSBpY29uIHRoYXQgZGlzcGxheXMgdGhlIGFycm93LlxuICAgKiBAZGVmYXVsdCBBcnJvd0Ryb3BEb3duSWNvblxuICAgKi9cbiAgSWNvbkNvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuICAvKipcbiAgICogVGhlIGBpZGAgb2YgdGhlIHdyYXBwZXIgZWxlbWVudCBvciB0aGUgYHNlbGVjdGAgZWxlbWVudCB3aGVuIGBuYXRpdmVgLlxuICAgKi9cbiAgaWQ6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBBbiBgSW5wdXRgIGVsZW1lbnQ7IGRvZXMgbm90IGhhdmUgdG8gYmUgYSBtYXRlcmlhbC11aSBzcGVjaWZpYyBgSW5wdXRgLlxuICAgKi9cbiAgaW5wdXQ6IFByb3BUeXBlcy5lbGVtZW50LFxuICAvKipcbiAgICogW0F0dHJpYnV0ZXNdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUTUwvRWxlbWVudC9pbnB1dCNBdHRyaWJ1dGVzKSBhcHBsaWVkIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAqIFdoZW4gYG5hdGl2ZWAgaXMgYHRydWVgLCB0aGUgYXR0cmlidXRlcyBhcmUgYXBwbGllZCBvbiB0aGUgYHNlbGVjdGAgZWxlbWVudC5cbiAgICovXG4gIGlucHV0UHJvcHM6IFByb3BUeXBlcy5vYmplY3QsXG4gIC8qKlxuICAgKiBTZWUgW091dGxpbmVkSW5wdXQjbGFiZWxdKC9tYXRlcmlhbC11aS9hcGkvb3V0bGluZWQtaW5wdXQvI3Byb3BzKVxuICAgKi9cbiAgbGFiZWw6IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogVGhlIElEIG9mIGFuIGVsZW1lbnQgdGhhdCBhY3RzIGFzIGFuIGFkZGl0aW9uYWwgbGFiZWwuIFRoZSBTZWxlY3Qgd2lsbFxuICAgKiBiZSBsYWJlbGxlZCBieSB0aGUgYWRkaXRpb25hbCBsYWJlbCBhbmQgdGhlIHNlbGVjdGVkIHZhbHVlLlxuICAgKi9cbiAgbGFiZWxJZDogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIFByb3BzIGFwcGxpZWQgdG8gdGhlIFtgTWVudWBdKC9tYXRlcmlhbC11aS9hcGkvbWVudS8pIGVsZW1lbnQuXG4gICAqL1xuICBNZW51UHJvcHM6IFByb3BUeXBlcy5vYmplY3QsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIGB2YWx1ZWAgbXVzdCBiZSBhbiBhcnJheSBhbmQgdGhlIG1lbnUgd2lsbCBzdXBwb3J0IG11bHRpcGxlIHNlbGVjdGlvbnMuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBtdWx0aXBsZTogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBjb21wb25lbnQgdXNlcyBhIG5hdGl2ZSBgc2VsZWN0YCBlbGVtZW50LlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgbmF0aXZlOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gYSBtZW51IGl0ZW0gaXMgc2VsZWN0ZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7U2VsZWN0Q2hhbmdlRXZlbnQ8VmFsdWU+fSBldmVudCBUaGUgZXZlbnQgc291cmNlIG9mIHRoZSBjYWxsYmFjay5cbiAgICogWW91IGNhbiBwdWxsIG91dCB0aGUgbmV3IHZhbHVlIGJ5IGFjY2Vzc2luZyBgZXZlbnQudGFyZ2V0LnZhbHVlYCAoYW55KS5cbiAgICogKipXYXJuaW5nKio6IFRoaXMgaXMgYSBnZW5lcmljIGV2ZW50LCBub3QgYSBjaGFuZ2UgZXZlbnQsIHVubGVzcyB0aGUgY2hhbmdlIGV2ZW50IGlzIGNhdXNlZCBieSBicm93c2VyIGF1dG9maWxsLlxuICAgKiBAcGFyYW0ge29iamVjdH0gW2NoaWxkXSBUaGUgcmVhY3QgZWxlbWVudCB0aGF0IHdhcyBzZWxlY3RlZCB3aGVuIGBuYXRpdmVgIGlzIGBmYWxzZWAgKGRlZmF1bHQpLlxuICAgKi9cbiAgb25DaGFuZ2U6IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgY29tcG9uZW50IHJlcXVlc3RzIHRvIGJlIGNsb3NlZC5cbiAgICogVXNlIGl0IGluIGVpdGhlciBjb250cm9sbGVkIChzZWUgdGhlIGBvcGVuYCBwcm9wKSwgb3IgdW5jb250cm9sbGVkIG1vZGUgKHRvIGRldGVjdCB3aGVuIHRoZSBTZWxlY3QgY29sbGFwc2VzKS5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGV2ZW50IFRoZSBldmVudCBzb3VyY2Ugb2YgdGhlIGNhbGxiYWNrLlxuICAgKi9cbiAgb25DbG9zZTogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSBjb21wb25lbnQgcmVxdWVzdHMgdG8gYmUgb3BlbmVkLlxuICAgKiBVc2UgaXQgaW4gZWl0aGVyIGNvbnRyb2xsZWQgKHNlZSB0aGUgYG9wZW5gIHByb3ApLCBvciB1bmNvbnRyb2xsZWQgbW9kZSAodG8gZGV0ZWN0IHdoZW4gdGhlIFNlbGVjdCBleHBhbmRzKS5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGV2ZW50IFRoZSBldmVudCBzb3VyY2Ugb2YgdGhlIGNhbGxiYWNrLlxuICAgKi9cbiAgb25PcGVuOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGNvbXBvbmVudCBpcyBzaG93bi5cbiAgICogWW91IGNhbiBvbmx5IHVzZSBpdCB3aGVuIHRoZSBgbmF0aXZlYCBwcm9wIGlzIGBmYWxzZWAgKGRlZmF1bHQpLlxuICAgKi9cbiAgb3BlbjogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBSZW5kZXIgdGhlIHNlbGVjdGVkIHZhbHVlLlxuICAgKiBZb3UgY2FuIG9ubHkgdXNlIGl0IHdoZW4gdGhlIGBuYXRpdmVgIHByb3AgaXMgYGZhbHNlYCAoZGVmYXVsdCkuXG4gICAqXG4gICAqIEBwYXJhbSB7YW55fSB2YWx1ZSBUaGUgYHZhbHVlYCBwcm92aWRlZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBAcmV0dXJucyB7UmVhY3ROb2RlfVxuICAgKi9cbiAgcmVuZGVyVmFsdWU6IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogUHJvcHMgYXBwbGllZCB0byB0aGUgY2xpY2thYmxlIGRpdiBlbGVtZW50LlxuICAgKi9cbiAgU2VsZWN0RGlzcGxheVByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogVGhlIHN5c3RlbSBwcm9wIHRoYXQgYWxsb3dzIGRlZmluaW5nIHN5c3RlbSBvdmVycmlkZXMgYXMgd2VsbCBhcyBhZGRpdGlvbmFsIENTUyBzdHlsZXMuXG4gICAqL1xuICBzeDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5ib29sXSkpLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pLFxuICAvKipcbiAgICogVGhlIGBpbnB1dGAgdmFsdWUuIFByb3ZpZGluZyBhbiBlbXB0eSBzdHJpbmcgd2lsbCBzZWxlY3Qgbm8gb3B0aW9ucy5cbiAgICogU2V0IHRvIGFuIGVtcHR5IHN0cmluZyBgJydgIGlmIHlvdSBkb24ndCB3YW50IGFueSBvZiB0aGUgYXZhaWxhYmxlIG9wdGlvbnMgdG8gYmUgc2VsZWN0ZWQuXG4gICAqXG4gICAqIElmIHRoZSB2YWx1ZSBpcyBhbiBvYmplY3QgaXQgbXVzdCBoYXZlIHJlZmVyZW5jZSBlcXVhbGl0eSB3aXRoIHRoZSBvcHRpb24gaW4gb3JkZXIgdG8gYmUgc2VsZWN0ZWQuXG4gICAqIElmIHRoZSB2YWx1ZSBpcyBub3QgYW4gb2JqZWN0LCB0aGUgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG11c3QgbWF0Y2ggd2l0aCB0aGUgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBvcHRpb24gaW4gb3JkZXIgdG8gYmUgc2VsZWN0ZWQuXG4gICAqL1xuICB2YWx1ZTogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsnJ10pLCBQcm9wVHlwZXMuYW55XSksXG4gIC8qKlxuICAgKiBUaGUgdmFyaWFudCB0byB1c2UuXG4gICAqIEBkZWZhdWx0ICdvdXRsaW5lZCdcbiAgICovXG4gIHZhcmlhbnQ6IFByb3BUeXBlcy5vbmVPZihbJ2ZpbGxlZCcsICdvdXRsaW5lZCcsICdzdGFuZGFyZCddKVxufSA6IHZvaWQgMDtcblNlbGVjdC5tdWlOYW1lID0gJ1NlbGVjdCc7XG5leHBvcnQgZGVmYXVsdCBTZWxlY3Q7IiwiaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzc2VzJztcbmltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzJztcbmV4cG9ydCBmdW5jdGlvbiBnZXRTa2VsZXRvblV0aWxpdHlDbGFzcyhzbG90KSB7XG4gIHJldHVybiBnZW5lcmF0ZVV0aWxpdHlDbGFzcygnTXVpU2tlbGV0b24nLCBzbG90KTtcbn1cbmNvbnN0IHNrZWxldG9uQ2xhc3NlcyA9IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMoJ011aVNrZWxldG9uJywgWydyb290JywgJ3RleHQnLCAncmVjdGFuZ3VsYXInLCAncm91bmRlZCcsICdjaXJjdWxhcicsICdwdWxzZScsICd3YXZlJywgJ3dpdGhDaGlsZHJlbicsICdmaXRDb250ZW50JywgJ2hlaWdodEF1dG8nXSk7XG5leHBvcnQgZGVmYXVsdCBza2VsZXRvbkNsYXNzZXM7IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiYW5pbWF0aW9uXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29tcG9uZW50XCIsIFwiaGVpZ2h0XCIsIFwic3R5bGVcIiwgXCJ2YXJpYW50XCIsIFwid2lkdGhcIl07XG5sZXQgXyA9IHQgPT4gdCxcbiAgX3QsXG4gIF90MixcbiAgX3QzLFxuICBfdDQ7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBrZXlmcmFtZXMsIGNzcyB9IGZyb20gJ0BtdWkvc3lzdGVtJztcbmltcG9ydCBjb21wb3NlQ2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2NvbXBvc2VDbGFzc2VzJztcbmltcG9ydCB7IGFscGhhLCB1bnN0YWJsZV9nZXRVbml0IGFzIGdldFVuaXQsIHVuc3RhYmxlX3RvVW5pdGxlc3MgYXMgdG9Vbml0bGVzcyB9IGZyb20gJy4uL3N0eWxlcyc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJy4uL3N0eWxlcy9zdHlsZWQnO1xuaW1wb3J0IHsgdXNlRGVmYXVsdFByb3BzIH0gZnJvbSAnLi4vRGVmYXVsdFByb3BzUHJvdmlkZXInO1xuaW1wb3J0IHsgZ2V0U2tlbGV0b25VdGlsaXR5Q2xhc3MgfSBmcm9tICcuL3NrZWxldG9uQ2xhc3Nlcyc7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuY29uc3QgdXNlVXRpbGl0eUNsYXNzZXMgPSBvd25lclN0YXRlID0+IHtcbiAgY29uc3Qge1xuICAgIGNsYXNzZXMsXG4gICAgdmFyaWFudCxcbiAgICBhbmltYXRpb24sXG4gICAgaGFzQ2hpbGRyZW4sXG4gICAgd2lkdGgsXG4gICAgaGVpZ2h0XG4gIH0gPSBvd25lclN0YXRlO1xuICBjb25zdCBzbG90cyA9IHtcbiAgICByb290OiBbJ3Jvb3QnLCB2YXJpYW50LCBhbmltYXRpb24sIGhhc0NoaWxkcmVuICYmICd3aXRoQ2hpbGRyZW4nLCBoYXNDaGlsZHJlbiAmJiAhd2lkdGggJiYgJ2ZpdENvbnRlbnQnLCBoYXNDaGlsZHJlbiAmJiAhaGVpZ2h0ICYmICdoZWlnaHRBdXRvJ11cbiAgfTtcbiAgcmV0dXJuIGNvbXBvc2VDbGFzc2VzKHNsb3RzLCBnZXRTa2VsZXRvblV0aWxpdHlDbGFzcywgY2xhc3Nlcyk7XG59O1xuY29uc3QgcHVsc2VLZXlmcmFtZSA9IGtleWZyYW1lcyhfdCB8fCAoX3QgPSBfYFxuICAwJSB7XG4gICAgb3BhY2l0eTogMTtcbiAgfVxuXG4gIDUwJSB7XG4gICAgb3BhY2l0eTogMC40O1xuICB9XG5cbiAgMTAwJSB7XG4gICAgb3BhY2l0eTogMTtcbiAgfVxuYCkpO1xuY29uc3Qgd2F2ZUtleWZyYW1lID0ga2V5ZnJhbWVzKF90MiB8fCAoX3QyID0gX2BcbiAgMCUge1xuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWCgtMTAwJSk7XG4gIH1cblxuICA1MCUge1xuICAgIC8qICswLjVzIG9mIGRlbGF5IGJldHdlZW4gZWFjaCBsb29wICovXG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKDEwMCUpO1xuICB9XG5cbiAgMTAwJSB7XG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKDEwMCUpO1xuICB9XG5gKSk7XG5jb25zdCBTa2VsZXRvblJvb3QgPSBzdHlsZWQoJ3NwYW4nLCB7XG4gIG5hbWU6ICdNdWlTa2VsZXRvbicsXG4gIHNsb3Q6ICdSb290JyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgb3duZXJTdGF0ZVxuICAgIH0gPSBwcm9wcztcbiAgICByZXR1cm4gW3N0eWxlcy5yb290LCBzdHlsZXNbb3duZXJTdGF0ZS52YXJpYW50XSwgb3duZXJTdGF0ZS5hbmltYXRpb24gIT09IGZhbHNlICYmIHN0eWxlc1tvd25lclN0YXRlLmFuaW1hdGlvbl0sIG93bmVyU3RhdGUuaGFzQ2hpbGRyZW4gJiYgc3R5bGVzLndpdGhDaGlsZHJlbiwgb3duZXJTdGF0ZS5oYXNDaGlsZHJlbiAmJiAhb3duZXJTdGF0ZS53aWR0aCAmJiBzdHlsZXMuZml0Q29udGVudCwgb3duZXJTdGF0ZS5oYXNDaGlsZHJlbiAmJiAhb3duZXJTdGF0ZS5oZWlnaHQgJiYgc3R5bGVzLmhlaWdodEF1dG9dO1xuICB9XG59KSgoe1xuICB0aGVtZSxcbiAgb3duZXJTdGF0ZVxufSkgPT4ge1xuICBjb25zdCByYWRpdXNVbml0ID0gZ2V0VW5pdCh0aGVtZS5zaGFwZS5ib3JkZXJSYWRpdXMpIHx8ICdweCc7XG4gIGNvbnN0IHJhZGl1c1ZhbHVlID0gdG9Vbml0bGVzcyh0aGVtZS5zaGFwZS5ib3JkZXJSYWRpdXMpO1xuICByZXR1cm4gX2V4dGVuZHMoe1xuICAgIGRpc3BsYXk6ICdibG9jaycsXG4gICAgLy8gQ3JlYXRlIGEgXCJvbiBwYXBlclwiIGNvbG9yIHdpdGggc3VmZmljaWVudCBjb250cmFzdCByZXRhaW5pbmcgdGhlIGNvbG9yXG4gICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS52YXJzID8gdGhlbWUudmFycy5wYWxldHRlLlNrZWxldG9uLmJnIDogYWxwaGEodGhlbWUucGFsZXR0ZS50ZXh0LnByaW1hcnksIHRoZW1lLnBhbGV0dGUubW9kZSA9PT0gJ2xpZ2h0JyA/IDAuMTEgOiAwLjEzKSxcbiAgICBoZWlnaHQ6ICcxLjJlbSdcbiAgfSwgb3duZXJTdGF0ZS52YXJpYW50ID09PSAndGV4dCcgJiYge1xuICAgIG1hcmdpblRvcDogMCxcbiAgICBtYXJnaW5Cb3R0b206IDAsXG4gICAgaGVpZ2h0OiAnYXV0bycsXG4gICAgdHJhbnNmb3JtT3JpZ2luOiAnMCA1NSUnLFxuICAgIHRyYW5zZm9ybTogJ3NjYWxlKDEsIDAuNjApJyxcbiAgICBib3JkZXJSYWRpdXM6IGAke3JhZGl1c1ZhbHVlfSR7cmFkaXVzVW5pdH0vJHtNYXRoLnJvdW5kKHJhZGl1c1ZhbHVlIC8gMC42ICogMTApIC8gMTB9JHtyYWRpdXNVbml0fWAsXG4gICAgJyY6ZW1wdHk6YmVmb3JlJzoge1xuICAgICAgY29udGVudDogJ1wiXFxcXDAwYTBcIidcbiAgICB9XG4gIH0sIG93bmVyU3RhdGUudmFyaWFudCA9PT0gJ2NpcmN1bGFyJyAmJiB7XG4gICAgYm9yZGVyUmFkaXVzOiAnNTAlJ1xuICB9LCBvd25lclN0YXRlLnZhcmlhbnQgPT09ICdyb3VuZGVkJyAmJiB7XG4gICAgYm9yZGVyUmFkaXVzOiAodGhlbWUudmFycyB8fCB0aGVtZSkuc2hhcGUuYm9yZGVyUmFkaXVzXG4gIH0sIG93bmVyU3RhdGUuaGFzQ2hpbGRyZW4gJiYge1xuICAgICcmID4gKic6IHtcbiAgICAgIHZpc2liaWxpdHk6ICdoaWRkZW4nXG4gICAgfVxuICB9LCBvd25lclN0YXRlLmhhc0NoaWxkcmVuICYmICFvd25lclN0YXRlLndpZHRoICYmIHtcbiAgICBtYXhXaWR0aDogJ2ZpdC1jb250ZW50J1xuICB9LCBvd25lclN0YXRlLmhhc0NoaWxkcmVuICYmICFvd25lclN0YXRlLmhlaWdodCAmJiB7XG4gICAgaGVpZ2h0OiAnYXV0bydcbiAgfSk7XG59LCAoe1xuICBvd25lclN0YXRlXG59KSA9PiBvd25lclN0YXRlLmFuaW1hdGlvbiA9PT0gJ3B1bHNlJyAmJiBjc3MoX3QzIHx8IChfdDMgPSBfYFxuICAgICAgYW5pbWF0aW9uOiAkezB9IDJzIGVhc2UtaW4tb3V0IDAuNXMgaW5maW5pdGU7XG4gICAgYCksIHB1bHNlS2V5ZnJhbWUpLCAoe1xuICBvd25lclN0YXRlLFxuICB0aGVtZVxufSkgPT4gb3duZXJTdGF0ZS5hbmltYXRpb24gPT09ICd3YXZlJyAmJiBjc3MoX3Q0IHx8IChfdDQgPSBfYFxuICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcblxuICAgICAgLyogRml4IGJ1ZyBpbiBTYWZhcmkgaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTY4MTk2ICovXG4gICAgICAtd2Via2l0LW1hc2staW1hZ2U6IC13ZWJraXQtcmFkaWFsLWdyYWRpZW50KHdoaXRlLCBibGFjayk7XG5cbiAgICAgICY6OmFmdGVyIHtcbiAgICAgICAgYW5pbWF0aW9uOiAkezB9IDJzIGxpbmVhciAwLjVzIGluZmluaXRlO1xuICAgICAgICBiYWNrZ3JvdW5kOiBsaW5lYXItZ3JhZGllbnQoXG4gICAgICAgICAgOTBkZWcsXG4gICAgICAgICAgdHJhbnNwYXJlbnQsXG4gICAgICAgICAgJHswfSxcbiAgICAgICAgICB0cmFuc3BhcmVudFxuICAgICAgICApO1xuICAgICAgICBjb250ZW50OiAnJztcbiAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoLTEwMCUpOyAvKiBBdm9pZCBmbGFzaCBkdXJpbmcgc2VydmVyLXNpZGUgaHlkcmF0aW9uICovXG4gICAgICAgIGJvdHRvbTogMDtcbiAgICAgICAgbGVmdDogMDtcbiAgICAgICAgcmlnaHQ6IDA7XG4gICAgICAgIHRvcDogMDtcbiAgICAgIH1cbiAgICBgKSwgd2F2ZUtleWZyYW1lLCAodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZS5hY3Rpb24uaG92ZXIpKTtcbmNvbnN0IFNrZWxldG9uID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gU2tlbGV0b24oaW5Qcm9wcywgcmVmKSB7XG4gIGNvbnN0IHByb3BzID0gdXNlRGVmYXVsdFByb3BzKHtcbiAgICBwcm9wczogaW5Qcm9wcyxcbiAgICBuYW1lOiAnTXVpU2tlbGV0b24nXG4gIH0pO1xuICBjb25zdCB7XG4gICAgICBhbmltYXRpb24gPSAncHVsc2UnLFxuICAgICAgY2xhc3NOYW1lLFxuICAgICAgY29tcG9uZW50ID0gJ3NwYW4nLFxuICAgICAgaGVpZ2h0LFxuICAgICAgc3R5bGUsXG4gICAgICB2YXJpYW50ID0gJ3RleHQnLFxuICAgICAgd2lkdGhcbiAgICB9ID0gcHJvcHMsXG4gICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkKTtcbiAgY29uc3Qgb3duZXJTdGF0ZSA9IF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgIGFuaW1hdGlvbixcbiAgICBjb21wb25lbnQsXG4gICAgdmFyaWFudCxcbiAgICBoYXNDaGlsZHJlbjogQm9vbGVhbihvdGhlci5jaGlsZHJlbilcbiAgfSk7XG4gIGNvbnN0IGNsYXNzZXMgPSB1c2VVdGlsaXR5Q2xhc3Nlcyhvd25lclN0YXRlKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KFNrZWxldG9uUm9vdCwgX2V4dGVuZHMoe1xuICAgIGFzOiBjb21wb25lbnQsXG4gICAgcmVmOiByZWYsXG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lKSxcbiAgICBvd25lclN0YXRlOiBvd25lclN0YXRlXG4gIH0sIG90aGVyLCB7XG4gICAgc3R5bGU6IF9leHRlbmRzKHtcbiAgICAgIHdpZHRoLFxuICAgICAgaGVpZ2h0XG4gICAgfSwgc3R5bGUpXG4gIH0pKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gU2tlbGV0b24ucHJvcFR5cGVzIC8qIHJlbW92ZS1wcm9wdHlwZXMgKi8gPSB7XG4gIC8vIOKUjOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgCBXYXJuaW5nIOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUkFxuICAvLyDilIIgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zLiDilIJcbiAgLy8g4pSCICAgIFRvIHVwZGF0ZSB0aGVtLCBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBgcG5wbSBwcm9wdHlwZXNgLiAgICAg4pSCXG4gIC8vIOKUlOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUmFxuICAvKipcbiAgICogVGhlIGFuaW1hdGlvbi5cbiAgICogSWYgYGZhbHNlYCB0aGUgYW5pbWF0aW9uIGVmZmVjdCBpcyBkaXNhYmxlZC5cbiAgICogQGRlZmF1bHQgJ3B1bHNlJ1xuICAgKi9cbiAgYW5pbWF0aW9uOiBQcm9wVHlwZXMub25lT2YoWydwdWxzZScsICd3YXZlJywgZmFsc2VdKSxcbiAgLyoqXG4gICAqIE9wdGlvbmFsIGNoaWxkcmVuIHRvIGluZmVyIHdpZHRoIGFuZCBoZWlnaHQgZnJvbS5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBIVE1MIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBjb21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcbiAgLyoqXG4gICAqIEhlaWdodCBvZiB0aGUgc2tlbGV0b24uXG4gICAqIFVzZWZ1bCB3aGVuIHlvdSBkb24ndCB3YW50IHRvIGFkYXB0IHRoZSBza2VsZXRvbiB0byBhIHRleHQgZWxlbWVudCBidXQgZm9yIGluc3RhbmNlIGEgY2FyZC5cbiAgICovXG4gIGhlaWdodDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnN0cmluZ10pLFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgc3R5bGU6IFByb3BUeXBlcy5vYmplY3QsXG4gIC8qKlxuICAgKiBUaGUgc3lzdGVtIHByb3AgdGhhdCBhbGxvd3MgZGVmaW5pbmcgc3lzdGVtIG92ZXJyaWRlcyBhcyB3ZWxsIGFzIGFkZGl0aW9uYWwgQ1NTIHN0eWxlcy5cbiAgICovXG4gIHN4OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLmJvb2xdKSksIFByb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSksXG4gIC8qKlxuICAgKiBUaGUgdHlwZSBvZiBjb250ZW50IHRoYXQgd2lsbCBiZSByZW5kZXJlZC5cbiAgICogQGRlZmF1bHQgJ3RleHQnXG4gICAqL1xuICB2YXJpYW50OiBQcm9wVHlwZXMgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqLy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ2NpcmN1bGFyJywgJ3JlY3Rhbmd1bGFyJywgJ3JvdW5kZWQnLCAndGV4dCddKSwgUHJvcFR5cGVzLnN0cmluZ10pLFxuICAvKipcbiAgICogV2lkdGggb2YgdGhlIHNrZWxldG9uLlxuICAgKiBVc2VmdWwgd2hlbiB0aGUgc2tlbGV0b24gaXMgaW5zaWRlIGFuIGlubGluZSBlbGVtZW50IHdpdGggbm8gd2lkdGggb2YgaXRzIG93bi5cbiAgICovXG4gIHdpZHRoOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc3RyaW5nXSlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCBTa2VsZXRvbjsiLCJmdW5jdGlvbiBhcmVBcnJheXNFcXVhbChhcnJheTEsIGFycmF5MiwgaXRlbUNvbXBhcmVyID0gKGEsIGIpID0+IGEgPT09IGIpIHtcbiAgcmV0dXJuIGFycmF5MS5sZW5ndGggPT09IGFycmF5Mi5sZW5ndGggJiYgYXJyYXkxLmV2ZXJ5KCh2YWx1ZSwgaW5kZXgpID0+IGl0ZW1Db21wYXJlcih2YWx1ZSwgYXJyYXkyW2luZGV4XSkpO1xufVxuZXhwb3J0IGRlZmF1bHQgYXJlQXJyYXlzRXF1YWw7IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHVuc3RhYmxlX293bmVyRG9jdW1lbnQgYXMgb3duZXJEb2N1bWVudCwgdW5zdGFibGVfdXNlQ29udHJvbGxlZCBhcyB1c2VDb250cm9sbGVkLCB1bnN0YWJsZV91c2VFbmhhbmNlZEVmZmVjdCBhcyB1c2VFbmhhbmNlZEVmZmVjdCwgdW5zdGFibGVfdXNlRXZlbnRDYWxsYmFjayBhcyB1c2VFdmVudENhbGxiYWNrLCB1bnN0YWJsZV91c2VGb3JrUmVmIGFzIHVzZUZvcmtSZWYsIHVuc3RhYmxlX3VzZUlzRm9jdXNWaXNpYmxlIGFzIHVzZUlzRm9jdXNWaXNpYmxlLCB2aXN1YWxseUhpZGRlbiwgY2xhbXAgfSBmcm9tICdAbXVpL3V0aWxzJztcbmltcG9ydCBleHRyYWN0RXZlbnRIYW5kbGVycyBmcm9tICdAbXVpL3V0aWxzL2V4dHJhY3RFdmVudEhhbmRsZXJzJztcbmltcG9ydCBhcmVBcnJheXNFcXVhbCBmcm9tICcuLi91dGlscy9hcmVBcnJheXNFcXVhbCc7XG5jb25zdCBJTlRFTlRJT05BTF9EUkFHX0NPVU5UX1RIUkVTSE9MRCA9IDI7XG5mdW5jdGlvbiBhc2MoYSwgYikge1xuICByZXR1cm4gYSAtIGI7XG59XG5mdW5jdGlvbiBmaW5kQ2xvc2VzdCh2YWx1ZXMsIGN1cnJlbnRWYWx1ZSkge1xuICB2YXIgX3ZhbHVlcyRyZWR1Y2U7XG4gIGNvbnN0IHtcbiAgICBpbmRleDogY2xvc2VzdEluZGV4XG4gIH0gPSAoX3ZhbHVlcyRyZWR1Y2UgPSB2YWx1ZXMucmVkdWNlKChhY2MsIHZhbHVlLCBpbmRleCkgPT4ge1xuICAgIGNvbnN0IGRpc3RhbmNlID0gTWF0aC5hYnMoY3VycmVudFZhbHVlIC0gdmFsdWUpO1xuICAgIGlmIChhY2MgPT09IG51bGwgfHwgZGlzdGFuY2UgPCBhY2MuZGlzdGFuY2UgfHwgZGlzdGFuY2UgPT09IGFjYy5kaXN0YW5jZSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZGlzdGFuY2UsXG4gICAgICAgIGluZGV4XG4gICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gYWNjO1xuICB9LCBudWxsKSkgIT0gbnVsbCA/IF92YWx1ZXMkcmVkdWNlIDoge307XG4gIHJldHVybiBjbG9zZXN0SW5kZXg7XG59XG5mdW5jdGlvbiB0cmFja0ZpbmdlcihldmVudCwgdG91Y2hJZCkge1xuICAvLyBUaGUgZXZlbnQgaXMgVG91Y2hFdmVudFxuICBpZiAodG91Y2hJZC5jdXJyZW50ICE9PSB1bmRlZmluZWQgJiYgZXZlbnQuY2hhbmdlZFRvdWNoZXMpIHtcbiAgICBjb25zdCB0b3VjaEV2ZW50ID0gZXZlbnQ7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0b3VjaEV2ZW50LmNoYW5nZWRUb3VjaGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBjb25zdCB0b3VjaCA9IHRvdWNoRXZlbnQuY2hhbmdlZFRvdWNoZXNbaV07XG4gICAgICBpZiAodG91Y2guaWRlbnRpZmllciA9PT0gdG91Y2hJZC5jdXJyZW50KSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgeDogdG91Y2guY2xpZW50WCxcbiAgICAgICAgICB5OiB0b3VjaC5jbGllbnRZXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8vIFRoZSBldmVudCBpcyBNb3VzZUV2ZW50XG4gIHJldHVybiB7XG4gICAgeDogZXZlbnQuY2xpZW50WCxcbiAgICB5OiBldmVudC5jbGllbnRZXG4gIH07XG59XG5leHBvcnQgZnVuY3Rpb24gdmFsdWVUb1BlcmNlbnQodmFsdWUsIG1pbiwgbWF4KSB7XG4gIHJldHVybiAodmFsdWUgLSBtaW4pICogMTAwIC8gKG1heCAtIG1pbik7XG59XG5mdW5jdGlvbiBwZXJjZW50VG9WYWx1ZShwZXJjZW50LCBtaW4sIG1heCkge1xuICByZXR1cm4gKG1heCAtIG1pbikgKiBwZXJjZW50ICsgbWluO1xufVxuZnVuY3Rpb24gZ2V0RGVjaW1hbFByZWNpc2lvbihudW0pIHtcbiAgLy8gVGhpcyBoYW5kbGVzIHRoZSBjYXNlIHdoZW4gbnVtIGlzIHZlcnkgc21hbGwgKDAuMDAwMDAwMDEpLCBqcyB3aWxsIHR1cm4gdGhpcyBpbnRvIDFlLTguXG4gIC8vIFdoZW4gbnVtIGlzIGJpZ2dlciB0aGFuIDEgb3IgbGVzcyB0aGFuIC0xIGl0IHdvbid0IGdldCBjb252ZXJ0ZWQgdG8gdGhpcyBub3RhdGlvbiBzbyBpdCdzIGZpbmUuXG4gIGlmIChNYXRoLmFicyhudW0pIDwgMSkge1xuICAgIGNvbnN0IHBhcnRzID0gbnVtLnRvRXhwb25lbnRpYWwoKS5zcGxpdCgnZS0nKTtcbiAgICBjb25zdCBtYXRpc3NhRGVjaW1hbFBhcnQgPSBwYXJ0c1swXS5zcGxpdCgnLicpWzFdO1xuICAgIHJldHVybiAobWF0aXNzYURlY2ltYWxQYXJ0ID8gbWF0aXNzYURlY2ltYWxQYXJ0Lmxlbmd0aCA6IDApICsgcGFyc2VJbnQocGFydHNbMV0sIDEwKTtcbiAgfVxuICBjb25zdCBkZWNpbWFsUGFydCA9IG51bS50b1N0cmluZygpLnNwbGl0KCcuJylbMV07XG4gIHJldHVybiBkZWNpbWFsUGFydCA/IGRlY2ltYWxQYXJ0Lmxlbmd0aCA6IDA7XG59XG5mdW5jdGlvbiByb3VuZFZhbHVlVG9TdGVwKHZhbHVlLCBzdGVwLCBtaW4pIHtcbiAgY29uc3QgbmVhcmVzdCA9IE1hdGgucm91bmQoKHZhbHVlIC0gbWluKSAvIHN0ZXApICogc3RlcCArIG1pbjtcbiAgcmV0dXJuIE51bWJlcihuZWFyZXN0LnRvRml4ZWQoZ2V0RGVjaW1hbFByZWNpc2lvbihzdGVwKSkpO1xufVxuZnVuY3Rpb24gc2V0VmFsdWVJbmRleCh7XG4gIHZhbHVlcyxcbiAgbmV3VmFsdWUsXG4gIGluZGV4XG59KSB7XG4gIGNvbnN0IG91dHB1dCA9IHZhbHVlcy5zbGljZSgpO1xuICBvdXRwdXRbaW5kZXhdID0gbmV3VmFsdWU7XG4gIHJldHVybiBvdXRwdXQuc29ydChhc2MpO1xufVxuZnVuY3Rpb24gZm9jdXNUaHVtYih7XG4gIHNsaWRlclJlZixcbiAgYWN0aXZlSW5kZXgsXG4gIHNldEFjdGl2ZVxufSkge1xuICB2YXIgX3NsaWRlclJlZiRjdXJyZW50LCBfZG9jJGFjdGl2ZUVsZW1lbnQ7XG4gIGNvbnN0IGRvYyA9IG93bmVyRG9jdW1lbnQoc2xpZGVyUmVmLmN1cnJlbnQpO1xuICBpZiAoISgoX3NsaWRlclJlZiRjdXJyZW50ID0gc2xpZGVyUmVmLmN1cnJlbnQpICE9IG51bGwgJiYgX3NsaWRlclJlZiRjdXJyZW50LmNvbnRhaW5zKGRvYy5hY3RpdmVFbGVtZW50KSkgfHwgTnVtYmVyKGRvYyA9PSBudWxsIHx8IChfZG9jJGFjdGl2ZUVsZW1lbnQgPSBkb2MuYWN0aXZlRWxlbWVudCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9kb2MkYWN0aXZlRWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEtaW5kZXgnKSkgIT09IGFjdGl2ZUluZGV4KSB7XG4gICAgdmFyIF9zbGlkZXJSZWYkY3VycmVudDI7XG4gICAgKF9zbGlkZXJSZWYkY3VycmVudDIgPSBzbGlkZXJSZWYuY3VycmVudCkgPT0gbnVsbCB8fCBfc2xpZGVyUmVmJGN1cnJlbnQyLnF1ZXJ5U2VsZWN0b3IoYFt0eXBlPVwicmFuZ2VcIl1bZGF0YS1pbmRleD1cIiR7YWN0aXZlSW5kZXh9XCJdYCkuZm9jdXMoKTtcbiAgfVxuICBpZiAoc2V0QWN0aXZlKSB7XG4gICAgc2V0QWN0aXZlKGFjdGl2ZUluZGV4KTtcbiAgfVxufVxuZnVuY3Rpb24gYXJlVmFsdWVzRXF1YWwobmV3VmFsdWUsIG9sZFZhbHVlKSB7XG4gIGlmICh0eXBlb2YgbmV3VmFsdWUgPT09ICdudW1iZXInICYmIHR5cGVvZiBvbGRWYWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICByZXR1cm4gbmV3VmFsdWUgPT09IG9sZFZhbHVlO1xuICB9XG4gIGlmICh0eXBlb2YgbmV3VmFsdWUgPT09ICdvYmplY3QnICYmIHR5cGVvZiBvbGRWYWx1ZSA9PT0gJ29iamVjdCcpIHtcbiAgICByZXR1cm4gYXJlQXJyYXlzRXF1YWwobmV3VmFsdWUsIG9sZFZhbHVlKTtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5jb25zdCBheGlzUHJvcHMgPSB7XG4gIGhvcml6b250YWw6IHtcbiAgICBvZmZzZXQ6IHBlcmNlbnQgPT4gKHtcbiAgICAgIGxlZnQ6IGAke3BlcmNlbnR9JWBcbiAgICB9KSxcbiAgICBsZWFwOiBwZXJjZW50ID0+ICh7XG4gICAgICB3aWR0aDogYCR7cGVyY2VudH0lYFxuICAgIH0pXG4gIH0sXG4gICdob3Jpem9udGFsLXJldmVyc2UnOiB7XG4gICAgb2Zmc2V0OiBwZXJjZW50ID0+ICh7XG4gICAgICByaWdodDogYCR7cGVyY2VudH0lYFxuICAgIH0pLFxuICAgIGxlYXA6IHBlcmNlbnQgPT4gKHtcbiAgICAgIHdpZHRoOiBgJHtwZXJjZW50fSVgXG4gICAgfSlcbiAgfSxcbiAgdmVydGljYWw6IHtcbiAgICBvZmZzZXQ6IHBlcmNlbnQgPT4gKHtcbiAgICAgIGJvdHRvbTogYCR7cGVyY2VudH0lYFxuICAgIH0pLFxuICAgIGxlYXA6IHBlcmNlbnQgPT4gKHtcbiAgICAgIGhlaWdodDogYCR7cGVyY2VudH0lYFxuICAgIH0pXG4gIH1cbn07XG5leHBvcnQgY29uc3QgSWRlbnRpdHkgPSB4ID0+IHg7XG5cbi8vIFRPRE86IHJlbW92ZSBzdXBwb3J0IGZvciBTYWZhcmkgPCAxMy5cbi8vIGh0dHBzOi8vY2FuaXVzZS5jb20vI3NlYXJjaD10b3VjaC1hY3Rpb25cbi8vXG4vLyBTYWZhcmksIG9uIGlPUywgc3VwcG9ydHMgdG91Y2ggYWN0aW9uIHNpbmNlIHYxMy5cbi8vIE92ZXIgODAlIG9mIHRoZSBpT1MgcGhvbmVzIGFyZSBjb21wYXRpYmxlXG4vLyBpbiBBdWd1c3QgMjAyMC5cbi8vIFV0aWxpemluZyB0aGUgQ1NTLnN1cHBvcnRzIG1ldGhvZCB0byBjaGVjayBpZiB0b3VjaC1hY3Rpb24gaXMgc3VwcG9ydGVkLlxuLy8gU2luY2UgQ1NTLnN1cHBvcnRzIGlzIHN1cHBvcnRlZCBvbiBhbGwgYnV0IEVkZ2VAMTIgYW5kIElFIGFuZCB0b3VjaC1hY3Rpb25cbi8vIGlzIHN1cHBvcnRlZCBvbiBib3RoIEVkZ2VAMTIgYW5kIElFIGlmIENTUy5zdXBwb3J0cyBpcyBub3QgYXZhaWxhYmxlIHRoYXQgbWVhbnMgdGhhdFxuLy8gdG91Y2gtYWN0aW9uIHdpbGwgYmUgc3VwcG9ydGVkXG5sZXQgY2FjaGVkU3VwcG9ydHNUb3VjaEFjdGlvbk5vbmU7XG5mdW5jdGlvbiBkb2VzU3VwcG9ydFRvdWNoQWN0aW9uTm9uZSgpIHtcbiAgaWYgKGNhY2hlZFN1cHBvcnRzVG91Y2hBY3Rpb25Ob25lID09PSB1bmRlZmluZWQpIHtcbiAgICBpZiAodHlwZW9mIENTUyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIENTUy5zdXBwb3J0cyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgY2FjaGVkU3VwcG9ydHNUb3VjaEFjdGlvbk5vbmUgPSBDU1Muc3VwcG9ydHMoJ3RvdWNoLWFjdGlvbicsICdub25lJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNhY2hlZFN1cHBvcnRzVG91Y2hBY3Rpb25Ob25lID0gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGNhY2hlZFN1cHBvcnRzVG91Y2hBY3Rpb25Ob25lO1xufVxuLyoqXG4gKlxuICogRGVtb3M6XG4gKlxuICogLSBbU2xpZGVyXShodHRwczovL211aS5jb20vYmFzZS11aS9yZWFjdC1zbGlkZXIvI2hvb2spXG4gKlxuICogQVBJOlxuICpcbiAqIC0gW3VzZVNsaWRlciBBUEldKGh0dHBzOi8vbXVpLmNvbS9iYXNlLXVpL3JlYWN0LXNsaWRlci9ob29rcy1hcGkvI3VzZS1zbGlkZXIpXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VTbGlkZXIocGFyYW1ldGVycykge1xuICBjb25zdCB7XG4gICAgJ2FyaWEtbGFiZWxsZWRieSc6IGFyaWFMYWJlbGxlZGJ5LFxuICAgIGRlZmF1bHRWYWx1ZSxcbiAgICBkaXNhYmxlZCA9IGZhbHNlLFxuICAgIGRpc2FibGVTd2FwID0gZmFsc2UsXG4gICAgaXNSdGwgPSBmYWxzZSxcbiAgICBtYXJrczogbWFya3NQcm9wID0gZmFsc2UsXG4gICAgbWF4ID0gMTAwLFxuICAgIG1pbiA9IDAsXG4gICAgbmFtZSxcbiAgICBvbkNoYW5nZSxcbiAgICBvbkNoYW5nZUNvbW1pdHRlZCxcbiAgICBvcmllbnRhdGlvbiA9ICdob3Jpem9udGFsJyxcbiAgICByb290UmVmOiByZWYsXG4gICAgc2NhbGUgPSBJZGVudGl0eSxcbiAgICBzdGVwID0gMSxcbiAgICBzaGlmdFN0ZXAgPSAxMCxcbiAgICB0YWJJbmRleCxcbiAgICB2YWx1ZTogdmFsdWVQcm9wXG4gIH0gPSBwYXJhbWV0ZXJzO1xuICBjb25zdCB0b3VjaElkID0gUmVhY3QudXNlUmVmKCk7XG4gIC8vIFdlIGNhbid0IHVzZSB0aGUgOmFjdGl2ZSBicm93c2VyIHBzZXVkby1jbGFzc2VzLlxuICAvLyAtIFRoZSBhY3RpdmUgc3RhdGUgaXNuJ3QgdHJpZ2dlcmVkIHdoZW4gY2xpY2tpbmcgb24gdGhlIHJhaWwuXG4gIC8vIC0gVGhlIGFjdGl2ZSBzdGF0ZSBpc24ndCB0cmFuc2ZlcnJlZCB3aGVuIGludmVyc2luZyBhIHJhbmdlIHNsaWRlci5cbiAgY29uc3QgW2FjdGl2ZSwgc2V0QWN0aXZlXSA9IFJlYWN0LnVzZVN0YXRlKC0xKTtcbiAgY29uc3QgW29wZW4sIHNldE9wZW5dID0gUmVhY3QudXNlU3RhdGUoLTEpO1xuICBjb25zdCBbZHJhZ2dpbmcsIHNldERyYWdnaW5nXSA9IFJlYWN0LnVzZVN0YXRlKGZhbHNlKTtcbiAgY29uc3QgbW92ZUNvdW50ID0gUmVhY3QudXNlUmVmKDApO1xuICBjb25zdCBbdmFsdWVEZXJpdmVkLCBzZXRWYWx1ZVN0YXRlXSA9IHVzZUNvbnRyb2xsZWQoe1xuICAgIGNvbnRyb2xsZWQ6IHZhbHVlUHJvcCxcbiAgICBkZWZhdWx0OiBkZWZhdWx0VmFsdWUgIT0gbnVsbCA/IGRlZmF1bHRWYWx1ZSA6IG1pbixcbiAgICBuYW1lOiAnU2xpZGVyJ1xuICB9KTtcbiAgY29uc3QgaGFuZGxlQ2hhbmdlID0gb25DaGFuZ2UgJiYgKChldmVudCwgdmFsdWUsIHRodW1iSW5kZXgpID0+IHtcbiAgICAvLyBSZWRlZmluZSB0YXJnZXQgdG8gYWxsb3cgbmFtZSBhbmQgdmFsdWUgdG8gYmUgcmVhZC5cbiAgICAvLyBUaGlzIGFsbG93cyBzZWFtbGVzcyBpbnRlZ3JhdGlvbiB3aXRoIHRoZSBtb3N0IHBvcHVsYXIgZm9ybSBsaWJyYXJpZXMuXG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL211aS9tYXRlcmlhbC11aS9pc3N1ZXMvMTM0ODUjaXNzdWVjb21tZW50LTY3NjA0ODQ5MlxuICAgIC8vIENsb25lIHRoZSBldmVudCB0byBub3Qgb3ZlcnJpZGUgYHRhcmdldGAgb2YgdGhlIG9yaWdpbmFsIGV2ZW50LlxuICAgIGNvbnN0IG5hdGl2ZUV2ZW50ID0gZXZlbnQubmF0aXZlRXZlbnQgfHwgZXZlbnQ7XG4gICAgLy8gQHRzLWlnbm9yZSBUaGUgbmF0aXZlRXZlbnQgaXMgZnVuY3Rpb24sIG5vdCBvYmplY3RcbiAgICBjb25zdCBjbG9uZWRFdmVudCA9IG5ldyBuYXRpdmVFdmVudC5jb25zdHJ1Y3RvcihuYXRpdmVFdmVudC50eXBlLCBuYXRpdmVFdmVudCk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGNsb25lZEV2ZW50LCAndGFyZ2V0Jywge1xuICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICB2YWx1ZToge1xuICAgICAgICB2YWx1ZSxcbiAgICAgICAgbmFtZVxuICAgICAgfVxuICAgIH0pO1xuICAgIG9uQ2hhbmdlKGNsb25lZEV2ZW50LCB2YWx1ZSwgdGh1bWJJbmRleCk7XG4gIH0pO1xuICBjb25zdCByYW5nZSA9IEFycmF5LmlzQXJyYXkodmFsdWVEZXJpdmVkKTtcbiAgbGV0IHZhbHVlcyA9IHJhbmdlID8gdmFsdWVEZXJpdmVkLnNsaWNlKCkuc29ydChhc2MpIDogW3ZhbHVlRGVyaXZlZF07XG4gIHZhbHVlcyA9IHZhbHVlcy5tYXAodmFsdWUgPT4gdmFsdWUgPT0gbnVsbCA/IG1pbiA6IGNsYW1wKHZhbHVlLCBtaW4sIG1heCkpO1xuICBjb25zdCBtYXJrcyA9IG1hcmtzUHJvcCA9PT0gdHJ1ZSAmJiBzdGVwICE9PSBudWxsID8gWy4uLkFycmF5KE1hdGguZmxvb3IoKG1heCAtIG1pbikgLyBzdGVwKSArIDEpXS5tYXAoKF8sIGluZGV4KSA9PiAoe1xuICAgIHZhbHVlOiBtaW4gKyBzdGVwICogaW5kZXhcbiAgfSkpIDogbWFya3NQcm9wIHx8IFtdO1xuICBjb25zdCBtYXJrc1ZhbHVlcyA9IG1hcmtzLm1hcChtYXJrID0+IG1hcmsudmFsdWUpO1xuICBjb25zdCB7XG4gICAgaXNGb2N1c1Zpc2libGVSZWYsXG4gICAgb25CbHVyOiBoYW5kbGVCbHVyVmlzaWJsZSxcbiAgICBvbkZvY3VzOiBoYW5kbGVGb2N1c1Zpc2libGUsXG4gICAgcmVmOiBmb2N1c1Zpc2libGVSZWZcbiAgfSA9IHVzZUlzRm9jdXNWaXNpYmxlKCk7XG4gIGNvbnN0IFtmb2N1c2VkVGh1bWJJbmRleCwgc2V0Rm9jdXNlZFRodW1iSW5kZXhdID0gUmVhY3QudXNlU3RhdGUoLTEpO1xuICBjb25zdCBzbGlkZXJSZWYgPSBSZWFjdC51c2VSZWYoKTtcbiAgY29uc3QgaGFuZGxlRm9jdXNSZWYgPSB1c2VGb3JrUmVmKGZvY3VzVmlzaWJsZVJlZiwgc2xpZGVyUmVmKTtcbiAgY29uc3QgaGFuZGxlUmVmID0gdXNlRm9ya1JlZihyZWYsIGhhbmRsZUZvY3VzUmVmKTtcbiAgY29uc3QgY3JlYXRlSGFuZGxlSGlkZGVuSW5wdXRGb2N1cyA9IG90aGVySGFuZGxlcnMgPT4gZXZlbnQgPT4ge1xuICAgIHZhciBfb3RoZXJIYW5kbGVycyRvbkZvY3U7XG4gICAgY29uc3QgaW5kZXggPSBOdW1iZXIoZXZlbnQuY3VycmVudFRhcmdldC5nZXRBdHRyaWJ1dGUoJ2RhdGEtaW5kZXgnKSk7XG4gICAgaGFuZGxlRm9jdXNWaXNpYmxlKGV2ZW50KTtcbiAgICBpZiAoaXNGb2N1c1Zpc2libGVSZWYuY3VycmVudCA9PT0gdHJ1ZSkge1xuICAgICAgc2V0Rm9jdXNlZFRodW1iSW5kZXgoaW5kZXgpO1xuICAgIH1cbiAgICBzZXRPcGVuKGluZGV4KTtcbiAgICBvdGhlckhhbmRsZXJzID09IG51bGwgfHwgKF9vdGhlckhhbmRsZXJzJG9uRm9jdSA9IG90aGVySGFuZGxlcnMub25Gb2N1cykgPT0gbnVsbCB8fCBfb3RoZXJIYW5kbGVycyRvbkZvY3UuY2FsbChvdGhlckhhbmRsZXJzLCBldmVudCk7XG4gIH07XG4gIGNvbnN0IGNyZWF0ZUhhbmRsZUhpZGRlbklucHV0Qmx1ciA9IG90aGVySGFuZGxlcnMgPT4gZXZlbnQgPT4ge1xuICAgIHZhciBfb3RoZXJIYW5kbGVycyRvbkJsdXI7XG4gICAgaGFuZGxlQmx1clZpc2libGUoZXZlbnQpO1xuICAgIGlmIChpc0ZvY3VzVmlzaWJsZVJlZi5jdXJyZW50ID09PSBmYWxzZSkge1xuICAgICAgc2V0Rm9jdXNlZFRodW1iSW5kZXgoLTEpO1xuICAgIH1cbiAgICBzZXRPcGVuKC0xKTtcbiAgICBvdGhlckhhbmRsZXJzID09IG51bGwgfHwgKF9vdGhlckhhbmRsZXJzJG9uQmx1ciA9IG90aGVySGFuZGxlcnMub25CbHVyKSA9PSBudWxsIHx8IF9vdGhlckhhbmRsZXJzJG9uQmx1ci5jYWxsKG90aGVySGFuZGxlcnMsIGV2ZW50KTtcbiAgfTtcbiAgY29uc3QgY2hhbmdlVmFsdWUgPSAoZXZlbnQsIHZhbHVlSW5wdXQpID0+IHtcbiAgICBjb25zdCBpbmRleCA9IE51bWJlcihldmVudC5jdXJyZW50VGFyZ2V0LmdldEF0dHJpYnV0ZSgnZGF0YS1pbmRleCcpKTtcbiAgICBjb25zdCB2YWx1ZSA9IHZhbHVlc1tpbmRleF07XG4gICAgY29uc3QgbWFya3NJbmRleCA9IG1hcmtzVmFsdWVzLmluZGV4T2YodmFsdWUpO1xuICAgIGxldCBuZXdWYWx1ZSA9IHZhbHVlSW5wdXQ7XG4gICAgaWYgKG1hcmtzICYmIHN0ZXAgPT0gbnVsbCkge1xuICAgICAgY29uc3QgbWF4TWFya3NWYWx1ZSA9IG1hcmtzVmFsdWVzW21hcmtzVmFsdWVzLmxlbmd0aCAtIDFdO1xuICAgICAgaWYgKG5ld1ZhbHVlID4gbWF4TWFya3NWYWx1ZSkge1xuICAgICAgICBuZXdWYWx1ZSA9IG1heE1hcmtzVmFsdWU7XG4gICAgICB9IGVsc2UgaWYgKG5ld1ZhbHVlIDwgbWFya3NWYWx1ZXNbMF0pIHtcbiAgICAgICAgbmV3VmFsdWUgPSBtYXJrc1ZhbHVlc1swXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5ld1ZhbHVlID0gbmV3VmFsdWUgPCB2YWx1ZSA/IG1hcmtzVmFsdWVzW21hcmtzSW5kZXggLSAxXSA6IG1hcmtzVmFsdWVzW21hcmtzSW5kZXggKyAxXTtcbiAgICAgIH1cbiAgICB9XG4gICAgbmV3VmFsdWUgPSBjbGFtcChuZXdWYWx1ZSwgbWluLCBtYXgpO1xuICAgIGlmIChyYW5nZSkge1xuICAgICAgLy8gQm91bmQgdGhlIG5ldyB2YWx1ZSB0byB0aGUgdGh1bWIncyBuZWlnaGJvdXJzLlxuICAgICAgaWYgKGRpc2FibGVTd2FwKSB7XG4gICAgICAgIG5ld1ZhbHVlID0gY2xhbXAobmV3VmFsdWUsIHZhbHVlc1tpbmRleCAtIDFdIHx8IC1JbmZpbml0eSwgdmFsdWVzW2luZGV4ICsgMV0gfHwgSW5maW5pdHkpO1xuICAgICAgfVxuICAgICAgY29uc3QgcHJldmlvdXNWYWx1ZSA9IG5ld1ZhbHVlO1xuICAgICAgbmV3VmFsdWUgPSBzZXRWYWx1ZUluZGV4KHtcbiAgICAgICAgdmFsdWVzLFxuICAgICAgICBuZXdWYWx1ZSxcbiAgICAgICAgaW5kZXhcbiAgICAgIH0pO1xuICAgICAgbGV0IGFjdGl2ZUluZGV4ID0gaW5kZXg7XG5cbiAgICAgIC8vIFBvdGVudGlhbGx5IHN3YXAgdGhlIGluZGV4IGlmIG5lZWRlZC5cbiAgICAgIGlmICghZGlzYWJsZVN3YXApIHtcbiAgICAgICAgYWN0aXZlSW5kZXggPSBuZXdWYWx1ZS5pbmRleE9mKHByZXZpb3VzVmFsdWUpO1xuICAgICAgfVxuICAgICAgZm9jdXNUaHVtYih7XG4gICAgICAgIHNsaWRlclJlZixcbiAgICAgICAgYWN0aXZlSW5kZXhcbiAgICAgIH0pO1xuICAgIH1cbiAgICBzZXRWYWx1ZVN0YXRlKG5ld1ZhbHVlKTtcbiAgICBzZXRGb2N1c2VkVGh1bWJJbmRleChpbmRleCk7XG4gICAgaWYgKGhhbmRsZUNoYW5nZSAmJiAhYXJlVmFsdWVzRXF1YWwobmV3VmFsdWUsIHZhbHVlRGVyaXZlZCkpIHtcbiAgICAgIGhhbmRsZUNoYW5nZShldmVudCwgbmV3VmFsdWUsIGluZGV4KTtcbiAgICB9XG4gICAgaWYgKG9uQ2hhbmdlQ29tbWl0dGVkKSB7XG4gICAgICBvbkNoYW5nZUNvbW1pdHRlZChldmVudCwgbmV3VmFsdWUpO1xuICAgIH1cbiAgfTtcbiAgY29uc3QgY3JlYXRlSGFuZGxlSGlkZGVuSW5wdXRLZXlEb3duID0gb3RoZXJIYW5kbGVycyA9PiBldmVudCA9PiB7XG4gICAgdmFyIF9vdGhlckhhbmRsZXJzJG9uS2V5RDtcbiAgICAvLyBUaGUgU2hpZnQgKyBVcC9Eb3duIGtleWJvYXJkIHNob3J0Y3V0cyBmb3IgbW92aW5nIHRoZSBzbGlkZXIgbWFrZXMgc2Vuc2UgdG8gYmUgc3VwcG9ydGVkXG4gICAgLy8gb25seSBpZiB0aGUgc3RlcCBpcyBkZWZpbmVkLiBJZiB0aGUgc3RlcCBpcyBudWxsLCB0aGlzIG1lYW5zIHRoYSB0aGUgbWFya3MgYXJlIHVzZWQgZm9yIHNwZWNpZnlpbmcgdGhlIHZhbGlkIHZhbHVlcy5cbiAgICBpZiAoc3RlcCAhPT0gbnVsbCkge1xuICAgICAgY29uc3QgaW5kZXggPSBOdW1iZXIoZXZlbnQuY3VycmVudFRhcmdldC5nZXRBdHRyaWJ1dGUoJ2RhdGEtaW5kZXgnKSk7XG4gICAgICBjb25zdCB2YWx1ZSA9IHZhbHVlc1tpbmRleF07XG4gICAgICBsZXQgbmV3VmFsdWUgPSBudWxsO1xuICAgICAgaWYgKChldmVudC5rZXkgPT09ICdBcnJvd0xlZnQnIHx8IGV2ZW50LmtleSA9PT0gJ0Fycm93RG93bicpICYmIGV2ZW50LnNoaWZ0S2V5IHx8IGV2ZW50LmtleSA9PT0gJ1BhZ2VEb3duJykge1xuICAgICAgICBuZXdWYWx1ZSA9IE1hdGgubWF4KHZhbHVlIC0gc2hpZnRTdGVwLCBtaW4pO1xuICAgICAgfSBlbHNlIGlmICgoZXZlbnQua2V5ID09PSAnQXJyb3dSaWdodCcgfHwgZXZlbnQua2V5ID09PSAnQXJyb3dVcCcpICYmIGV2ZW50LnNoaWZ0S2V5IHx8IGV2ZW50LmtleSA9PT0gJ1BhZ2VVcCcpIHtcbiAgICAgICAgbmV3VmFsdWUgPSBNYXRoLm1pbih2YWx1ZSArIHNoaWZ0U3RlcCwgbWF4KTtcbiAgICAgIH1cbiAgICAgIGlmIChuZXdWYWx1ZSAhPT0gbnVsbCkge1xuICAgICAgICBjaGFuZ2VWYWx1ZShldmVudCwgbmV3VmFsdWUpO1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgfVxuICAgIH1cbiAgICBvdGhlckhhbmRsZXJzID09IG51bGwgfHwgKF9vdGhlckhhbmRsZXJzJG9uS2V5RCA9IG90aGVySGFuZGxlcnMub25LZXlEb3duKSA9PSBudWxsIHx8IF9vdGhlckhhbmRsZXJzJG9uS2V5RC5jYWxsKG90aGVySGFuZGxlcnMsIGV2ZW50KTtcbiAgfTtcbiAgdXNlRW5oYW5jZWRFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChkaXNhYmxlZCAmJiBzbGlkZXJSZWYuY3VycmVudC5jb250YWlucyhkb2N1bWVudC5hY3RpdmVFbGVtZW50KSkge1xuICAgICAgdmFyIF9kb2N1bWVudCRhY3RpdmVFbGVtZTtcbiAgICAgIC8vIFRoaXMgaXMgbmVjZXNzYXJ5IGJlY2F1c2UgRmlyZWZveCBhbmQgU2FmYXJpIHdpbGwga2VlcCBmb2N1c1xuICAgICAgLy8gb24gYSBkaXNhYmxlZCBlbGVtZW50OlxuICAgICAgLy8gaHR0cHM6Ly9jb2Rlc2FuZGJveC5pby9wL3NhbmRib3gvbXVpLXByLTIyMjQ3LWZvcmtlZC1oMTUxaD9maWxlPS9zcmMvQXBwLmpzXG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAoX2RvY3VtZW50JGFjdGl2ZUVsZW1lID0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudCkgPT0gbnVsbCB8fCBfZG9jdW1lbnQkYWN0aXZlRWxlbWUuYmx1cigpO1xuICAgIH1cbiAgfSwgW2Rpc2FibGVkXSk7XG4gIGlmIChkaXNhYmxlZCAmJiBhY3RpdmUgIT09IC0xKSB7XG4gICAgc2V0QWN0aXZlKC0xKTtcbiAgfVxuICBpZiAoZGlzYWJsZWQgJiYgZm9jdXNlZFRodW1iSW5kZXggIT09IC0xKSB7XG4gICAgc2V0Rm9jdXNlZFRodW1iSW5kZXgoLTEpO1xuICB9XG4gIGNvbnN0IGNyZWF0ZUhhbmRsZUhpZGRlbklucHV0Q2hhbmdlID0gb3RoZXJIYW5kbGVycyA9PiBldmVudCA9PiB7XG4gICAgdmFyIF9vdGhlckhhbmRsZXJzJG9uQ2hhbjtcbiAgICAoX290aGVySGFuZGxlcnMkb25DaGFuID0gb3RoZXJIYW5kbGVycy5vbkNoYW5nZSkgPT0gbnVsbCB8fCBfb3RoZXJIYW5kbGVycyRvbkNoYW4uY2FsbChvdGhlckhhbmRsZXJzLCBldmVudCk7XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIGNoYW5nZVZhbHVlKGV2ZW50LCBldmVudC50YXJnZXQudmFsdWVBc051bWJlcik7XG4gIH07XG4gIGNvbnN0IHByZXZpb3VzSW5kZXggPSBSZWFjdC51c2VSZWYoKTtcbiAgbGV0IGF4aXMgPSBvcmllbnRhdGlvbjtcbiAgaWYgKGlzUnRsICYmIG9yaWVudGF0aW9uID09PSAnaG9yaXpvbnRhbCcpIHtcbiAgICBheGlzICs9ICctcmV2ZXJzZSc7XG4gIH1cbiAgY29uc3QgZ2V0RmluZ2VyTmV3VmFsdWUgPSAoe1xuICAgIGZpbmdlcixcbiAgICBtb3ZlID0gZmFsc2VcbiAgfSkgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIGN1cnJlbnQ6IHNsaWRlclxuICAgIH0gPSBzbGlkZXJSZWY7XG4gICAgY29uc3Qge1xuICAgICAgd2lkdGgsXG4gICAgICBoZWlnaHQsXG4gICAgICBib3R0b20sXG4gICAgICBsZWZ0XG4gICAgfSA9IHNsaWRlci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICBsZXQgcGVyY2VudDtcbiAgICBpZiAoYXhpcy5pbmRleE9mKCd2ZXJ0aWNhbCcpID09PSAwKSB7XG4gICAgICBwZXJjZW50ID0gKGJvdHRvbSAtIGZpbmdlci55KSAvIGhlaWdodDtcbiAgICB9IGVsc2Uge1xuICAgICAgcGVyY2VudCA9IChmaW5nZXIueCAtIGxlZnQpIC8gd2lkdGg7XG4gICAgfVxuICAgIGlmIChheGlzLmluZGV4T2YoJy1yZXZlcnNlJykgIT09IC0xKSB7XG4gICAgICBwZXJjZW50ID0gMSAtIHBlcmNlbnQ7XG4gICAgfVxuICAgIGxldCBuZXdWYWx1ZTtcbiAgICBuZXdWYWx1ZSA9IHBlcmNlbnRUb1ZhbHVlKHBlcmNlbnQsIG1pbiwgbWF4KTtcbiAgICBpZiAoc3RlcCkge1xuICAgICAgbmV3VmFsdWUgPSByb3VuZFZhbHVlVG9TdGVwKG5ld1ZhbHVlLCBzdGVwLCBtaW4pO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBjbG9zZXN0SW5kZXggPSBmaW5kQ2xvc2VzdChtYXJrc1ZhbHVlcywgbmV3VmFsdWUpO1xuICAgICAgbmV3VmFsdWUgPSBtYXJrc1ZhbHVlc1tjbG9zZXN0SW5kZXhdO1xuICAgIH1cbiAgICBuZXdWYWx1ZSA9IGNsYW1wKG5ld1ZhbHVlLCBtaW4sIG1heCk7XG4gICAgbGV0IGFjdGl2ZUluZGV4ID0gMDtcbiAgICBpZiAocmFuZ2UpIHtcbiAgICAgIGlmICghbW92ZSkge1xuICAgICAgICBhY3RpdmVJbmRleCA9IGZpbmRDbG9zZXN0KHZhbHVlcywgbmV3VmFsdWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYWN0aXZlSW5kZXggPSBwcmV2aW91c0luZGV4LmN1cnJlbnQ7XG4gICAgICB9XG5cbiAgICAgIC8vIEJvdW5kIHRoZSBuZXcgdmFsdWUgdG8gdGhlIHRodW1iJ3MgbmVpZ2hib3Vycy5cbiAgICAgIGlmIChkaXNhYmxlU3dhcCkge1xuICAgICAgICBuZXdWYWx1ZSA9IGNsYW1wKG5ld1ZhbHVlLCB2YWx1ZXNbYWN0aXZlSW5kZXggLSAxXSB8fCAtSW5maW5pdHksIHZhbHVlc1thY3RpdmVJbmRleCArIDFdIHx8IEluZmluaXR5KTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHByZXZpb3VzVmFsdWUgPSBuZXdWYWx1ZTtcbiAgICAgIG5ld1ZhbHVlID0gc2V0VmFsdWVJbmRleCh7XG4gICAgICAgIHZhbHVlcyxcbiAgICAgICAgbmV3VmFsdWUsXG4gICAgICAgIGluZGV4OiBhY3RpdmVJbmRleFxuICAgICAgfSk7XG5cbiAgICAgIC8vIFBvdGVudGlhbGx5IHN3YXAgdGhlIGluZGV4IGlmIG5lZWRlZC5cbiAgICAgIGlmICghKGRpc2FibGVTd2FwICYmIG1vdmUpKSB7XG4gICAgICAgIGFjdGl2ZUluZGV4ID0gbmV3VmFsdWUuaW5kZXhPZihwcmV2aW91c1ZhbHVlKTtcbiAgICAgICAgcHJldmlvdXNJbmRleC5jdXJyZW50ID0gYWN0aXZlSW5kZXg7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICBuZXdWYWx1ZSxcbiAgICAgIGFjdGl2ZUluZGV4XG4gICAgfTtcbiAgfTtcbiAgY29uc3QgaGFuZGxlVG91Y2hNb3ZlID0gdXNlRXZlbnRDYWxsYmFjayhuYXRpdmVFdmVudCA9PiB7XG4gICAgY29uc3QgZmluZ2VyID0gdHJhY2tGaW5nZXIobmF0aXZlRXZlbnQsIHRvdWNoSWQpO1xuICAgIGlmICghZmluZ2VyKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIG1vdmVDb3VudC5jdXJyZW50ICs9IDE7XG5cbiAgICAvLyBDYW5jZWwgbW92ZSBpbiBjYXNlIHNvbWUgb3RoZXIgZWxlbWVudCBjb25zdW1lZCBhIG1vdXNldXAgZXZlbnQgYW5kIGl0IHdhcyBub3QgZmlyZWQuXG4gICAgLy8gQHRzLWlnbm9yZSBidXR0b25zIGRvZXNuJ3Qgbm90IGV4aXN0cyBvbiB0b3VjaCBldmVudFxuICAgIGlmIChuYXRpdmVFdmVudC50eXBlID09PSAnbW91c2Vtb3ZlJyAmJiBuYXRpdmVFdmVudC5idXR0b25zID09PSAwKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVzZS1iZWZvcmUtZGVmaW5lXG4gICAgICBoYW5kbGVUb3VjaEVuZChuYXRpdmVFdmVudCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHtcbiAgICAgIG5ld1ZhbHVlLFxuICAgICAgYWN0aXZlSW5kZXhcbiAgICB9ID0gZ2V0RmluZ2VyTmV3VmFsdWUoe1xuICAgICAgZmluZ2VyLFxuICAgICAgbW92ZTogdHJ1ZVxuICAgIH0pO1xuICAgIGZvY3VzVGh1bWIoe1xuICAgICAgc2xpZGVyUmVmLFxuICAgICAgYWN0aXZlSW5kZXgsXG4gICAgICBzZXRBY3RpdmVcbiAgICB9KTtcbiAgICBzZXRWYWx1ZVN0YXRlKG5ld1ZhbHVlKTtcbiAgICBpZiAoIWRyYWdnaW5nICYmIG1vdmVDb3VudC5jdXJyZW50ID4gSU5URU5USU9OQUxfRFJBR19DT1VOVF9USFJFU0hPTEQpIHtcbiAgICAgIHNldERyYWdnaW5nKHRydWUpO1xuICAgIH1cbiAgICBpZiAoaGFuZGxlQ2hhbmdlICYmICFhcmVWYWx1ZXNFcXVhbChuZXdWYWx1ZSwgdmFsdWVEZXJpdmVkKSkge1xuICAgICAgaGFuZGxlQ2hhbmdlKG5hdGl2ZUV2ZW50LCBuZXdWYWx1ZSwgYWN0aXZlSW5kZXgpO1xuICAgIH1cbiAgfSk7XG4gIGNvbnN0IGhhbmRsZVRvdWNoRW5kID0gdXNlRXZlbnRDYWxsYmFjayhuYXRpdmVFdmVudCA9PiB7XG4gICAgY29uc3QgZmluZ2VyID0gdHJhY2tGaW5nZXIobmF0aXZlRXZlbnQsIHRvdWNoSWQpO1xuICAgIHNldERyYWdnaW5nKGZhbHNlKTtcbiAgICBpZiAoIWZpbmdlcikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCB7XG4gICAgICBuZXdWYWx1ZVxuICAgIH0gPSBnZXRGaW5nZXJOZXdWYWx1ZSh7XG4gICAgICBmaW5nZXIsXG4gICAgICBtb3ZlOiB0cnVlXG4gICAgfSk7XG4gICAgc2V0QWN0aXZlKC0xKTtcbiAgICBpZiAobmF0aXZlRXZlbnQudHlwZSA9PT0gJ3RvdWNoZW5kJykge1xuICAgICAgc2V0T3BlbigtMSk7XG4gICAgfVxuICAgIGlmIChvbkNoYW5nZUNvbW1pdHRlZCkge1xuICAgICAgb25DaGFuZ2VDb21taXR0ZWQobmF0aXZlRXZlbnQsIG5ld1ZhbHVlKTtcbiAgICB9XG4gICAgdG91Y2hJZC5jdXJyZW50ID0gdW5kZWZpbmVkO1xuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11c2UtYmVmb3JlLWRlZmluZVxuICAgIHN0b3BMaXN0ZW5pbmcoKTtcbiAgfSk7XG4gIGNvbnN0IGhhbmRsZVRvdWNoU3RhcnQgPSB1c2VFdmVudENhbGxiYWNrKG5hdGl2ZUV2ZW50ID0+IHtcbiAgICBpZiAoZGlzYWJsZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gSWYgdG91Y2gtYWN0aW9uOiBub25lOyBpcyBub3Qgc3VwcG9ydGVkIHdlIG5lZWQgdG8gcHJldmVudCB0aGUgc2Nyb2xsIG1hbnVhbGx5LlxuICAgIGlmICghZG9lc1N1cHBvcnRUb3VjaEFjdGlvbk5vbmUoKSkge1xuICAgICAgbmF0aXZlRXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICB9XG4gICAgY29uc3QgdG91Y2ggPSBuYXRpdmVFdmVudC5jaGFuZ2VkVG91Y2hlc1swXTtcbiAgICBpZiAodG91Y2ggIT0gbnVsbCkge1xuICAgICAgLy8gQSBudW1iZXIgdGhhdCB1bmlxdWVseSBpZGVudGlmaWVzIHRoZSBjdXJyZW50IGZpbmdlciBpbiB0aGUgdG91Y2ggc2Vzc2lvbi5cbiAgICAgIHRvdWNoSWQuY3VycmVudCA9IHRvdWNoLmlkZW50aWZpZXI7XG4gICAgfVxuICAgIGNvbnN0IGZpbmdlciA9IHRyYWNrRmluZ2VyKG5hdGl2ZUV2ZW50LCB0b3VjaElkKTtcbiAgICBpZiAoZmluZ2VyICE9PSBmYWxzZSkge1xuICAgICAgY29uc3Qge1xuICAgICAgICBuZXdWYWx1ZSxcbiAgICAgICAgYWN0aXZlSW5kZXhcbiAgICAgIH0gPSBnZXRGaW5nZXJOZXdWYWx1ZSh7XG4gICAgICAgIGZpbmdlclxuICAgICAgfSk7XG4gICAgICBmb2N1c1RodW1iKHtcbiAgICAgICAgc2xpZGVyUmVmLFxuICAgICAgICBhY3RpdmVJbmRleCxcbiAgICAgICAgc2V0QWN0aXZlXG4gICAgICB9KTtcbiAgICAgIHNldFZhbHVlU3RhdGUobmV3VmFsdWUpO1xuICAgICAgaWYgKGhhbmRsZUNoYW5nZSAmJiAhYXJlVmFsdWVzRXF1YWwobmV3VmFsdWUsIHZhbHVlRGVyaXZlZCkpIHtcbiAgICAgICAgaGFuZGxlQ2hhbmdlKG5hdGl2ZUV2ZW50LCBuZXdWYWx1ZSwgYWN0aXZlSW5kZXgpO1xuICAgICAgfVxuICAgIH1cbiAgICBtb3ZlQ291bnQuY3VycmVudCA9IDA7XG4gICAgY29uc3QgZG9jID0gb3duZXJEb2N1bWVudChzbGlkZXJSZWYuY3VycmVudCk7XG4gICAgZG9jLmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNobW92ZScsIGhhbmRsZVRvdWNoTW92ZSwge1xuICAgICAgcGFzc2l2ZTogdHJ1ZVxuICAgIH0pO1xuICAgIGRvYy5hZGRFdmVudExpc3RlbmVyKCd0b3VjaGVuZCcsIGhhbmRsZVRvdWNoRW5kLCB7XG4gICAgICBwYXNzaXZlOiB0cnVlXG4gICAgfSk7XG4gIH0pO1xuICBjb25zdCBzdG9wTGlzdGVuaW5nID0gUmVhY3QudXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgIGNvbnN0IGRvYyA9IG93bmVyRG9jdW1lbnQoc2xpZGVyUmVmLmN1cnJlbnQpO1xuICAgIGRvYy5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBoYW5kbGVUb3VjaE1vdmUpO1xuICAgIGRvYy5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgaGFuZGxlVG91Y2hFbmQpO1xuICAgIGRvYy5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaG1vdmUnLCBoYW5kbGVUb3VjaE1vdmUpO1xuICAgIGRvYy5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaGVuZCcsIGhhbmRsZVRvdWNoRW5kKTtcbiAgfSwgW2hhbmRsZVRvdWNoRW5kLCBoYW5kbGVUb3VjaE1vdmVdKTtcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBjdXJyZW50OiBzbGlkZXJcbiAgICB9ID0gc2xpZGVyUmVmO1xuICAgIHNsaWRlci5hZGRFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgaGFuZGxlVG91Y2hTdGFydCwge1xuICAgICAgcGFzc2l2ZTogZG9lc1N1cHBvcnRUb3VjaEFjdGlvbk5vbmUoKVxuICAgIH0pO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBzbGlkZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIGhhbmRsZVRvdWNoU3RhcnQpO1xuICAgICAgc3RvcExpc3RlbmluZygpO1xuICAgIH07XG4gIH0sIFtzdG9wTGlzdGVuaW5nLCBoYW5kbGVUb3VjaFN0YXJ0XSk7XG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKGRpc2FibGVkKSB7XG4gICAgICBzdG9wTGlzdGVuaW5nKCk7XG4gICAgfVxuICB9LCBbZGlzYWJsZWQsIHN0b3BMaXN0ZW5pbmddKTtcbiAgY29uc3QgY3JlYXRlSGFuZGxlTW91c2VEb3duID0gb3RoZXJIYW5kbGVycyA9PiBldmVudCA9PiB7XG4gICAgdmFyIF9vdGhlckhhbmRsZXJzJG9uTW91cztcbiAgICAoX290aGVySGFuZGxlcnMkb25Nb3VzID0gb3RoZXJIYW5kbGVycy5vbk1vdXNlRG93bikgPT0gbnVsbCB8fCBfb3RoZXJIYW5kbGVycyRvbk1vdXMuY2FsbChvdGhlckhhbmRsZXJzLCBldmVudCk7XG4gICAgaWYgKGRpc2FibGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChldmVudC5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gT25seSBoYW5kbGUgbGVmdCBjbGlja3NcbiAgICBpZiAoZXZlbnQuYnV0dG9uICE9PSAwKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gQXZvaWQgdGV4dCBzZWxlY3Rpb25cbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGNvbnN0IGZpbmdlciA9IHRyYWNrRmluZ2VyKGV2ZW50LCB0b3VjaElkKTtcbiAgICBpZiAoZmluZ2VyICE9PSBmYWxzZSkge1xuICAgICAgY29uc3Qge1xuICAgICAgICBuZXdWYWx1ZSxcbiAgICAgICAgYWN0aXZlSW5kZXhcbiAgICAgIH0gPSBnZXRGaW5nZXJOZXdWYWx1ZSh7XG4gICAgICAgIGZpbmdlclxuICAgICAgfSk7XG4gICAgICBmb2N1c1RodW1iKHtcbiAgICAgICAgc2xpZGVyUmVmLFxuICAgICAgICBhY3RpdmVJbmRleCxcbiAgICAgICAgc2V0QWN0aXZlXG4gICAgICB9KTtcbiAgICAgIHNldFZhbHVlU3RhdGUobmV3VmFsdWUpO1xuICAgICAgaWYgKGhhbmRsZUNoYW5nZSAmJiAhYXJlVmFsdWVzRXF1YWwobmV3VmFsdWUsIHZhbHVlRGVyaXZlZCkpIHtcbiAgICAgICAgaGFuZGxlQ2hhbmdlKGV2ZW50LCBuZXdWYWx1ZSwgYWN0aXZlSW5kZXgpO1xuICAgICAgfVxuICAgIH1cbiAgICBtb3ZlQ291bnQuY3VycmVudCA9IDA7XG4gICAgY29uc3QgZG9jID0gb3duZXJEb2N1bWVudChzbGlkZXJSZWYuY3VycmVudCk7XG4gICAgZG9jLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIGhhbmRsZVRvdWNoTW92ZSwge1xuICAgICAgcGFzc2l2ZTogdHJ1ZVxuICAgIH0pO1xuICAgIGRvYy5hZGRFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgaGFuZGxlVG91Y2hFbmQpO1xuICB9O1xuICBjb25zdCB0cmFja09mZnNldCA9IHZhbHVlVG9QZXJjZW50KHJhbmdlID8gdmFsdWVzWzBdIDogbWluLCBtaW4sIG1heCk7XG4gIGNvbnN0IHRyYWNrTGVhcCA9IHZhbHVlVG9QZXJjZW50KHZhbHVlc1t2YWx1ZXMubGVuZ3RoIC0gMV0sIG1pbiwgbWF4KSAtIHRyYWNrT2Zmc2V0O1xuICBjb25zdCBnZXRSb290UHJvcHMgPSAoZXh0ZXJuYWxQcm9wcyA9IHt9KSA9PiB7XG4gICAgY29uc3QgZXh0ZXJuYWxIYW5kbGVycyA9IGV4dHJhY3RFdmVudEhhbmRsZXJzKGV4dGVybmFsUHJvcHMpO1xuICAgIGNvbnN0IG93bkV2ZW50SGFuZGxlcnMgPSB7XG4gICAgICBvbk1vdXNlRG93bjogY3JlYXRlSGFuZGxlTW91c2VEb3duKGV4dGVybmFsSGFuZGxlcnMgfHwge30pXG4gICAgfTtcbiAgICBjb25zdCBtZXJnZWRFdmVudEhhbmRsZXJzID0gX2V4dGVuZHMoe30sIGV4dGVybmFsSGFuZGxlcnMsIG93bkV2ZW50SGFuZGxlcnMpO1xuICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgZXh0ZXJuYWxQcm9wcywge1xuICAgICAgcmVmOiBoYW5kbGVSZWZcbiAgICB9LCBtZXJnZWRFdmVudEhhbmRsZXJzKTtcbiAgfTtcbiAgY29uc3QgY3JlYXRlSGFuZGxlTW91c2VPdmVyID0gb3RoZXJIYW5kbGVycyA9PiBldmVudCA9PiB7XG4gICAgdmFyIF9vdGhlckhhbmRsZXJzJG9uTW91czI7XG4gICAgKF9vdGhlckhhbmRsZXJzJG9uTW91czIgPSBvdGhlckhhbmRsZXJzLm9uTW91c2VPdmVyKSA9PSBudWxsIHx8IF9vdGhlckhhbmRsZXJzJG9uTW91czIuY2FsbChvdGhlckhhbmRsZXJzLCBldmVudCk7XG4gICAgY29uc3QgaW5kZXggPSBOdW1iZXIoZXZlbnQuY3VycmVudFRhcmdldC5nZXRBdHRyaWJ1dGUoJ2RhdGEtaW5kZXgnKSk7XG4gICAgc2V0T3BlbihpbmRleCk7XG4gIH07XG4gIGNvbnN0IGNyZWF0ZUhhbmRsZU1vdXNlTGVhdmUgPSBvdGhlckhhbmRsZXJzID0+IGV2ZW50ID0+IHtcbiAgICB2YXIgX290aGVySGFuZGxlcnMkb25Nb3VzMztcbiAgICAoX290aGVySGFuZGxlcnMkb25Nb3VzMyA9IG90aGVySGFuZGxlcnMub25Nb3VzZUxlYXZlKSA9PSBudWxsIHx8IF9vdGhlckhhbmRsZXJzJG9uTW91czMuY2FsbChvdGhlckhhbmRsZXJzLCBldmVudCk7XG4gICAgc2V0T3BlbigtMSk7XG4gIH07XG4gIGNvbnN0IGdldFRodW1iUHJvcHMgPSAoZXh0ZXJuYWxQcm9wcyA9IHt9KSA9PiB7XG4gICAgY29uc3QgZXh0ZXJuYWxIYW5kbGVycyA9IGV4dHJhY3RFdmVudEhhbmRsZXJzKGV4dGVybmFsUHJvcHMpO1xuICAgIGNvbnN0IG93bkV2ZW50SGFuZGxlcnMgPSB7XG4gICAgICBvbk1vdXNlT3ZlcjogY3JlYXRlSGFuZGxlTW91c2VPdmVyKGV4dGVybmFsSGFuZGxlcnMgfHwge30pLFxuICAgICAgb25Nb3VzZUxlYXZlOiBjcmVhdGVIYW5kbGVNb3VzZUxlYXZlKGV4dGVybmFsSGFuZGxlcnMgfHwge30pXG4gICAgfTtcbiAgICByZXR1cm4gX2V4dGVuZHMoe30sIGV4dGVybmFsUHJvcHMsIGV4dGVybmFsSGFuZGxlcnMsIG93bkV2ZW50SGFuZGxlcnMpO1xuICB9O1xuICBjb25zdCBnZXRUaHVtYlN0eWxlID0gaW5kZXggPT4ge1xuICAgIHJldHVybiB7XG4gICAgICAvLyBTbyB0aGUgbm9uIGFjdGl2ZSB0aHVtYiBkb2Vzbid0IHNob3cgaXRzIGxhYmVsIG9uIGhvdmVyLlxuICAgICAgcG9pbnRlckV2ZW50czogYWN0aXZlICE9PSAtMSAmJiBhY3RpdmUgIT09IGluZGV4ID8gJ25vbmUnIDogdW5kZWZpbmVkXG4gICAgfTtcbiAgfTtcbiAgY29uc3QgZ2V0SGlkZGVuSW5wdXRQcm9wcyA9IChleHRlcm5hbFByb3BzID0ge30pID0+IHtcbiAgICB2YXIgX3BhcmFtZXRlcnMkc3RlcDtcbiAgICBjb25zdCBleHRlcm5hbEhhbmRsZXJzID0gZXh0cmFjdEV2ZW50SGFuZGxlcnMoZXh0ZXJuYWxQcm9wcyk7XG4gICAgY29uc3Qgb3duRXZlbnRIYW5kbGVycyA9IHtcbiAgICAgIG9uQ2hhbmdlOiBjcmVhdGVIYW5kbGVIaWRkZW5JbnB1dENoYW5nZShleHRlcm5hbEhhbmRsZXJzIHx8IHt9KSxcbiAgICAgIG9uRm9jdXM6IGNyZWF0ZUhhbmRsZUhpZGRlbklucHV0Rm9jdXMoZXh0ZXJuYWxIYW5kbGVycyB8fCB7fSksXG4gICAgICBvbkJsdXI6IGNyZWF0ZUhhbmRsZUhpZGRlbklucHV0Qmx1cihleHRlcm5hbEhhbmRsZXJzIHx8IHt9KSxcbiAgICAgIG9uS2V5RG93bjogY3JlYXRlSGFuZGxlSGlkZGVuSW5wdXRLZXlEb3duKGV4dGVybmFsSGFuZGxlcnMgfHwge30pXG4gICAgfTtcbiAgICBjb25zdCBtZXJnZWRFdmVudEhhbmRsZXJzID0gX2V4dGVuZHMoe30sIGV4dGVybmFsSGFuZGxlcnMsIG93bkV2ZW50SGFuZGxlcnMpO1xuICAgIHJldHVybiBfZXh0ZW5kcyh7XG4gICAgICB0YWJJbmRleCxcbiAgICAgICdhcmlhLWxhYmVsbGVkYnknOiBhcmlhTGFiZWxsZWRieSxcbiAgICAgICdhcmlhLW9yaWVudGF0aW9uJzogb3JpZW50YXRpb24sXG4gICAgICAnYXJpYS12YWx1ZW1heCc6IHNjYWxlKG1heCksXG4gICAgICAnYXJpYS12YWx1ZW1pbic6IHNjYWxlKG1pbiksXG4gICAgICBuYW1lLFxuICAgICAgdHlwZTogJ3JhbmdlJyxcbiAgICAgIG1pbjogcGFyYW1ldGVycy5taW4sXG4gICAgICBtYXg6IHBhcmFtZXRlcnMubWF4LFxuICAgICAgc3RlcDogcGFyYW1ldGVycy5zdGVwID09PSBudWxsICYmIHBhcmFtZXRlcnMubWFya3MgPyAnYW55JyA6IChfcGFyYW1ldGVycyRzdGVwID0gcGFyYW1ldGVycy5zdGVwKSAhPSBudWxsID8gX3BhcmFtZXRlcnMkc3RlcCA6IHVuZGVmaW5lZCxcbiAgICAgIGRpc2FibGVkXG4gICAgfSwgZXh0ZXJuYWxQcm9wcywgbWVyZ2VkRXZlbnRIYW5kbGVycywge1xuICAgICAgc3R5bGU6IF9leHRlbmRzKHt9LCB2aXN1YWxseUhpZGRlbiwge1xuICAgICAgICBkaXJlY3Rpb246IGlzUnRsID8gJ3J0bCcgOiAnbHRyJyxcbiAgICAgICAgLy8gU28gdGhhdCBWb2ljZU92ZXIncyBmb2N1cyBpbmRpY2F0b3IgbWF0Y2hlcyB0aGUgdGh1bWIncyBkaW1lbnNpb25zXG4gICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgIGhlaWdodDogJzEwMCUnXG4gICAgICB9KVxuICAgIH0pO1xuICB9O1xuICByZXR1cm4ge1xuICAgIGFjdGl2ZSxcbiAgICBheGlzOiBheGlzLFxuICAgIGF4aXNQcm9wcyxcbiAgICBkcmFnZ2luZyxcbiAgICBmb2N1c2VkVGh1bWJJbmRleCxcbiAgICBnZXRIaWRkZW5JbnB1dFByb3BzLFxuICAgIGdldFJvb3RQcm9wcyxcbiAgICBnZXRUaHVtYlByb3BzLFxuICAgIG1hcmtzOiBtYXJrcyxcbiAgICBvcGVuLFxuICAgIHJhbmdlLFxuICAgIHJvb3RSZWY6IGhhbmRsZVJlZixcbiAgICB0cmFja0xlYXAsXG4gICAgdHJhY2tPZmZzZXQsXG4gICAgdmFsdWVzLFxuICAgIGdldFRodW1iU3R5bGVcbiAgfTtcbn0iLCJpbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzZXMnO1xuaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3MnO1xuZXhwb3J0IGZ1bmN0aW9uIGdldFNsaWRlclV0aWxpdHlDbGFzcyhzbG90KSB7XG4gIHJldHVybiBnZW5lcmF0ZVV0aWxpdHlDbGFzcygnTXVpU2xpZGVyJywgc2xvdCk7XG59XG5jb25zdCBzbGlkZXJDbGFzc2VzID0gZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcygnTXVpU2xpZGVyJywgWydyb290JywgJ2FjdGl2ZScsICdjb2xvclByaW1hcnknLCAnY29sb3JTZWNvbmRhcnknLCAnY29sb3JFcnJvcicsICdjb2xvckluZm8nLCAnY29sb3JTdWNjZXNzJywgJ2NvbG9yV2FybmluZycsICdkaXNhYmxlZCcsICdkcmFnZ2luZycsICdmb2N1c1Zpc2libGUnLCAnbWFyaycsICdtYXJrQWN0aXZlJywgJ21hcmtlZCcsICdtYXJrTGFiZWwnLCAnbWFya0xhYmVsQWN0aXZlJywgJ3JhaWwnLCAnc2l6ZVNtYWxsJywgJ3RodW1iJywgJ3RodW1iQ29sb3JQcmltYXJ5JywgJ3RodW1iQ29sb3JTZWNvbmRhcnknLCAndGh1bWJDb2xvckVycm9yJywgJ3RodW1iQ29sb3JTdWNjZXNzJywgJ3RodW1iQ29sb3JJbmZvJywgJ3RodW1iQ29sb3JXYXJuaW5nJywgJ3RyYWNrJywgJ3RyYWNrSW52ZXJ0ZWQnLCAndHJhY2tGYWxzZScsICd0aHVtYlNpemVTbWFsbCcsICd2YWx1ZUxhYmVsJywgJ3ZhbHVlTGFiZWxPcGVuJywgJ3ZhbHVlTGFiZWxDaXJjbGUnLCAndmFsdWVMYWJlbExhYmVsJywgJ3ZlcnRpY2FsJ10pO1xuZXhwb3J0IGRlZmF1bHQgc2xpZGVyQ2xhc3NlczsiLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJhcmlhLWxhYmVsXCIsIFwiYXJpYS12YWx1ZXRleHRcIiwgXCJhcmlhLWxhYmVsbGVkYnlcIiwgXCJjb21wb25lbnRcIiwgXCJjb21wb25lbnRzXCIsIFwiY29tcG9uZW50c1Byb3BzXCIsIFwiY29sb3JcIiwgXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCIsIFwiZGlzYWJsZVN3YXBcIiwgXCJkaXNhYmxlZFwiLCBcImdldEFyaWFMYWJlbFwiLCBcImdldEFyaWFWYWx1ZVRleHRcIiwgXCJtYXJrc1wiLCBcIm1heFwiLCBcIm1pblwiLCBcIm5hbWVcIiwgXCJvbkNoYW5nZVwiLCBcIm9uQ2hhbmdlQ29tbWl0dGVkXCIsIFwib3JpZW50YXRpb25cIiwgXCJzaGlmdFN0ZXBcIiwgXCJzaXplXCIsIFwic3RlcFwiLCBcInNjYWxlXCIsIFwic2xvdFByb3BzXCIsIFwic2xvdHNcIiwgXCJ0YWJJbmRleFwiLCBcInRyYWNrXCIsIFwidmFsdWVcIiwgXCJ2YWx1ZUxhYmVsRGlzcGxheVwiLCBcInZhbHVlTGFiZWxGb3JtYXRcIl07XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgY2hhaW5Qcm9wVHlwZXMgZnJvbSAnQG11aS91dGlscy9jaGFpblByb3BUeXBlcyc7XG5pbXBvcnQgY29tcG9zZUNsYXNzZXMgZnJvbSAnQG11aS91dGlscy9jb21wb3NlQ2xhc3Nlcyc7XG5pbXBvcnQgeyBhbHBoYSwgbGlnaHRlbiwgZGFya2VuIH0gZnJvbSAnQG11aS9zeXN0ZW0vY29sb3JNYW5pcHVsYXRvcic7XG5pbXBvcnQgeyB1c2VSdGwgfSBmcm9tICdAbXVpL3N5c3RlbS9SdGxQcm92aWRlcic7XG5pbXBvcnQgdXNlU2xvdFByb3BzIGZyb20gJ0BtdWkvdXRpbHMvdXNlU2xvdFByb3BzJztcbmltcG9ydCBpc0hvc3RDb21wb25lbnQgZnJvbSAnQG11aS91dGlscy9pc0hvc3RDb21wb25lbnQnO1xuaW1wb3J0IHsgdXNlU2xpZGVyLCB2YWx1ZVRvUGVyY2VudCB9IGZyb20gJy4vdXNlU2xpZGVyJztcbmltcG9ydCB7IHN0eWxlZCB9IGZyb20gJy4uL3plcm8tc3R5bGVkJztcbmltcG9ydCB7IHVzZURlZmF1bHRQcm9wcyB9IGZyb20gJy4uL0RlZmF1bHRQcm9wc1Byb3ZpZGVyJztcbmltcG9ydCBzbG90U2hvdWxkRm9yd2FyZFByb3AgZnJvbSAnLi4vc3R5bGVzL3Nsb3RTaG91bGRGb3J3YXJkUHJvcCc7XG5pbXBvcnQgc2hvdWxkU3ByZWFkQWRkaXRpb25hbFByb3BzIGZyb20gJy4uL3V0aWxzL3Nob3VsZFNwcmVhZEFkZGl0aW9uYWxQcm9wcyc7XG5pbXBvcnQgY2FwaXRhbGl6ZSBmcm9tICcuLi91dGlscy9jYXBpdGFsaXplJztcbmltcG9ydCBCYXNlU2xpZGVyVmFsdWVMYWJlbCBmcm9tICcuL1NsaWRlclZhbHVlTGFiZWwnO1xuaW1wb3J0IHNsaWRlckNsYXNzZXMsIHsgZ2V0U2xpZGVyVXRpbGl0eUNsYXNzIH0gZnJvbSAnLi9zbGlkZXJDbGFzc2VzJztcbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5pbXBvcnQgeyBqc3hzIGFzIF9qc3hzIH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5mdW5jdGlvbiBJZGVudGl0eSh4KSB7XG4gIHJldHVybiB4O1xufVxuZXhwb3J0IGNvbnN0IFNsaWRlclJvb3QgPSBzdHlsZWQoJ3NwYW4nLCB7XG4gIG5hbWU6ICdNdWlTbGlkZXInLFxuICBzbG90OiAnUm9vdCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9ID0gcHJvcHM7XG4gICAgcmV0dXJuIFtzdHlsZXMucm9vdCwgc3R5bGVzW2Bjb2xvciR7Y2FwaXRhbGl6ZShvd25lclN0YXRlLmNvbG9yKX1gXSwgb3duZXJTdGF0ZS5zaXplICE9PSAnbWVkaXVtJyAmJiBzdHlsZXNbYHNpemUke2NhcGl0YWxpemUob3duZXJTdGF0ZS5zaXplKX1gXSwgb3duZXJTdGF0ZS5tYXJrZWQgJiYgc3R5bGVzLm1hcmtlZCwgb3duZXJTdGF0ZS5vcmllbnRhdGlvbiA9PT0gJ3ZlcnRpY2FsJyAmJiBzdHlsZXMudmVydGljYWwsIG93bmVyU3RhdGUudHJhY2sgPT09ICdpbnZlcnRlZCcgJiYgc3R5bGVzLnRyYWNrSW52ZXJ0ZWQsIG93bmVyU3RhdGUudHJhY2sgPT09IGZhbHNlICYmIHN0eWxlcy50cmFja0ZhbHNlXTtcbiAgfVxufSkoKHtcbiAgdGhlbWVcbn0pID0+IHtcbiAgdmFyIF90aGVtZSR2YXJzO1xuICByZXR1cm4ge1xuICAgIGJvcmRlclJhZGl1czogMTIsXG4gICAgYm94U2l6aW5nOiAnY29udGVudC1ib3gnLFxuICAgIGRpc3BsYXk6ICdpbmxpbmUtYmxvY2snLFxuICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgIGN1cnNvcjogJ3BvaW50ZXInLFxuICAgIHRvdWNoQWN0aW9uOiAnbm9uZScsXG4gICAgV2Via2l0VGFwSGlnaGxpZ2h0Q29sb3I6ICd0cmFuc3BhcmVudCcsXG4gICAgJ0BtZWRpYSBwcmludCc6IHtcbiAgICAgIGNvbG9yQWRqdXN0OiAnZXhhY3QnXG4gICAgfSxcbiAgICBbYCYuJHtzbGlkZXJDbGFzc2VzLmRpc2FibGVkfWBdOiB7XG4gICAgICBwb2ludGVyRXZlbnRzOiAnbm9uZScsXG4gICAgICBjdXJzb3I6ICdkZWZhdWx0JyxcbiAgICAgIGNvbG9yOiAodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZS5ncmV5WzQwMF1cbiAgICB9LFxuICAgIFtgJi4ke3NsaWRlckNsYXNzZXMuZHJhZ2dpbmd9YF06IHtcbiAgICAgIFtgJiAuJHtzbGlkZXJDbGFzc2VzLnRodW1ifSwgJiAuJHtzbGlkZXJDbGFzc2VzLnRyYWNrfWBdOiB7XG4gICAgICAgIHRyYW5zaXRpb246ICdub25lJ1xuICAgICAgfVxuICAgIH0sXG4gICAgdmFyaWFudHM6IFsuLi5PYmplY3Qua2V5cygoKF90aGVtZSR2YXJzID0gdGhlbWUudmFycykgIT0gbnVsbCA/IF90aGVtZSR2YXJzIDogdGhlbWUpLnBhbGV0dGUpLmZpbHRlcihrZXkgPT4ge1xuICAgICAgdmFyIF90aGVtZSR2YXJzMjtcbiAgICAgIHJldHVybiAoKF90aGVtZSR2YXJzMiA9IHRoZW1lLnZhcnMpICE9IG51bGwgPyBfdGhlbWUkdmFyczIgOiB0aGVtZSkucGFsZXR0ZVtrZXldLm1haW47XG4gICAgfSkubWFwKGNvbG9yID0+ICh7XG4gICAgICBwcm9wczoge1xuICAgICAgICBjb2xvclxuICAgICAgfSxcbiAgICAgIHN0eWxlOiB7XG4gICAgICAgIGNvbG9yOiAodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZVtjb2xvcl0ubWFpblxuICAgICAgfVxuICAgIH0pKSwge1xuICAgICAgcHJvcHM6IHtcbiAgICAgICAgb3JpZW50YXRpb246ICdob3Jpem9udGFsJ1xuICAgICAgfSxcbiAgICAgIHN0eWxlOiB7XG4gICAgICAgIGhlaWdodDogNCxcbiAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgcGFkZGluZzogJzEzcHggMCcsXG4gICAgICAgIC8vIFRoZSBwcmltYXJ5IGlucHV0IG1lY2hhbmlzbSBvZiB0aGUgZGV2aWNlIGluY2x1ZGVzIGEgcG9pbnRpbmcgZGV2aWNlIG9mIGxpbWl0ZWQgYWNjdXJhY3kuXG4gICAgICAgICdAbWVkaWEgKHBvaW50ZXI6IGNvYXJzZSknOiB7XG4gICAgICAgICAgLy8gUmVhY2ggNDJweCB0b3VjaCB0YXJnZXQsIGFib3V0IH44bW0gb24gc2NyZWVuLlxuICAgICAgICAgIHBhZGRpbmc6ICcyMHB4IDAnXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBwcm9wczoge1xuICAgICAgICBvcmllbnRhdGlvbjogJ2hvcml6b250YWwnLFxuICAgICAgICBzaXplOiAnc21hbGwnXG4gICAgICB9LFxuICAgICAgc3R5bGU6IHtcbiAgICAgICAgaGVpZ2h0OiAyXG4gICAgICB9XG4gICAgfSwge1xuICAgICAgcHJvcHM6IHtcbiAgICAgICAgb3JpZW50YXRpb246ICdob3Jpem9udGFsJyxcbiAgICAgICAgbWFya2VkOiB0cnVlXG4gICAgICB9LFxuICAgICAgc3R5bGU6IHtcbiAgICAgICAgbWFyZ2luQm90dG9tOiAyMFxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIHByb3BzOiB7XG4gICAgICAgIG9yaWVudGF0aW9uOiAndmVydGljYWwnXG4gICAgICB9LFxuICAgICAgc3R5bGU6IHtcbiAgICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICAgIHdpZHRoOiA0LFxuICAgICAgICBwYWRkaW5nOiAnMCAxM3B4JyxcbiAgICAgICAgLy8gVGhlIHByaW1hcnkgaW5wdXQgbWVjaGFuaXNtIG9mIHRoZSBkZXZpY2UgaW5jbHVkZXMgYSBwb2ludGluZyBkZXZpY2Ugb2YgbGltaXRlZCBhY2N1cmFjeS5cbiAgICAgICAgJ0BtZWRpYSAocG9pbnRlcjogY29hcnNlKSc6IHtcbiAgICAgICAgICAvLyBSZWFjaCA0MnB4IHRvdWNoIHRhcmdldCwgYWJvdXQgfjhtbSBvbiBzY3JlZW4uXG4gICAgICAgICAgcGFkZGluZzogJzAgMjBweCdcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIHByb3BzOiB7XG4gICAgICAgIG9yaWVudGF0aW9uOiAndmVydGljYWwnLFxuICAgICAgICBzaXplOiAnc21hbGwnXG4gICAgICB9LFxuICAgICAgc3R5bGU6IHtcbiAgICAgICAgd2lkdGg6IDJcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBwcm9wczoge1xuICAgICAgICBvcmllbnRhdGlvbjogJ3ZlcnRpY2FsJyxcbiAgICAgICAgbWFya2VkOiB0cnVlXG4gICAgICB9LFxuICAgICAgc3R5bGU6IHtcbiAgICAgICAgbWFyZ2luUmlnaHQ6IDQ0XG4gICAgICB9XG4gICAgfV1cbiAgfTtcbn0pO1xuZXhwb3J0IGNvbnN0IFNsaWRlclJhaWwgPSBzdHlsZWQoJ3NwYW4nLCB7XG4gIG5hbWU6ICdNdWlTbGlkZXInLFxuICBzbG90OiAnUmFpbCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4gc3R5bGVzLnJhaWxcbn0pKHtcbiAgZGlzcGxheTogJ2Jsb2NrJyxcbiAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gIGJvcmRlclJhZGl1czogJ2luaGVyaXQnLFxuICBiYWNrZ3JvdW5kQ29sb3I6ICdjdXJyZW50Q29sb3InLFxuICBvcGFjaXR5OiAwLjM4LFxuICB2YXJpYW50czogW3tcbiAgICBwcm9wczoge1xuICAgICAgb3JpZW50YXRpb246ICdob3Jpem9udGFsJ1xuICAgIH0sXG4gICAgc3R5bGU6IHtcbiAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICBoZWlnaHQ6ICdpbmhlcml0JyxcbiAgICAgIHRvcDogJzUwJScsXG4gICAgICB0cmFuc2Zvcm06ICd0cmFuc2xhdGVZKC01MCUpJ1xuICAgIH1cbiAgfSwge1xuICAgIHByb3BzOiB7XG4gICAgICBvcmllbnRhdGlvbjogJ3ZlcnRpY2FsJ1xuICAgIH0sXG4gICAgc3R5bGU6IHtcbiAgICAgIGhlaWdodDogJzEwMCUnLFxuICAgICAgd2lkdGg6ICdpbmhlcml0JyxcbiAgICAgIGxlZnQ6ICc1MCUnLFxuICAgICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlWCgtNTAlKSdcbiAgICB9XG4gIH0sIHtcbiAgICBwcm9wczoge1xuICAgICAgdHJhY2s6ICdpbnZlcnRlZCdcbiAgICB9LFxuICAgIHN0eWxlOiB7XG4gICAgICBvcGFjaXR5OiAxXG4gICAgfVxuICB9XVxufSk7XG5leHBvcnQgY29uc3QgU2xpZGVyVHJhY2sgPSBzdHlsZWQoJ3NwYW4nLCB7XG4gIG5hbWU6ICdNdWlTbGlkZXInLFxuICBzbG90OiAnVHJhY2snLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHN0eWxlcy50cmFja1xufSkoKHtcbiAgdGhlbWVcbn0pID0+IHtcbiAgdmFyIF90aGVtZSR2YXJzMztcbiAgcmV0dXJuIHtcbiAgICBkaXNwbGF5OiAnYmxvY2snLFxuICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgIGJvcmRlclJhZGl1czogJ2luaGVyaXQnLFxuICAgIGJvcmRlcjogJzFweCBzb2xpZCBjdXJyZW50Q29sb3InLFxuICAgIGJhY2tncm91bmRDb2xvcjogJ2N1cnJlbnRDb2xvcicsXG4gICAgdHJhbnNpdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKFsnbGVmdCcsICd3aWR0aCcsICdib3R0b20nLCAnaGVpZ2h0J10sIHtcbiAgICAgIGR1cmF0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5kdXJhdGlvbi5zaG9ydGVzdFxuICAgIH0pLFxuICAgIHZhcmlhbnRzOiBbe1xuICAgICAgcHJvcHM6IHtcbiAgICAgICAgc2l6ZTogJ3NtYWxsJ1xuICAgICAgfSxcbiAgICAgIHN0eWxlOiB7XG4gICAgICAgIGJvcmRlcjogJ25vbmUnXG4gICAgICB9XG4gICAgfSwge1xuICAgICAgcHJvcHM6IHtcbiAgICAgICAgb3JpZW50YXRpb246ICdob3Jpem9udGFsJ1xuICAgICAgfSxcbiAgICAgIHN0eWxlOiB7XG4gICAgICAgIGhlaWdodDogJ2luaGVyaXQnLFxuICAgICAgICB0b3A6ICc1MCUnLFxuICAgICAgICB0cmFuc2Zvcm06ICd0cmFuc2xhdGVZKC01MCUpJ1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIHByb3BzOiB7XG4gICAgICAgIG9yaWVudGF0aW9uOiAndmVydGljYWwnXG4gICAgICB9LFxuICAgICAgc3R5bGU6IHtcbiAgICAgICAgd2lkdGg6ICdpbmhlcml0JyxcbiAgICAgICAgbGVmdDogJzUwJScsXG4gICAgICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZVgoLTUwJSknXG4gICAgICB9XG4gICAgfSwge1xuICAgICAgcHJvcHM6IHtcbiAgICAgICAgdHJhY2s6IGZhbHNlXG4gICAgICB9LFxuICAgICAgc3R5bGU6IHtcbiAgICAgICAgZGlzcGxheTogJ25vbmUnXG4gICAgICB9XG4gICAgfSwgLi4uT2JqZWN0LmtleXMoKChfdGhlbWUkdmFyczMgPSB0aGVtZS52YXJzKSAhPSBudWxsID8gX3RoZW1lJHZhcnMzIDogdGhlbWUpLnBhbGV0dGUpLmZpbHRlcihrZXkgPT4ge1xuICAgICAgdmFyIF90aGVtZSR2YXJzNDtcbiAgICAgIHJldHVybiAoKF90aGVtZSR2YXJzNCA9IHRoZW1lLnZhcnMpICE9IG51bGwgPyBfdGhlbWUkdmFyczQgOiB0aGVtZSkucGFsZXR0ZVtrZXldLm1haW47XG4gICAgfSkubWFwKGNvbG9yID0+ICh7XG4gICAgICBwcm9wczoge1xuICAgICAgICBjb2xvcixcbiAgICAgICAgdHJhY2s6ICdpbnZlcnRlZCdcbiAgICAgIH0sXG4gICAgICBzdHlsZTogX2V4dGVuZHMoe30sIHRoZW1lLnZhcnMgPyB7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUudmFycy5wYWxldHRlLlNsaWRlcltgJHtjb2xvcn1UcmFja2BdLFxuICAgICAgICBib3JkZXJDb2xvcjogdGhlbWUudmFycy5wYWxldHRlLlNsaWRlcltgJHtjb2xvcn1UcmFja2BdXG4gICAgICB9IDogX2V4dGVuZHMoe1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IGxpZ2h0ZW4odGhlbWUucGFsZXR0ZVtjb2xvcl0ubWFpbiwgMC42MiksXG4gICAgICAgIGJvcmRlckNvbG9yOiBsaWdodGVuKHRoZW1lLnBhbGV0dGVbY29sb3JdLm1haW4sIDAuNjIpXG4gICAgICB9LCB0aGVtZS5hcHBseVN0eWxlcygnZGFyaycsIHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiBkYXJrZW4odGhlbWUucGFsZXR0ZVtjb2xvcl0ubWFpbiwgMC41KVxuICAgICAgfSksIHRoZW1lLmFwcGx5U3R5bGVzKCdkYXJrJywge1xuICAgICAgICBib3JkZXJDb2xvcjogZGFya2VuKHRoZW1lLnBhbGV0dGVbY29sb3JdLm1haW4sIDAuNSlcbiAgICAgIH0pKSlcbiAgICB9KSldXG4gIH07XG59KTtcbmV4cG9ydCBjb25zdCBTbGlkZXJUaHVtYiA9IHN0eWxlZCgnc3BhbicsIHtcbiAgbmFtZTogJ011aVNsaWRlcicsXG4gIHNsb3Q6ICdUaHVtYicsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9ID0gcHJvcHM7XG4gICAgcmV0dXJuIFtzdHlsZXMudGh1bWIsIHN0eWxlc1tgdGh1bWJDb2xvciR7Y2FwaXRhbGl6ZShvd25lclN0YXRlLmNvbG9yKX1gXSwgb3duZXJTdGF0ZS5zaXplICE9PSAnbWVkaXVtJyAmJiBzdHlsZXNbYHRodW1iU2l6ZSR7Y2FwaXRhbGl6ZShvd25lclN0YXRlLnNpemUpfWBdXTtcbiAgfVxufSkoKHtcbiAgdGhlbWVcbn0pID0+IHtcbiAgdmFyIF90aGVtZSR2YXJzNTtcbiAgcmV0dXJuIHtcbiAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICB3aWR0aDogMjAsXG4gICAgaGVpZ2h0OiAyMCxcbiAgICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcbiAgICBib3JkZXJSYWRpdXM6ICc1MCUnLFxuICAgIG91dGxpbmU6IDAsXG4gICAgYmFja2dyb3VuZENvbG9yOiAnY3VycmVudENvbG9yJyxcbiAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAganVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInLFxuICAgIHRyYW5zaXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZShbJ2JveC1zaGFkb3cnLCAnbGVmdCcsICdib3R0b20nXSwge1xuICAgICAgZHVyYXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmR1cmF0aW9uLnNob3J0ZXN0XG4gICAgfSksXG4gICAgJyY6OmJlZm9yZSc6IHtcbiAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgY29udGVudDogJ1wiXCInLFxuICAgICAgYm9yZGVyUmFkaXVzOiAnaW5oZXJpdCcsXG4gICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICBib3hTaGFkb3c6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5zaGFkb3dzWzJdXG4gICAgfSxcbiAgICAnJjo6YWZ0ZXInOiB7XG4gICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgIGNvbnRlbnQ6ICdcIlwiJyxcbiAgICAgIGJvcmRlclJhZGl1czogJzUwJScsXG4gICAgICAvLyA0MnB4IGlzIHRoZSBoaXQgdGFyZ2V0XG4gICAgICB3aWR0aDogNDIsXG4gICAgICBoZWlnaHQ6IDQyLFxuICAgICAgdG9wOiAnNTAlJyxcbiAgICAgIGxlZnQ6ICc1MCUnLFxuICAgICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlKC01MCUsIC01MCUpJ1xuICAgIH0sXG4gICAgW2AmLiR7c2xpZGVyQ2xhc3Nlcy5kaXNhYmxlZH1gXToge1xuICAgICAgJyY6aG92ZXInOiB7XG4gICAgICAgIGJveFNoYWRvdzogJ25vbmUnXG4gICAgICB9XG4gICAgfSxcbiAgICB2YXJpYW50czogW3tcbiAgICAgIHByb3BzOiB7XG4gICAgICAgIHNpemU6ICdzbWFsbCdcbiAgICAgIH0sXG4gICAgICBzdHlsZToge1xuICAgICAgICB3aWR0aDogMTIsXG4gICAgICAgIGhlaWdodDogMTIsXG4gICAgICAgICcmOjpiZWZvcmUnOiB7XG4gICAgICAgICAgYm94U2hhZG93OiAnbm9uZSdcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIHByb3BzOiB7XG4gICAgICAgIG9yaWVudGF0aW9uOiAnaG9yaXpvbnRhbCdcbiAgICAgIH0sXG4gICAgICBzdHlsZToge1xuICAgICAgICB0b3A6ICc1MCUnLFxuICAgICAgICB0cmFuc2Zvcm06ICd0cmFuc2xhdGUoLTUwJSwgLTUwJSknXG4gICAgICB9XG4gICAgfSwge1xuICAgICAgcHJvcHM6IHtcbiAgICAgICAgb3JpZW50YXRpb246ICd2ZXJ0aWNhbCdcbiAgICAgIH0sXG4gICAgICBzdHlsZToge1xuICAgICAgICBsZWZ0OiAnNTAlJyxcbiAgICAgICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlKC01MCUsIDUwJSknXG4gICAgICB9XG4gICAgfSwgLi4uT2JqZWN0LmtleXMoKChfdGhlbWUkdmFyczUgPSB0aGVtZS52YXJzKSAhPSBudWxsID8gX3RoZW1lJHZhcnM1IDogdGhlbWUpLnBhbGV0dGUpLmZpbHRlcihrZXkgPT4ge1xuICAgICAgdmFyIF90aGVtZSR2YXJzNjtcbiAgICAgIHJldHVybiAoKF90aGVtZSR2YXJzNiA9IHRoZW1lLnZhcnMpICE9IG51bGwgPyBfdGhlbWUkdmFyczYgOiB0aGVtZSkucGFsZXR0ZVtrZXldLm1haW47XG4gICAgfSkubWFwKGNvbG9yID0+ICh7XG4gICAgICBwcm9wczoge1xuICAgICAgICBjb2xvclxuICAgICAgfSxcbiAgICAgIHN0eWxlOiB7XG4gICAgICAgIFtgJjpob3ZlciwgJi4ke3NsaWRlckNsYXNzZXMuZm9jdXNWaXNpYmxlfWBdOiBfZXh0ZW5kcyh7fSwgdGhlbWUudmFycyA/IHtcbiAgICAgICAgICBib3hTaGFkb3c6IGAwcHggMHB4IDBweCA4cHggcmdiYSgke3RoZW1lLnZhcnMucGFsZXR0ZVtjb2xvcl0ubWFpbkNoYW5uZWx9IC8gMC4xNilgXG4gICAgICAgIH0gOiB7XG4gICAgICAgICAgYm94U2hhZG93OiBgMHB4IDBweCAwcHggOHB4ICR7YWxwaGEodGhlbWUucGFsZXR0ZVtjb2xvcl0ubWFpbiwgMC4xNil9YFxuICAgICAgICB9LCB7XG4gICAgICAgICAgJ0BtZWRpYSAoaG92ZXI6IG5vbmUpJzoge1xuICAgICAgICAgICAgYm94U2hhZG93OiAnbm9uZSdcbiAgICAgICAgICB9XG4gICAgICAgIH0pLFxuICAgICAgICBbYCYuJHtzbGlkZXJDbGFzc2VzLmFjdGl2ZX1gXTogX2V4dGVuZHMoe30sIHRoZW1lLnZhcnMgPyB7XG4gICAgICAgICAgYm94U2hhZG93OiBgMHB4IDBweCAwcHggMTRweCByZ2JhKCR7dGhlbWUudmFycy5wYWxldHRlW2NvbG9yXS5tYWluQ2hhbm5lbH0gLyAwLjE2KWBcbiAgICAgICAgfSA6IHtcbiAgICAgICAgICBib3hTaGFkb3c6IGAwcHggMHB4IDBweCAxNHB4ICR7YWxwaGEodGhlbWUucGFsZXR0ZVtjb2xvcl0ubWFpbiwgMC4xNil9YFxuICAgICAgICB9KVxuICAgICAgfVxuICAgIH0pKV1cbiAgfTtcbn0pO1xuZXhwb3J0IGNvbnN0IFNsaWRlclZhbHVlTGFiZWwgPSBzdHlsZWQoQmFzZVNsaWRlclZhbHVlTGFiZWwsIHtcbiAgbmFtZTogJ011aVNsaWRlcicsXG4gIHNsb3Q6ICdWYWx1ZUxhYmVsJyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiBzdHlsZXMudmFsdWVMYWJlbFxufSkoKHtcbiAgdGhlbWVcbn0pID0+IF9leHRlbmRzKHtcbiAgekluZGV4OiAxLFxuICB3aGl0ZVNwYWNlOiAnbm93cmFwJ1xufSwgdGhlbWUudHlwb2dyYXBoeS5ib2R5Miwge1xuICBmb250V2VpZ2h0OiA1MDAsXG4gIHRyYW5zaXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZShbJ3RyYW5zZm9ybSddLCB7XG4gICAgZHVyYXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmR1cmF0aW9uLnNob3J0ZXN0XG4gIH0pLFxuICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgYmFja2dyb3VuZENvbG9yOiAodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZS5ncmV5WzYwMF0sXG4gIGJvcmRlclJhZGl1czogMixcbiAgY29sb3I6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlLmNvbW1vbi53aGl0ZSxcbiAgZGlzcGxheTogJ2ZsZXgnLFxuICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAganVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInLFxuICBwYWRkaW5nOiAnMC4yNXJlbSAwLjc1cmVtJyxcbiAgdmFyaWFudHM6IFt7XG4gICAgcHJvcHM6IHtcbiAgICAgIG9yaWVudGF0aW9uOiAnaG9yaXpvbnRhbCdcbiAgICB9LFxuICAgIHN0eWxlOiB7XG4gICAgICB0cmFuc2Zvcm06ICd0cmFuc2xhdGVZKC0xMDAlKSBzY2FsZSgwKScsXG4gICAgICB0b3A6ICctMTBweCcsXG4gICAgICB0cmFuc2Zvcm1PcmlnaW46ICdib3R0b20gY2VudGVyJyxcbiAgICAgICcmOjpiZWZvcmUnOiB7XG4gICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgICBjb250ZW50OiAnXCJcIicsXG4gICAgICAgIHdpZHRoOiA4LFxuICAgICAgICBoZWlnaHQ6IDgsXG4gICAgICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZSgtNTAlLCA1MCUpIHJvdGF0ZSg0NWRlZyknLFxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICdpbmhlcml0JyxcbiAgICAgICAgYm90dG9tOiAwLFxuICAgICAgICBsZWZ0OiAnNTAlJ1xuICAgICAgfSxcbiAgICAgIFtgJi4ke3NsaWRlckNsYXNzZXMudmFsdWVMYWJlbE9wZW59YF06IHtcbiAgICAgICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlWSgtMTAwJSkgc2NhbGUoMSknXG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAgcHJvcHM6IHtcbiAgICAgIG9yaWVudGF0aW9uOiAndmVydGljYWwnXG4gICAgfSxcbiAgICBzdHlsZToge1xuICAgICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlWSgtNTAlKSBzY2FsZSgwKScsXG4gICAgICByaWdodDogJzMwcHgnLFxuICAgICAgdG9wOiAnNTAlJyxcbiAgICAgIHRyYW5zZm9ybU9yaWdpbjogJ3JpZ2h0IGNlbnRlcicsXG4gICAgICAnJjo6YmVmb3JlJzoge1xuICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgY29udGVudDogJ1wiXCInLFxuICAgICAgICB3aWR0aDogOCxcbiAgICAgICAgaGVpZ2h0OiA4LFxuICAgICAgICB0cmFuc2Zvcm06ICd0cmFuc2xhdGUoLTUwJSwgLTUwJSkgcm90YXRlKDQ1ZGVnKScsXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogJ2luaGVyaXQnLFxuICAgICAgICByaWdodDogLTgsXG4gICAgICAgIHRvcDogJzUwJSdcbiAgICAgIH0sXG4gICAgICBbYCYuJHtzbGlkZXJDbGFzc2VzLnZhbHVlTGFiZWxPcGVufWBdOiB7XG4gICAgICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZVkoLTUwJSkgc2NhbGUoMSknXG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAgcHJvcHM6IHtcbiAgICAgIHNpemU6ICdzbWFsbCdcbiAgICB9LFxuICAgIHN0eWxlOiB7XG4gICAgICBmb250U2l6ZTogdGhlbWUudHlwb2dyYXBoeS5weFRvUmVtKDEyKSxcbiAgICAgIHBhZGRpbmc6ICcwLjI1cmVtIDAuNXJlbSdcbiAgICB9XG4gIH0sIHtcbiAgICBwcm9wczoge1xuICAgICAgb3JpZW50YXRpb246ICd2ZXJ0aWNhbCcsXG4gICAgICBzaXplOiAnc21hbGwnXG4gICAgfSxcbiAgICBzdHlsZToge1xuICAgICAgcmlnaHQ6ICcyMHB4J1xuICAgIH1cbiAgfV1cbn0pKTtcbmV4cG9ydCBjb25zdCBTbGlkZXJNYXJrID0gc3R5bGVkKCdzcGFuJywge1xuICBuYW1lOiAnTXVpU2xpZGVyJyxcbiAgc2xvdDogJ01hcmsnLFxuICBzaG91bGRGb3J3YXJkUHJvcDogcHJvcCA9PiBzbG90U2hvdWxkRm9yd2FyZFByb3AocHJvcCkgJiYgcHJvcCAhPT0gJ21hcmtBY3RpdmUnLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBtYXJrQWN0aXZlXG4gICAgfSA9IHByb3BzO1xuICAgIHJldHVybiBbc3R5bGVzLm1hcmssIG1hcmtBY3RpdmUgJiYgc3R5bGVzLm1hcmtBY3RpdmVdO1xuICB9XG59KSgoe1xuICB0aGVtZVxufSkgPT4gKHtcbiAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gIHdpZHRoOiAyLFxuICBoZWlnaHQ6IDIsXG4gIGJvcmRlclJhZGl1czogMSxcbiAgYmFja2dyb3VuZENvbG9yOiAnY3VycmVudENvbG9yJyxcbiAgdmFyaWFudHM6IFt7XG4gICAgcHJvcHM6IHtcbiAgICAgIG9yaWVudGF0aW9uOiAnaG9yaXpvbnRhbCdcbiAgICB9LFxuICAgIHN0eWxlOiB7XG4gICAgICB0b3A6ICc1MCUnLFxuICAgICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlKC0xcHgsIC01MCUpJ1xuICAgIH1cbiAgfSwge1xuICAgIHByb3BzOiB7XG4gICAgICBvcmllbnRhdGlvbjogJ3ZlcnRpY2FsJ1xuICAgIH0sXG4gICAgc3R5bGU6IHtcbiAgICAgIGxlZnQ6ICc1MCUnLFxuICAgICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlKC01MCUsIDFweCknXG4gICAgfVxuICB9LCB7XG4gICAgcHJvcHM6IHtcbiAgICAgIG1hcmtBY3RpdmU6IHRydWVcbiAgICB9LFxuICAgIHN0eWxlOiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlLmJhY2tncm91bmQucGFwZXIsXG4gICAgICBvcGFjaXR5OiAwLjhcbiAgICB9XG4gIH1dXG59KSk7XG5leHBvcnQgY29uc3QgU2xpZGVyTWFya0xhYmVsID0gc3R5bGVkKCdzcGFuJywge1xuICBuYW1lOiAnTXVpU2xpZGVyJyxcbiAgc2xvdDogJ01hcmtMYWJlbCcsXG4gIHNob3VsZEZvcndhcmRQcm9wOiBwcm9wID0+IHNsb3RTaG91bGRGb3J3YXJkUHJvcChwcm9wKSAmJiBwcm9wICE9PSAnbWFya0xhYmVsQWN0aXZlJyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiBzdHlsZXMubWFya0xhYmVsXG59KSgoe1xuICB0aGVtZVxufSkgPT4gX2V4dGVuZHMoe30sIHRoZW1lLnR5cG9ncmFwaHkuYm9keTIsIHtcbiAgY29sb3I6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlLnRleHQuc2Vjb25kYXJ5LFxuICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgd2hpdGVTcGFjZTogJ25vd3JhcCcsXG4gIHZhcmlhbnRzOiBbe1xuICAgIHByb3BzOiB7XG4gICAgICBvcmllbnRhdGlvbjogJ2hvcml6b250YWwnXG4gICAgfSxcbiAgICBzdHlsZToge1xuICAgICAgdG9wOiAzMCxcbiAgICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZVgoLTUwJSknLFxuICAgICAgJ0BtZWRpYSAocG9pbnRlcjogY29hcnNlKSc6IHtcbiAgICAgICAgdG9wOiA0MFxuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIHByb3BzOiB7XG4gICAgICBvcmllbnRhdGlvbjogJ3ZlcnRpY2FsJ1xuICAgIH0sXG4gICAgc3R5bGU6IHtcbiAgICAgIGxlZnQ6IDM2LFxuICAgICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlWSg1MCUpJyxcbiAgICAgICdAbWVkaWEgKHBvaW50ZXI6IGNvYXJzZSknOiB7XG4gICAgICAgIGxlZnQ6IDQ0XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAgcHJvcHM6IHtcbiAgICAgIG1hcmtMYWJlbEFjdGl2ZTogdHJ1ZVxuICAgIH0sXG4gICAgc3R5bGU6IHtcbiAgICAgIGNvbG9yOiAodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZS50ZXh0LnByaW1hcnlcbiAgICB9XG4gIH1dXG59KSk7XG5jb25zdCB1c2VVdGlsaXR5Q2xhc3NlcyA9IG93bmVyU3RhdGUgPT4ge1xuICBjb25zdCB7XG4gICAgZGlzYWJsZWQsXG4gICAgZHJhZ2dpbmcsXG4gICAgbWFya2VkLFxuICAgIG9yaWVudGF0aW9uLFxuICAgIHRyYWNrLFxuICAgIGNsYXNzZXMsXG4gICAgY29sb3IsXG4gICAgc2l6ZVxuICB9ID0gb3duZXJTdGF0ZTtcbiAgY29uc3Qgc2xvdHMgPSB7XG4gICAgcm9vdDogWydyb290JywgZGlzYWJsZWQgJiYgJ2Rpc2FibGVkJywgZHJhZ2dpbmcgJiYgJ2RyYWdnaW5nJywgbWFya2VkICYmICdtYXJrZWQnLCBvcmllbnRhdGlvbiA9PT0gJ3ZlcnRpY2FsJyAmJiAndmVydGljYWwnLCB0cmFjayA9PT0gJ2ludmVydGVkJyAmJiAndHJhY2tJbnZlcnRlZCcsIHRyYWNrID09PSBmYWxzZSAmJiAndHJhY2tGYWxzZScsIGNvbG9yICYmIGBjb2xvciR7Y2FwaXRhbGl6ZShjb2xvcil9YCwgc2l6ZSAmJiBgc2l6ZSR7Y2FwaXRhbGl6ZShzaXplKX1gXSxcbiAgICByYWlsOiBbJ3JhaWwnXSxcbiAgICB0cmFjazogWyd0cmFjayddLFxuICAgIG1hcms6IFsnbWFyayddLFxuICAgIG1hcmtBY3RpdmU6IFsnbWFya0FjdGl2ZSddLFxuICAgIG1hcmtMYWJlbDogWydtYXJrTGFiZWwnXSxcbiAgICBtYXJrTGFiZWxBY3RpdmU6IFsnbWFya0xhYmVsQWN0aXZlJ10sXG4gICAgdmFsdWVMYWJlbDogWyd2YWx1ZUxhYmVsJ10sXG4gICAgdGh1bWI6IFsndGh1bWInLCBkaXNhYmxlZCAmJiAnZGlzYWJsZWQnLCBzaXplICYmIGB0aHVtYlNpemUke2NhcGl0YWxpemUoc2l6ZSl9YCwgY29sb3IgJiYgYHRodW1iQ29sb3Ike2NhcGl0YWxpemUoY29sb3IpfWBdLFxuICAgIGFjdGl2ZTogWydhY3RpdmUnXSxcbiAgICBkaXNhYmxlZDogWydkaXNhYmxlZCddLFxuICAgIGZvY3VzVmlzaWJsZTogWydmb2N1c1Zpc2libGUnXVxuICB9O1xuICByZXR1cm4gY29tcG9zZUNsYXNzZXMoc2xvdHMsIGdldFNsaWRlclV0aWxpdHlDbGFzcywgY2xhc3Nlcyk7XG59O1xuY29uc3QgRm9yd2FyZCA9ICh7XG4gIGNoaWxkcmVuXG59KSA9PiBjaGlsZHJlbjtcbmNvbnN0IFNsaWRlciA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIFNsaWRlcihpbnB1dFByb3BzLCByZWYpIHtcbiAgdmFyIF9yZWYsIF9zbG90cyRyb290LCBfcmVmMiwgX3Nsb3RzJHJhaWwsIF9yZWYzLCBfc2xvdHMkdHJhY2ssIF9yZWY0LCBfc2xvdHMkdGh1bWIsIF9yZWY1LCBfc2xvdHMkdmFsdWVMYWJlbCwgX3JlZjYsIF9zbG90cyRtYXJrLCBfcmVmNywgX3Nsb3RzJG1hcmtMYWJlbCwgX3JlZjgsIF9zbG90cyRpbnB1dCwgX3Nsb3RQcm9wcyRyb290LCBfc2xvdFByb3BzJHJhaWwsIF9zbG90UHJvcHMkdHJhY2ssIF9zbG90UHJvcHMkdGh1bWIsIF9zbG90UHJvcHMkdmFsdWVMYWJlbCwgX3Nsb3RQcm9wcyRtYXJrLCBfc2xvdFByb3BzJG1hcmtMYWJlbCwgX3Nsb3RQcm9wcyRpbnB1dDtcbiAgY29uc3QgcHJvcHMgPSB1c2VEZWZhdWx0UHJvcHMoe1xuICAgIHByb3BzOiBpbnB1dFByb3BzLFxuICAgIG5hbWU6ICdNdWlTbGlkZXInXG4gIH0pO1xuICBjb25zdCBpc1J0bCA9IHVzZVJ0bCgpO1xuICBjb25zdCB7XG4gICAgICAnYXJpYS1sYWJlbCc6IGFyaWFMYWJlbCxcbiAgICAgICdhcmlhLXZhbHVldGV4dCc6IGFyaWFWYWx1ZXRleHQsXG4gICAgICAnYXJpYS1sYWJlbGxlZGJ5JzogYXJpYUxhYmVsbGVkYnksXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QvcHJvcC10eXBlc1xuICAgICAgY29tcG9uZW50ID0gJ3NwYW4nLFxuICAgICAgY29tcG9uZW50cyA9IHt9LFxuICAgICAgY29tcG9uZW50c1Byb3BzID0ge30sXG4gICAgICBjb2xvciA9ICdwcmltYXJ5JyxcbiAgICAgIGNsYXNzZXM6IGNsYXNzZXNQcm9wLFxuICAgICAgY2xhc3NOYW1lLFxuICAgICAgZGlzYWJsZVN3YXAgPSBmYWxzZSxcbiAgICAgIGRpc2FibGVkID0gZmFsc2UsXG4gICAgICBnZXRBcmlhTGFiZWwsXG4gICAgICBnZXRBcmlhVmFsdWVUZXh0LFxuICAgICAgbWFya3M6IG1hcmtzUHJvcCA9IGZhbHNlLFxuICAgICAgbWF4ID0gMTAwLFxuICAgICAgbWluID0gMCxcbiAgICAgIG9yaWVudGF0aW9uID0gJ2hvcml6b250YWwnLFxuICAgICAgc2hpZnRTdGVwID0gMTAsXG4gICAgICBzaXplID0gJ21lZGl1bScsXG4gICAgICBzdGVwID0gMSxcbiAgICAgIHNjYWxlID0gSWRlbnRpdHksXG4gICAgICBzbG90UHJvcHMsXG4gICAgICBzbG90cyxcbiAgICAgIHRyYWNrID0gJ25vcm1hbCcsXG4gICAgICB2YWx1ZUxhYmVsRGlzcGxheSA9ICdvZmYnLFxuICAgICAgdmFsdWVMYWJlbEZvcm1hdCA9IElkZW50aXR5XG4gICAgfSA9IHByb3BzLFxuICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIF9leGNsdWRlZCk7XG4gIGNvbnN0IG93bmVyU3RhdGUgPSBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICBpc1J0bCxcbiAgICBtYXgsXG4gICAgbWluLFxuICAgIGNsYXNzZXM6IGNsYXNzZXNQcm9wLFxuICAgIGRpc2FibGVkLFxuICAgIGRpc2FibGVTd2FwLFxuICAgIG9yaWVudGF0aW9uLFxuICAgIG1hcmtzOiBtYXJrc1Byb3AsXG4gICAgY29sb3IsXG4gICAgc2l6ZSxcbiAgICBzdGVwLFxuICAgIHNoaWZ0U3RlcCxcbiAgICBzY2FsZSxcbiAgICB0cmFjayxcbiAgICB2YWx1ZUxhYmVsRGlzcGxheSxcbiAgICB2YWx1ZUxhYmVsRm9ybWF0XG4gIH0pO1xuICBjb25zdCB7XG4gICAgYXhpc1Byb3BzLFxuICAgIGdldFJvb3RQcm9wcyxcbiAgICBnZXRIaWRkZW5JbnB1dFByb3BzLFxuICAgIGdldFRodW1iUHJvcHMsXG4gICAgb3BlbixcbiAgICBhY3RpdmUsXG4gICAgYXhpcyxcbiAgICBmb2N1c2VkVGh1bWJJbmRleCxcbiAgICByYW5nZSxcbiAgICBkcmFnZ2luZyxcbiAgICBtYXJrcyxcbiAgICB2YWx1ZXMsXG4gICAgdHJhY2tPZmZzZXQsXG4gICAgdHJhY2tMZWFwLFxuICAgIGdldFRodW1iU3R5bGVcbiAgfSA9IHVzZVNsaWRlcihfZXh0ZW5kcyh7fSwgb3duZXJTdGF0ZSwge1xuICAgIHJvb3RSZWY6IHJlZlxuICB9KSk7XG4gIG93bmVyU3RhdGUubWFya2VkID0gbWFya3MubGVuZ3RoID4gMCAmJiBtYXJrcy5zb21lKG1hcmsgPT4gbWFyay5sYWJlbCk7XG4gIG93bmVyU3RhdGUuZHJhZ2dpbmcgPSBkcmFnZ2luZztcbiAgb3duZXJTdGF0ZS5mb2N1c2VkVGh1bWJJbmRleCA9IGZvY3VzZWRUaHVtYkluZGV4O1xuICBjb25zdCBjbGFzc2VzID0gdXNlVXRpbGl0eUNsYXNzZXMob3duZXJTdGF0ZSk7XG5cbiAgLy8gc3VwcG9ydCBib3RoIGBzbG90c2AgYW5kIGBjb21wb25lbnRzYCBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eVxuICBjb25zdCBSb290U2xvdCA9IChfcmVmID0gKF9zbG90cyRyb290ID0gc2xvdHMgPT0gbnVsbCA/IHZvaWQgMCA6IHNsb3RzLnJvb3QpICE9IG51bGwgPyBfc2xvdHMkcm9vdCA6IGNvbXBvbmVudHMuUm9vdCkgIT0gbnVsbCA/IF9yZWYgOiBTbGlkZXJSb290O1xuICBjb25zdCBSYWlsU2xvdCA9IChfcmVmMiA9IChfc2xvdHMkcmFpbCA9IHNsb3RzID09IG51bGwgPyB2b2lkIDAgOiBzbG90cy5yYWlsKSAhPSBudWxsID8gX3Nsb3RzJHJhaWwgOiBjb21wb25lbnRzLlJhaWwpICE9IG51bGwgPyBfcmVmMiA6IFNsaWRlclJhaWw7XG4gIGNvbnN0IFRyYWNrU2xvdCA9IChfcmVmMyA9IChfc2xvdHMkdHJhY2sgPSBzbG90cyA9PSBudWxsID8gdm9pZCAwIDogc2xvdHMudHJhY2spICE9IG51bGwgPyBfc2xvdHMkdHJhY2sgOiBjb21wb25lbnRzLlRyYWNrKSAhPSBudWxsID8gX3JlZjMgOiBTbGlkZXJUcmFjaztcbiAgY29uc3QgVGh1bWJTbG90ID0gKF9yZWY0ID0gKF9zbG90cyR0aHVtYiA9IHNsb3RzID09IG51bGwgPyB2b2lkIDAgOiBzbG90cy50aHVtYikgIT0gbnVsbCA/IF9zbG90cyR0aHVtYiA6IGNvbXBvbmVudHMuVGh1bWIpICE9IG51bGwgPyBfcmVmNCA6IFNsaWRlclRodW1iO1xuICBjb25zdCBWYWx1ZUxhYmVsU2xvdCA9IChfcmVmNSA9IChfc2xvdHMkdmFsdWVMYWJlbCA9IHNsb3RzID09IG51bGwgPyB2b2lkIDAgOiBzbG90cy52YWx1ZUxhYmVsKSAhPSBudWxsID8gX3Nsb3RzJHZhbHVlTGFiZWwgOiBjb21wb25lbnRzLlZhbHVlTGFiZWwpICE9IG51bGwgPyBfcmVmNSA6IFNsaWRlclZhbHVlTGFiZWw7XG4gIGNvbnN0IE1hcmtTbG90ID0gKF9yZWY2ID0gKF9zbG90cyRtYXJrID0gc2xvdHMgPT0gbnVsbCA/IHZvaWQgMCA6IHNsb3RzLm1hcmspICE9IG51bGwgPyBfc2xvdHMkbWFyayA6IGNvbXBvbmVudHMuTWFyaykgIT0gbnVsbCA/IF9yZWY2IDogU2xpZGVyTWFyaztcbiAgY29uc3QgTWFya0xhYmVsU2xvdCA9IChfcmVmNyA9IChfc2xvdHMkbWFya0xhYmVsID0gc2xvdHMgPT0gbnVsbCA/IHZvaWQgMCA6IHNsb3RzLm1hcmtMYWJlbCkgIT0gbnVsbCA/IF9zbG90cyRtYXJrTGFiZWwgOiBjb21wb25lbnRzLk1hcmtMYWJlbCkgIT0gbnVsbCA/IF9yZWY3IDogU2xpZGVyTWFya0xhYmVsO1xuICBjb25zdCBJbnB1dFNsb3QgPSAoX3JlZjggPSAoX3Nsb3RzJGlucHV0ID0gc2xvdHMgPT0gbnVsbCA/IHZvaWQgMCA6IHNsb3RzLmlucHV0KSAhPSBudWxsID8gX3Nsb3RzJGlucHV0IDogY29tcG9uZW50cy5JbnB1dCkgIT0gbnVsbCA/IF9yZWY4IDogJ2lucHV0JztcbiAgY29uc3Qgcm9vdFNsb3RQcm9wcyA9IChfc2xvdFByb3BzJHJvb3QgPSBzbG90UHJvcHMgPT0gbnVsbCA/IHZvaWQgMCA6IHNsb3RQcm9wcy5yb290KSAhPSBudWxsID8gX3Nsb3RQcm9wcyRyb290IDogY29tcG9uZW50c1Byb3BzLnJvb3Q7XG4gIGNvbnN0IHJhaWxTbG90UHJvcHMgPSAoX3Nsb3RQcm9wcyRyYWlsID0gc2xvdFByb3BzID09IG51bGwgPyB2b2lkIDAgOiBzbG90UHJvcHMucmFpbCkgIT0gbnVsbCA/IF9zbG90UHJvcHMkcmFpbCA6IGNvbXBvbmVudHNQcm9wcy5yYWlsO1xuICBjb25zdCB0cmFja1Nsb3RQcm9wcyA9IChfc2xvdFByb3BzJHRyYWNrID0gc2xvdFByb3BzID09IG51bGwgPyB2b2lkIDAgOiBzbG90UHJvcHMudHJhY2spICE9IG51bGwgPyBfc2xvdFByb3BzJHRyYWNrIDogY29tcG9uZW50c1Byb3BzLnRyYWNrO1xuICBjb25zdCB0aHVtYlNsb3RQcm9wcyA9IChfc2xvdFByb3BzJHRodW1iID0gc2xvdFByb3BzID09IG51bGwgPyB2b2lkIDAgOiBzbG90UHJvcHMudGh1bWIpICE9IG51bGwgPyBfc2xvdFByb3BzJHRodW1iIDogY29tcG9uZW50c1Byb3BzLnRodW1iO1xuICBjb25zdCB2YWx1ZUxhYmVsU2xvdFByb3BzID0gKF9zbG90UHJvcHMkdmFsdWVMYWJlbCA9IHNsb3RQcm9wcyA9PSBudWxsID8gdm9pZCAwIDogc2xvdFByb3BzLnZhbHVlTGFiZWwpICE9IG51bGwgPyBfc2xvdFByb3BzJHZhbHVlTGFiZWwgOiBjb21wb25lbnRzUHJvcHMudmFsdWVMYWJlbDtcbiAgY29uc3QgbWFya1Nsb3RQcm9wcyA9IChfc2xvdFByb3BzJG1hcmsgPSBzbG90UHJvcHMgPT0gbnVsbCA/IHZvaWQgMCA6IHNsb3RQcm9wcy5tYXJrKSAhPSBudWxsID8gX3Nsb3RQcm9wcyRtYXJrIDogY29tcG9uZW50c1Byb3BzLm1hcms7XG4gIGNvbnN0IG1hcmtMYWJlbFNsb3RQcm9wcyA9IChfc2xvdFByb3BzJG1hcmtMYWJlbCA9IHNsb3RQcm9wcyA9PSBudWxsID8gdm9pZCAwIDogc2xvdFByb3BzLm1hcmtMYWJlbCkgIT0gbnVsbCA/IF9zbG90UHJvcHMkbWFya0xhYmVsIDogY29tcG9uZW50c1Byb3BzLm1hcmtMYWJlbDtcbiAgY29uc3QgaW5wdXRTbG90UHJvcHMgPSAoX3Nsb3RQcm9wcyRpbnB1dCA9IHNsb3RQcm9wcyA9PSBudWxsID8gdm9pZCAwIDogc2xvdFByb3BzLmlucHV0KSAhPSBudWxsID8gX3Nsb3RQcm9wcyRpbnB1dCA6IGNvbXBvbmVudHNQcm9wcy5pbnB1dDtcbiAgY29uc3Qgcm9vdFByb3BzID0gdXNlU2xvdFByb3BzKHtcbiAgICBlbGVtZW50VHlwZTogUm9vdFNsb3QsXG4gICAgZ2V0U2xvdFByb3BzOiBnZXRSb290UHJvcHMsXG4gICAgZXh0ZXJuYWxTbG90UHJvcHM6IHJvb3RTbG90UHJvcHMsXG4gICAgZXh0ZXJuYWxGb3J3YXJkZWRQcm9wczogb3RoZXIsXG4gICAgYWRkaXRpb25hbFByb3BzOiBfZXh0ZW5kcyh7fSwgc2hvdWxkU3ByZWFkQWRkaXRpb25hbFByb3BzKFJvb3RTbG90KSAmJiB7XG4gICAgICBhczogY29tcG9uZW50XG4gICAgfSksXG4gICAgb3duZXJTdGF0ZTogX2V4dGVuZHMoe30sIG93bmVyU3RhdGUsIHJvb3RTbG90UHJvcHMgPT0gbnVsbCA/IHZvaWQgMCA6IHJvb3RTbG90UHJvcHMub3duZXJTdGF0ZSksXG4gICAgY2xhc3NOYW1lOiBbY2xhc3Nlcy5yb290LCBjbGFzc05hbWVdXG4gIH0pO1xuICBjb25zdCByYWlsUHJvcHMgPSB1c2VTbG90UHJvcHMoe1xuICAgIGVsZW1lbnRUeXBlOiBSYWlsU2xvdCxcbiAgICBleHRlcm5hbFNsb3RQcm9wczogcmFpbFNsb3RQcm9wcyxcbiAgICBvd25lclN0YXRlLFxuICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5yYWlsXG4gIH0pO1xuICBjb25zdCB0cmFja1Byb3BzID0gdXNlU2xvdFByb3BzKHtcbiAgICBlbGVtZW50VHlwZTogVHJhY2tTbG90LFxuICAgIGV4dGVybmFsU2xvdFByb3BzOiB0cmFja1Nsb3RQcm9wcyxcbiAgICBhZGRpdGlvbmFsUHJvcHM6IHtcbiAgICAgIHN0eWxlOiBfZXh0ZW5kcyh7fSwgYXhpc1Byb3BzW2F4aXNdLm9mZnNldCh0cmFja09mZnNldCksIGF4aXNQcm9wc1theGlzXS5sZWFwKHRyYWNrTGVhcCkpXG4gICAgfSxcbiAgICBvd25lclN0YXRlOiBfZXh0ZW5kcyh7fSwgb3duZXJTdGF0ZSwgdHJhY2tTbG90UHJvcHMgPT0gbnVsbCA/IHZvaWQgMCA6IHRyYWNrU2xvdFByb3BzLm93bmVyU3RhdGUpLFxuICAgIGNsYXNzTmFtZTogY2xhc3Nlcy50cmFja1xuICB9KTtcbiAgY29uc3QgdGh1bWJQcm9wcyA9IHVzZVNsb3RQcm9wcyh7XG4gICAgZWxlbWVudFR5cGU6IFRodW1iU2xvdCxcbiAgICBnZXRTbG90UHJvcHM6IGdldFRodW1iUHJvcHMsXG4gICAgZXh0ZXJuYWxTbG90UHJvcHM6IHRodW1iU2xvdFByb3BzLFxuICAgIG93bmVyU3RhdGU6IF9leHRlbmRzKHt9LCBvd25lclN0YXRlLCB0aHVtYlNsb3RQcm9wcyA9PSBudWxsID8gdm9pZCAwIDogdGh1bWJTbG90UHJvcHMub3duZXJTdGF0ZSksXG4gICAgY2xhc3NOYW1lOiBjbGFzc2VzLnRodW1iXG4gIH0pO1xuICBjb25zdCB2YWx1ZUxhYmVsUHJvcHMgPSB1c2VTbG90UHJvcHMoe1xuICAgIGVsZW1lbnRUeXBlOiBWYWx1ZUxhYmVsU2xvdCxcbiAgICBleHRlcm5hbFNsb3RQcm9wczogdmFsdWVMYWJlbFNsb3RQcm9wcyxcbiAgICBvd25lclN0YXRlOiBfZXh0ZW5kcyh7fSwgb3duZXJTdGF0ZSwgdmFsdWVMYWJlbFNsb3RQcm9wcyA9PSBudWxsID8gdm9pZCAwIDogdmFsdWVMYWJlbFNsb3RQcm9wcy5vd25lclN0YXRlKSxcbiAgICBjbGFzc05hbWU6IGNsYXNzZXMudmFsdWVMYWJlbFxuICB9KTtcbiAgY29uc3QgbWFya1Byb3BzID0gdXNlU2xvdFByb3BzKHtcbiAgICBlbGVtZW50VHlwZTogTWFya1Nsb3QsXG4gICAgZXh0ZXJuYWxTbG90UHJvcHM6IG1hcmtTbG90UHJvcHMsXG4gICAgb3duZXJTdGF0ZSxcbiAgICBjbGFzc05hbWU6IGNsYXNzZXMubWFya1xuICB9KTtcbiAgY29uc3QgbWFya0xhYmVsUHJvcHMgPSB1c2VTbG90UHJvcHMoe1xuICAgIGVsZW1lbnRUeXBlOiBNYXJrTGFiZWxTbG90LFxuICAgIGV4dGVybmFsU2xvdFByb3BzOiBtYXJrTGFiZWxTbG90UHJvcHMsXG4gICAgb3duZXJTdGF0ZSxcbiAgICBjbGFzc05hbWU6IGNsYXNzZXMubWFya0xhYmVsXG4gIH0pO1xuICBjb25zdCBpbnB1dFNsaWRlclByb3BzID0gdXNlU2xvdFByb3BzKHtcbiAgICBlbGVtZW50VHlwZTogSW5wdXRTbG90LFxuICAgIGdldFNsb3RQcm9wczogZ2V0SGlkZGVuSW5wdXRQcm9wcyxcbiAgICBleHRlcm5hbFNsb3RQcm9wczogaW5wdXRTbG90UHJvcHMsXG4gICAgb3duZXJTdGF0ZVxuICB9KTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4cyhSb290U2xvdCwgX2V4dGVuZHMoe30sIHJvb3RQcm9wcywge1xuICAgIGNoaWxkcmVuOiBbLyojX19QVVJFX18qL19qc3goUmFpbFNsb3QsIF9leHRlbmRzKHt9LCByYWlsUHJvcHMpKSwgLyojX19QVVJFX18qL19qc3goVHJhY2tTbG90LCBfZXh0ZW5kcyh7fSwgdHJhY2tQcm9wcykpLCBtYXJrcy5maWx0ZXIobWFyayA9PiBtYXJrLnZhbHVlID49IG1pbiAmJiBtYXJrLnZhbHVlIDw9IG1heCkubWFwKChtYXJrLCBpbmRleCkgPT4ge1xuICAgICAgY29uc3QgcGVyY2VudCA9IHZhbHVlVG9QZXJjZW50KG1hcmsudmFsdWUsIG1pbiwgbWF4KTtcbiAgICAgIGNvbnN0IHN0eWxlID0gYXhpc1Byb3BzW2F4aXNdLm9mZnNldChwZXJjZW50KTtcbiAgICAgIGxldCBtYXJrQWN0aXZlO1xuICAgICAgaWYgKHRyYWNrID09PSBmYWxzZSkge1xuICAgICAgICBtYXJrQWN0aXZlID0gdmFsdWVzLmluZGV4T2YobWFyay52YWx1ZSkgIT09IC0xO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbWFya0FjdGl2ZSA9IHRyYWNrID09PSAnbm9ybWFsJyAmJiAocmFuZ2UgPyBtYXJrLnZhbHVlID49IHZhbHVlc1swXSAmJiBtYXJrLnZhbHVlIDw9IHZhbHVlc1t2YWx1ZXMubGVuZ3RoIC0gMV0gOiBtYXJrLnZhbHVlIDw9IHZhbHVlc1swXSkgfHwgdHJhY2sgPT09ICdpbnZlcnRlZCcgJiYgKHJhbmdlID8gbWFyay52YWx1ZSA8PSB2YWx1ZXNbMF0gfHwgbWFyay52YWx1ZSA+PSB2YWx1ZXNbdmFsdWVzLmxlbmd0aCAtIDFdIDogbWFyay52YWx1ZSA+PSB2YWx1ZXNbMF0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4cyhSZWFjdC5GcmFnbWVudCwge1xuICAgICAgICBjaGlsZHJlbjogWy8qI19fUFVSRV9fKi9fanN4KE1hcmtTbG90LCBfZXh0ZW5kcyh7XG4gICAgICAgICAgXCJkYXRhLWluZGV4XCI6IGluZGV4XG4gICAgICAgIH0sIG1hcmtQcm9wcywgIWlzSG9zdENvbXBvbmVudChNYXJrU2xvdCkgJiYge1xuICAgICAgICAgIG1hcmtBY3RpdmVcbiAgICAgICAgfSwge1xuICAgICAgICAgIHN0eWxlOiBfZXh0ZW5kcyh7fSwgc3R5bGUsIG1hcmtQcm9wcy5zdHlsZSksXG4gICAgICAgICAgY2xhc3NOYW1lOiBjbHN4KG1hcmtQcm9wcy5jbGFzc05hbWUsIG1hcmtBY3RpdmUgJiYgY2xhc3Nlcy5tYXJrQWN0aXZlKVxuICAgICAgICB9KSksIG1hcmsubGFiZWwgIT0gbnVsbCA/IC8qI19fUFVSRV9fKi9fanN4KE1hcmtMYWJlbFNsb3QsIF9leHRlbmRzKHtcbiAgICAgICAgICBcImFyaWEtaGlkZGVuXCI6IHRydWUsXG4gICAgICAgICAgXCJkYXRhLWluZGV4XCI6IGluZGV4XG4gICAgICAgIH0sIG1hcmtMYWJlbFByb3BzLCAhaXNIb3N0Q29tcG9uZW50KE1hcmtMYWJlbFNsb3QpICYmIHtcbiAgICAgICAgICBtYXJrTGFiZWxBY3RpdmU6IG1hcmtBY3RpdmVcbiAgICAgICAgfSwge1xuICAgICAgICAgIHN0eWxlOiBfZXh0ZW5kcyh7fSwgc3R5bGUsIG1hcmtMYWJlbFByb3BzLnN0eWxlKSxcbiAgICAgICAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5tYXJrTGFiZWwsIG1hcmtMYWJlbFByb3BzLmNsYXNzTmFtZSwgbWFya0FjdGl2ZSAmJiBjbGFzc2VzLm1hcmtMYWJlbEFjdGl2ZSksXG4gICAgICAgICAgY2hpbGRyZW46IG1hcmsubGFiZWxcbiAgICAgICAgfSkpIDogbnVsbF1cbiAgICAgIH0sIGluZGV4KTtcbiAgICB9KSwgdmFsdWVzLm1hcCgodmFsdWUsIGluZGV4KSA9PiB7XG4gICAgICBjb25zdCBwZXJjZW50ID0gdmFsdWVUb1BlcmNlbnQodmFsdWUsIG1pbiwgbWF4KTtcbiAgICAgIGNvbnN0IHN0eWxlID0gYXhpc1Byb3BzW2F4aXNdLm9mZnNldChwZXJjZW50KTtcbiAgICAgIGNvbnN0IFZhbHVlTGFiZWxDb21wb25lbnQgPSB2YWx1ZUxhYmVsRGlzcGxheSA9PT0gJ29mZicgPyBGb3J3YXJkIDogVmFsdWVMYWJlbFNsb3Q7XG4gICAgICByZXR1cm4gKFxuICAgICAgICAvKiNfX1BVUkVfXyovXG4gICAgICAgIC8qIFRPRE8gdjY6IENoYW5nZSBjb21wb25lbnQgc3RydWN0dXJlLiBJdCB3aWxsIGhlbHAgaW4gYXZvaWRpbmcgdGhlIGNvbXBsaWNhdGVkIFJlYWN0LmNsb25lRWxlbWVudCBBUEkgYWRkZWQgaW4gU2xpZGVyVmFsdWVMYWJlbCBjb21wb25lbnQuIFNob3VsZCBiZTogVGh1bWIgLT4gSW5wdXQsIFZhbHVlTGFiZWwuIEZvbGxvdyBKb3kgVUkncyBTbGlkZXIgc3RydWN0dXJlLiAqL1xuICAgICAgICBfanN4KFZhbHVlTGFiZWxDb21wb25lbnQsIF9leHRlbmRzKHt9LCAhaXNIb3N0Q29tcG9uZW50KFZhbHVlTGFiZWxDb21wb25lbnQpICYmIHtcbiAgICAgICAgICB2YWx1ZUxhYmVsRm9ybWF0LFxuICAgICAgICAgIHZhbHVlTGFiZWxEaXNwbGF5LFxuICAgICAgICAgIHZhbHVlOiB0eXBlb2YgdmFsdWVMYWJlbEZvcm1hdCA9PT0gJ2Z1bmN0aW9uJyA/IHZhbHVlTGFiZWxGb3JtYXQoc2NhbGUodmFsdWUpLCBpbmRleCkgOiB2YWx1ZUxhYmVsRm9ybWF0LFxuICAgICAgICAgIGluZGV4LFxuICAgICAgICAgIG9wZW46IG9wZW4gPT09IGluZGV4IHx8IGFjdGl2ZSA9PT0gaW5kZXggfHwgdmFsdWVMYWJlbERpc3BsYXkgPT09ICdvbicsXG4gICAgICAgICAgZGlzYWJsZWRcbiAgICAgICAgfSwgdmFsdWVMYWJlbFByb3BzLCB7XG4gICAgICAgICAgY2hpbGRyZW46IC8qI19fUFVSRV9fKi9fanN4KFRodW1iU2xvdCwgX2V4dGVuZHMoe1xuICAgICAgICAgICAgXCJkYXRhLWluZGV4XCI6IGluZGV4XG4gICAgICAgICAgfSwgdGh1bWJQcm9wcywge1xuICAgICAgICAgICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMudGh1bWIsIHRodW1iUHJvcHMuY2xhc3NOYW1lLCBhY3RpdmUgPT09IGluZGV4ICYmIGNsYXNzZXMuYWN0aXZlLCBmb2N1c2VkVGh1bWJJbmRleCA9PT0gaW5kZXggJiYgY2xhc3Nlcy5mb2N1c1Zpc2libGUpLFxuICAgICAgICAgICAgc3R5bGU6IF9leHRlbmRzKHt9LCBzdHlsZSwgZ2V0VGh1bWJTdHlsZShpbmRleCksIHRodW1iUHJvcHMuc3R5bGUpLFxuICAgICAgICAgICAgY2hpbGRyZW46IC8qI19fUFVSRV9fKi9fanN4KElucHV0U2xvdCwgX2V4dGVuZHMoe1xuICAgICAgICAgICAgICBcImRhdGEtaW5kZXhcIjogaW5kZXgsXG4gICAgICAgICAgICAgIFwiYXJpYS1sYWJlbFwiOiBnZXRBcmlhTGFiZWwgPyBnZXRBcmlhTGFiZWwoaW5kZXgpIDogYXJpYUxhYmVsLFxuICAgICAgICAgICAgICBcImFyaWEtdmFsdWVub3dcIjogc2NhbGUodmFsdWUpLFxuICAgICAgICAgICAgICBcImFyaWEtbGFiZWxsZWRieVwiOiBhcmlhTGFiZWxsZWRieSxcbiAgICAgICAgICAgICAgXCJhcmlhLXZhbHVldGV4dFwiOiBnZXRBcmlhVmFsdWVUZXh0ID8gZ2V0QXJpYVZhbHVlVGV4dChzY2FsZSh2YWx1ZSksIGluZGV4KSA6IGFyaWFWYWx1ZXRleHQsXG4gICAgICAgICAgICAgIHZhbHVlOiB2YWx1ZXNbaW5kZXhdXG4gICAgICAgICAgICB9LCBpbnB1dFNsaWRlclByb3BzKSlcbiAgICAgICAgICB9KSlcbiAgICAgICAgfSksIGluZGV4KVxuICAgICAgKTtcbiAgICB9KV1cbiAgfSkpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBTbGlkZXIucHJvcFR5cGVzIC8qIHJlbW92ZS1wcm9wdHlwZXMgKi8gPSB7XG4gIC8vIOKUjOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgCBXYXJuaW5nIOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUkFxuICAvLyDilIIgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zLiDilIJcbiAgLy8g4pSCICAgIFRvIHVwZGF0ZSB0aGVtLCBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBgcG5wbSBwcm9wdHlwZXNgLiAgICAg4pSCXG4gIC8vIOKUlOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUmFxuICAvKipcbiAgICogVGhlIGxhYmVsIG9mIHRoZSBzbGlkZXIuXG4gICAqL1xuICAnYXJpYS1sYWJlbCc6IGNoYWluUHJvcFR5cGVzKFByb3BUeXBlcy5zdHJpbmcsIHByb3BzID0+IHtcbiAgICBjb25zdCByYW5nZSA9IEFycmF5LmlzQXJyYXkocHJvcHMudmFsdWUgfHwgcHJvcHMuZGVmYXVsdFZhbHVlKTtcbiAgICBpZiAocmFuZ2UgJiYgcHJvcHNbJ2FyaWEtbGFiZWwnXSAhPSBudWxsKSB7XG4gICAgICByZXR1cm4gbmV3IEVycm9yKCdNVUk6IFlvdSBuZWVkIHRvIHVzZSB0aGUgYGdldEFyaWFMYWJlbGAgcHJvcCBpbnN0ZWFkIG9mIGBhcmlhLWxhYmVsYCB3aGVuIHVzaW5nIGEgcmFuZ2Ugc2xpZGVyLicpO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfSksXG4gIC8qKlxuICAgKiBUaGUgaWQgb2YgdGhlIGVsZW1lbnQgY29udGFpbmluZyBhIGxhYmVsIGZvciB0aGUgc2xpZGVyLlxuICAgKi9cbiAgJ2FyaWEtbGFiZWxsZWRieSc6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBBIHN0cmluZyB2YWx1ZSB0aGF0IHByb3ZpZGVzIGEgdXNlci1mcmllbmRseSBuYW1lIGZvciB0aGUgY3VycmVudCB2YWx1ZSBvZiB0aGUgc2xpZGVyLlxuICAgKi9cbiAgJ2FyaWEtdmFsdWV0ZXh0JzogY2hhaW5Qcm9wVHlwZXMoUHJvcFR5cGVzLnN0cmluZywgcHJvcHMgPT4ge1xuICAgIGNvbnN0IHJhbmdlID0gQXJyYXkuaXNBcnJheShwcm9wcy52YWx1ZSB8fCBwcm9wcy5kZWZhdWx0VmFsdWUpO1xuICAgIGlmIChyYW5nZSAmJiBwcm9wc1snYXJpYS12YWx1ZXRleHQnXSAhPSBudWxsKSB7XG4gICAgICByZXR1cm4gbmV3IEVycm9yKCdNVUk6IFlvdSBuZWVkIHRvIHVzZSB0aGUgYGdldEFyaWFWYWx1ZVRleHRgIHByb3AgaW5zdGVhZCBvZiBgYXJpYS12YWx1ZXRleHRgIHdoZW4gdXNpbmcgYSByYW5nZSBzbGlkZXIuJyk7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9KSxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBUaGUgY29sb3Igb2YgdGhlIGNvbXBvbmVudC5cbiAgICogSXQgc3VwcG9ydHMgYm90aCBkZWZhdWx0IGFuZCBjdXN0b20gdGhlbWUgY29sb3JzLCB3aGljaCBjYW4gYmUgYWRkZWQgYXMgc2hvd24gaW4gdGhlXG4gICAqIFtwYWxldHRlIGN1c3RvbWl6YXRpb24gZ3VpZGVdKGh0dHBzOi8vbXVpLmNvbS9tYXRlcmlhbC11aS9jdXN0b21pemF0aW9uL3BhbGV0dGUvI2N1c3RvbS1jb2xvcnMpLlxuICAgKiBAZGVmYXVsdCAncHJpbWFyeSdcbiAgICovXG4gIGNvbG9yOiBQcm9wVHlwZXMgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqLy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ3ByaW1hcnknLCAnc2Vjb25kYXJ5JywgJ2Vycm9yJywgJ2luZm8nLCAnc3VjY2VzcycsICd3YXJuaW5nJ10pLCBQcm9wVHlwZXMuc3RyaW5nXSksXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50cyB1c2VkIGZvciBlYWNoIHNsb3QgaW5zaWRlLlxuICAgKlxuICAgKiBAZGVwcmVjYXRlZCB1c2UgdGhlIGBzbG90c2AgcHJvcCBpbnN0ZWFkLiBUaGlzIHByb3Agd2lsbCBiZSByZW1vdmVkIGluIHY3LiBbSG93IHRvIG1pZ3JhdGVdKC9tYXRlcmlhbC11aS9taWdyYXRpb24vbWlncmF0aW5nLWZyb20tZGVwcmVjYXRlZC1hcGlzLykuXG4gICAqXG4gICAqIEBkZWZhdWx0IHt9XG4gICAqL1xuICBjb21wb25lbnRzOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIElucHV0OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG4gICAgTWFyazogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuICAgIE1hcmtMYWJlbDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuICAgIFJhaWw6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcbiAgICBSb290OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG4gICAgVGh1bWI6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcbiAgICBUcmFjazogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuICAgIFZhbHVlTGFiZWw6IFByb3BUeXBlcy5lbGVtZW50VHlwZVxuICB9KSxcbiAgLyoqXG4gICAqIFRoZSBleHRyYSBwcm9wcyBmb3IgdGhlIHNsb3QgY29tcG9uZW50cy5cbiAgICogWW91IGNhbiBvdmVycmlkZSB0aGUgZXhpc3RpbmcgcHJvcHMgb3IgYWRkIG5ldyBvbmVzLlxuICAgKlxuICAgKiBAZGVwcmVjYXRlZCB1c2UgdGhlIGBzbG90UHJvcHNgIHByb3AgaW5zdGVhZC4gVGhpcyBwcm9wIHdpbGwgYmUgcmVtb3ZlZCBpbiB2Ny4gW0hvdyB0byBtaWdyYXRlXSgvbWF0ZXJpYWwtdWkvbWlncmF0aW9uL21pZ3JhdGluZy1mcm9tLWRlcHJlY2F0ZWQtYXBpcy8pLlxuICAgKlxuICAgKiBAZGVmYXVsdCB7fVxuICAgKi9cbiAgY29tcG9uZW50c1Byb3BzOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGlucHV0OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pLFxuICAgIG1hcms6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSksXG4gICAgbWFya0xhYmVsOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pLFxuICAgIHJhaWw6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSksXG4gICAgcm9vdDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKSxcbiAgICB0aHVtYjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKSxcbiAgICB0cmFjazogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKSxcbiAgICB2YWx1ZUxhYmVsOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLnNoYXBlKHtcbiAgICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMuZWxlbWVudCxcbiAgICAgIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICAgIG9wZW46IFByb3BUeXBlcy5ib29sLFxuICAgICAgc3R5bGU6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgICB2YWx1ZTogUHJvcFR5cGVzLm51bWJlcixcbiAgICAgIHZhbHVlTGFiZWxEaXNwbGF5OiBQcm9wVHlwZXMub25lT2YoWydhdXRvJywgJ29mZicsICdvbiddKVxuICAgIH0pXSlcbiAgfSksXG4gIC8qKlxuICAgKiBUaGUgZGVmYXVsdCB2YWx1ZS4gVXNlIHdoZW4gdGhlIGNvbXBvbmVudCBpcyBub3QgY29udHJvbGxlZC5cbiAgICovXG4gIGRlZmF1bHRWYWx1ZTogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm51bWJlciksIFByb3BUeXBlcy5udW1iZXJdKSxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGNvbXBvbmVudCBpcyBkaXNhYmxlZC5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRpc2FibGVkOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGFjdGl2ZSB0aHVtYiBkb2Vzbid0IHN3YXAgd2hlbiBtb3ZpbmcgcG9pbnRlciBvdmVyIGEgdGh1bWIgd2hpbGUgZHJhZ2dpbmcgYW5vdGhlciB0aHVtYi5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRpc2FibGVTd2FwOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIEFjY2VwdHMgYSBmdW5jdGlvbiB3aGljaCByZXR1cm5zIGEgc3RyaW5nIHZhbHVlIHRoYXQgcHJvdmlkZXMgYSB1c2VyLWZyaWVuZGx5IG5hbWUgZm9yIHRoZSB0aHVtYiBsYWJlbHMgb2YgdGhlIHNsaWRlci5cbiAgICogVGhpcyBpcyBpbXBvcnRhbnQgZm9yIHNjcmVlbiByZWFkZXIgdXNlcnMuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleCBUaGUgdGh1bWIgbGFiZWwncyBpbmRleCB0byBmb3JtYXQuXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAqL1xuICBnZXRBcmlhTGFiZWw6IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogQWNjZXB0cyBhIGZ1bmN0aW9uIHdoaWNoIHJldHVybnMgYSBzdHJpbmcgdmFsdWUgdGhhdCBwcm92aWRlcyBhIHVzZXItZnJpZW5kbHkgbmFtZSBmb3IgdGhlIGN1cnJlbnQgdmFsdWUgb2YgdGhlIHNsaWRlci5cbiAgICogVGhpcyBpcyBpbXBvcnRhbnQgZm9yIHNjcmVlbiByZWFkZXIgdXNlcnMuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZSBUaGUgdGh1bWIgbGFiZWwncyB2YWx1ZSB0byBmb3JtYXQuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleCBUaGUgdGh1bWIgbGFiZWwncyBpbmRleCB0byBmb3JtYXQuXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAqL1xuICBnZXRBcmlhVmFsdWVUZXh0OiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIE1hcmtzIGluZGljYXRlIHByZWRldGVybWluZWQgdmFsdWVzIHRvIHdoaWNoIHRoZSB1c2VyIGNhbiBtb3ZlIHRoZSBzbGlkZXIuXG4gICAqIElmIGB0cnVlYCB0aGUgbWFya3MgYXJlIHNwYWNlZCBhY2NvcmRpbmcgdGhlIHZhbHVlIG9mIHRoZSBgc3RlcGAgcHJvcC5cbiAgICogSWYgYW4gYXJyYXksIGl0IHNob3VsZCBjb250YWluIG9iamVjdHMgd2l0aCBgdmFsdWVgIGFuZCBhbiBvcHRpb25hbCBgbGFiZWxgIGtleXMuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBtYXJrczogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBsYWJlbDogUHJvcFR5cGVzLm5vZGUsXG4gICAgdmFsdWU6IFByb3BUeXBlcy5udW1iZXIuaXNSZXF1aXJlZFxuICB9KSksIFByb3BUeXBlcy5ib29sXSksXG4gIC8qKlxuICAgKiBUaGUgbWF4aW11bSBhbGxvd2VkIHZhbHVlIG9mIHRoZSBzbGlkZXIuXG4gICAqIFNob3VsZCBub3QgYmUgZXF1YWwgdG8gbWluLlxuICAgKiBAZGVmYXVsdCAxMDBcbiAgICovXG4gIG1heDogUHJvcFR5cGVzLm51bWJlcixcbiAgLyoqXG4gICAqIFRoZSBtaW5pbXVtIGFsbG93ZWQgdmFsdWUgb2YgdGhlIHNsaWRlci5cbiAgICogU2hvdWxkIG5vdCBiZSBlcXVhbCB0byBtYXguXG4gICAqIEBkZWZhdWx0IDBcbiAgICovXG4gIG1pbjogUHJvcFR5cGVzLm51bWJlcixcbiAgLyoqXG4gICAqIE5hbWUgYXR0cmlidXRlIG9mIHRoZSBoaWRkZW4gYGlucHV0YCBlbGVtZW50LlxuICAgKi9cbiAgbmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIENhbGxiYWNrIGZ1bmN0aW9uIHRoYXQgaXMgZmlyZWQgd2hlbiB0aGUgc2xpZGVyJ3MgdmFsdWUgY2hhbmdlZC5cbiAgICpcbiAgICogQHBhcmFtIHtFdmVudH0gZXZlbnQgVGhlIGV2ZW50IHNvdXJjZSBvZiB0aGUgY2FsbGJhY2suXG4gICAqIFlvdSBjYW4gcHVsbCBvdXQgdGhlIG5ldyB2YWx1ZSBieSBhY2Nlc3NpbmcgYGV2ZW50LnRhcmdldC52YWx1ZWAgKGFueSkuXG4gICAqICoqV2FybmluZyoqOiBUaGlzIGlzIGEgZ2VuZXJpYyBldmVudCBub3QgYSBjaGFuZ2UgZXZlbnQuXG4gICAqIEBwYXJhbSB7bnVtYmVyIHwgbnVtYmVyW119IHZhbHVlIFRoZSBuZXcgdmFsdWUuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBhY3RpdmVUaHVtYiBJbmRleCBvZiB0aGUgY3VycmVudGx5IG1vdmVkIHRodW1iLlxuICAgKi9cbiAgb25DaGFuZ2U6IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogQ2FsbGJhY2sgZnVuY3Rpb24gdGhhdCBpcyBmaXJlZCB3aGVuIHRoZSBgbW91c2V1cGAgaXMgdHJpZ2dlcmVkLlxuICAgKlxuICAgKiBAcGFyYW0ge1JlYWN0LlN5bnRoZXRpY0V2ZW50IHwgRXZlbnR9IGV2ZW50IFRoZSBldmVudCBzb3VyY2Ugb2YgdGhlIGNhbGxiYWNrLiAqKldhcm5pbmcqKjogVGhpcyBpcyBhIGdlbmVyaWMgZXZlbnQgbm90IGEgY2hhbmdlIGV2ZW50LlxuICAgKiBAcGFyYW0ge251bWJlciB8IG51bWJlcltdfSB2YWx1ZSBUaGUgbmV3IHZhbHVlLlxuICAgKi9cbiAgb25DaGFuZ2VDb21taXR0ZWQ6IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCBvcmllbnRhdGlvbi5cbiAgICogQGRlZmF1bHQgJ2hvcml6b250YWwnXG4gICAqL1xuICBvcmllbnRhdGlvbjogUHJvcFR5cGVzLm9uZU9mKFsnaG9yaXpvbnRhbCcsICd2ZXJ0aWNhbCddKSxcbiAgLyoqXG4gICAqIEEgdHJhbnNmb3JtYXRpb24gZnVuY3Rpb24sIHRvIGNoYW5nZSB0aGUgc2NhbGUgb2YgdGhlIHNsaWRlci5cbiAgICogQHBhcmFtIHthbnl9IHhcbiAgICogQHJldHVybnMge2FueX1cbiAgICogQGRlZmF1bHQgZnVuY3Rpb24gSWRlbnRpdHkoeCkge1xuICAgKiAgIHJldHVybiB4O1xuICAgKiB9XG4gICAqL1xuICBzY2FsZTogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBUaGUgZ3JhbnVsYXJpdHkgd2l0aCB3aGljaCB0aGUgc2xpZGVyIGNhbiBzdGVwIHRocm91Z2ggdmFsdWVzIHdoZW4gdXNpbmcgUGFnZSBVcC9QYWdlIERvd24gb3IgU2hpZnQgKyBBcnJvdyBVcC9BcnJvdyBEb3duLlxuICAgKiBAZGVmYXVsdCAxMFxuICAgKi9cbiAgc2hpZnRTdGVwOiBQcm9wVHlwZXMubnVtYmVyLFxuICAvKipcbiAgICogVGhlIHNpemUgb2YgdGhlIHNsaWRlci5cbiAgICogQGRlZmF1bHQgJ21lZGl1bSdcbiAgICovXG4gIHNpemU6IFByb3BUeXBlcyAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsnc21hbGwnLCAnbWVkaXVtJ10pLCBQcm9wVHlwZXMuc3RyaW5nXSksXG4gIC8qKlxuICAgKiBUaGUgcHJvcHMgdXNlZCBmb3IgZWFjaCBzbG90IGluc2lkZSB0aGUgU2xpZGVyLlxuICAgKiBAZGVmYXVsdCB7fVxuICAgKi9cbiAgc2xvdFByb3BzOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGlucHV0OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pLFxuICAgIG1hcms6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSksXG4gICAgbWFya0xhYmVsOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pLFxuICAgIHJhaWw6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSksXG4gICAgcm9vdDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKSxcbiAgICB0aHVtYjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKSxcbiAgICB0cmFjazogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKSxcbiAgICB2YWx1ZUxhYmVsOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLnNoYXBlKHtcbiAgICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMuZWxlbWVudCxcbiAgICAgIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICAgIG9wZW46IFByb3BUeXBlcy5ib29sLFxuICAgICAgc3R5bGU6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgICB2YWx1ZTogUHJvcFR5cGVzLm51bWJlcixcbiAgICAgIHZhbHVlTGFiZWxEaXNwbGF5OiBQcm9wVHlwZXMub25lT2YoWydhdXRvJywgJ29mZicsICdvbiddKVxuICAgIH0pXSlcbiAgfSksXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50cyB1c2VkIGZvciBlYWNoIHNsb3QgaW5zaWRlIHRoZSBTbGlkZXIuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBIVE1MIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqIEBkZWZhdWx0IHt9XG4gICAqL1xuICBzbG90czogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBpbnB1dDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuICAgIG1hcms6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcbiAgICBtYXJrTGFiZWw6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcbiAgICByYWlsOiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG4gICAgcm9vdDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuICAgIHRodW1iOiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG4gICAgdHJhY2s6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcbiAgICB2YWx1ZUxhYmVsOiBQcm9wVHlwZXMuZWxlbWVudFR5cGVcbiAgfSksXG4gIC8qKlxuICAgKiBUaGUgZ3JhbnVsYXJpdHkgd2l0aCB3aGljaCB0aGUgc2xpZGVyIGNhbiBzdGVwIHRocm91Z2ggdmFsdWVzLiAoQSBcImRpc2NyZXRlXCIgc2xpZGVyLilcbiAgICogVGhlIGBtaW5gIHByb3Agc2VydmVzIGFzIHRoZSBvcmlnaW4gZm9yIHRoZSB2YWxpZCB2YWx1ZXMuXG4gICAqIFdlIHJlY29tbWVuZCAobWF4IC0gbWluKSB0byBiZSBldmVubHkgZGl2aXNpYmxlIGJ5IHRoZSBzdGVwLlxuICAgKlxuICAgKiBXaGVuIHN0ZXAgaXMgYG51bGxgLCB0aGUgdGh1bWIgY2FuIG9ubHkgYmUgc2xpZCBvbnRvIG1hcmtzIHByb3ZpZGVkIHdpdGggdGhlIGBtYXJrc2AgcHJvcC5cbiAgICogQGRlZmF1bHQgMVxuICAgKi9cbiAgc3RlcDogUHJvcFR5cGVzLm51bWJlcixcbiAgLyoqXG4gICAqIFRoZSBzeXN0ZW0gcHJvcCB0aGF0IGFsbG93cyBkZWZpbmluZyBzeXN0ZW0gb3ZlcnJpZGVzIGFzIHdlbGwgYXMgYWRkaXRpb25hbCBDU1Mgc3R5bGVzLlxuICAgKi9cbiAgc3g6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuYm9vbF0pKSwgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKSxcbiAgLyoqXG4gICAqIFRhYiBpbmRleCBhdHRyaWJ1dGUgb2YgdGhlIGhpZGRlbiBgaW5wdXRgIGVsZW1lbnQuXG4gICAqL1xuICB0YWJJbmRleDogUHJvcFR5cGVzLm51bWJlcixcbiAgLyoqXG4gICAqIFRoZSB0cmFjayBwcmVzZW50YXRpb246XG4gICAqXG4gICAqIC0gYG5vcm1hbGAgdGhlIHRyYWNrIHdpbGwgcmVuZGVyIGEgYmFyIHJlcHJlc2VudGluZyB0aGUgc2xpZGVyIHZhbHVlLlxuICAgKiAtIGBpbnZlcnRlZGAgdGhlIHRyYWNrIHdpbGwgcmVuZGVyIGEgYmFyIHJlcHJlc2VudGluZyB0aGUgcmVtYWluaW5nIHNsaWRlciB2YWx1ZS5cbiAgICogLSBgZmFsc2VgIHRoZSB0cmFjayB3aWxsIHJlbmRlciB3aXRob3V0IGEgYmFyLlxuICAgKiBAZGVmYXVsdCAnbm9ybWFsJ1xuICAgKi9cbiAgdHJhY2s6IFByb3BUeXBlcy5vbmVPZihbJ2ludmVydGVkJywgJ25vcm1hbCcsIGZhbHNlXSksXG4gIC8qKlxuICAgKiBUaGUgdmFsdWUgb2YgdGhlIHNsaWRlci5cbiAgICogRm9yIHJhbmdlZCBzbGlkZXJzLCBwcm92aWRlIGFuIGFycmF5IHdpdGggdHdvIHZhbHVlcy5cbiAgICovXG4gIHZhbHVlOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMubnVtYmVyKSwgUHJvcFR5cGVzLm51bWJlcl0pLFxuICAvKipcbiAgICogQ29udHJvbHMgd2hlbiB0aGUgdmFsdWUgbGFiZWwgaXMgZGlzcGxheWVkOlxuICAgKlxuICAgKiAtIGBhdXRvYCB0aGUgdmFsdWUgbGFiZWwgd2lsbCBkaXNwbGF5IHdoZW4gdGhlIHRodW1iIGlzIGhvdmVyZWQgb3IgZm9jdXNlZC5cbiAgICogLSBgb25gIHdpbGwgZGlzcGxheSBwZXJzaXN0ZW50bHkuXG4gICAqIC0gYG9mZmAgd2lsbCBuZXZlciBkaXNwbGF5LlxuICAgKiBAZGVmYXVsdCAnb2ZmJ1xuICAgKi9cbiAgdmFsdWVMYWJlbERpc3BsYXk6IFByb3BUeXBlcy5vbmVPZihbJ2F1dG8nLCAnb2ZmJywgJ29uJ10pLFxuICAvKipcbiAgICogVGhlIGZvcm1hdCBmdW5jdGlvbiB0aGUgdmFsdWUgbGFiZWwncyB2YWx1ZS5cbiAgICpcbiAgICogV2hlbiBhIGZ1bmN0aW9uIGlzIHByb3ZpZGVkLCBpdCBzaG91bGQgaGF2ZSB0aGUgZm9sbG93aW5nIHNpZ25hdHVyZTpcbiAgICpcbiAgICogLSB7bnVtYmVyfSB2YWx1ZSBUaGUgdmFsdWUgbGFiZWwncyB2YWx1ZSB0byBmb3JtYXRcbiAgICogLSB7bnVtYmVyfSBpbmRleCBUaGUgdmFsdWUgbGFiZWwncyBpbmRleCB0byBmb3JtYXRcbiAgICogQHBhcmFtIHthbnl9IHhcbiAgICogQHJldHVybnMge2FueX1cbiAgICogQGRlZmF1bHQgZnVuY3Rpb24gSWRlbnRpdHkoeCkge1xuICAgKiAgIHJldHVybiB4O1xuICAgKiB9XG4gICAqL1xuICB2YWx1ZUxhYmVsRm9ybWF0OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLnN0cmluZ10pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgU2xpZGVyOyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHNsaWRlckNsYXNzZXMgZnJvbSAnLi9zbGlkZXJDbGFzc2VzJztcbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5pbXBvcnQgeyBqc3hzIGFzIF9qc3hzIH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5jb25zdCB1c2VWYWx1ZUxhYmVsQ2xhc3NlcyA9IHByb3BzID0+IHtcbiAgY29uc3Qge1xuICAgIG9wZW5cbiAgfSA9IHByb3BzO1xuICBjb25zdCB1dGlsaXR5Q2xhc3NlcyA9IHtcbiAgICBvZmZzZXQ6IGNsc3gob3BlbiAmJiBzbGlkZXJDbGFzc2VzLnZhbHVlTGFiZWxPcGVuKSxcbiAgICBjaXJjbGU6IHNsaWRlckNsYXNzZXMudmFsdWVMYWJlbENpcmNsZSxcbiAgICBsYWJlbDogc2xpZGVyQ2xhc3Nlcy52YWx1ZUxhYmVsTGFiZWxcbiAgfTtcbiAgcmV0dXJuIHV0aWxpdHlDbGFzc2VzO1xufTtcblxuLyoqXG4gKiBAaWdub3JlIC0gaW50ZXJuYWwgY29tcG9uZW50LlxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBTbGlkZXJWYWx1ZUxhYmVsKHByb3BzKSB7XG4gIGNvbnN0IHtcbiAgICBjaGlsZHJlbixcbiAgICBjbGFzc05hbWUsXG4gICAgdmFsdWVcbiAgfSA9IHByb3BzO1xuICBjb25zdCBjbGFzc2VzID0gdXNlVmFsdWVMYWJlbENsYXNzZXMocHJvcHMpO1xuICBpZiAoIWNoaWxkcmVuKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jbG9uZUVsZW1lbnQoY2hpbGRyZW4sIHtcbiAgICBjbGFzc05hbWU6IGNsc3goY2hpbGRyZW4ucHJvcHMuY2xhc3NOYW1lKVxuICB9LCAvKiNfX1BVUkVfXyovX2pzeHMoUmVhY3QuRnJhZ21lbnQsIHtcbiAgICBjaGlsZHJlbjogW2NoaWxkcmVuLnByb3BzLmNoaWxkcmVuLCAvKiNfX1BVUkVfXyovX2pzeChcInNwYW5cIiwge1xuICAgICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMub2Zmc2V0LCBjbGFzc05hbWUpLFxuICAgICAgXCJhcmlhLWhpZGRlblwiOiB0cnVlLFxuICAgICAgY2hpbGRyZW46IC8qI19fUFVSRV9fKi9fanN4KFwic3BhblwiLCB7XG4gICAgICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5jaXJjbGUsXG4gICAgICAgIGNoaWxkcmVuOiAvKiNfX1BVUkVfXyovX2pzeChcInNwYW5cIiwge1xuICAgICAgICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5sYWJlbCxcbiAgICAgICAgICBjaGlsZHJlbjogdmFsdWVcbiAgICAgICAgfSlcbiAgICAgIH0pXG4gICAgfSldXG4gIH0pKTtcbn1cbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFNsaWRlclZhbHVlTGFiZWwucHJvcFR5cGVzID0ge1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLmVsZW1lbnQuaXNSZXF1aXJlZCxcbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICB2YWx1ZTogUHJvcFR5cGVzLm5vZGVcbn0gOiB2b2lkIDA7IiwiaW1wb3J0IGlzSG9zdENvbXBvbmVudCBmcm9tICdAbXVpL3V0aWxzL2lzSG9zdENvbXBvbmVudCc7XG5jb25zdCBzaG91bGRTcHJlYWRBZGRpdGlvbmFsUHJvcHMgPSBTbG90ID0+IHtcbiAgcmV0dXJuICFTbG90IHx8ICFpc0hvc3RDb21wb25lbnQoU2xvdCk7XG59O1xuZXhwb3J0IGRlZmF1bHQgc2hvdWxkU3ByZWFkQWRkaXRpb25hbFByb3BzOyIsImltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3Nlcyc7XG5pbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3MgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzcyc7XG5leHBvcnQgZnVuY3Rpb24gZ2V0U25hY2tiYXJDb250ZW50VXRpbGl0eUNsYXNzKHNsb3QpIHtcbiAgcmV0dXJuIGdlbmVyYXRlVXRpbGl0eUNsYXNzKCdNdWlTbmFja2JhckNvbnRlbnQnLCBzbG90KTtcbn1cbmNvbnN0IHNuYWNrYmFyQ29udGVudENsYXNzZXMgPSBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzKCdNdWlTbmFja2JhckNvbnRlbnQnLCBbJ3Jvb3QnLCAnbWVzc2FnZScsICdhY3Rpb24nXSk7XG5leHBvcnQgZGVmYXVsdCBzbmFja2JhckNvbnRlbnRDbGFzc2VzOyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImFjdGlvblwiLCBcImNsYXNzTmFtZVwiLCBcIm1lc3NhZ2VcIiwgXCJyb2xlXCJdO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IGNvbXBvc2VDbGFzc2VzIGZyb20gJ0BtdWkvdXRpbHMvY29tcG9zZUNsYXNzZXMnO1xuaW1wb3J0IHsgZW1waGFzaXplIH0gZnJvbSAnQG11aS9zeXN0ZW0vY29sb3JNYW5pcHVsYXRvcic7XG5pbXBvcnQgc3R5bGVkIGZyb20gJy4uL3N0eWxlcy9zdHlsZWQnO1xuaW1wb3J0IHsgdXNlRGVmYXVsdFByb3BzIH0gZnJvbSAnLi4vRGVmYXVsdFByb3BzUHJvdmlkZXInO1xuaW1wb3J0IFBhcGVyIGZyb20gJy4uL1BhcGVyJztcbmltcG9ydCB7IGdldFNuYWNrYmFyQ29udGVudFV0aWxpdHlDbGFzcyB9IGZyb20gJy4vc25hY2tiYXJDb250ZW50Q2xhc3Nlcyc7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuaW1wb3J0IHsganN4cyBhcyBfanN4cyB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuY29uc3QgdXNlVXRpbGl0eUNsYXNzZXMgPSBvd25lclN0YXRlID0+IHtcbiAgY29uc3Qge1xuICAgIGNsYXNzZXNcbiAgfSA9IG93bmVyU3RhdGU7XG4gIGNvbnN0IHNsb3RzID0ge1xuICAgIHJvb3Q6IFsncm9vdCddLFxuICAgIGFjdGlvbjogWydhY3Rpb24nXSxcbiAgICBtZXNzYWdlOiBbJ21lc3NhZ2UnXVxuICB9O1xuICByZXR1cm4gY29tcG9zZUNsYXNzZXMoc2xvdHMsIGdldFNuYWNrYmFyQ29udGVudFV0aWxpdHlDbGFzcywgY2xhc3Nlcyk7XG59O1xuY29uc3QgU25hY2tiYXJDb250ZW50Um9vdCA9IHN0eWxlZChQYXBlciwge1xuICBuYW1lOiAnTXVpU25hY2tiYXJDb250ZW50JyxcbiAgc2xvdDogJ1Jvb3QnLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHN0eWxlcy5yb290XG59KSgoe1xuICB0aGVtZVxufSkgPT4ge1xuICBjb25zdCBlbXBoYXNpcyA9IHRoZW1lLnBhbGV0dGUubW9kZSA9PT0gJ2xpZ2h0JyA/IDAuOCA6IDAuOTg7XG4gIGNvbnN0IGJhY2tncm91bmRDb2xvciA9IGVtcGhhc2l6ZSh0aGVtZS5wYWxldHRlLmJhY2tncm91bmQuZGVmYXVsdCwgZW1waGFzaXMpO1xuICByZXR1cm4gX2V4dGVuZHMoe30sIHRoZW1lLnR5cG9ncmFwaHkuYm9keTIsIHtcbiAgICBjb2xvcjogdGhlbWUudmFycyA/IHRoZW1lLnZhcnMucGFsZXR0ZS5TbmFja2JhckNvbnRlbnQuY29sb3IgOiB0aGVtZS5wYWxldHRlLmdldENvbnRyYXN0VGV4dChiYWNrZ3JvdW5kQ29sb3IpLFxuICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUudmFycyA/IHRoZW1lLnZhcnMucGFsZXR0ZS5TbmFja2JhckNvbnRlbnQuYmcgOiBiYWNrZ3JvdW5kQ29sb3IsXG4gICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgIGZsZXhXcmFwOiAnd3JhcCcsXG4gICAgcGFkZGluZzogJzZweCAxNnB4JyxcbiAgICBib3JkZXJSYWRpdXM6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5zaGFwZS5ib3JkZXJSYWRpdXMsXG4gICAgZmxleEdyb3c6IDEsXG4gICAgW3RoZW1lLmJyZWFrcG9pbnRzLnVwKCdzbScpXToge1xuICAgICAgZmxleEdyb3c6ICdpbml0aWFsJyxcbiAgICAgIG1pbldpZHRoOiAyODhcbiAgICB9XG4gIH0pO1xufSk7XG5jb25zdCBTbmFja2JhckNvbnRlbnRNZXNzYWdlID0gc3R5bGVkKCdkaXYnLCB7XG4gIG5hbWU6ICdNdWlTbmFja2JhckNvbnRlbnQnLFxuICBzbG90OiAnTWVzc2FnZScsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4gc3R5bGVzLm1lc3NhZ2Vcbn0pKHtcbiAgcGFkZGluZzogJzhweCAwJ1xufSk7XG5jb25zdCBTbmFja2JhckNvbnRlbnRBY3Rpb24gPSBzdHlsZWQoJ2RpdicsIHtcbiAgbmFtZTogJ011aVNuYWNrYmFyQ29udGVudCcsXG4gIHNsb3Q6ICdBY3Rpb24nLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHN0eWxlcy5hY3Rpb25cbn0pKHtcbiAgZGlzcGxheTogJ2ZsZXgnLFxuICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgbWFyZ2luTGVmdDogJ2F1dG8nLFxuICBwYWRkaW5nTGVmdDogMTYsXG4gIG1hcmdpblJpZ2h0OiAtOFxufSk7XG5jb25zdCBTbmFja2JhckNvbnRlbnQgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBTbmFja2JhckNvbnRlbnQoaW5Qcm9wcywgcmVmKSB7XG4gIGNvbnN0IHByb3BzID0gdXNlRGVmYXVsdFByb3BzKHtcbiAgICBwcm9wczogaW5Qcm9wcyxcbiAgICBuYW1lOiAnTXVpU25hY2tiYXJDb250ZW50J1xuICB9KTtcbiAgY29uc3Qge1xuICAgICAgYWN0aW9uLFxuICAgICAgY2xhc3NOYW1lLFxuICAgICAgbWVzc2FnZSxcbiAgICAgIHJvbGUgPSAnYWxlcnQnXG4gICAgfSA9IHByb3BzLFxuICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIF9leGNsdWRlZCk7XG4gIGNvbnN0IG93bmVyU3RhdGUgPSBwcm9wcztcbiAgY29uc3QgY2xhc3NlcyA9IHVzZVV0aWxpdHlDbGFzc2VzKG93bmVyU3RhdGUpO1xuICByZXR1cm4gLyojX19QVVJFX18qL19qc3hzKFNuYWNrYmFyQ29udGVudFJvb3QsIF9leHRlbmRzKHtcbiAgICByb2xlOiByb2xlLFxuICAgIHNxdWFyZTogdHJ1ZSxcbiAgICBlbGV2YXRpb246IDYsXG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lKSxcbiAgICBvd25lclN0YXRlOiBvd25lclN0YXRlLFxuICAgIHJlZjogcmVmXG4gIH0sIG90aGVyLCB7XG4gICAgY2hpbGRyZW46IFsvKiNfX1BVUkVfXyovX2pzeChTbmFja2JhckNvbnRlbnRNZXNzYWdlLCB7XG4gICAgICBjbGFzc05hbWU6IGNsYXNzZXMubWVzc2FnZSxcbiAgICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGUsXG4gICAgICBjaGlsZHJlbjogbWVzc2FnZVxuICAgIH0pLCBhY3Rpb24gPyAvKiNfX1BVUkVfXyovX2pzeChTbmFja2JhckNvbnRlbnRBY3Rpb24sIHtcbiAgICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5hY3Rpb24sXG4gICAgICBvd25lclN0YXRlOiBvd25lclN0YXRlLFxuICAgICAgY2hpbGRyZW46IGFjdGlvblxuICAgIH0pIDogbnVsbF1cbiAgfSkpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBTbmFja2JhckNvbnRlbnQucHJvcFR5cGVzIC8qIHJlbW92ZS1wcm9wdHlwZXMgKi8gPSB7XG4gIC8vIOKUjOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgCBXYXJuaW5nIOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUkFxuICAvLyDilIIgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zLiDilIJcbiAgLy8g4pSCICAgIFRvIHVwZGF0ZSB0aGVtLCBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBgcG5wbSBwcm9wdHlwZXNgLiAgICAg4pSCXG4gIC8vIOKUlOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUmFxuICAvKipcbiAgICogVGhlIGFjdGlvbiB0byBkaXNwbGF5LiBJdCByZW5kZXJzIGFmdGVyIHRoZSBtZXNzYWdlLCBhdCB0aGUgZW5kIG9mIHRoZSBzbmFja2Jhci5cbiAgICovXG4gIGFjdGlvbjogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogVGhlIG1lc3NhZ2UgdG8gZGlzcGxheS5cbiAgICovXG4gIG1lc3NhZ2U6IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogVGhlIEFSSUEgcm9sZSBhdHRyaWJ1dGUgb2YgdGhlIGVsZW1lbnQuXG4gICAqIEBkZWZhdWx0ICdhbGVydCdcbiAgICovXG4gIHJvbGU6IFByb3BUeXBlcyAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovLnN0cmluZyxcbiAgLyoqXG4gICAqIFRoZSBzeXN0ZW0gcHJvcCB0aGF0IGFsbG93cyBkZWZpbmluZyBzeXN0ZW0gb3ZlcnJpZGVzIGFzIHdlbGwgYXMgYWRkaXRpb25hbCBDU1Mgc3R5bGVzLlxuICAgKi9cbiAgc3g6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuYm9vbF0pKSwgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IFNuYWNrYmFyQ29udGVudDsiLCJpbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzZXMnO1xuaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3MnO1xuZXhwb3J0IGZ1bmN0aW9uIGdldFNuYWNrYmFyVXRpbGl0eUNsYXNzKHNsb3QpIHtcbiAgcmV0dXJuIGdlbmVyYXRlVXRpbGl0eUNsYXNzKCdNdWlTbmFja2JhcicsIHNsb3QpO1xufVxuY29uc3Qgc25hY2tiYXJDbGFzc2VzID0gZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcygnTXVpU25hY2tiYXInLCBbJ3Jvb3QnLCAnYW5jaG9yT3JpZ2luVG9wQ2VudGVyJywgJ2FuY2hvck9yaWdpbkJvdHRvbUNlbnRlcicsICdhbmNob3JPcmlnaW5Ub3BSaWdodCcsICdhbmNob3JPcmlnaW5Cb3R0b21SaWdodCcsICdhbmNob3JPcmlnaW5Ub3BMZWZ0JywgJ2FuY2hvck9yaWdpbkJvdHRvbUxlZnQnXSk7XG5leHBvcnQgZGVmYXVsdCBzbmFja2JhckNsYXNzZXM7IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wib25FbnRlclwiLCBcIm9uRXhpdGVkXCJdLFxuICBfZXhjbHVkZWQyID0gW1wiYWN0aW9uXCIsIFwiYW5jaG9yT3JpZ2luXCIsIFwiYXV0b0hpZGVEdXJhdGlvblwiLCBcImNoaWxkcmVuXCIsIFwiY2xhc3NOYW1lXCIsIFwiQ2xpY2tBd2F5TGlzdGVuZXJQcm9wc1wiLCBcIkNvbnRlbnRQcm9wc1wiLCBcImRpc2FibGVXaW5kb3dCbHVyTGlzdGVuZXJcIiwgXCJtZXNzYWdlXCIsIFwib25CbHVyXCIsIFwib25DbG9zZVwiLCBcIm9uRm9jdXNcIiwgXCJvbk1vdXNlRW50ZXJcIiwgXCJvbk1vdXNlTGVhdmVcIiwgXCJvcGVuXCIsIFwicmVzdW1lSGlkZUR1cmF0aW9uXCIsIFwiVHJhbnNpdGlvbkNvbXBvbmVudFwiLCBcInRyYW5zaXRpb25EdXJhdGlvblwiLCBcIlRyYW5zaXRpb25Qcm9wc1wiXTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY29tcG9zZUNsYXNzZXMgZnJvbSAnQG11aS91dGlscy9jb21wb3NlQ2xhc3Nlcyc7XG5pbXBvcnQgdXNlU2xvdFByb3BzIGZyb20gJ0BtdWkvdXRpbHMvdXNlU2xvdFByb3BzJztcbmltcG9ydCB1c2VTbmFja2JhciBmcm9tICcuL3VzZVNuYWNrYmFyJztcbmltcG9ydCBDbGlja0F3YXlMaXN0ZW5lciBmcm9tICcuLi9DbGlja0F3YXlMaXN0ZW5lcic7XG5pbXBvcnQgeyBzdHlsZWQsIHVzZVRoZW1lIH0gZnJvbSAnLi4vc3R5bGVzJztcbmltcG9ydCB7IHVzZURlZmF1bHRQcm9wcyB9IGZyb20gJy4uL0RlZmF1bHRQcm9wc1Byb3ZpZGVyJztcbmltcG9ydCBjYXBpdGFsaXplIGZyb20gJy4uL3V0aWxzL2NhcGl0YWxpemUnO1xuaW1wb3J0IEdyb3cgZnJvbSAnLi4vR3Jvdyc7XG5pbXBvcnQgU25hY2tiYXJDb250ZW50IGZyb20gJy4uL1NuYWNrYmFyQ29udGVudCc7XG5pbXBvcnQgeyBnZXRTbmFja2JhclV0aWxpdHlDbGFzcyB9IGZyb20gJy4vc25hY2tiYXJDbGFzc2VzJztcbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5jb25zdCB1c2VVdGlsaXR5Q2xhc3NlcyA9IG93bmVyU3RhdGUgPT4ge1xuICBjb25zdCB7XG4gICAgY2xhc3NlcyxcbiAgICBhbmNob3JPcmlnaW5cbiAgfSA9IG93bmVyU3RhdGU7XG4gIGNvbnN0IHNsb3RzID0ge1xuICAgIHJvb3Q6IFsncm9vdCcsIGBhbmNob3JPcmlnaW4ke2NhcGl0YWxpemUoYW5jaG9yT3JpZ2luLnZlcnRpY2FsKX0ke2NhcGl0YWxpemUoYW5jaG9yT3JpZ2luLmhvcml6b250YWwpfWBdXG4gIH07XG4gIHJldHVybiBjb21wb3NlQ2xhc3NlcyhzbG90cywgZ2V0U25hY2tiYXJVdGlsaXR5Q2xhc3MsIGNsYXNzZXMpO1xufTtcbmNvbnN0IFNuYWNrYmFyUm9vdCA9IHN0eWxlZCgnZGl2Jywge1xuICBuYW1lOiAnTXVpU25hY2tiYXInLFxuICBzbG90OiAnUm9vdCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9ID0gcHJvcHM7XG4gICAgcmV0dXJuIFtzdHlsZXMucm9vdCwgc3R5bGVzW2BhbmNob3JPcmlnaW4ke2NhcGl0YWxpemUob3duZXJTdGF0ZS5hbmNob3JPcmlnaW4udmVydGljYWwpfSR7Y2FwaXRhbGl6ZShvd25lclN0YXRlLmFuY2hvck9yaWdpbi5ob3Jpem9udGFsKX1gXV07XG4gIH1cbn0pKCh7XG4gIHRoZW1lLFxuICBvd25lclN0YXRlXG59KSA9PiB7XG4gIGNvbnN0IGNlbnRlciA9IHtcbiAgICBsZWZ0OiAnNTAlJyxcbiAgICByaWdodDogJ2F1dG8nLFxuICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZVgoLTUwJSknXG4gIH07XG4gIHJldHVybiBfZXh0ZW5kcyh7XG4gICAgekluZGV4OiAodGhlbWUudmFycyB8fCB0aGVtZSkuekluZGV4LnNuYWNrYmFyLFxuICAgIHBvc2l0aW9uOiAnZml4ZWQnLFxuICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICBsZWZ0OiA4LFxuICAgIHJpZ2h0OiA4LFxuICAgIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJyxcbiAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJ1xuICB9LCBvd25lclN0YXRlLmFuY2hvck9yaWdpbi52ZXJ0aWNhbCA9PT0gJ3RvcCcgPyB7XG4gICAgdG9wOiA4XG4gIH0gOiB7XG4gICAgYm90dG9tOiA4XG4gIH0sIG93bmVyU3RhdGUuYW5jaG9yT3JpZ2luLmhvcml6b250YWwgPT09ICdsZWZ0JyAmJiB7XG4gICAganVzdGlmeUNvbnRlbnQ6ICdmbGV4LXN0YXJ0J1xuICB9LCBvd25lclN0YXRlLmFuY2hvck9yaWdpbi5ob3Jpem9udGFsID09PSAncmlnaHQnICYmIHtcbiAgICBqdXN0aWZ5Q29udGVudDogJ2ZsZXgtZW5kJ1xuICB9LCB7XG4gICAgW3RoZW1lLmJyZWFrcG9pbnRzLnVwKCdzbScpXTogX2V4dGVuZHMoe30sIG93bmVyU3RhdGUuYW5jaG9yT3JpZ2luLnZlcnRpY2FsID09PSAndG9wJyA/IHtcbiAgICAgIHRvcDogMjRcbiAgICB9IDoge1xuICAgICAgYm90dG9tOiAyNFxuICAgIH0sIG93bmVyU3RhdGUuYW5jaG9yT3JpZ2luLmhvcml6b250YWwgPT09ICdjZW50ZXInICYmIGNlbnRlciwgb3duZXJTdGF0ZS5hbmNob3JPcmlnaW4uaG9yaXpvbnRhbCA9PT0gJ2xlZnQnICYmIHtcbiAgICAgIGxlZnQ6IDI0LFxuICAgICAgcmlnaHQ6ICdhdXRvJ1xuICAgIH0sIG93bmVyU3RhdGUuYW5jaG9yT3JpZ2luLmhvcml6b250YWwgPT09ICdyaWdodCcgJiYge1xuICAgICAgcmlnaHQ6IDI0LFxuICAgICAgbGVmdDogJ2F1dG8nXG4gICAgfSlcbiAgfSk7XG59KTtcbmNvbnN0IFNuYWNrYmFyID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gU25hY2tiYXIoaW5Qcm9wcywgcmVmKSB7XG4gIGNvbnN0IHByb3BzID0gdXNlRGVmYXVsdFByb3BzKHtcbiAgICBwcm9wczogaW5Qcm9wcyxcbiAgICBuYW1lOiAnTXVpU25hY2tiYXInXG4gIH0pO1xuICBjb25zdCB0aGVtZSA9IHVzZVRoZW1lKCk7XG4gIGNvbnN0IGRlZmF1bHRUcmFuc2l0aW9uRHVyYXRpb24gPSB7XG4gICAgZW50ZXI6IHRoZW1lLnRyYW5zaXRpb25zLmR1cmF0aW9uLmVudGVyaW5nU2NyZWVuLFxuICAgIGV4aXQ6IHRoZW1lLnRyYW5zaXRpb25zLmR1cmF0aW9uLmxlYXZpbmdTY3JlZW5cbiAgfTtcbiAgY29uc3Qge1xuICAgICAgYWN0aW9uLFxuICAgICAgYW5jaG9yT3JpZ2luOiB7XG4gICAgICAgIHZlcnRpY2FsLFxuICAgICAgICBob3Jpem9udGFsXG4gICAgICB9ID0ge1xuICAgICAgICB2ZXJ0aWNhbDogJ2JvdHRvbScsXG4gICAgICAgIGhvcml6b250YWw6ICdsZWZ0J1xuICAgICAgfSxcbiAgICAgIGF1dG9IaWRlRHVyYXRpb24gPSBudWxsLFxuICAgICAgY2hpbGRyZW4sXG4gICAgICBjbGFzc05hbWUsXG4gICAgICBDbGlja0F3YXlMaXN0ZW5lclByb3BzLFxuICAgICAgQ29udGVudFByb3BzLFxuICAgICAgZGlzYWJsZVdpbmRvd0JsdXJMaXN0ZW5lciA9IGZhbHNlLFxuICAgICAgbWVzc2FnZSxcbiAgICAgIG9wZW4sXG4gICAgICBUcmFuc2l0aW9uQ29tcG9uZW50ID0gR3JvdyxcbiAgICAgIHRyYW5zaXRpb25EdXJhdGlvbiA9IGRlZmF1bHRUcmFuc2l0aW9uRHVyYXRpb24sXG4gICAgICBUcmFuc2l0aW9uUHJvcHM6IHtcbiAgICAgICAgb25FbnRlcixcbiAgICAgICAgb25FeGl0ZWRcbiAgICAgIH0gPSB7fVxuICAgIH0gPSBwcm9wcyxcbiAgICBUcmFuc2l0aW9uUHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcy5UcmFuc2l0aW9uUHJvcHMsIF9leGNsdWRlZCksXG4gICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkMik7XG4gIGNvbnN0IG93bmVyU3RhdGUgPSBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICBhbmNob3JPcmlnaW46IHtcbiAgICAgIHZlcnRpY2FsLFxuICAgICAgaG9yaXpvbnRhbFxuICAgIH0sXG4gICAgYXV0b0hpZGVEdXJhdGlvbixcbiAgICBkaXNhYmxlV2luZG93Qmx1ckxpc3RlbmVyLFxuICAgIFRyYW5zaXRpb25Db21wb25lbnQsXG4gICAgdHJhbnNpdGlvbkR1cmF0aW9uXG4gIH0pO1xuICBjb25zdCBjbGFzc2VzID0gdXNlVXRpbGl0eUNsYXNzZXMob3duZXJTdGF0ZSk7XG4gIGNvbnN0IHtcbiAgICBnZXRSb290UHJvcHMsXG4gICAgb25DbGlja0F3YXlcbiAgfSA9IHVzZVNuYWNrYmFyKF9leHRlbmRzKHt9LCBvd25lclN0YXRlKSk7XG4gIGNvbnN0IFtleGl0ZWQsIHNldEV4aXRlZF0gPSBSZWFjdC51c2VTdGF0ZSh0cnVlKTtcbiAgY29uc3Qgcm9vdFByb3BzID0gdXNlU2xvdFByb3BzKHtcbiAgICBlbGVtZW50VHlwZTogU25hY2tiYXJSb290LFxuICAgIGdldFNsb3RQcm9wczogZ2V0Um9vdFByb3BzLFxuICAgIGV4dGVybmFsRm9yd2FyZGVkUHJvcHM6IG90aGVyLFxuICAgIG93bmVyU3RhdGUsXG4gICAgYWRkaXRpb25hbFByb3BzOiB7XG4gICAgICByZWZcbiAgICB9LFxuICAgIGNsYXNzTmFtZTogW2NsYXNzZXMucm9vdCwgY2xhc3NOYW1lXVxuICB9KTtcbiAgY29uc3QgaGFuZGxlRXhpdGVkID0gbm9kZSA9PiB7XG4gICAgc2V0RXhpdGVkKHRydWUpO1xuICAgIGlmIChvbkV4aXRlZCkge1xuICAgICAgb25FeGl0ZWQobm9kZSk7XG4gICAgfVxuICB9O1xuICBjb25zdCBoYW5kbGVFbnRlciA9IChub2RlLCBpc0FwcGVhcmluZykgPT4ge1xuICAgIHNldEV4aXRlZChmYWxzZSk7XG4gICAgaWYgKG9uRW50ZXIpIHtcbiAgICAgIG9uRW50ZXIobm9kZSwgaXNBcHBlYXJpbmcpO1xuICAgIH1cbiAgfTtcblxuICAvLyBTbyB3ZSBvbmx5IHJlbmRlciBhY3RpdmUgc25hY2tiYXJzLlxuICBpZiAoIW9wZW4gJiYgZXhpdGVkKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KENsaWNrQXdheUxpc3RlbmVyLCBfZXh0ZW5kcyh7XG4gICAgb25DbGlja0F3YXk6IG9uQ2xpY2tBd2F5XG4gIH0sIENsaWNrQXdheUxpc3RlbmVyUHJvcHMsIHtcbiAgICBjaGlsZHJlbjogLyojX19QVVJFX18qL19qc3goU25hY2tiYXJSb290LCBfZXh0ZW5kcyh7fSwgcm9vdFByb3BzLCB7XG4gICAgICBjaGlsZHJlbjogLyojX19QVVJFX18qL19qc3goVHJhbnNpdGlvbkNvbXBvbmVudCwgX2V4dGVuZHMoe1xuICAgICAgICBhcHBlYXI6IHRydWUsXG4gICAgICAgIGluOiBvcGVuLFxuICAgICAgICB0aW1lb3V0OiB0cmFuc2l0aW9uRHVyYXRpb24sXG4gICAgICAgIGRpcmVjdGlvbjogdmVydGljYWwgPT09ICd0b3AnID8gJ2Rvd24nIDogJ3VwJyxcbiAgICAgICAgb25FbnRlcjogaGFuZGxlRW50ZXIsXG4gICAgICAgIG9uRXhpdGVkOiBoYW5kbGVFeGl0ZWRcbiAgICAgIH0sIFRyYW5zaXRpb25Qcm9wcywge1xuICAgICAgICBjaGlsZHJlbjogY2hpbGRyZW4gfHwgLyojX19QVVJFX18qL19qc3goU25hY2tiYXJDb250ZW50LCBfZXh0ZW5kcyh7XG4gICAgICAgICAgbWVzc2FnZTogbWVzc2FnZSxcbiAgICAgICAgICBhY3Rpb246IGFjdGlvblxuICAgICAgICB9LCBDb250ZW50UHJvcHMpKVxuICAgICAgfSkpXG4gICAgfSkpXG4gIH0pKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gU25hY2tiYXIucHJvcFR5cGVzIC8qIHJlbW92ZS1wcm9wdHlwZXMgKi8gPSB7XG4gIC8vIOKUjOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgCBXYXJuaW5nIOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUkFxuICAvLyDilIIgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zLiDilIJcbiAgLy8g4pSCICAgIFRvIHVwZGF0ZSB0aGVtLCBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBgcG5wbSBwcm9wdHlwZXNgLiAgICAg4pSCXG4gIC8vIOKUlOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUmFxuICAvKipcbiAgICogVGhlIGFjdGlvbiB0byBkaXNwbGF5LiBJdCByZW5kZXJzIGFmdGVyIHRoZSBtZXNzYWdlLCBhdCB0aGUgZW5kIG9mIHRoZSBzbmFja2Jhci5cbiAgICovXG4gIGFjdGlvbjogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBUaGUgYW5jaG9yIG9mIHRoZSBgU25hY2tiYXJgLlxuICAgKiBPbiBzbWFsbGVyIHNjcmVlbnMsIHRoZSBjb21wb25lbnQgZ3Jvd3MgdG8gb2NjdXB5IGFsbCB0aGUgYXZhaWxhYmxlIHdpZHRoLFxuICAgKiB0aGUgaG9yaXpvbnRhbCBhbGlnbm1lbnQgaXMgaWdub3JlZC5cbiAgICogQGRlZmF1bHQgeyB2ZXJ0aWNhbDogJ2JvdHRvbScsIGhvcml6b250YWw6ICdsZWZ0JyB9XG4gICAqL1xuICBhbmNob3JPcmlnaW46IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgaG9yaXpvbnRhbDogUHJvcFR5cGVzLm9uZU9mKFsnY2VudGVyJywgJ2xlZnQnLCAncmlnaHQnXSkuaXNSZXF1aXJlZCxcbiAgICB2ZXJ0aWNhbDogUHJvcFR5cGVzLm9uZU9mKFsnYm90dG9tJywgJ3RvcCddKS5pc1JlcXVpcmVkXG4gIH0pLFxuICAvKipcbiAgICogVGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gd2FpdCBiZWZvcmUgYXV0b21hdGljYWxseSBjYWxsaW5nIHRoZVxuICAgKiBgb25DbG9zZWAgZnVuY3Rpb24uIGBvbkNsb3NlYCBzaG91bGQgdGhlbiBzZXQgdGhlIHN0YXRlIG9mIHRoZSBgb3BlbmBcbiAgICogcHJvcCB0byBoaWRlIHRoZSBTbmFja2Jhci4gVGhpcyBiZWhhdmlvciBpcyBkaXNhYmxlZCBieSBkZWZhdWx0IHdpdGhcbiAgICogdGhlIGBudWxsYCB2YWx1ZS5cbiAgICogQGRlZmF1bHQgbnVsbFxuICAgKi9cbiAgYXV0b0hpZGVEdXJhdGlvbjogUHJvcFR5cGVzLm51bWJlcixcbiAgLyoqXG4gICAqIFJlcGxhY2UgdGhlIGBTbmFja2JhckNvbnRlbnRgIGNvbXBvbmVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMuZWxlbWVudCxcbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBQcm9wcyBhcHBsaWVkIHRvIHRoZSBgQ2xpY2tBd2F5TGlzdGVuZXJgIGVsZW1lbnQuXG4gICAqL1xuICBDbGlja0F3YXlMaXN0ZW5lclByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogUHJvcHMgYXBwbGllZCB0byB0aGUgW2BTbmFja2JhckNvbnRlbnRgXSgvbWF0ZXJpYWwtdWkvYXBpL3NuYWNrYmFyLWNvbnRlbnQvKSBlbGVtZW50LlxuICAgKi9cbiAgQ29udGVudFByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgYGF1dG9IaWRlRHVyYXRpb25gIHRpbWVyIHdpbGwgZXhwaXJlIGV2ZW4gaWYgdGhlIHdpbmRvdyBpcyBub3QgZm9jdXNlZC5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRpc2FibGVXaW5kb3dCbHVyTGlzdGVuZXI6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogV2hlbiBkaXNwbGF5aW5nIG11bHRpcGxlIGNvbnNlY3V0aXZlIHNuYWNrYmFycyB1c2luZyBhIHNpbmdsZSBwYXJlbnQtcmVuZGVyZWRcbiAgICogYDxTbmFja2Jhci8+YCwgYWRkIHRoZSBga2V5YCBwcm9wIHRvIGVuc3VyZSBpbmRlcGVuZGVudCB0cmVhdG1lbnQgb2YgZWFjaCBtZXNzYWdlLlxuICAgKiBGb3IgaW5zdGFuY2UsIHVzZSBgPFNuYWNrYmFyIGtleT17bWVzc2FnZX0gLz5gLiBPdGhlcndpc2UsIG1lc3NhZ2VzIG1pZ2h0IHVwZGF0ZVxuICAgKiBpbiBwbGFjZSwgYW5kIGZlYXR1cmVzIGxpa2UgYGF1dG9IaWRlRHVyYXRpb25gIGNvdWxkIGJlIGFmZmVjdGVkLlxuICAgKi9cbiAga2V5OiAoKSA9PiBudWxsLFxuICAvKipcbiAgICogVGhlIG1lc3NhZ2UgdG8gZGlzcGxheS5cbiAgICovXG4gIG1lc3NhZ2U6IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25CbHVyOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIGNvbXBvbmVudCByZXF1ZXN0cyB0byBiZSBjbG9zZWQuXG4gICAqIFR5cGljYWxseSBgb25DbG9zZWAgaXMgdXNlZCB0byBzZXQgc3RhdGUgaW4gdGhlIHBhcmVudCBjb21wb25lbnQsXG4gICAqIHdoaWNoIGlzIHVzZWQgdG8gY29udHJvbCB0aGUgYFNuYWNrYmFyYCBgb3BlbmAgcHJvcC5cbiAgICogVGhlIGByZWFzb25gIHBhcmFtZXRlciBjYW4gb3B0aW9uYWxseSBiZSB1c2VkIHRvIGNvbnRyb2wgdGhlIHJlc3BvbnNlIHRvIGBvbkNsb3NlYCxcbiAgICogZm9yIGV4YW1wbGUgaWdub3JpbmcgYGNsaWNrYXdheWAuXG4gICAqXG4gICAqIEBwYXJhbSB7UmVhY3QuU3ludGhldGljRXZlbnQ8YW55PiB8IEV2ZW50fSBldmVudCBUaGUgZXZlbnQgc291cmNlIG9mIHRoZSBjYWxsYmFjay5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHJlYXNvbiBDYW4gYmU6IGBcInRpbWVvdXRcImAgKGBhdXRvSGlkZUR1cmF0aW9uYCBleHBpcmVkKSwgYFwiY2xpY2thd2F5XCJgLCBvciBgXCJlc2NhcGVLZXlEb3duXCJgLlxuICAgKi9cbiAgb25DbG9zZTogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkZvY3VzOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uTW91c2VFbnRlcjogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbk1vdXNlTGVhdmU6IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgY29tcG9uZW50IGlzIHNob3duLlxuICAgKi9cbiAgb3BlbjogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBUaGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byB3YWl0IGJlZm9yZSBkaXNtaXNzaW5nIGFmdGVyIHVzZXIgaW50ZXJhY3Rpb24uXG4gICAqIElmIGBhdXRvSGlkZUR1cmF0aW9uYCBwcm9wIGlzbid0IHNwZWNpZmllZCwgaXQgZG9lcyBub3RoaW5nLlxuICAgKiBJZiBgYXV0b0hpZGVEdXJhdGlvbmAgcHJvcCBpcyBzcGVjaWZpZWQgYnV0IGByZXN1bWVIaWRlRHVyYXRpb25gIGlzbid0LFxuICAgKiB3ZSBkZWZhdWx0IHRvIGBhdXRvSGlkZUR1cmF0aW9uIC8gMmAgbXMuXG4gICAqL1xuICByZXN1bWVIaWRlRHVyYXRpb246IFByb3BUeXBlcy5udW1iZXIsXG4gIC8qKlxuICAgKiBUaGUgc3lzdGVtIHByb3AgdGhhdCBhbGxvd3MgZGVmaW5pbmcgc3lzdGVtIG92ZXJyaWRlcyBhcyB3ZWxsIGFzIGFkZGl0aW9uYWwgQ1NTIHN0eWxlcy5cbiAgICovXG4gIHN4OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLmJvb2xdKSksIFByb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSksXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSB0cmFuc2l0aW9uLlxuICAgKiBbRm9sbG93IHRoaXMgZ3VpZGVdKC9tYXRlcmlhbC11aS90cmFuc2l0aW9ucy8jdHJhbnNpdGlvbmNvbXBvbmVudC1wcm9wKSB0byBsZWFybiBtb3JlIGFib3V0IHRoZSByZXF1aXJlbWVudHMgZm9yIHRoaXMgY29tcG9uZW50LlxuICAgKiBAZGVmYXVsdCBHcm93XG4gICAqL1xuICBUcmFuc2l0aW9uQ29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG4gIC8qKlxuICAgKiBUaGUgZHVyYXRpb24gZm9yIHRoZSB0cmFuc2l0aW9uLCBpbiBtaWxsaXNlY29uZHMuXG4gICAqIFlvdSBtYXkgc3BlY2lmeSBhIHNpbmdsZSB0aW1lb3V0IGZvciBhbGwgdHJhbnNpdGlvbnMsIG9yIGluZGl2aWR1YWxseSB3aXRoIGFuIG9iamVjdC5cbiAgICogQGRlZmF1bHQge1xuICAgKiAgIGVudGVyOiB0aGVtZS50cmFuc2l0aW9ucy5kdXJhdGlvbi5lbnRlcmluZ1NjcmVlbixcbiAgICogICBleGl0OiB0aGVtZS50cmFuc2l0aW9ucy5kdXJhdGlvbi5sZWF2aW5nU2NyZWVuLFxuICAgKiB9XG4gICAqL1xuICB0cmFuc2l0aW9uRHVyYXRpb246IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zaGFwZSh7XG4gICAgYXBwZWFyOiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIGVudGVyOiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIGV4aXQ6IFByb3BUeXBlcy5udW1iZXJcbiAgfSldKSxcbiAgLyoqXG4gICAqIFByb3BzIGFwcGxpZWQgdG8gdGhlIHRyYW5zaXRpb24gZWxlbWVudC5cbiAgICogQnkgZGVmYXVsdCwgdGhlIGVsZW1lbnQgaXMgYmFzZWQgb24gdGhpcyBbYFRyYW5zaXRpb25gXShodHRwczovL3JlYWN0Y29tbXVuaXR5Lm9yZy9yZWFjdC10cmFuc2l0aW9uLWdyb3VwL3RyYW5zaXRpb24vKSBjb21wb25lbnQuXG4gICAqIEBkZWZhdWx0IHt9XG4gICAqL1xuICBUcmFuc2l0aW9uUHJvcHM6IFByb3BUeXBlcy5vYmplY3Rcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCBTbmFja2JhcjsiLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgdW5zdGFibGVfdXNlRXZlbnRDYWxsYmFjayBhcyB1c2VFdmVudENhbGxiYWNrLCB1bnN0YWJsZV91c2VUaW1lb3V0IGFzIHVzZVRpbWVvdXQgfSBmcm9tICdAbXVpL3V0aWxzJztcbmltcG9ydCBleHRyYWN0RXZlbnRIYW5kbGVycyBmcm9tICdAbXVpL3V0aWxzL2V4dHJhY3RFdmVudEhhbmRsZXJzJztcbi8qKlxuICogVGhlIGJhc2ljIGJ1aWxkaW5nIGJsb2NrIGZvciBjcmVhdGluZyBjdXN0b20gc25hY2tiYXIuXG4gKlxuICogRGVtb3M6XG4gKlxuICogLSBbU25hY2tiYXJdKGh0dHBzOi8vbXVpLmNvbS9iYXNlLXVpL3JlYWN0LXNuYWNrYmFyLyNob29rKVxuICpcbiAqIEFQSTpcbiAqXG4gKiAtIFt1c2VTbmFja2JhciBBUEldKGh0dHBzOi8vbXVpLmNvbS9iYXNlLXVpL3JlYWN0LXNuYWNrYmFyL2hvb2tzLWFwaS8jdXNlLXNuYWNrYmFyKVxuICovXG5mdW5jdGlvbiB1c2VTbmFja2JhcihwYXJhbWV0ZXJzID0ge30pIHtcbiAgY29uc3Qge1xuICAgIGF1dG9IaWRlRHVyYXRpb24gPSBudWxsLFxuICAgIGRpc2FibGVXaW5kb3dCbHVyTGlzdGVuZXIgPSBmYWxzZSxcbiAgICBvbkNsb3NlLFxuICAgIG9wZW4sXG4gICAgcmVzdW1lSGlkZUR1cmF0aW9uXG4gIH0gPSBwYXJhbWV0ZXJzO1xuICBjb25zdCB0aW1lckF1dG9IaWRlID0gdXNlVGltZW91dCgpO1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmICghb3Blbikge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge0tleWJvYXJkRXZlbnR9IG5hdGl2ZUV2ZW50XG4gICAgICovXG4gICAgZnVuY3Rpb24gaGFuZGxlS2V5RG93bihuYXRpdmVFdmVudCkge1xuICAgICAgaWYgKCFuYXRpdmVFdmVudC5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICAgIC8vIElFMTEsIEVkZ2UgKHByaW9yIHRvIHVzaW5nIEJsaW5rPykgdXNlICdFc2MnXG4gICAgICAgIGlmIChuYXRpdmVFdmVudC5rZXkgPT09ICdFc2NhcGUnIHx8IG5hdGl2ZUV2ZW50LmtleSA9PT0gJ0VzYycpIHtcbiAgICAgICAgICAvLyBub3QgY2FsbGluZyBgcHJldmVudERlZmF1bHRgIHNpbmNlIHdlIGRvbid0IGtub3cgaWYgcGVvcGxlIG1heSBpZ25vcmUgdGhpcyBldmVudCBlLmcuIGEgcGVybWFuZW50bHkgb3BlbiBzbmFja2JhclxuICAgICAgICAgIG9uQ2xvc2UgPT0gbnVsbCB8fCBvbkNsb3NlKG5hdGl2ZUV2ZW50LCAnZXNjYXBlS2V5RG93bicpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBoYW5kbGVLZXlEb3duKTtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIGhhbmRsZUtleURvd24pO1xuICAgIH07XG4gIH0sIFtvcGVuLCBvbkNsb3NlXSk7XG4gIGNvbnN0IGhhbmRsZUNsb3NlID0gdXNlRXZlbnRDYWxsYmFjaygoZXZlbnQsIHJlYXNvbikgPT4ge1xuICAgIG9uQ2xvc2UgPT0gbnVsbCB8fCBvbkNsb3NlKGV2ZW50LCByZWFzb24pO1xuICB9KTtcbiAgY29uc3Qgc2V0QXV0b0hpZGVUaW1lciA9IHVzZUV2ZW50Q2FsbGJhY2soYXV0b0hpZGVEdXJhdGlvblBhcmFtID0+IHtcbiAgICBpZiAoIW9uQ2xvc2UgfHwgYXV0b0hpZGVEdXJhdGlvblBhcmFtID09IG51bGwpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGltZXJBdXRvSGlkZS5zdGFydChhdXRvSGlkZUR1cmF0aW9uUGFyYW0sICgpID0+IHtcbiAgICAgIGhhbmRsZUNsb3NlKG51bGwsICd0aW1lb3V0Jyk7XG4gICAgfSk7XG4gIH0pO1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChvcGVuKSB7XG4gICAgICBzZXRBdXRvSGlkZVRpbWVyKGF1dG9IaWRlRHVyYXRpb24pO1xuICAgIH1cbiAgICByZXR1cm4gdGltZXJBdXRvSGlkZS5jbGVhcjtcbiAgfSwgW29wZW4sIGF1dG9IaWRlRHVyYXRpb24sIHNldEF1dG9IaWRlVGltZXIsIHRpbWVyQXV0b0hpZGVdKTtcbiAgY29uc3QgaGFuZGxlQ2xpY2tBd2F5ID0gZXZlbnQgPT4ge1xuICAgIG9uQ2xvc2UgPT0gbnVsbCB8fCBvbkNsb3NlKGV2ZW50LCAnY2xpY2thd2F5Jyk7XG4gIH07XG5cbiAgLy8gUGF1c2UgdGhlIHRpbWVyIHdoZW4gdGhlIHVzZXIgaXMgaW50ZXJhY3Rpbmcgd2l0aCB0aGUgU25hY2tiYXJcbiAgLy8gb3Igd2hlbiB0aGUgdXNlciBoaWRlIHRoZSB3aW5kb3cuXG4gIGNvbnN0IGhhbmRsZVBhdXNlID0gdGltZXJBdXRvSGlkZS5jbGVhcjtcblxuICAvLyBSZXN0YXJ0IHRoZSB0aW1lciB3aGVuIHRoZSB1c2VyIGlzIG5vIGxvbmdlciBpbnRlcmFjdGluZyB3aXRoIHRoZSBTbmFja2JhclxuICAvLyBvciB3aGVuIHRoZSB3aW5kb3cgaXMgc2hvd24gYmFjay5cbiAgY29uc3QgaGFuZGxlUmVzdW1lID0gUmVhY3QudXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgIGlmIChhdXRvSGlkZUR1cmF0aW9uICE9IG51bGwpIHtcbiAgICAgIHNldEF1dG9IaWRlVGltZXIocmVzdW1lSGlkZUR1cmF0aW9uICE9IG51bGwgPyByZXN1bWVIaWRlRHVyYXRpb24gOiBhdXRvSGlkZUR1cmF0aW9uICogMC41KTtcbiAgICB9XG4gIH0sIFthdXRvSGlkZUR1cmF0aW9uLCByZXN1bWVIaWRlRHVyYXRpb24sIHNldEF1dG9IaWRlVGltZXJdKTtcbiAgY29uc3QgY3JlYXRlSGFuZGxlQmx1ciA9IG90aGVySGFuZGxlcnMgPT4gZXZlbnQgPT4ge1xuICAgIGNvbnN0IG9uQmx1ckNhbGxiYWNrID0gb3RoZXJIYW5kbGVycy5vbkJsdXI7XG4gICAgb25CbHVyQ2FsbGJhY2sgPT0gbnVsbCB8fCBvbkJsdXJDYWxsYmFjayhldmVudCk7XG4gICAgaGFuZGxlUmVzdW1lKCk7XG4gIH07XG4gIGNvbnN0IGNyZWF0ZUhhbmRsZUZvY3VzID0gb3RoZXJIYW5kbGVycyA9PiBldmVudCA9PiB7XG4gICAgY29uc3Qgb25Gb2N1c0NhbGxiYWNrID0gb3RoZXJIYW5kbGVycy5vbkZvY3VzO1xuICAgIG9uRm9jdXNDYWxsYmFjayA9PSBudWxsIHx8IG9uRm9jdXNDYWxsYmFjayhldmVudCk7XG4gICAgaGFuZGxlUGF1c2UoKTtcbiAgfTtcbiAgY29uc3QgY3JlYXRlTW91c2VFbnRlciA9IG90aGVySGFuZGxlcnMgPT4gZXZlbnQgPT4ge1xuICAgIGNvbnN0IG9uTW91c2VFbnRlckNhbGxiYWNrID0gb3RoZXJIYW5kbGVycy5vbk1vdXNlRW50ZXI7XG4gICAgb25Nb3VzZUVudGVyQ2FsbGJhY2sgPT0gbnVsbCB8fCBvbk1vdXNlRW50ZXJDYWxsYmFjayhldmVudCk7XG4gICAgaGFuZGxlUGF1c2UoKTtcbiAgfTtcbiAgY29uc3QgY3JlYXRlTW91c2VMZWF2ZSA9IG90aGVySGFuZGxlcnMgPT4gZXZlbnQgPT4ge1xuICAgIGNvbnN0IG9uTW91c2VMZWF2ZUNhbGxiYWNrID0gb3RoZXJIYW5kbGVycy5vbk1vdXNlTGVhdmU7XG4gICAgb25Nb3VzZUxlYXZlQ2FsbGJhY2sgPT0gbnVsbCB8fCBvbk1vdXNlTGVhdmVDYWxsYmFjayhldmVudCk7XG4gICAgaGFuZGxlUmVzdW1lKCk7XG4gIH07XG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgLy8gVE9ETzogd2luZG93IGdsb2JhbCBzaG91bGQgYmUgcmVmYWN0b3JlZCBoZXJlXG4gICAgaWYgKCFkaXNhYmxlV2luZG93Qmx1ckxpc3RlbmVyICYmIG9wZW4pIHtcbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdmb2N1cycsIGhhbmRsZVJlc3VtZSk7XG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignYmx1cicsIGhhbmRsZVBhdXNlKTtcbiAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdmb2N1cycsIGhhbmRsZVJlc3VtZSk7XG4gICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdibHVyJywgaGFuZGxlUGF1c2UpO1xuICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfSwgW2Rpc2FibGVXaW5kb3dCbHVyTGlzdGVuZXIsIG9wZW4sIGhhbmRsZVJlc3VtZSwgaGFuZGxlUGF1c2VdKTtcbiAgY29uc3QgZ2V0Um9vdFByb3BzID0gKGV4dGVybmFsUHJvcHMgPSB7fSkgPT4ge1xuICAgIGNvbnN0IGV4dGVybmFsRXZlbnRIYW5kbGVycyA9IF9leHRlbmRzKHt9LCBleHRyYWN0RXZlbnRIYW5kbGVycyhwYXJhbWV0ZXJzKSwgZXh0cmFjdEV2ZW50SGFuZGxlcnMoZXh0ZXJuYWxQcm9wcykpO1xuICAgIHJldHVybiBfZXh0ZW5kcyh7XG4gICAgICAvLyBDbGlja0F3YXlMaXN0ZW5lciBhZGRzIGFuIGBvbkNsaWNrYCBwcm9wIHdoaWNoIHJlc3VsdHMgaW4gdGhlIGFsZXJ0IG5vdCBiZWluZyBhbm5vdW5jZWQuXG4gICAgICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL211aS9tYXRlcmlhbC11aS9pc3N1ZXMvMjkwODBcbiAgICAgIHJvbGU6ICdwcmVzZW50YXRpb24nXG4gICAgfSwgZXh0ZXJuYWxQcm9wcywgZXh0ZXJuYWxFdmVudEhhbmRsZXJzLCB7XG4gICAgICBvbkJsdXI6IGNyZWF0ZUhhbmRsZUJsdXIoZXh0ZXJuYWxFdmVudEhhbmRsZXJzKSxcbiAgICAgIG9uRm9jdXM6IGNyZWF0ZUhhbmRsZUZvY3VzKGV4dGVybmFsRXZlbnRIYW5kbGVycyksXG4gICAgICBvbk1vdXNlRW50ZXI6IGNyZWF0ZU1vdXNlRW50ZXIoZXh0ZXJuYWxFdmVudEhhbmRsZXJzKSxcbiAgICAgIG9uTW91c2VMZWF2ZTogY3JlYXRlTW91c2VMZWF2ZShleHRlcm5hbEV2ZW50SGFuZGxlcnMpXG4gICAgfSk7XG4gIH07XG4gIHJldHVybiB7XG4gICAgZ2V0Um9vdFByb3BzLFxuICAgIG9uQ2xpY2tBd2F5OiBoYW5kbGVDbGlja0F3YXlcbiAgfTtcbn1cbmV4cG9ydCBkZWZhdWx0IHVzZVNuYWNrYmFyOyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImFkZEVuZExpc3RlbmVyXCIsIFwiYXBwZWFyXCIsIFwiY2hpbGRyZW5cIiwgXCJlYXNpbmdcIiwgXCJpblwiLCBcIm9uRW50ZXJcIiwgXCJvbkVudGVyZWRcIiwgXCJvbkVudGVyaW5nXCIsIFwib25FeGl0XCIsIFwib25FeGl0ZWRcIiwgXCJvbkV4aXRpbmdcIiwgXCJzdHlsZVwiLCBcInRpbWVvdXRcIiwgXCJUcmFuc2l0aW9uQ29tcG9uZW50XCJdO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IFRyYW5zaXRpb24gfSBmcm9tICdyZWFjdC10cmFuc2l0aW9uLWdyb3VwJztcbmltcG9ydCBlbGVtZW50QWNjZXB0aW5nUmVmIGZyb20gJ0BtdWkvdXRpbHMvZWxlbWVudEFjY2VwdGluZ1JlZic7XG5pbXBvcnQgdXNlVGhlbWUgZnJvbSAnLi4vc3R5bGVzL3VzZVRoZW1lJztcbmltcG9ydCB7IHJlZmxvdywgZ2V0VHJhbnNpdGlvblByb3BzIH0gZnJvbSAnLi4vdHJhbnNpdGlvbnMvdXRpbHMnO1xuaW1wb3J0IHVzZUZvcmtSZWYgZnJvbSAnLi4vdXRpbHMvdXNlRm9ya1JlZic7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuY29uc3Qgc3R5bGVzID0ge1xuICBlbnRlcmluZzoge1xuICAgIHRyYW5zZm9ybTogJ25vbmUnXG4gIH0sXG4gIGVudGVyZWQ6IHtcbiAgICB0cmFuc2Zvcm06ICdub25lJ1xuICB9XG59O1xuXG4vKipcbiAqIFRoZSBab29tIHRyYW5zaXRpb24gY2FuIGJlIHVzZWQgZm9yIHRoZSBmbG9hdGluZyB2YXJpYW50IG9mIHRoZVxuICogW0J1dHRvbl0oL21hdGVyaWFsLXVpL3JlYWN0LWJ1dHRvbi8jZmxvYXRpbmctYWN0aW9uLWJ1dHRvbnMpIGNvbXBvbmVudC5cbiAqIEl0IHVzZXMgW3JlYWN0LXRyYW5zaXRpb24tZ3JvdXBdKGh0dHBzOi8vZ2l0aHViLmNvbS9yZWFjdGpzL3JlYWN0LXRyYW5zaXRpb24tZ3JvdXApIGludGVybmFsbHkuXG4gKi9cbmNvbnN0IFpvb20gPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBab29tKHByb3BzLCByZWYpIHtcbiAgY29uc3QgdGhlbWUgPSB1c2VUaGVtZSgpO1xuICBjb25zdCBkZWZhdWx0VGltZW91dCA9IHtcbiAgICBlbnRlcjogdGhlbWUudHJhbnNpdGlvbnMuZHVyYXRpb24uZW50ZXJpbmdTY3JlZW4sXG4gICAgZXhpdDogdGhlbWUudHJhbnNpdGlvbnMuZHVyYXRpb24ubGVhdmluZ1NjcmVlblxuICB9O1xuICBjb25zdCB7XG4gICAgICBhZGRFbmRMaXN0ZW5lcixcbiAgICAgIGFwcGVhciA9IHRydWUsXG4gICAgICBjaGlsZHJlbixcbiAgICAgIGVhc2luZyxcbiAgICAgIGluOiBpblByb3AsXG4gICAgICBvbkVudGVyLFxuICAgICAgb25FbnRlcmVkLFxuICAgICAgb25FbnRlcmluZyxcbiAgICAgIG9uRXhpdCxcbiAgICAgIG9uRXhpdGVkLFxuICAgICAgb25FeGl0aW5nLFxuICAgICAgc3R5bGUsXG4gICAgICB0aW1lb3V0ID0gZGVmYXVsdFRpbWVvdXQsXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QvcHJvcC10eXBlc1xuICAgICAgVHJhbnNpdGlvbkNvbXBvbmVudCA9IFRyYW5zaXRpb25cbiAgICB9ID0gcHJvcHMsXG4gICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkKTtcbiAgY29uc3Qgbm9kZVJlZiA9IFJlYWN0LnVzZVJlZihudWxsKTtcbiAgY29uc3QgaGFuZGxlUmVmID0gdXNlRm9ya1JlZihub2RlUmVmLCBjaGlsZHJlbi5yZWYsIHJlZik7XG4gIGNvbnN0IG5vcm1hbGl6ZWRUcmFuc2l0aW9uQ2FsbGJhY2sgPSBjYWxsYmFjayA9PiBtYXliZUlzQXBwZWFyaW5nID0+IHtcbiAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgIGNvbnN0IG5vZGUgPSBub2RlUmVmLmN1cnJlbnQ7XG5cbiAgICAgIC8vIG9uRW50ZXJYeHggYW5kIG9uRXhpdFh4eCBjYWxsYmFja3MgaGF2ZSBhIGRpZmZlcmVudCBhcmd1bWVudHMubGVuZ3RoIHZhbHVlLlxuICAgICAgaWYgKG1heWJlSXNBcHBlYXJpbmcgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBjYWxsYmFjayhub2RlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNhbGxiYWNrKG5vZGUsIG1heWJlSXNBcHBlYXJpbmcpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgY29uc3QgaGFuZGxlRW50ZXJpbmcgPSBub3JtYWxpemVkVHJhbnNpdGlvbkNhbGxiYWNrKG9uRW50ZXJpbmcpO1xuICBjb25zdCBoYW5kbGVFbnRlciA9IG5vcm1hbGl6ZWRUcmFuc2l0aW9uQ2FsbGJhY2soKG5vZGUsIGlzQXBwZWFyaW5nKSA9PiB7XG4gICAgcmVmbG93KG5vZGUpOyAvLyBTbyB0aGUgYW5pbWF0aW9uIGFsd2F5cyBzdGFydCBmcm9tIHRoZSBzdGFydC5cblxuICAgIGNvbnN0IHRyYW5zaXRpb25Qcm9wcyA9IGdldFRyYW5zaXRpb25Qcm9wcyh7XG4gICAgICBzdHlsZSxcbiAgICAgIHRpbWVvdXQsXG4gICAgICBlYXNpbmdcbiAgICB9LCB7XG4gICAgICBtb2RlOiAnZW50ZXInXG4gICAgfSk7XG4gICAgbm9kZS5zdHlsZS53ZWJraXRUcmFuc2l0aW9uID0gdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCd0cmFuc2Zvcm0nLCB0cmFuc2l0aW9uUHJvcHMpO1xuICAgIG5vZGUuc3R5bGUudHJhbnNpdGlvbiA9IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZSgndHJhbnNmb3JtJywgdHJhbnNpdGlvblByb3BzKTtcbiAgICBpZiAob25FbnRlcikge1xuICAgICAgb25FbnRlcihub2RlLCBpc0FwcGVhcmluZyk7XG4gICAgfVxuICB9KTtcbiAgY29uc3QgaGFuZGxlRW50ZXJlZCA9IG5vcm1hbGl6ZWRUcmFuc2l0aW9uQ2FsbGJhY2sob25FbnRlcmVkKTtcbiAgY29uc3QgaGFuZGxlRXhpdGluZyA9IG5vcm1hbGl6ZWRUcmFuc2l0aW9uQ2FsbGJhY2sob25FeGl0aW5nKTtcbiAgY29uc3QgaGFuZGxlRXhpdCA9IG5vcm1hbGl6ZWRUcmFuc2l0aW9uQ2FsbGJhY2sobm9kZSA9PiB7XG4gICAgY29uc3QgdHJhbnNpdGlvblByb3BzID0gZ2V0VHJhbnNpdGlvblByb3BzKHtcbiAgICAgIHN0eWxlLFxuICAgICAgdGltZW91dCxcbiAgICAgIGVhc2luZ1xuICAgIH0sIHtcbiAgICAgIG1vZGU6ICdleGl0J1xuICAgIH0pO1xuICAgIG5vZGUuc3R5bGUud2Via2l0VHJhbnNpdGlvbiA9IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZSgndHJhbnNmb3JtJywgdHJhbnNpdGlvblByb3BzKTtcbiAgICBub2RlLnN0eWxlLnRyYW5zaXRpb24gPSB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoJ3RyYW5zZm9ybScsIHRyYW5zaXRpb25Qcm9wcyk7XG4gICAgaWYgKG9uRXhpdCkge1xuICAgICAgb25FeGl0KG5vZGUpO1xuICAgIH1cbiAgfSk7XG4gIGNvbnN0IGhhbmRsZUV4aXRlZCA9IG5vcm1hbGl6ZWRUcmFuc2l0aW9uQ2FsbGJhY2sob25FeGl0ZWQpO1xuICBjb25zdCBoYW5kbGVBZGRFbmRMaXN0ZW5lciA9IG5leHQgPT4ge1xuICAgIGlmIChhZGRFbmRMaXN0ZW5lcikge1xuICAgICAgLy8gT2xkIGNhbGwgc2lnbmF0dXJlIGJlZm9yZSBgcmVhY3QtdHJhbnNpdGlvbi1ncm91cGAgaW1wbGVtZW50ZWQgYG5vZGVSZWZgXG4gICAgICBhZGRFbmRMaXN0ZW5lcihub2RlUmVmLmN1cnJlbnQsIG5leHQpO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KFRyYW5zaXRpb25Db21wb25lbnQsIF9leHRlbmRzKHtcbiAgICBhcHBlYXI6IGFwcGVhcixcbiAgICBpbjogaW5Qcm9wLFxuICAgIG5vZGVSZWY6IG5vZGVSZWYsXG4gICAgb25FbnRlcjogaGFuZGxlRW50ZXIsXG4gICAgb25FbnRlcmVkOiBoYW5kbGVFbnRlcmVkLFxuICAgIG9uRW50ZXJpbmc6IGhhbmRsZUVudGVyaW5nLFxuICAgIG9uRXhpdDogaGFuZGxlRXhpdCxcbiAgICBvbkV4aXRlZDogaGFuZGxlRXhpdGVkLFxuICAgIG9uRXhpdGluZzogaGFuZGxlRXhpdGluZyxcbiAgICBhZGRFbmRMaXN0ZW5lcjogaGFuZGxlQWRkRW5kTGlzdGVuZXIsXG4gICAgdGltZW91dDogdGltZW91dFxuICB9LCBvdGhlciwge1xuICAgIGNoaWxkcmVuOiAoc3RhdGUsIGNoaWxkUHJvcHMpID0+IHtcbiAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY2xvbmVFbGVtZW50KGNoaWxkcmVuLCBfZXh0ZW5kcyh7XG4gICAgICAgIHN0eWxlOiBfZXh0ZW5kcyh7XG4gICAgICAgICAgdHJhbnNmb3JtOiAnc2NhbGUoMCknLFxuICAgICAgICAgIHZpc2liaWxpdHk6IHN0YXRlID09PSAnZXhpdGVkJyAmJiAhaW5Qcm9wID8gJ2hpZGRlbicgOiB1bmRlZmluZWRcbiAgICAgICAgfSwgc3R5bGVzW3N0YXRlXSwgc3R5bGUsIGNoaWxkcmVuLnByb3BzLnN0eWxlKSxcbiAgICAgICAgcmVmOiBoYW5kbGVSZWZcbiAgICAgIH0sIGNoaWxkUHJvcHMpKTtcbiAgICB9XG4gIH0pKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gWm9vbS5wcm9wVHlwZXMgLyogcmVtb3ZlLXByb3B0eXBlcyAqLyA9IHtcbiAgLy8g4pSM4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAIFdhcm5pbmcg4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSQXG4gIC8vIOKUgiBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMuIOKUglxuICAvLyDilIIgICAgVG8gdXBkYXRlIHRoZW0sIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIGBwbnBtIHByb3B0eXBlc2AuICAgICDilIJcbiAgLy8g4pSU4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSYXG4gIC8qKlxuICAgKiBBZGQgYSBjdXN0b20gdHJhbnNpdGlvbiBlbmQgdHJpZ2dlci4gQ2FsbGVkIHdpdGggdGhlIHRyYW5zaXRpb25pbmcgRE9NXG4gICAqIG5vZGUgYW5kIGEgZG9uZSBjYWxsYmFjay4gQWxsb3dzIGZvciBtb3JlIGZpbmUgZ3JhaW5lZCB0cmFuc2l0aW9uIGVuZFxuICAgKiBsb2dpYy4gTm90ZTogVGltZW91dHMgYXJlIHN0aWxsIHVzZWQgYXMgYSBmYWxsYmFjayBpZiBwcm92aWRlZC5cbiAgICovXG4gIGFkZEVuZExpc3RlbmVyOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIFBlcmZvcm0gdGhlIGVudGVyIHRyYW5zaXRpb24gd2hlbiBpdCBmaXJzdCBtb3VudHMgaWYgYGluYCBpcyBhbHNvIGB0cnVlYC5cbiAgICogU2V0IHRoaXMgdG8gYGZhbHNlYCB0byBkaXNhYmxlIHRoaXMgYmVoYXZpb3IuXG4gICAqIEBkZWZhdWx0IHRydWVcbiAgICovXG4gIGFwcGVhcjogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBBIHNpbmdsZSBjaGlsZCBjb250ZW50IGVsZW1lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogZWxlbWVudEFjY2VwdGluZ1JlZi5pc1JlcXVpcmVkLFxuICAvKipcbiAgICogVGhlIHRyYW5zaXRpb24gdGltaW5nIGZ1bmN0aW9uLlxuICAgKiBZb3UgbWF5IHNwZWNpZnkgYSBzaW5nbGUgZWFzaW5nIG9yIGEgb2JqZWN0IGNvbnRhaW5pbmcgZW50ZXIgYW5kIGV4aXQgdmFsdWVzLlxuICAgKi9cbiAgZWFzaW5nOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGVudGVyOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGV4aXQ6IFByb3BUeXBlcy5zdHJpbmdcbiAgfSksIFByb3BUeXBlcy5zdHJpbmddKSxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGNvbXBvbmVudCB3aWxsIHRyYW5zaXRpb24gaW4uXG4gICAqL1xuICBpbjogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkVudGVyOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uRW50ZXJlZDogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkVudGVyaW5nOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uRXhpdDogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkV4aXRlZDogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkV4aXRpbmc6IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgc3R5bGU6IFByb3BUeXBlcy5vYmplY3QsXG4gIC8qKlxuICAgKiBUaGUgZHVyYXRpb24gZm9yIHRoZSB0cmFuc2l0aW9uLCBpbiBtaWxsaXNlY29uZHMuXG4gICAqIFlvdSBtYXkgc3BlY2lmeSBhIHNpbmdsZSB0aW1lb3V0IGZvciBhbGwgdHJhbnNpdGlvbnMsIG9yIGluZGl2aWR1YWxseSB3aXRoIGFuIG9iamVjdC5cbiAgICogQGRlZmF1bHQge1xuICAgKiAgIGVudGVyOiB0aGVtZS50cmFuc2l0aW9ucy5kdXJhdGlvbi5lbnRlcmluZ1NjcmVlbixcbiAgICogICBleGl0OiB0aGVtZS50cmFuc2l0aW9ucy5kdXJhdGlvbi5sZWF2aW5nU2NyZWVuLFxuICAgKiB9XG4gICAqL1xuICB0aW1lb3V0OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGFwcGVhcjogUHJvcFR5cGVzLm51bWJlcixcbiAgICBlbnRlcjogUHJvcFR5cGVzLm51bWJlcixcbiAgICBleGl0OiBQcm9wVHlwZXMubnVtYmVyXG4gIH0pXSlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCBab29tOyIsImltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3Nlcyc7XG5pbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3MgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzcyc7XG5leHBvcnQgZnVuY3Rpb24gZ2V0U3BlZWREaWFsVXRpbGl0eUNsYXNzKHNsb3QpIHtcbiAgcmV0dXJuIGdlbmVyYXRlVXRpbGl0eUNsYXNzKCdNdWlTcGVlZERpYWwnLCBzbG90KTtcbn1cbmNvbnN0IHNwZWVkRGlhbENsYXNzZXMgPSBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzKCdNdWlTcGVlZERpYWwnLCBbJ3Jvb3QnLCAnZmFiJywgJ2RpcmVjdGlvblVwJywgJ2RpcmVjdGlvbkRvd24nLCAnZGlyZWN0aW9uTGVmdCcsICdkaXJlY3Rpb25SaWdodCcsICdhY3Rpb25zJywgJ2FjdGlvbnNDbG9zZWQnXSk7XG5leHBvcnQgZGVmYXVsdCBzcGVlZERpYWxDbGFzc2VzOyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcInJlZlwiXSxcbiAgX2V4Y2x1ZGVkMiA9IFtcImFyaWFMYWJlbFwiLCBcIkZhYlByb3BzXCIsIFwiY2hpbGRyZW5cIiwgXCJjbGFzc05hbWVcIiwgXCJkaXJlY3Rpb25cIiwgXCJoaWRkZW5cIiwgXCJpY29uXCIsIFwib25CbHVyXCIsIFwib25DbG9zZVwiLCBcIm9uRm9jdXNcIiwgXCJvbktleURvd25cIiwgXCJvbk1vdXNlRW50ZXJcIiwgXCJvbk1vdXNlTGVhdmVcIiwgXCJvbk9wZW5cIiwgXCJvcGVuXCIsIFwib3Blbkljb25cIiwgXCJUcmFuc2l0aW9uQ29tcG9uZW50XCIsIFwidHJhbnNpdGlvbkR1cmF0aW9uXCIsIFwiVHJhbnNpdGlvblByb3BzXCJdLFxuICBfZXhjbHVkZWQzID0gW1wicmVmXCJdO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgaXNGcmFnbWVudCB9IGZyb20gJ3JlYWN0LWlzJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCBjb21wb3NlQ2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2NvbXBvc2VDbGFzc2VzJztcbmltcG9ydCB1c2VUaW1lb3V0IGZyb20gJ0BtdWkvdXRpbHMvdXNlVGltZW91dCc7XG5pbXBvcnQgY2xhbXAgZnJvbSAnQG11aS91dGlscy9jbGFtcCc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJy4uL3N0eWxlcy9zdHlsZWQnO1xuaW1wb3J0IHsgdXNlRGVmYXVsdFByb3BzIH0gZnJvbSAnLi4vRGVmYXVsdFByb3BzUHJvdmlkZXInO1xuaW1wb3J0IHVzZVRoZW1lIGZyb20gJy4uL3N0eWxlcy91c2VUaGVtZSc7XG5pbXBvcnQgWm9vbSBmcm9tICcuLi9ab29tJztcbmltcG9ydCBGYWIgZnJvbSAnLi4vRmFiJztcbmltcG9ydCBjYXBpdGFsaXplIGZyb20gJy4uL3V0aWxzL2NhcGl0YWxpemUnO1xuaW1wb3J0IGlzTXVpRWxlbWVudCBmcm9tICcuLi91dGlscy9pc011aUVsZW1lbnQnO1xuaW1wb3J0IHVzZUZvcmtSZWYgZnJvbSAnLi4vdXRpbHMvdXNlRm9ya1JlZic7XG5pbXBvcnQgdXNlQ29udHJvbGxlZCBmcm9tICcuLi91dGlscy91c2VDb250cm9sbGVkJztcbmltcG9ydCBzcGVlZERpYWxDbGFzc2VzLCB7IGdldFNwZWVkRGlhbFV0aWxpdHlDbGFzcyB9IGZyb20gJy4vc3BlZWREaWFsQ2xhc3Nlcyc7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuaW1wb3J0IHsganN4cyBhcyBfanN4cyB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuY29uc3QgdXNlVXRpbGl0eUNsYXNzZXMgPSBvd25lclN0YXRlID0+IHtcbiAgY29uc3Qge1xuICAgIGNsYXNzZXMsXG4gICAgb3BlbixcbiAgICBkaXJlY3Rpb25cbiAgfSA9IG93bmVyU3RhdGU7XG4gIGNvbnN0IHNsb3RzID0ge1xuICAgIHJvb3Q6IFsncm9vdCcsIGBkaXJlY3Rpb24ke2NhcGl0YWxpemUoZGlyZWN0aW9uKX1gXSxcbiAgICBmYWI6IFsnZmFiJ10sXG4gICAgYWN0aW9uczogWydhY3Rpb25zJywgIW9wZW4gJiYgJ2FjdGlvbnNDbG9zZWQnXVxuICB9O1xuICByZXR1cm4gY29tcG9zZUNsYXNzZXMoc2xvdHMsIGdldFNwZWVkRGlhbFV0aWxpdHlDbGFzcywgY2xhc3Nlcyk7XG59O1xuZnVuY3Rpb24gZ2V0T3JpZW50YXRpb24oZGlyZWN0aW9uKSB7XG4gIGlmIChkaXJlY3Rpb24gPT09ICd1cCcgfHwgZGlyZWN0aW9uID09PSAnZG93bicpIHtcbiAgICByZXR1cm4gJ3ZlcnRpY2FsJztcbiAgfVxuICBpZiAoZGlyZWN0aW9uID09PSAncmlnaHQnIHx8IGRpcmVjdGlvbiA9PT0gJ2xlZnQnKSB7XG4gICAgcmV0dXJuICdob3Jpem9udGFsJztcbiAgfVxuICByZXR1cm4gdW5kZWZpbmVkO1xufVxuY29uc3QgZGlhbFJhZGl1cyA9IDMyO1xuY29uc3Qgc3BhY2luZ0FjdGlvbnMgPSAxNjtcbmNvbnN0IFNwZWVkRGlhbFJvb3QgPSBzdHlsZWQoJ2RpdicsIHtcbiAgbmFtZTogJ011aVNwZWVkRGlhbCcsXG4gIHNsb3Q6ICdSb290JyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgb3duZXJTdGF0ZVxuICAgIH0gPSBwcm9wcztcbiAgICByZXR1cm4gW3N0eWxlcy5yb290LCBzdHlsZXNbYGRpcmVjdGlvbiR7Y2FwaXRhbGl6ZShvd25lclN0YXRlLmRpcmVjdGlvbil9YF1dO1xuICB9XG59KSgoe1xuICB0aGVtZSxcbiAgb3duZXJTdGF0ZVxufSkgPT4gX2V4dGVuZHMoe1xuICB6SW5kZXg6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS56SW5kZXguc3BlZWREaWFsLFxuICBkaXNwbGF5OiAnZmxleCcsXG4gIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICBwb2ludGVyRXZlbnRzOiAnbm9uZSdcbn0sIG93bmVyU3RhdGUuZGlyZWN0aW9uID09PSAndXAnICYmIHtcbiAgZmxleERpcmVjdGlvbjogJ2NvbHVtbi1yZXZlcnNlJyxcbiAgW2AmIC4ke3NwZWVkRGlhbENsYXNzZXMuYWN0aW9uc31gXToge1xuICAgIGZsZXhEaXJlY3Rpb246ICdjb2x1bW4tcmV2ZXJzZScsXG4gICAgbWFyZ2luQm90dG9tOiAtZGlhbFJhZGl1cyxcbiAgICBwYWRkaW5nQm90dG9tOiBzcGFjaW5nQWN0aW9ucyArIGRpYWxSYWRpdXNcbiAgfVxufSwgb3duZXJTdGF0ZS5kaXJlY3Rpb24gPT09ICdkb3duJyAmJiB7XG4gIGZsZXhEaXJlY3Rpb246ICdjb2x1bW4nLFxuICBbYCYgLiR7c3BlZWREaWFsQ2xhc3Nlcy5hY3Rpb25zfWBdOiB7XG4gICAgZmxleERpcmVjdGlvbjogJ2NvbHVtbicsXG4gICAgbWFyZ2luVG9wOiAtZGlhbFJhZGl1cyxcbiAgICBwYWRkaW5nVG9wOiBzcGFjaW5nQWN0aW9ucyArIGRpYWxSYWRpdXNcbiAgfVxufSwgb3duZXJTdGF0ZS5kaXJlY3Rpb24gPT09ICdsZWZ0JyAmJiB7XG4gIGZsZXhEaXJlY3Rpb246ICdyb3ctcmV2ZXJzZScsXG4gIFtgJiAuJHtzcGVlZERpYWxDbGFzc2VzLmFjdGlvbnN9YF06IHtcbiAgICBmbGV4RGlyZWN0aW9uOiAncm93LXJldmVyc2UnLFxuICAgIG1hcmdpblJpZ2h0OiAtZGlhbFJhZGl1cyxcbiAgICBwYWRkaW5nUmlnaHQ6IHNwYWNpbmdBY3Rpb25zICsgZGlhbFJhZGl1c1xuICB9XG59LCBvd25lclN0YXRlLmRpcmVjdGlvbiA9PT0gJ3JpZ2h0JyAmJiB7XG4gIGZsZXhEaXJlY3Rpb246ICdyb3cnLFxuICBbYCYgLiR7c3BlZWREaWFsQ2xhc3Nlcy5hY3Rpb25zfWBdOiB7XG4gICAgZmxleERpcmVjdGlvbjogJ3JvdycsXG4gICAgbWFyZ2luTGVmdDogLWRpYWxSYWRpdXMsXG4gICAgcGFkZGluZ0xlZnQ6IHNwYWNpbmdBY3Rpb25zICsgZGlhbFJhZGl1c1xuICB9XG59KSk7XG5jb25zdCBTcGVlZERpYWxGYWIgPSBzdHlsZWQoRmFiLCB7XG4gIG5hbWU6ICdNdWlTcGVlZERpYWwnLFxuICBzbG90OiAnRmFiJyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiBzdHlsZXMuZmFiXG59KSgoKSA9PiAoe1xuICBwb2ludGVyRXZlbnRzOiAnYXV0bydcbn0pKTtcbmNvbnN0IFNwZWVkRGlhbEFjdGlvbnMgPSBzdHlsZWQoJ2RpdicsIHtcbiAgbmFtZTogJ011aVNwZWVkRGlhbCcsXG4gIHNsb3Q6ICdBY3Rpb25zJyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgb3duZXJTdGF0ZVxuICAgIH0gPSBwcm9wcztcbiAgICByZXR1cm4gW3N0eWxlcy5hY3Rpb25zLCAhb3duZXJTdGF0ZS5vcGVuICYmIHN0eWxlcy5hY3Rpb25zQ2xvc2VkXTtcbiAgfVxufSkoKHtcbiAgb3duZXJTdGF0ZVxufSkgPT4gX2V4dGVuZHMoe1xuICBkaXNwbGF5OiAnZmxleCcsXG4gIHBvaW50ZXJFdmVudHM6ICdhdXRvJ1xufSwgIW93bmVyU3RhdGUub3BlbiAmJiB7XG4gIHRyYW5zaXRpb246ICd0b3AgMHMgbGluZWFyIDAuMnMnLFxuICBwb2ludGVyRXZlbnRzOiAnbm9uZSdcbn0pKTtcbmNvbnN0IFNwZWVkRGlhbCA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIFNwZWVkRGlhbChpblByb3BzLCByZWYpIHtcbiAgY29uc3QgcHJvcHMgPSB1c2VEZWZhdWx0UHJvcHMoe1xuICAgIHByb3BzOiBpblByb3BzLFxuICAgIG5hbWU6ICdNdWlTcGVlZERpYWwnXG4gIH0pO1xuICBjb25zdCB0aGVtZSA9IHVzZVRoZW1lKCk7XG4gIGNvbnN0IGRlZmF1bHRUcmFuc2l0aW9uRHVyYXRpb24gPSB7XG4gICAgZW50ZXI6IHRoZW1lLnRyYW5zaXRpb25zLmR1cmF0aW9uLmVudGVyaW5nU2NyZWVuLFxuICAgIGV4aXQ6IHRoZW1lLnRyYW5zaXRpb25zLmR1cmF0aW9uLmxlYXZpbmdTY3JlZW5cbiAgfTtcbiAgY29uc3Qge1xuICAgICAgYXJpYUxhYmVsLFxuICAgICAgRmFiUHJvcHM6IHtcbiAgICAgICAgcmVmOiBvcmlnRGlhbEJ1dHRvblJlZlxuICAgICAgfSA9IHt9LFxuICAgICAgY2hpbGRyZW46IGNoaWxkcmVuUHJvcCxcbiAgICAgIGNsYXNzTmFtZSxcbiAgICAgIGRpcmVjdGlvbiA9ICd1cCcsXG4gICAgICBoaWRkZW4gPSBmYWxzZSxcbiAgICAgIGljb24sXG4gICAgICBvbkJsdXIsXG4gICAgICBvbkNsb3NlLFxuICAgICAgb25Gb2N1cyxcbiAgICAgIG9uS2V5RG93bixcbiAgICAgIG9uTW91c2VFbnRlcixcbiAgICAgIG9uTW91c2VMZWF2ZSxcbiAgICAgIG9uT3BlbixcbiAgICAgIG9wZW46IG9wZW5Qcm9wLFxuICAgICAgVHJhbnNpdGlvbkNvbXBvbmVudCA9IFpvb20sXG4gICAgICB0cmFuc2l0aW9uRHVyYXRpb24gPSBkZWZhdWx0VHJhbnNpdGlvbkR1cmF0aW9uLFxuICAgICAgVHJhbnNpdGlvblByb3BzXG4gICAgfSA9IHByb3BzLFxuICAgIEZhYlByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMuRmFiUHJvcHMsIF9leGNsdWRlZCksXG4gICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkMik7XG4gIGNvbnN0IFtvcGVuLCBzZXRPcGVuU3RhdGVdID0gdXNlQ29udHJvbGxlZCh7XG4gICAgY29udHJvbGxlZDogb3BlblByb3AsXG4gICAgZGVmYXVsdDogZmFsc2UsXG4gICAgbmFtZTogJ1NwZWVkRGlhbCcsXG4gICAgc3RhdGU6ICdvcGVuJ1xuICB9KTtcbiAgY29uc3Qgb3duZXJTdGF0ZSA9IF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgIG9wZW4sXG4gICAgZGlyZWN0aW9uXG4gIH0pO1xuICBjb25zdCBjbGFzc2VzID0gdXNlVXRpbGl0eUNsYXNzZXMob3duZXJTdGF0ZSk7XG4gIGNvbnN0IGV2ZW50VGltZXIgPSB1c2VUaW1lb3V0KCk7XG5cbiAgLyoqXG4gICAqIGFuIGluZGV4IGluIGFjdGlvbnMuY3VycmVudFxuICAgKi9cbiAgY29uc3QgZm9jdXNlZEFjdGlvbiA9IFJlYWN0LnVzZVJlZigwKTtcblxuICAvKipcbiAgICogcHJlc3NpbmcgdGhpcyBrZXkgd2hpbGUgdGhlIGZvY3VzIGlzIG9uIGEgY2hpbGQgU3BlZWREaWFsQWN0aW9uIGZvY3VzZXNcbiAgICogdGhlIG5leHQgU3BlZWREaWFsQWN0aW9uLlxuICAgKiBJdCBpcyBlcXVhbCB0byB0aGUgZmlyc3QgYXJyb3cga2V5IHByZXNzZWQgd2hpbGUgZm9jdXMgaXMgb24gdGhlIFNwZWVkRGlhbFxuICAgKiB0aGF0IGlzIG5vdCBvcnRob2dvbmFsIHRvIHRoZSBkaXJlY3Rpb24uXG4gICAqIEB0eXBlIHt1dGlscy5BcnJvd0tleT99XG4gICAqL1xuICBjb25zdCBuZXh0SXRlbUFycm93S2V5ID0gUmVhY3QudXNlUmVmKCk7XG5cbiAgLyoqXG4gICAqIHJlZnMgdG8gdGhlIEJ1dHRvbiB0aGF0IGhhdmUgYW4gYWN0aW9uIGFzc29jaWF0ZWQgdG8gdGhlbSBpbiB0aGlzIFNwZWVkRGlhbFxuICAgKiBbRmFiLCAuLi4oU3BlZWREaWFsQWN0aW9ucyA+IEJ1dHRvbildXG4gICAqIEB0eXBlIHtIVE1MQnV0dG9uRWxlbWVudFtdfVxuICAgKi9cbiAgY29uc3QgYWN0aW9ucyA9IFJlYWN0LnVzZVJlZihbXSk7XG4gIGFjdGlvbnMuY3VycmVudCA9IFthY3Rpb25zLmN1cnJlbnRbMF1dO1xuICBjb25zdCBoYW5kbGVPd25GYWJSZWYgPSBSZWFjdC51c2VDYWxsYmFjayhmYWJGZWYgPT4ge1xuICAgIGFjdGlvbnMuY3VycmVudFswXSA9IGZhYkZlZjtcbiAgfSwgW10pO1xuICBjb25zdCBoYW5kbGVGYWJSZWYgPSB1c2VGb3JrUmVmKG9yaWdEaWFsQnV0dG9uUmVmLCBoYW5kbGVPd25GYWJSZWYpO1xuXG4gIC8qKlxuICAgKiBjcmVhdGVzIGEgcmVmIGNhbGxiYWNrIGZvciB0aGUgQnV0dG9uIGluIGEgU3BlZWREaWFsQWN0aW9uXG4gICAqIElzIGNhbGxlZCBiZWZvcmUgdGhlIG9yaWdpbmFsIHJlZiBjYWxsYmFjayBmb3IgQnV0dG9uIHRoYXQgd2FzIHNldCBpbiBidXR0b25Qcm9wc1xuICAgKlxuICAgKiBAcGFyYW0gZGlhbEFjdGlvbkluZGV4IHtudW1iZXJ9XG4gICAqIEBwYXJhbSBvcmlnQnV0dG9uUmVmIHtSZWFjdC5SZWZPYmplY3Q/fVxuICAgKi9cbiAgY29uc3QgY3JlYXRlSGFuZGxlU3BlZWREaWFsQWN0aW9uQnV0dG9uUmVmID0gKGRpYWxBY3Rpb25JbmRleCwgb3JpZ0J1dHRvblJlZikgPT4ge1xuICAgIHJldHVybiBidXR0b25SZWYgPT4ge1xuICAgICAgYWN0aW9ucy5jdXJyZW50W2RpYWxBY3Rpb25JbmRleCArIDFdID0gYnV0dG9uUmVmO1xuICAgICAgaWYgKG9yaWdCdXR0b25SZWYpIHtcbiAgICAgICAgb3JpZ0J1dHRvblJlZihidXR0b25SZWYpO1xuICAgICAgfVxuICAgIH07XG4gIH07XG4gIGNvbnN0IGhhbmRsZUtleURvd24gPSBldmVudCA9PiB7XG4gICAgaWYgKG9uS2V5RG93bikge1xuICAgICAgb25LZXlEb3duKGV2ZW50KTtcbiAgICB9XG4gICAgY29uc3Qga2V5ID0gZXZlbnQua2V5LnJlcGxhY2UoJ0Fycm93JywgJycpLnRvTG93ZXJDYXNlKCk7XG4gICAgY29uc3Qge1xuICAgICAgY3VycmVudDogbmV4dEl0ZW1BcnJvd0tleUN1cnJlbnQgPSBrZXlcbiAgICB9ID0gbmV4dEl0ZW1BcnJvd0tleTtcbiAgICBpZiAoZXZlbnQua2V5ID09PSAnRXNjYXBlJykge1xuICAgICAgc2V0T3BlblN0YXRlKGZhbHNlKTtcbiAgICAgIGFjdGlvbnMuY3VycmVudFswXS5mb2N1cygpO1xuICAgICAgaWYgKG9uQ2xvc2UpIHtcbiAgICAgICAgb25DbG9zZShldmVudCwgJ2VzY2FwZUtleURvd24nKTtcbiAgICAgIH1cbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGdldE9yaWVudGF0aW9uKGtleSkgPT09IGdldE9yaWVudGF0aW9uKG5leHRJdGVtQXJyb3dLZXlDdXJyZW50KSAmJiBnZXRPcmllbnRhdGlvbihrZXkpICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBjb25zdCBhY3Rpb25TdGVwID0ga2V5ID09PSBuZXh0SXRlbUFycm93S2V5Q3VycmVudCA/IDEgOiAtMTtcblxuICAgICAgLy8gc3RheSB3aXRoaW4gYXJyYXkgaW5kaWNlc1xuICAgICAgY29uc3QgbmV4dEFjdGlvbiA9IGNsYW1wKGZvY3VzZWRBY3Rpb24uY3VycmVudCArIGFjdGlvblN0ZXAsIDAsIGFjdGlvbnMuY3VycmVudC5sZW5ndGggLSAxKTtcbiAgICAgIGFjdGlvbnMuY3VycmVudFtuZXh0QWN0aW9uXS5mb2N1cygpO1xuICAgICAgZm9jdXNlZEFjdGlvbi5jdXJyZW50ID0gbmV4dEFjdGlvbjtcbiAgICAgIG5leHRJdGVtQXJyb3dLZXkuY3VycmVudCA9IG5leHRJdGVtQXJyb3dLZXlDdXJyZW50O1xuICAgIH1cbiAgfTtcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICAvLyBhY3Rpb25zIHdlcmUgY2xvc2VkIHdoaWxlIG5hdmlnYXRpb24gc3RhdGUgd2FzIG5vdCByZXNldFxuICAgIGlmICghb3Blbikge1xuICAgICAgZm9jdXNlZEFjdGlvbi5jdXJyZW50ID0gMDtcbiAgICAgIG5leHRJdGVtQXJyb3dLZXkuY3VycmVudCA9IHVuZGVmaW5lZDtcbiAgICB9XG4gIH0sIFtvcGVuXSk7XG4gIGNvbnN0IGhhbmRsZUNsb3NlID0gZXZlbnQgPT4ge1xuICAgIGlmIChldmVudC50eXBlID09PSAnbW91c2VsZWF2ZScgJiYgb25Nb3VzZUxlYXZlKSB7XG4gICAgICBvbk1vdXNlTGVhdmUoZXZlbnQpO1xuICAgIH1cbiAgICBpZiAoZXZlbnQudHlwZSA9PT0gJ2JsdXInICYmIG9uQmx1cikge1xuICAgICAgb25CbHVyKGV2ZW50KTtcbiAgICB9XG4gICAgZXZlbnRUaW1lci5jbGVhcigpO1xuICAgIGlmIChldmVudC50eXBlID09PSAnYmx1cicpIHtcbiAgICAgIGV2ZW50VGltZXIuc3RhcnQoMCwgKCkgPT4ge1xuICAgICAgICBzZXRPcGVuU3RhdGUoZmFsc2UpO1xuICAgICAgICBpZiAob25DbG9zZSkge1xuICAgICAgICAgIG9uQ2xvc2UoZXZlbnQsICdibHVyJyk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBzZXRPcGVuU3RhdGUoZmFsc2UpO1xuICAgICAgaWYgKG9uQ2xvc2UpIHtcbiAgICAgICAgb25DbG9zZShldmVudCwgJ21vdXNlTGVhdmUnKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG4gIGNvbnN0IGhhbmRsZUNsaWNrID0gZXZlbnQgPT4ge1xuICAgIGlmIChGYWJQcm9wcy5vbkNsaWNrKSB7XG4gICAgICBGYWJQcm9wcy5vbkNsaWNrKGV2ZW50KTtcbiAgICB9XG4gICAgZXZlbnRUaW1lci5jbGVhcigpO1xuICAgIGlmIChvcGVuKSB7XG4gICAgICBzZXRPcGVuU3RhdGUoZmFsc2UpO1xuICAgICAgaWYgKG9uQ2xvc2UpIHtcbiAgICAgICAgb25DbG9zZShldmVudCwgJ3RvZ2dsZScpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBzZXRPcGVuU3RhdGUodHJ1ZSk7XG4gICAgICBpZiAob25PcGVuKSB7XG4gICAgICAgIG9uT3BlbihldmVudCwgJ3RvZ2dsZScpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgY29uc3QgaGFuZGxlT3BlbiA9IGV2ZW50ID0+IHtcbiAgICBpZiAoZXZlbnQudHlwZSA9PT0gJ21vdXNlZW50ZXInICYmIG9uTW91c2VFbnRlcikge1xuICAgICAgb25Nb3VzZUVudGVyKGV2ZW50KTtcbiAgICB9XG4gICAgaWYgKGV2ZW50LnR5cGUgPT09ICdmb2N1cycgJiYgb25Gb2N1cykge1xuICAgICAgb25Gb2N1cyhldmVudCk7XG4gICAgfVxuXG4gICAgLy8gV2hlbiBtb3ZpbmcgdGhlIGZvY3VzIGJldHdlZW4gdHdvIGl0ZW1zLFxuICAgIC8vIGEgY2hhaW4gaWYgYmx1ciBhbmQgZm9jdXMgZXZlbnQgaXMgdHJpZ2dlcmVkLlxuICAgIC8vIFdlIG9ubHkgaGFuZGxlIHRoZSBsYXN0IGV2ZW50LlxuICAgIGV2ZW50VGltZXIuY2xlYXIoKTtcbiAgICBpZiAoIW9wZW4pIHtcbiAgICAgIC8vIFdhaXQgZm9yIGEgZnV0dXJlIGZvY3VzIG9yIGNsaWNrIGV2ZW50XG4gICAgICBldmVudFRpbWVyLnN0YXJ0KDAsICgpID0+IHtcbiAgICAgICAgc2V0T3BlblN0YXRlKHRydWUpO1xuICAgICAgICBpZiAob25PcGVuKSB7XG4gICAgICAgICAgY29uc3QgZXZlbnRNYXAgPSB7XG4gICAgICAgICAgICBmb2N1czogJ2ZvY3VzJyxcbiAgICAgICAgICAgIG1vdXNlZW50ZXI6ICdtb3VzZUVudGVyJ1xuICAgICAgICAgIH07XG4gICAgICAgICAgb25PcGVuKGV2ZW50LCBldmVudE1hcFtldmVudC50eXBlXSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICAvLyBGaWx0ZXIgdGhlIGxhYmVsIGZvciB2YWxpZCBpZCBjaGFyYWN0ZXJzLlxuICBjb25zdCBpZCA9IGFyaWFMYWJlbC5yZXBsYWNlKC9eW15hLXpdK3xbXlxcdzouLV0rL2dpLCAnJyk7XG4gIGNvbnN0IGFsbEl0ZW1zID0gUmVhY3QuQ2hpbGRyZW4udG9BcnJheShjaGlsZHJlblByb3ApLmZpbHRlcihjaGlsZCA9PiB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmIChpc0ZyYWdtZW50KGNoaWxkKSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFtcIk1VSTogVGhlIFNwZWVkRGlhbCBjb21wb25lbnQgZG9lc24ndCBhY2NlcHQgYSBGcmFnbWVudCBhcyBhIGNoaWxkLlwiLCAnQ29uc2lkZXIgcHJvdmlkaW5nIGFuIGFycmF5IGluc3RlYWQuJ10uam9pbignXFxuJykpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmlzVmFsaWRFbGVtZW50KGNoaWxkKTtcbiAgfSk7XG4gIGNvbnN0IGNoaWxkcmVuID0gYWxsSXRlbXMubWFwKChjaGlsZCwgaW5kZXgpID0+IHtcbiAgICBjb25zdCBfY2hpbGQkcHJvcHMgPSBjaGlsZC5wcm9wcyxcbiAgICAgIHtcbiAgICAgICAgRmFiUHJvcHM6IHtcbiAgICAgICAgICByZWY6IG9yaWdCdXR0b25SZWZcbiAgICAgICAgfSA9IHt9LFxuICAgICAgICB0b29sdGlwUGxhY2VtZW50OiB0b29sdGlwUGxhY2VtZW50UHJvcFxuICAgICAgfSA9IF9jaGlsZCRwcm9wcyxcbiAgICAgIENoaWxkRmFiUHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfY2hpbGQkcHJvcHMuRmFiUHJvcHMsIF9leGNsdWRlZDMpO1xuICAgIGNvbnN0IHRvb2x0aXBQbGFjZW1lbnQgPSB0b29sdGlwUGxhY2VtZW50UHJvcCB8fCAoZ2V0T3JpZW50YXRpb24oZGlyZWN0aW9uKSA9PT0gJ3ZlcnRpY2FsJyA/ICdsZWZ0JyA6ICd0b3AnKTtcbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNsb25lRWxlbWVudChjaGlsZCwge1xuICAgICAgRmFiUHJvcHM6IF9leHRlbmRzKHt9LCBDaGlsZEZhYlByb3BzLCB7XG4gICAgICAgIHJlZjogY3JlYXRlSGFuZGxlU3BlZWREaWFsQWN0aW9uQnV0dG9uUmVmKGluZGV4LCBvcmlnQnV0dG9uUmVmKVxuICAgICAgfSksXG4gICAgICBkZWxheTogMzAgKiAob3BlbiA/IGluZGV4IDogYWxsSXRlbXMubGVuZ3RoIC0gaW5kZXgpLFxuICAgICAgb3BlbixcbiAgICAgIHRvb2x0aXBQbGFjZW1lbnQsXG4gICAgICBpZDogYCR7aWR9LWFjdGlvbi0ke2luZGV4fWBcbiAgICB9KTtcbiAgfSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeHMoU3BlZWREaWFsUm9vdCwgX2V4dGVuZHMoe1xuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSksXG4gICAgcmVmOiByZWYsXG4gICAgcm9sZTogXCJwcmVzZW50YXRpb25cIixcbiAgICBvbktleURvd246IGhhbmRsZUtleURvd24sXG4gICAgb25CbHVyOiBoYW5kbGVDbG9zZSxcbiAgICBvbkZvY3VzOiBoYW5kbGVPcGVuLFxuICAgIG9uTW91c2VFbnRlcjogaGFuZGxlT3BlbixcbiAgICBvbk1vdXNlTGVhdmU6IGhhbmRsZUNsb3NlLFxuICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGVcbiAgfSwgb3RoZXIsIHtcbiAgICBjaGlsZHJlbjogWy8qI19fUFVSRV9fKi9fanN4KFRyYW5zaXRpb25Db21wb25lbnQsIF9leHRlbmRzKHtcbiAgICAgIGluOiAhaGlkZGVuLFxuICAgICAgdGltZW91dDogdHJhbnNpdGlvbkR1cmF0aW9uLFxuICAgICAgdW5tb3VudE9uRXhpdDogdHJ1ZVxuICAgIH0sIFRyYW5zaXRpb25Qcm9wcywge1xuICAgICAgY2hpbGRyZW46IC8qI19fUFVSRV9fKi9fanN4KFNwZWVkRGlhbEZhYiwgX2V4dGVuZHMoe1xuICAgICAgICBjb2xvcjogXCJwcmltYXJ5XCIsXG4gICAgICAgIFwiYXJpYS1sYWJlbFwiOiBhcmlhTGFiZWwsXG4gICAgICAgIFwiYXJpYS1oYXNwb3B1cFwiOiBcInRydWVcIixcbiAgICAgICAgXCJhcmlhLWV4cGFuZGVkXCI6IG9wZW4sXG4gICAgICAgIFwiYXJpYS1jb250cm9sc1wiOiBgJHtpZH0tYWN0aW9uc2BcbiAgICAgIH0sIEZhYlByb3BzLCB7XG4gICAgICAgIG9uQ2xpY2s6IGhhbmRsZUNsaWNrLFxuICAgICAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5mYWIsIEZhYlByb3BzLmNsYXNzTmFtZSksXG4gICAgICAgIHJlZjogaGFuZGxlRmFiUmVmLFxuICAgICAgICBvd25lclN0YXRlOiBvd25lclN0YXRlLFxuICAgICAgICBjaGlsZHJlbjogLyojX19QVVJFX18qL1JlYWN0LmlzVmFsaWRFbGVtZW50KGljb24pICYmIGlzTXVpRWxlbWVudChpY29uLCBbJ1NwZWVkRGlhbEljb24nXSkgPyAvKiNfX1BVUkVfXyovUmVhY3QuY2xvbmVFbGVtZW50KGljb24sIHtcbiAgICAgICAgICBvcGVuXG4gICAgICAgIH0pIDogaWNvblxuICAgICAgfSkpXG4gICAgfSkpLCAvKiNfX1BVUkVfXyovX2pzeChTcGVlZERpYWxBY3Rpb25zLCB7XG4gICAgICBpZDogYCR7aWR9LWFjdGlvbnNgLFxuICAgICAgcm9sZTogXCJtZW51XCIsXG4gICAgICBcImFyaWEtb3JpZW50YXRpb25cIjogZ2V0T3JpZW50YXRpb24oZGlyZWN0aW9uKSxcbiAgICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLmFjdGlvbnMsICFvcGVuICYmIGNsYXNzZXMuYWN0aW9uc0Nsb3NlZCksXG4gICAgICBvd25lclN0YXRlOiBvd25lclN0YXRlLFxuICAgICAgY2hpbGRyZW46IGNoaWxkcmVuXG4gICAgfSldXG4gIH0pKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gU3BlZWREaWFsLnByb3BUeXBlcyAvKiByZW1vdmUtcHJvcHR5cGVzICovID0ge1xuICAvLyDilIzilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIAgV2FybmluZyDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJBcbiAgLy8g4pSCIFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucy4g4pSCXG4gIC8vIOKUgiAgICBUbyB1cGRhdGUgdGhlbSwgZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gYHBucG0gcHJvcHR5cGVzYC4gICAgIOKUglxuICAvLyDilJTilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJhcbiAgLyoqXG4gICAqIFRoZSBhcmlhLWxhYmVsIG9mIHRoZSBidXR0b24gZWxlbWVudC5cbiAgICogQWxzbyB1c2VkIHRvIHByb3ZpZGUgdGhlIGBpZGAgZm9yIHRoZSBgU3BlZWREaWFsYCBlbGVtZW50IGFuZCBpdHMgY2hpbGRyZW4uXG4gICAqL1xuICBhcmlhTGFiZWw6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgLyoqXG4gICAqIFNwZWVkRGlhbEFjdGlvbnMgdG8gZGlzcGxheSB3aGVuIHRoZSBTcGVlZERpYWwgaXMgYG9wZW5gLlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIFRoZSBkaXJlY3Rpb24gdGhlIGFjdGlvbnMgb3BlbiByZWxhdGl2ZSB0byB0aGUgZmxvYXRpbmcgYWN0aW9uIGJ1dHRvbi5cbiAgICogQGRlZmF1bHQgJ3VwJ1xuICAgKi9cbiAgZGlyZWN0aW9uOiBQcm9wVHlwZXMub25lT2YoWydkb3duJywgJ2xlZnQnLCAncmlnaHQnLCAndXAnXSksXG4gIC8qKlxuICAgKiBQcm9wcyBhcHBsaWVkIHRvIHRoZSBbYEZhYmBdKC9tYXRlcmlhbC11aS9hcGkvZmFiLykgZWxlbWVudC5cbiAgICogQGRlZmF1bHQge31cbiAgICovXG4gIEZhYlByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgU3BlZWREaWFsIGlzIGhpZGRlbi5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGhpZGRlbjogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBUaGUgaWNvbiB0byBkaXNwbGF5IGluIHRoZSBTcGVlZERpYWwgRmFiLiBUaGUgYFNwZWVkRGlhbEljb25gIGNvbXBvbmVudFxuICAgKiBwcm92aWRlcyBhIGRlZmF1bHQgSWNvbiB3aXRoIGFuaW1hdGlvbi5cbiAgICovXG4gIGljb246IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25CbHVyOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIGNvbXBvbmVudCByZXF1ZXN0cyB0byBiZSBjbG9zZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBldmVudCBUaGUgZXZlbnQgc291cmNlIG9mIHRoZSBjYWxsYmFjay5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHJlYXNvbiBDYW4gYmU6IGBcInRvZ2dsZVwiYCwgYFwiYmx1clwiYCwgYFwibW91c2VMZWF2ZVwiYCwgYFwiZXNjYXBlS2V5RG93blwiYC5cbiAgICovXG4gIG9uQ2xvc2U6IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25Gb2N1czogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbktleURvd246IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25Nb3VzZUVudGVyOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uTW91c2VMZWF2ZTogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSBjb21wb25lbnQgcmVxdWVzdHMgdG8gYmUgb3Blbi5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGV2ZW50IFRoZSBldmVudCBzb3VyY2Ugb2YgdGhlIGNhbGxiYWNrLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcmVhc29uIENhbiBiZTogYFwidG9nZ2xlXCJgLCBgXCJmb2N1c1wiYCwgYFwibW91c2VFbnRlclwiYC5cbiAgICovXG4gIG9uT3BlbjogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBjb21wb25lbnQgaXMgc2hvd24uXG4gICAqL1xuICBvcGVuOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIFRoZSBpY29uIHRvIGRpc3BsYXkgaW4gdGhlIFNwZWVkRGlhbCBGYWIgd2hlbiB0aGUgU3BlZWREaWFsIGlzIG9wZW4uXG4gICAqL1xuICBvcGVuSWNvbjogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBUaGUgc3lzdGVtIHByb3AgdGhhdCBhbGxvd3MgZGVmaW5pbmcgc3lzdGVtIG92ZXJyaWRlcyBhcyB3ZWxsIGFzIGFkZGl0aW9uYWwgQ1NTIHN0eWxlcy5cbiAgICovXG4gIHN4OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLmJvb2xdKSksIFByb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSksXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSB0cmFuc2l0aW9uLlxuICAgKiBbRm9sbG93IHRoaXMgZ3VpZGVdKC9tYXRlcmlhbC11aS90cmFuc2l0aW9ucy8jdHJhbnNpdGlvbmNvbXBvbmVudC1wcm9wKSB0byBsZWFybiBtb3JlIGFib3V0IHRoZSByZXF1aXJlbWVudHMgZm9yIHRoaXMgY29tcG9uZW50LlxuICAgKiBAZGVmYXVsdCBab29tXG4gICAqL1xuICBUcmFuc2l0aW9uQ29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG4gIC8qKlxuICAgKiBUaGUgZHVyYXRpb24gZm9yIHRoZSB0cmFuc2l0aW9uLCBpbiBtaWxsaXNlY29uZHMuXG4gICAqIFlvdSBtYXkgc3BlY2lmeSBhIHNpbmdsZSB0aW1lb3V0IGZvciBhbGwgdHJhbnNpdGlvbnMsIG9yIGluZGl2aWR1YWxseSB3aXRoIGFuIG9iamVjdC5cbiAgICogQGRlZmF1bHQge1xuICAgKiAgIGVudGVyOiB0aGVtZS50cmFuc2l0aW9ucy5kdXJhdGlvbi5lbnRlcmluZ1NjcmVlbixcbiAgICogICBleGl0OiB0aGVtZS50cmFuc2l0aW9ucy5kdXJhdGlvbi5sZWF2aW5nU2NyZWVuLFxuICAgKiB9XG4gICAqL1xuICB0cmFuc2l0aW9uRHVyYXRpb246IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zaGFwZSh7XG4gICAgYXBwZWFyOiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIGVudGVyOiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIGV4aXQ6IFByb3BUeXBlcy5udW1iZXJcbiAgfSldKSxcbiAgLyoqXG4gICAqIFByb3BzIGFwcGxpZWQgdG8gdGhlIHRyYW5zaXRpb24gZWxlbWVudC5cbiAgICogQnkgZGVmYXVsdCwgdGhlIGVsZW1lbnQgaXMgYmFzZWQgb24gdGhpcyBbYFRyYW5zaXRpb25gXShodHRwczovL3JlYWN0Y29tbXVuaXR5Lm9yZy9yZWFjdC10cmFuc2l0aW9uLWdyb3VwL3RyYW5zaXRpb24vKSBjb21wb25lbnQuXG4gICAqL1xuICBUcmFuc2l0aW9uUHJvcHM6IFByb3BUeXBlcy5vYmplY3Rcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCBTcGVlZERpYWw7IiwiaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzc2VzJztcbmltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzJztcbmV4cG9ydCBmdW5jdGlvbiBnZXRUb29sdGlwVXRpbGl0eUNsYXNzKHNsb3QpIHtcbiAgcmV0dXJuIGdlbmVyYXRlVXRpbGl0eUNsYXNzKCdNdWlUb29sdGlwJywgc2xvdCk7XG59XG5jb25zdCB0b29sdGlwQ2xhc3NlcyA9IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMoJ011aVRvb2x0aXAnLCBbJ3BvcHBlcicsICdwb3BwZXJJbnRlcmFjdGl2ZScsICdwb3BwZXJBcnJvdycsICdwb3BwZXJDbG9zZScsICd0b29sdGlwJywgJ3Rvb2x0aXBBcnJvdycsICd0b3VjaCcsICd0b29sdGlwUGxhY2VtZW50TGVmdCcsICd0b29sdGlwUGxhY2VtZW50UmlnaHQnLCAndG9vbHRpcFBsYWNlbWVudFRvcCcsICd0b29sdGlwUGxhY2VtZW50Qm90dG9tJywgJ2Fycm93J10pO1xuZXhwb3J0IGRlZmF1bHQgdG9vbHRpcENsYXNzZXM7IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiYXJyb3dcIiwgXCJjaGlsZHJlblwiLCBcImNsYXNzZXNcIiwgXCJjb21wb25lbnRzXCIsIFwiY29tcG9uZW50c1Byb3BzXCIsIFwiZGVzY3JpYmVDaGlsZFwiLCBcImRpc2FibGVGb2N1c0xpc3RlbmVyXCIsIFwiZGlzYWJsZUhvdmVyTGlzdGVuZXJcIiwgXCJkaXNhYmxlSW50ZXJhY3RpdmVcIiwgXCJkaXNhYmxlVG91Y2hMaXN0ZW5lclwiLCBcImVudGVyRGVsYXlcIiwgXCJlbnRlck5leHREZWxheVwiLCBcImVudGVyVG91Y2hEZWxheVwiLCBcImZvbGxvd0N1cnNvclwiLCBcImlkXCIsIFwibGVhdmVEZWxheVwiLCBcImxlYXZlVG91Y2hEZWxheVwiLCBcIm9uQ2xvc2VcIiwgXCJvbk9wZW5cIiwgXCJvcGVuXCIsIFwicGxhY2VtZW50XCIsIFwiUG9wcGVyQ29tcG9uZW50XCIsIFwiUG9wcGVyUHJvcHNcIiwgXCJzbG90UHJvcHNcIiwgXCJzbG90c1wiLCBcInRpdGxlXCIsIFwiVHJhbnNpdGlvbkNvbXBvbmVudFwiLCBcIlRyYW5zaXRpb25Qcm9wc1wiXTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB1c2VUaW1lb3V0LCB7IFRpbWVvdXQgfSBmcm9tICdAbXVpL3V0aWxzL3VzZVRpbWVvdXQnO1xuaW1wb3J0IGVsZW1lbnRBY2NlcHRpbmdSZWYgZnJvbSAnQG11aS91dGlscy9lbGVtZW50QWNjZXB0aW5nUmVmJztcbmltcG9ydCBjb21wb3NlQ2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2NvbXBvc2VDbGFzc2VzJztcbmltcG9ydCB7IGFscGhhIH0gZnJvbSAnQG11aS9zeXN0ZW0vY29sb3JNYW5pcHVsYXRvcic7XG5pbXBvcnQgeyB1c2VSdGwgfSBmcm9tICdAbXVpL3N5c3RlbS9SdGxQcm92aWRlcic7XG5pbXBvcnQgYXBwZW5kT3duZXJTdGF0ZSBmcm9tICdAbXVpL3V0aWxzL2FwcGVuZE93bmVyU3RhdGUnO1xuaW1wb3J0IHsgc3R5bGVkLCB1c2VUaGVtZSB9IGZyb20gJy4uL3N0eWxlcyc7XG5pbXBvcnQgeyB1c2VEZWZhdWx0UHJvcHMgfSBmcm9tICcuLi9EZWZhdWx0UHJvcHNQcm92aWRlcic7XG5pbXBvcnQgY2FwaXRhbGl6ZSBmcm9tICcuLi91dGlscy9jYXBpdGFsaXplJztcbmltcG9ydCBHcm93IGZyb20gJy4uL0dyb3cnO1xuaW1wb3J0IFBvcHBlciBmcm9tICcuLi9Qb3BwZXInO1xuaW1wb3J0IHVzZUV2ZW50Q2FsbGJhY2sgZnJvbSAnLi4vdXRpbHMvdXNlRXZlbnRDYWxsYmFjayc7XG5pbXBvcnQgdXNlRm9ya1JlZiBmcm9tICcuLi91dGlscy91c2VGb3JrUmVmJztcbmltcG9ydCB1c2VJZCBmcm9tICcuLi91dGlscy91c2VJZCc7XG5pbXBvcnQgdXNlSXNGb2N1c1Zpc2libGUgZnJvbSAnLi4vdXRpbHMvdXNlSXNGb2N1c1Zpc2libGUnO1xuaW1wb3J0IHVzZUNvbnRyb2xsZWQgZnJvbSAnLi4vdXRpbHMvdXNlQ29udHJvbGxlZCc7XG5pbXBvcnQgdG9vbHRpcENsYXNzZXMsIHsgZ2V0VG9vbHRpcFV0aWxpdHlDbGFzcyB9IGZyb20gJy4vdG9vbHRpcENsYXNzZXMnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmltcG9ydCB7IGpzeHMgYXMgX2pzeHMgfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmZ1bmN0aW9uIHJvdW5kKHZhbHVlKSB7XG4gIHJldHVybiBNYXRoLnJvdW5kKHZhbHVlICogMWU1KSAvIDFlNTtcbn1cbmNvbnN0IHVzZVV0aWxpdHlDbGFzc2VzID0gb3duZXJTdGF0ZSA9PiB7XG4gIGNvbnN0IHtcbiAgICBjbGFzc2VzLFxuICAgIGRpc2FibGVJbnRlcmFjdGl2ZSxcbiAgICBhcnJvdyxcbiAgICB0b3VjaCxcbiAgICBwbGFjZW1lbnRcbiAgfSA9IG93bmVyU3RhdGU7XG4gIGNvbnN0IHNsb3RzID0ge1xuICAgIHBvcHBlcjogWydwb3BwZXInLCAhZGlzYWJsZUludGVyYWN0aXZlICYmICdwb3BwZXJJbnRlcmFjdGl2ZScsIGFycm93ICYmICdwb3BwZXJBcnJvdyddLFxuICAgIHRvb2x0aXA6IFsndG9vbHRpcCcsIGFycm93ICYmICd0b29sdGlwQXJyb3cnLCB0b3VjaCAmJiAndG91Y2gnLCBgdG9vbHRpcFBsYWNlbWVudCR7Y2FwaXRhbGl6ZShwbGFjZW1lbnQuc3BsaXQoJy0nKVswXSl9YF0sXG4gICAgYXJyb3c6IFsnYXJyb3cnXVxuICB9O1xuICByZXR1cm4gY29tcG9zZUNsYXNzZXMoc2xvdHMsIGdldFRvb2x0aXBVdGlsaXR5Q2xhc3MsIGNsYXNzZXMpO1xufTtcbmNvbnN0IFRvb2x0aXBQb3BwZXIgPSBzdHlsZWQoUG9wcGVyLCB7XG4gIG5hbWU6ICdNdWlUb29sdGlwJyxcbiAgc2xvdDogJ1BvcHBlcicsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9ID0gcHJvcHM7XG4gICAgcmV0dXJuIFtzdHlsZXMucG9wcGVyLCAhb3duZXJTdGF0ZS5kaXNhYmxlSW50ZXJhY3RpdmUgJiYgc3R5bGVzLnBvcHBlckludGVyYWN0aXZlLCBvd25lclN0YXRlLmFycm93ICYmIHN0eWxlcy5wb3BwZXJBcnJvdywgIW93bmVyU3RhdGUub3BlbiAmJiBzdHlsZXMucG9wcGVyQ2xvc2VdO1xuICB9XG59KSgoe1xuICB0aGVtZSxcbiAgb3duZXJTdGF0ZSxcbiAgb3BlblxufSkgPT4gX2V4dGVuZHMoe1xuICB6SW5kZXg6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS56SW5kZXgudG9vbHRpcCxcbiAgcG9pbnRlckV2ZW50czogJ25vbmUnXG59LCAhb3duZXJTdGF0ZS5kaXNhYmxlSW50ZXJhY3RpdmUgJiYge1xuICBwb2ludGVyRXZlbnRzOiAnYXV0bydcbn0sICFvcGVuICYmIHtcbiAgcG9pbnRlckV2ZW50czogJ25vbmUnXG59LCBvd25lclN0YXRlLmFycm93ICYmIHtcbiAgW2AmW2RhdGEtcG9wcGVyLXBsYWNlbWVudCo9XCJib3R0b21cIl0gLiR7dG9vbHRpcENsYXNzZXMuYXJyb3d9YF06IHtcbiAgICB0b3A6IDAsXG4gICAgbWFyZ2luVG9wOiAnLTAuNzFlbScsXG4gICAgJyY6OmJlZm9yZSc6IHtcbiAgICAgIHRyYW5zZm9ybU9yaWdpbjogJzAgMTAwJSdcbiAgICB9XG4gIH0sXG4gIFtgJltkYXRhLXBvcHBlci1wbGFjZW1lbnQqPVwidG9wXCJdIC4ke3Rvb2x0aXBDbGFzc2VzLmFycm93fWBdOiB7XG4gICAgYm90dG9tOiAwLFxuICAgIG1hcmdpbkJvdHRvbTogJy0wLjcxZW0nLFxuICAgICcmOjpiZWZvcmUnOiB7XG4gICAgICB0cmFuc2Zvcm1PcmlnaW46ICcxMDAlIDAnXG4gICAgfVxuICB9LFxuICBbYCZbZGF0YS1wb3BwZXItcGxhY2VtZW50Kj1cInJpZ2h0XCJdIC4ke3Rvb2x0aXBDbGFzc2VzLmFycm93fWBdOiBfZXh0ZW5kcyh7fSwgIW93bmVyU3RhdGUuaXNSdGwgPyB7XG4gICAgbGVmdDogMCxcbiAgICBtYXJnaW5MZWZ0OiAnLTAuNzFlbSdcbiAgfSA6IHtcbiAgICByaWdodDogMCxcbiAgICBtYXJnaW5SaWdodDogJy0wLjcxZW0nXG4gIH0sIHtcbiAgICBoZWlnaHQ6ICcxZW0nLFxuICAgIHdpZHRoOiAnMC43MWVtJyxcbiAgICAnJjo6YmVmb3JlJzoge1xuICAgICAgdHJhbnNmb3JtT3JpZ2luOiAnMTAwJSAxMDAlJ1xuICAgIH1cbiAgfSksXG4gIFtgJltkYXRhLXBvcHBlci1wbGFjZW1lbnQqPVwibGVmdFwiXSAuJHt0b29sdGlwQ2xhc3Nlcy5hcnJvd31gXTogX2V4dGVuZHMoe30sICFvd25lclN0YXRlLmlzUnRsID8ge1xuICAgIHJpZ2h0OiAwLFxuICAgIG1hcmdpblJpZ2h0OiAnLTAuNzFlbSdcbiAgfSA6IHtcbiAgICBsZWZ0OiAwLFxuICAgIG1hcmdpbkxlZnQ6ICctMC43MWVtJ1xuICB9LCB7XG4gICAgaGVpZ2h0OiAnMWVtJyxcbiAgICB3aWR0aDogJzAuNzFlbScsXG4gICAgJyY6OmJlZm9yZSc6IHtcbiAgICAgIHRyYW5zZm9ybU9yaWdpbjogJzAgMCdcbiAgICB9XG4gIH0pXG59KSk7XG5jb25zdCBUb29sdGlwVG9vbHRpcCA9IHN0eWxlZCgnZGl2Jywge1xuICBuYW1lOiAnTXVpVG9vbHRpcCcsXG4gIHNsb3Q6ICdUb29sdGlwJyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgb3duZXJTdGF0ZVxuICAgIH0gPSBwcm9wcztcbiAgICByZXR1cm4gW3N0eWxlcy50b29sdGlwLCBvd25lclN0YXRlLnRvdWNoICYmIHN0eWxlcy50b3VjaCwgb3duZXJTdGF0ZS5hcnJvdyAmJiBzdHlsZXMudG9vbHRpcEFycm93LCBzdHlsZXNbYHRvb2x0aXBQbGFjZW1lbnQke2NhcGl0YWxpemUob3duZXJTdGF0ZS5wbGFjZW1lbnQuc3BsaXQoJy0nKVswXSl9YF1dO1xuICB9XG59KSgoe1xuICB0aGVtZSxcbiAgb3duZXJTdGF0ZVxufSkgPT4gX2V4dGVuZHMoe1xuICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnZhcnMgPyB0aGVtZS52YXJzLnBhbGV0dGUuVG9vbHRpcC5iZyA6IGFscGhhKHRoZW1lLnBhbGV0dGUuZ3JleVs3MDBdLCAwLjkyKSxcbiAgYm9yZGVyUmFkaXVzOiAodGhlbWUudmFycyB8fCB0aGVtZSkuc2hhcGUuYm9yZGVyUmFkaXVzLFxuICBjb2xvcjogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGUuY29tbW9uLndoaXRlLFxuICBmb250RmFtaWx5OiB0aGVtZS50eXBvZ3JhcGh5LmZvbnRGYW1pbHksXG4gIHBhZGRpbmc6ICc0cHggOHB4JyxcbiAgZm9udFNpemU6IHRoZW1lLnR5cG9ncmFwaHkucHhUb1JlbSgxMSksXG4gIG1heFdpZHRoOiAzMDAsXG4gIG1hcmdpbjogMixcbiAgd29yZFdyYXA6ICdicmVhay13b3JkJyxcbiAgZm9udFdlaWdodDogdGhlbWUudHlwb2dyYXBoeS5mb250V2VpZ2h0TWVkaXVtXG59LCBvd25lclN0YXRlLmFycm93ICYmIHtcbiAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gIG1hcmdpbjogMFxufSwgb3duZXJTdGF0ZS50b3VjaCAmJiB7XG4gIHBhZGRpbmc6ICc4cHggMTZweCcsXG4gIGZvbnRTaXplOiB0aGVtZS50eXBvZ3JhcGh5LnB4VG9SZW0oMTQpLFxuICBsaW5lSGVpZ2h0OiBgJHtyb3VuZCgxNiAvIDE0KX1lbWAsXG4gIGZvbnRXZWlnaHQ6IHRoZW1lLnR5cG9ncmFwaHkuZm9udFdlaWdodFJlZ3VsYXJcbn0sIHtcbiAgW2AuJHt0b29sdGlwQ2xhc3Nlcy5wb3BwZXJ9W2RhdGEtcG9wcGVyLXBsYWNlbWVudCo9XCJsZWZ0XCJdICZgXTogX2V4dGVuZHMoe1xuICAgIHRyYW5zZm9ybU9yaWdpbjogJ3JpZ2h0IGNlbnRlcidcbiAgfSwgIW93bmVyU3RhdGUuaXNSdGwgPyBfZXh0ZW5kcyh7XG4gICAgbWFyZ2luUmlnaHQ6ICcxNHB4J1xuICB9LCBvd25lclN0YXRlLnRvdWNoICYmIHtcbiAgICBtYXJnaW5SaWdodDogJzI0cHgnXG4gIH0pIDogX2V4dGVuZHMoe1xuICAgIG1hcmdpbkxlZnQ6ICcxNHB4J1xuICB9LCBvd25lclN0YXRlLnRvdWNoICYmIHtcbiAgICBtYXJnaW5MZWZ0OiAnMjRweCdcbiAgfSkpLFxuICBbYC4ke3Rvb2x0aXBDbGFzc2VzLnBvcHBlcn1bZGF0YS1wb3BwZXItcGxhY2VtZW50Kj1cInJpZ2h0XCJdICZgXTogX2V4dGVuZHMoe1xuICAgIHRyYW5zZm9ybU9yaWdpbjogJ2xlZnQgY2VudGVyJ1xuICB9LCAhb3duZXJTdGF0ZS5pc1J0bCA/IF9leHRlbmRzKHtcbiAgICBtYXJnaW5MZWZ0OiAnMTRweCdcbiAgfSwgb3duZXJTdGF0ZS50b3VjaCAmJiB7XG4gICAgbWFyZ2luTGVmdDogJzI0cHgnXG4gIH0pIDogX2V4dGVuZHMoe1xuICAgIG1hcmdpblJpZ2h0OiAnMTRweCdcbiAgfSwgb3duZXJTdGF0ZS50b3VjaCAmJiB7XG4gICAgbWFyZ2luUmlnaHQ6ICcyNHB4J1xuICB9KSksXG4gIFtgLiR7dG9vbHRpcENsYXNzZXMucG9wcGVyfVtkYXRhLXBvcHBlci1wbGFjZW1lbnQqPVwidG9wXCJdICZgXTogX2V4dGVuZHMoe1xuICAgIHRyYW5zZm9ybU9yaWdpbjogJ2NlbnRlciBib3R0b20nLFxuICAgIG1hcmdpbkJvdHRvbTogJzE0cHgnXG4gIH0sIG93bmVyU3RhdGUudG91Y2ggJiYge1xuICAgIG1hcmdpbkJvdHRvbTogJzI0cHgnXG4gIH0pLFxuICBbYC4ke3Rvb2x0aXBDbGFzc2VzLnBvcHBlcn1bZGF0YS1wb3BwZXItcGxhY2VtZW50Kj1cImJvdHRvbVwiXSAmYF06IF9leHRlbmRzKHtcbiAgICB0cmFuc2Zvcm1PcmlnaW46ICdjZW50ZXIgdG9wJyxcbiAgICBtYXJnaW5Ub3A6ICcxNHB4J1xuICB9LCBvd25lclN0YXRlLnRvdWNoICYmIHtcbiAgICBtYXJnaW5Ub3A6ICcyNHB4J1xuICB9KVxufSkpO1xuY29uc3QgVG9vbHRpcEFycm93ID0gc3R5bGVkKCdzcGFuJywge1xuICBuYW1lOiAnTXVpVG9vbHRpcCcsXG4gIHNsb3Q6ICdBcnJvdycsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4gc3R5bGVzLmFycm93XG59KSgoe1xuICB0aGVtZVxufSkgPT4gKHtcbiAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxuICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgd2lkdGg6ICcxZW0nLFxuICBoZWlnaHQ6ICcwLjcxZW0nIC8qID0gd2lkdGggLyBzcXJ0KDIpID0gKGxlbmd0aCBvZiB0aGUgaHlwb3RlbnVzZSkgKi8sXG4gIGJveFNpemluZzogJ2JvcmRlci1ib3gnLFxuICBjb2xvcjogdGhlbWUudmFycyA/IHRoZW1lLnZhcnMucGFsZXR0ZS5Ub29sdGlwLmJnIDogYWxwaGEodGhlbWUucGFsZXR0ZS5ncmV5WzcwMF0sIDAuOSksXG4gICcmOjpiZWZvcmUnOiB7XG4gICAgY29udGVudDogJ1wiXCInLFxuICAgIG1hcmdpbjogJ2F1dG8nLFxuICAgIGRpc3BsYXk6ICdibG9jaycsXG4gICAgd2lkdGg6ICcxMDAlJyxcbiAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICBiYWNrZ3JvdW5kQ29sb3I6ICdjdXJyZW50Q29sb3InLFxuICAgIHRyYW5zZm9ybTogJ3JvdGF0ZSg0NWRlZyknXG4gIH1cbn0pKTtcbmxldCBoeXN0ZXJzaXNPcGVuID0gZmFsc2U7XG5jb25zdCBoeXN0ZXJzaXNUaW1lciA9IG5ldyBUaW1lb3V0KCk7XG5sZXQgY3Vyc29yUG9zaXRpb24gPSB7XG4gIHg6IDAsXG4gIHk6IDBcbn07XG5leHBvcnQgZnVuY3Rpb24gdGVzdFJlc2V0KCkge1xuICBoeXN0ZXJzaXNPcGVuID0gZmFsc2U7XG4gIGh5c3RlcnNpc1RpbWVyLmNsZWFyKCk7XG59XG5mdW5jdGlvbiBjb21wb3NlRXZlbnRIYW5kbGVyKGhhbmRsZXIsIGV2ZW50SGFuZGxlcikge1xuICByZXR1cm4gKGV2ZW50LCAuLi5wYXJhbXMpID0+IHtcbiAgICBpZiAoZXZlbnRIYW5kbGVyKSB7XG4gICAgICBldmVudEhhbmRsZXIoZXZlbnQsIC4uLnBhcmFtcyk7XG4gICAgfVxuICAgIGhhbmRsZXIoZXZlbnQsIC4uLnBhcmFtcyk7XG4gIH07XG59XG5cbi8vIFRPRE8gdjY6IFJlbW92ZSBQb3BwZXJDb21wb25lbnQsIFBvcHBlclByb3BzLCBUcmFuc2l0aW9uQ29tcG9uZW50IGFuZCBUcmFuc2l0aW9uUHJvcHMuXG5jb25zdCBUb29sdGlwID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gVG9vbHRpcChpblByb3BzLCByZWYpIHtcbiAgdmFyIF9yZWYsIF9zbG90cyRwb3BwZXIsIF9yZWYyLCBfcmVmMywgX3Nsb3RzJHRyYW5zaXRpb24sIF9yZWY0LCBfc2xvdHMkdG9vbHRpcCwgX3JlZjUsIF9zbG90cyRhcnJvdywgX3Nsb3RQcm9wcyRwb3BwZXIsIF9yZWY2LCBfc2xvdFByb3BzJHBvcHBlcjIsIF9zbG90UHJvcHMkdHJhbnNpdGlvbiwgX3Nsb3RQcm9wcyR0b29sdGlwLCBfcmVmNywgX3Nsb3RQcm9wcyR0b29sdGlwMiwgX3Nsb3RQcm9wcyRhcnJvdywgX3JlZjgsIF9zbG90UHJvcHMkYXJyb3cyO1xuICBjb25zdCBwcm9wcyA9IHVzZURlZmF1bHRQcm9wcyh7XG4gICAgcHJvcHM6IGluUHJvcHMsXG4gICAgbmFtZTogJ011aVRvb2x0aXAnXG4gIH0pO1xuICBjb25zdCB7XG4gICAgICBhcnJvdyA9IGZhbHNlLFxuICAgICAgY2hpbGRyZW46IGNoaWxkcmVuUHJvcCxcbiAgICAgIGNvbXBvbmVudHMgPSB7fSxcbiAgICAgIGNvbXBvbmVudHNQcm9wcyA9IHt9LFxuICAgICAgZGVzY3JpYmVDaGlsZCA9IGZhbHNlLFxuICAgICAgZGlzYWJsZUZvY3VzTGlzdGVuZXIgPSBmYWxzZSxcbiAgICAgIGRpc2FibGVIb3Zlckxpc3RlbmVyID0gZmFsc2UsXG4gICAgICBkaXNhYmxlSW50ZXJhY3RpdmU6IGRpc2FibGVJbnRlcmFjdGl2ZVByb3AgPSBmYWxzZSxcbiAgICAgIGRpc2FibGVUb3VjaExpc3RlbmVyID0gZmFsc2UsXG4gICAgICBlbnRlckRlbGF5ID0gMTAwLFxuICAgICAgZW50ZXJOZXh0RGVsYXkgPSAwLFxuICAgICAgZW50ZXJUb3VjaERlbGF5ID0gNzAwLFxuICAgICAgZm9sbG93Q3Vyc29yID0gZmFsc2UsXG4gICAgICBpZDogaWRQcm9wLFxuICAgICAgbGVhdmVEZWxheSA9IDAsXG4gICAgICBsZWF2ZVRvdWNoRGVsYXkgPSAxNTAwLFxuICAgICAgb25DbG9zZSxcbiAgICAgIG9uT3BlbixcbiAgICAgIG9wZW46IG9wZW5Qcm9wLFxuICAgICAgcGxhY2VtZW50ID0gJ2JvdHRvbScsXG4gICAgICBQb3BwZXJDb21wb25lbnQ6IFBvcHBlckNvbXBvbmVudFByb3AsXG4gICAgICBQb3BwZXJQcm9wcyA9IHt9LFxuICAgICAgc2xvdFByb3BzID0ge30sXG4gICAgICBzbG90cyA9IHt9LFxuICAgICAgdGl0bGUsXG4gICAgICBUcmFuc2l0aW9uQ29tcG9uZW50OiBUcmFuc2l0aW9uQ29tcG9uZW50UHJvcCA9IEdyb3csXG4gICAgICBUcmFuc2l0aW9uUHJvcHNcbiAgICB9ID0gcHJvcHMsXG4gICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkKTtcblxuICAvLyB0byBwcmV2ZW50IHJ1bnRpbWUgZXJyb3JzLCBkZXZlbG9wZXJzIHdpbGwgbmVlZCB0byBwcm92aWRlIGEgY2hpbGQgYXMgYSBSZWFjdCBlbGVtZW50IGFueXdheS5cbiAgY29uc3QgY2hpbGRyZW4gPSAvKiNfX1BVUkVfXyovUmVhY3QuaXNWYWxpZEVsZW1lbnQoY2hpbGRyZW5Qcm9wKSA/IGNoaWxkcmVuUHJvcCA6IC8qI19fUFVSRV9fKi9fanN4KFwic3BhblwiLCB7XG4gICAgY2hpbGRyZW46IGNoaWxkcmVuUHJvcFxuICB9KTtcbiAgY29uc3QgdGhlbWUgPSB1c2VUaGVtZSgpO1xuICBjb25zdCBpc1J0bCA9IHVzZVJ0bCgpO1xuICBjb25zdCBbY2hpbGROb2RlLCBzZXRDaGlsZE5vZGVdID0gUmVhY3QudXNlU3RhdGUoKTtcbiAgY29uc3QgW2Fycm93UmVmLCBzZXRBcnJvd1JlZl0gPSBSZWFjdC51c2VTdGF0ZShudWxsKTtcbiAgY29uc3QgaWdub3JlTm9uVG91Y2hFdmVudHMgPSBSZWFjdC51c2VSZWYoZmFsc2UpO1xuICBjb25zdCBkaXNhYmxlSW50ZXJhY3RpdmUgPSBkaXNhYmxlSW50ZXJhY3RpdmVQcm9wIHx8IGZvbGxvd0N1cnNvcjtcbiAgY29uc3QgY2xvc2VUaW1lciA9IHVzZVRpbWVvdXQoKTtcbiAgY29uc3QgZW50ZXJUaW1lciA9IHVzZVRpbWVvdXQoKTtcbiAgY29uc3QgbGVhdmVUaW1lciA9IHVzZVRpbWVvdXQoKTtcbiAgY29uc3QgdG91Y2hUaW1lciA9IHVzZVRpbWVvdXQoKTtcbiAgY29uc3QgW29wZW5TdGF0ZSwgc2V0T3BlblN0YXRlXSA9IHVzZUNvbnRyb2xsZWQoe1xuICAgIGNvbnRyb2xsZWQ6IG9wZW5Qcm9wLFxuICAgIGRlZmF1bHQ6IGZhbHNlLFxuICAgIG5hbWU6ICdUb29sdGlwJyxcbiAgICBzdGF0ZTogJ29wZW4nXG4gIH0pO1xuICBsZXQgb3BlbiA9IG9wZW5TdGF0ZTtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvcnVsZXMtb2YtaG9va3NcbiAgICBjb25zdCB7XG4gICAgICBjdXJyZW50OiBpc0NvbnRyb2xsZWRcbiAgICB9ID0gUmVhY3QudXNlUmVmKG9wZW5Qcm9wICE9PSB1bmRlZmluZWQpO1xuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL3J1bGVzLW9mLWhvb2tzXG4gICAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICAgIGlmIChjaGlsZE5vZGUgJiYgY2hpbGROb2RlLmRpc2FibGVkICYmICFpc0NvbnRyb2xsZWQgJiYgdGl0bGUgIT09ICcnICYmIGNoaWxkTm9kZS50YWdOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICdidXR0b24nKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoWydNVUk6IFlvdSBhcmUgcHJvdmlkaW5nIGEgZGlzYWJsZWQgYGJ1dHRvbmAgY2hpbGQgdG8gdGhlIFRvb2x0aXAgY29tcG9uZW50LicsICdBIGRpc2FibGVkIGVsZW1lbnQgZG9lcyBub3QgZmlyZSBldmVudHMuJywgXCJUb29sdGlwIG5lZWRzIHRvIGxpc3RlbiB0byB0aGUgY2hpbGQgZWxlbWVudCdzIGV2ZW50cyB0byBkaXNwbGF5IHRoZSB0aXRsZS5cIiwgJycsICdBZGQgYSBzaW1wbGUgd3JhcHBlciBlbGVtZW50LCBzdWNoIGFzIGEgYHNwYW5gLiddLmpvaW4oJ1xcbicpKTtcbiAgICAgIH1cbiAgICB9LCBbdGl0bGUsIGNoaWxkTm9kZSwgaXNDb250cm9sbGVkXSk7XG4gIH1cbiAgY29uc3QgaWQgPSB1c2VJZChpZFByb3ApO1xuICBjb25zdCBwcmV2VXNlclNlbGVjdCA9IFJlYWN0LnVzZVJlZigpO1xuICBjb25zdCBzdG9wVG91Y2hJbnRlcmFjdGlvbiA9IHVzZUV2ZW50Q2FsbGJhY2soKCkgPT4ge1xuICAgIGlmIChwcmV2VXNlclNlbGVjdC5jdXJyZW50ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGRvY3VtZW50LmJvZHkuc3R5bGUuV2Via2l0VXNlclNlbGVjdCA9IHByZXZVc2VyU2VsZWN0LmN1cnJlbnQ7XG4gICAgICBwcmV2VXNlclNlbGVjdC5jdXJyZW50ID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICB0b3VjaFRpbWVyLmNsZWFyKCk7XG4gIH0pO1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4gc3RvcFRvdWNoSW50ZXJhY3Rpb24sIFtzdG9wVG91Y2hJbnRlcmFjdGlvbl0pO1xuICBjb25zdCBoYW5kbGVPcGVuID0gZXZlbnQgPT4ge1xuICAgIGh5c3RlcnNpc1RpbWVyLmNsZWFyKCk7XG4gICAgaHlzdGVyc2lzT3BlbiA9IHRydWU7XG5cbiAgICAvLyBUaGUgbW91c2VvdmVyIGV2ZW50IHdpbGwgdHJpZ2dlciBmb3IgZXZlcnkgbmVzdGVkIGVsZW1lbnQgaW4gdGhlIHRvb2x0aXAuXG4gICAgLy8gV2UgY2FuIHNraXAgcmVyZW5kZXJpbmcgd2hlbiB0aGUgdG9vbHRpcCBpcyBhbHJlYWR5IG9wZW4uXG4gICAgLy8gV2UgYXJlIHVzaW5nIHRoZSBtb3VzZW92ZXIgZXZlbnQgaW5zdGVhZCBvZiB0aGUgbW91c2VlbnRlciBldmVudCB0byBmaXggYSBoaWRlL3Nob3cgaXNzdWUuXG4gICAgc2V0T3BlblN0YXRlKHRydWUpO1xuICAgIGlmIChvbk9wZW4gJiYgIW9wZW4pIHtcbiAgICAgIG9uT3BlbihldmVudCk7XG4gICAgfVxuICB9O1xuICBjb25zdCBoYW5kbGVDbG9zZSA9IHVzZUV2ZW50Q2FsbGJhY2soXG4gIC8qKlxuICAgKiBAcGFyYW0ge1JlYWN0LlN5bnRoZXRpY0V2ZW50IHwgRXZlbnR9IGV2ZW50XG4gICAqL1xuICBldmVudCA9PiB7XG4gICAgaHlzdGVyc2lzVGltZXIuc3RhcnQoODAwICsgbGVhdmVEZWxheSwgKCkgPT4ge1xuICAgICAgaHlzdGVyc2lzT3BlbiA9IGZhbHNlO1xuICAgIH0pO1xuICAgIHNldE9wZW5TdGF0ZShmYWxzZSk7XG4gICAgaWYgKG9uQ2xvc2UgJiYgb3Blbikge1xuICAgICAgb25DbG9zZShldmVudCk7XG4gICAgfVxuICAgIGNsb3NlVGltZXIuc3RhcnQodGhlbWUudHJhbnNpdGlvbnMuZHVyYXRpb24uc2hvcnRlc3QsICgpID0+IHtcbiAgICAgIGlnbm9yZU5vblRvdWNoRXZlbnRzLmN1cnJlbnQgPSBmYWxzZTtcbiAgICB9KTtcbiAgfSk7XG4gIGNvbnN0IGhhbmRsZU1vdXNlT3ZlciA9IGV2ZW50ID0+IHtcbiAgICBpZiAoaWdub3JlTm9uVG91Y2hFdmVudHMuY3VycmVudCAmJiBldmVudC50eXBlICE9PSAndG91Y2hzdGFydCcpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBSZW1vdmUgdGhlIHRpdGxlIGFoZWFkIG9mIHRpbWUuXG4gICAgLy8gV2UgZG9uJ3Qgd2FudCB0byB3YWl0IGZvciB0aGUgbmV4dCByZW5kZXIgY29tbWl0LlxuICAgIC8vIFdlIHdvdWxkIHJpc2sgZGlzcGxheWluZyB0d28gdG9vbHRpcHMgYXQgdGhlIHNhbWUgdGltZSAobmF0aXZlICsgdGhpcyBvbmUpLlxuICAgIGlmIChjaGlsZE5vZGUpIHtcbiAgICAgIGNoaWxkTm9kZS5yZW1vdmVBdHRyaWJ1dGUoJ3RpdGxlJyk7XG4gICAgfVxuICAgIGVudGVyVGltZXIuY2xlYXIoKTtcbiAgICBsZWF2ZVRpbWVyLmNsZWFyKCk7XG4gICAgaWYgKGVudGVyRGVsYXkgfHwgaHlzdGVyc2lzT3BlbiAmJiBlbnRlck5leHREZWxheSkge1xuICAgICAgZW50ZXJUaW1lci5zdGFydChoeXN0ZXJzaXNPcGVuID8gZW50ZXJOZXh0RGVsYXkgOiBlbnRlckRlbGF5LCAoKSA9PiB7XG4gICAgICAgIGhhbmRsZU9wZW4oZXZlbnQpO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGhhbmRsZU9wZW4oZXZlbnQpO1xuICAgIH1cbiAgfTtcbiAgY29uc3QgaGFuZGxlTW91c2VMZWF2ZSA9IGV2ZW50ID0+IHtcbiAgICBlbnRlclRpbWVyLmNsZWFyKCk7XG4gICAgbGVhdmVUaW1lci5zdGFydChsZWF2ZURlbGF5LCAoKSA9PiB7XG4gICAgICBoYW5kbGVDbG9zZShldmVudCk7XG4gICAgfSk7XG4gIH07XG4gIGNvbnN0IHtcbiAgICBpc0ZvY3VzVmlzaWJsZVJlZixcbiAgICBvbkJsdXI6IGhhbmRsZUJsdXJWaXNpYmxlLFxuICAgIG9uRm9jdXM6IGhhbmRsZUZvY3VzVmlzaWJsZSxcbiAgICByZWY6IGZvY3VzVmlzaWJsZVJlZlxuICB9ID0gdXNlSXNGb2N1c1Zpc2libGUoKTtcbiAgLy8gV2UgZG9uJ3QgbmVjZXNzYXJpbHkgY2FyZSBhYm91dCB0aGUgZm9jdXNWaXNpYmxlIHN0YXRlICh3aGljaCBpcyBzYWZlIHRvIGFjY2VzcyB2aWEgcmVmIGFueXdheSkuXG4gIC8vIFdlIGp1c3QgbmVlZCB0byByZS1yZW5kZXIgdGhlIFRvb2x0aXAgaWYgdGhlIGZvY3VzLXZpc2libGUgc3RhdGUgY2hhbmdlcy5cbiAgY29uc3QgWywgc2V0Q2hpbGRJc0ZvY3VzVmlzaWJsZV0gPSBSZWFjdC51c2VTdGF0ZShmYWxzZSk7XG4gIGNvbnN0IGhhbmRsZUJsdXIgPSBldmVudCA9PiB7XG4gICAgaGFuZGxlQmx1clZpc2libGUoZXZlbnQpO1xuICAgIGlmIChpc0ZvY3VzVmlzaWJsZVJlZi5jdXJyZW50ID09PSBmYWxzZSkge1xuICAgICAgc2V0Q2hpbGRJc0ZvY3VzVmlzaWJsZShmYWxzZSk7XG4gICAgICBoYW5kbGVNb3VzZUxlYXZlKGV2ZW50KTtcbiAgICB9XG4gIH07XG4gIGNvbnN0IGhhbmRsZUZvY3VzID0gZXZlbnQgPT4ge1xuICAgIC8vIFdvcmthcm91bmQgZm9yIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9pc3N1ZXMvNzc2OVxuICAgIC8vIFRoZSBhdXRvRm9jdXMgb2YgUmVhY3QgbWlnaHQgdHJpZ2dlciB0aGUgZXZlbnQgYmVmb3JlIHRoZSBjb21wb25lbnREaWRNb3VudC5cbiAgICAvLyBXZSBuZWVkIHRvIGFjY291bnQgZm9yIHRoaXMgZXZlbnR1YWxpdHkuXG4gICAgaWYgKCFjaGlsZE5vZGUpIHtcbiAgICAgIHNldENoaWxkTm9kZShldmVudC5jdXJyZW50VGFyZ2V0KTtcbiAgICB9XG4gICAgaGFuZGxlRm9jdXNWaXNpYmxlKGV2ZW50KTtcbiAgICBpZiAoaXNGb2N1c1Zpc2libGVSZWYuY3VycmVudCA9PT0gdHJ1ZSkge1xuICAgICAgc2V0Q2hpbGRJc0ZvY3VzVmlzaWJsZSh0cnVlKTtcbiAgICAgIGhhbmRsZU1vdXNlT3ZlcihldmVudCk7XG4gICAgfVxuICB9O1xuICBjb25zdCBkZXRlY3RUb3VjaFN0YXJ0ID0gZXZlbnQgPT4ge1xuICAgIGlnbm9yZU5vblRvdWNoRXZlbnRzLmN1cnJlbnQgPSB0cnVlO1xuICAgIGNvbnN0IGNoaWxkcmVuUHJvcHMgPSBjaGlsZHJlbi5wcm9wcztcbiAgICBpZiAoY2hpbGRyZW5Qcm9wcy5vblRvdWNoU3RhcnQpIHtcbiAgICAgIGNoaWxkcmVuUHJvcHMub25Ub3VjaFN0YXJ0KGV2ZW50KTtcbiAgICB9XG4gIH07XG4gIGNvbnN0IGhhbmRsZVRvdWNoU3RhcnQgPSBldmVudCA9PiB7XG4gICAgZGV0ZWN0VG91Y2hTdGFydChldmVudCk7XG4gICAgbGVhdmVUaW1lci5jbGVhcigpO1xuICAgIGNsb3NlVGltZXIuY2xlYXIoKTtcbiAgICBzdG9wVG91Y2hJbnRlcmFjdGlvbigpO1xuICAgIHByZXZVc2VyU2VsZWN0LmN1cnJlbnQgPSBkb2N1bWVudC5ib2R5LnN0eWxlLldlYmtpdFVzZXJTZWxlY3Q7XG4gICAgLy8gUHJldmVudCBpT1MgdGV4dCBzZWxlY3Rpb24gb24gbG9uZy10YXAuXG4gICAgZG9jdW1lbnQuYm9keS5zdHlsZS5XZWJraXRVc2VyU2VsZWN0ID0gJ25vbmUnO1xuICAgIHRvdWNoVGltZXIuc3RhcnQoZW50ZXJUb3VjaERlbGF5LCAoKSA9PiB7XG4gICAgICBkb2N1bWVudC5ib2R5LnN0eWxlLldlYmtpdFVzZXJTZWxlY3QgPSBwcmV2VXNlclNlbGVjdC5jdXJyZW50O1xuICAgICAgaGFuZGxlTW91c2VPdmVyKGV2ZW50KTtcbiAgICB9KTtcbiAgfTtcbiAgY29uc3QgaGFuZGxlVG91Y2hFbmQgPSBldmVudCA9PiB7XG4gICAgaWYgKGNoaWxkcmVuLnByb3BzLm9uVG91Y2hFbmQpIHtcbiAgICAgIGNoaWxkcmVuLnByb3BzLm9uVG91Y2hFbmQoZXZlbnQpO1xuICAgIH1cbiAgICBzdG9wVG91Y2hJbnRlcmFjdGlvbigpO1xuICAgIGxlYXZlVGltZXIuc3RhcnQobGVhdmVUb3VjaERlbGF5LCAoKSA9PiB7XG4gICAgICBoYW5kbGVDbG9zZShldmVudCk7XG4gICAgfSk7XG4gIH07XG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKCFvcGVuKSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7S2V5Ym9hcmRFdmVudH0gbmF0aXZlRXZlbnRcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBoYW5kbGVLZXlEb3duKG5hdGl2ZUV2ZW50KSB7XG4gICAgICAvLyBJRTExLCBFZGdlIChwcmlvciB0byB1c2luZyBCaW5rPykgdXNlICdFc2MnXG4gICAgICBpZiAobmF0aXZlRXZlbnQua2V5ID09PSAnRXNjYXBlJyB8fCBuYXRpdmVFdmVudC5rZXkgPT09ICdFc2MnKSB7XG4gICAgICAgIGhhbmRsZUNsb3NlKG5hdGl2ZUV2ZW50KTtcbiAgICAgIH1cbiAgICB9XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIGhhbmRsZUtleURvd24pO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXlkb3duJywgaGFuZGxlS2V5RG93bik7XG4gICAgfTtcbiAgfSwgW2hhbmRsZUNsb3NlLCBvcGVuXSk7XG4gIGNvbnN0IGhhbmRsZVJlZiA9IHVzZUZvcmtSZWYoY2hpbGRyZW4ucmVmLCBmb2N1c1Zpc2libGVSZWYsIHNldENoaWxkTm9kZSwgcmVmKTtcblxuICAvLyBUaGVyZSBpcyBubyBwb2ludCBpbiBkaXNwbGF5aW5nIGFuIGVtcHR5IHRvb2x0aXAuXG4gIC8vIFNvIHdlIGV4Y2x1ZGUgYWxsIGZhbHN5IHZhbHVlcywgZXhjZXB0IDAsIHdoaWNoIGlzIHZhbGlkLlxuICBpZiAoIXRpdGxlICYmIHRpdGxlICE9PSAwKSB7XG4gICAgb3BlbiA9IGZhbHNlO1xuICB9XG4gIGNvbnN0IHBvcHBlclJlZiA9IFJlYWN0LnVzZVJlZigpO1xuICBjb25zdCBoYW5kbGVNb3VzZU1vdmUgPSBldmVudCA9PiB7XG4gICAgY29uc3QgY2hpbGRyZW5Qcm9wcyA9IGNoaWxkcmVuLnByb3BzO1xuICAgIGlmIChjaGlsZHJlblByb3BzLm9uTW91c2VNb3ZlKSB7XG4gICAgICBjaGlsZHJlblByb3BzLm9uTW91c2VNb3ZlKGV2ZW50KTtcbiAgICB9XG4gICAgY3Vyc29yUG9zaXRpb24gPSB7XG4gICAgICB4OiBldmVudC5jbGllbnRYLFxuICAgICAgeTogZXZlbnQuY2xpZW50WVxuICAgIH07XG4gICAgaWYgKHBvcHBlclJlZi5jdXJyZW50KSB7XG4gICAgICBwb3BwZXJSZWYuY3VycmVudC51cGRhdGUoKTtcbiAgICB9XG4gIH07XG4gIGNvbnN0IG5hbWVPckRlc2NQcm9wcyA9IHt9O1xuICBjb25zdCB0aXRsZUlzU3RyaW5nID0gdHlwZW9mIHRpdGxlID09PSAnc3RyaW5nJztcbiAgaWYgKGRlc2NyaWJlQ2hpbGQpIHtcbiAgICBuYW1lT3JEZXNjUHJvcHMudGl0bGUgPSAhb3BlbiAmJiB0aXRsZUlzU3RyaW5nICYmICFkaXNhYmxlSG92ZXJMaXN0ZW5lciA/IHRpdGxlIDogbnVsbDtcbiAgICBuYW1lT3JEZXNjUHJvcHNbJ2FyaWEtZGVzY3JpYmVkYnknXSA9IG9wZW4gPyBpZCA6IG51bGw7XG4gIH0gZWxzZSB7XG4gICAgbmFtZU9yRGVzY1Byb3BzWydhcmlhLWxhYmVsJ10gPSB0aXRsZUlzU3RyaW5nID8gdGl0bGUgOiBudWxsO1xuICAgIG5hbWVPckRlc2NQcm9wc1snYXJpYS1sYWJlbGxlZGJ5J10gPSBvcGVuICYmICF0aXRsZUlzU3RyaW5nID8gaWQgOiBudWxsO1xuICB9XG4gIGNvbnN0IGNoaWxkcmVuUHJvcHMgPSBfZXh0ZW5kcyh7fSwgbmFtZU9yRGVzY1Byb3BzLCBvdGhlciwgY2hpbGRyZW4ucHJvcHMsIHtcbiAgICBjbGFzc05hbWU6IGNsc3gob3RoZXIuY2xhc3NOYW1lLCBjaGlsZHJlbi5wcm9wcy5jbGFzc05hbWUpLFxuICAgIG9uVG91Y2hTdGFydDogZGV0ZWN0VG91Y2hTdGFydCxcbiAgICByZWY6IGhhbmRsZVJlZlxuICB9LCBmb2xsb3dDdXJzb3IgPyB7XG4gICAgb25Nb3VzZU1vdmU6IGhhbmRsZU1vdXNlTW92ZVxuICB9IDoge30pO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGNoaWxkcmVuUHJvcHNbJ2RhdGEtbXVpLWludGVybmFsLWNsb25lLWVsZW1lbnQnXSA9IHRydWU7XG5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvcnVsZXMtb2YtaG9va3NcbiAgICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgaWYgKGNoaWxkTm9kZSAmJiAhY2hpbGROb2RlLmdldEF0dHJpYnV0ZSgnZGF0YS1tdWktaW50ZXJuYWwtY2xvbmUtZWxlbWVudCcpKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoWydNVUk6IFRoZSBgY2hpbGRyZW5gIGNvbXBvbmVudCBvZiB0aGUgVG9vbHRpcCBpcyBub3QgZm9yd2FyZGluZyBpdHMgcHJvcHMgY29ycmVjdGx5LicsICdQbGVhc2UgbWFrZSBzdXJlIHRoYXQgcHJvcHMgYXJlIHNwcmVhZCBvbiB0aGUgc2FtZSBlbGVtZW50IHRoYXQgdGhlIHJlZiBpcyBhcHBsaWVkIHRvLiddLmpvaW4oJ1xcbicpKTtcbiAgICAgIH1cbiAgICB9LCBbY2hpbGROb2RlXSk7XG4gIH1cbiAgY29uc3QgaW50ZXJhY3RpdmVXcmFwcGVyTGlzdGVuZXJzID0ge307XG4gIGlmICghZGlzYWJsZVRvdWNoTGlzdGVuZXIpIHtcbiAgICBjaGlsZHJlblByb3BzLm9uVG91Y2hTdGFydCA9IGhhbmRsZVRvdWNoU3RhcnQ7XG4gICAgY2hpbGRyZW5Qcm9wcy5vblRvdWNoRW5kID0gaGFuZGxlVG91Y2hFbmQ7XG4gIH1cbiAgaWYgKCFkaXNhYmxlSG92ZXJMaXN0ZW5lcikge1xuICAgIGNoaWxkcmVuUHJvcHMub25Nb3VzZU92ZXIgPSBjb21wb3NlRXZlbnRIYW5kbGVyKGhhbmRsZU1vdXNlT3ZlciwgY2hpbGRyZW5Qcm9wcy5vbk1vdXNlT3Zlcik7XG4gICAgY2hpbGRyZW5Qcm9wcy5vbk1vdXNlTGVhdmUgPSBjb21wb3NlRXZlbnRIYW5kbGVyKGhhbmRsZU1vdXNlTGVhdmUsIGNoaWxkcmVuUHJvcHMub25Nb3VzZUxlYXZlKTtcbiAgICBpZiAoIWRpc2FibGVJbnRlcmFjdGl2ZSkge1xuICAgICAgaW50ZXJhY3RpdmVXcmFwcGVyTGlzdGVuZXJzLm9uTW91c2VPdmVyID0gaGFuZGxlTW91c2VPdmVyO1xuICAgICAgaW50ZXJhY3RpdmVXcmFwcGVyTGlzdGVuZXJzLm9uTW91c2VMZWF2ZSA9IGhhbmRsZU1vdXNlTGVhdmU7XG4gICAgfVxuICB9XG4gIGlmICghZGlzYWJsZUZvY3VzTGlzdGVuZXIpIHtcbiAgICBjaGlsZHJlblByb3BzLm9uRm9jdXMgPSBjb21wb3NlRXZlbnRIYW5kbGVyKGhhbmRsZUZvY3VzLCBjaGlsZHJlblByb3BzLm9uRm9jdXMpO1xuICAgIGNoaWxkcmVuUHJvcHMub25CbHVyID0gY29tcG9zZUV2ZW50SGFuZGxlcihoYW5kbGVCbHVyLCBjaGlsZHJlblByb3BzLm9uQmx1cik7XG4gICAgaWYgKCFkaXNhYmxlSW50ZXJhY3RpdmUpIHtcbiAgICAgIGludGVyYWN0aXZlV3JhcHBlckxpc3RlbmVycy5vbkZvY3VzID0gaGFuZGxlRm9jdXM7XG4gICAgICBpbnRlcmFjdGl2ZVdyYXBwZXJMaXN0ZW5lcnMub25CbHVyID0gaGFuZGxlQmx1cjtcbiAgICB9XG4gIH1cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpZiAoY2hpbGRyZW4ucHJvcHMudGl0bGUpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoWydNVUk6IFlvdSBoYXZlIHByb3ZpZGVkIGEgYHRpdGxlYCBwcm9wIHRvIHRoZSBjaGlsZCBvZiA8VG9vbHRpcCAvPi4nLCBgUmVtb3ZlIHRoaXMgdGl0bGUgcHJvcCBcXGAke2NoaWxkcmVuLnByb3BzLnRpdGxlfVxcYCBvciB0aGUgVG9vbHRpcCBjb21wb25lbnQuYF0uam9pbignXFxuJykpO1xuICAgIH1cbiAgfVxuICBjb25zdCBwb3BwZXJPcHRpb25zID0gUmVhY3QudXNlTWVtbygoKSA9PiB7XG4gICAgdmFyIF9Qb3BwZXJQcm9wcyRwb3BwZXJPcDtcbiAgICBsZXQgdG9vbHRpcE1vZGlmaWVycyA9IFt7XG4gICAgICBuYW1lOiAnYXJyb3cnLFxuICAgICAgZW5hYmxlZDogQm9vbGVhbihhcnJvd1JlZiksXG4gICAgICBvcHRpb25zOiB7XG4gICAgICAgIGVsZW1lbnQ6IGFycm93UmVmLFxuICAgICAgICBwYWRkaW5nOiA0XG4gICAgICB9XG4gICAgfV07XG4gICAgaWYgKChfUG9wcGVyUHJvcHMkcG9wcGVyT3AgPSBQb3BwZXJQcm9wcy5wb3BwZXJPcHRpb25zKSAhPSBudWxsICYmIF9Qb3BwZXJQcm9wcyRwb3BwZXJPcC5tb2RpZmllcnMpIHtcbiAgICAgIHRvb2x0aXBNb2RpZmllcnMgPSB0b29sdGlwTW9kaWZpZXJzLmNvbmNhdChQb3BwZXJQcm9wcy5wb3BwZXJPcHRpb25zLm1vZGlmaWVycyk7XG4gICAgfVxuICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgUG9wcGVyUHJvcHMucG9wcGVyT3B0aW9ucywge1xuICAgICAgbW9kaWZpZXJzOiB0b29sdGlwTW9kaWZpZXJzXG4gICAgfSk7XG4gIH0sIFthcnJvd1JlZiwgUG9wcGVyUHJvcHNdKTtcbiAgY29uc3Qgb3duZXJTdGF0ZSA9IF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgIGlzUnRsLFxuICAgIGFycm93LFxuICAgIGRpc2FibGVJbnRlcmFjdGl2ZSxcbiAgICBwbGFjZW1lbnQsXG4gICAgUG9wcGVyQ29tcG9uZW50UHJvcCxcbiAgICB0b3VjaDogaWdub3JlTm9uVG91Y2hFdmVudHMuY3VycmVudFxuICB9KTtcbiAgY29uc3QgY2xhc3NlcyA9IHVzZVV0aWxpdHlDbGFzc2VzKG93bmVyU3RhdGUpO1xuICBjb25zdCBQb3BwZXJDb21wb25lbnQgPSAoX3JlZiA9IChfc2xvdHMkcG9wcGVyID0gc2xvdHMucG9wcGVyKSAhPSBudWxsID8gX3Nsb3RzJHBvcHBlciA6IGNvbXBvbmVudHMuUG9wcGVyKSAhPSBudWxsID8gX3JlZiA6IFRvb2x0aXBQb3BwZXI7XG4gIGNvbnN0IFRyYW5zaXRpb25Db21wb25lbnQgPSAoX3JlZjIgPSAoX3JlZjMgPSAoX3Nsb3RzJHRyYW5zaXRpb24gPSBzbG90cy50cmFuc2l0aW9uKSAhPSBudWxsID8gX3Nsb3RzJHRyYW5zaXRpb24gOiBjb21wb25lbnRzLlRyYW5zaXRpb24pICE9IG51bGwgPyBfcmVmMyA6IFRyYW5zaXRpb25Db21wb25lbnRQcm9wKSAhPSBudWxsID8gX3JlZjIgOiBHcm93O1xuICBjb25zdCBUb29sdGlwQ29tcG9uZW50ID0gKF9yZWY0ID0gKF9zbG90cyR0b29sdGlwID0gc2xvdHMudG9vbHRpcCkgIT0gbnVsbCA/IF9zbG90cyR0b29sdGlwIDogY29tcG9uZW50cy5Ub29sdGlwKSAhPSBudWxsID8gX3JlZjQgOiBUb29sdGlwVG9vbHRpcDtcbiAgY29uc3QgQXJyb3dDb21wb25lbnQgPSAoX3JlZjUgPSAoX3Nsb3RzJGFycm93ID0gc2xvdHMuYXJyb3cpICE9IG51bGwgPyBfc2xvdHMkYXJyb3cgOiBjb21wb25lbnRzLkFycm93KSAhPSBudWxsID8gX3JlZjUgOiBUb29sdGlwQXJyb3c7XG4gIGNvbnN0IHBvcHBlclByb3BzID0gYXBwZW5kT3duZXJTdGF0ZShQb3BwZXJDb21wb25lbnQsIF9leHRlbmRzKHt9LCBQb3BwZXJQcm9wcywgKF9zbG90UHJvcHMkcG9wcGVyID0gc2xvdFByb3BzLnBvcHBlcikgIT0gbnVsbCA/IF9zbG90UHJvcHMkcG9wcGVyIDogY29tcG9uZW50c1Byb3BzLnBvcHBlciwge1xuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnBvcHBlciwgUG9wcGVyUHJvcHMgPT0gbnVsbCA/IHZvaWQgMCA6IFBvcHBlclByb3BzLmNsYXNzTmFtZSwgKF9yZWY2ID0gKF9zbG90UHJvcHMkcG9wcGVyMiA9IHNsb3RQcm9wcy5wb3BwZXIpICE9IG51bGwgPyBfc2xvdFByb3BzJHBvcHBlcjIgOiBjb21wb25lbnRzUHJvcHMucG9wcGVyKSA9PSBudWxsID8gdm9pZCAwIDogX3JlZjYuY2xhc3NOYW1lKVxuICB9KSwgb3duZXJTdGF0ZSk7XG4gIGNvbnN0IHRyYW5zaXRpb25Qcm9wcyA9IGFwcGVuZE93bmVyU3RhdGUoVHJhbnNpdGlvbkNvbXBvbmVudCwgX2V4dGVuZHMoe30sIFRyYW5zaXRpb25Qcm9wcywgKF9zbG90UHJvcHMkdHJhbnNpdGlvbiA9IHNsb3RQcm9wcy50cmFuc2l0aW9uKSAhPSBudWxsID8gX3Nsb3RQcm9wcyR0cmFuc2l0aW9uIDogY29tcG9uZW50c1Byb3BzLnRyYW5zaXRpb24pLCBvd25lclN0YXRlKTtcbiAgY29uc3QgdG9vbHRpcFByb3BzID0gYXBwZW5kT3duZXJTdGF0ZShUb29sdGlwQ29tcG9uZW50LCBfZXh0ZW5kcyh7fSwgKF9zbG90UHJvcHMkdG9vbHRpcCA9IHNsb3RQcm9wcy50b29sdGlwKSAhPSBudWxsID8gX3Nsb3RQcm9wcyR0b29sdGlwIDogY29tcG9uZW50c1Byb3BzLnRvb2x0aXAsIHtcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy50b29sdGlwLCAoX3JlZjcgPSAoX3Nsb3RQcm9wcyR0b29sdGlwMiA9IHNsb3RQcm9wcy50b29sdGlwKSAhPSBudWxsID8gX3Nsb3RQcm9wcyR0b29sdGlwMiA6IGNvbXBvbmVudHNQcm9wcy50b29sdGlwKSA9PSBudWxsID8gdm9pZCAwIDogX3JlZjcuY2xhc3NOYW1lKVxuICB9KSwgb3duZXJTdGF0ZSk7XG4gIGNvbnN0IHRvb2x0aXBBcnJvd1Byb3BzID0gYXBwZW5kT3duZXJTdGF0ZShBcnJvd0NvbXBvbmVudCwgX2V4dGVuZHMoe30sIChfc2xvdFByb3BzJGFycm93ID0gc2xvdFByb3BzLmFycm93KSAhPSBudWxsID8gX3Nsb3RQcm9wcyRhcnJvdyA6IGNvbXBvbmVudHNQcm9wcy5hcnJvdywge1xuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLmFycm93LCAoX3JlZjggPSAoX3Nsb3RQcm9wcyRhcnJvdzIgPSBzbG90UHJvcHMuYXJyb3cpICE9IG51bGwgPyBfc2xvdFByb3BzJGFycm93MiA6IGNvbXBvbmVudHNQcm9wcy5hcnJvdykgPT0gbnVsbCA/IHZvaWQgMCA6IF9yZWY4LmNsYXNzTmFtZSlcbiAgfSksIG93bmVyU3RhdGUpO1xuICByZXR1cm4gLyojX19QVVJFX18qL19qc3hzKFJlYWN0LkZyYWdtZW50LCB7XG4gICAgY2hpbGRyZW46IFsvKiNfX1BVUkVfXyovUmVhY3QuY2xvbmVFbGVtZW50KGNoaWxkcmVuLCBjaGlsZHJlblByb3BzKSwgLyojX19QVVJFX18qL19qc3goUG9wcGVyQ29tcG9uZW50LCBfZXh0ZW5kcyh7XG4gICAgICBhczogUG9wcGVyQ29tcG9uZW50UHJvcCAhPSBudWxsID8gUG9wcGVyQ29tcG9uZW50UHJvcCA6IFBvcHBlcixcbiAgICAgIHBsYWNlbWVudDogcGxhY2VtZW50LFxuICAgICAgYW5jaG9yRWw6IGZvbGxvd0N1cnNvciA/IHtcbiAgICAgICAgZ2V0Qm91bmRpbmdDbGllbnRSZWN0OiAoKSA9PiAoe1xuICAgICAgICAgIHRvcDogY3Vyc29yUG9zaXRpb24ueSxcbiAgICAgICAgICBsZWZ0OiBjdXJzb3JQb3NpdGlvbi54LFxuICAgICAgICAgIHJpZ2h0OiBjdXJzb3JQb3NpdGlvbi54LFxuICAgICAgICAgIGJvdHRvbTogY3Vyc29yUG9zaXRpb24ueSxcbiAgICAgICAgICB3aWR0aDogMCxcbiAgICAgICAgICBoZWlnaHQ6IDBcbiAgICAgICAgfSlcbiAgICAgIH0gOiBjaGlsZE5vZGUsXG4gICAgICBwb3BwZXJSZWY6IHBvcHBlclJlZixcbiAgICAgIG9wZW46IGNoaWxkTm9kZSA/IG9wZW4gOiBmYWxzZSxcbiAgICAgIGlkOiBpZCxcbiAgICAgIHRyYW5zaXRpb246IHRydWVcbiAgICB9LCBpbnRlcmFjdGl2ZVdyYXBwZXJMaXN0ZW5lcnMsIHBvcHBlclByb3BzLCB7XG4gICAgICBwb3BwZXJPcHRpb25zOiBwb3BwZXJPcHRpb25zLFxuICAgICAgY2hpbGRyZW46ICh7XG4gICAgICAgIFRyYW5zaXRpb25Qcm9wczogVHJhbnNpdGlvblByb3BzSW5uZXJcbiAgICAgIH0pID0+IC8qI19fUFVSRV9fKi9fanN4KFRyYW5zaXRpb25Db21wb25lbnQsIF9leHRlbmRzKHtcbiAgICAgICAgdGltZW91dDogdGhlbWUudHJhbnNpdGlvbnMuZHVyYXRpb24uc2hvcnRlclxuICAgICAgfSwgVHJhbnNpdGlvblByb3BzSW5uZXIsIHRyYW5zaXRpb25Qcm9wcywge1xuICAgICAgICBjaGlsZHJlbjogLyojX19QVVJFX18qL19qc3hzKFRvb2x0aXBDb21wb25lbnQsIF9leHRlbmRzKHt9LCB0b29sdGlwUHJvcHMsIHtcbiAgICAgICAgICBjaGlsZHJlbjogW3RpdGxlLCBhcnJvdyA/IC8qI19fUFVSRV9fKi9fanN4KEFycm93Q29tcG9uZW50LCBfZXh0ZW5kcyh7fSwgdG9vbHRpcEFycm93UHJvcHMsIHtcbiAgICAgICAgICAgIHJlZjogc2V0QXJyb3dSZWZcbiAgICAgICAgICB9KSkgOiBudWxsXVxuICAgICAgICB9KSlcbiAgICAgIH0pKVxuICAgIH0pKV1cbiAgfSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFRvb2x0aXAucHJvcFR5cGVzIC8qIHJlbW92ZS1wcm9wdHlwZXMgKi8gPSB7XG4gIC8vIOKUjOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgCBXYXJuaW5nIOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUkFxuICAvLyDilIIgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zLiDilIJcbiAgLy8g4pSCICAgIFRvIHVwZGF0ZSB0aGVtLCBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBgcG5wbSBwcm9wdHlwZXNgLiAgICAg4pSCXG4gIC8vIOKUlOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUmFxuICAvKipcbiAgICogSWYgYHRydWVgLCBhZGRzIGFuIGFycm93IHRvIHRoZSB0b29sdGlwLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgYXJyb3c6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogVG9vbHRpcCByZWZlcmVuY2UgZWxlbWVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBlbGVtZW50QWNjZXB0aW5nUmVmLmlzUmVxdWlyZWQsXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudHMgdXNlZCBmb3IgZWFjaCBzbG90IGluc2lkZS5cbiAgICpcbiAgICogVGhpcyBwcm9wIGlzIGFuIGFsaWFzIGZvciB0aGUgYHNsb3RzYCBwcm9wLlxuICAgKiBJdCdzIHJlY29tbWVuZGVkIHRvIHVzZSB0aGUgYHNsb3RzYCBwcm9wIGluc3RlYWQuXG4gICAqXG4gICAqIEBkZWZhdWx0IHt9XG4gICAqL1xuICBjb21wb25lbnRzOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIEFycm93OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG4gICAgUG9wcGVyOiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG4gICAgVG9vbHRpcDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuICAgIFRyYW5zaXRpb246IFByb3BUeXBlcy5lbGVtZW50VHlwZVxuICB9KSxcbiAgLyoqXG4gICAqIFRoZSBleHRyYSBwcm9wcyBmb3IgdGhlIHNsb3QgY29tcG9uZW50cy5cbiAgICogWW91IGNhbiBvdmVycmlkZSB0aGUgZXhpc3RpbmcgcHJvcHMgb3IgYWRkIG5ldyBvbmVzLlxuICAgKlxuICAgKiBUaGlzIHByb3AgaXMgYW4gYWxpYXMgZm9yIHRoZSBgc2xvdFByb3BzYCBwcm9wLlxuICAgKiBJdCdzIHJlY29tbWVuZGVkIHRvIHVzZSB0aGUgYHNsb3RQcm9wc2AgcHJvcCBpbnN0ZWFkLCBhcyBgY29tcG9uZW50c1Byb3BzYCB3aWxsIGJlIGRlcHJlY2F0ZWQgaW4gdGhlIGZ1dHVyZS5cbiAgICpcbiAgICogQGRlZmF1bHQge31cbiAgICovXG4gIGNvbXBvbmVudHNQcm9wczogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBhcnJvdzogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBwb3BwZXI6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgdG9vbHRpcDogUHJvcFR5cGVzLm9iamVjdCxcbiAgICB0cmFuc2l0aW9uOiBQcm9wVHlwZXMub2JqZWN0XG4gIH0pLFxuICAvKipcbiAgICogU2V0IHRvIGB0cnVlYCBpZiB0aGUgYHRpdGxlYCBhY3RzIGFzIGFuIGFjY2Vzc2libGUgZGVzY3JpcHRpb24uXG4gICAqIEJ5IGRlZmF1bHQgdGhlIGB0aXRsZWAgYWN0cyBhcyBhbiBhY2Nlc3NpYmxlIGxhYmVsIGZvciB0aGUgY2hpbGQuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkZXNjcmliZUNoaWxkOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIERvIG5vdCByZXNwb25kIHRvIGZvY3VzLXZpc2libGUgZXZlbnRzLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZGlzYWJsZUZvY3VzTGlzdGVuZXI6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogRG8gbm90IHJlc3BvbmQgdG8gaG92ZXIgZXZlbnRzLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZGlzYWJsZUhvdmVyTGlzdGVuZXI6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogTWFrZXMgYSB0b29sdGlwIG5vdCBpbnRlcmFjdGl2ZSwgaS5lLiBpdCB3aWxsIGNsb3NlIHdoZW4gdGhlIHVzZXJcbiAgICogaG92ZXJzIG92ZXIgdGhlIHRvb2x0aXAgYmVmb3JlIHRoZSBgbGVhdmVEZWxheWAgaXMgZXhwaXJlZC5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRpc2FibGVJbnRlcmFjdGl2ZTogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBEbyBub3QgcmVzcG9uZCB0byBsb25nIHByZXNzIHRvdWNoIGV2ZW50cy5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRpc2FibGVUb3VjaExpc3RlbmVyOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIFRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIHdhaXQgYmVmb3JlIHNob3dpbmcgdGhlIHRvb2x0aXAuXG4gICAqIFRoaXMgcHJvcCB3b24ndCBpbXBhY3QgdGhlIGVudGVyIHRvdWNoIGRlbGF5IChgZW50ZXJUb3VjaERlbGF5YCkuXG4gICAqIEBkZWZhdWx0IDEwMFxuICAgKi9cbiAgZW50ZXJEZWxheTogUHJvcFR5cGVzLm51bWJlcixcbiAgLyoqXG4gICAqIFRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIHdhaXQgYmVmb3JlIHNob3dpbmcgdGhlIHRvb2x0aXAgd2hlbiBvbmUgd2FzIGFscmVhZHkgcmVjZW50bHkgb3BlbmVkLlxuICAgKiBAZGVmYXVsdCAwXG4gICAqL1xuICBlbnRlck5leHREZWxheTogUHJvcFR5cGVzLm51bWJlcixcbiAgLyoqXG4gICAqIFRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIGEgdXNlciBtdXN0IHRvdWNoIHRoZSBlbGVtZW50IGJlZm9yZSBzaG93aW5nIHRoZSB0b29sdGlwLlxuICAgKiBAZGVmYXVsdCA3MDBcbiAgICovXG4gIGVudGVyVG91Y2hEZWxheTogUHJvcFR5cGVzLm51bWJlcixcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIHRvb2x0aXAgZm9sbG93IHRoZSBjdXJzb3Igb3ZlciB0aGUgd3JhcHBlZCBlbGVtZW50LlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZm9sbG93Q3Vyc29yOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIFRoaXMgcHJvcCBpcyB1c2VkIHRvIGhlbHAgaW1wbGVtZW50IHRoZSBhY2Nlc3NpYmlsaXR5IGxvZ2ljLlxuICAgKiBJZiB5b3UgZG9uJ3QgcHJvdmlkZSB0aGlzIHByb3AuIEl0IGZhbGxzIGJhY2sgdG8gYSByYW5kb21seSBnZW5lcmF0ZWQgaWQuXG4gICAqL1xuICBpZDogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIFRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIHdhaXQgYmVmb3JlIGhpZGluZyB0aGUgdG9vbHRpcC5cbiAgICogVGhpcyBwcm9wIHdvbid0IGltcGFjdCB0aGUgbGVhdmUgdG91Y2ggZGVsYXkgKGBsZWF2ZVRvdWNoRGVsYXlgKS5cbiAgICogQGRlZmF1bHQgMFxuICAgKi9cbiAgbGVhdmVEZWxheTogUHJvcFR5cGVzLm51bWJlcixcbiAgLyoqXG4gICAqIFRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIGFmdGVyIHRoZSB1c2VyIHN0b3BzIHRvdWNoaW5nIGFuIGVsZW1lbnQgYmVmb3JlIGhpZGluZyB0aGUgdG9vbHRpcC5cbiAgICogQGRlZmF1bHQgMTUwMFxuICAgKi9cbiAgbGVhdmVUb3VjaERlbGF5OiBQcm9wVHlwZXMubnVtYmVyLFxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgY29tcG9uZW50IHJlcXVlc3RzIHRvIGJlIGNsb3NlZC5cbiAgICpcbiAgICogQHBhcmFtIHtSZWFjdC5TeW50aGV0aWNFdmVudH0gZXZlbnQgVGhlIGV2ZW50IHNvdXJjZSBvZiB0aGUgY2FsbGJhY2suXG4gICAqL1xuICBvbkNsb3NlOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIGNvbXBvbmVudCByZXF1ZXN0cyB0byBiZSBvcGVuLlxuICAgKlxuICAgKiBAcGFyYW0ge1JlYWN0LlN5bnRoZXRpY0V2ZW50fSBldmVudCBUaGUgZXZlbnQgc291cmNlIG9mIHRoZSBjYWxsYmFjay5cbiAgICovXG4gIG9uT3BlbjogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBjb21wb25lbnQgaXMgc2hvd24uXG4gICAqL1xuICBvcGVuOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIFRvb2x0aXAgcGxhY2VtZW50LlxuICAgKiBAZGVmYXVsdCAnYm90dG9tJ1xuICAgKi9cbiAgcGxhY2VtZW50OiBQcm9wVHlwZXMub25lT2YoWydib3R0b20tZW5kJywgJ2JvdHRvbS1zdGFydCcsICdib3R0b20nLCAnbGVmdC1lbmQnLCAnbGVmdC1zdGFydCcsICdsZWZ0JywgJ3JpZ2h0LWVuZCcsICdyaWdodC1zdGFydCcsICdyaWdodCcsICd0b3AtZW5kJywgJ3RvcC1zdGFydCcsICd0b3AnXSksXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSBwb3BwZXIuXG4gICAqIEBkZWZhdWx0IFBvcHBlclxuICAgKi9cbiAgUG9wcGVyQ29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG4gIC8qKlxuICAgKiBQcm9wcyBhcHBsaWVkIHRvIHRoZSBbYFBvcHBlcmBdKC9tYXRlcmlhbC11aS9hcGkvcG9wcGVyLykgZWxlbWVudC5cbiAgICogQGRlZmF1bHQge31cbiAgICovXG4gIFBvcHBlclByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogVGhlIGV4dHJhIHByb3BzIGZvciB0aGUgc2xvdCBjb21wb25lbnRzLlxuICAgKiBZb3UgY2FuIG92ZXJyaWRlIHRoZSBleGlzdGluZyBwcm9wcyBvciBhZGQgbmV3IG9uZXMuXG4gICAqXG4gICAqIFRoaXMgcHJvcCBpcyBhbiBhbGlhcyBmb3IgdGhlIGBjb21wb25lbnRzUHJvcHNgIHByb3AsIHdoaWNoIHdpbGwgYmUgZGVwcmVjYXRlZCBpbiB0aGUgZnV0dXJlLlxuICAgKlxuICAgKiBAZGVmYXVsdCB7fVxuICAgKi9cbiAgc2xvdFByb3BzOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGFycm93OiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIHBvcHBlcjogUHJvcFR5cGVzLm9iamVjdCxcbiAgICB0b29sdGlwOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIHRyYW5zaXRpb246IFByb3BUeXBlcy5vYmplY3RcbiAgfSksXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50cyB1c2VkIGZvciBlYWNoIHNsb3QgaW5zaWRlLlxuICAgKlxuICAgKiBUaGlzIHByb3AgaXMgYW4gYWxpYXMgZm9yIHRoZSBgY29tcG9uZW50c2AgcHJvcCwgd2hpY2ggd2lsbCBiZSBkZXByZWNhdGVkIGluIHRoZSBmdXR1cmUuXG4gICAqXG4gICAqIEBkZWZhdWx0IHt9XG4gICAqL1xuICBzbG90czogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBhcnJvdzogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuICAgIHBvcHBlcjogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuICAgIHRvb2x0aXA6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcbiAgICB0cmFuc2l0aW9uOiBQcm9wVHlwZXMuZWxlbWVudFR5cGVcbiAgfSksXG4gIC8qKlxuICAgKiBUaGUgc3lzdGVtIHByb3AgdGhhdCBhbGxvd3MgZGVmaW5pbmcgc3lzdGVtIG92ZXJyaWRlcyBhcyB3ZWxsIGFzIGFkZGl0aW9uYWwgQ1NTIHN0eWxlcy5cbiAgICovXG4gIHN4OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLmJvb2xdKSksIFByb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSksXG4gIC8qKlxuICAgKiBUb29sdGlwIHRpdGxlLiBaZXJvLWxlbmd0aCB0aXRsZXMgc3RyaW5nLCB1bmRlZmluZWQsIG51bGwgYW5kIGZhbHNlIGFyZSBuZXZlciBkaXNwbGF5ZWQuXG4gICAqL1xuICB0aXRsZTogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSB0cmFuc2l0aW9uLlxuICAgKiBbRm9sbG93IHRoaXMgZ3VpZGVdKC9tYXRlcmlhbC11aS90cmFuc2l0aW9ucy8jdHJhbnNpdGlvbmNvbXBvbmVudC1wcm9wKSB0byBsZWFybiBtb3JlIGFib3V0IHRoZSByZXF1aXJlbWVudHMgZm9yIHRoaXMgY29tcG9uZW50LlxuICAgKiBAZGVmYXVsdCBHcm93XG4gICAqL1xuICBUcmFuc2l0aW9uQ29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG4gIC8qKlxuICAgKiBQcm9wcyBhcHBsaWVkIHRvIHRoZSB0cmFuc2l0aW9uIGVsZW1lbnQuXG4gICAqIEJ5IGRlZmF1bHQsIHRoZSBlbGVtZW50IGlzIGJhc2VkIG9uIHRoaXMgW2BUcmFuc2l0aW9uYF0oaHR0cHM6Ly9yZWFjdGNvbW11bml0eS5vcmcvcmVhY3QtdHJhbnNpdGlvbi1ncm91cC90cmFuc2l0aW9uLykgY29tcG9uZW50LlxuICAgKi9cbiAgVHJhbnNpdGlvblByb3BzOiBQcm9wVHlwZXMub2JqZWN0XG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgVG9vbHRpcDsiLCJpbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzZXMnO1xuaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3MnO1xuZXhwb3J0IGZ1bmN0aW9uIGdldFNwZWVkRGlhbEFjdGlvblV0aWxpdHlDbGFzcyhzbG90KSB7XG4gIHJldHVybiBnZW5lcmF0ZVV0aWxpdHlDbGFzcygnTXVpU3BlZWREaWFsQWN0aW9uJywgc2xvdCk7XG59XG5jb25zdCBzcGVlZERpYWxBY3Rpb25DbGFzc2VzID0gZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcygnTXVpU3BlZWREaWFsQWN0aW9uJywgWydmYWInLCAnZmFiQ2xvc2VkJywgJ3N0YXRpY1Rvb2x0aXAnLCAnc3RhdGljVG9vbHRpcENsb3NlZCcsICdzdGF0aWNUb29sdGlwTGFiZWwnLCAndG9vbHRpcFBsYWNlbWVudExlZnQnLCAndG9vbHRpcFBsYWNlbWVudFJpZ2h0J10pO1xuZXhwb3J0IGRlZmF1bHQgc3BlZWREaWFsQWN0aW9uQ2xhc3NlczsiLCIndXNlIGNsaWVudCc7XG5cbi8vIEBpbmhlcml0ZWRDb21wb25lbnQgVG9vbHRpcFxuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImNsYXNzTmFtZVwiLCBcImRlbGF5XCIsIFwiRmFiUHJvcHNcIiwgXCJpY29uXCIsIFwiaWRcIiwgXCJvcGVuXCIsIFwiVG9vbHRpcENsYXNzZXNcIiwgXCJ0b29sdGlwT3BlblwiLCBcInRvb2x0aXBQbGFjZW1lbnRcIiwgXCJ0b29sdGlwVGl0bGVcIl07XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgY29tcG9zZUNsYXNzZXMgZnJvbSAnQG11aS91dGlscy9jb21wb3NlQ2xhc3Nlcyc7XG5pbXBvcnQgeyBlbXBoYXNpemUgfSBmcm9tICdAbXVpL3N5c3RlbS9jb2xvck1hbmlwdWxhdG9yJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnLi4vc3R5bGVzL3N0eWxlZCc7XG5pbXBvcnQgeyB1c2VEZWZhdWx0UHJvcHMgfSBmcm9tICcuLi9EZWZhdWx0UHJvcHNQcm92aWRlcic7XG5pbXBvcnQgRmFiIGZyb20gJy4uL0ZhYic7XG5pbXBvcnQgVG9vbHRpcCBmcm9tICcuLi9Ub29sdGlwJztcbmltcG9ydCBjYXBpdGFsaXplIGZyb20gJy4uL3V0aWxzL2NhcGl0YWxpemUnO1xuaW1wb3J0IHNwZWVkRGlhbEFjdGlvbkNsYXNzZXMsIHsgZ2V0U3BlZWREaWFsQWN0aW9uVXRpbGl0eUNsYXNzIH0gZnJvbSAnLi9zcGVlZERpYWxBY3Rpb25DbGFzc2VzJztcbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5pbXBvcnQgeyBqc3hzIGFzIF9qc3hzIH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5jb25zdCB1c2VVdGlsaXR5Q2xhc3NlcyA9IG93bmVyU3RhdGUgPT4ge1xuICBjb25zdCB7XG4gICAgb3BlbixcbiAgICB0b29sdGlwUGxhY2VtZW50LFxuICAgIGNsYXNzZXNcbiAgfSA9IG93bmVyU3RhdGU7XG4gIGNvbnN0IHNsb3RzID0ge1xuICAgIGZhYjogWydmYWInLCAhb3BlbiAmJiAnZmFiQ2xvc2VkJ10sXG4gICAgc3RhdGljVG9vbHRpcDogWydzdGF0aWNUb29sdGlwJywgYHRvb2x0aXBQbGFjZW1lbnQke2NhcGl0YWxpemUodG9vbHRpcFBsYWNlbWVudCl9YCwgIW9wZW4gJiYgJ3N0YXRpY1Rvb2x0aXBDbG9zZWQnXSxcbiAgICBzdGF0aWNUb29sdGlwTGFiZWw6IFsnc3RhdGljVG9vbHRpcExhYmVsJ11cbiAgfTtcbiAgcmV0dXJuIGNvbXBvc2VDbGFzc2VzKHNsb3RzLCBnZXRTcGVlZERpYWxBY3Rpb25VdGlsaXR5Q2xhc3MsIGNsYXNzZXMpO1xufTtcbmNvbnN0IFNwZWVkRGlhbEFjdGlvbkZhYiA9IHN0eWxlZChGYWIsIHtcbiAgbmFtZTogJ011aVNwZWVkRGlhbEFjdGlvbicsXG4gIHNsb3Q6ICdGYWInLFxuICBza2lwVmFyaWFudHNSZXNvbHZlcjogZmFsc2UsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9ID0gcHJvcHM7XG4gICAgcmV0dXJuIFtzdHlsZXMuZmFiLCAhb3duZXJTdGF0ZS5vcGVuICYmIHN0eWxlcy5mYWJDbG9zZWRdO1xuICB9XG59KSgoe1xuICB0aGVtZSxcbiAgb3duZXJTdGF0ZVxufSkgPT4gX2V4dGVuZHMoe1xuICBtYXJnaW46IDgsXG4gIGNvbG9yOiAodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZS50ZXh0LnNlY29uZGFyeSxcbiAgYmFja2dyb3VuZENvbG9yOiAodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZS5iYWNrZ3JvdW5kLnBhcGVyLFxuICAnJjpob3Zlcic6IHtcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnZhcnMgPyB0aGVtZS52YXJzLnBhbGV0dGUuU3BlZWREaWFsQWN0aW9uLmZhYkhvdmVyQmcgOiBlbXBoYXNpemUodGhlbWUucGFsZXR0ZS5iYWNrZ3JvdW5kLnBhcGVyLCAwLjE1KVxuICB9LFxuICB0cmFuc2l0aW9uOiBgJHt0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoJ3RyYW5zZm9ybScsIHtcbiAgICBkdXJhdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuZHVyYXRpb24uc2hvcnRlclxuICB9KX0sIG9wYWNpdHkgMC44c2AsXG4gIG9wYWNpdHk6IDFcbn0sICFvd25lclN0YXRlLm9wZW4gJiYge1xuICBvcGFjaXR5OiAwLFxuICB0cmFuc2Zvcm06ICdzY2FsZSgwKSdcbn0pKTtcbmNvbnN0IFNwZWVkRGlhbEFjdGlvblN0YXRpY1Rvb2x0aXAgPSBzdHlsZWQoJ3NwYW4nLCB7XG4gIG5hbWU6ICdNdWlTcGVlZERpYWxBY3Rpb24nLFxuICBzbG90OiAnU3RhdGljVG9vbHRpcCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9ID0gcHJvcHM7XG4gICAgcmV0dXJuIFtzdHlsZXMuc3RhdGljVG9vbHRpcCwgIW93bmVyU3RhdGUub3BlbiAmJiBzdHlsZXMuc3RhdGljVG9vbHRpcENsb3NlZCwgc3R5bGVzW2B0b29sdGlwUGxhY2VtZW50JHtjYXBpdGFsaXplKG93bmVyU3RhdGUudG9vbHRpcFBsYWNlbWVudCl9YF1dO1xuICB9XG59KSgoe1xuICB0aGVtZSxcbiAgb3duZXJTdGF0ZVxufSkgPT4gKHtcbiAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gIGRpc3BsYXk6ICdmbGV4JyxcbiAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gIFtgJiAuJHtzcGVlZERpYWxBY3Rpb25DbGFzc2VzLnN0YXRpY1Rvb2x0aXBMYWJlbH1gXTogX2V4dGVuZHMoe1xuICAgIHRyYW5zaXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZShbJ3RyYW5zZm9ybScsICdvcGFjaXR5J10sIHtcbiAgICAgIGR1cmF0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5kdXJhdGlvbi5zaG9ydGVyXG4gICAgfSksXG4gICAgb3BhY2l0eTogMVxuICB9LCAhb3duZXJTdGF0ZS5vcGVuICYmIHtcbiAgICBvcGFjaXR5OiAwLFxuICAgIHRyYW5zZm9ybTogJ3NjYWxlKDAuNSknXG4gIH0sIG93bmVyU3RhdGUudG9vbHRpcFBsYWNlbWVudCA9PT0gJ2xlZnQnICYmIHtcbiAgICB0cmFuc2Zvcm1PcmlnaW46ICcxMDAlIDUwJScsXG4gICAgcmlnaHQ6ICcxMDAlJyxcbiAgICBtYXJnaW5SaWdodDogOFxuICB9LCBvd25lclN0YXRlLnRvb2x0aXBQbGFjZW1lbnQgPT09ICdyaWdodCcgJiYge1xuICAgIHRyYW5zZm9ybU9yaWdpbjogJzAlIDUwJScsXG4gICAgbGVmdDogJzEwMCUnLFxuICAgIG1hcmdpbkxlZnQ6IDhcbiAgfSlcbn0pKTtcbmNvbnN0IFNwZWVkRGlhbEFjdGlvblN0YXRpY1Rvb2x0aXBMYWJlbCA9IHN0eWxlZCgnc3BhbicsIHtcbiAgbmFtZTogJ011aVNwZWVkRGlhbEFjdGlvbicsXG4gIHNsb3Q6ICdTdGF0aWNUb29sdGlwTGFiZWwnLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHN0eWxlcy5zdGF0aWNUb29sdGlwTGFiZWxcbn0pKCh7XG4gIHRoZW1lXG59KSA9PiBfZXh0ZW5kcyh7XG4gIHBvc2l0aW9uOiAnYWJzb2x1dGUnXG59LCB0aGVtZS50eXBvZ3JhcGh5LmJvZHkxLCB7XG4gIGJhY2tncm91bmRDb2xvcjogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGUuYmFja2dyb3VuZC5wYXBlcixcbiAgYm9yZGVyUmFkaXVzOiAodGhlbWUudmFycyB8fCB0aGVtZSkuc2hhcGUuYm9yZGVyUmFkaXVzLFxuICBib3hTaGFkb3c6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5zaGFkb3dzWzFdLFxuICBjb2xvcjogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGUudGV4dC5zZWNvbmRhcnksXG4gIHBhZGRpbmc6ICc0cHggMTZweCcsXG4gIHdvcmRCcmVhazogJ2tlZXAtYWxsJ1xufSkpO1xuY29uc3QgU3BlZWREaWFsQWN0aW9uID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gU3BlZWREaWFsQWN0aW9uKGluUHJvcHMsIHJlZikge1xuICBjb25zdCBwcm9wcyA9IHVzZURlZmF1bHRQcm9wcyh7XG4gICAgcHJvcHM6IGluUHJvcHMsXG4gICAgbmFtZTogJ011aVNwZWVkRGlhbEFjdGlvbidcbiAgfSk7XG4gIGNvbnN0IHtcbiAgICAgIGNsYXNzTmFtZSxcbiAgICAgIGRlbGF5ID0gMCxcbiAgICAgIEZhYlByb3BzID0ge30sXG4gICAgICBpY29uLFxuICAgICAgaWQsXG4gICAgICBvcGVuLFxuICAgICAgVG9vbHRpcENsYXNzZXMsXG4gICAgICB0b29sdGlwT3BlbjogdG9vbHRpcE9wZW5Qcm9wID0gZmFsc2UsXG4gICAgICB0b29sdGlwUGxhY2VtZW50ID0gJ2xlZnQnLFxuICAgICAgdG9vbHRpcFRpdGxlXG4gICAgfSA9IHByb3BzLFxuICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIF9leGNsdWRlZCk7XG4gIGNvbnN0IG93bmVyU3RhdGUgPSBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICB0b29sdGlwUGxhY2VtZW50XG4gIH0pO1xuICBjb25zdCBjbGFzc2VzID0gdXNlVXRpbGl0eUNsYXNzZXMob3duZXJTdGF0ZSk7XG4gIGNvbnN0IFt0b29sdGlwT3Blbiwgc2V0VG9vbHRpcE9wZW5dID0gUmVhY3QudXNlU3RhdGUodG9vbHRpcE9wZW5Qcm9wKTtcbiAgY29uc3QgaGFuZGxlVG9vbHRpcENsb3NlID0gKCkgPT4ge1xuICAgIHNldFRvb2x0aXBPcGVuKGZhbHNlKTtcbiAgfTtcbiAgY29uc3QgaGFuZGxlVG9vbHRpcE9wZW4gPSAoKSA9PiB7XG4gICAgc2V0VG9vbHRpcE9wZW4odHJ1ZSk7XG4gIH07XG4gIGNvbnN0IHRyYW5zaXRpb25TdHlsZSA9IHtcbiAgICB0cmFuc2l0aW9uRGVsYXk6IGAke2RlbGF5fW1zYFxuICB9O1xuICBjb25zdCBmYWIgPSAvKiNfX1BVUkVfXyovX2pzeChTcGVlZERpYWxBY3Rpb25GYWIsIF9leHRlbmRzKHtcbiAgICBzaXplOiBcInNtYWxsXCIsXG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMuZmFiLCBjbGFzc05hbWUpLFxuICAgIHRhYkluZGV4OiAtMSxcbiAgICByb2xlOiBcIm1lbnVpdGVtXCIsXG4gICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZVxuICB9LCBGYWJQcm9wcywge1xuICAgIHN0eWxlOiBfZXh0ZW5kcyh7fSwgdHJhbnNpdGlvblN0eWxlLCBGYWJQcm9wcy5zdHlsZSksXG4gICAgY2hpbGRyZW46IGljb25cbiAgfSkpO1xuICBpZiAodG9vbHRpcE9wZW5Qcm9wKSB7XG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4cyhTcGVlZERpYWxBY3Rpb25TdGF0aWNUb29sdGlwLCBfZXh0ZW5kcyh7XG4gICAgICBpZDogaWQsXG4gICAgICByZWY6IHJlZixcbiAgICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5zdGF0aWNUb29sdGlwLFxuICAgICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZVxuICAgIH0sIG90aGVyLCB7XG4gICAgICBjaGlsZHJlbjogWy8qI19fUFVSRV9fKi9fanN4KFNwZWVkRGlhbEFjdGlvblN0YXRpY1Rvb2x0aXBMYWJlbCwge1xuICAgICAgICBzdHlsZTogdHJhbnNpdGlvblN0eWxlLFxuICAgICAgICBpZDogYCR7aWR9LWxhYmVsYCxcbiAgICAgICAgY2xhc3NOYW1lOiBjbGFzc2VzLnN0YXRpY1Rvb2x0aXBMYWJlbCxcbiAgICAgICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZSxcbiAgICAgICAgY2hpbGRyZW46IHRvb2x0aXBUaXRsZVxuICAgICAgfSksIC8qI19fUFVSRV9fKi9SZWFjdC5jbG9uZUVsZW1lbnQoZmFiLCB7XG4gICAgICAgICdhcmlhLWxhYmVsbGVkYnknOiBgJHtpZH0tbGFiZWxgXG4gICAgICB9KV1cbiAgICB9KSk7XG4gIH1cbiAgaWYgKCFvcGVuICYmIHRvb2x0aXBPcGVuKSB7XG4gICAgc2V0VG9vbHRpcE9wZW4oZmFsc2UpO1xuICB9XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeChUb29sdGlwLCBfZXh0ZW5kcyh7XG4gICAgaWQ6IGlkLFxuICAgIHJlZjogcmVmLFxuICAgIHRpdGxlOiB0b29sdGlwVGl0bGUsXG4gICAgcGxhY2VtZW50OiB0b29sdGlwUGxhY2VtZW50LFxuICAgIG9uQ2xvc2U6IGhhbmRsZVRvb2x0aXBDbG9zZSxcbiAgICBvbk9wZW46IGhhbmRsZVRvb2x0aXBPcGVuLFxuICAgIG9wZW46IG9wZW4gJiYgdG9vbHRpcE9wZW4sXG4gICAgY2xhc3NlczogVG9vbHRpcENsYXNzZXNcbiAgfSwgb3RoZXIsIHtcbiAgICBjaGlsZHJlbjogZmFiXG4gIH0pKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gU3BlZWREaWFsQWN0aW9uLnByb3BUeXBlcyAvKiByZW1vdmUtcHJvcHR5cGVzICovID0ge1xuICAvLyDilIzilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIAgV2FybmluZyDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJBcbiAgLy8g4pSCIFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucy4g4pSCXG4gIC8vIOKUgiAgICBUbyB1cGRhdGUgdGhlbSwgZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gYHBucG0gcHJvcHR5cGVzYC4gICAgIOKUglxuICAvLyDilJTilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJhcbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBBZGRzIGEgdHJhbnNpdGlvbiBkZWxheSwgdG8gYWxsb3cgYSBzZXJpZXMgb2YgU3BlZWREaWFsQWN0aW9ucyB0byBiZSBhbmltYXRlZC5cbiAgICogQGRlZmF1bHQgMFxuICAgKi9cbiAgZGVsYXk6IFByb3BUeXBlcy5udW1iZXIsXG4gIC8qKlxuICAgKiBQcm9wcyBhcHBsaWVkIHRvIHRoZSBbYEZhYmBdKC9tYXRlcmlhbC11aS9hcGkvZmFiLykgY29tcG9uZW50LlxuICAgKiBAZGVmYXVsdCB7fVxuICAgKi9cbiAgRmFiUHJvcHM6IFByb3BUeXBlcy5vYmplY3QsXG4gIC8qKlxuICAgKiBUaGUgaWNvbiB0byBkaXNwbGF5IGluIHRoZSBTcGVlZERpYWwgRmFiLlxuICAgKi9cbiAgaWNvbjogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBUaGlzIHByb3AgaXMgdXNlZCB0byBoZWxwIGltcGxlbWVudCB0aGUgYWNjZXNzaWJpbGl0eSBsb2dpYy5cbiAgICogSWYgeW91IGRvbid0IHByb3ZpZGUgdGhpcyBwcm9wLiBJdCBmYWxscyBiYWNrIHRvIGEgcmFuZG9tbHkgZ2VuZXJhdGVkIGlkLlxuICAgKi9cbiAgaWQ6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBjb21wb25lbnQgaXMgc2hvd24uXG4gICAqL1xuICBvcGVuOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIFRoZSBzeXN0ZW0gcHJvcCB0aGF0IGFsbG93cyBkZWZpbmluZyBzeXN0ZW0gb3ZlcnJpZGVzIGFzIHdlbGwgYXMgYWRkaXRpb25hbCBDU1Mgc3R5bGVzLlxuICAgKi9cbiAgc3g6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuYm9vbF0pKSwgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKSxcbiAgLyoqXG4gICAqIGBjbGFzc2VzYCBwcm9wIGFwcGxpZWQgdG8gdGhlIFtgVG9vbHRpcGBdKC9tYXRlcmlhbC11aS9hcGkvdG9vbHRpcC8pIGVsZW1lbnQuXG4gICAqL1xuICBUb29sdGlwQ2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqXG4gICAqIE1ha2UgdGhlIHRvb2x0aXAgYWx3YXlzIHZpc2libGUgd2hlbiB0aGUgU3BlZWREaWFsIGlzIG9wZW4uXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICB0b29sdGlwT3BlbjogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBQbGFjZW1lbnQgb2YgdGhlIHRvb2x0aXAuXG4gICAqIEBkZWZhdWx0ICdsZWZ0J1xuICAgKi9cbiAgdG9vbHRpcFBsYWNlbWVudDogUHJvcFR5cGVzLm9uZU9mKFsnYm90dG9tLWVuZCcsICdib3R0b20tc3RhcnQnLCAnYm90dG9tJywgJ2xlZnQtZW5kJywgJ2xlZnQtc3RhcnQnLCAnbGVmdCcsICdyaWdodC1lbmQnLCAncmlnaHQtc3RhcnQnLCAncmlnaHQnLCAndG9wLWVuZCcsICd0b3Atc3RhcnQnLCAndG9wJ10pLFxuICAvKipcbiAgICogTGFiZWwgdG8gZGlzcGxheSBpbiB0aGUgdG9vbHRpcC5cbiAgICovXG4gIHRvb2x0aXBUaXRsZTogUHJvcFR5cGVzLm5vZGVcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCBTcGVlZERpYWxBY3Rpb247IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjcmVhdGVTdmdJY29uIH0gZnJvbSAnLi4vLi4vdXRpbHMnO1xuXG4vKipcbiAqIEBpZ25vcmUgLSBpbnRlcm5hbCBjb21wb25lbnQuXG4gKi9cbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5leHBvcnQgZGVmYXVsdCBjcmVhdGVTdmdJY29uKCAvKiNfX1BVUkVfXyovX2pzeChcInBhdGhcIiwge1xuICBkOiBcIk0xOSAxM2gtNnY2aC0ydi02SDV2LTJoNlY1aDJ2Nmg2djJ6XCJcbn0pLCAnQWRkJyk7IiwiaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzc2VzJztcbmltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzJztcbmV4cG9ydCBmdW5jdGlvbiBnZXRTcGVlZERpYWxJY29uVXRpbGl0eUNsYXNzKHNsb3QpIHtcbiAgcmV0dXJuIGdlbmVyYXRlVXRpbGl0eUNsYXNzKCdNdWlTcGVlZERpYWxJY29uJywgc2xvdCk7XG59XG5jb25zdCBzcGVlZERpYWxJY29uQ2xhc3NlcyA9IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMoJ011aVNwZWVkRGlhbEljb24nLCBbJ3Jvb3QnLCAnaWNvbicsICdpY29uT3BlbicsICdpY29uV2l0aE9wZW5JY29uT3BlbicsICdvcGVuSWNvbicsICdvcGVuSWNvbk9wZW4nXSk7XG5leHBvcnQgZGVmYXVsdCBzcGVlZERpYWxJY29uQ2xhc3NlczsiLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJjbGFzc05hbWVcIiwgXCJpY29uXCIsIFwib3BlblwiLCBcIm9wZW5JY29uXCJdO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IGNvbXBvc2VDbGFzc2VzIGZyb20gJ0BtdWkvdXRpbHMvY29tcG9zZUNsYXNzZXMnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICcuLi9zdHlsZXMvc3R5bGVkJztcbmltcG9ydCB7IHVzZURlZmF1bHRQcm9wcyB9IGZyb20gJy4uL0RlZmF1bHRQcm9wc1Byb3ZpZGVyJztcbmltcG9ydCBBZGRJY29uIGZyb20gJy4uL2ludGVybmFsL3N2Zy1pY29ucy9BZGQnO1xuaW1wb3J0IHNwZWVkRGlhbEljb25DbGFzc2VzLCB7IGdldFNwZWVkRGlhbEljb25VdGlsaXR5Q2xhc3MgfSBmcm9tICcuL3NwZWVkRGlhbEljb25DbGFzc2VzJztcbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5pbXBvcnQgeyBqc3hzIGFzIF9qc3hzIH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5jb25zdCB1c2VVdGlsaXR5Q2xhc3NlcyA9IG93bmVyU3RhdGUgPT4ge1xuICBjb25zdCB7XG4gICAgY2xhc3NlcyxcbiAgICBvcGVuLFxuICAgIG9wZW5JY29uXG4gIH0gPSBvd25lclN0YXRlO1xuICBjb25zdCBzbG90cyA9IHtcbiAgICByb290OiBbJ3Jvb3QnXSxcbiAgICBpY29uOiBbJ2ljb24nLCBvcGVuICYmICdpY29uT3BlbicsIG9wZW5JY29uICYmIG9wZW4gJiYgJ2ljb25XaXRoT3Blbkljb25PcGVuJ10sXG4gICAgb3Blbkljb246IFsnb3Blbkljb24nLCBvcGVuICYmICdvcGVuSWNvbk9wZW4nXVxuICB9O1xuICByZXR1cm4gY29tcG9zZUNsYXNzZXMoc2xvdHMsIGdldFNwZWVkRGlhbEljb25VdGlsaXR5Q2xhc3MsIGNsYXNzZXMpO1xufTtcbmNvbnN0IFNwZWVkRGlhbEljb25Sb290ID0gc3R5bGVkKCdzcGFuJywge1xuICBuYW1lOiAnTXVpU3BlZWREaWFsSWNvbicsXG4gIHNsb3Q6ICdSb290JyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgb3duZXJTdGF0ZVxuICAgIH0gPSBwcm9wcztcbiAgICByZXR1cm4gW3tcbiAgICAgIFtgJiAuJHtzcGVlZERpYWxJY29uQ2xhc3Nlcy5pY29ufWBdOiBzdHlsZXMuaWNvblxuICAgIH0sIHtcbiAgICAgIFtgJiAuJHtzcGVlZERpYWxJY29uQ2xhc3Nlcy5pY29ufWBdOiBvd25lclN0YXRlLm9wZW4gJiYgc3R5bGVzLmljb25PcGVuXG4gICAgfSwge1xuICAgICAgW2AmIC4ke3NwZWVkRGlhbEljb25DbGFzc2VzLmljb259YF06IG93bmVyU3RhdGUub3BlbiAmJiBvd25lclN0YXRlLm9wZW5JY29uICYmIHN0eWxlcy5pY29uV2l0aE9wZW5JY29uT3BlblxuICAgIH0sIHtcbiAgICAgIFtgJiAuJHtzcGVlZERpYWxJY29uQ2xhc3Nlcy5vcGVuSWNvbn1gXTogc3R5bGVzLm9wZW5JY29uXG4gICAgfSwge1xuICAgICAgW2AmIC4ke3NwZWVkRGlhbEljb25DbGFzc2VzLm9wZW5JY29ufWBdOiBvd25lclN0YXRlLm9wZW4gJiYgc3R5bGVzLm9wZW5JY29uT3BlblxuICAgIH0sIHN0eWxlcy5yb290XTtcbiAgfVxufSkoKHtcbiAgdGhlbWUsXG4gIG93bmVyU3RhdGVcbn0pID0+ICh7XG4gIGhlaWdodDogMjQsXG4gIFtgJiAuJHtzcGVlZERpYWxJY29uQ2xhc3Nlcy5pY29ufWBdOiBfZXh0ZW5kcyh7XG4gICAgdHJhbnNpdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKFsndHJhbnNmb3JtJywgJ29wYWNpdHknXSwge1xuICAgICAgZHVyYXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmR1cmF0aW9uLnNob3J0XG4gICAgfSlcbiAgfSwgb3duZXJTdGF0ZS5vcGVuICYmIF9leHRlbmRzKHtcbiAgICB0cmFuc2Zvcm06ICdyb3RhdGUoNDVkZWcpJ1xuICB9LCBvd25lclN0YXRlLm9wZW5JY29uICYmIHtcbiAgICBvcGFjaXR5OiAwXG4gIH0pKSxcbiAgW2AmIC4ke3NwZWVkRGlhbEljb25DbGFzc2VzLm9wZW5JY29ufWBdOiBfZXh0ZW5kcyh7XG4gICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgdHJhbnNpdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKFsndHJhbnNmb3JtJywgJ29wYWNpdHknXSwge1xuICAgICAgZHVyYXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmR1cmF0aW9uLnNob3J0XG4gICAgfSksXG4gICAgb3BhY2l0eTogMCxcbiAgICB0cmFuc2Zvcm06ICdyb3RhdGUoLTQ1ZGVnKSdcbiAgfSwgb3duZXJTdGF0ZS5vcGVuICYmIHtcbiAgICB0cmFuc2Zvcm06ICdyb3RhdGUoMGRlZyknLFxuICAgIG9wYWNpdHk6IDFcbiAgfSlcbn0pKTtcbmNvbnN0IFNwZWVkRGlhbEljb24gPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBTcGVlZERpYWxJY29uKGluUHJvcHMsIHJlZikge1xuICBjb25zdCBwcm9wcyA9IHVzZURlZmF1bHRQcm9wcyh7XG4gICAgcHJvcHM6IGluUHJvcHMsXG4gICAgbmFtZTogJ011aVNwZWVkRGlhbEljb24nXG4gIH0pO1xuICBjb25zdCB7XG4gICAgICBjbGFzc05hbWUsXG4gICAgICBpY29uOiBpY29uUHJvcCxcbiAgICAgIG9wZW5JY29uOiBvcGVuSWNvblByb3BcbiAgICB9ID0gcHJvcHMsXG4gICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkKTtcbiAgY29uc3Qgb3duZXJTdGF0ZSA9IHByb3BzO1xuICBjb25zdCBjbGFzc2VzID0gdXNlVXRpbGl0eUNsYXNzZXMob3duZXJTdGF0ZSk7XG4gIGZ1bmN0aW9uIGZvcm1hdEljb24oaWNvbiwgbmV3Q2xhc3NOYW1lKSB7XG4gICAgaWYgKCAvKiNfX1BVUkVfXyovUmVhY3QuaXNWYWxpZEVsZW1lbnQoaWNvbikpIHtcbiAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY2xvbmVFbGVtZW50KGljb24sIHtcbiAgICAgICAgY2xhc3NOYW1lOiBuZXdDbGFzc05hbWVcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gaWNvbjtcbiAgfVxuICByZXR1cm4gLyojX19QVVJFX18qL19qc3hzKFNwZWVkRGlhbEljb25Sb290LCBfZXh0ZW5kcyh7XG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lKSxcbiAgICByZWY6IHJlZixcbiAgICBvd25lclN0YXRlOiBvd25lclN0YXRlXG4gIH0sIG90aGVyLCB7XG4gICAgY2hpbGRyZW46IFtvcGVuSWNvblByb3AgPyBmb3JtYXRJY29uKG9wZW5JY29uUHJvcCwgY2xhc3Nlcy5vcGVuSWNvbikgOiBudWxsLCBpY29uUHJvcCA/IGZvcm1hdEljb24oaWNvblByb3AsIGNsYXNzZXMuaWNvbikgOiAvKiNfX1BVUkVfXyovX2pzeChBZGRJY29uLCB7XG4gICAgICBjbGFzc05hbWU6IGNsYXNzZXMuaWNvblxuICAgIH0pXVxuICB9KSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFNwZWVkRGlhbEljb24ucHJvcFR5cGVzIC8qIHJlbW92ZS1wcm9wdHlwZXMgKi8gPSB7XG4gIC8vIOKUjOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgCBXYXJuaW5nIOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUkFxuICAvLyDilIIgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zLiDilIJcbiAgLy8g4pSCICAgIFRvIHVwZGF0ZSB0aGVtLCBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBgcG5wbSBwcm9wdHlwZXNgLiAgICAg4pSCXG4gIC8vIOKUlOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUmFxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIFRoZSBpY29uIHRvIGRpc3BsYXkuXG4gICAqL1xuICBpY29uOiBQcm9wVHlwZXMubm9kZSxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICogSWYgYHRydWVgLCB0aGUgY29tcG9uZW50IGlzIHNob3duLlxuICAgKi9cbiAgb3BlbjogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBUaGUgaWNvbiB0byBkaXNwbGF5IGluIHRoZSBTcGVlZERpYWwgRmxvYXRpbmcgQWN0aW9uIEJ1dHRvbiB3aGVuIHRoZSBTcGVlZERpYWwgaXMgb3Blbi5cbiAgICovXG4gIG9wZW5JY29uOiBQcm9wVHlwZXMubm9kZSxcbiAgLyoqXG4gICAqIFRoZSBzeXN0ZW0gcHJvcCB0aGF0IGFsbG93cyBkZWZpbmluZyBzeXN0ZW0gb3ZlcnJpZGVzIGFzIHdlbGwgYXMgYWRkaXRpb25hbCBDU1Mgc3R5bGVzLlxuICAgKi9cbiAgc3g6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuYm9vbF0pKSwgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKVxufSA6IHZvaWQgMDtcblNwZWVkRGlhbEljb24ubXVpTmFtZSA9ICdTcGVlZERpYWxJY29uJztcbmV4cG9ydCBkZWZhdWx0IFNwZWVkRGlhbEljb247IiwiaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzc2VzJztcbmltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzJztcbmV4cG9ydCBmdW5jdGlvbiBnZXRTdGFja1V0aWxpdHlDbGFzcyhzbG90KSB7XG4gIHJldHVybiBnZW5lcmF0ZVV0aWxpdHlDbGFzcygnTXVpU3RhY2snLCBzbG90KTtcbn1cbmNvbnN0IHN0YWNrQ2xhc3NlcyA9IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMoJ011aVN0YWNrJywgWydyb290J10pO1xuZXhwb3J0IGRlZmF1bHQgc3RhY2tDbGFzc2VzOyIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0Jztcbi8qKlxuICogUHJvdmlkZXMgaW5mb3JtYXRpb24gYWJvdXQgdGhlIGN1cnJlbnQgc3RlcCBpbiBTdGVwcGVyLlxuICovXG5jb25zdCBTdGVwcGVyQ29udGV4dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVDb250ZXh0KHt9KTtcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIFN0ZXBwZXJDb250ZXh0LmRpc3BsYXlOYW1lID0gJ1N0ZXBwZXJDb250ZXh0Jztcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBjdXJyZW50IFN0ZXBwZXJDb250ZXh0IG9yIGFuIGVtcHR5IG9iamVjdCBpZiBubyBTdGVwcGVyQ29udGV4dFxuICogaGFzIGJlZW4gZGVmaW5lZCBpbiB0aGUgY29tcG9uZW50IHRyZWUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VTdGVwcGVyQ29udGV4dCgpIHtcbiAgcmV0dXJuIFJlYWN0LnVzZUNvbnRleHQoU3RlcHBlckNvbnRleHQpO1xufVxuZXhwb3J0IGRlZmF1bHQgU3RlcHBlckNvbnRleHQ7IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuLyoqXG4gKiBQcm92aWRlcyBpbmZvcm1hdGlvbiBhYm91dCB0aGUgY3VycmVudCBzdGVwIGluIFN0ZXBwZXIuXG4gKi9cbmNvbnN0IFN0ZXBDb250ZXh0ID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUNvbnRleHQoe30pO1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgU3RlcENvbnRleHQuZGlzcGxheU5hbWUgPSAnU3RlcENvbnRleHQnO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIGN1cnJlbnQgU3RlcENvbnRleHQgb3IgYW4gZW1wdHkgb2JqZWN0IGlmIG5vIFN0ZXBDb250ZXh0XG4gKiBoYXMgYmVlbiBkZWZpbmVkIGluIHRoZSBjb21wb25lbnQgdHJlZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZVN0ZXBDb250ZXh0KCkge1xuICByZXR1cm4gUmVhY3QudXNlQ29udGV4dChTdGVwQ29udGV4dCk7XG59XG5leHBvcnQgZGVmYXVsdCBTdGVwQ29udGV4dDsiLCJpbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzZXMnO1xuaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3MnO1xuZXhwb3J0IGZ1bmN0aW9uIGdldFN0ZXBVdGlsaXR5Q2xhc3Moc2xvdCkge1xuICByZXR1cm4gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoJ011aVN0ZXAnLCBzbG90KTtcbn1cbmNvbnN0IHN0ZXBDbGFzc2VzID0gZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcygnTXVpU3RlcCcsIFsncm9vdCcsICdob3Jpem9udGFsJywgJ3ZlcnRpY2FsJywgJ2FsdGVybmF0aXZlTGFiZWwnLCAnY29tcGxldGVkJ10pO1xuZXhwb3J0IGRlZmF1bHQgc3RlcENsYXNzZXM7IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiYWN0aXZlXCIsIFwiY2hpbGRyZW5cIiwgXCJjbGFzc05hbWVcIiwgXCJjb21wb25lbnRcIiwgXCJjb21wbGV0ZWRcIiwgXCJkaXNhYmxlZFwiLCBcImV4cGFuZGVkXCIsIFwiaW5kZXhcIiwgXCJsYXN0XCJdO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IGludGVnZXJQcm9wVHlwZSBmcm9tICdAbXVpL3V0aWxzL2ludGVnZXJQcm9wVHlwZSc7XG5pbXBvcnQgY29tcG9zZUNsYXNzZXMgZnJvbSAnQG11aS91dGlscy9jb21wb3NlQ2xhc3Nlcyc7XG5pbXBvcnQgU3RlcHBlckNvbnRleHQgZnJvbSAnLi4vU3RlcHBlci9TdGVwcGVyQ29udGV4dCc7XG5pbXBvcnQgU3RlcENvbnRleHQgZnJvbSAnLi9TdGVwQ29udGV4dCc7XG5pbXBvcnQgeyB1c2VEZWZhdWx0UHJvcHMgfSBmcm9tICcuLi9EZWZhdWx0UHJvcHNQcm92aWRlcic7XG5pbXBvcnQgc3R5bGVkIGZyb20gJy4uL3N0eWxlcy9zdHlsZWQnO1xuaW1wb3J0IHsgZ2V0U3RlcFV0aWxpdHlDbGFzcyB9IGZyb20gJy4vc3RlcENsYXNzZXMnO1xuaW1wb3J0IHsganN4cyBhcyBfanN4cyB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmNvbnN0IHVzZVV0aWxpdHlDbGFzc2VzID0gb3duZXJTdGF0ZSA9PiB7XG4gIGNvbnN0IHtcbiAgICBjbGFzc2VzLFxuICAgIG9yaWVudGF0aW9uLFxuICAgIGFsdGVybmF0aXZlTGFiZWwsXG4gICAgY29tcGxldGVkXG4gIH0gPSBvd25lclN0YXRlO1xuICBjb25zdCBzbG90cyA9IHtcbiAgICByb290OiBbJ3Jvb3QnLCBvcmllbnRhdGlvbiwgYWx0ZXJuYXRpdmVMYWJlbCAmJiAnYWx0ZXJuYXRpdmVMYWJlbCcsIGNvbXBsZXRlZCAmJiAnY29tcGxldGVkJ11cbiAgfTtcbiAgcmV0dXJuIGNvbXBvc2VDbGFzc2VzKHNsb3RzLCBnZXRTdGVwVXRpbGl0eUNsYXNzLCBjbGFzc2VzKTtcbn07XG5jb25zdCBTdGVwUm9vdCA9IHN0eWxlZCgnZGl2Jywge1xuICBuYW1lOiAnTXVpU3RlcCcsXG4gIHNsb3Q6ICdSb290JyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgb3duZXJTdGF0ZVxuICAgIH0gPSBwcm9wcztcbiAgICByZXR1cm4gW3N0eWxlcy5yb290LCBzdHlsZXNbb3duZXJTdGF0ZS5vcmllbnRhdGlvbl0sIG93bmVyU3RhdGUuYWx0ZXJuYXRpdmVMYWJlbCAmJiBzdHlsZXMuYWx0ZXJuYXRpdmVMYWJlbCwgb3duZXJTdGF0ZS5jb21wbGV0ZWQgJiYgc3R5bGVzLmNvbXBsZXRlZF07XG4gIH1cbn0pKCh7XG4gIG93bmVyU3RhdGVcbn0pID0+IF9leHRlbmRzKHt9LCBvd25lclN0YXRlLm9yaWVudGF0aW9uID09PSAnaG9yaXpvbnRhbCcgJiYge1xuICBwYWRkaW5nTGVmdDogOCxcbiAgcGFkZGluZ1JpZ2h0OiA4XG59LCBvd25lclN0YXRlLmFsdGVybmF0aXZlTGFiZWwgJiYge1xuICBmbGV4OiAxLFxuICBwb3NpdGlvbjogJ3JlbGF0aXZlJ1xufSkpO1xuY29uc3QgU3RlcCA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIFN0ZXAoaW5Qcm9wcywgcmVmKSB7XG4gIGNvbnN0IHByb3BzID0gdXNlRGVmYXVsdFByb3BzKHtcbiAgICBwcm9wczogaW5Qcm9wcyxcbiAgICBuYW1lOiAnTXVpU3RlcCdcbiAgfSk7XG4gIGNvbnN0IHtcbiAgICAgIGFjdGl2ZTogYWN0aXZlUHJvcCxcbiAgICAgIGNoaWxkcmVuLFxuICAgICAgY2xhc3NOYW1lLFxuICAgICAgY29tcG9uZW50ID0gJ2RpdicsXG4gICAgICBjb21wbGV0ZWQ6IGNvbXBsZXRlZFByb3AsXG4gICAgICBkaXNhYmxlZDogZGlzYWJsZWRQcm9wLFxuICAgICAgZXhwYW5kZWQgPSBmYWxzZSxcbiAgICAgIGluZGV4LFxuICAgICAgbGFzdFxuICAgIH0gPSBwcm9wcyxcbiAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQpO1xuICBjb25zdCB7XG4gICAgYWN0aXZlU3RlcCxcbiAgICBjb25uZWN0b3IsXG4gICAgYWx0ZXJuYXRpdmVMYWJlbCxcbiAgICBvcmllbnRhdGlvbixcbiAgICBub25MaW5lYXJcbiAgfSA9IFJlYWN0LnVzZUNvbnRleHQoU3RlcHBlckNvbnRleHQpO1xuICBsZXQgW2FjdGl2ZSA9IGZhbHNlLCBjb21wbGV0ZWQgPSBmYWxzZSwgZGlzYWJsZWQgPSBmYWxzZV0gPSBbYWN0aXZlUHJvcCwgY29tcGxldGVkUHJvcCwgZGlzYWJsZWRQcm9wXTtcbiAgaWYgKGFjdGl2ZVN0ZXAgPT09IGluZGV4KSB7XG4gICAgYWN0aXZlID0gYWN0aXZlUHJvcCAhPT0gdW5kZWZpbmVkID8gYWN0aXZlUHJvcCA6IHRydWU7XG4gIH0gZWxzZSBpZiAoIW5vbkxpbmVhciAmJiBhY3RpdmVTdGVwID4gaW5kZXgpIHtcbiAgICBjb21wbGV0ZWQgPSBjb21wbGV0ZWRQcm9wICE9PSB1bmRlZmluZWQgPyBjb21wbGV0ZWRQcm9wIDogdHJ1ZTtcbiAgfSBlbHNlIGlmICghbm9uTGluZWFyICYmIGFjdGl2ZVN0ZXAgPCBpbmRleCkge1xuICAgIGRpc2FibGVkID0gZGlzYWJsZWRQcm9wICE9PSB1bmRlZmluZWQgPyBkaXNhYmxlZFByb3AgOiB0cnVlO1xuICB9XG4gIGNvbnN0IGNvbnRleHRWYWx1ZSA9IFJlYWN0LnVzZU1lbW8oKCkgPT4gKHtcbiAgICBpbmRleCxcbiAgICBsYXN0LFxuICAgIGV4cGFuZGVkLFxuICAgIGljb246IGluZGV4ICsgMSxcbiAgICBhY3RpdmUsXG4gICAgY29tcGxldGVkLFxuICAgIGRpc2FibGVkXG4gIH0pLCBbaW5kZXgsIGxhc3QsIGV4cGFuZGVkLCBhY3RpdmUsIGNvbXBsZXRlZCwgZGlzYWJsZWRdKTtcbiAgY29uc3Qgb3duZXJTdGF0ZSA9IF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgIGFjdGl2ZSxcbiAgICBvcmllbnRhdGlvbixcbiAgICBhbHRlcm5hdGl2ZUxhYmVsLFxuICAgIGNvbXBsZXRlZCxcbiAgICBkaXNhYmxlZCxcbiAgICBleHBhbmRlZCxcbiAgICBjb21wb25lbnRcbiAgfSk7XG4gIGNvbnN0IGNsYXNzZXMgPSB1c2VVdGlsaXR5Q2xhc3Nlcyhvd25lclN0YXRlKTtcbiAgY29uc3QgbmV3Q2hpbGRyZW4gPSAvKiNfX1BVUkVfXyovX2pzeHMoU3RlcFJvb3QsIF9leHRlbmRzKHtcbiAgICBhczogY29tcG9uZW50LFxuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSksXG4gICAgcmVmOiByZWYsXG4gICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZVxuICB9LCBvdGhlciwge1xuICAgIGNoaWxkcmVuOiBbY29ubmVjdG9yICYmIGFsdGVybmF0aXZlTGFiZWwgJiYgaW5kZXggIT09IDAgPyBjb25uZWN0b3IgOiBudWxsLCBjaGlsZHJlbl1cbiAgfSkpO1xuICByZXR1cm4gLyojX19QVVJFX18qL19qc3goU3RlcENvbnRleHQuUHJvdmlkZXIsIHtcbiAgICB2YWx1ZTogY29udGV4dFZhbHVlLFxuICAgIGNoaWxkcmVuOiBjb25uZWN0b3IgJiYgIWFsdGVybmF0aXZlTGFiZWwgJiYgaW5kZXggIT09IDAgPyAvKiNfX1BVUkVfXyovX2pzeHMoUmVhY3QuRnJhZ21lbnQsIHtcbiAgICAgIGNoaWxkcmVuOiBbY29ubmVjdG9yLCBuZXdDaGlsZHJlbl1cbiAgICB9KSA6IG5ld0NoaWxkcmVuXG4gIH0pO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBTdGVwLnByb3BUeXBlcyAvKiByZW1vdmUtcHJvcHR5cGVzICovID0ge1xuICAvLyDilIzilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIAgV2FybmluZyDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJBcbiAgLy8g4pSCIFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucy4g4pSCXG4gIC8vIOKUgiAgICBUbyB1cGRhdGUgdGhlbSwgZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gYHBucG0gcHJvcHR5cGVzYC4gICAgIOKUglxuICAvLyDilJTilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJhcbiAgLyoqXG4gICAqIFNldHMgdGhlIHN0ZXAgYXMgYWN0aXZlLiBJcyBwYXNzZWQgdG8gY2hpbGQgY29tcG9uZW50cy5cbiAgICovXG4gIGFjdGl2ZTogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBTaG91bGQgYmUgYFN0ZXBgIHN1Yi1jb21wb25lbnRzIHN1Y2ggYXMgYFN0ZXBMYWJlbGAsIGBTdGVwQ29udGVudGAuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogTWFyayB0aGUgc3RlcCBhcyBjb21wbGV0ZWQuIElzIHBhc3NlZCB0byBjaGlsZCBjb21wb25lbnRzLlxuICAgKi9cbiAgY29tcGxldGVkOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHJvb3Qgbm9kZS5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIEhUTUwgZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgc3RlcCBpcyBkaXNhYmxlZCwgd2lsbCBhbHNvIGRpc2FibGUgdGhlIGJ1dHRvbiBpZlxuICAgKiBgU3RlcEJ1dHRvbmAgaXMgYSBjaGlsZCBvZiBgU3RlcGAuIElzIHBhc3NlZCB0byBjaGlsZCBjb21wb25lbnRzLlxuICAgKi9cbiAgZGlzYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogRXhwYW5kIHRoZSBzdGVwLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZXhwYW5kZWQ6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogVGhlIHBvc2l0aW9uIG9mIHRoZSBzdGVwLlxuICAgKiBUaGUgcHJvcCBkZWZhdWx0cyB0byB0aGUgdmFsdWUgaW5oZXJpdGVkIGZyb20gdGhlIHBhcmVudCBTdGVwcGVyIGNvbXBvbmVudC5cbiAgICovXG4gIGluZGV4OiBpbnRlZ2VyUHJvcFR5cGUsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBTdGVwIGlzIGRpc3BsYXllZCBhcyByZW5kZXJlZCBsYXN0LlxuICAgKiBUaGUgcHJvcCBkZWZhdWx0cyB0byB0aGUgdmFsdWUgaW5oZXJpdGVkIGZyb20gdGhlIHBhcmVudCBTdGVwcGVyIGNvbXBvbmVudC5cbiAgICovXG4gIGxhc3Q6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogVGhlIHN5c3RlbSBwcm9wIHRoYXQgYWxsb3dzIGRlZmluaW5nIHN5c3RlbSBvdmVycmlkZXMgYXMgd2VsbCBhcyBhZGRpdGlvbmFsIENTUyBzdHlsZXMuXG4gICAqL1xuICBzeDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5ib29sXSkpLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgU3RlcDsiLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBjcmVhdGVTdmdJY29uIGZyb20gJy4uLy4uL3V0aWxzL2NyZWF0ZVN2Z0ljb24nO1xuXG4vKipcbiAqIEBpZ25vcmUgLSBpbnRlcm5hbCBjb21wb25lbnQuXG4gKi9cbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5leHBvcnQgZGVmYXVsdCBjcmVhdGVTdmdJY29uKCAvKiNfX1BVUkVfXyovX2pzeChcInBhdGhcIiwge1xuICBkOiBcIk0xMiAwYTEyIDEyIDAgMSAwIDAgMjQgMTIgMTIgMCAwIDAgMC0yNHptLTIgMTdsLTUtNSAxLjQtMS40IDMuNiAzLjYgNy42LTcuNkwxOSA4bC05IDl6XCJcbn0pLCAnQ2hlY2tDaXJjbGUnKTsiLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBjcmVhdGVTdmdJY29uIGZyb20gJy4uLy4uL3V0aWxzL2NyZWF0ZVN2Z0ljb24nO1xuXG4vKipcbiAqIEBpZ25vcmUgLSBpbnRlcm5hbCBjb21wb25lbnQuXG4gKi9cbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5leHBvcnQgZGVmYXVsdCBjcmVhdGVTdmdJY29uKCAvKiNfX1BVUkVfXyovX2pzeChcInBhdGhcIiwge1xuICBkOiBcIk0xIDIxaDIyTDEyIDIgMSAyMXptMTItM2gtMnYtMmgydjJ6bTAtNGgtMnYtNGgydjR6XCJcbn0pLCAnV2FybmluZycpOyIsImltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3Nlcyc7XG5pbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3MgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzcyc7XG5leHBvcnQgZnVuY3Rpb24gZ2V0U3RlcEljb25VdGlsaXR5Q2xhc3Moc2xvdCkge1xuICByZXR1cm4gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoJ011aVN0ZXBJY29uJywgc2xvdCk7XG59XG5jb25zdCBzdGVwSWNvbkNsYXNzZXMgPSBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzKCdNdWlTdGVwSWNvbicsIFsncm9vdCcsICdhY3RpdmUnLCAnY29tcGxldGVkJywgJ2Vycm9yJywgJ3RleHQnXSk7XG5leHBvcnQgZGVmYXVsdCBzdGVwSWNvbkNsYXNzZXM7IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xudmFyIF9jaXJjbGU7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJhY3RpdmVcIiwgXCJjbGFzc05hbWVcIiwgXCJjb21wbGV0ZWRcIiwgXCJlcnJvclwiLCBcImljb25cIl07XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgY29tcG9zZUNsYXNzZXMgZnJvbSAnQG11aS91dGlscy9jb21wb3NlQ2xhc3Nlcyc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJy4uL3N0eWxlcy9zdHlsZWQnO1xuaW1wb3J0IHsgdXNlRGVmYXVsdFByb3BzIH0gZnJvbSAnLi4vRGVmYXVsdFByb3BzUHJvdmlkZXInO1xuaW1wb3J0IENoZWNrQ2lyY2xlIGZyb20gJy4uL2ludGVybmFsL3N2Zy1pY29ucy9DaGVja0NpcmNsZSc7XG5pbXBvcnQgV2FybmluZyBmcm9tICcuLi9pbnRlcm5hbC9zdmctaWNvbnMvV2FybmluZyc7XG5pbXBvcnQgU3ZnSWNvbiBmcm9tICcuLi9TdmdJY29uJztcbmltcG9ydCBzdGVwSWNvbkNsYXNzZXMsIHsgZ2V0U3RlcEljb25VdGlsaXR5Q2xhc3MgfSBmcm9tICcuL3N0ZXBJY29uQ2xhc3Nlcyc7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuaW1wb3J0IHsganN4cyBhcyBfanN4cyB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuY29uc3QgdXNlVXRpbGl0eUNsYXNzZXMgPSBvd25lclN0YXRlID0+IHtcbiAgY29uc3Qge1xuICAgIGNsYXNzZXMsXG4gICAgYWN0aXZlLFxuICAgIGNvbXBsZXRlZCxcbiAgICBlcnJvclxuICB9ID0gb3duZXJTdGF0ZTtcbiAgY29uc3Qgc2xvdHMgPSB7XG4gICAgcm9vdDogWydyb290JywgYWN0aXZlICYmICdhY3RpdmUnLCBjb21wbGV0ZWQgJiYgJ2NvbXBsZXRlZCcsIGVycm9yICYmICdlcnJvciddLFxuICAgIHRleHQ6IFsndGV4dCddXG4gIH07XG4gIHJldHVybiBjb21wb3NlQ2xhc3NlcyhzbG90cywgZ2V0U3RlcEljb25VdGlsaXR5Q2xhc3MsIGNsYXNzZXMpO1xufTtcbmNvbnN0IFN0ZXBJY29uUm9vdCA9IHN0eWxlZChTdmdJY29uLCB7XG4gIG5hbWU6ICdNdWlTdGVwSWNvbicsXG4gIHNsb3Q6ICdSb290JyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiBzdHlsZXMucm9vdFxufSkoKHtcbiAgdGhlbWVcbn0pID0+ICh7XG4gIGRpc3BsYXk6ICdibG9jaycsXG4gIHRyYW5zaXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZSgnY29sb3InLCB7XG4gICAgZHVyYXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmR1cmF0aW9uLnNob3J0ZXN0XG4gIH0pLFxuICBjb2xvcjogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGUudGV4dC5kaXNhYmxlZCxcbiAgW2AmLiR7c3RlcEljb25DbGFzc2VzLmNvbXBsZXRlZH1gXToge1xuICAgIGNvbG9yOiAodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZS5wcmltYXJ5Lm1haW5cbiAgfSxcbiAgW2AmLiR7c3RlcEljb25DbGFzc2VzLmFjdGl2ZX1gXToge1xuICAgIGNvbG9yOiAodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZS5wcmltYXJ5Lm1haW5cbiAgfSxcbiAgW2AmLiR7c3RlcEljb25DbGFzc2VzLmVycm9yfWBdOiB7XG4gICAgY29sb3I6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlLmVycm9yLm1haW5cbiAgfVxufSkpO1xuY29uc3QgU3RlcEljb25UZXh0ID0gc3R5bGVkKCd0ZXh0Jywge1xuICBuYW1lOiAnTXVpU3RlcEljb24nLFxuICBzbG90OiAnVGV4dCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4gc3R5bGVzLnRleHRcbn0pKCh7XG4gIHRoZW1lXG59KSA9PiAoe1xuICBmaWxsOiAodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZS5wcmltYXJ5LmNvbnRyYXN0VGV4dCxcbiAgZm9udFNpemU6IHRoZW1lLnR5cG9ncmFwaHkuY2FwdGlvbi5mb250U2l6ZSxcbiAgZm9udEZhbWlseTogdGhlbWUudHlwb2dyYXBoeS5mb250RmFtaWx5XG59KSk7XG5jb25zdCBTdGVwSWNvbiA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIFN0ZXBJY29uKGluUHJvcHMsIHJlZikge1xuICBjb25zdCBwcm9wcyA9IHVzZURlZmF1bHRQcm9wcyh7XG4gICAgcHJvcHM6IGluUHJvcHMsXG4gICAgbmFtZTogJ011aVN0ZXBJY29uJ1xuICB9KTtcbiAgY29uc3Qge1xuICAgICAgYWN0aXZlID0gZmFsc2UsXG4gICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZVByb3AsXG4gICAgICBjb21wbGV0ZWQgPSBmYWxzZSxcbiAgICAgIGVycm9yID0gZmFsc2UsXG4gICAgICBpY29uXG4gICAgfSA9IHByb3BzLFxuICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIF9leGNsdWRlZCk7XG4gIGNvbnN0IG93bmVyU3RhdGUgPSBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICBhY3RpdmUsXG4gICAgY29tcGxldGVkLFxuICAgIGVycm9yXG4gIH0pO1xuICBjb25zdCBjbGFzc2VzID0gdXNlVXRpbGl0eUNsYXNzZXMob3duZXJTdGF0ZSk7XG4gIGlmICh0eXBlb2YgaWNvbiA9PT0gJ251bWJlcicgfHwgdHlwZW9mIGljb24gPT09ICdzdHJpbmcnKSB7XG4gICAgY29uc3QgY2xhc3NOYW1lID0gY2xzeChjbGFzc05hbWVQcm9wLCBjbGFzc2VzLnJvb3QpO1xuICAgIGlmIChlcnJvcikge1xuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KFN0ZXBJY29uUm9vdCwgX2V4dGVuZHMoe1xuICAgICAgICBhczogV2FybmluZyxcbiAgICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWUsXG4gICAgICAgIHJlZjogcmVmLFxuICAgICAgICBvd25lclN0YXRlOiBvd25lclN0YXRlXG4gICAgICB9LCBvdGhlcikpO1xuICAgIH1cbiAgICBpZiAoY29tcGxldGVkKSB7XG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL19qc3goU3RlcEljb25Sb290LCBfZXh0ZW5kcyh7XG4gICAgICAgIGFzOiBDaGVja0NpcmNsZSxcbiAgICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWUsXG4gICAgICAgIHJlZjogcmVmLFxuICAgICAgICBvd25lclN0YXRlOiBvd25lclN0YXRlXG4gICAgICB9LCBvdGhlcikpO1xuICAgIH1cbiAgICByZXR1cm4gLyojX19QVVJFX18qL19qc3hzKFN0ZXBJY29uUm9vdCwgX2V4dGVuZHMoe1xuICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWUsXG4gICAgICByZWY6IHJlZixcbiAgICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGVcbiAgICB9LCBvdGhlciwge1xuICAgICAgY2hpbGRyZW46IFtfY2lyY2xlIHx8IChfY2lyY2xlID0gLyojX19QVVJFX18qL19qc3goXCJjaXJjbGVcIiwge1xuICAgICAgICBjeDogXCIxMlwiLFxuICAgICAgICBjeTogXCIxMlwiLFxuICAgICAgICByOiBcIjEyXCJcbiAgICAgIH0pKSwgLyojX19QVVJFX18qL19qc3goU3RlcEljb25UZXh0LCB7XG4gICAgICAgIGNsYXNzTmFtZTogY2xhc3Nlcy50ZXh0LFxuICAgICAgICB4OiBcIjEyXCIsXG4gICAgICAgIHk6IFwiMTJcIixcbiAgICAgICAgdGV4dEFuY2hvcjogXCJtaWRkbGVcIixcbiAgICAgICAgZG9taW5hbnRCYXNlbGluZTogXCJjZW50cmFsXCIsXG4gICAgICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGUsXG4gICAgICAgIGNoaWxkcmVuOiBpY29uXG4gICAgICB9KV1cbiAgICB9KSk7XG4gIH1cbiAgcmV0dXJuIGljb247XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFN0ZXBJY29uLnByb3BUeXBlcyAvKiByZW1vdmUtcHJvcHR5cGVzICovID0ge1xuICAvLyDilIzilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIAgV2FybmluZyDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJBcbiAgLy8g4pSCIFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucy4g4pSCXG4gIC8vIOKUgiAgICBUbyB1cGRhdGUgdGhlbSwgZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gYHBucG0gcHJvcHR5cGVzYC4gICAgIOKUglxuICAvLyDilJTilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJhcbiAgLyoqXG4gICAqIFdoZXRoZXIgdGhpcyBzdGVwIGlzIGFjdGl2ZS5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGFjdGl2ZTogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogTWFyayB0aGUgc3RlcCBhcyBjb21wbGV0ZWQuIElzIHBhc3NlZCB0byBjaGlsZCBjb21wb25lbnRzLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgY29tcGxldGVkOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIHN0ZXAgaXMgbWFya2VkIGFzIGZhaWxlZC5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGVycm9yOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIFRoZSBsYWJlbCBkaXNwbGF5ZWQgaW4gdGhlIHN0ZXAgaWNvbi5cbiAgICovXG4gIGljb246IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogVGhlIHN5c3RlbSBwcm9wIHRoYXQgYWxsb3dzIGRlZmluaW5nIHN5c3RlbSBvdmVycmlkZXMgYXMgd2VsbCBhcyBhZGRpdGlvbmFsIENTUyBzdHlsZXMuXG4gICAqL1xuICBzeDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5ib29sXSkpLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgU3RlcEljb247IiwiaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzc2VzJztcbmltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzJztcbmV4cG9ydCBmdW5jdGlvbiBnZXRTdGVwTGFiZWxVdGlsaXR5Q2xhc3Moc2xvdCkge1xuICByZXR1cm4gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoJ011aVN0ZXBMYWJlbCcsIHNsb3QpO1xufVxuY29uc3Qgc3RlcExhYmVsQ2xhc3NlcyA9IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMoJ011aVN0ZXBMYWJlbCcsIFsncm9vdCcsICdob3Jpem9udGFsJywgJ3ZlcnRpY2FsJywgJ2xhYmVsJywgJ2FjdGl2ZScsICdjb21wbGV0ZWQnLCAnZXJyb3InLCAnZGlzYWJsZWQnLCAnaWNvbkNvbnRhaW5lcicsICdhbHRlcm5hdGl2ZUxhYmVsJywgJ2xhYmVsQ29udGFpbmVyJ10pO1xuZXhwb3J0IGRlZmF1bHQgc3RlcExhYmVsQ2xhc3NlczsiLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJjaGlsZHJlblwiLCBcImNsYXNzTmFtZVwiLCBcImNvbXBvbmVudHNQcm9wc1wiLCBcImVycm9yXCIsIFwiaWNvblwiLCBcIm9wdGlvbmFsXCIsIFwic2xvdFByb3BzXCIsIFwiU3RlcEljb25Db21wb25lbnRcIiwgXCJTdGVwSWNvblByb3BzXCJdO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IGNvbXBvc2VDbGFzc2VzIGZyb20gJ0BtdWkvdXRpbHMvY29tcG9zZUNsYXNzZXMnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICcuLi9zdHlsZXMvc3R5bGVkJztcbmltcG9ydCB7IHVzZURlZmF1bHRQcm9wcyB9IGZyb20gJy4uL0RlZmF1bHRQcm9wc1Byb3ZpZGVyJztcbmltcG9ydCBTdGVwSWNvbiBmcm9tICcuLi9TdGVwSWNvbic7XG5pbXBvcnQgU3RlcHBlckNvbnRleHQgZnJvbSAnLi4vU3RlcHBlci9TdGVwcGVyQ29udGV4dCc7XG5pbXBvcnQgU3RlcENvbnRleHQgZnJvbSAnLi4vU3RlcC9TdGVwQ29udGV4dCc7XG5pbXBvcnQgc3RlcExhYmVsQ2xhc3NlcywgeyBnZXRTdGVwTGFiZWxVdGlsaXR5Q2xhc3MgfSBmcm9tICcuL3N0ZXBMYWJlbENsYXNzZXMnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmltcG9ydCB7IGpzeHMgYXMgX2pzeHMgfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmNvbnN0IHVzZVV0aWxpdHlDbGFzc2VzID0gb3duZXJTdGF0ZSA9PiB7XG4gIGNvbnN0IHtcbiAgICBjbGFzc2VzLFxuICAgIG9yaWVudGF0aW9uLFxuICAgIGFjdGl2ZSxcbiAgICBjb21wbGV0ZWQsXG4gICAgZXJyb3IsXG4gICAgZGlzYWJsZWQsXG4gICAgYWx0ZXJuYXRpdmVMYWJlbFxuICB9ID0gb3duZXJTdGF0ZTtcbiAgY29uc3Qgc2xvdHMgPSB7XG4gICAgcm9vdDogWydyb290Jywgb3JpZW50YXRpb24sIGVycm9yICYmICdlcnJvcicsIGRpc2FibGVkICYmICdkaXNhYmxlZCcsIGFsdGVybmF0aXZlTGFiZWwgJiYgJ2FsdGVybmF0aXZlTGFiZWwnXSxcbiAgICBsYWJlbDogWydsYWJlbCcsIGFjdGl2ZSAmJiAnYWN0aXZlJywgY29tcGxldGVkICYmICdjb21wbGV0ZWQnLCBlcnJvciAmJiAnZXJyb3InLCBkaXNhYmxlZCAmJiAnZGlzYWJsZWQnLCBhbHRlcm5hdGl2ZUxhYmVsICYmICdhbHRlcm5hdGl2ZUxhYmVsJ10sXG4gICAgaWNvbkNvbnRhaW5lcjogWydpY29uQ29udGFpbmVyJywgYWN0aXZlICYmICdhY3RpdmUnLCBjb21wbGV0ZWQgJiYgJ2NvbXBsZXRlZCcsIGVycm9yICYmICdlcnJvcicsIGRpc2FibGVkICYmICdkaXNhYmxlZCcsIGFsdGVybmF0aXZlTGFiZWwgJiYgJ2FsdGVybmF0aXZlTGFiZWwnXSxcbiAgICBsYWJlbENvbnRhaW5lcjogWydsYWJlbENvbnRhaW5lcicsIGFsdGVybmF0aXZlTGFiZWwgJiYgJ2FsdGVybmF0aXZlTGFiZWwnXVxuICB9O1xuICByZXR1cm4gY29tcG9zZUNsYXNzZXMoc2xvdHMsIGdldFN0ZXBMYWJlbFV0aWxpdHlDbGFzcywgY2xhc3Nlcyk7XG59O1xuY29uc3QgU3RlcExhYmVsUm9vdCA9IHN0eWxlZCgnc3BhbicsIHtcbiAgbmFtZTogJ011aVN0ZXBMYWJlbCcsXG4gIHNsb3Q6ICdSb290JyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgb3duZXJTdGF0ZVxuICAgIH0gPSBwcm9wcztcbiAgICByZXR1cm4gW3N0eWxlcy5yb290LCBzdHlsZXNbb3duZXJTdGF0ZS5vcmllbnRhdGlvbl1dO1xuICB9XG59KSgoe1xuICBvd25lclN0YXRlXG59KSA9PiBfZXh0ZW5kcyh7XG4gIGRpc3BsYXk6ICdmbGV4JyxcbiAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gIFtgJi4ke3N0ZXBMYWJlbENsYXNzZXMuYWx0ZXJuYXRpdmVMYWJlbH1gXToge1xuICAgIGZsZXhEaXJlY3Rpb246ICdjb2x1bW4nXG4gIH0sXG4gIFtgJi4ke3N0ZXBMYWJlbENsYXNzZXMuZGlzYWJsZWR9YF06IHtcbiAgICBjdXJzb3I6ICdkZWZhdWx0J1xuICB9XG59LCBvd25lclN0YXRlLm9yaWVudGF0aW9uID09PSAndmVydGljYWwnICYmIHtcbiAgdGV4dEFsaWduOiAnbGVmdCcsXG4gIHBhZGRpbmc6ICc4cHggMCdcbn0pKTtcbmNvbnN0IFN0ZXBMYWJlbExhYmVsID0gc3R5bGVkKCdzcGFuJywge1xuICBuYW1lOiAnTXVpU3RlcExhYmVsJyxcbiAgc2xvdDogJ0xhYmVsJyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiBzdHlsZXMubGFiZWxcbn0pKCh7XG4gIHRoZW1lXG59KSA9PiBfZXh0ZW5kcyh7fSwgdGhlbWUudHlwb2dyYXBoeS5ib2R5Miwge1xuICBkaXNwbGF5OiAnYmxvY2snLFxuICB0cmFuc2l0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoJ2NvbG9yJywge1xuICAgIGR1cmF0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5kdXJhdGlvbi5zaG9ydGVzdFxuICB9KSxcbiAgW2AmLiR7c3RlcExhYmVsQ2xhc3Nlcy5hY3RpdmV9YF06IHtcbiAgICBjb2xvcjogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGUudGV4dC5wcmltYXJ5LFxuICAgIGZvbnRXZWlnaHQ6IDUwMFxuICB9LFxuICBbYCYuJHtzdGVwTGFiZWxDbGFzc2VzLmNvbXBsZXRlZH1gXToge1xuICAgIGNvbG9yOiAodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZS50ZXh0LnByaW1hcnksXG4gICAgZm9udFdlaWdodDogNTAwXG4gIH0sXG4gIFtgJi4ke3N0ZXBMYWJlbENsYXNzZXMuYWx0ZXJuYXRpdmVMYWJlbH1gXToge1xuICAgIG1hcmdpblRvcDogMTZcbiAgfSxcbiAgW2AmLiR7c3RlcExhYmVsQ2xhc3Nlcy5lcnJvcn1gXToge1xuICAgIGNvbG9yOiAodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZS5lcnJvci5tYWluXG4gIH1cbn0pKTtcbmNvbnN0IFN0ZXBMYWJlbEljb25Db250YWluZXIgPSBzdHlsZWQoJ3NwYW4nLCB7XG4gIG5hbWU6ICdNdWlTdGVwTGFiZWwnLFxuICBzbG90OiAnSWNvbkNvbnRhaW5lcicsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4gc3R5bGVzLmljb25Db250YWluZXJcbn0pKCgpID0+ICh7XG4gIGZsZXhTaHJpbms6IDAsXG4gIC8vIEZpeCBJRTExIGlzc3VlXG4gIGRpc3BsYXk6ICdmbGV4JyxcbiAgcGFkZGluZ1JpZ2h0OiA4LFxuICBbYCYuJHtzdGVwTGFiZWxDbGFzc2VzLmFsdGVybmF0aXZlTGFiZWx9YF06IHtcbiAgICBwYWRkaW5nUmlnaHQ6IDBcbiAgfVxufSkpO1xuY29uc3QgU3RlcExhYmVsTGFiZWxDb250YWluZXIgPSBzdHlsZWQoJ3NwYW4nLCB7XG4gIG5hbWU6ICdNdWlTdGVwTGFiZWwnLFxuICBzbG90OiAnTGFiZWxDb250YWluZXInLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHN0eWxlcy5sYWJlbENvbnRhaW5lclxufSkoKHtcbiAgdGhlbWVcbn0pID0+ICh7XG4gIHdpZHRoOiAnMTAwJScsXG4gIGNvbG9yOiAodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZS50ZXh0LnNlY29uZGFyeSxcbiAgW2AmLiR7c3RlcExhYmVsQ2xhc3Nlcy5hbHRlcm5hdGl2ZUxhYmVsfWBdOiB7XG4gICAgdGV4dEFsaWduOiAnY2VudGVyJ1xuICB9XG59KSk7XG5jb25zdCBTdGVwTGFiZWwgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBTdGVwTGFiZWwoaW5Qcm9wcywgcmVmKSB7XG4gIHZhciBfc2xvdFByb3BzJGxhYmVsO1xuICBjb25zdCBwcm9wcyA9IHVzZURlZmF1bHRQcm9wcyh7XG4gICAgcHJvcHM6IGluUHJvcHMsXG4gICAgbmFtZTogJ011aVN0ZXBMYWJlbCdcbiAgfSk7XG4gIGNvbnN0IHtcbiAgICAgIGNoaWxkcmVuLFxuICAgICAgY2xhc3NOYW1lLFxuICAgICAgY29tcG9uZW50c1Byb3BzID0ge30sXG4gICAgICBlcnJvciA9IGZhbHNlLFxuICAgICAgaWNvbjogaWNvblByb3AsXG4gICAgICBvcHRpb25hbCxcbiAgICAgIHNsb3RQcm9wcyA9IHt9LFxuICAgICAgU3RlcEljb25Db21wb25lbnQ6IFN0ZXBJY29uQ29tcG9uZW50UHJvcCxcbiAgICAgIFN0ZXBJY29uUHJvcHNcbiAgICB9ID0gcHJvcHMsXG4gICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkKTtcbiAgY29uc3Qge1xuICAgIGFsdGVybmF0aXZlTGFiZWwsXG4gICAgb3JpZW50YXRpb25cbiAgfSA9IFJlYWN0LnVzZUNvbnRleHQoU3RlcHBlckNvbnRleHQpO1xuICBjb25zdCB7XG4gICAgYWN0aXZlLFxuICAgIGRpc2FibGVkLFxuICAgIGNvbXBsZXRlZCxcbiAgICBpY29uOiBpY29uQ29udGV4dFxuICB9ID0gUmVhY3QudXNlQ29udGV4dChTdGVwQ29udGV4dCk7XG4gIGNvbnN0IGljb24gPSBpY29uUHJvcCB8fCBpY29uQ29udGV4dDtcbiAgbGV0IFN0ZXBJY29uQ29tcG9uZW50ID0gU3RlcEljb25Db21wb25lbnRQcm9wO1xuICBpZiAoaWNvbiAmJiAhU3RlcEljb25Db21wb25lbnQpIHtcbiAgICBTdGVwSWNvbkNvbXBvbmVudCA9IFN0ZXBJY29uO1xuICB9XG4gIGNvbnN0IG93bmVyU3RhdGUgPSBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICBhY3RpdmUsXG4gICAgYWx0ZXJuYXRpdmVMYWJlbCxcbiAgICBjb21wbGV0ZWQsXG4gICAgZGlzYWJsZWQsXG4gICAgZXJyb3IsXG4gICAgb3JpZW50YXRpb25cbiAgfSk7XG4gIGNvbnN0IGNsYXNzZXMgPSB1c2VVdGlsaXR5Q2xhc3Nlcyhvd25lclN0YXRlKTtcbiAgY29uc3QgbGFiZWxTbG90UHJvcHMgPSAoX3Nsb3RQcm9wcyRsYWJlbCA9IHNsb3RQcm9wcy5sYWJlbCkgIT0gbnVsbCA/IF9zbG90UHJvcHMkbGFiZWwgOiBjb21wb25lbnRzUHJvcHMubGFiZWw7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeHMoU3RlcExhYmVsUm9vdCwgX2V4dGVuZHMoe1xuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSksXG4gICAgcmVmOiByZWYsXG4gICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZVxuICB9LCBvdGhlciwge1xuICAgIGNoaWxkcmVuOiBbaWNvbiB8fCBTdGVwSWNvbkNvbXBvbmVudCA/IC8qI19fUFVSRV9fKi9fanN4KFN0ZXBMYWJlbEljb25Db250YWluZXIsIHtcbiAgICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5pY29uQ29udGFpbmVyLFxuICAgICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZSxcbiAgICAgIGNoaWxkcmVuOiAvKiNfX1BVUkVfXyovX2pzeChTdGVwSWNvbkNvbXBvbmVudCwgX2V4dGVuZHMoe1xuICAgICAgICBjb21wbGV0ZWQ6IGNvbXBsZXRlZCxcbiAgICAgICAgYWN0aXZlOiBhY3RpdmUsXG4gICAgICAgIGVycm9yOiBlcnJvcixcbiAgICAgICAgaWNvbjogaWNvblxuICAgICAgfSwgU3RlcEljb25Qcm9wcykpXG4gICAgfSkgOiBudWxsLCAvKiNfX1BVUkVfXyovX2pzeHMoU3RlcExhYmVsTGFiZWxDb250YWluZXIsIHtcbiAgICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5sYWJlbENvbnRhaW5lcixcbiAgICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGUsXG4gICAgICBjaGlsZHJlbjogW2NoaWxkcmVuID8gLyojX19QVVJFX18qL19qc3goU3RlcExhYmVsTGFiZWwsIF9leHRlbmRzKHtcbiAgICAgICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZVxuICAgICAgfSwgbGFiZWxTbG90UHJvcHMsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMubGFiZWwsIGxhYmVsU2xvdFByb3BzID09IG51bGwgPyB2b2lkIDAgOiBsYWJlbFNsb3RQcm9wcy5jbGFzc05hbWUpLFxuICAgICAgICBjaGlsZHJlbjogY2hpbGRyZW5cbiAgICAgIH0pKSA6IG51bGwsIG9wdGlvbmFsXVxuICAgIH0pXVxuICB9KSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFN0ZXBMYWJlbC5wcm9wVHlwZXMgLyogcmVtb3ZlLXByb3B0eXBlcyAqLyA9IHtcbiAgLy8g4pSM4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAIFdhcm5pbmcg4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSQXG4gIC8vIOKUgiBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMuIOKUglxuICAvLyDilIIgICAgVG8gdXBkYXRlIHRoZW0sIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIGBwbnBtIHByb3B0eXBlc2AuICAgICDilIJcbiAgLy8g4pSU4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSYXG4gIC8qKlxuICAgKiBJbiBtb3N0IGNhc2VzIHdpbGwgc2ltcGx5IGJlIGEgc3RyaW5nIGNvbnRhaW5pbmcgYSB0aXRsZSBmb3IgdGhlIGxhYmVsLlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIFRoZSBwcm9wcyB1c2VkIGZvciBlYWNoIHNsb3QgaW5zaWRlLlxuICAgKiBAZGVmYXVsdCB7fVxuICAgKi9cbiAgY29tcG9uZW50c1Byb3BzOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGxhYmVsOiBQcm9wVHlwZXMub2JqZWN0XG4gIH0pLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgc3RlcCBpcyBtYXJrZWQgYXMgZmFpbGVkLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZXJyb3I6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogT3ZlcnJpZGUgdGhlIGRlZmF1bHQgbGFiZWwgb2YgdGhlIHN0ZXAgaWNvbi5cbiAgICovXG4gIGljb246IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogVGhlIG9wdGlvbmFsIG5vZGUgdG8gZGlzcGxheS5cbiAgICovXG4gIG9wdGlvbmFsOiBQcm9wVHlwZXMubm9kZSxcbiAgLyoqXG4gICAqIFRoZSBwcm9wcyB1c2VkIGZvciBlYWNoIHNsb3QgaW5zaWRlLlxuICAgKiBAZGVmYXVsdCB7fVxuICAgKi9cbiAgc2xvdFByb3BzOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGxhYmVsOiBQcm9wVHlwZXMub2JqZWN0XG4gIH0pLFxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB0byByZW5kZXIgaW4gcGxhY2Ugb2YgdGhlIFtgU3RlcEljb25gXSgvbWF0ZXJpYWwtdWkvYXBpL3N0ZXAtaWNvbi8pLlxuICAgKi9cbiAgU3RlcEljb25Db21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcbiAgLyoqXG4gICAqIFByb3BzIGFwcGxpZWQgdG8gdGhlIFtgU3RlcEljb25gXSgvbWF0ZXJpYWwtdWkvYXBpL3N0ZXAtaWNvbi8pIGVsZW1lbnQuXG4gICAqL1xuICBTdGVwSWNvblByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogVGhlIHN5c3RlbSBwcm9wIHRoYXQgYWxsb3dzIGRlZmluaW5nIHN5c3RlbSBvdmVycmlkZXMgYXMgd2VsbCBhcyBhZGRpdGlvbmFsIENTUyBzdHlsZXMuXG4gICAqL1xuICBzeDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5ib29sXSkpLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pXG59IDogdm9pZCAwO1xuU3RlcExhYmVsLm11aU5hbWUgPSAnU3RlcExhYmVsJztcbmV4cG9ydCBkZWZhdWx0IFN0ZXBMYWJlbDsiLCJpbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzZXMnO1xuaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3MnO1xuZXhwb3J0IGZ1bmN0aW9uIGdldFN0ZXBCdXR0b25VdGlsaXR5Q2xhc3Moc2xvdCkge1xuICByZXR1cm4gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoJ011aVN0ZXBCdXR0b24nLCBzbG90KTtcbn1cbmNvbnN0IHN0ZXBCdXR0b25DbGFzc2VzID0gZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcygnTXVpU3RlcEJ1dHRvbicsIFsncm9vdCcsICdob3Jpem9udGFsJywgJ3ZlcnRpY2FsJywgJ3RvdWNoUmlwcGxlJ10pO1xuZXhwb3J0IGRlZmF1bHQgc3RlcEJ1dHRvbkNsYXNzZXM7IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiY2hpbGRyZW5cIiwgXCJjbGFzc05hbWVcIiwgXCJpY29uXCIsIFwib3B0aW9uYWxcIl07XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgY29tcG9zZUNsYXNzZXMgZnJvbSAnQG11aS91dGlscy9jb21wb3NlQ2xhc3Nlcyc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJy4uL3N0eWxlcy9zdHlsZWQnO1xuaW1wb3J0IHsgdXNlRGVmYXVsdFByb3BzIH0gZnJvbSAnLi4vRGVmYXVsdFByb3BzUHJvdmlkZXInO1xuaW1wb3J0IEJ1dHRvbkJhc2UgZnJvbSAnLi4vQnV0dG9uQmFzZSc7XG5pbXBvcnQgU3RlcExhYmVsIGZyb20gJy4uL1N0ZXBMYWJlbCc7XG5pbXBvcnQgaXNNdWlFbGVtZW50IGZyb20gJy4uL3V0aWxzL2lzTXVpRWxlbWVudCc7XG5pbXBvcnQgU3RlcHBlckNvbnRleHQgZnJvbSAnLi4vU3RlcHBlci9TdGVwcGVyQ29udGV4dCc7XG5pbXBvcnQgU3RlcENvbnRleHQgZnJvbSAnLi4vU3RlcC9TdGVwQ29udGV4dCc7XG5pbXBvcnQgc3RlcEJ1dHRvbkNsYXNzZXMsIHsgZ2V0U3RlcEJ1dHRvblV0aWxpdHlDbGFzcyB9IGZyb20gJy4vc3RlcEJ1dHRvbkNsYXNzZXMnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmNvbnN0IHVzZVV0aWxpdHlDbGFzc2VzID0gb3duZXJTdGF0ZSA9PiB7XG4gIGNvbnN0IHtcbiAgICBjbGFzc2VzLFxuICAgIG9yaWVudGF0aW9uXG4gIH0gPSBvd25lclN0YXRlO1xuICBjb25zdCBzbG90cyA9IHtcbiAgICByb290OiBbJ3Jvb3QnLCBvcmllbnRhdGlvbl0sXG4gICAgdG91Y2hSaXBwbGU6IFsndG91Y2hSaXBwbGUnXVxuICB9O1xuICByZXR1cm4gY29tcG9zZUNsYXNzZXMoc2xvdHMsIGdldFN0ZXBCdXR0b25VdGlsaXR5Q2xhc3MsIGNsYXNzZXMpO1xufTtcbmNvbnN0IFN0ZXBCdXR0b25Sb290ID0gc3R5bGVkKEJ1dHRvbkJhc2UsIHtcbiAgbmFtZTogJ011aVN0ZXBCdXR0b24nLFxuICBzbG90OiAnUm9vdCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9ID0gcHJvcHM7XG4gICAgcmV0dXJuIFt7XG4gICAgICBbYCYgLiR7c3RlcEJ1dHRvbkNsYXNzZXMudG91Y2hSaXBwbGV9YF06IHN0eWxlcy50b3VjaFJpcHBsZVxuICAgIH0sIHN0eWxlcy5yb290LCBzdHlsZXNbb3duZXJTdGF0ZS5vcmllbnRhdGlvbl1dO1xuICB9XG59KSgoe1xuICBvd25lclN0YXRlXG59KSA9PiBfZXh0ZW5kcyh7XG4gIHdpZHRoOiAnMTAwJScsXG4gIHBhZGRpbmc6ICcyNHB4IDE2cHgnLFxuICBtYXJnaW46ICctMjRweCAtMTZweCcsXG4gIGJveFNpemluZzogJ2NvbnRlbnQtYm94J1xufSwgb3duZXJTdGF0ZS5vcmllbnRhdGlvbiA9PT0gJ3ZlcnRpY2FsJyAmJiB7XG4gIGp1c3RpZnlDb250ZW50OiAnZmxleC1zdGFydCcsXG4gIHBhZGRpbmc6ICc4cHgnLFxuICBtYXJnaW46ICctOHB4J1xufSwge1xuICBbYCYgLiR7c3RlcEJ1dHRvbkNsYXNzZXMudG91Y2hSaXBwbGV9YF06IHtcbiAgICBjb2xvcjogJ3JnYmEoMCwgMCwgMCwgMC4zKSdcbiAgfVxufSkpO1xuY29uc3QgU3RlcEJ1dHRvbiA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIFN0ZXBCdXR0b24oaW5Qcm9wcywgcmVmKSB7XG4gIGNvbnN0IHByb3BzID0gdXNlRGVmYXVsdFByb3BzKHtcbiAgICBwcm9wczogaW5Qcm9wcyxcbiAgICBuYW1lOiAnTXVpU3RlcEJ1dHRvbidcbiAgfSk7XG4gIGNvbnN0IHtcbiAgICAgIGNoaWxkcmVuLFxuICAgICAgY2xhc3NOYW1lLFxuICAgICAgaWNvbixcbiAgICAgIG9wdGlvbmFsXG4gICAgfSA9IHByb3BzLFxuICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIF9leGNsdWRlZCk7XG4gIGNvbnN0IHtcbiAgICBkaXNhYmxlZCxcbiAgICBhY3RpdmVcbiAgfSA9IFJlYWN0LnVzZUNvbnRleHQoU3RlcENvbnRleHQpO1xuICBjb25zdCB7XG4gICAgb3JpZW50YXRpb25cbiAgfSA9IFJlYWN0LnVzZUNvbnRleHQoU3RlcHBlckNvbnRleHQpO1xuICBjb25zdCBvd25lclN0YXRlID0gX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgb3JpZW50YXRpb25cbiAgfSk7XG4gIGNvbnN0IGNsYXNzZXMgPSB1c2VVdGlsaXR5Q2xhc3Nlcyhvd25lclN0YXRlKTtcbiAgY29uc3QgY2hpbGRQcm9wcyA9IHtcbiAgICBpY29uLFxuICAgIG9wdGlvbmFsXG4gIH07XG4gIGNvbnN0IGNoaWxkID0gaXNNdWlFbGVtZW50KGNoaWxkcmVuLCBbJ1N0ZXBMYWJlbCddKSA/ICggLyojX19QVVJFX18qL1JlYWN0LmNsb25lRWxlbWVudChjaGlsZHJlbiwgY2hpbGRQcm9wcykpIDogLyojX19QVVJFX18qL19qc3goU3RlcExhYmVsLCBfZXh0ZW5kcyh7fSwgY2hpbGRQcm9wcywge1xuICAgIGNoaWxkcmVuOiBjaGlsZHJlblxuICB9KSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeChTdGVwQnV0dG9uUm9vdCwgX2V4dGVuZHMoe1xuICAgIGZvY3VzUmlwcGxlOiB0cnVlLFxuICAgIGRpc2FibGVkOiBkaXNhYmxlZCxcbiAgICBUb3VjaFJpcHBsZVByb3BzOiB7XG4gICAgICBjbGFzc05hbWU6IGNsYXNzZXMudG91Y2hSaXBwbGVcbiAgICB9LFxuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSksXG4gICAgcmVmOiByZWYsXG4gICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZSxcbiAgICBcImFyaWEtY3VycmVudFwiOiBhY3RpdmUgPyAnc3RlcCcgOiB1bmRlZmluZWRcbiAgfSwgb3RoZXIsIHtcbiAgICBjaGlsZHJlbjogY2hpbGRcbiAgfSkpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBTdGVwQnV0dG9uLnByb3BUeXBlcyAvKiByZW1vdmUtcHJvcHR5cGVzICovID0ge1xuICAvLyDilIzilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIAgV2FybmluZyDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJBcbiAgLy8g4pSCIFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucy4g4pSCXG4gIC8vIOKUgiAgICBUbyB1cGRhdGUgdGhlbSwgZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gYHBucG0gcHJvcHR5cGVzYC4gICAgIOKUglxuICAvLyDilJTilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJhcbiAgLyoqXG4gICAqIENhbiBiZSBhIGBTdGVwTGFiZWxgIG9yIGEgbm9kZSB0byBwbGFjZSBpbnNpZGUgYFN0ZXBMYWJlbGAgYXMgY2hpbGRyZW4uXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogVGhlIGljb24gZGlzcGxheWVkIGJ5IHRoZSBzdGVwIGxhYmVsLlxuICAgKi9cbiAgaWNvbjogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBUaGUgb3B0aW9uYWwgbm9kZSB0byBkaXNwbGF5LlxuICAgKi9cbiAgb3B0aW9uYWw6IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogVGhlIHN5c3RlbSBwcm9wIHRoYXQgYWxsb3dzIGRlZmluaW5nIHN5c3RlbSBvdmVycmlkZXMgYXMgd2VsbCBhcyBhZGRpdGlvbmFsIENTUyBzdHlsZXMuXG4gICAqL1xuICBzeDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5ib29sXSkpLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgU3RlcEJ1dHRvbjsiLCJpbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzZXMnO1xuaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3MnO1xuZXhwb3J0IGZ1bmN0aW9uIGdldFN0ZXBDb25uZWN0b3JVdGlsaXR5Q2xhc3Moc2xvdCkge1xuICByZXR1cm4gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoJ011aVN0ZXBDb25uZWN0b3InLCBzbG90KTtcbn1cbmNvbnN0IHN0ZXBDb25uZWN0b3JDbGFzc2VzID0gZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcygnTXVpU3RlcENvbm5lY3RvcicsIFsncm9vdCcsICdob3Jpem9udGFsJywgJ3ZlcnRpY2FsJywgJ2FsdGVybmF0aXZlTGFiZWwnLCAnYWN0aXZlJywgJ2NvbXBsZXRlZCcsICdkaXNhYmxlZCcsICdsaW5lJywgJ2xpbmVIb3Jpem9udGFsJywgJ2xpbmVWZXJ0aWNhbCddKTtcbmV4cG9ydCBkZWZhdWx0IHN0ZXBDb25uZWN0b3JDbGFzc2VzOyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImNsYXNzTmFtZVwiXTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCBjb21wb3NlQ2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2NvbXBvc2VDbGFzc2VzJztcbmltcG9ydCBjYXBpdGFsaXplIGZyb20gJy4uL3V0aWxzL2NhcGl0YWxpemUnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICcuLi9zdHlsZXMvc3R5bGVkJztcbmltcG9ydCB7IHVzZURlZmF1bHRQcm9wcyB9IGZyb20gJy4uL0RlZmF1bHRQcm9wc1Byb3ZpZGVyJztcbmltcG9ydCBTdGVwcGVyQ29udGV4dCBmcm9tICcuLi9TdGVwcGVyL1N0ZXBwZXJDb250ZXh0JztcbmltcG9ydCBTdGVwQ29udGV4dCBmcm9tICcuLi9TdGVwL1N0ZXBDb250ZXh0JztcbmltcG9ydCB7IGdldFN0ZXBDb25uZWN0b3JVdGlsaXR5Q2xhc3MgfSBmcm9tICcuL3N0ZXBDb25uZWN0b3JDbGFzc2VzJztcbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5jb25zdCB1c2VVdGlsaXR5Q2xhc3NlcyA9IG93bmVyU3RhdGUgPT4ge1xuICBjb25zdCB7XG4gICAgY2xhc3NlcyxcbiAgICBvcmllbnRhdGlvbixcbiAgICBhbHRlcm5hdGl2ZUxhYmVsLFxuICAgIGFjdGl2ZSxcbiAgICBjb21wbGV0ZWQsXG4gICAgZGlzYWJsZWRcbiAgfSA9IG93bmVyU3RhdGU7XG4gIGNvbnN0IHNsb3RzID0ge1xuICAgIHJvb3Q6IFsncm9vdCcsIG9yaWVudGF0aW9uLCBhbHRlcm5hdGl2ZUxhYmVsICYmICdhbHRlcm5hdGl2ZUxhYmVsJywgYWN0aXZlICYmICdhY3RpdmUnLCBjb21wbGV0ZWQgJiYgJ2NvbXBsZXRlZCcsIGRpc2FibGVkICYmICdkaXNhYmxlZCddLFxuICAgIGxpbmU6IFsnbGluZScsIGBsaW5lJHtjYXBpdGFsaXplKG9yaWVudGF0aW9uKX1gXVxuICB9O1xuICByZXR1cm4gY29tcG9zZUNsYXNzZXMoc2xvdHMsIGdldFN0ZXBDb25uZWN0b3JVdGlsaXR5Q2xhc3MsIGNsYXNzZXMpO1xufTtcbmNvbnN0IFN0ZXBDb25uZWN0b3JSb290ID0gc3R5bGVkKCdkaXYnLCB7XG4gIG5hbWU6ICdNdWlTdGVwQ29ubmVjdG9yJyxcbiAgc2xvdDogJ1Jvb3QnLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBvd25lclN0YXRlXG4gICAgfSA9IHByb3BzO1xuICAgIHJldHVybiBbc3R5bGVzLnJvb3QsIHN0eWxlc1tvd25lclN0YXRlLm9yaWVudGF0aW9uXSwgb3duZXJTdGF0ZS5hbHRlcm5hdGl2ZUxhYmVsICYmIHN0eWxlcy5hbHRlcm5hdGl2ZUxhYmVsLCBvd25lclN0YXRlLmNvbXBsZXRlZCAmJiBzdHlsZXMuY29tcGxldGVkXTtcbiAgfVxufSkoKHtcbiAgb3duZXJTdGF0ZVxufSkgPT4gX2V4dGVuZHMoe1xuICBmbGV4OiAnMSAxIGF1dG8nXG59LCBvd25lclN0YXRlLm9yaWVudGF0aW9uID09PSAndmVydGljYWwnICYmIHtcbiAgbWFyZ2luTGVmdDogMTIgLy8gaGFsZiBpY29uXG59LCBvd25lclN0YXRlLmFsdGVybmF0aXZlTGFiZWwgJiYge1xuICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgdG9wOiA4ICsgNCxcbiAgbGVmdDogJ2NhbGMoLTUwJSArIDIwcHgpJyxcbiAgcmlnaHQ6ICdjYWxjKDUwJSArIDIwcHgpJ1xufSkpO1xuY29uc3QgU3RlcENvbm5lY3RvckxpbmUgPSBzdHlsZWQoJ3NwYW4nLCB7XG4gIG5hbWU6ICdNdWlTdGVwQ29ubmVjdG9yJyxcbiAgc2xvdDogJ0xpbmUnLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBvd25lclN0YXRlXG4gICAgfSA9IHByb3BzO1xuICAgIHJldHVybiBbc3R5bGVzLmxpbmUsIHN0eWxlc1tgbGluZSR7Y2FwaXRhbGl6ZShvd25lclN0YXRlLm9yaWVudGF0aW9uKX1gXV07XG4gIH1cbn0pKCh7XG4gIG93bmVyU3RhdGUsXG4gIHRoZW1lXG59KSA9PiB7XG4gIGNvbnN0IGJvcmRlckNvbG9yID0gdGhlbWUucGFsZXR0ZS5tb2RlID09PSAnbGlnaHQnID8gdGhlbWUucGFsZXR0ZS5ncmV5WzQwMF0gOiB0aGVtZS5wYWxldHRlLmdyZXlbNjAwXTtcbiAgcmV0dXJuIF9leHRlbmRzKHtcbiAgICBkaXNwbGF5OiAnYmxvY2snLFxuICAgIGJvcmRlckNvbG9yOiB0aGVtZS52YXJzID8gdGhlbWUudmFycy5wYWxldHRlLlN0ZXBDb25uZWN0b3IuYm9yZGVyIDogYm9yZGVyQ29sb3JcbiAgfSwgb3duZXJTdGF0ZS5vcmllbnRhdGlvbiA9PT0gJ2hvcml6b250YWwnICYmIHtcbiAgICBib3JkZXJUb3BTdHlsZTogJ3NvbGlkJyxcbiAgICBib3JkZXJUb3BXaWR0aDogMVxuICB9LCBvd25lclN0YXRlLm9yaWVudGF0aW9uID09PSAndmVydGljYWwnICYmIHtcbiAgICBib3JkZXJMZWZ0U3R5bGU6ICdzb2xpZCcsXG4gICAgYm9yZGVyTGVmdFdpZHRoOiAxLFxuICAgIG1pbkhlaWdodDogMjRcbiAgfSk7XG59KTtcbmNvbnN0IFN0ZXBDb25uZWN0b3IgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBTdGVwQ29ubmVjdG9yKGluUHJvcHMsIHJlZikge1xuICBjb25zdCBwcm9wcyA9IHVzZURlZmF1bHRQcm9wcyh7XG4gICAgcHJvcHM6IGluUHJvcHMsXG4gICAgbmFtZTogJ011aVN0ZXBDb25uZWN0b3InXG4gIH0pO1xuICBjb25zdCB7XG4gICAgICBjbGFzc05hbWVcbiAgICB9ID0gcHJvcHMsXG4gICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkKTtcbiAgY29uc3Qge1xuICAgIGFsdGVybmF0aXZlTGFiZWwsXG4gICAgb3JpZW50YXRpb24gPSAnaG9yaXpvbnRhbCdcbiAgfSA9IFJlYWN0LnVzZUNvbnRleHQoU3RlcHBlckNvbnRleHQpO1xuICBjb25zdCB7XG4gICAgYWN0aXZlLFxuICAgIGRpc2FibGVkLFxuICAgIGNvbXBsZXRlZFxuICB9ID0gUmVhY3QudXNlQ29udGV4dChTdGVwQ29udGV4dCk7XG4gIGNvbnN0IG93bmVyU3RhdGUgPSBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICBhbHRlcm5hdGl2ZUxhYmVsLFxuICAgIG9yaWVudGF0aW9uLFxuICAgIGFjdGl2ZSxcbiAgICBjb21wbGV0ZWQsXG4gICAgZGlzYWJsZWRcbiAgfSk7XG4gIGNvbnN0IGNsYXNzZXMgPSB1c2VVdGlsaXR5Q2xhc3Nlcyhvd25lclN0YXRlKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KFN0ZXBDb25uZWN0b3JSb290LCBfZXh0ZW5kcyh7XG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lKSxcbiAgICByZWY6IHJlZixcbiAgICBvd25lclN0YXRlOiBvd25lclN0YXRlXG4gIH0sIG90aGVyLCB7XG4gICAgY2hpbGRyZW46IC8qI19fUFVSRV9fKi9fanN4KFN0ZXBDb25uZWN0b3JMaW5lLCB7XG4gICAgICBjbGFzc05hbWU6IGNsYXNzZXMubGluZSxcbiAgICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGVcbiAgICB9KVxuICB9KSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFN0ZXBDb25uZWN0b3IucHJvcFR5cGVzIC8qIHJlbW92ZS1wcm9wdHlwZXMgKi8gPSB7XG4gIC8vIOKUjOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgCBXYXJuaW5nIOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUkFxuICAvLyDilIIgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zLiDilIJcbiAgLy8g4pSCICAgIFRvIHVwZGF0ZSB0aGVtLCBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBgcG5wbSBwcm9wdHlwZXNgLiAgICAg4pSCXG4gIC8vIOKUlOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUmFxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIFRoZSBzeXN0ZW0gcHJvcCB0aGF0IGFsbG93cyBkZWZpbmluZyBzeXN0ZW0gb3ZlcnJpZGVzIGFzIHdlbGwgYXMgYWRkaXRpb25hbCBDU1Mgc3R5bGVzLlxuICAgKi9cbiAgc3g6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuYm9vbF0pKSwgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IFN0ZXBDb25uZWN0b3I7IiwiaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzc2VzJztcbmltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzJztcbmV4cG9ydCBmdW5jdGlvbiBnZXRTdGVwQ29udGVudFV0aWxpdHlDbGFzcyhzbG90KSB7XG4gIHJldHVybiBnZW5lcmF0ZVV0aWxpdHlDbGFzcygnTXVpU3RlcENvbnRlbnQnLCBzbG90KTtcbn1cbmNvbnN0IHN0ZXBDb250ZW50Q2xhc3NlcyA9IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMoJ011aVN0ZXBDb250ZW50JywgWydyb290JywgJ2xhc3QnLCAndHJhbnNpdGlvbiddKTtcbmV4cG9ydCBkZWZhdWx0IHN0ZXBDb250ZW50Q2xhc3NlczsiLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJjaGlsZHJlblwiLCBcImNsYXNzTmFtZVwiLCBcIlRyYW5zaXRpb25Db21wb25lbnRcIiwgXCJ0cmFuc2l0aW9uRHVyYXRpb25cIiwgXCJUcmFuc2l0aW9uUHJvcHNcIl07XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgY29tcG9zZUNsYXNzZXMgZnJvbSAnQG11aS91dGlscy9jb21wb3NlQ2xhc3Nlcyc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJy4uL3N0eWxlcy9zdHlsZWQnO1xuaW1wb3J0IHsgdXNlRGVmYXVsdFByb3BzIH0gZnJvbSAnLi4vRGVmYXVsdFByb3BzUHJvdmlkZXInO1xuaW1wb3J0IENvbGxhcHNlIGZyb20gJy4uL0NvbGxhcHNlJztcbmltcG9ydCBTdGVwcGVyQ29udGV4dCBmcm9tICcuLi9TdGVwcGVyL1N0ZXBwZXJDb250ZXh0JztcbmltcG9ydCBTdGVwQ29udGV4dCBmcm9tICcuLi9TdGVwL1N0ZXBDb250ZXh0JztcbmltcG9ydCB7IGdldFN0ZXBDb250ZW50VXRpbGl0eUNsYXNzIH0gZnJvbSAnLi9zdGVwQ29udGVudENsYXNzZXMnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmNvbnN0IHVzZVV0aWxpdHlDbGFzc2VzID0gb3duZXJTdGF0ZSA9PiB7XG4gIGNvbnN0IHtcbiAgICBjbGFzc2VzLFxuICAgIGxhc3RcbiAgfSA9IG93bmVyU3RhdGU7XG4gIGNvbnN0IHNsb3RzID0ge1xuICAgIHJvb3Q6IFsncm9vdCcsIGxhc3QgJiYgJ2xhc3QnXSxcbiAgICB0cmFuc2l0aW9uOiBbJ3RyYW5zaXRpb24nXVxuICB9O1xuICByZXR1cm4gY29tcG9zZUNsYXNzZXMoc2xvdHMsIGdldFN0ZXBDb250ZW50VXRpbGl0eUNsYXNzLCBjbGFzc2VzKTtcbn07XG5jb25zdCBTdGVwQ29udGVudFJvb3QgPSBzdHlsZWQoJ2RpdicsIHtcbiAgbmFtZTogJ011aVN0ZXBDb250ZW50JyxcbiAgc2xvdDogJ1Jvb3QnLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBvd25lclN0YXRlXG4gICAgfSA9IHByb3BzO1xuICAgIHJldHVybiBbc3R5bGVzLnJvb3QsIG93bmVyU3RhdGUubGFzdCAmJiBzdHlsZXMubGFzdF07XG4gIH1cbn0pKCh7XG4gIG93bmVyU3RhdGUsXG4gIHRoZW1lXG59KSA9PiBfZXh0ZW5kcyh7XG4gIG1hcmdpbkxlZnQ6IDEyLFxuICAvLyBoYWxmIGljb25cbiAgcGFkZGluZ0xlZnQ6IDggKyAxMixcbiAgLy8gbWFyZ2luICsgaGFsZiBpY29uXG4gIHBhZGRpbmdSaWdodDogOCxcbiAgYm9yZGVyTGVmdDogdGhlbWUudmFycyA/IGAxcHggc29saWQgJHt0aGVtZS52YXJzLnBhbGV0dGUuU3RlcENvbnRlbnQuYm9yZGVyfWAgOiBgMXB4IHNvbGlkICR7dGhlbWUucGFsZXR0ZS5tb2RlID09PSAnbGlnaHQnID8gdGhlbWUucGFsZXR0ZS5ncmV5WzQwMF0gOiB0aGVtZS5wYWxldHRlLmdyZXlbNjAwXX1gXG59LCBvd25lclN0YXRlLmxhc3QgJiYge1xuICBib3JkZXJMZWZ0OiAnbm9uZSdcbn0pKTtcbmNvbnN0IFN0ZXBDb250ZW50VHJhbnNpdGlvbiA9IHN0eWxlZChDb2xsYXBzZSwge1xuICBuYW1lOiAnTXVpU3RlcENvbnRlbnQnLFxuICBzbG90OiAnVHJhbnNpdGlvbicsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4gc3R5bGVzLnRyYW5zaXRpb25cbn0pKHt9KTtcbmNvbnN0IFN0ZXBDb250ZW50ID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gU3RlcENvbnRlbnQoaW5Qcm9wcywgcmVmKSB7XG4gIGNvbnN0IHByb3BzID0gdXNlRGVmYXVsdFByb3BzKHtcbiAgICBwcm9wczogaW5Qcm9wcyxcbiAgICBuYW1lOiAnTXVpU3RlcENvbnRlbnQnXG4gIH0pO1xuICBjb25zdCB7XG4gICAgICBjaGlsZHJlbixcbiAgICAgIGNsYXNzTmFtZSxcbiAgICAgIFRyYW5zaXRpb25Db21wb25lbnQgPSBDb2xsYXBzZSxcbiAgICAgIHRyYW5zaXRpb25EdXJhdGlvbjogdHJhbnNpdGlvbkR1cmF0aW9uUHJvcCA9ICdhdXRvJyxcbiAgICAgIFRyYW5zaXRpb25Qcm9wc1xuICAgIH0gPSBwcm9wcyxcbiAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQpO1xuICBjb25zdCB7XG4gICAgb3JpZW50YXRpb25cbiAgfSA9IFJlYWN0LnVzZUNvbnRleHQoU3RlcHBlckNvbnRleHQpO1xuICBjb25zdCB7XG4gICAgYWN0aXZlLFxuICAgIGxhc3QsXG4gICAgZXhwYW5kZWRcbiAgfSA9IFJlYWN0LnVzZUNvbnRleHQoU3RlcENvbnRleHQpO1xuICBjb25zdCBvd25lclN0YXRlID0gX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgbGFzdFxuICB9KTtcbiAgY29uc3QgY2xhc3NlcyA9IHVzZVV0aWxpdHlDbGFzc2VzKG93bmVyU3RhdGUpO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmIChvcmllbnRhdGlvbiAhPT0gJ3ZlcnRpY2FsJykge1xuICAgICAgY29uc29sZS5lcnJvcignTVVJOiA8U3RlcENvbnRlbnQgLz4gaXMgb25seSBkZXNpZ25lZCBmb3IgdXNlIHdpdGggdGhlIHZlcnRpY2FsIHN0ZXBwZXIuJyk7XG4gICAgfVxuICB9XG4gIGxldCB0cmFuc2l0aW9uRHVyYXRpb24gPSB0cmFuc2l0aW9uRHVyYXRpb25Qcm9wO1xuICBpZiAodHJhbnNpdGlvbkR1cmF0aW9uUHJvcCA9PT0gJ2F1dG8nICYmICFUcmFuc2l0aW9uQ29tcG9uZW50Lm11aVN1cHBvcnRBdXRvKSB7XG4gICAgdHJhbnNpdGlvbkR1cmF0aW9uID0gdW5kZWZpbmVkO1xuICB9XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeChTdGVwQ29udGVudFJvb3QsIF9leHRlbmRzKHtcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWUpLFxuICAgIHJlZjogcmVmLFxuICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGVcbiAgfSwgb3RoZXIsIHtcbiAgICBjaGlsZHJlbjogLyojX19QVVJFX18qL19qc3goU3RlcENvbnRlbnRUcmFuc2l0aW9uLCBfZXh0ZW5kcyh7XG4gICAgICBhczogVHJhbnNpdGlvbkNvbXBvbmVudCxcbiAgICAgIGluOiBhY3RpdmUgfHwgZXhwYW5kZWQsXG4gICAgICBjbGFzc05hbWU6IGNsYXNzZXMudHJhbnNpdGlvbixcbiAgICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGUsXG4gICAgICB0aW1lb3V0OiB0cmFuc2l0aW9uRHVyYXRpb24sXG4gICAgICB1bm1vdW50T25FeGl0OiB0cnVlXG4gICAgfSwgVHJhbnNpdGlvblByb3BzLCB7XG4gICAgICBjaGlsZHJlbjogY2hpbGRyZW5cbiAgICB9KSlcbiAgfSkpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBTdGVwQ29udGVudC5wcm9wVHlwZXMgLyogcmVtb3ZlLXByb3B0eXBlcyAqLyA9IHtcbiAgLy8g4pSM4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAIFdhcm5pbmcg4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSQXG4gIC8vIOKUgiBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMuIOKUglxuICAvLyDilIIgICAgVG8gdXBkYXRlIHRoZW0sIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIGBwbnBtIHByb3B0eXBlc2AuICAgICDilIJcbiAgLy8g4pSU4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSYXG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIFRoZSBzeXN0ZW0gcHJvcCB0aGF0IGFsbG93cyBkZWZpbmluZyBzeXN0ZW0gb3ZlcnJpZGVzIGFzIHdlbGwgYXMgYWRkaXRpb25hbCBDU1Mgc3R5bGVzLlxuICAgKi9cbiAgc3g6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuYm9vbF0pKSwgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKSxcbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHRyYW5zaXRpb24uXG4gICAqIFtGb2xsb3cgdGhpcyBndWlkZV0oL21hdGVyaWFsLXVpL3RyYW5zaXRpb25zLyN0cmFuc2l0aW9uY29tcG9uZW50LXByb3ApIHRvIGxlYXJuIG1vcmUgYWJvdXQgdGhlIHJlcXVpcmVtZW50cyBmb3IgdGhpcyBjb21wb25lbnQuXG4gICAqIEBkZWZhdWx0IENvbGxhcHNlXG4gICAqL1xuICBUcmFuc2l0aW9uQ29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG4gIC8qKlxuICAgKiBBZGp1c3QgdGhlIGR1cmF0aW9uIG9mIHRoZSBjb250ZW50IGV4cGFuZCB0cmFuc2l0aW9uLlxuICAgKiBQYXNzZWQgYXMgYSBwcm9wIHRvIHRoZSB0cmFuc2l0aW9uIGNvbXBvbmVudC5cbiAgICpcbiAgICogU2V0IHRvICdhdXRvJyB0byBhdXRvbWF0aWNhbGx5IGNhbGN1bGF0ZSB0cmFuc2l0aW9uIHRpbWUgYmFzZWQgb24gaGVpZ2h0LlxuICAgKiBAZGVmYXVsdCAnYXV0bydcbiAgICovXG4gIHRyYW5zaXRpb25EdXJhdGlvbjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsnYXV0byddKSwgUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBhcHBlYXI6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgZW50ZXI6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgZXhpdDogUHJvcFR5cGVzLm51bWJlclxuICB9KV0pLFxuICAvKipcbiAgICogUHJvcHMgYXBwbGllZCB0byB0aGUgdHJhbnNpdGlvbiBlbGVtZW50LlxuICAgKiBCeSBkZWZhdWx0LCB0aGUgZWxlbWVudCBpcyBiYXNlZCBvbiB0aGlzIFtgVHJhbnNpdGlvbmBdKGh0dHBzOi8vcmVhY3Rjb21tdW5pdHkub3JnL3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAvdHJhbnNpdGlvbi8pIGNvbXBvbmVudC5cbiAgICovXG4gIFRyYW5zaXRpb25Qcm9wczogUHJvcFR5cGVzLm9iamVjdFxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IFN0ZXBDb250ZW50OyIsImltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3Nlcyc7XG5pbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3MgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzcyc7XG5leHBvcnQgZnVuY3Rpb24gZ2V0U3RlcHBlclV0aWxpdHlDbGFzcyhzbG90KSB7XG4gIHJldHVybiBnZW5lcmF0ZVV0aWxpdHlDbGFzcygnTXVpU3RlcHBlcicsIHNsb3QpO1xufVxuY29uc3Qgc3RlcHBlckNsYXNzZXMgPSBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzKCdNdWlTdGVwcGVyJywgWydyb290JywgJ2hvcml6b250YWwnLCAndmVydGljYWwnLCAnbm9uTGluZWFyJywgJ2FsdGVybmF0aXZlTGFiZWwnXSk7XG5leHBvcnQgZGVmYXVsdCBzdGVwcGVyQ2xhc3NlczsiLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJhY3RpdmVTdGVwXCIsIFwiYWx0ZXJuYXRpdmVMYWJlbFwiLCBcImNoaWxkcmVuXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29tcG9uZW50XCIsIFwiY29ubmVjdG9yXCIsIFwibm9uTGluZWFyXCIsIFwib3JpZW50YXRpb25cIl07XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgaW50ZWdlclByb3BUeXBlIGZyb20gJ0BtdWkvdXRpbHMvaW50ZWdlclByb3BUeXBlJztcbmltcG9ydCBjb21wb3NlQ2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2NvbXBvc2VDbGFzc2VzJztcbmltcG9ydCB7IHVzZURlZmF1bHRQcm9wcyB9IGZyb20gJy4uL0RlZmF1bHRQcm9wc1Byb3ZpZGVyJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnLi4vc3R5bGVzL3N0eWxlZCc7XG5pbXBvcnQgeyBnZXRTdGVwcGVyVXRpbGl0eUNsYXNzIH0gZnJvbSAnLi9zdGVwcGVyQ2xhc3Nlcyc7XG5pbXBvcnQgU3RlcENvbm5lY3RvciBmcm9tICcuLi9TdGVwQ29ubmVjdG9yJztcbmltcG9ydCBTdGVwcGVyQ29udGV4dCBmcm9tICcuL1N0ZXBwZXJDb250ZXh0JztcbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5jb25zdCB1c2VVdGlsaXR5Q2xhc3NlcyA9IG93bmVyU3RhdGUgPT4ge1xuICBjb25zdCB7XG4gICAgb3JpZW50YXRpb24sXG4gICAgbm9uTGluZWFyLFxuICAgIGFsdGVybmF0aXZlTGFiZWwsXG4gICAgY2xhc3Nlc1xuICB9ID0gb3duZXJTdGF0ZTtcbiAgY29uc3Qgc2xvdHMgPSB7XG4gICAgcm9vdDogWydyb290Jywgb3JpZW50YXRpb24sIG5vbkxpbmVhciAmJiAnbm9uTGluZWFyJywgYWx0ZXJuYXRpdmVMYWJlbCAmJiAnYWx0ZXJuYXRpdmVMYWJlbCddXG4gIH07XG4gIHJldHVybiBjb21wb3NlQ2xhc3NlcyhzbG90cywgZ2V0U3RlcHBlclV0aWxpdHlDbGFzcywgY2xhc3Nlcyk7XG59O1xuY29uc3QgU3RlcHBlclJvb3QgPSBzdHlsZWQoJ2RpdicsIHtcbiAgbmFtZTogJ011aVN0ZXBwZXInLFxuICBzbG90OiAnUm9vdCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9ID0gcHJvcHM7XG4gICAgcmV0dXJuIFtzdHlsZXMucm9vdCwgc3R5bGVzW293bmVyU3RhdGUub3JpZW50YXRpb25dLCBvd25lclN0YXRlLmFsdGVybmF0aXZlTGFiZWwgJiYgc3R5bGVzLmFsdGVybmF0aXZlTGFiZWwsIG93bmVyU3RhdGUubm9uTGluZWFyICYmIHN0eWxlcy5ub25MaW5lYXJdO1xuICB9XG59KSgoe1xuICBvd25lclN0YXRlXG59KSA9PiBfZXh0ZW5kcyh7XG4gIGRpc3BsYXk6ICdmbGV4J1xufSwgb3duZXJTdGF0ZS5vcmllbnRhdGlvbiA9PT0gJ2hvcml6b250YWwnICYmIHtcbiAgZmxleERpcmVjdGlvbjogJ3JvdycsXG4gIGFsaWduSXRlbXM6ICdjZW50ZXInXG59LCBvd25lclN0YXRlLm9yaWVudGF0aW9uID09PSAndmVydGljYWwnICYmIHtcbiAgZmxleERpcmVjdGlvbjogJ2NvbHVtbidcbn0sIG93bmVyU3RhdGUuYWx0ZXJuYXRpdmVMYWJlbCAmJiB7XG4gIGFsaWduSXRlbXM6ICdmbGV4LXN0YXJ0J1xufSkpO1xuY29uc3QgZGVmYXVsdENvbm5lY3RvciA9IC8qI19fUFVSRV9fKi9fanN4KFN0ZXBDb25uZWN0b3IsIHt9KTtcbmNvbnN0IFN0ZXBwZXIgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBTdGVwcGVyKGluUHJvcHMsIHJlZikge1xuICBjb25zdCBwcm9wcyA9IHVzZURlZmF1bHRQcm9wcyh7XG4gICAgcHJvcHM6IGluUHJvcHMsXG4gICAgbmFtZTogJ011aVN0ZXBwZXInXG4gIH0pO1xuICBjb25zdCB7XG4gICAgICBhY3RpdmVTdGVwID0gMCxcbiAgICAgIGFsdGVybmF0aXZlTGFiZWwgPSBmYWxzZSxcbiAgICAgIGNoaWxkcmVuLFxuICAgICAgY2xhc3NOYW1lLFxuICAgICAgY29tcG9uZW50ID0gJ2RpdicsXG4gICAgICBjb25uZWN0b3IgPSBkZWZhdWx0Q29ubmVjdG9yLFxuICAgICAgbm9uTGluZWFyID0gZmFsc2UsXG4gICAgICBvcmllbnRhdGlvbiA9ICdob3Jpem9udGFsJ1xuICAgIH0gPSBwcm9wcyxcbiAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQpO1xuICBjb25zdCBvd25lclN0YXRlID0gX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgbm9uTGluZWFyLFxuICAgIGFsdGVybmF0aXZlTGFiZWwsXG4gICAgb3JpZW50YXRpb24sXG4gICAgY29tcG9uZW50XG4gIH0pO1xuICBjb25zdCBjbGFzc2VzID0gdXNlVXRpbGl0eUNsYXNzZXMob3duZXJTdGF0ZSk7XG4gIGNvbnN0IGNoaWxkcmVuQXJyYXkgPSBSZWFjdC5DaGlsZHJlbi50b0FycmF5KGNoaWxkcmVuKS5maWx0ZXIoQm9vbGVhbik7XG4gIGNvbnN0IHN0ZXBzID0gY2hpbGRyZW5BcnJheS5tYXAoKHN0ZXAsIGluZGV4KSA9PiB7XG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jbG9uZUVsZW1lbnQoc3RlcCwgX2V4dGVuZHMoe1xuICAgICAgaW5kZXgsXG4gICAgICBsYXN0OiBpbmRleCArIDEgPT09IGNoaWxkcmVuQXJyYXkubGVuZ3RoXG4gICAgfSwgc3RlcC5wcm9wcykpO1xuICB9KTtcbiAgY29uc3QgY29udGV4dFZhbHVlID0gUmVhY3QudXNlTWVtbygoKSA9PiAoe1xuICAgIGFjdGl2ZVN0ZXAsXG4gICAgYWx0ZXJuYXRpdmVMYWJlbCxcbiAgICBjb25uZWN0b3IsXG4gICAgbm9uTGluZWFyLFxuICAgIG9yaWVudGF0aW9uXG4gIH0pLCBbYWN0aXZlU3RlcCwgYWx0ZXJuYXRpdmVMYWJlbCwgY29ubmVjdG9yLCBub25MaW5lYXIsIG9yaWVudGF0aW9uXSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeChTdGVwcGVyQ29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiBjb250ZXh0VmFsdWUsXG4gICAgY2hpbGRyZW46IC8qI19fUFVSRV9fKi9fanN4KFN0ZXBwZXJSb290LCBfZXh0ZW5kcyh7XG4gICAgICBhczogY29tcG9uZW50LFxuICAgICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZSxcbiAgICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSksXG4gICAgICByZWY6IHJlZlxuICAgIH0sIG90aGVyLCB7XG4gICAgICBjaGlsZHJlbjogc3RlcHNcbiAgICB9KSlcbiAgfSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFN0ZXBwZXIucHJvcFR5cGVzIC8qIHJlbW92ZS1wcm9wdHlwZXMgKi8gPSB7XG4gIC8vIOKUjOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgCBXYXJuaW5nIOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUkFxuICAvLyDilIIgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zLiDilIJcbiAgLy8g4pSCICAgIFRvIHVwZGF0ZSB0aGVtLCBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBgcG5wbSBwcm9wdHlwZXNgLiAgICAg4pSCXG4gIC8vIOKUlOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUmFxuICAvKipcbiAgICogU2V0IHRoZSBhY3RpdmUgc3RlcCAoemVybyBiYXNlZCBpbmRleCkuXG4gICAqIFNldCB0byAtMSB0byBkaXNhYmxlIGFsbCB0aGUgc3RlcHMuXG4gICAqIEBkZWZhdWx0IDBcbiAgICovXG4gIGFjdGl2ZVN0ZXA6IGludGVnZXJQcm9wVHlwZSxcbiAgLyoqXG4gICAqIElmIHNldCB0byAndHJ1ZScgYW5kIG9yaWVudGF0aW9uIGlzIGhvcml6b250YWwsXG4gICAqIHRoZW4gdGhlIHN0ZXAgbGFiZWwgd2lsbCBiZSBwb3NpdGlvbmVkIHVuZGVyIHRoZSBpY29uLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgYWx0ZXJuYXRpdmVMYWJlbDogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBUd28gb3IgbW9yZSBgPFN0ZXAgLz5gIGNvbXBvbmVudHMuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgcm9vdCBub2RlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgSFRNTCBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKi9cbiAgY29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG4gIC8qKlxuICAgKiBBbiBlbGVtZW50IHRvIGJlIHBsYWNlZCBiZXR3ZWVuIGVhY2ggc3RlcC5cbiAgICogQGRlZmF1bHQgPFN0ZXBDb25uZWN0b3IgLz5cbiAgICovXG4gIGNvbm5lY3RvcjogUHJvcFR5cGVzLmVsZW1lbnQsXG4gIC8qKlxuICAgKiBJZiBzZXQgdGhlIGBTdGVwcGVyYCB3aWxsIG5vdCBhc3Npc3QgaW4gY29udHJvbGxpbmcgc3RlcHMgZm9yIGxpbmVhciBmbG93LlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgbm9uTGluZWFyOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgb3JpZW50YXRpb24gKGxheW91dCBmbG93IGRpcmVjdGlvbikuXG4gICAqIEBkZWZhdWx0ICdob3Jpem9udGFsJ1xuICAgKi9cbiAgb3JpZW50YXRpb246IFByb3BUeXBlcy5vbmVPZihbJ2hvcml6b250YWwnLCAndmVydGljYWwnXSksXG4gIC8qKlxuICAgKiBUaGUgc3lzdGVtIHByb3AgdGhhdCBhbGxvd3MgZGVmaW5pbmcgc3lzdGVtIG92ZXJyaWRlcyBhcyB3ZWxsIGFzIGFkZGl0aW9uYWwgQ1NTIHN0eWxlcy5cbiAgICovXG4gIHN4OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLmJvb2xdKSksIFByb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCBTdGVwcGVyOyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImFuY2hvclwiLCBcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJ3aWR0aFwiLCBcInN0eWxlXCJdO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHN0eWxlZCwgeyByb290U2hvdWxkRm9yd2FyZFByb3AgfSBmcm9tICcuLi9zdHlsZXMvc3R5bGVkJztcbmltcG9ydCBjYXBpdGFsaXplIGZyb20gJy4uL3V0aWxzL2NhcGl0YWxpemUnO1xuaW1wb3J0IHsgaXNIb3Jpem9udGFsIH0gZnJvbSAnLi4vRHJhd2VyL0RyYXdlcic7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuY29uc3QgU3dpcGVBcmVhUm9vdCA9IHN0eWxlZCgnZGl2Jywge1xuICBzaG91bGRGb3J3YXJkUHJvcDogcm9vdFNob3VsZEZvcndhcmRQcm9wXG59KSgoe1xuICB0aGVtZSxcbiAgb3duZXJTdGF0ZVxufSkgPT4gX2V4dGVuZHMoe1xuICBwb3NpdGlvbjogJ2ZpeGVkJyxcbiAgdG9wOiAwLFxuICBsZWZ0OiAwLFxuICBib3R0b206IDAsXG4gIHpJbmRleDogdGhlbWUuekluZGV4LmRyYXdlciAtIDFcbn0sIG93bmVyU3RhdGUuYW5jaG9yID09PSAnbGVmdCcgJiYge1xuICByaWdodDogJ2F1dG8nXG59LCBvd25lclN0YXRlLmFuY2hvciA9PT0gJ3JpZ2h0JyAmJiB7XG4gIGxlZnQ6ICdhdXRvJyxcbiAgcmlnaHQ6IDBcbn0sIG93bmVyU3RhdGUuYW5jaG9yID09PSAndG9wJyAmJiB7XG4gIGJvdHRvbTogJ2F1dG8nLFxuICByaWdodDogMFxufSwgb3duZXJTdGF0ZS5hbmNob3IgPT09ICdib3R0b20nICYmIHtcbiAgdG9wOiAnYXV0bycsXG4gIGJvdHRvbTogMCxcbiAgcmlnaHQ6IDBcbn0pKTtcblxuLyoqXG4gKiBAaWdub3JlIC0gaW50ZXJuYWwgY29tcG9uZW50LlxuICovXG5jb25zdCBTd2lwZUFyZWEgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBTd2lwZUFyZWEocHJvcHMsIHJlZikge1xuICBjb25zdCB7XG4gICAgICBhbmNob3IsXG4gICAgICBjbGFzc2VzID0ge30sXG4gICAgICBjbGFzc05hbWUsXG4gICAgICB3aWR0aCxcbiAgICAgIHN0eWxlXG4gICAgfSA9IHByb3BzLFxuICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIF9leGNsdWRlZCk7XG4gIGNvbnN0IG93bmVyU3RhdGUgPSBwcm9wcztcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KFN3aXBlQXJlYVJvb3QsIF9leHRlbmRzKHtcbiAgICBjbGFzc05hbWU6IGNsc3goJ1ByaXZhdGVTd2lwZUFyZWEtcm9vdCcsIGNsYXNzZXMucm9vdCwgY2xhc3Nlc1tgYW5jaG9yJHtjYXBpdGFsaXplKGFuY2hvcil9YF0sIGNsYXNzTmFtZSksXG4gICAgcmVmOiByZWYsXG4gICAgc3R5bGU6IF9leHRlbmRzKHtcbiAgICAgIFtpc0hvcml6b250YWwoYW5jaG9yKSA/ICd3aWR0aCcgOiAnaGVpZ2h0J106IHdpZHRoXG4gICAgfSwgc3R5bGUpLFxuICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGVcbiAgfSwgb3RoZXIpKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gU3dpcGVBcmVhLnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIFNpZGUgb24gd2hpY2ggdG8gYXR0YWNoIHRoZSBkaXNjb3ZlcnkgYXJlYS5cbiAgICovXG4gIGFuY2hvcjogUHJvcFR5cGVzLm9uZU9mKFsnbGVmdCcsICd0b3AnLCAncmlnaHQnLCAnYm90dG9tJ10pLmlzUmVxdWlyZWQsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgc3R5bGU6IFByb3BUeXBlcy5vYmplY3QsXG4gIC8qKlxuICAgKiBUaGUgd2lkdGggb2YgdGhlIGxlZnQgbW9zdCAob3IgcmlnaHQgbW9zdCkgYXJlYSBpbiBgcHhgIHdoZXJlIHRoZVxuICAgKiBkcmF3ZXIgY2FuIGJlIHN3aXBlZCBvcGVuIGZyb20uXG4gICAqL1xuICB3aWR0aDogUHJvcFR5cGVzLm51bWJlci5pc1JlcXVpcmVkXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgU3dpcGVBcmVhOyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcIkJhY2tkcm9wUHJvcHNcIl0sXG4gIF9leGNsdWRlZDIgPSBbXCJhbmNob3JcIiwgXCJkaXNhYmxlQmFja2Ryb3BUcmFuc2l0aW9uXCIsIFwiZGlzYWJsZURpc2NvdmVyeVwiLCBcImRpc2FibGVTd2lwZVRvT3BlblwiLCBcImhpZGVCYWNrZHJvcFwiLCBcImh5c3RlcmVzaXNcIiwgXCJhbGxvd1N3aXBlSW5DaGlsZHJlblwiLCBcIm1pbkZsaW5nVmVsb2NpdHlcIiwgXCJNb2RhbFByb3BzXCIsIFwib25DbG9zZVwiLCBcIm9uT3BlblwiLCBcIm9wZW5cIiwgXCJQYXBlclByb3BzXCIsIFwiU3dpcGVBcmVhUHJvcHNcIiwgXCJzd2lwZUFyZWFXaWR0aFwiLCBcInRyYW5zaXRpb25EdXJhdGlvblwiLCBcInZhcmlhbnRcIl07XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgKiBhcyBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20nO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBlbGVtZW50VHlwZUFjY2VwdGluZ1JlZiBmcm9tICdAbXVpL3V0aWxzL2VsZW1lbnRUeXBlQWNjZXB0aW5nUmVmJztcbmltcG9ydCBOb1NzciBmcm9tICcuLi9Ob1Nzcic7XG5pbXBvcnQgeyB1c2VEZWZhdWx0UHJvcHMgfSBmcm9tICcuLi9EZWZhdWx0UHJvcHNQcm92aWRlcic7XG5pbXBvcnQgRHJhd2VyLCB7IGdldEFuY2hvciwgaXNIb3Jpem9udGFsIH0gZnJvbSAnLi4vRHJhd2VyL0RyYXdlcic7XG5pbXBvcnQgdXNlRm9ya1JlZiBmcm9tICcuLi91dGlscy91c2VGb3JrUmVmJztcbmltcG9ydCBvd25lckRvY3VtZW50IGZyb20gJy4uL3V0aWxzL293bmVyRG9jdW1lbnQnO1xuaW1wb3J0IG93bmVyV2luZG93IGZyb20gJy4uL3V0aWxzL293bmVyV2luZG93JztcbmltcG9ydCB1c2VFdmVudENhbGxiYWNrIGZyb20gJy4uL3V0aWxzL3VzZUV2ZW50Q2FsbGJhY2snO1xuaW1wb3J0IHVzZUVuaGFuY2VkRWZmZWN0IGZyb20gJy4uL3V0aWxzL3VzZUVuaGFuY2VkRWZmZWN0JztcbmltcG9ydCB1c2VUaGVtZSBmcm9tICcuLi9zdHlsZXMvdXNlVGhlbWUnO1xuaW1wb3J0IHsgZ2V0VHJhbnNpdGlvblByb3BzIH0gZnJvbSAnLi4vdHJhbnNpdGlvbnMvdXRpbHMnO1xuaW1wb3J0IFN3aXBlQXJlYSBmcm9tICcuL1N3aXBlQXJlYSc7XG5cbi8vIFRoaXMgdmFsdWUgaXMgY2xvc2VkIHRvIHdoYXQgYnJvd3NlcnMgYXJlIHVzaW5nIGludGVybmFsbHkgdG9cbi8vIHRyaWdnZXIgYSBuYXRpdmUgc2Nyb2xsLlxuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmltcG9ydCB7IGpzeHMgYXMgX2pzeHMgfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmNvbnN0IFVOQ0VSVEFJTlRZX1RIUkVTSE9MRCA9IDM7IC8vIHB4XG5cbi8vIFRoaXMgaXMgdGhlIHBhcnQgb2YgdGhlIGRyYXdlciBkaXNwbGF5ZWQgb24gdG91Y2ggc3RhcnQuXG5jb25zdCBEUkFHX1NUQVJURURfU0lHTkFMID0gMjA7IC8vIHB4XG5cbi8vIFdlIGNhbiBvbmx5IGhhdmUgb25lIGluc3RhbmNlIGF0IHRoZSB0aW1lIGNsYWltaW5nIG93bmVyc2hpcCBmb3IgaGFuZGxpbmcgdGhlIHN3aXBlLlxuLy8gT3RoZXJ3aXNlLCB0aGUgVVggd291bGQgYmUgY29uZnVzaW5nLlxuLy8gVGhhdCdzIHdoeSB3ZSB1c2UgYSBzaW5nbGV0b24gaGVyZS5cbmxldCBjbGFpbWVkU3dpcGVJbnN0YW5jZSA9IG51bGw7XG5cbi8vIEV4cG9ydGVkIGZvciB0ZXN0IHB1cnBvc2VzLlxuZXhwb3J0IGZ1bmN0aW9uIHJlc2V0KCkge1xuICBjbGFpbWVkU3dpcGVJbnN0YW5jZSA9IG51bGw7XG59XG5mdW5jdGlvbiBjYWxjdWxhdGVDdXJyZW50WChhbmNob3IsIHRvdWNoZXMsIGRvYykge1xuICByZXR1cm4gYW5jaG9yID09PSAncmlnaHQnID8gZG9jLmJvZHkub2Zmc2V0V2lkdGggLSB0b3VjaGVzWzBdLnBhZ2VYIDogdG91Y2hlc1swXS5wYWdlWDtcbn1cbmZ1bmN0aW9uIGNhbGN1bGF0ZUN1cnJlbnRZKGFuY2hvciwgdG91Y2hlcywgY29udGFpbmVyV2luZG93KSB7XG4gIHJldHVybiBhbmNob3IgPT09ICdib3R0b20nID8gY29udGFpbmVyV2luZG93LmlubmVySGVpZ2h0IC0gdG91Y2hlc1swXS5jbGllbnRZIDogdG91Y2hlc1swXS5jbGllbnRZO1xufVxuZnVuY3Rpb24gZ2V0TWF4VHJhbnNsYXRlKGhvcml6b250YWxTd2lwZSwgcGFwZXJJbnN0YW5jZSkge1xuICByZXR1cm4gaG9yaXpvbnRhbFN3aXBlID8gcGFwZXJJbnN0YW5jZS5jbGllbnRXaWR0aCA6IHBhcGVySW5zdGFuY2UuY2xpZW50SGVpZ2h0O1xufVxuZnVuY3Rpb24gZ2V0VHJhbnNsYXRlKGN1cnJlbnRUcmFuc2xhdGUsIHN0YXJ0TG9jYXRpb24sIG9wZW4sIG1heFRyYW5zbGF0ZSkge1xuICByZXR1cm4gTWF0aC5taW4oTWF0aC5tYXgob3BlbiA/IHN0YXJ0TG9jYXRpb24gLSBjdXJyZW50VHJhbnNsYXRlIDogbWF4VHJhbnNsYXRlICsgc3RhcnRMb2NhdGlvbiAtIGN1cnJlbnRUcmFuc2xhdGUsIDApLCBtYXhUcmFuc2xhdGUpO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7RWxlbWVudCB8IG51bGx9IGVsZW1lbnRcbiAqIEBwYXJhbSB7RWxlbWVudH0gcm9vdE5vZGVcbiAqL1xuZnVuY3Rpb24gZ2V0RG9tVHJlZVNoYXBlcyhlbGVtZW50LCByb290Tm9kZSkge1xuICAvLyBBZGFwdGVkIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL29saXZpZXJ0YXNzaW5hcmkvcmVhY3Qtc3dpcGVhYmxlLXZpZXdzL2Jsb2IvNzY2NmRlMWRiYTI1M2I4OTY5MTFhZGYyNzkwY2U1MTQ2NzY3MDg1Ni9wYWNrYWdlcy9yZWFjdC1zd2lwZWFibGUtdmlld3Mvc3JjL1N3aXBlYWJsZVZpZXdzLmpzI0wxMjlcbiAgY29uc3QgZG9tVHJlZVNoYXBlcyA9IFtdO1xuICB3aGlsZSAoZWxlbWVudCAmJiBlbGVtZW50ICE9PSByb290Tm9kZS5wYXJlbnRFbGVtZW50KSB7XG4gICAgY29uc3Qgc3R5bGUgPSBvd25lcldpbmRvdyhyb290Tm9kZSkuZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KTtcbiAgICBpZiAoXG4gICAgLy8gSWdub3JlIHRoZSBzY3JvbGwgY2hpbGRyZW4gaWYgdGhlIGVsZW1lbnQgaXMgYWJzb2x1dGUgcG9zaXRpb25lZC5cbiAgICBzdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKCdwb3NpdGlvbicpID09PSAnYWJzb2x1dGUnIHx8XG4gICAgLy8gSWdub3JlIHRoZSBzY3JvbGwgY2hpbGRyZW4gaWYgdGhlIGVsZW1lbnQgaGFzIGFuIG92ZXJmbG93WCBoaWRkZW5cbiAgICBzdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKCdvdmVyZmxvdy14JykgPT09ICdoaWRkZW4nKSB7XG4gICAgICAvLyBub29wXG4gICAgfSBlbHNlIGlmIChlbGVtZW50LmNsaWVudFdpZHRoID4gMCAmJiBlbGVtZW50LnNjcm9sbFdpZHRoID4gZWxlbWVudC5jbGllbnRXaWR0aCB8fCBlbGVtZW50LmNsaWVudEhlaWdodCA+IDAgJiYgZWxlbWVudC5zY3JvbGxIZWlnaHQgPiBlbGVtZW50LmNsaWVudEhlaWdodCkge1xuICAgICAgLy8gSWdub3JlIHRoZSBub2RlcyB0aGF0IGhhdmUgbm8gd2lkdGguXG4gICAgICAvLyBLZWVwIGVsZW1lbnRzIHdpdGggYSBzY3JvbGxcbiAgICAgIGRvbVRyZWVTaGFwZXMucHVzaChlbGVtZW50KTtcbiAgICB9XG4gICAgZWxlbWVudCA9IGVsZW1lbnQucGFyZW50RWxlbWVudDtcbiAgfVxuICByZXR1cm4gZG9tVHJlZVNoYXBlcztcbn1cblxuLyoqXG4gKiBAcGFyYW0ge29iamVjdH0gcGFyYW0wXG4gKiBAcGFyYW0ge1JldHVyblR5cGU8Z2V0RG9tVHJlZVNoYXBlcz59IHBhcmFtMC5kb21UcmVlU2hhcGVzXG4gKi9cbmZ1bmN0aW9uIGNvbXB1dGVIYXNOYXRpdmVIYW5kbGVyKHtcbiAgZG9tVHJlZVNoYXBlcyxcbiAgc3RhcnQsXG4gIGN1cnJlbnQsXG4gIGFuY2hvclxufSkge1xuICAvLyBBZGFwdGVkIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL29saXZpZXJ0YXNzaW5hcmkvcmVhY3Qtc3dpcGVhYmxlLXZpZXdzL2Jsb2IvNzY2NmRlMWRiYTI1M2I4OTY5MTFhZGYyNzkwY2U1MTQ2NzY3MDg1Ni9wYWNrYWdlcy9yZWFjdC1zd2lwZWFibGUtdmlld3Mvc3JjL1N3aXBlYWJsZVZpZXdzLmpzI0wxNzVcbiAgY29uc3QgYXhpc1Byb3BlcnRpZXMgPSB7XG4gICAgc2Nyb2xsUG9zaXRpb246IHtcbiAgICAgIHg6ICdzY3JvbGxMZWZ0JyxcbiAgICAgIHk6ICdzY3JvbGxUb3AnXG4gICAgfSxcbiAgICBzY3JvbGxMZW5ndGg6IHtcbiAgICAgIHg6ICdzY3JvbGxXaWR0aCcsXG4gICAgICB5OiAnc2Nyb2xsSGVpZ2h0J1xuICAgIH0sXG4gICAgY2xpZW50TGVuZ3RoOiB7XG4gICAgICB4OiAnY2xpZW50V2lkdGgnLFxuICAgICAgeTogJ2NsaWVudEhlaWdodCdcbiAgICB9XG4gIH07XG4gIHJldHVybiBkb21UcmVlU2hhcGVzLnNvbWUoc2hhcGUgPT4ge1xuICAgIC8vIERldGVybWluZSBpZiB3ZSBhcmUgZ29pbmcgYmFja3dhcmQgb3IgZm9yd2FyZC5cbiAgICBsZXQgZ29pbmdGb3J3YXJkID0gY3VycmVudCA+PSBzdGFydDtcbiAgICBpZiAoYW5jaG9yID09PSAndG9wJyB8fCBhbmNob3IgPT09ICdsZWZ0Jykge1xuICAgICAgZ29pbmdGb3J3YXJkID0gIWdvaW5nRm9yd2FyZDtcbiAgICB9XG4gICAgY29uc3QgYXhpcyA9IGFuY2hvciA9PT0gJ2xlZnQnIHx8IGFuY2hvciA9PT0gJ3JpZ2h0JyA/ICd4JyA6ICd5JztcbiAgICBjb25zdCBzY3JvbGxQb3NpdGlvbiA9IE1hdGgucm91bmQoc2hhcGVbYXhpc1Byb3BlcnRpZXMuc2Nyb2xsUG9zaXRpb25bYXhpc11dKTtcbiAgICBjb25zdCBhcmVOb3RBdFN0YXJ0ID0gc2Nyb2xsUG9zaXRpb24gPiAwO1xuICAgIGNvbnN0IGFyZU5vdEF0RW5kID0gc2Nyb2xsUG9zaXRpb24gKyBzaGFwZVtheGlzUHJvcGVydGllcy5jbGllbnRMZW5ndGhbYXhpc11dIDwgc2hhcGVbYXhpc1Byb3BlcnRpZXMuc2Nyb2xsTGVuZ3RoW2F4aXNdXTtcbiAgICBpZiAoZ29pbmdGb3J3YXJkICYmIGFyZU5vdEF0RW5kIHx8ICFnb2luZ0ZvcndhcmQgJiYgYXJlTm90QXRTdGFydCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfSk7XG59XG5jb25zdCBpT1MgPSB0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiAvaVBhZHxpUGhvbmV8aVBvZC8udGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTtcbmNvbnN0IFN3aXBlYWJsZURyYXdlciA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIFN3aXBlYWJsZURyYXdlcihpblByb3BzLCByZWYpIHtcbiAgY29uc3QgcHJvcHMgPSB1c2VEZWZhdWx0UHJvcHMoe1xuICAgIG5hbWU6ICdNdWlTd2lwZWFibGVEcmF3ZXInLFxuICAgIHByb3BzOiBpblByb3BzXG4gIH0pO1xuICBjb25zdCB0aGVtZSA9IHVzZVRoZW1lKCk7XG4gIGNvbnN0IHRyYW5zaXRpb25EdXJhdGlvbkRlZmF1bHQgPSB7XG4gICAgZW50ZXI6IHRoZW1lLnRyYW5zaXRpb25zLmR1cmF0aW9uLmVudGVyaW5nU2NyZWVuLFxuICAgIGV4aXQ6IHRoZW1lLnRyYW5zaXRpb25zLmR1cmF0aW9uLmxlYXZpbmdTY3JlZW5cbiAgfTtcbiAgY29uc3Qge1xuICAgICAgYW5jaG9yID0gJ2xlZnQnLFxuICAgICAgZGlzYWJsZUJhY2tkcm9wVHJhbnNpdGlvbiA9IGZhbHNlLFxuICAgICAgZGlzYWJsZURpc2NvdmVyeSA9IGZhbHNlLFxuICAgICAgZGlzYWJsZVN3aXBlVG9PcGVuID0gaU9TLFxuICAgICAgaGlkZUJhY2tkcm9wLFxuICAgICAgaHlzdGVyZXNpcyA9IDAuNTIsXG4gICAgICBhbGxvd1N3aXBlSW5DaGlsZHJlbiA9IGZhbHNlLFxuICAgICAgbWluRmxpbmdWZWxvY2l0eSA9IDQ1MCxcbiAgICAgIE1vZGFsUHJvcHM6IHtcbiAgICAgICAgQmFja2Ryb3BQcm9wc1xuICAgICAgfSA9IHt9LFxuICAgICAgb25DbG9zZSxcbiAgICAgIG9uT3BlbixcbiAgICAgIG9wZW4gPSBmYWxzZSxcbiAgICAgIFBhcGVyUHJvcHMgPSB7fSxcbiAgICAgIFN3aXBlQXJlYVByb3BzLFxuICAgICAgc3dpcGVBcmVhV2lkdGggPSAyMCxcbiAgICAgIHRyYW5zaXRpb25EdXJhdGlvbiA9IHRyYW5zaXRpb25EdXJhdGlvbkRlZmF1bHQsXG4gICAgICB2YXJpYW50ID0gJ3RlbXBvcmFyeScgLy8gTW9iaWxlIGZpcnN0LlxuICAgIH0gPSBwcm9wcyxcbiAgICBNb2RhbFByb3BzUHJvcCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLk1vZGFsUHJvcHMsIF9leGNsdWRlZCksXG4gICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkMik7XG4gIGNvbnN0IFttYXliZVN3aXBpbmcsIHNldE1heWJlU3dpcGluZ10gPSBSZWFjdC51c2VTdGF0ZShmYWxzZSk7XG4gIGNvbnN0IHN3aXBlSW5zdGFuY2UgPSBSZWFjdC51c2VSZWYoe1xuICAgIGlzU3dpcGluZzogbnVsbFxuICB9KTtcbiAgY29uc3Qgc3dpcGVBcmVhUmVmID0gUmVhY3QudXNlUmVmKCk7XG4gIGNvbnN0IGJhY2tkcm9wUmVmID0gUmVhY3QudXNlUmVmKCk7XG4gIGNvbnN0IHBhcGVyUmVmID0gUmVhY3QudXNlUmVmKCk7XG4gIGNvbnN0IGhhbmRsZVJlZiA9IHVzZUZvcmtSZWYoUGFwZXJQcm9wcy5yZWYsIHBhcGVyUmVmKTtcbiAgY29uc3QgdG91Y2hEZXRlY3RlZCA9IFJlYWN0LnVzZVJlZihmYWxzZSk7XG5cbiAgLy8gUmVmIGZvciB0cmFuc2l0aW9uIGR1cmF0aW9uIGJhc2VkIG9uIC8gdG8gbWF0Y2ggc3dpcGUgc3BlZWRcbiAgY29uc3QgY2FsY3VsYXRlZER1cmF0aW9uUmVmID0gUmVhY3QudXNlUmVmKCk7XG5cbiAgLy8gVXNlIGEgcmVmIHNvIHRoZSBvcGVuIHZhbHVlIHVzZWQgaXMgYWx3YXlzIHVwIHRvIGRhdGUgaW5zaWRlIHVzZUNhbGxiYWNrLlxuICB1c2VFbmhhbmNlZEVmZmVjdCgoKSA9PiB7XG4gICAgY2FsY3VsYXRlZER1cmF0aW9uUmVmLmN1cnJlbnQgPSBudWxsO1xuICB9LCBbb3Blbl0pO1xuICBjb25zdCBzZXRQb3NpdGlvbiA9IFJlYWN0LnVzZUNhbGxiYWNrKCh0cmFuc2xhdGUsIG9wdGlvbnMgPSB7fSkgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIG1vZGUgPSBudWxsLFxuICAgICAgY2hhbmdlVHJhbnNpdGlvbiA9IHRydWVcbiAgICB9ID0gb3B0aW9ucztcbiAgICBjb25zdCBhbmNob3JSdGwgPSBnZXRBbmNob3IodGhlbWUsIGFuY2hvcik7XG4gICAgY29uc3QgcnRsVHJhbnNsYXRlTXVsdGlwbGllciA9IFsncmlnaHQnLCAnYm90dG9tJ10uaW5kZXhPZihhbmNob3JSdGwpICE9PSAtMSA/IDEgOiAtMTtcbiAgICBjb25zdCBob3Jpem9udGFsU3dpcGUgPSBpc0hvcml6b250YWwoYW5jaG9yKTtcbiAgICBjb25zdCB0cmFuc2Zvcm0gPSBob3Jpem9udGFsU3dpcGUgPyBgdHJhbnNsYXRlKCR7cnRsVHJhbnNsYXRlTXVsdGlwbGllciAqIHRyYW5zbGF0ZX1weCwgMClgIDogYHRyYW5zbGF0ZSgwLCAke3J0bFRyYW5zbGF0ZU11bHRpcGxpZXIgKiB0cmFuc2xhdGV9cHgpYDtcbiAgICBjb25zdCBkcmF3ZXJTdHlsZSA9IHBhcGVyUmVmLmN1cnJlbnQuc3R5bGU7XG4gICAgZHJhd2VyU3R5bGUud2Via2l0VHJhbnNmb3JtID0gdHJhbnNmb3JtO1xuICAgIGRyYXdlclN0eWxlLnRyYW5zZm9ybSA9IHRyYW5zZm9ybTtcbiAgICBsZXQgdHJhbnNpdGlvbiA9ICcnO1xuICAgIGlmIChtb2RlKSB7XG4gICAgICB0cmFuc2l0aW9uID0gdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCdhbGwnLCBnZXRUcmFuc2l0aW9uUHJvcHMoe1xuICAgICAgICBlYXNpbmc6IHVuZGVmaW5lZCxcbiAgICAgICAgc3R5bGU6IHVuZGVmaW5lZCxcbiAgICAgICAgdGltZW91dDogdHJhbnNpdGlvbkR1cmF0aW9uXG4gICAgICB9LCB7XG4gICAgICAgIG1vZGVcbiAgICAgIH0pKTtcbiAgICB9XG4gICAgaWYgKGNoYW5nZVRyYW5zaXRpb24pIHtcbiAgICAgIGRyYXdlclN0eWxlLndlYmtpdFRyYW5zaXRpb24gPSB0cmFuc2l0aW9uO1xuICAgICAgZHJhd2VyU3R5bGUudHJhbnNpdGlvbiA9IHRyYW5zaXRpb247XG4gICAgfVxuICAgIGlmICghZGlzYWJsZUJhY2tkcm9wVHJhbnNpdGlvbiAmJiAhaGlkZUJhY2tkcm9wKSB7XG4gICAgICBjb25zdCBiYWNrZHJvcFN0eWxlID0gYmFja2Ryb3BSZWYuY3VycmVudC5zdHlsZTtcbiAgICAgIGJhY2tkcm9wU3R5bGUub3BhY2l0eSA9IDEgLSB0cmFuc2xhdGUgLyBnZXRNYXhUcmFuc2xhdGUoaG9yaXpvbnRhbFN3aXBlLCBwYXBlclJlZi5jdXJyZW50KTtcbiAgICAgIGlmIChjaGFuZ2VUcmFuc2l0aW9uKSB7XG4gICAgICAgIGJhY2tkcm9wU3R5bGUud2Via2l0VHJhbnNpdGlvbiA9IHRyYW5zaXRpb247XG4gICAgICAgIGJhY2tkcm9wU3R5bGUudHJhbnNpdGlvbiA9IHRyYW5zaXRpb247XG4gICAgICB9XG4gICAgfVxuICB9LCBbYW5jaG9yLCBkaXNhYmxlQmFja2Ryb3BUcmFuc2l0aW9uLCBoaWRlQmFja2Ryb3AsIHRoZW1lLCB0cmFuc2l0aW9uRHVyYXRpb25dKTtcbiAgY29uc3QgaGFuZGxlQm9keVRvdWNoRW5kID0gdXNlRXZlbnRDYWxsYmFjayhuYXRpdmVFdmVudCA9PiB7XG4gICAgaWYgKCF0b3VjaERldGVjdGVkLmN1cnJlbnQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY2xhaW1lZFN3aXBlSW5zdGFuY2UgPSBudWxsO1xuICAgIHRvdWNoRGV0ZWN0ZWQuY3VycmVudCA9IGZhbHNlO1xuICAgIFJlYWN0RE9NLmZsdXNoU3luYygoKSA9PiB7XG4gICAgICBzZXRNYXliZVN3aXBpbmcoZmFsc2UpO1xuICAgIH0pO1xuXG4gICAgLy8gVGhlIHN3aXBlIHdhc24ndCBzdGFydGVkLlxuICAgIGlmICghc3dpcGVJbnN0YW5jZS5jdXJyZW50LmlzU3dpcGluZykge1xuICAgICAgc3dpcGVJbnN0YW5jZS5jdXJyZW50LmlzU3dpcGluZyA9IG51bGw7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHN3aXBlSW5zdGFuY2UuY3VycmVudC5pc1N3aXBpbmcgPSBudWxsO1xuICAgIGNvbnN0IGFuY2hvclJ0bCA9IGdldEFuY2hvcih0aGVtZSwgYW5jaG9yKTtcbiAgICBjb25zdCBob3Jpem9udGFsID0gaXNIb3Jpem9udGFsKGFuY2hvcik7XG4gICAgbGV0IGN1cnJlbnQ7XG4gICAgaWYgKGhvcml6b250YWwpIHtcbiAgICAgIGN1cnJlbnQgPSBjYWxjdWxhdGVDdXJyZW50WChhbmNob3JSdGwsIG5hdGl2ZUV2ZW50LmNoYW5nZWRUb3VjaGVzLCBvd25lckRvY3VtZW50KG5hdGl2ZUV2ZW50LmN1cnJlbnRUYXJnZXQpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY3VycmVudCA9IGNhbGN1bGF0ZUN1cnJlbnRZKGFuY2hvclJ0bCwgbmF0aXZlRXZlbnQuY2hhbmdlZFRvdWNoZXMsIG93bmVyV2luZG93KG5hdGl2ZUV2ZW50LmN1cnJlbnRUYXJnZXQpKTtcbiAgICB9XG4gICAgY29uc3Qgc3RhcnRMb2NhdGlvbiA9IGhvcml6b250YWwgPyBzd2lwZUluc3RhbmNlLmN1cnJlbnQuc3RhcnRYIDogc3dpcGVJbnN0YW5jZS5jdXJyZW50LnN0YXJ0WTtcbiAgICBjb25zdCBtYXhUcmFuc2xhdGUgPSBnZXRNYXhUcmFuc2xhdGUoaG9yaXpvbnRhbCwgcGFwZXJSZWYuY3VycmVudCk7XG4gICAgY29uc3QgY3VycmVudFRyYW5zbGF0ZSA9IGdldFRyYW5zbGF0ZShjdXJyZW50LCBzdGFydExvY2F0aW9uLCBvcGVuLCBtYXhUcmFuc2xhdGUpO1xuICAgIGNvbnN0IHRyYW5zbGF0ZVJhdGlvID0gY3VycmVudFRyYW5zbGF0ZSAvIG1heFRyYW5zbGF0ZTtcbiAgICBpZiAoTWF0aC5hYnMoc3dpcGVJbnN0YW5jZS5jdXJyZW50LnZlbG9jaXR5KSA+IG1pbkZsaW5nVmVsb2NpdHkpIHtcbiAgICAgIC8vIENhbGN1bGF0ZSB0cmFuc2l0aW9uIGR1cmF0aW9uIHRvIG1hdGNoIHN3aXBlIHNwZWVkXG4gICAgICBjYWxjdWxhdGVkRHVyYXRpb25SZWYuY3VycmVudCA9IE1hdGguYWJzKChtYXhUcmFuc2xhdGUgLSBjdXJyZW50VHJhbnNsYXRlKSAvIHN3aXBlSW5zdGFuY2UuY3VycmVudC52ZWxvY2l0eSkgKiAxMDAwO1xuICAgIH1cbiAgICBpZiAob3Blbikge1xuICAgICAgaWYgKHN3aXBlSW5zdGFuY2UuY3VycmVudC52ZWxvY2l0eSA+IG1pbkZsaW5nVmVsb2NpdHkgfHwgdHJhbnNsYXRlUmF0aW8gPiBoeXN0ZXJlc2lzKSB7XG4gICAgICAgIG9uQ2xvc2UoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIFJlc2V0IHRoZSBwb3NpdGlvbiwgdGhlIHN3aXBlIHdhcyBhYm9ydGVkLlxuICAgICAgICBzZXRQb3NpdGlvbigwLCB7XG4gICAgICAgICAgbW9kZTogJ2V4aXQnXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoc3dpcGVJbnN0YW5jZS5jdXJyZW50LnZlbG9jaXR5IDwgLW1pbkZsaW5nVmVsb2NpdHkgfHwgMSAtIHRyYW5zbGF0ZVJhdGlvID4gaHlzdGVyZXNpcykge1xuICAgICAgb25PcGVuKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFJlc2V0IHRoZSBwb3NpdGlvbiwgdGhlIHN3aXBlIHdhcyBhYm9ydGVkLlxuICAgICAgc2V0UG9zaXRpb24oZ2V0TWF4VHJhbnNsYXRlKGhvcml6b250YWwsIHBhcGVyUmVmLmN1cnJlbnQpLCB7XG4gICAgICAgIG1vZGU6ICdlbnRlcidcbiAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG4gIGNvbnN0IHN0YXJ0TWF5YmVTd2lwaW5nID0gKGZvcmNlID0gZmFsc2UpID0+IHtcbiAgICBpZiAoIW1heWJlU3dpcGluZykge1xuICAgICAgLy8gb24gU2FmYXJpIE1vYmlsZSwgaWYgeW91IHdhbnQgdG8gYmUgYWJsZSB0byBoYXZlIHRoZSAnY2xpY2snIGV2ZW50IGZpcmVkIG9uIGNoaWxkIGVsZW1lbnRzLCBub3RoaW5nIGluIHRoZSBET00gY2FuIGJlIGNoYW5nZWQuXG4gICAgICAvLyB0aGlzIGlzIGJlY2F1c2UgU2FmYXJpIE1vYmlsZSB3aWxsIG5vdCBmaXJlIGFueSBtb3VzZSBldmVudHMgKHN0aWxsIGZpcmVzIHRvdWNoIHRob3VnaCkgaWYgdGhlIERPTSBjaGFuZ2VzIGR1cmluZyBtb3VzZW1vdmUuXG4gICAgICAvLyBzbyBkbyB0aGlzIGNoYW5nZSBvbiBmaXJzdCB0b3VjaG1vdmUgaW5zdGVhZCBvZiB0b3VjaHN0YXJ0XG4gICAgICBpZiAoZm9yY2UgfHwgIShkaXNhYmxlRGlzY292ZXJ5ICYmIGFsbG93U3dpcGVJbkNoaWxkcmVuKSkge1xuICAgICAgICBSZWFjdERPTS5mbHVzaFN5bmMoKCkgPT4ge1xuICAgICAgICAgIHNldE1heWJlU3dpcGluZyh0cnVlKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBjb25zdCBob3Jpem9udGFsU3dpcGUgPSBpc0hvcml6b250YWwoYW5jaG9yKTtcbiAgICAgIGlmICghb3BlbiAmJiBwYXBlclJlZi5jdXJyZW50KSB7XG4gICAgICAgIC8vIFRoZSByZWYgbWF5IGJlIG51bGwgd2hlbiBhIHBhcmVudCBjb21wb25lbnQgdXBkYXRlcyB3aGlsZSBzd2lwaW5nLlxuICAgICAgICBzZXRQb3NpdGlvbihnZXRNYXhUcmFuc2xhdGUoaG9yaXpvbnRhbFN3aXBlLCBwYXBlclJlZi5jdXJyZW50KSArIChkaXNhYmxlRGlzY292ZXJ5ID8gMTUgOiAtRFJBR19TVEFSVEVEX1NJR05BTCksIHtcbiAgICAgICAgICBjaGFuZ2VUcmFuc2l0aW9uOiBmYWxzZVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIHN3aXBlSW5zdGFuY2UuY3VycmVudC52ZWxvY2l0eSA9IDA7XG4gICAgICBzd2lwZUluc3RhbmNlLmN1cnJlbnQubGFzdFRpbWUgPSBudWxsO1xuICAgICAgc3dpcGVJbnN0YW5jZS5jdXJyZW50Lmxhc3RUcmFuc2xhdGUgPSBudWxsO1xuICAgICAgc3dpcGVJbnN0YW5jZS5jdXJyZW50LnBhcGVySGl0ID0gZmFsc2U7XG4gICAgICB0b3VjaERldGVjdGVkLmN1cnJlbnQgPSB0cnVlO1xuICAgIH1cbiAgfTtcbiAgY29uc3QgaGFuZGxlQm9keVRvdWNoTW92ZSA9IHVzZUV2ZW50Q2FsbGJhY2sobmF0aXZlRXZlbnQgPT4ge1xuICAgIC8vIHRoZSByZWYgbWF5IGJlIG51bGwgd2hlbiBhIHBhcmVudCBjb21wb25lbnQgdXBkYXRlcyB3aGlsZSBzd2lwaW5nXG4gICAgaWYgKCFwYXBlclJlZi5jdXJyZW50IHx8ICF0b3VjaERldGVjdGVkLmN1cnJlbnQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBXZSBhcmUgbm90IHN1cHBvc2VkIHRvIGhhbmRsZSB0aGlzIHRvdWNoIG1vdmUgYmVjYXVzZSB0aGUgc3dpcGUgd2FzIHN0YXJ0ZWQgaW4gYSBzY3JvbGxhYmxlIGNvbnRhaW5lciBpbiB0aGUgZHJhd2VyXG4gICAgaWYgKGNsYWltZWRTd2lwZUluc3RhbmNlICE9PSBudWxsICYmIGNsYWltZWRTd2lwZUluc3RhbmNlICE9PSBzd2lwZUluc3RhbmNlLmN1cnJlbnQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgc3RhcnRNYXliZVN3aXBpbmcodHJ1ZSk7XG4gICAgY29uc3QgYW5jaG9yUnRsID0gZ2V0QW5jaG9yKHRoZW1lLCBhbmNob3IpO1xuICAgIGNvbnN0IGhvcml6b250YWxTd2lwZSA9IGlzSG9yaXpvbnRhbChhbmNob3IpO1xuICAgIGNvbnN0IGN1cnJlbnRYID0gY2FsY3VsYXRlQ3VycmVudFgoYW5jaG9yUnRsLCBuYXRpdmVFdmVudC50b3VjaGVzLCBvd25lckRvY3VtZW50KG5hdGl2ZUV2ZW50LmN1cnJlbnRUYXJnZXQpKTtcbiAgICBjb25zdCBjdXJyZW50WSA9IGNhbGN1bGF0ZUN1cnJlbnRZKGFuY2hvclJ0bCwgbmF0aXZlRXZlbnQudG91Y2hlcywgb3duZXJXaW5kb3cobmF0aXZlRXZlbnQuY3VycmVudFRhcmdldCkpO1xuICAgIGlmIChvcGVuICYmIHBhcGVyUmVmLmN1cnJlbnQuY29udGFpbnMobmF0aXZlRXZlbnQudGFyZ2V0KSAmJiBjbGFpbWVkU3dpcGVJbnN0YW5jZSA9PT0gbnVsbCkge1xuICAgICAgY29uc3QgZG9tVHJlZVNoYXBlcyA9IGdldERvbVRyZWVTaGFwZXMobmF0aXZlRXZlbnQudGFyZ2V0LCBwYXBlclJlZi5jdXJyZW50KTtcbiAgICAgIGNvbnN0IGhhc05hdGl2ZUhhbmRsZXIgPSBjb21wdXRlSGFzTmF0aXZlSGFuZGxlcih7XG4gICAgICAgIGRvbVRyZWVTaGFwZXMsXG4gICAgICAgIHN0YXJ0OiBob3Jpem9udGFsU3dpcGUgPyBzd2lwZUluc3RhbmNlLmN1cnJlbnQuc3RhcnRYIDogc3dpcGVJbnN0YW5jZS5jdXJyZW50LnN0YXJ0WSxcbiAgICAgICAgY3VycmVudDogaG9yaXpvbnRhbFN3aXBlID8gY3VycmVudFggOiBjdXJyZW50WSxcbiAgICAgICAgYW5jaG9yXG4gICAgICB9KTtcbiAgICAgIGlmIChoYXNOYXRpdmVIYW5kbGVyKSB7XG4gICAgICAgIGNsYWltZWRTd2lwZUluc3RhbmNlID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgY2xhaW1lZFN3aXBlSW5zdGFuY2UgPSBzd2lwZUluc3RhbmNlLmN1cnJlbnQ7XG4gICAgfVxuXG4gICAgLy8gV2UgZG9uJ3Qga25vdyB5ZXQuXG4gICAgaWYgKHN3aXBlSW5zdGFuY2UuY3VycmVudC5pc1N3aXBpbmcgPT0gbnVsbCkge1xuICAgICAgY29uc3QgZHggPSBNYXRoLmFicyhjdXJyZW50WCAtIHN3aXBlSW5zdGFuY2UuY3VycmVudC5zdGFydFgpO1xuICAgICAgY29uc3QgZHkgPSBNYXRoLmFicyhjdXJyZW50WSAtIHN3aXBlSW5zdGFuY2UuY3VycmVudC5zdGFydFkpO1xuICAgICAgY29uc3QgZGVmaW5pdGVseVN3aXBpbmcgPSBob3Jpem9udGFsU3dpcGUgPyBkeCA+IGR5ICYmIGR4ID4gVU5DRVJUQUlOVFlfVEhSRVNIT0xEIDogZHkgPiBkeCAmJiBkeSA+IFVOQ0VSVEFJTlRZX1RIUkVTSE9MRDtcbiAgICAgIGlmIChkZWZpbml0ZWx5U3dpcGluZyAmJiBuYXRpdmVFdmVudC5jYW5jZWxhYmxlKSB7XG4gICAgICAgIG5hdGl2ZUV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB9XG4gICAgICBpZiAoZGVmaW5pdGVseVN3aXBpbmcgPT09IHRydWUgfHwgKGhvcml6b250YWxTd2lwZSA/IGR5ID4gVU5DRVJUQUlOVFlfVEhSRVNIT0xEIDogZHggPiBVTkNFUlRBSU5UWV9USFJFU0hPTEQpKSB7XG4gICAgICAgIHN3aXBlSW5zdGFuY2UuY3VycmVudC5pc1N3aXBpbmcgPSBkZWZpbml0ZWx5U3dpcGluZztcbiAgICAgICAgaWYgKCFkZWZpbml0ZWx5U3dpcGluZykge1xuICAgICAgICAgIGhhbmRsZUJvZHlUb3VjaEVuZChuYXRpdmVFdmVudCk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gU2hpZnQgdGhlIHN0YXJ0aW5nIHBvaW50LlxuICAgICAgICBzd2lwZUluc3RhbmNlLmN1cnJlbnQuc3RhcnRYID0gY3VycmVudFg7XG4gICAgICAgIHN3aXBlSW5zdGFuY2UuY3VycmVudC5zdGFydFkgPSBjdXJyZW50WTtcblxuICAgICAgICAvLyBDb21wZW5zYXRlIGZvciB0aGUgcGFydCBvZiB0aGUgZHJhd2VyIGRpc3BsYXllZCBvbiB0b3VjaCBzdGFydC5cbiAgICAgICAgaWYgKCFkaXNhYmxlRGlzY292ZXJ5ICYmICFvcGVuKSB7XG4gICAgICAgICAgaWYgKGhvcml6b250YWxTd2lwZSkge1xuICAgICAgICAgICAgc3dpcGVJbnN0YW5jZS5jdXJyZW50LnN0YXJ0WCAtPSBEUkFHX1NUQVJURURfU0lHTkFMO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzd2lwZUluc3RhbmNlLmN1cnJlbnQuc3RhcnRZIC09IERSQUdfU1RBUlRFRF9TSUdOQUw7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGlmICghc3dpcGVJbnN0YW5jZS5jdXJyZW50LmlzU3dpcGluZykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBtYXhUcmFuc2xhdGUgPSBnZXRNYXhUcmFuc2xhdGUoaG9yaXpvbnRhbFN3aXBlLCBwYXBlclJlZi5jdXJyZW50KTtcbiAgICBsZXQgc3RhcnRMb2NhdGlvbiA9IGhvcml6b250YWxTd2lwZSA/IHN3aXBlSW5zdGFuY2UuY3VycmVudC5zdGFydFggOiBzd2lwZUluc3RhbmNlLmN1cnJlbnQuc3RhcnRZO1xuICAgIGlmIChvcGVuICYmICFzd2lwZUluc3RhbmNlLmN1cnJlbnQucGFwZXJIaXQpIHtcbiAgICAgIHN0YXJ0TG9jYXRpb24gPSBNYXRoLm1pbihzdGFydExvY2F0aW9uLCBtYXhUcmFuc2xhdGUpO1xuICAgIH1cbiAgICBjb25zdCB0cmFuc2xhdGUgPSBnZXRUcmFuc2xhdGUoaG9yaXpvbnRhbFN3aXBlID8gY3VycmVudFggOiBjdXJyZW50WSwgc3RhcnRMb2NhdGlvbiwgb3BlbiwgbWF4VHJhbnNsYXRlKTtcbiAgICBpZiAob3Blbikge1xuICAgICAgaWYgKCFzd2lwZUluc3RhbmNlLmN1cnJlbnQucGFwZXJIaXQpIHtcbiAgICAgICAgY29uc3QgcGFwZXJIaXQgPSBob3Jpem9udGFsU3dpcGUgPyBjdXJyZW50WCA8IG1heFRyYW5zbGF0ZSA6IGN1cnJlbnRZIDwgbWF4VHJhbnNsYXRlO1xuICAgICAgICBpZiAocGFwZXJIaXQpIHtcbiAgICAgICAgICBzd2lwZUluc3RhbmNlLmN1cnJlbnQucGFwZXJIaXQgPSB0cnVlO1xuICAgICAgICAgIHN3aXBlSW5zdGFuY2UuY3VycmVudC5zdGFydFggPSBjdXJyZW50WDtcbiAgICAgICAgICBzd2lwZUluc3RhbmNlLmN1cnJlbnQuc3RhcnRZID0gY3VycmVudFk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHRyYW5zbGF0ZSA9PT0gMCkge1xuICAgICAgICBzd2lwZUluc3RhbmNlLmN1cnJlbnQuc3RhcnRYID0gY3VycmVudFg7XG4gICAgICAgIHN3aXBlSW5zdGFuY2UuY3VycmVudC5zdGFydFkgPSBjdXJyZW50WTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHN3aXBlSW5zdGFuY2UuY3VycmVudC5sYXN0VHJhbnNsYXRlID09PSBudWxsKSB7XG4gICAgICBzd2lwZUluc3RhbmNlLmN1cnJlbnQubGFzdFRyYW5zbGF0ZSA9IHRyYW5zbGF0ZTtcbiAgICAgIHN3aXBlSW5zdGFuY2UuY3VycmVudC5sYXN0VGltZSA9IHBlcmZvcm1hbmNlLm5vdygpICsgMTtcbiAgICB9XG4gICAgY29uc3QgdmVsb2NpdHkgPSAodHJhbnNsYXRlIC0gc3dpcGVJbnN0YW5jZS5jdXJyZW50Lmxhc3RUcmFuc2xhdGUpIC8gKHBlcmZvcm1hbmNlLm5vdygpIC0gc3dpcGVJbnN0YW5jZS5jdXJyZW50Lmxhc3RUaW1lKSAqIDFlMztcblxuICAgIC8vIExvdyBQYXNzIGZpbHRlci5cbiAgICBzd2lwZUluc3RhbmNlLmN1cnJlbnQudmVsb2NpdHkgPSBzd2lwZUluc3RhbmNlLmN1cnJlbnQudmVsb2NpdHkgKiAwLjQgKyB2ZWxvY2l0eSAqIDAuNjtcbiAgICBzd2lwZUluc3RhbmNlLmN1cnJlbnQubGFzdFRyYW5zbGF0ZSA9IHRyYW5zbGF0ZTtcbiAgICBzd2lwZUluc3RhbmNlLmN1cnJlbnQubGFzdFRpbWUgPSBwZXJmb3JtYW5jZS5ub3coKTtcblxuICAgIC8vIFdlIGFyZSBzd2lwaW5nLCBsZXQncyBwcmV2ZW50IHRoZSBzY3JvbGwgZXZlbnQgb24gaU9TLlxuICAgIGlmIChuYXRpdmVFdmVudC5jYW5jZWxhYmxlKSB7XG4gICAgICBuYXRpdmVFdmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cbiAgICBzZXRQb3NpdGlvbih0cmFuc2xhdGUpO1xuICB9KTtcbiAgY29uc3QgaGFuZGxlQm9keVRvdWNoU3RhcnQgPSB1c2VFdmVudENhbGxiYWNrKG5hdGl2ZUV2ZW50ID0+IHtcbiAgICAvLyBXZSBhcmUgbm90IHN1cHBvc2VkIHRvIGhhbmRsZSB0aGlzIHRvdWNoIG1vdmUuXG4gICAgLy8gRXhhbXBsZSBvZiB1c2UgY2FzZTogaWdub3JlIHRoZSBldmVudCBpZiB0aGVyZSBpcyBhIFNsaWRlci5cbiAgICBpZiAobmF0aXZlRXZlbnQuZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIFdlIGNhbiBvbmx5IGhhdmUgb25lIG5vZGUgYXQgdGhlIHRpbWUgY2xhaW1pbmcgb3duZXJzaGlwIGZvciBoYW5kbGluZyB0aGUgc3dpcGUuXG4gICAgaWYgKG5hdGl2ZUV2ZW50LmRlZmF1bHRNdWlQcmV2ZW50ZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBBdCBsZWFzdCBvbmUgZWxlbWVudCBjbG9ncyB0aGUgZHJhd2VyIGludGVyYWN0aW9uIHpvbmUuXG4gICAgaWYgKG9wZW4gJiYgKGhpZGVCYWNrZHJvcCB8fCAhYmFja2Ryb3BSZWYuY3VycmVudC5jb250YWlucyhuYXRpdmVFdmVudC50YXJnZXQpKSAmJiAhcGFwZXJSZWYuY3VycmVudC5jb250YWlucyhuYXRpdmVFdmVudC50YXJnZXQpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGFuY2hvclJ0bCA9IGdldEFuY2hvcih0aGVtZSwgYW5jaG9yKTtcbiAgICBjb25zdCBob3Jpem9udGFsU3dpcGUgPSBpc0hvcml6b250YWwoYW5jaG9yKTtcbiAgICBjb25zdCBjdXJyZW50WCA9IGNhbGN1bGF0ZUN1cnJlbnRYKGFuY2hvclJ0bCwgbmF0aXZlRXZlbnQudG91Y2hlcywgb3duZXJEb2N1bWVudChuYXRpdmVFdmVudC5jdXJyZW50VGFyZ2V0KSk7XG4gICAgY29uc3QgY3VycmVudFkgPSBjYWxjdWxhdGVDdXJyZW50WShhbmNob3JSdGwsIG5hdGl2ZUV2ZW50LnRvdWNoZXMsIG93bmVyV2luZG93KG5hdGl2ZUV2ZW50LmN1cnJlbnRUYXJnZXQpKTtcbiAgICBpZiAoIW9wZW4pIHtcbiAgICAgIHZhciBfcGFwZXJSZWYkY3VycmVudDtcbiAgICAgIC8vIGxvZ2ljIGZvciBpZiBzd2lwZSBzaG91bGQgYmUgaWdub3JlZDpcbiAgICAgIC8vIGlmIGRpc2FibGVTd2lwZVRvT3BlblxuICAgICAgLy8gaWYgdGFyZ2V0ICE9IHN3aXBlQXJlYSwgYW5kIHRhcmdldCBpcyBub3QgYSBjaGlsZCBvZiBwYXBlciByZWZcbiAgICAgIC8vIGlmIGlzIGEgY2hpbGQgb2YgcGFwZXIgcmVmLCBhbmQgYGFsbG93U3dpcGVJbkNoaWxkcmVuYCBkb2VzIG5vdCBhbGxvdyBpdFxuICAgICAgaWYgKGRpc2FibGVTd2lwZVRvT3BlbiB8fCAhKG5hdGl2ZUV2ZW50LnRhcmdldCA9PT0gc3dpcGVBcmVhUmVmLmN1cnJlbnQgfHwgKF9wYXBlclJlZiRjdXJyZW50ID0gcGFwZXJSZWYuY3VycmVudCkgIT0gbnVsbCAmJiBfcGFwZXJSZWYkY3VycmVudC5jb250YWlucyhuYXRpdmVFdmVudC50YXJnZXQpICYmICh0eXBlb2YgYWxsb3dTd2lwZUluQ2hpbGRyZW4gPT09ICdmdW5jdGlvbicgPyBhbGxvd1N3aXBlSW5DaGlsZHJlbihuYXRpdmVFdmVudCwgc3dpcGVBcmVhUmVmLmN1cnJlbnQsIHBhcGVyUmVmLmN1cnJlbnQpIDogYWxsb3dTd2lwZUluQ2hpbGRyZW4pKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoaG9yaXpvbnRhbFN3aXBlKSB7XG4gICAgICAgIGlmIChjdXJyZW50WCA+IHN3aXBlQXJlYVdpZHRoKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGN1cnJlbnRZID4gc3dpcGVBcmVhV2lkdGgpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cbiAgICBuYXRpdmVFdmVudC5kZWZhdWx0TXVpUHJldmVudGVkID0gdHJ1ZTtcbiAgICBjbGFpbWVkU3dpcGVJbnN0YW5jZSA9IG51bGw7XG4gICAgc3dpcGVJbnN0YW5jZS5jdXJyZW50LnN0YXJ0WCA9IGN1cnJlbnRYO1xuICAgIHN3aXBlSW5zdGFuY2UuY3VycmVudC5zdGFydFkgPSBjdXJyZW50WTtcbiAgICBzdGFydE1heWJlU3dpcGluZygpO1xuICB9KTtcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAodmFyaWFudCA9PT0gJ3RlbXBvcmFyeScpIHtcbiAgICAgIGNvbnN0IGRvYyA9IG93bmVyRG9jdW1lbnQocGFwZXJSZWYuY3VycmVudCk7XG4gICAgICBkb2MuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIGhhbmRsZUJvZHlUb3VjaFN0YXJ0KTtcbiAgICAgIC8vIEEgYmxvY2tpbmcgbGlzdGVuZXIgcHJldmVudHMgRmlyZWZveCdzIG5hdmJhciB0byBhdXRvLWhpZGUgb24gc2Nyb2xsLlxuICAgICAgLy8gSXQgb25seSBuZWVkcyB0byBwcmV2ZW50IHNjcm9sbGluZyBvbiB0aGUgZHJhd2VyJ3MgY29udGVudCB3aGVuIG9wZW4uXG4gICAgICAvLyBXaGVuIGNsb3NlZCwgdGhlIG92ZXJsYXkgcHJldmVudHMgc2Nyb2xsaW5nLlxuICAgICAgZG9jLmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNobW92ZScsIGhhbmRsZUJvZHlUb3VjaE1vdmUsIHtcbiAgICAgICAgcGFzc2l2ZTogIW9wZW5cbiAgICAgIH0pO1xuICAgICAgZG9jLmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoZW5kJywgaGFuZGxlQm9keVRvdWNoRW5kKTtcbiAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgIGRvYy5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgaGFuZGxlQm9keVRvdWNoU3RhcnQpO1xuICAgICAgICBkb2MucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2htb3ZlJywgaGFuZGxlQm9keVRvdWNoTW92ZSwge1xuICAgICAgICAgIHBhc3NpdmU6ICFvcGVuXG4gICAgICAgIH0pO1xuICAgICAgICBkb2MucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2hlbmQnLCBoYW5kbGVCb2R5VG91Y2hFbmQpO1xuICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfSwgW3ZhcmlhbnQsIG9wZW4sIGhhbmRsZUJvZHlUb3VjaFN0YXJ0LCBoYW5kbGVCb2R5VG91Y2hNb3ZlLCBoYW5kbGVCb2R5VG91Y2hFbmRdKTtcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+ICgpID0+IHtcbiAgICAvLyBXZSBuZWVkIHRvIHJlbGVhc2UgdGhlIGxvY2suXG4gICAgaWYgKGNsYWltZWRTd2lwZUluc3RhbmNlID09PSBzd2lwZUluc3RhbmNlLmN1cnJlbnQpIHtcbiAgICAgIGNsYWltZWRTd2lwZUluc3RhbmNlID0gbnVsbDtcbiAgICB9XG4gIH0sIFtdKTtcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoIW9wZW4pIHtcbiAgICAgIHNldE1heWJlU3dpcGluZyhmYWxzZSk7XG4gICAgfVxuICB9LCBbb3Blbl0pO1xuICByZXR1cm4gLyojX19QVVJFX18qL19qc3hzKFJlYWN0LkZyYWdtZW50LCB7XG4gICAgY2hpbGRyZW46IFsvKiNfX1BVUkVfXyovX2pzeChEcmF3ZXIsIF9leHRlbmRzKHtcbiAgICAgIG9wZW46IHZhcmlhbnQgPT09ICd0ZW1wb3JhcnknICYmIG1heWJlU3dpcGluZyA/IHRydWUgOiBvcGVuLFxuICAgICAgdmFyaWFudDogdmFyaWFudCxcbiAgICAgIE1vZGFsUHJvcHM6IF9leHRlbmRzKHtcbiAgICAgICAgQmFja2Ryb3BQcm9wczogX2V4dGVuZHMoe30sIEJhY2tkcm9wUHJvcHMsIHtcbiAgICAgICAgICByZWY6IGJhY2tkcm9wUmVmXG4gICAgICAgIH0pXG4gICAgICB9LCB2YXJpYW50ID09PSAndGVtcG9yYXJ5JyAmJiB7XG4gICAgICAgIGtlZXBNb3VudGVkOiB0cnVlXG4gICAgICB9LCBNb2RhbFByb3BzUHJvcCksXG4gICAgICBoaWRlQmFja2Ryb3A6IGhpZGVCYWNrZHJvcCxcbiAgICAgIFBhcGVyUHJvcHM6IF9leHRlbmRzKHt9LCBQYXBlclByb3BzLCB7XG4gICAgICAgIHN0eWxlOiBfZXh0ZW5kcyh7XG4gICAgICAgICAgcG9pbnRlckV2ZW50czogdmFyaWFudCA9PT0gJ3RlbXBvcmFyeScgJiYgIW9wZW4gJiYgIWFsbG93U3dpcGVJbkNoaWxkcmVuID8gJ25vbmUnIDogJydcbiAgICAgICAgfSwgUGFwZXJQcm9wcy5zdHlsZSksXG4gICAgICAgIHJlZjogaGFuZGxlUmVmXG4gICAgICB9KSxcbiAgICAgIGFuY2hvcjogYW5jaG9yLFxuICAgICAgdHJhbnNpdGlvbkR1cmF0aW9uOiBjYWxjdWxhdGVkRHVyYXRpb25SZWYuY3VycmVudCB8fCB0cmFuc2l0aW9uRHVyYXRpb24sXG4gICAgICBvbkNsb3NlOiBvbkNsb3NlLFxuICAgICAgcmVmOiByZWZcbiAgICB9LCBvdGhlcikpLCAhZGlzYWJsZVN3aXBlVG9PcGVuICYmIHZhcmlhbnQgPT09ICd0ZW1wb3JhcnknICYmIC8qI19fUFVSRV9fKi9fanN4KE5vU3NyLCB7XG4gICAgICBjaGlsZHJlbjogLyojX19QVVJFX18qL19qc3goU3dpcGVBcmVhLCBfZXh0ZW5kcyh7XG4gICAgICAgIGFuY2hvcjogYW5jaG9yLFxuICAgICAgICByZWY6IHN3aXBlQXJlYVJlZixcbiAgICAgICAgd2lkdGg6IHN3aXBlQXJlYVdpZHRoXG4gICAgICB9LCBTd2lwZUFyZWFQcm9wcykpXG4gICAgfSldXG4gIH0pO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBTd2lwZWFibGVEcmF3ZXIucHJvcFR5cGVzIC8qIHJlbW92ZS1wcm9wdHlwZXMgKi8gPSB7XG4gIC8vIOKUjOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgCBXYXJuaW5nIOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUkFxuICAvLyDilIIgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zLiDilIJcbiAgLy8g4pSCICAgIFRvIHVwZGF0ZSB0aGVtLCBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBgcG5wbSBwcm9wdHlwZXNgLiAgICAg4pSCXG4gIC8vIOKUlOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUmFxuICAvKipcbiAgICogSWYgc2V0IHRvIHRydWUsIHRoZSBzd2lwZSBldmVudCB3aWxsIG9wZW4gdGhlIGRyYXdlciBldmVuIGlmIHRoZSB1c2VyIGJlZ2lucyB0aGUgc3dpcGUgb24gb25lIG9mIHRoZSBkcmF3ZXIncyBjaGlsZHJlbi5cbiAgICogVGhpcyBjYW4gYmUgdXNlZnVsIGluIHNjZW5hcmlvcyB3aGVyZSB0aGUgZHJhd2VyIGlzIHBhcnRpYWxseSB2aXNpYmxlLlxuICAgKiBZb3UgY2FuIGN1c3RvbWl6ZSBpdCBmdXJ0aGVyIHdpdGggYSBjYWxsYmFjayB0aGF0IGRldGVybWluZXMgd2hpY2ggY2hpbGRyZW4gdGhlIHVzZXIgY2FuIGRyYWcgb3ZlciB0byBvcGVuIHRoZSBkcmF3ZXJcbiAgICogKGZvciBleGFtcGxlLCB0byBpZ25vcmUgb3RoZXIgZWxlbWVudHMgdGhhdCBoYW5kbGUgdG91Y2ggbW92ZSBldmVudHMsIGxpa2Ugc2xpZGVycykuXG4gICAqXG4gICAqIEBwYXJhbSB7VG91Y2hFdmVudH0gZXZlbnQgVGhlICd0b3VjaHN0YXJ0JyBldmVudFxuICAgKiBAcGFyYW0ge0hUTUxEaXZFbGVtZW50fSBzd2lwZUFyZWEgVGhlIHN3aXBlIGFyZWEgZWxlbWVudFxuICAgKiBAcGFyYW0ge0hUTUxEaXZFbGVtZW50fSBwYXBlciBUaGUgZHJhd2VyJ3MgcGFwZXIgZWxlbWVudFxuICAgKlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgYWxsb3dTd2lwZUluQ2hpbGRyZW46IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMuYm9vbF0pLFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgYW5jaG9yOiBQcm9wVHlwZXMub25lT2YoWydib3R0b20nLCAnbGVmdCcsICdyaWdodCcsICd0b3AnXSksXG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogRGlzYWJsZSB0aGUgYmFja2Ryb3AgdHJhbnNpdGlvbi5cbiAgICogVGhpcyBjYW4gaW1wcm92ZSB0aGUgRlBTIG9uIGxvdy1lbmQgZGV2aWNlcy5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRpc2FibGVCYWNrZHJvcFRyYW5zaXRpb246IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0b3VjaGluZyB0aGUgc2NyZWVuIG5lYXIgdGhlIGVkZ2Ugb2YgdGhlIGRyYXdlciB3aWxsIG5vdCBzbGlkZSBpbiB0aGUgZHJhd2VyIGEgYml0XG4gICAqIHRvIHByb21vdGUgYWNjaWRlbnRhbCBkaXNjb3Zlcnkgb2YgdGhlIHN3aXBlIGdlc3R1cmUuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkaXNhYmxlRGlzY292ZXJ5OiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgc3dpcGUgdG8gb3BlbiBpcyBkaXNhYmxlZC4gVGhpcyBpcyB1c2VmdWwgaW4gYnJvd3NlcnMgd2hlcmUgc3dpcGluZyB0cmlnZ2Vyc1xuICAgKiBuYXZpZ2F0aW9uIGFjdGlvbnMuIFN3aXBlIHRvIG9wZW4gaXMgZGlzYWJsZWQgb24gaU9TIGJyb3dzZXJzIGJ5IGRlZmF1bHQuXG4gICAqIEBkZWZhdWx0IHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIC9pUGFkfGlQaG9uZXxpUG9kLy50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpXG4gICAqL1xuICBkaXNhYmxlU3dpcGVUb09wZW46IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgaGlkZUJhY2tkcm9wOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIEFmZmVjdHMgaG93IGZhciB0aGUgZHJhd2VyIG11c3QgYmUgb3BlbmVkL2Nsb3NlZCB0byBjaGFuZ2UgaXRzIHN0YXRlLlxuICAgKiBTcGVjaWZpZWQgYXMgcGVyY2VudCAoMC0xKSBvZiB0aGUgd2lkdGggb2YgdGhlIGRyYXdlclxuICAgKiBAZGVmYXVsdCAwLjUyXG4gICAqL1xuICBoeXN0ZXJlc2lzOiBQcm9wVHlwZXMubnVtYmVyLFxuICAvKipcbiAgICogRGVmaW5lcywgZnJvbSB3aGljaCAoYXZlcmFnZSkgdmVsb2NpdHkgb24sIHRoZSBzd2lwZSBpc1xuICAgKiBkZWZpbmVkIGFzIGNvbXBsZXRlIGFsdGhvdWdoIGh5c3RlcmVzaXMgaXNuJ3QgcmVhY2hlZC5cbiAgICogR29vZCB0aHJlc2hvbGQgaXMgYmV0d2VlbiAyNTAgLSAxMDAwIHB4L3NcbiAgICogQGRlZmF1bHQgNDUwXG4gICAqL1xuICBtaW5GbGluZ1ZlbG9jaXR5OiBQcm9wVHlwZXMubnVtYmVyLFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgTW9kYWxQcm9wczogUHJvcFR5cGVzIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi8uc2hhcGUoe1xuICAgIEJhY2tkcm9wUHJvcHM6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgICBjb21wb25lbnQ6IGVsZW1lbnRUeXBlQWNjZXB0aW5nUmVmXG4gICAgfSlcbiAgfSksXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSBjb21wb25lbnQgcmVxdWVzdHMgdG8gYmUgY2xvc2VkLlxuICAgKlxuICAgKiBAcGFyYW0ge1JlYWN0LlN5bnRoZXRpY0V2ZW50PHt9Pn0gZXZlbnQgVGhlIGV2ZW50IHNvdXJjZSBvZiB0aGUgY2FsbGJhY2suXG4gICAqL1xuICBvbkNsb3NlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgY29tcG9uZW50IHJlcXVlc3RzIHRvIGJlIG9wZW5lZC5cbiAgICpcbiAgICogQHBhcmFtIHtSZWFjdC5TeW50aGV0aWNFdmVudDx7fT59IGV2ZW50IFRoZSBldmVudCBzb3VyY2Ugb2YgdGhlIGNhbGxiYWNrLlxuICAgKi9cbiAgb25PcGVuOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgY29tcG9uZW50IGlzIHNob3duLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgb3BlbjogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBQYXBlclByb3BzOiBQcm9wVHlwZXMgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqLy5zaGFwZSh7XG4gICAgY29tcG9uZW50OiBlbGVtZW50VHlwZUFjY2VwdGluZ1JlZixcbiAgICBzdHlsZTogUHJvcFR5cGVzLm9iamVjdFxuICB9KSxcbiAgLyoqXG4gICAqIFRoZSBlbGVtZW50IGlzIHVzZWQgdG8gaW50ZXJjZXB0IHRoZSB0b3VjaCBldmVudHMgb24gdGhlIGVkZ2UuXG4gICAqL1xuICBTd2lwZUFyZWFQcm9wczogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqXG4gICAqIFRoZSB3aWR0aCBvZiB0aGUgbGVmdCBtb3N0IChvciByaWdodCBtb3N0KSBhcmVhIGluIGBweGAgdGhhdFxuICAgKiB0aGUgZHJhd2VyIGNhbiBiZSBzd2lwZWQgb3BlbiBmcm9tLlxuICAgKiBAZGVmYXVsdCAyMFxuICAgKi9cbiAgc3dpcGVBcmVhV2lkdGg6IFByb3BUeXBlcy5udW1iZXIsXG4gIC8qKlxuICAgKiBUaGUgZHVyYXRpb24gZm9yIHRoZSB0cmFuc2l0aW9uLCBpbiBtaWxsaXNlY29uZHMuXG4gICAqIFlvdSBtYXkgc3BlY2lmeSBhIHNpbmdsZSB0aW1lb3V0IGZvciBhbGwgdHJhbnNpdGlvbnMsIG9yIGluZGl2aWR1YWxseSB3aXRoIGFuIG9iamVjdC5cbiAgICogQGRlZmF1bHQge1xuICAgKiAgIGVudGVyOiB0aGVtZS50cmFuc2l0aW9ucy5kdXJhdGlvbi5lbnRlcmluZ1NjcmVlbixcbiAgICogICBleGl0OiB0aGVtZS50cmFuc2l0aW9ucy5kdXJhdGlvbi5sZWF2aW5nU2NyZWVuLFxuICAgKiB9XG4gICAqL1xuICB0cmFuc2l0aW9uRHVyYXRpb246IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zaGFwZSh7XG4gICAgYXBwZWFyOiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIGVudGVyOiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIGV4aXQ6IFByb3BUeXBlcy5udW1iZXJcbiAgfSldKSxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHZhcmlhbnQ6IFByb3BUeXBlcy5vbmVPZihbJ3Blcm1hbmVudCcsICdwZXJzaXN0ZW50JywgJ3RlbXBvcmFyeSddKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IFN3aXBlYWJsZURyYXdlcjsiLCJpbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzZXMnO1xuaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3MnO1xuZXhwb3J0IGZ1bmN0aW9uIGdldFN3aXRjaFV0aWxpdHlDbGFzcyhzbG90KSB7XG4gIHJldHVybiBnZW5lcmF0ZVV0aWxpdHlDbGFzcygnTXVpU3dpdGNoJywgc2xvdCk7XG59XG5jb25zdCBzd2l0Y2hDbGFzc2VzID0gZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcygnTXVpU3dpdGNoJywgWydyb290JywgJ2VkZ2VTdGFydCcsICdlZGdlRW5kJywgJ3N3aXRjaEJhc2UnLCAnY29sb3JQcmltYXJ5JywgJ2NvbG9yU2Vjb25kYXJ5JywgJ3NpemVTbWFsbCcsICdzaXplTWVkaXVtJywgJ2NoZWNrZWQnLCAnZGlzYWJsZWQnLCAnaW5wdXQnLCAndGh1bWInLCAndHJhY2snXSk7XG5leHBvcnQgZGVmYXVsdCBzd2l0Y2hDbGFzc2VzOyIsIid1c2UgY2xpZW50JztcblxuLy8gQGluaGVyaXRlZENvbXBvbmVudCBJY29uQnV0dG9uXG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiY2xhc3NOYW1lXCIsIFwiY29sb3JcIiwgXCJlZGdlXCIsIFwic2l6ZVwiLCBcInN4XCJdO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHJlZlR5cGUgZnJvbSAnQG11aS91dGlscy9yZWZUeXBlJztcbmltcG9ydCBjb21wb3NlQ2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2NvbXBvc2VDbGFzc2VzJztcbmltcG9ydCB7IGFscGhhLCBkYXJrZW4sIGxpZ2h0ZW4gfSBmcm9tICdAbXVpL3N5c3RlbS9jb2xvck1hbmlwdWxhdG9yJztcbmltcG9ydCBjYXBpdGFsaXplIGZyb20gJy4uL3V0aWxzL2NhcGl0YWxpemUnO1xuaW1wb3J0IFN3aXRjaEJhc2UgZnJvbSAnLi4vaW50ZXJuYWwvU3dpdGNoQmFzZSc7XG5pbXBvcnQgeyBzdHlsZWQgfSBmcm9tICcuLi96ZXJvLXN0eWxlZCc7XG5pbXBvcnQgeyB1c2VEZWZhdWx0UHJvcHMgfSBmcm9tICcuLi9EZWZhdWx0UHJvcHNQcm92aWRlcic7XG5pbXBvcnQgc3dpdGNoQ2xhc3NlcywgeyBnZXRTd2l0Y2hVdGlsaXR5Q2xhc3MgfSBmcm9tICcuL3N3aXRjaENsYXNzZXMnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmltcG9ydCB7IGpzeHMgYXMgX2pzeHMgfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmNvbnN0IHVzZVV0aWxpdHlDbGFzc2VzID0gb3duZXJTdGF0ZSA9PiB7XG4gIGNvbnN0IHtcbiAgICBjbGFzc2VzLFxuICAgIGVkZ2UsXG4gICAgc2l6ZSxcbiAgICBjb2xvcixcbiAgICBjaGVja2VkLFxuICAgIGRpc2FibGVkXG4gIH0gPSBvd25lclN0YXRlO1xuICBjb25zdCBzbG90cyA9IHtcbiAgICByb290OiBbJ3Jvb3QnLCBlZGdlICYmIGBlZGdlJHtjYXBpdGFsaXplKGVkZ2UpfWAsIGBzaXplJHtjYXBpdGFsaXplKHNpemUpfWBdLFxuICAgIHN3aXRjaEJhc2U6IFsnc3dpdGNoQmFzZScsIGBjb2xvciR7Y2FwaXRhbGl6ZShjb2xvcil9YCwgY2hlY2tlZCAmJiAnY2hlY2tlZCcsIGRpc2FibGVkICYmICdkaXNhYmxlZCddLFxuICAgIHRodW1iOiBbJ3RodW1iJ10sXG4gICAgdHJhY2s6IFsndHJhY2snXSxcbiAgICBpbnB1dDogWydpbnB1dCddXG4gIH07XG4gIGNvbnN0IGNvbXBvc2VkQ2xhc3NlcyA9IGNvbXBvc2VDbGFzc2VzKHNsb3RzLCBnZXRTd2l0Y2hVdGlsaXR5Q2xhc3MsIGNsYXNzZXMpO1xuICByZXR1cm4gX2V4dGVuZHMoe30sIGNsYXNzZXMsIGNvbXBvc2VkQ2xhc3Nlcyk7XG59O1xuY29uc3QgU3dpdGNoUm9vdCA9IHN0eWxlZCgnc3BhbicsIHtcbiAgbmFtZTogJ011aVN3aXRjaCcsXG4gIHNsb3Q6ICdSb290JyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgb3duZXJTdGF0ZVxuICAgIH0gPSBwcm9wcztcbiAgICByZXR1cm4gW3N0eWxlcy5yb290LCBvd25lclN0YXRlLmVkZ2UgJiYgc3R5bGVzW2BlZGdlJHtjYXBpdGFsaXplKG93bmVyU3RhdGUuZWRnZSl9YF0sIHN0eWxlc1tgc2l6ZSR7Y2FwaXRhbGl6ZShvd25lclN0YXRlLnNpemUpfWBdXTtcbiAgfVxufSkoe1xuICBkaXNwbGF5OiAnaW5saW5lLWZsZXgnLFxuICB3aWR0aDogMzQgKyAxMiAqIDIsXG4gIGhlaWdodDogMTQgKyAxMiAqIDIsXG4gIG92ZXJmbG93OiAnaGlkZGVuJyxcbiAgcGFkZGluZzogMTIsXG4gIGJveFNpemluZzogJ2JvcmRlci1ib3gnLFxuICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgZmxleFNocmluazogMCxcbiAgekluZGV4OiAwLFxuICAvLyBSZXNldCB0aGUgc3RhY2tpbmcgY29udGV4dC5cbiAgdmVydGljYWxBbGlnbjogJ21pZGRsZScsXG4gIC8vIEZvciBjb3JyZWN0IGFsaWdubWVudCB3aXRoIHRoZSB0ZXh0LlxuICAnQG1lZGlhIHByaW50Jzoge1xuICAgIGNvbG9yQWRqdXN0OiAnZXhhY3QnXG4gIH0sXG4gIHZhcmlhbnRzOiBbe1xuICAgIHByb3BzOiB7XG4gICAgICBlZGdlOiAnc3RhcnQnXG4gICAgfSxcbiAgICBzdHlsZToge1xuICAgICAgbWFyZ2luTGVmdDogLThcbiAgICB9XG4gIH0sIHtcbiAgICBwcm9wczoge1xuICAgICAgZWRnZTogJ2VuZCdcbiAgICB9LFxuICAgIHN0eWxlOiB7XG4gICAgICBtYXJnaW5SaWdodDogLThcbiAgICB9XG4gIH0sIHtcbiAgICBwcm9wczoge1xuICAgICAgc2l6ZTogJ3NtYWxsJ1xuICAgIH0sXG4gICAgc3R5bGU6IHtcbiAgICAgIHdpZHRoOiA0MCxcbiAgICAgIGhlaWdodDogMjQsXG4gICAgICBwYWRkaW5nOiA3LFxuICAgICAgW2AmIC4ke3N3aXRjaENsYXNzZXMudGh1bWJ9YF06IHtcbiAgICAgICAgd2lkdGg6IDE2LFxuICAgICAgICBoZWlnaHQ6IDE2XG4gICAgICB9LFxuICAgICAgW2AmIC4ke3N3aXRjaENsYXNzZXMuc3dpdGNoQmFzZX1gXToge1xuICAgICAgICBwYWRkaW5nOiA0LFxuICAgICAgICBbYCYuJHtzd2l0Y2hDbGFzc2VzLmNoZWNrZWR9YF06IHtcbiAgICAgICAgICB0cmFuc2Zvcm06ICd0cmFuc2xhdGVYKDE2cHgpJ1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XVxufSk7XG5jb25zdCBTd2l0Y2hTd2l0Y2hCYXNlID0gc3R5bGVkKFN3aXRjaEJhc2UsIHtcbiAgbmFtZTogJ011aVN3aXRjaCcsXG4gIHNsb3Q6ICdTd2l0Y2hCYXNlJyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgb3duZXJTdGF0ZVxuICAgIH0gPSBwcm9wcztcbiAgICByZXR1cm4gW3N0eWxlcy5zd2l0Y2hCYXNlLCB7XG4gICAgICBbYCYgLiR7c3dpdGNoQ2xhc3Nlcy5pbnB1dH1gXTogc3R5bGVzLmlucHV0XG4gICAgfSwgb3duZXJTdGF0ZS5jb2xvciAhPT0gJ2RlZmF1bHQnICYmIHN0eWxlc1tgY29sb3Ike2NhcGl0YWxpemUob3duZXJTdGF0ZS5jb2xvcil9YF1dO1xuICB9XG59KSgoe1xuICB0aGVtZVxufSkgPT4gKHtcbiAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gIHRvcDogMCxcbiAgbGVmdDogMCxcbiAgekluZGV4OiAxLFxuICAvLyBSZW5kZXIgYWJvdmUgdGhlIGZvY3VzIHJpcHBsZS5cbiAgY29sb3I6IHRoZW1lLnZhcnMgPyB0aGVtZS52YXJzLnBhbGV0dGUuU3dpdGNoLmRlZmF1bHRDb2xvciA6IGAke3RoZW1lLnBhbGV0dGUubW9kZSA9PT0gJ2xpZ2h0JyA/IHRoZW1lLnBhbGV0dGUuY29tbW9uLndoaXRlIDogdGhlbWUucGFsZXR0ZS5ncmV5WzMwMF19YCxcbiAgdHJhbnNpdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKFsnbGVmdCcsICd0cmFuc2Zvcm0nXSwge1xuICAgIGR1cmF0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5kdXJhdGlvbi5zaG9ydGVzdFxuICB9KSxcbiAgW2AmLiR7c3dpdGNoQ2xhc3Nlcy5jaGVja2VkfWBdOiB7XG4gICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlWCgyMHB4KSdcbiAgfSxcbiAgW2AmLiR7c3dpdGNoQ2xhc3Nlcy5kaXNhYmxlZH1gXToge1xuICAgIGNvbG9yOiB0aGVtZS52YXJzID8gdGhlbWUudmFycy5wYWxldHRlLlN3aXRjaC5kZWZhdWx0RGlzYWJsZWRDb2xvciA6IGAke3RoZW1lLnBhbGV0dGUubW9kZSA9PT0gJ2xpZ2h0JyA/IHRoZW1lLnBhbGV0dGUuZ3JleVsxMDBdIDogdGhlbWUucGFsZXR0ZS5ncmV5WzYwMF19YFxuICB9LFxuICBbYCYuJHtzd2l0Y2hDbGFzc2VzLmNoZWNrZWR9ICsgLiR7c3dpdGNoQ2xhc3Nlcy50cmFja31gXToge1xuICAgIG9wYWNpdHk6IDAuNVxuICB9LFxuICBbYCYuJHtzd2l0Y2hDbGFzc2VzLmRpc2FibGVkfSArIC4ke3N3aXRjaENsYXNzZXMudHJhY2t9YF06IHtcbiAgICBvcGFjaXR5OiB0aGVtZS52YXJzID8gdGhlbWUudmFycy5vcGFjaXR5LnN3aXRjaFRyYWNrRGlzYWJsZWQgOiBgJHt0aGVtZS5wYWxldHRlLm1vZGUgPT09ICdsaWdodCcgPyAwLjEyIDogMC4yfWBcbiAgfSxcbiAgW2AmIC4ke3N3aXRjaENsYXNzZXMuaW5wdXR9YF06IHtcbiAgICBsZWZ0OiAnLTEwMCUnLFxuICAgIHdpZHRoOiAnMzAwJSdcbiAgfVxufSksICh7XG4gIHRoZW1lXG59KSA9PiAoe1xuICAnJjpob3Zlcic6IHtcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnZhcnMgPyBgcmdiYSgke3RoZW1lLnZhcnMucGFsZXR0ZS5hY3Rpb24uYWN0aXZlQ2hhbm5lbH0gLyAke3RoZW1lLnZhcnMucGFsZXR0ZS5hY3Rpb24uaG92ZXJPcGFjaXR5fSlgIDogYWxwaGEodGhlbWUucGFsZXR0ZS5hY3Rpb24uYWN0aXZlLCB0aGVtZS5wYWxldHRlLmFjdGlvbi5ob3Zlck9wYWNpdHkpLFxuICAgIC8vIFJlc2V0IG9uIHRvdWNoIGRldmljZXMsIGl0IGRvZXNuJ3QgYWRkIHNwZWNpZmljaXR5XG4gICAgJ0BtZWRpYSAoaG92ZXI6IG5vbmUpJzoge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnXG4gICAgfVxuICB9LFxuICB2YXJpYW50czogWy4uLk9iamVjdC5lbnRyaWVzKHRoZW1lLnBhbGV0dGUpLmZpbHRlcigoWywgdmFsdWVdKSA9PiB2YWx1ZS5tYWluICYmIHZhbHVlLmxpZ2h0KSAvLyBjaGVjayBhbGwgdGhlIHVzZWQgZmllbGRzIGluIHRoZSBzdHlsZSBiZWxvd1xuICAubWFwKChbY29sb3JdKSA9PiAoe1xuICAgIHByb3BzOiB7XG4gICAgICBjb2xvclxuICAgIH0sXG4gICAgc3R5bGU6IHtcbiAgICAgIFtgJi4ke3N3aXRjaENsYXNzZXMuY2hlY2tlZH1gXToge1xuICAgICAgICBjb2xvcjogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGVbY29sb3JdLm1haW4sXG4gICAgICAgICcmOmhvdmVyJzoge1xuICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUudmFycyA/IGByZ2JhKCR7dGhlbWUudmFycy5wYWxldHRlW2NvbG9yXS5tYWluQ2hhbm5lbH0gLyAke3RoZW1lLnZhcnMucGFsZXR0ZS5hY3Rpb24uaG92ZXJPcGFjaXR5fSlgIDogYWxwaGEodGhlbWUucGFsZXR0ZVtjb2xvcl0ubWFpbiwgdGhlbWUucGFsZXR0ZS5hY3Rpb24uaG92ZXJPcGFjaXR5KSxcbiAgICAgICAgICAnQG1lZGlhIChob3Zlcjogbm9uZSknOiB7XG4gICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICd0cmFuc3BhcmVudCdcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFtgJi4ke3N3aXRjaENsYXNzZXMuZGlzYWJsZWR9YF06IHtcbiAgICAgICAgICBjb2xvcjogdGhlbWUudmFycyA/IHRoZW1lLnZhcnMucGFsZXR0ZS5Td2l0Y2hbYCR7Y29sb3J9RGlzYWJsZWRDb2xvcmBdIDogYCR7dGhlbWUucGFsZXR0ZS5tb2RlID09PSAnbGlnaHQnID8gbGlnaHRlbih0aGVtZS5wYWxldHRlW2NvbG9yXS5tYWluLCAwLjYyKSA6IGRhcmtlbih0aGVtZS5wYWxldHRlW2NvbG9yXS5tYWluLCAwLjU1KX1gXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBbYCYuJHtzd2l0Y2hDbGFzc2VzLmNoZWNrZWR9ICsgLiR7c3dpdGNoQ2xhc3Nlcy50cmFja31gXToge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlW2NvbG9yXS5tYWluXG4gICAgICB9XG4gICAgfVxuICB9KSldXG59KSk7XG5jb25zdCBTd2l0Y2hUcmFjayA9IHN0eWxlZCgnc3BhbicsIHtcbiAgbmFtZTogJ011aVN3aXRjaCcsXG4gIHNsb3Q6ICdUcmFjaycsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4gc3R5bGVzLnRyYWNrXG59KSgoe1xuICB0aGVtZVxufSkgPT4gKHtcbiAgaGVpZ2h0OiAnMTAwJScsXG4gIHdpZHRoOiAnMTAwJScsXG4gIGJvcmRlclJhZGl1czogMTQgLyAyLFxuICB6SW5kZXg6IC0xLFxuICB0cmFuc2l0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoWydvcGFjaXR5JywgJ2JhY2tncm91bmQtY29sb3InXSwge1xuICAgIGR1cmF0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5kdXJhdGlvbi5zaG9ydGVzdFxuICB9KSxcbiAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS52YXJzID8gdGhlbWUudmFycy5wYWxldHRlLmNvbW1vbi5vbkJhY2tncm91bmQgOiBgJHt0aGVtZS5wYWxldHRlLm1vZGUgPT09ICdsaWdodCcgPyB0aGVtZS5wYWxldHRlLmNvbW1vbi5ibGFjayA6IHRoZW1lLnBhbGV0dGUuY29tbW9uLndoaXRlfWAsXG4gIG9wYWNpdHk6IHRoZW1lLnZhcnMgPyB0aGVtZS52YXJzLm9wYWNpdHkuc3dpdGNoVHJhY2sgOiBgJHt0aGVtZS5wYWxldHRlLm1vZGUgPT09ICdsaWdodCcgPyAwLjM4IDogMC4zfWBcbn0pKTtcbmNvbnN0IFN3aXRjaFRodW1iID0gc3R5bGVkKCdzcGFuJywge1xuICBuYW1lOiAnTXVpU3dpdGNoJyxcbiAgc2xvdDogJ1RodW1iJyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiBzdHlsZXMudGh1bWJcbn0pKCh7XG4gIHRoZW1lXG59KSA9PiAoe1xuICBib3hTaGFkb3c6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5zaGFkb3dzWzFdLFxuICBiYWNrZ3JvdW5kQ29sb3I6ICdjdXJyZW50Q29sb3InLFxuICB3aWR0aDogMjAsXG4gIGhlaWdodDogMjAsXG4gIGJvcmRlclJhZGl1czogJzUwJSdcbn0pKTtcbmNvbnN0IFN3aXRjaCA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIFN3aXRjaChpblByb3BzLCByZWYpIHtcbiAgY29uc3QgcHJvcHMgPSB1c2VEZWZhdWx0UHJvcHMoe1xuICAgIHByb3BzOiBpblByb3BzLFxuICAgIG5hbWU6ICdNdWlTd2l0Y2gnXG4gIH0pO1xuICBjb25zdCB7XG4gICAgICBjbGFzc05hbWUsXG4gICAgICBjb2xvciA9ICdwcmltYXJ5JyxcbiAgICAgIGVkZ2UgPSBmYWxzZSxcbiAgICAgIHNpemUgPSAnbWVkaXVtJyxcbiAgICAgIHN4XG4gICAgfSA9IHByb3BzLFxuICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIF9leGNsdWRlZCk7XG4gIGNvbnN0IG93bmVyU3RhdGUgPSBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICBjb2xvcixcbiAgICBlZGdlLFxuICAgIHNpemVcbiAgfSk7XG4gIGNvbnN0IGNsYXNzZXMgPSB1c2VVdGlsaXR5Q2xhc3Nlcyhvd25lclN0YXRlKTtcbiAgY29uc3QgaWNvbiA9IC8qI19fUFVSRV9fKi9fanN4KFN3aXRjaFRodW1iLCB7XG4gICAgY2xhc3NOYW1lOiBjbGFzc2VzLnRodW1iLFxuICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGVcbiAgfSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeHMoU3dpdGNoUm9vdCwge1xuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSksXG4gICAgc3g6IHN4LFxuICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGUsXG4gICAgY2hpbGRyZW46IFsvKiNfX1BVUkVfXyovX2pzeChTd2l0Y2hTd2l0Y2hCYXNlLCBfZXh0ZW5kcyh7XG4gICAgICB0eXBlOiBcImNoZWNrYm94XCIsXG4gICAgICBpY29uOiBpY29uLFxuICAgICAgY2hlY2tlZEljb246IGljb24sXG4gICAgICByZWY6IHJlZixcbiAgICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGVcbiAgICB9LCBvdGhlciwge1xuICAgICAgY2xhc3NlczogX2V4dGVuZHMoe30sIGNsYXNzZXMsIHtcbiAgICAgICAgcm9vdDogY2xhc3Nlcy5zd2l0Y2hCYXNlXG4gICAgICB9KVxuICAgIH0pKSwgLyojX19QVVJFX18qL19qc3goU3dpdGNoVHJhY2ssIHtcbiAgICAgIGNsYXNzTmFtZTogY2xhc3Nlcy50cmFjayxcbiAgICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGVcbiAgICB9KV1cbiAgfSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFN3aXRjaC5wcm9wVHlwZXMgLyogcmVtb3ZlLXByb3B0eXBlcyAqLyA9IHtcbiAgLy8g4pSM4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAIFdhcm5pbmcg4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSQXG4gIC8vIOKUgiBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMuIOKUglxuICAvLyDilIIgICAgVG8gdXBkYXRlIHRoZW0sIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIGBwbnBtIHByb3B0eXBlc2AuICAgICDilIJcbiAgLy8g4pSU4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSYXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBjb21wb25lbnQgaXMgY2hlY2tlZC5cbiAgICovXG4gIGNoZWNrZWQ6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogVGhlIGljb24gdG8gZGlzcGxheSB3aGVuIHRoZSBjb21wb25lbnQgaXMgY2hlY2tlZC5cbiAgICovXG4gIGNoZWNrZWRJY29uOiBQcm9wVHlwZXMubm9kZSxcbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBUaGUgY29sb3Igb2YgdGhlIGNvbXBvbmVudC5cbiAgICogSXQgc3VwcG9ydHMgYm90aCBkZWZhdWx0IGFuZCBjdXN0b20gdGhlbWUgY29sb3JzLCB3aGljaCBjYW4gYmUgYWRkZWQgYXMgc2hvd24gaW4gdGhlXG4gICAqIFtwYWxldHRlIGN1c3RvbWl6YXRpb24gZ3VpZGVdKGh0dHBzOi8vbXVpLmNvbS9tYXRlcmlhbC11aS9jdXN0b21pemF0aW9uL3BhbGV0dGUvI2N1c3RvbS1jb2xvcnMpLlxuICAgKiBAZGVmYXVsdCAncHJpbWFyeSdcbiAgICovXG4gIGNvbG9yOiBQcm9wVHlwZXMgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqLy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ2RlZmF1bHQnLCAncHJpbWFyeScsICdzZWNvbmRhcnknLCAnZXJyb3InLCAnaW5mbycsICdzdWNjZXNzJywgJ3dhcm5pbmcnXSksIFByb3BUeXBlcy5zdHJpbmddKSxcbiAgLyoqXG4gICAqIFRoZSBkZWZhdWx0IGNoZWNrZWQgc3RhdGUuIFVzZSB3aGVuIHRoZSBjb21wb25lbnQgaXMgbm90IGNvbnRyb2xsZWQuXG4gICAqL1xuICBkZWZhdWx0Q2hlY2tlZDogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBjb21wb25lbnQgaXMgZGlzYWJsZWQuXG4gICAqL1xuICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSByaXBwbGUgZWZmZWN0IGlzIGRpc2FibGVkLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZGlzYWJsZVJpcHBsZTogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBJZiBnaXZlbiwgdXNlcyBhIG5lZ2F0aXZlIG1hcmdpbiB0byBjb3VudGVyYWN0IHRoZSBwYWRkaW5nIG9uIG9uZVxuICAgKiBzaWRlICh0aGlzIGlzIG9mdGVuIGhlbHBmdWwgZm9yIGFsaWduaW5nIHRoZSBsZWZ0IG9yIHJpZ2h0XG4gICAqIHNpZGUgb2YgdGhlIGljb24gd2l0aCBjb250ZW50IGFib3ZlIG9yIGJlbG93LCB3aXRob3V0IHJ1aW5pbmcgdGhlIGJvcmRlclxuICAgKiBzaXplIGFuZCBzaGFwZSkuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBlZGdlOiBQcm9wVHlwZXMub25lT2YoWydlbmQnLCAnc3RhcnQnLCBmYWxzZV0pLFxuICAvKipcbiAgICogVGhlIGljb24gdG8gZGlzcGxheSB3aGVuIHRoZSBjb21wb25lbnQgaXMgdW5jaGVja2VkLlxuICAgKi9cbiAgaWNvbjogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBUaGUgaWQgb2YgdGhlIGBpbnB1dGAgZWxlbWVudC5cbiAgICovXG4gIGlkOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogW0F0dHJpYnV0ZXNdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUTUwvRWxlbWVudC9pbnB1dCNBdHRyaWJ1dGVzKSBhcHBsaWVkIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAqL1xuICBpbnB1dFByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogUGFzcyBhIHJlZiB0byB0aGUgYGlucHV0YCBlbGVtZW50LlxuICAgKi9cbiAgaW5wdXRSZWY6IHJlZlR5cGUsXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSBzdGF0ZSBpcyBjaGFuZ2VkLlxuICAgKlxuICAgKiBAcGFyYW0ge1JlYWN0LkNoYW5nZUV2ZW50PEhUTUxJbnB1dEVsZW1lbnQ+fSBldmVudCBUaGUgZXZlbnQgc291cmNlIG9mIHRoZSBjYWxsYmFjay5cbiAgICogWW91IGNhbiBwdWxsIG91dCB0aGUgbmV3IHZhbHVlIGJ5IGFjY2Vzc2luZyBgZXZlbnQudGFyZ2V0LnZhbHVlYCAoc3RyaW5nKS5cbiAgICogWW91IGNhbiBwdWxsIG91dCB0aGUgbmV3IGNoZWNrZWQgc3RhdGUgYnkgYWNjZXNzaW5nIGBldmVudC50YXJnZXQuY2hlY2tlZGAgKGJvb2xlYW4pLlxuICAgKi9cbiAgb25DaGFuZ2U6IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgYGlucHV0YCBlbGVtZW50IGlzIHJlcXVpcmVkLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgcmVxdWlyZWQ6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogVGhlIHNpemUgb2YgdGhlIGNvbXBvbmVudC5cbiAgICogYHNtYWxsYCBpcyBlcXVpdmFsZW50IHRvIHRoZSBkZW5zZSBzd2l0Y2ggc3R5bGluZy5cbiAgICogQGRlZmF1bHQgJ21lZGl1bSdcbiAgICovXG4gIHNpemU6IFByb3BUeXBlcyAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsnbWVkaXVtJywgJ3NtYWxsJ10pLCBQcm9wVHlwZXMuc3RyaW5nXSksXG4gIC8qKlxuICAgKiBUaGUgc3lzdGVtIHByb3AgdGhhdCBhbGxvd3MgZGVmaW5pbmcgc3lzdGVtIG92ZXJyaWRlcyBhcyB3ZWxsIGFzIGFkZGl0aW9uYWwgQ1NTIHN0eWxlcy5cbiAgICovXG4gIHN4OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLmJvb2xdKSksIFByb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSksXG4gIC8qKlxuICAgKiBUaGUgdmFsdWUgb2YgdGhlIGNvbXBvbmVudC4gVGhlIERPTSBBUEkgY2FzdHMgdGhpcyB0byBhIHN0cmluZy5cbiAgICogVGhlIGJyb3dzZXIgdXNlcyBcIm9uXCIgYXMgdGhlIGRlZmF1bHQgdmFsdWUuXG4gICAqL1xuICB2YWx1ZTogUHJvcFR5cGVzLmFueVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IFN3aXRjaDsiLCJpbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzZXMnO1xuaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3MnO1xuZXhwb3J0IGZ1bmN0aW9uIGdldFRhYlV0aWxpdHlDbGFzcyhzbG90KSB7XG4gIHJldHVybiBnZW5lcmF0ZVV0aWxpdHlDbGFzcygnTXVpVGFiJywgc2xvdCk7XG59XG5jb25zdCB0YWJDbGFzc2VzID0gZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcygnTXVpVGFiJywgWydyb290JywgJ2xhYmVsSWNvbicsICd0ZXh0Q29sb3JJbmhlcml0JywgJ3RleHRDb2xvclByaW1hcnknLCAndGV4dENvbG9yU2Vjb25kYXJ5JywgJ3NlbGVjdGVkJywgJ2Rpc2FibGVkJywgJ2Z1bGxXaWR0aCcsICd3cmFwcGVkJywgJ2ljb25XcmFwcGVyJ10pO1xuZXhwb3J0IGRlZmF1bHQgdGFiQ2xhc3NlczsiLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJjbGFzc05hbWVcIiwgXCJkaXNhYmxlZFwiLCBcImRpc2FibGVGb2N1c1JpcHBsZVwiLCBcImZ1bGxXaWR0aFwiLCBcImljb25cIiwgXCJpY29uUG9zaXRpb25cIiwgXCJpbmRpY2F0b3JcIiwgXCJsYWJlbFwiLCBcIm9uQ2hhbmdlXCIsIFwib25DbGlja1wiLCBcIm9uRm9jdXNcIiwgXCJzZWxlY3RlZFwiLCBcInNlbGVjdGlvbkZvbGxvd3NGb2N1c1wiLCBcInRleHRDb2xvclwiLCBcInZhbHVlXCIsIFwid3JhcHBlZFwiXTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCBjb21wb3NlQ2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2NvbXBvc2VDbGFzc2VzJztcbmltcG9ydCBCdXR0b25CYXNlIGZyb20gJy4uL0J1dHRvbkJhc2UnO1xuaW1wb3J0IGNhcGl0YWxpemUgZnJvbSAnLi4vdXRpbHMvY2FwaXRhbGl6ZSc7XG5pbXBvcnQgeyB1c2VEZWZhdWx0UHJvcHMgfSBmcm9tICcuLi9EZWZhdWx0UHJvcHNQcm92aWRlcic7XG5pbXBvcnQgc3R5bGVkIGZyb20gJy4uL3N0eWxlcy9zdHlsZWQnO1xuaW1wb3J0IHVuc3VwcG9ydGVkUHJvcCBmcm9tICcuLi91dGlscy91bnN1cHBvcnRlZFByb3AnO1xuaW1wb3J0IHRhYkNsYXNzZXMsIHsgZ2V0VGFiVXRpbGl0eUNsYXNzIH0gZnJvbSAnLi90YWJDbGFzc2VzJztcbmltcG9ydCB7IGpzeHMgYXMgX2pzeHMgfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmNvbnN0IHVzZVV0aWxpdHlDbGFzc2VzID0gb3duZXJTdGF0ZSA9PiB7XG4gIGNvbnN0IHtcbiAgICBjbGFzc2VzLFxuICAgIHRleHRDb2xvcixcbiAgICBmdWxsV2lkdGgsXG4gICAgd3JhcHBlZCxcbiAgICBpY29uLFxuICAgIGxhYmVsLFxuICAgIHNlbGVjdGVkLFxuICAgIGRpc2FibGVkXG4gIH0gPSBvd25lclN0YXRlO1xuICBjb25zdCBzbG90cyA9IHtcbiAgICByb290OiBbJ3Jvb3QnLCBpY29uICYmIGxhYmVsICYmICdsYWJlbEljb24nLCBgdGV4dENvbG9yJHtjYXBpdGFsaXplKHRleHRDb2xvcil9YCwgZnVsbFdpZHRoICYmICdmdWxsV2lkdGgnLCB3cmFwcGVkICYmICd3cmFwcGVkJywgc2VsZWN0ZWQgJiYgJ3NlbGVjdGVkJywgZGlzYWJsZWQgJiYgJ2Rpc2FibGVkJ10sXG4gICAgaWNvbldyYXBwZXI6IFsnaWNvbldyYXBwZXInXVxuICB9O1xuICByZXR1cm4gY29tcG9zZUNsYXNzZXMoc2xvdHMsIGdldFRhYlV0aWxpdHlDbGFzcywgY2xhc3Nlcyk7XG59O1xuY29uc3QgVGFiUm9vdCA9IHN0eWxlZChCdXR0b25CYXNlLCB7XG4gIG5hbWU6ICdNdWlUYWInLFxuICBzbG90OiAnUm9vdCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9ID0gcHJvcHM7XG4gICAgcmV0dXJuIFtzdHlsZXMucm9vdCwgb3duZXJTdGF0ZS5sYWJlbCAmJiBvd25lclN0YXRlLmljb24gJiYgc3R5bGVzLmxhYmVsSWNvbiwgc3R5bGVzW2B0ZXh0Q29sb3Ike2NhcGl0YWxpemUob3duZXJTdGF0ZS50ZXh0Q29sb3IpfWBdLCBvd25lclN0YXRlLmZ1bGxXaWR0aCAmJiBzdHlsZXMuZnVsbFdpZHRoLCBvd25lclN0YXRlLndyYXBwZWQgJiYgc3R5bGVzLndyYXBwZWQsIHtcbiAgICAgIFtgJiAuJHt0YWJDbGFzc2VzLmljb25XcmFwcGVyfWBdOiBzdHlsZXMuaWNvbldyYXBwZXJcbiAgICB9XTtcbiAgfVxufSkoKHtcbiAgdGhlbWUsXG4gIG93bmVyU3RhdGVcbn0pID0+IF9leHRlbmRzKHt9LCB0aGVtZS50eXBvZ3JhcGh5LmJ1dHRvbiwge1xuICBtYXhXaWR0aDogMzYwLFxuICBtaW5XaWR0aDogOTAsXG4gIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICBtaW5IZWlnaHQ6IDQ4LFxuICBmbGV4U2hyaW5rOiAwLFxuICBwYWRkaW5nOiAnMTJweCAxNnB4JyxcbiAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxuICB3aGl0ZVNwYWNlOiAnbm9ybWFsJyxcbiAgdGV4dEFsaWduOiAnY2VudGVyJ1xufSwgb3duZXJTdGF0ZS5sYWJlbCAmJiB7XG4gIGZsZXhEaXJlY3Rpb246IG93bmVyU3RhdGUuaWNvblBvc2l0aW9uID09PSAndG9wJyB8fCBvd25lclN0YXRlLmljb25Qb3NpdGlvbiA9PT0gJ2JvdHRvbScgPyAnY29sdW1uJyA6ICdyb3cnXG59LCB7XG4gIGxpbmVIZWlnaHQ6IDEuMjVcbn0sIG93bmVyU3RhdGUuaWNvbiAmJiBvd25lclN0YXRlLmxhYmVsICYmIHtcbiAgbWluSGVpZ2h0OiA3MixcbiAgcGFkZGluZ1RvcDogOSxcbiAgcGFkZGluZ0JvdHRvbTogOSxcbiAgW2AmID4gLiR7dGFiQ2xhc3Nlcy5pY29uV3JhcHBlcn1gXTogX2V4dGVuZHMoe30sIG93bmVyU3RhdGUuaWNvblBvc2l0aW9uID09PSAndG9wJyAmJiB7XG4gICAgbWFyZ2luQm90dG9tOiA2XG4gIH0sIG93bmVyU3RhdGUuaWNvblBvc2l0aW9uID09PSAnYm90dG9tJyAmJiB7XG4gICAgbWFyZ2luVG9wOiA2XG4gIH0sIG93bmVyU3RhdGUuaWNvblBvc2l0aW9uID09PSAnc3RhcnQnICYmIHtcbiAgICBtYXJnaW5SaWdodDogdGhlbWUuc3BhY2luZygxKVxuICB9LCBvd25lclN0YXRlLmljb25Qb3NpdGlvbiA9PT0gJ2VuZCcgJiYge1xuICAgIG1hcmdpbkxlZnQ6IHRoZW1lLnNwYWNpbmcoMSlcbiAgfSlcbn0sIG93bmVyU3RhdGUudGV4dENvbG9yID09PSAnaW5oZXJpdCcgJiYge1xuICBjb2xvcjogJ2luaGVyaXQnLFxuICBvcGFjaXR5OiAwLjYsXG4gIC8vIHNhbWUgb3BhY2l0eSBhcyB0aGVtZS5wYWxldHRlLnRleHQuc2Vjb25kYXJ5XG4gIFtgJi4ke3RhYkNsYXNzZXMuc2VsZWN0ZWR9YF06IHtcbiAgICBvcGFjaXR5OiAxXG4gIH0sXG4gIFtgJi4ke3RhYkNsYXNzZXMuZGlzYWJsZWR9YF06IHtcbiAgICBvcGFjaXR5OiAodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZS5hY3Rpb24uZGlzYWJsZWRPcGFjaXR5XG4gIH1cbn0sIG93bmVyU3RhdGUudGV4dENvbG9yID09PSAncHJpbWFyeScgJiYge1xuICBjb2xvcjogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGUudGV4dC5zZWNvbmRhcnksXG4gIFtgJi4ke3RhYkNsYXNzZXMuc2VsZWN0ZWR9YF06IHtcbiAgICBjb2xvcjogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGUucHJpbWFyeS5tYWluXG4gIH0sXG4gIFtgJi4ke3RhYkNsYXNzZXMuZGlzYWJsZWR9YF06IHtcbiAgICBjb2xvcjogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGUudGV4dC5kaXNhYmxlZFxuICB9XG59LCBvd25lclN0YXRlLnRleHRDb2xvciA9PT0gJ3NlY29uZGFyeScgJiYge1xuICBjb2xvcjogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGUudGV4dC5zZWNvbmRhcnksXG4gIFtgJi4ke3RhYkNsYXNzZXMuc2VsZWN0ZWR9YF06IHtcbiAgICBjb2xvcjogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGUuc2Vjb25kYXJ5Lm1haW5cbiAgfSxcbiAgW2AmLiR7dGFiQ2xhc3Nlcy5kaXNhYmxlZH1gXToge1xuICAgIGNvbG9yOiAodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZS50ZXh0LmRpc2FibGVkXG4gIH1cbn0sIG93bmVyU3RhdGUuZnVsbFdpZHRoICYmIHtcbiAgZmxleFNocmluazogMSxcbiAgZmxleEdyb3c6IDEsXG4gIGZsZXhCYXNpczogMCxcbiAgbWF4V2lkdGg6ICdub25lJ1xufSwgb3duZXJTdGF0ZS53cmFwcGVkICYmIHtcbiAgZm9udFNpemU6IHRoZW1lLnR5cG9ncmFwaHkucHhUb1JlbSgxMilcbn0pKTtcbmNvbnN0IFRhYiA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIFRhYihpblByb3BzLCByZWYpIHtcbiAgY29uc3QgcHJvcHMgPSB1c2VEZWZhdWx0UHJvcHMoe1xuICAgIHByb3BzOiBpblByb3BzLFxuICAgIG5hbWU6ICdNdWlUYWInXG4gIH0pO1xuICBjb25zdCB7XG4gICAgICBjbGFzc05hbWUsXG4gICAgICBkaXNhYmxlZCA9IGZhbHNlLFxuICAgICAgZGlzYWJsZUZvY3VzUmlwcGxlID0gZmFsc2UsXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QvcHJvcC10eXBlc1xuICAgICAgZnVsbFdpZHRoLFxuICAgICAgaWNvbjogaWNvblByb3AsXG4gICAgICBpY29uUG9zaXRpb24gPSAndG9wJyxcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC9wcm9wLXR5cGVzXG4gICAgICBpbmRpY2F0b3IsXG4gICAgICBsYWJlbCxcbiAgICAgIG9uQ2hhbmdlLFxuICAgICAgb25DbGljayxcbiAgICAgIG9uRm9jdXMsXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QvcHJvcC10eXBlc1xuICAgICAgc2VsZWN0ZWQsXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QvcHJvcC10eXBlc1xuICAgICAgc2VsZWN0aW9uRm9sbG93c0ZvY3VzLFxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0L3Byb3AtdHlwZXNcbiAgICAgIHRleHRDb2xvciA9ICdpbmhlcml0JyxcbiAgICAgIHZhbHVlLFxuICAgICAgd3JhcHBlZCA9IGZhbHNlXG4gICAgfSA9IHByb3BzLFxuICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIF9leGNsdWRlZCk7XG4gIGNvbnN0IG93bmVyU3RhdGUgPSBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICBkaXNhYmxlZCxcbiAgICBkaXNhYmxlRm9jdXNSaXBwbGUsXG4gICAgc2VsZWN0ZWQsXG4gICAgaWNvbjogISFpY29uUHJvcCxcbiAgICBpY29uUG9zaXRpb24sXG4gICAgbGFiZWw6ICEhbGFiZWwsXG4gICAgZnVsbFdpZHRoLFxuICAgIHRleHRDb2xvcixcbiAgICB3cmFwcGVkXG4gIH0pO1xuICBjb25zdCBjbGFzc2VzID0gdXNlVXRpbGl0eUNsYXNzZXMob3duZXJTdGF0ZSk7XG4gIGNvbnN0IGljb24gPSBpY29uUHJvcCAmJiBsYWJlbCAmJiAvKiNfX1BVUkVfXyovUmVhY3QuaXNWYWxpZEVsZW1lbnQoaWNvblByb3ApID8gLyojX19QVVJFX18qL1JlYWN0LmNsb25lRWxlbWVudChpY29uUHJvcCwge1xuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLmljb25XcmFwcGVyLCBpY29uUHJvcC5wcm9wcy5jbGFzc05hbWUpXG4gIH0pIDogaWNvblByb3A7XG4gIGNvbnN0IGhhbmRsZUNsaWNrID0gZXZlbnQgPT4ge1xuICAgIGlmICghc2VsZWN0ZWQgJiYgb25DaGFuZ2UpIHtcbiAgICAgIG9uQ2hhbmdlKGV2ZW50LCB2YWx1ZSk7XG4gICAgfVxuICAgIGlmIChvbkNsaWNrKSB7XG4gICAgICBvbkNsaWNrKGV2ZW50KTtcbiAgICB9XG4gIH07XG4gIGNvbnN0IGhhbmRsZUZvY3VzID0gZXZlbnQgPT4ge1xuICAgIGlmIChzZWxlY3Rpb25Gb2xsb3dzRm9jdXMgJiYgIXNlbGVjdGVkICYmIG9uQ2hhbmdlKSB7XG4gICAgICBvbkNoYW5nZShldmVudCwgdmFsdWUpO1xuICAgIH1cbiAgICBpZiAob25Gb2N1cykge1xuICAgICAgb25Gb2N1cyhldmVudCk7XG4gICAgfVxuICB9O1xuICByZXR1cm4gLyojX19QVVJFX18qL19qc3hzKFRhYlJvb3QsIF9leHRlbmRzKHtcbiAgICBmb2N1c1JpcHBsZTogIWRpc2FibGVGb2N1c1JpcHBsZSxcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWUpLFxuICAgIHJlZjogcmVmLFxuICAgIHJvbGU6IFwidGFiXCIsXG4gICAgXCJhcmlhLXNlbGVjdGVkXCI6IHNlbGVjdGVkLFxuICAgIGRpc2FibGVkOiBkaXNhYmxlZCxcbiAgICBvbkNsaWNrOiBoYW5kbGVDbGljayxcbiAgICBvbkZvY3VzOiBoYW5kbGVGb2N1cyxcbiAgICBvd25lclN0YXRlOiBvd25lclN0YXRlLFxuICAgIHRhYkluZGV4OiBzZWxlY3RlZCA/IDAgOiAtMVxuICB9LCBvdGhlciwge1xuICAgIGNoaWxkcmVuOiBbaWNvblBvc2l0aW9uID09PSAndG9wJyB8fCBpY29uUG9zaXRpb24gPT09ICdzdGFydCcgPyAvKiNfX1BVUkVfXyovX2pzeHMoUmVhY3QuRnJhZ21lbnQsIHtcbiAgICAgIGNoaWxkcmVuOiBbaWNvbiwgbGFiZWxdXG4gICAgfSkgOiAvKiNfX1BVUkVfXyovX2pzeHMoUmVhY3QuRnJhZ21lbnQsIHtcbiAgICAgIGNoaWxkcmVuOiBbbGFiZWwsIGljb25dXG4gICAgfSksIGluZGljYXRvcl1cbiAgfSkpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBUYWIucHJvcFR5cGVzIC8qIHJlbW92ZS1wcm9wdHlwZXMgKi8gPSB7XG4gIC8vIOKUjOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgCBXYXJuaW5nIOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUkFxuICAvLyDilIIgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zLiDilIJcbiAgLy8g4pSCICAgIFRvIHVwZGF0ZSB0aGVtLCBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBgcG5wbSBwcm9wdHlwZXNgLiAgICAg4pSCXG4gIC8vIOKUlOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUmFxuICAvKipcbiAgICogVGhpcyBwcm9wIGlzbid0IHN1cHBvcnRlZC5cbiAgICogVXNlIHRoZSBgY29tcG9uZW50YCBwcm9wIGlmIHlvdSBuZWVkIHRvIGNoYW5nZSB0aGUgY2hpbGRyZW4gc3RydWN0dXJlLlxuICAgKi9cbiAgY2hpbGRyZW46IHVuc3VwcG9ydGVkUHJvcCxcbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBjb21wb25lbnQgaXMgZGlzYWJsZWQuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSAga2V5Ym9hcmQgZm9jdXMgcmlwcGxlIGlzIGRpc2FibGVkLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZGlzYWJsZUZvY3VzUmlwcGxlOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIHJpcHBsZSBlZmZlY3QgaXMgZGlzYWJsZWQuXG4gICAqXG4gICAqIOKaoO+4jyBXaXRob3V0IGEgcmlwcGxlIHRoZXJlIGlzIG5vIHN0eWxpbmcgZm9yIDpmb2N1cy12aXNpYmxlIGJ5IGRlZmF1bHQuIEJlIHN1cmVcbiAgICogdG8gaGlnaGxpZ2h0IHRoZSBlbGVtZW50IGJ5IGFwcGx5aW5nIHNlcGFyYXRlIHN0eWxlcyB3aXRoIHRoZSBgLk11aS1mb2N1c1Zpc2libGVgIGNsYXNzLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZGlzYWJsZVJpcHBsZTogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBUaGUgaWNvbiB0byBkaXNwbGF5LlxuICAgKi9cbiAgaWNvbjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmVsZW1lbnQsIFByb3BUeXBlcy5zdHJpbmddKSxcbiAgLyoqXG4gICAqIFRoZSBwb3NpdGlvbiBvZiB0aGUgaWNvbiByZWxhdGl2ZSB0byB0aGUgbGFiZWwuXG4gICAqIEBkZWZhdWx0ICd0b3AnXG4gICAqL1xuICBpY29uUG9zaXRpb246IFByb3BUeXBlcy5vbmVPZihbJ2JvdHRvbScsICdlbmQnLCAnc3RhcnQnLCAndG9wJ10pLFxuICAvKipcbiAgICogVGhlIGxhYmVsIGVsZW1lbnQuXG4gICAqL1xuICBsYWJlbDogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkNoYW5nZTogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkNsaWNrOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uRm9jdXM6IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogVGhlIHN5c3RlbSBwcm9wIHRoYXQgYWxsb3dzIGRlZmluaW5nIHN5c3RlbSBvdmVycmlkZXMgYXMgd2VsbCBhcyBhZGRpdGlvbmFsIENTUyBzdHlsZXMuXG4gICAqL1xuICBzeDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5ib29sXSkpLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pLFxuICAvKipcbiAgICogWW91IGNhbiBwcm92aWRlIHlvdXIgb3duIHZhbHVlLiBPdGhlcndpc2UsIHdlIGZhbGxiYWNrIHRvIHRoZSBjaGlsZCBwb3NpdGlvbiBpbmRleC5cbiAgICovXG4gIHZhbHVlOiBQcm9wVHlwZXMuYW55LFxuICAvKipcbiAgICogVGFiIGxhYmVscyBhcHBlYXIgaW4gYSBzaW5nbGUgcm93LlxuICAgKiBUaGV5IGNhbiB1c2UgYSBzZWNvbmQgbGluZSBpZiBuZWVkZWQuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICB3cmFwcGVkOiBQcm9wVHlwZXMuYm9vbFxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IFRhYjsiLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcblxuLyoqXG4gKiBAaWdub3JlIC0gaW50ZXJuYWwgY29tcG9uZW50LlxuICovXG5jb25zdCBUYWJsZUNvbnRleHQgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlQ29udGV4dCgpO1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgVGFibGVDb250ZXh0LmRpc3BsYXlOYW1lID0gJ1RhYmxlQ29udGV4dCc7XG59XG5leHBvcnQgZGVmYXVsdCBUYWJsZUNvbnRleHQ7IiwiaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzc2VzJztcbmltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzJztcbmV4cG9ydCBmdW5jdGlvbiBnZXRUYWJsZVV0aWxpdHlDbGFzcyhzbG90KSB7XG4gIHJldHVybiBnZW5lcmF0ZVV0aWxpdHlDbGFzcygnTXVpVGFibGUnLCBzbG90KTtcbn1cbmNvbnN0IHRhYmxlQ2xhc3NlcyA9IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMoJ011aVRhYmxlJywgWydyb290JywgJ3N0aWNreUhlYWRlciddKTtcbmV4cG9ydCBkZWZhdWx0IHRhYmxlQ2xhc3NlczsiLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJjbGFzc05hbWVcIiwgXCJjb21wb25lbnRcIiwgXCJwYWRkaW5nXCIsIFwic2l6ZVwiLCBcInN0aWNreUhlYWRlclwiXTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCBjb21wb3NlQ2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2NvbXBvc2VDbGFzc2VzJztcbmltcG9ydCBUYWJsZUNvbnRleHQgZnJvbSAnLi9UYWJsZUNvbnRleHQnO1xuaW1wb3J0IHsgdXNlRGVmYXVsdFByb3BzIH0gZnJvbSAnLi4vRGVmYXVsdFByb3BzUHJvdmlkZXInO1xuaW1wb3J0IHN0eWxlZCBmcm9tICcuLi9zdHlsZXMvc3R5bGVkJztcbmltcG9ydCB7IGdldFRhYmxlVXRpbGl0eUNsYXNzIH0gZnJvbSAnLi90YWJsZUNsYXNzZXMnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmNvbnN0IHVzZVV0aWxpdHlDbGFzc2VzID0gb3duZXJTdGF0ZSA9PiB7XG4gIGNvbnN0IHtcbiAgICBjbGFzc2VzLFxuICAgIHN0aWNreUhlYWRlclxuICB9ID0gb3duZXJTdGF0ZTtcbiAgY29uc3Qgc2xvdHMgPSB7XG4gICAgcm9vdDogWydyb290Jywgc3RpY2t5SGVhZGVyICYmICdzdGlja3lIZWFkZXInXVxuICB9O1xuICByZXR1cm4gY29tcG9zZUNsYXNzZXMoc2xvdHMsIGdldFRhYmxlVXRpbGl0eUNsYXNzLCBjbGFzc2VzKTtcbn07XG5jb25zdCBUYWJsZVJvb3QgPSBzdHlsZWQoJ3RhYmxlJywge1xuICBuYW1lOiAnTXVpVGFibGUnLFxuICBzbG90OiAnUm9vdCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9ID0gcHJvcHM7XG4gICAgcmV0dXJuIFtzdHlsZXMucm9vdCwgb3duZXJTdGF0ZS5zdGlja3lIZWFkZXIgJiYgc3R5bGVzLnN0aWNreUhlYWRlcl07XG4gIH1cbn0pKCh7XG4gIHRoZW1lLFxuICBvd25lclN0YXRlXG59KSA9PiBfZXh0ZW5kcyh7XG4gIGRpc3BsYXk6ICd0YWJsZScsXG4gIHdpZHRoOiAnMTAwJScsXG4gIGJvcmRlckNvbGxhcHNlOiAnY29sbGFwc2UnLFxuICBib3JkZXJTcGFjaW5nOiAwLFxuICAnJiBjYXB0aW9uJzogX2V4dGVuZHMoe30sIHRoZW1lLnR5cG9ncmFwaHkuYm9keTIsIHtcbiAgICBwYWRkaW5nOiB0aGVtZS5zcGFjaW5nKDIpLFxuICAgIGNvbG9yOiAodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZS50ZXh0LnNlY29uZGFyeSxcbiAgICB0ZXh0QWxpZ246ICdsZWZ0JyxcbiAgICBjYXB0aW9uU2lkZTogJ2JvdHRvbSdcbiAgfSlcbn0sIG93bmVyU3RhdGUuc3RpY2t5SGVhZGVyICYmIHtcbiAgYm9yZGVyQ29sbGFwc2U6ICdzZXBhcmF0ZSdcbn0pKTtcbmNvbnN0IGRlZmF1bHRDb21wb25lbnQgPSAndGFibGUnO1xuY29uc3QgVGFibGUgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBUYWJsZShpblByb3BzLCByZWYpIHtcbiAgY29uc3QgcHJvcHMgPSB1c2VEZWZhdWx0UHJvcHMoe1xuICAgIHByb3BzOiBpblByb3BzLFxuICAgIG5hbWU6ICdNdWlUYWJsZSdcbiAgfSk7XG4gIGNvbnN0IHtcbiAgICAgIGNsYXNzTmFtZSxcbiAgICAgIGNvbXBvbmVudCA9IGRlZmF1bHRDb21wb25lbnQsXG4gICAgICBwYWRkaW5nID0gJ25vcm1hbCcsXG4gICAgICBzaXplID0gJ21lZGl1bScsXG4gICAgICBzdGlja3lIZWFkZXIgPSBmYWxzZVxuICAgIH0gPSBwcm9wcyxcbiAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQpO1xuICBjb25zdCBvd25lclN0YXRlID0gX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgY29tcG9uZW50LFxuICAgIHBhZGRpbmcsXG4gICAgc2l6ZSxcbiAgICBzdGlja3lIZWFkZXJcbiAgfSk7XG4gIGNvbnN0IGNsYXNzZXMgPSB1c2VVdGlsaXR5Q2xhc3Nlcyhvd25lclN0YXRlKTtcbiAgY29uc3QgdGFibGUgPSBSZWFjdC51c2VNZW1vKCgpID0+ICh7XG4gICAgcGFkZGluZyxcbiAgICBzaXplLFxuICAgIHN0aWNreUhlYWRlclxuICB9KSwgW3BhZGRpbmcsIHNpemUsIHN0aWNreUhlYWRlcl0pO1xuICByZXR1cm4gLyojX19QVVJFX18qL19qc3goVGFibGVDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IHRhYmxlLFxuICAgIGNoaWxkcmVuOiAvKiNfX1BVUkVfXyovX2pzeChUYWJsZVJvb3QsIF9leHRlbmRzKHtcbiAgICAgIGFzOiBjb21wb25lbnQsXG4gICAgICByb2xlOiBjb21wb25lbnQgPT09IGRlZmF1bHRDb21wb25lbnQgPyBudWxsIDogJ3RhYmxlJyxcbiAgICAgIHJlZjogcmVmLFxuICAgICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lKSxcbiAgICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGVcbiAgICB9LCBvdGhlcikpXG4gIH0pO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBUYWJsZS5wcm9wVHlwZXMgLyogcmVtb3ZlLXByb3B0eXBlcyAqLyA9IHtcbiAgLy8g4pSM4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAIFdhcm5pbmcg4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSQXG4gIC8vIOKUgiBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMuIOKUglxuICAvLyDilIIgICAgVG8gdXBkYXRlIHRoZW0sIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIGBwbnBtIHByb3B0eXBlc2AuICAgICDilIJcbiAgLy8g4pSU4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSYXG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgdGFibGUsIG5vcm1hbGx5IGBUYWJsZUhlYWRgIGFuZCBgVGFibGVCb2R5YC5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBIVE1MIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBjb21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcbiAgLyoqXG4gICAqIEFsbG93cyBUYWJsZUNlbGxzIHRvIGluaGVyaXQgcGFkZGluZyBvZiB0aGUgVGFibGUuXG4gICAqIEBkZWZhdWx0ICdub3JtYWwnXG4gICAqL1xuICBwYWRkaW5nOiBQcm9wVHlwZXMub25lT2YoWydjaGVja2JveCcsICdub25lJywgJ25vcm1hbCddKSxcbiAgLyoqXG4gICAqIEFsbG93cyBUYWJsZUNlbGxzIHRvIGluaGVyaXQgc2l6ZSBvZiB0aGUgVGFibGUuXG4gICAqIEBkZWZhdWx0ICdtZWRpdW0nXG4gICAqL1xuICBzaXplOiBQcm9wVHlwZXMgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqLy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ21lZGl1bScsICdzbWFsbCddKSwgUHJvcFR5cGVzLnN0cmluZ10pLFxuICAvKipcbiAgICogU2V0IHRoZSBoZWFkZXIgc3RpY2t5LlxuICAgKlxuICAgKiDimqDvuI8gSXQgZG9lc24ndCB3b3JrIHdpdGggSUUxMS5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIHN0aWNreUhlYWRlcjogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBUaGUgc3lzdGVtIHByb3AgdGhhdCBhbGxvd3MgZGVmaW5pbmcgc3lzdGVtIG92ZXJyaWRlcyBhcyB3ZWxsIGFzIGFkZGl0aW9uYWwgQ1NTIHN0eWxlcy5cbiAgICovXG4gIHN4OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLmJvb2xdKSksIFByb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCBUYWJsZTsiLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbi8qKlxuICogQGlnbm9yZSAtIGludGVybmFsIGNvbXBvbmVudC5cbiAqL1xuY29uc3QgVGFibGVsdmwyQ29udGV4dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVDb250ZXh0KCk7XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBUYWJsZWx2bDJDb250ZXh0LmRpc3BsYXlOYW1lID0gJ1RhYmxlbHZsMkNvbnRleHQnO1xufVxuZXhwb3J0IGRlZmF1bHQgVGFibGVsdmwyQ29udGV4dDsiLCJpbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzZXMnO1xuaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3MnO1xuZXhwb3J0IGZ1bmN0aW9uIGdldFRhYmxlQm9keVV0aWxpdHlDbGFzcyhzbG90KSB7XG4gIHJldHVybiBnZW5lcmF0ZVV0aWxpdHlDbGFzcygnTXVpVGFibGVCb2R5Jywgc2xvdCk7XG59XG5jb25zdCB0YWJsZUJvZHlDbGFzc2VzID0gZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcygnTXVpVGFibGVCb2R5JywgWydyb290J10pO1xuZXhwb3J0IGRlZmF1bHQgdGFibGVCb2R5Q2xhc3NlczsiLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJjbGFzc05hbWVcIiwgXCJjb21wb25lbnRcIl07XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgY29tcG9zZUNsYXNzZXMgZnJvbSAnQG11aS91dGlscy9jb21wb3NlQ2xhc3Nlcyc7XG5pbXBvcnQgVGFibGVsdmwyQ29udGV4dCBmcm9tICcuLi9UYWJsZS9UYWJsZWx2bDJDb250ZXh0JztcbmltcG9ydCB7IHVzZURlZmF1bHRQcm9wcyB9IGZyb20gJy4uL0RlZmF1bHRQcm9wc1Byb3ZpZGVyJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnLi4vc3R5bGVzL3N0eWxlZCc7XG5pbXBvcnQgeyBnZXRUYWJsZUJvZHlVdGlsaXR5Q2xhc3MgfSBmcm9tICcuL3RhYmxlQm9keUNsYXNzZXMnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmNvbnN0IHVzZVV0aWxpdHlDbGFzc2VzID0gb3duZXJTdGF0ZSA9PiB7XG4gIGNvbnN0IHtcbiAgICBjbGFzc2VzXG4gIH0gPSBvd25lclN0YXRlO1xuICBjb25zdCBzbG90cyA9IHtcbiAgICByb290OiBbJ3Jvb3QnXVxuICB9O1xuICByZXR1cm4gY29tcG9zZUNsYXNzZXMoc2xvdHMsIGdldFRhYmxlQm9keVV0aWxpdHlDbGFzcywgY2xhc3Nlcyk7XG59O1xuY29uc3QgVGFibGVCb2R5Um9vdCA9IHN0eWxlZCgndGJvZHknLCB7XG4gIG5hbWU6ICdNdWlUYWJsZUJvZHknLFxuICBzbG90OiAnUm9vdCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4gc3R5bGVzLnJvb3Rcbn0pKHtcbiAgZGlzcGxheTogJ3RhYmxlLXJvdy1ncm91cCdcbn0pO1xuY29uc3QgdGFibGVsdmwyID0ge1xuICB2YXJpYW50OiAnYm9keSdcbn07XG5jb25zdCBkZWZhdWx0Q29tcG9uZW50ID0gJ3Rib2R5JztcbmNvbnN0IFRhYmxlQm9keSA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIFRhYmxlQm9keShpblByb3BzLCByZWYpIHtcbiAgY29uc3QgcHJvcHMgPSB1c2VEZWZhdWx0UHJvcHMoe1xuICAgIHByb3BzOiBpblByb3BzLFxuICAgIG5hbWU6ICdNdWlUYWJsZUJvZHknXG4gIH0pO1xuICBjb25zdCB7XG4gICAgICBjbGFzc05hbWUsXG4gICAgICBjb21wb25lbnQgPSBkZWZhdWx0Q29tcG9uZW50XG4gICAgfSA9IHByb3BzLFxuICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIF9leGNsdWRlZCk7XG4gIGNvbnN0IG93bmVyU3RhdGUgPSBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICBjb21wb25lbnRcbiAgfSk7XG4gIGNvbnN0IGNsYXNzZXMgPSB1c2VVdGlsaXR5Q2xhc3Nlcyhvd25lclN0YXRlKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KFRhYmxlbHZsMkNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICB2YWx1ZTogdGFibGVsdmwyLFxuICAgIGNoaWxkcmVuOiAvKiNfX1BVUkVfXyovX2pzeChUYWJsZUJvZHlSb290LCBfZXh0ZW5kcyh7XG4gICAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWUpLFxuICAgICAgYXM6IGNvbXBvbmVudCxcbiAgICAgIHJlZjogcmVmLFxuICAgICAgcm9sZTogY29tcG9uZW50ID09PSBkZWZhdWx0Q29tcG9uZW50ID8gbnVsbCA6ICdyb3dncm91cCcsXG4gICAgICBvd25lclN0YXRlOiBvd25lclN0YXRlXG4gICAgfSwgb3RoZXIpKVxuICB9KTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVGFibGVCb2R5LnByb3BUeXBlcyAvKiByZW1vdmUtcHJvcHR5cGVzICovID0ge1xuICAvLyDilIzilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIAgV2FybmluZyDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJBcbiAgLy8g4pSCIFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucy4g4pSCXG4gIC8vIOKUgiAgICBUbyB1cGRhdGUgdGhlbSwgZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gYHBucG0gcHJvcHR5cGVzYC4gICAgIOKUglxuICAvLyDilJTilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJhcbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBjb21wb25lbnQsIG5vcm1hbGx5IGBUYWJsZVJvd2AuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgcm9vdCBub2RlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgSFRNTCBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKi9cbiAgY29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG4gIC8qKlxuICAgKiBUaGUgc3lzdGVtIHByb3AgdGhhdCBhbGxvd3MgZGVmaW5pbmcgc3lzdGVtIG92ZXJyaWRlcyBhcyB3ZWxsIGFzIGFkZGl0aW9uYWwgQ1NTIHN0eWxlcy5cbiAgICovXG4gIHN4OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLmJvb2xdKSksIFByb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCBUYWJsZUJvZHk7IiwiaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzc2VzJztcbmltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzJztcbmV4cG9ydCBmdW5jdGlvbiBnZXRUYWJsZUNlbGxVdGlsaXR5Q2xhc3Moc2xvdCkge1xuICByZXR1cm4gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoJ011aVRhYmxlQ2VsbCcsIHNsb3QpO1xufVxuY29uc3QgdGFibGVDZWxsQ2xhc3NlcyA9IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMoJ011aVRhYmxlQ2VsbCcsIFsncm9vdCcsICdoZWFkJywgJ2JvZHknLCAnZm9vdGVyJywgJ3NpemVTbWFsbCcsICdzaXplTWVkaXVtJywgJ3BhZGRpbmdDaGVja2JveCcsICdwYWRkaW5nTm9uZScsICdhbGlnbkxlZnQnLCAnYWxpZ25DZW50ZXInLCAnYWxpZ25SaWdodCcsICdhbGlnbkp1c3RpZnknLCAnc3RpY2t5SGVhZGVyJ10pO1xuZXhwb3J0IGRlZmF1bHQgdGFibGVDZWxsQ2xhc3NlczsiLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJhbGlnblwiLCBcImNsYXNzTmFtZVwiLCBcImNvbXBvbmVudFwiLCBcInBhZGRpbmdcIiwgXCJzY29wZVwiLCBcInNpemVcIiwgXCJzb3J0RGlyZWN0aW9uXCIsIFwidmFyaWFudFwiXTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCBjb21wb3NlQ2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2NvbXBvc2VDbGFzc2VzJztcbmltcG9ydCB7IGRhcmtlbiwgYWxwaGEsIGxpZ2h0ZW4gfSBmcm9tICdAbXVpL3N5c3RlbS9jb2xvck1hbmlwdWxhdG9yJztcbmltcG9ydCBjYXBpdGFsaXplIGZyb20gJy4uL3V0aWxzL2NhcGl0YWxpemUnO1xuaW1wb3J0IFRhYmxlQ29udGV4dCBmcm9tICcuLi9UYWJsZS9UYWJsZUNvbnRleHQnO1xuaW1wb3J0IFRhYmxlbHZsMkNvbnRleHQgZnJvbSAnLi4vVGFibGUvVGFibGVsdmwyQ29udGV4dCc7XG5pbXBvcnQgeyB1c2VEZWZhdWx0UHJvcHMgfSBmcm9tICcuLi9EZWZhdWx0UHJvcHNQcm92aWRlcic7XG5pbXBvcnQgc3R5bGVkIGZyb20gJy4uL3N0eWxlcy9zdHlsZWQnO1xuaW1wb3J0IHRhYmxlQ2VsbENsYXNzZXMsIHsgZ2V0VGFibGVDZWxsVXRpbGl0eUNsYXNzIH0gZnJvbSAnLi90YWJsZUNlbGxDbGFzc2VzJztcbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5jb25zdCB1c2VVdGlsaXR5Q2xhc3NlcyA9IG93bmVyU3RhdGUgPT4ge1xuICBjb25zdCB7XG4gICAgY2xhc3NlcyxcbiAgICB2YXJpYW50LFxuICAgIGFsaWduLFxuICAgIHBhZGRpbmcsXG4gICAgc2l6ZSxcbiAgICBzdGlja3lIZWFkZXJcbiAgfSA9IG93bmVyU3RhdGU7XG4gIGNvbnN0IHNsb3RzID0ge1xuICAgIHJvb3Q6IFsncm9vdCcsIHZhcmlhbnQsIHN0aWNreUhlYWRlciAmJiAnc3RpY2t5SGVhZGVyJywgYWxpZ24gIT09ICdpbmhlcml0JyAmJiBgYWxpZ24ke2NhcGl0YWxpemUoYWxpZ24pfWAsIHBhZGRpbmcgIT09ICdub3JtYWwnICYmIGBwYWRkaW5nJHtjYXBpdGFsaXplKHBhZGRpbmcpfWAsIGBzaXplJHtjYXBpdGFsaXplKHNpemUpfWBdXG4gIH07XG4gIHJldHVybiBjb21wb3NlQ2xhc3NlcyhzbG90cywgZ2V0VGFibGVDZWxsVXRpbGl0eUNsYXNzLCBjbGFzc2VzKTtcbn07XG5jb25zdCBUYWJsZUNlbGxSb290ID0gc3R5bGVkKCd0ZCcsIHtcbiAgbmFtZTogJ011aVRhYmxlQ2VsbCcsXG4gIHNsb3Q6ICdSb290JyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgb3duZXJTdGF0ZVxuICAgIH0gPSBwcm9wcztcbiAgICByZXR1cm4gW3N0eWxlcy5yb290LCBzdHlsZXNbb3duZXJTdGF0ZS52YXJpYW50XSwgc3R5bGVzW2BzaXplJHtjYXBpdGFsaXplKG93bmVyU3RhdGUuc2l6ZSl9YF0sIG93bmVyU3RhdGUucGFkZGluZyAhPT0gJ25vcm1hbCcgJiYgc3R5bGVzW2BwYWRkaW5nJHtjYXBpdGFsaXplKG93bmVyU3RhdGUucGFkZGluZyl9YF0sIG93bmVyU3RhdGUuYWxpZ24gIT09ICdpbmhlcml0JyAmJiBzdHlsZXNbYGFsaWduJHtjYXBpdGFsaXplKG93bmVyU3RhdGUuYWxpZ24pfWBdLCBvd25lclN0YXRlLnN0aWNreUhlYWRlciAmJiBzdHlsZXMuc3RpY2t5SGVhZGVyXTtcbiAgfVxufSkoKHtcbiAgdGhlbWUsXG4gIG93bmVyU3RhdGVcbn0pID0+IF9leHRlbmRzKHt9LCB0aGVtZS50eXBvZ3JhcGh5LmJvZHkyLCB7XG4gIGRpc3BsYXk6ICd0YWJsZS1jZWxsJyxcbiAgdmVydGljYWxBbGlnbjogJ2luaGVyaXQnLFxuICAvLyBXb3JrYXJvdW5kIGZvciBhIHJlbmRlcmluZyBidWcgd2l0aCBzcGFubmVkIGNvbHVtbnMgaW4gQ2hyb21lIDYyLjAuXG4gIC8vIFJlbW92ZXMgdGhlIGFscGhhIChzZXRzIGl0IHRvIDEpLCBhbmQgbGlnaHRlbnMgb3IgZGFya2VucyB0aGUgdGhlbWUgY29sb3IuXG4gIGJvcmRlckJvdHRvbTogdGhlbWUudmFycyA/IGAxcHggc29saWQgJHt0aGVtZS52YXJzLnBhbGV0dGUuVGFibGVDZWxsLmJvcmRlcn1gIDogYDFweCBzb2xpZFxuICAgICR7dGhlbWUucGFsZXR0ZS5tb2RlID09PSAnbGlnaHQnID8gbGlnaHRlbihhbHBoYSh0aGVtZS5wYWxldHRlLmRpdmlkZXIsIDEpLCAwLjg4KSA6IGRhcmtlbihhbHBoYSh0aGVtZS5wYWxldHRlLmRpdmlkZXIsIDEpLCAwLjY4KX1gLFxuICB0ZXh0QWxpZ246ICdsZWZ0JyxcbiAgcGFkZGluZzogMTZcbn0sIG93bmVyU3RhdGUudmFyaWFudCA9PT0gJ2hlYWQnICYmIHtcbiAgY29sb3I6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlLnRleHQucHJpbWFyeSxcbiAgbGluZUhlaWdodDogdGhlbWUudHlwb2dyYXBoeS5weFRvUmVtKDI0KSxcbiAgZm9udFdlaWdodDogdGhlbWUudHlwb2dyYXBoeS5mb250V2VpZ2h0TWVkaXVtXG59LCBvd25lclN0YXRlLnZhcmlhbnQgPT09ICdib2R5JyAmJiB7XG4gIGNvbG9yOiAodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZS50ZXh0LnByaW1hcnlcbn0sIG93bmVyU3RhdGUudmFyaWFudCA9PT0gJ2Zvb3RlcicgJiYge1xuICBjb2xvcjogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGUudGV4dC5zZWNvbmRhcnksXG4gIGxpbmVIZWlnaHQ6IHRoZW1lLnR5cG9ncmFwaHkucHhUb1JlbSgyMSksXG4gIGZvbnRTaXplOiB0aGVtZS50eXBvZ3JhcGh5LnB4VG9SZW0oMTIpXG59LCBvd25lclN0YXRlLnNpemUgPT09ICdzbWFsbCcgJiYge1xuICBwYWRkaW5nOiAnNnB4IDE2cHgnLFxuICBbYCYuJHt0YWJsZUNlbGxDbGFzc2VzLnBhZGRpbmdDaGVja2JveH1gXToge1xuICAgIHdpZHRoOiAyNCxcbiAgICAvLyBwcmV2ZW50IHRoZSBjaGVja2JveCBjb2x1bW4gZnJvbSBncm93aW5nXG4gICAgcGFkZGluZzogJzAgMTJweCAwIDE2cHgnLFxuICAgICcmID4gKic6IHtcbiAgICAgIHBhZGRpbmc6IDBcbiAgICB9XG4gIH1cbn0sIG93bmVyU3RhdGUucGFkZGluZyA9PT0gJ2NoZWNrYm94JyAmJiB7XG4gIHdpZHRoOiA0OCxcbiAgLy8gcHJldmVudCB0aGUgY2hlY2tib3ggY29sdW1uIGZyb20gZ3Jvd2luZ1xuICBwYWRkaW5nOiAnMCAwIDAgNHB4J1xufSwgb3duZXJTdGF0ZS5wYWRkaW5nID09PSAnbm9uZScgJiYge1xuICBwYWRkaW5nOiAwXG59LCBvd25lclN0YXRlLmFsaWduID09PSAnbGVmdCcgJiYge1xuICB0ZXh0QWxpZ246ICdsZWZ0J1xufSwgb3duZXJTdGF0ZS5hbGlnbiA9PT0gJ2NlbnRlcicgJiYge1xuICB0ZXh0QWxpZ246ICdjZW50ZXInXG59LCBvd25lclN0YXRlLmFsaWduID09PSAncmlnaHQnICYmIHtcbiAgdGV4dEFsaWduOiAncmlnaHQnLFxuICBmbGV4RGlyZWN0aW9uOiAncm93LXJldmVyc2UnXG59LCBvd25lclN0YXRlLmFsaWduID09PSAnanVzdGlmeScgJiYge1xuICB0ZXh0QWxpZ246ICdqdXN0aWZ5J1xufSwgb3duZXJTdGF0ZS5zdGlja3lIZWFkZXIgJiYge1xuICBwb3NpdGlvbjogJ3N0aWNreScsXG4gIHRvcDogMCxcbiAgekluZGV4OiAyLFxuICBiYWNrZ3JvdW5kQ29sb3I6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlLmJhY2tncm91bmQuZGVmYXVsdFxufSkpO1xuXG4vKipcbiAqIFRoZSBjb21wb25lbnQgcmVuZGVycyBhIGA8dGg+YCBlbGVtZW50IHdoZW4gdGhlIHBhcmVudCBjb250ZXh0IGlzIGEgaGVhZGVyXG4gKiBvciBvdGhlcndpc2UgYSBgPHRkPmAgZWxlbWVudC5cbiAqL1xuY29uc3QgVGFibGVDZWxsID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gVGFibGVDZWxsKGluUHJvcHMsIHJlZikge1xuICBjb25zdCBwcm9wcyA9IHVzZURlZmF1bHRQcm9wcyh7XG4gICAgcHJvcHM6IGluUHJvcHMsXG4gICAgbmFtZTogJ011aVRhYmxlQ2VsbCdcbiAgfSk7XG4gIGNvbnN0IHtcbiAgICAgIGFsaWduID0gJ2luaGVyaXQnLFxuICAgICAgY2xhc3NOYW1lLFxuICAgICAgY29tcG9uZW50OiBjb21wb25lbnRQcm9wLFxuICAgICAgcGFkZGluZzogcGFkZGluZ1Byb3AsXG4gICAgICBzY29wZTogc2NvcGVQcm9wLFxuICAgICAgc2l6ZTogc2l6ZVByb3AsXG4gICAgICBzb3J0RGlyZWN0aW9uLFxuICAgICAgdmFyaWFudDogdmFyaWFudFByb3BcbiAgICB9ID0gcHJvcHMsXG4gICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkKTtcbiAgY29uc3QgdGFibGUgPSBSZWFjdC51c2VDb250ZXh0KFRhYmxlQ29udGV4dCk7XG4gIGNvbnN0IHRhYmxlbHZsMiA9IFJlYWN0LnVzZUNvbnRleHQoVGFibGVsdmwyQ29udGV4dCk7XG4gIGNvbnN0IGlzSGVhZENlbGwgPSB0YWJsZWx2bDIgJiYgdGFibGVsdmwyLnZhcmlhbnQgPT09ICdoZWFkJztcbiAgbGV0IGNvbXBvbmVudDtcbiAgaWYgKGNvbXBvbmVudFByb3ApIHtcbiAgICBjb21wb25lbnQgPSBjb21wb25lbnRQcm9wO1xuICB9IGVsc2Uge1xuICAgIGNvbXBvbmVudCA9IGlzSGVhZENlbGwgPyAndGgnIDogJ3RkJztcbiAgfVxuICBsZXQgc2NvcGUgPSBzY29wZVByb3A7XG4gIC8vIHNjb3BlIGlzIG5vdCBhIHZhbGlkIGF0dHJpYnV0ZSBmb3IgPHRkLz4gZWxlbWVudHMuXG4gIC8vIHNvdXJjZTogaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvdGFibGVzLmh0bWwjdGhlLXRkLWVsZW1lbnRcbiAgaWYgKGNvbXBvbmVudCA9PT0gJ3RkJykge1xuICAgIHNjb3BlID0gdW5kZWZpbmVkO1xuICB9IGVsc2UgaWYgKCFzY29wZSAmJiBpc0hlYWRDZWxsKSB7XG4gICAgc2NvcGUgPSAnY29sJztcbiAgfVxuICBjb25zdCB2YXJpYW50ID0gdmFyaWFudFByb3AgfHwgdGFibGVsdmwyICYmIHRhYmxlbHZsMi52YXJpYW50O1xuICBjb25zdCBvd25lclN0YXRlID0gX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgYWxpZ24sXG4gICAgY29tcG9uZW50LFxuICAgIHBhZGRpbmc6IHBhZGRpbmdQcm9wIHx8ICh0YWJsZSAmJiB0YWJsZS5wYWRkaW5nID8gdGFibGUucGFkZGluZyA6ICdub3JtYWwnKSxcbiAgICBzaXplOiBzaXplUHJvcCB8fCAodGFibGUgJiYgdGFibGUuc2l6ZSA/IHRhYmxlLnNpemUgOiAnbWVkaXVtJyksXG4gICAgc29ydERpcmVjdGlvbixcbiAgICBzdGlja3lIZWFkZXI6IHZhcmlhbnQgPT09ICdoZWFkJyAmJiB0YWJsZSAmJiB0YWJsZS5zdGlja3lIZWFkZXIsXG4gICAgdmFyaWFudFxuICB9KTtcbiAgY29uc3QgY2xhc3NlcyA9IHVzZVV0aWxpdHlDbGFzc2VzKG93bmVyU3RhdGUpO1xuICBsZXQgYXJpYVNvcnQgPSBudWxsO1xuICBpZiAoc29ydERpcmVjdGlvbikge1xuICAgIGFyaWFTb3J0ID0gc29ydERpcmVjdGlvbiA9PT0gJ2FzYycgPyAnYXNjZW5kaW5nJyA6ICdkZXNjZW5kaW5nJztcbiAgfVxuICByZXR1cm4gLyojX19QVVJFX18qL19qc3goVGFibGVDZWxsUm9vdCwgX2V4dGVuZHMoe1xuICAgIGFzOiBjb21wb25lbnQsXG4gICAgcmVmOiByZWYsXG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lKSxcbiAgICBcImFyaWEtc29ydFwiOiBhcmlhU29ydCxcbiAgICBzY29wZTogc2NvcGUsXG4gICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZVxuICB9LCBvdGhlcikpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBUYWJsZUNlbGwucHJvcFR5cGVzIC8qIHJlbW92ZS1wcm9wdHlwZXMgKi8gPSB7XG4gIC8vIOKUjOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgCBXYXJuaW5nIOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUkFxuICAvLyDilIIgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zLiDilIJcbiAgLy8g4pSCICAgIFRvIHVwZGF0ZSB0aGVtLCBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBgcG5wbSBwcm9wdHlwZXNgLiAgICAg4pSCXG4gIC8vIOKUlOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUmFxuICAvKipcbiAgICogU2V0IHRoZSB0ZXh0LWFsaWduIG9uIHRoZSB0YWJsZSBjZWxsIGNvbnRlbnQuXG4gICAqXG4gICAqIE1vbmV0YXJ5IG9yIGdlbmVyYWxseSBudW1iZXIgZmllbGRzICoqc2hvdWxkIGJlIHJpZ2h0IGFsaWduZWQqKiBhcyB0aGF0IGFsbG93c1xuICAgKiB5b3UgdG8gYWRkIHRoZW0gdXAgcXVpY2tseSBpbiB5b3VyIGhlYWQgd2l0aG91dCBoYXZpbmcgdG8gd29ycnkgYWJvdXQgZGVjaW1hbHMuXG4gICAqIEBkZWZhdWx0ICdpbmhlcml0J1xuICAgKi9cbiAgYWxpZ246IFByb3BUeXBlcy5vbmVPZihbJ2NlbnRlcicsICdpbmhlcml0JywgJ2p1c3RpZnknLCAnbGVmdCcsICdyaWdodCddKSxcbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgcm9vdCBub2RlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgSFRNTCBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKi9cbiAgY29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG4gIC8qKlxuICAgKiBTZXRzIHRoZSBwYWRkaW5nIGFwcGxpZWQgdG8gdGhlIGNlbGwuXG4gICAqIFRoZSBwcm9wIGRlZmF1bHRzIHRvIHRoZSB2YWx1ZSAoYCdkZWZhdWx0J2ApIGluaGVyaXRlZCBmcm9tIHRoZSBwYXJlbnQgVGFibGUgY29tcG9uZW50LlxuICAgKi9cbiAgcGFkZGluZzogUHJvcFR5cGVzLm9uZU9mKFsnY2hlY2tib3gnLCAnbm9uZScsICdub3JtYWwnXSksXG4gIC8qKlxuICAgKiBTZXQgc2NvcGUgYXR0cmlidXRlLlxuICAgKi9cbiAgc2NvcGU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBTcGVjaWZ5IHRoZSBzaXplIG9mIHRoZSBjZWxsLlxuICAgKiBUaGUgcHJvcCBkZWZhdWx0cyB0byB0aGUgdmFsdWUgKGAnbWVkaXVtJ2ApIGluaGVyaXRlZCBmcm9tIHRoZSBwYXJlbnQgVGFibGUgY29tcG9uZW50LlxuICAgKi9cbiAgc2l6ZTogUHJvcFR5cGVzIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi8ub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydtZWRpdW0nLCAnc21hbGwnXSksIFByb3BUeXBlcy5zdHJpbmddKSxcbiAgLyoqXG4gICAqIFNldCBhcmlhLXNvcnQgZGlyZWN0aW9uLlxuICAgKi9cbiAgc29ydERpcmVjdGlvbjogUHJvcFR5cGVzLm9uZU9mKFsnYXNjJywgJ2Rlc2MnLCBmYWxzZV0pLFxuICAvKipcbiAgICogVGhlIHN5c3RlbSBwcm9wIHRoYXQgYWxsb3dzIGRlZmluaW5nIHN5c3RlbSBvdmVycmlkZXMgYXMgd2VsbCBhcyBhZGRpdGlvbmFsIENTUyBzdHlsZXMuXG4gICAqL1xuICBzeDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5ib29sXSkpLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pLFxuICAvKipcbiAgICogU3BlY2lmeSB0aGUgY2VsbCB0eXBlLlxuICAgKiBUaGUgcHJvcCBkZWZhdWx0cyB0byB0aGUgdmFsdWUgaW5oZXJpdGVkIGZyb20gdGhlIHBhcmVudCBUYWJsZUhlYWQsIFRhYmxlQm9keSwgb3IgVGFibGVGb290ZXIgY29tcG9uZW50cy5cbiAgICovXG4gIHZhcmlhbnQ6IFByb3BUeXBlcyAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsnYm9keScsICdmb290ZXInLCAnaGVhZCddKSwgUHJvcFR5cGVzLnN0cmluZ10pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgVGFibGVDZWxsOyIsImltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3Nlcyc7XG5pbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3MgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzcyc7XG5leHBvcnQgZnVuY3Rpb24gZ2V0VGFibGVDb250YWluZXJVdGlsaXR5Q2xhc3Moc2xvdCkge1xuICByZXR1cm4gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoJ011aVRhYmxlQ29udGFpbmVyJywgc2xvdCk7XG59XG5jb25zdCB0YWJsZUNvbnRhaW5lckNsYXNzZXMgPSBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzKCdNdWlUYWJsZUNvbnRhaW5lcicsIFsncm9vdCddKTtcbmV4cG9ydCBkZWZhdWx0IHRhYmxlQ29udGFpbmVyQ2xhc3NlczsiLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJjbGFzc05hbWVcIiwgXCJjb21wb25lbnRcIl07XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgY29tcG9zZUNsYXNzZXMgZnJvbSAnQG11aS91dGlscy9jb21wb3NlQ2xhc3Nlcyc7XG5pbXBvcnQgeyB1c2VEZWZhdWx0UHJvcHMgfSBmcm9tICcuLi9EZWZhdWx0UHJvcHNQcm92aWRlcic7XG5pbXBvcnQgc3R5bGVkIGZyb20gJy4uL3N0eWxlcy9zdHlsZWQnO1xuaW1wb3J0IHsgZ2V0VGFibGVDb250YWluZXJVdGlsaXR5Q2xhc3MgfSBmcm9tICcuL3RhYmxlQ29udGFpbmVyQ2xhc3Nlcyc7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuY29uc3QgdXNlVXRpbGl0eUNsYXNzZXMgPSBvd25lclN0YXRlID0+IHtcbiAgY29uc3Qge1xuICAgIGNsYXNzZXNcbiAgfSA9IG93bmVyU3RhdGU7XG4gIGNvbnN0IHNsb3RzID0ge1xuICAgIHJvb3Q6IFsncm9vdCddXG4gIH07XG4gIHJldHVybiBjb21wb3NlQ2xhc3NlcyhzbG90cywgZ2V0VGFibGVDb250YWluZXJVdGlsaXR5Q2xhc3MsIGNsYXNzZXMpO1xufTtcbmNvbnN0IFRhYmxlQ29udGFpbmVyUm9vdCA9IHN0eWxlZCgnZGl2Jywge1xuICBuYW1lOiAnTXVpVGFibGVDb250YWluZXInLFxuICBzbG90OiAnUm9vdCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4gc3R5bGVzLnJvb3Rcbn0pKHtcbiAgd2lkdGg6ICcxMDAlJyxcbiAgb3ZlcmZsb3dYOiAnYXV0bydcbn0pO1xuY29uc3QgVGFibGVDb250YWluZXIgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBUYWJsZUNvbnRhaW5lcihpblByb3BzLCByZWYpIHtcbiAgY29uc3QgcHJvcHMgPSB1c2VEZWZhdWx0UHJvcHMoe1xuICAgIHByb3BzOiBpblByb3BzLFxuICAgIG5hbWU6ICdNdWlUYWJsZUNvbnRhaW5lcidcbiAgfSk7XG4gIGNvbnN0IHtcbiAgICAgIGNsYXNzTmFtZSxcbiAgICAgIGNvbXBvbmVudCA9ICdkaXYnXG4gICAgfSA9IHByb3BzLFxuICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIF9leGNsdWRlZCk7XG4gIGNvbnN0IG93bmVyU3RhdGUgPSBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICBjb21wb25lbnRcbiAgfSk7XG4gIGNvbnN0IGNsYXNzZXMgPSB1c2VVdGlsaXR5Q2xhc3Nlcyhvd25lclN0YXRlKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KFRhYmxlQ29udGFpbmVyUm9vdCwgX2V4dGVuZHMoe1xuICAgIHJlZjogcmVmLFxuICAgIGFzOiBjb21wb25lbnQsXG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lKSxcbiAgICBvd25lclN0YXRlOiBvd25lclN0YXRlXG4gIH0sIG90aGVyKSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFRhYmxlQ29udGFpbmVyLnByb3BUeXBlcyAvKiByZW1vdmUtcHJvcHR5cGVzICovID0ge1xuICAvLyDilIzilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIAgV2FybmluZyDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJBcbiAgLy8g4pSCIFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucy4g4pSCXG4gIC8vIOKUgiAgICBUbyB1cGRhdGUgdGhlbSwgZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gYHBucG0gcHJvcHR5cGVzYC4gICAgIOKUglxuICAvLyDilJTilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJhcbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBjb21wb25lbnQsIG5vcm1hbGx5IGBUYWJsZWAuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgcm9vdCBub2RlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgSFRNTCBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKi9cbiAgY29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG4gIC8qKlxuICAgKiBUaGUgc3lzdGVtIHByb3AgdGhhdCBhbGxvd3MgZGVmaW5pbmcgc3lzdGVtIG92ZXJyaWRlcyBhcyB3ZWxsIGFzIGFkZGl0aW9uYWwgQ1NTIHN0eWxlcy5cbiAgICovXG4gIHN4OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLmJvb2xdKSksIFByb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCBUYWJsZUNvbnRhaW5lcjsiLCJpbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzZXMnO1xuaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3MnO1xuZXhwb3J0IGZ1bmN0aW9uIGdldFRhYmxlRm9vdGVyVXRpbGl0eUNsYXNzKHNsb3QpIHtcbiAgcmV0dXJuIGdlbmVyYXRlVXRpbGl0eUNsYXNzKCdNdWlUYWJsZUZvb3RlcicsIHNsb3QpO1xufVxuY29uc3QgdGFibGVGb290ZXJDbGFzc2VzID0gZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcygnTXVpVGFibGVGb290ZXInLCBbJ3Jvb3QnXSk7XG5leHBvcnQgZGVmYXVsdCB0YWJsZUZvb3RlckNsYXNzZXM7IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiY2xhc3NOYW1lXCIsIFwiY29tcG9uZW50XCJdO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IGNvbXBvc2VDbGFzc2VzIGZyb20gJ0BtdWkvdXRpbHMvY29tcG9zZUNsYXNzZXMnO1xuaW1wb3J0IFRhYmxlbHZsMkNvbnRleHQgZnJvbSAnLi4vVGFibGUvVGFibGVsdmwyQ29udGV4dCc7XG5pbXBvcnQgeyB1c2VEZWZhdWx0UHJvcHMgfSBmcm9tICcuLi9EZWZhdWx0UHJvcHNQcm92aWRlcic7XG5pbXBvcnQgc3R5bGVkIGZyb20gJy4uL3N0eWxlcy9zdHlsZWQnO1xuaW1wb3J0IHsgZ2V0VGFibGVGb290ZXJVdGlsaXR5Q2xhc3MgfSBmcm9tICcuL3RhYmxlRm9vdGVyQ2xhc3Nlcyc7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuY29uc3QgdXNlVXRpbGl0eUNsYXNzZXMgPSBvd25lclN0YXRlID0+IHtcbiAgY29uc3Qge1xuICAgIGNsYXNzZXNcbiAgfSA9IG93bmVyU3RhdGU7XG4gIGNvbnN0IHNsb3RzID0ge1xuICAgIHJvb3Q6IFsncm9vdCddXG4gIH07XG4gIHJldHVybiBjb21wb3NlQ2xhc3NlcyhzbG90cywgZ2V0VGFibGVGb290ZXJVdGlsaXR5Q2xhc3MsIGNsYXNzZXMpO1xufTtcbmNvbnN0IFRhYmxlRm9vdGVyUm9vdCA9IHN0eWxlZCgndGZvb3QnLCB7XG4gIG5hbWU6ICdNdWlUYWJsZUZvb3RlcicsXG4gIHNsb3Q6ICdSb290JyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiBzdHlsZXMucm9vdFxufSkoe1xuICBkaXNwbGF5OiAndGFibGUtZm9vdGVyLWdyb3VwJ1xufSk7XG5jb25zdCB0YWJsZWx2bDIgPSB7XG4gIHZhcmlhbnQ6ICdmb290ZXInXG59O1xuY29uc3QgZGVmYXVsdENvbXBvbmVudCA9ICd0Zm9vdCc7XG5jb25zdCBUYWJsZUZvb3RlciA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIFRhYmxlRm9vdGVyKGluUHJvcHMsIHJlZikge1xuICBjb25zdCBwcm9wcyA9IHVzZURlZmF1bHRQcm9wcyh7XG4gICAgcHJvcHM6IGluUHJvcHMsXG4gICAgbmFtZTogJ011aVRhYmxlRm9vdGVyJ1xuICB9KTtcbiAgY29uc3Qge1xuICAgICAgY2xhc3NOYW1lLFxuICAgICAgY29tcG9uZW50ID0gZGVmYXVsdENvbXBvbmVudFxuICAgIH0gPSBwcm9wcyxcbiAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQpO1xuICBjb25zdCBvd25lclN0YXRlID0gX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgY29tcG9uZW50XG4gIH0pO1xuICBjb25zdCBjbGFzc2VzID0gdXNlVXRpbGl0eUNsYXNzZXMob3duZXJTdGF0ZSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeChUYWJsZWx2bDJDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IHRhYmxlbHZsMixcbiAgICBjaGlsZHJlbjogLyojX19QVVJFX18qL19qc3goVGFibGVGb290ZXJSb290LCBfZXh0ZW5kcyh7XG4gICAgICBhczogY29tcG9uZW50LFxuICAgICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lKSxcbiAgICAgIHJlZjogcmVmLFxuICAgICAgcm9sZTogY29tcG9uZW50ID09PSBkZWZhdWx0Q29tcG9uZW50ID8gbnVsbCA6ICdyb3dncm91cCcsXG4gICAgICBvd25lclN0YXRlOiBvd25lclN0YXRlXG4gICAgfSwgb3RoZXIpKVxuICB9KTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVGFibGVGb290ZXIucHJvcFR5cGVzIC8qIHJlbW92ZS1wcm9wdHlwZXMgKi8gPSB7XG4gIC8vIOKUjOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgCBXYXJuaW5nIOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUkFxuICAvLyDilIIgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zLiDilIJcbiAgLy8g4pSCICAgIFRvIHVwZGF0ZSB0aGVtLCBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBgcG5wbSBwcm9wdHlwZXNgLiAgICAg4pSCXG4gIC8vIOKUlOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUmFxuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGNvbXBvbmVudCwgbm9ybWFsbHkgYFRhYmxlUm93YC5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBIVE1MIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBjb21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcbiAgLyoqXG4gICAqIFRoZSBzeXN0ZW0gcHJvcCB0aGF0IGFsbG93cyBkZWZpbmluZyBzeXN0ZW0gb3ZlcnJpZGVzIGFzIHdlbGwgYXMgYWRkaXRpb25hbCBDU1Mgc3R5bGVzLlxuICAgKi9cbiAgc3g6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuYm9vbF0pKSwgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IFRhYmxlRm9vdGVyOyIsImltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3Nlcyc7XG5pbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3MgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzcyc7XG5leHBvcnQgZnVuY3Rpb24gZ2V0VGFibGVIZWFkVXRpbGl0eUNsYXNzKHNsb3QpIHtcbiAgcmV0dXJuIGdlbmVyYXRlVXRpbGl0eUNsYXNzKCdNdWlUYWJsZUhlYWQnLCBzbG90KTtcbn1cbmNvbnN0IHRhYmxlSGVhZENsYXNzZXMgPSBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzKCdNdWlUYWJsZUhlYWQnLCBbJ3Jvb3QnXSk7XG5leHBvcnQgZGVmYXVsdCB0YWJsZUhlYWRDbGFzc2VzOyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImNsYXNzTmFtZVwiLCBcImNvbXBvbmVudFwiXTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCBjb21wb3NlQ2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2NvbXBvc2VDbGFzc2VzJztcbmltcG9ydCBUYWJsZWx2bDJDb250ZXh0IGZyb20gJy4uL1RhYmxlL1RhYmxlbHZsMkNvbnRleHQnO1xuaW1wb3J0IHsgdXNlRGVmYXVsdFByb3BzIH0gZnJvbSAnLi4vRGVmYXVsdFByb3BzUHJvdmlkZXInO1xuaW1wb3J0IHN0eWxlZCBmcm9tICcuLi9zdHlsZXMvc3R5bGVkJztcbmltcG9ydCB7IGdldFRhYmxlSGVhZFV0aWxpdHlDbGFzcyB9IGZyb20gJy4vdGFibGVIZWFkQ2xhc3Nlcyc7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuY29uc3QgdXNlVXRpbGl0eUNsYXNzZXMgPSBvd25lclN0YXRlID0+IHtcbiAgY29uc3Qge1xuICAgIGNsYXNzZXNcbiAgfSA9IG93bmVyU3RhdGU7XG4gIGNvbnN0IHNsb3RzID0ge1xuICAgIHJvb3Q6IFsncm9vdCddXG4gIH07XG4gIHJldHVybiBjb21wb3NlQ2xhc3NlcyhzbG90cywgZ2V0VGFibGVIZWFkVXRpbGl0eUNsYXNzLCBjbGFzc2VzKTtcbn07XG5jb25zdCBUYWJsZUhlYWRSb290ID0gc3R5bGVkKCd0aGVhZCcsIHtcbiAgbmFtZTogJ011aVRhYmxlSGVhZCcsXG4gIHNsb3Q6ICdSb290JyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiBzdHlsZXMucm9vdFxufSkoe1xuICBkaXNwbGF5OiAndGFibGUtaGVhZGVyLWdyb3VwJ1xufSk7XG5jb25zdCB0YWJsZWx2bDIgPSB7XG4gIHZhcmlhbnQ6ICdoZWFkJ1xufTtcbmNvbnN0IGRlZmF1bHRDb21wb25lbnQgPSAndGhlYWQnO1xuY29uc3QgVGFibGVIZWFkID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gVGFibGVIZWFkKGluUHJvcHMsIHJlZikge1xuICBjb25zdCBwcm9wcyA9IHVzZURlZmF1bHRQcm9wcyh7XG4gICAgcHJvcHM6IGluUHJvcHMsXG4gICAgbmFtZTogJ011aVRhYmxlSGVhZCdcbiAgfSk7XG4gIGNvbnN0IHtcbiAgICAgIGNsYXNzTmFtZSxcbiAgICAgIGNvbXBvbmVudCA9IGRlZmF1bHRDb21wb25lbnRcbiAgICB9ID0gcHJvcHMsXG4gICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkKTtcbiAgY29uc3Qgb3duZXJTdGF0ZSA9IF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgIGNvbXBvbmVudFxuICB9KTtcbiAgY29uc3QgY2xhc3NlcyA9IHVzZVV0aWxpdHlDbGFzc2VzKG93bmVyU3RhdGUpO1xuICByZXR1cm4gLyojX19QVVJFX18qL19qc3goVGFibGVsdmwyQ29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiB0YWJsZWx2bDIsXG4gICAgY2hpbGRyZW46IC8qI19fUFVSRV9fKi9fanN4KFRhYmxlSGVhZFJvb3QsIF9leHRlbmRzKHtcbiAgICAgIGFzOiBjb21wb25lbnQsXG4gICAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWUpLFxuICAgICAgcmVmOiByZWYsXG4gICAgICByb2xlOiBjb21wb25lbnQgPT09IGRlZmF1bHRDb21wb25lbnQgPyBudWxsIDogJ3Jvd2dyb3VwJyxcbiAgICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGVcbiAgICB9LCBvdGhlcikpXG4gIH0pO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBUYWJsZUhlYWQucHJvcFR5cGVzIC8qIHJlbW92ZS1wcm9wdHlwZXMgKi8gPSB7XG4gIC8vIOKUjOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgCBXYXJuaW5nIOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUkFxuICAvLyDilIIgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zLiDilIJcbiAgLy8g4pSCICAgIFRvIHVwZGF0ZSB0aGVtLCBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBgcG5wbSBwcm9wdHlwZXNgLiAgICAg4pSCXG4gIC8vIOKUlOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUmFxuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGNvbXBvbmVudCwgbm9ybWFsbHkgYFRhYmxlUm93YC5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBIVE1MIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBjb21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcbiAgLyoqXG4gICAqIFRoZSBzeXN0ZW0gcHJvcCB0aGF0IGFsbG93cyBkZWZpbmluZyBzeXN0ZW0gb3ZlcnJpZGVzIGFzIHdlbGwgYXMgYWRkaXRpb25hbCBDU1Mgc3R5bGVzLlxuICAgKi9cbiAgc3g6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuYm9vbF0pKSwgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IFRhYmxlSGVhZDsiLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBjcmVhdGVTdmdJY29uIGZyb20gJy4uLy4uL3V0aWxzL2NyZWF0ZVN2Z0ljb24nO1xuXG4vKipcbiAqIEBpZ25vcmUgLSBpbnRlcm5hbCBjb21wb25lbnQuXG4gKi9cbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5leHBvcnQgZGVmYXVsdCBjcmVhdGVTdmdJY29uKCAvKiNfX1BVUkVfXyovX2pzeChcInBhdGhcIiwge1xuICBkOiBcIk0xNS40MSAxNi4wOWwtNC41OC00LjU5IDQuNTgtNC41OUwxNCA1LjVsLTYgNiA2IDZ6XCJcbn0pLCAnS2V5Ym9hcmRBcnJvd0xlZnQnKTsiLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBjcmVhdGVTdmdJY29uIGZyb20gJy4uLy4uL3V0aWxzL2NyZWF0ZVN2Z0ljb24nO1xuXG4vKipcbiAqIEBpZ25vcmUgLSBpbnRlcm5hbCBjb21wb25lbnQuXG4gKi9cbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5leHBvcnQgZGVmYXVsdCBjcmVhdGVTdmdJY29uKCAvKiNfX1BVUkVfXyovX2pzeChcInBhdGhcIiwge1xuICBkOiBcIk04LjU5IDE2LjM0bDQuNTgtNC41OS00LjU4LTQuNTlMMTAgNS43NWw2IDYtNiA2elwiXG59KSwgJ0tleWJvYXJkQXJyb3dSaWdodCcpOyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImJhY2tJY29uQnV0dG9uUHJvcHNcIiwgXCJjb3VudFwiLCBcImRpc2FibGVkXCIsIFwiZ2V0SXRlbUFyaWFMYWJlbFwiLCBcIm5leHRJY29uQnV0dG9uUHJvcHNcIiwgXCJvblBhZ2VDaGFuZ2VcIiwgXCJwYWdlXCIsIFwicm93c1BlclBhZ2VcIiwgXCJzaG93Rmlyc3RCdXR0b25cIiwgXCJzaG93TGFzdEJ1dHRvblwiLCBcInNsb3RzXCIsIFwic2xvdFByb3BzXCJdO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IHVzZVJ0bCB9IGZyb20gJ0BtdWkvc3lzdGVtL1J0bFByb3ZpZGVyJztcbmltcG9ydCBLZXlib2FyZEFycm93TGVmdCBmcm9tICcuLi9pbnRlcm5hbC9zdmctaWNvbnMvS2V5Ym9hcmRBcnJvd0xlZnQnO1xuaW1wb3J0IEtleWJvYXJkQXJyb3dSaWdodCBmcm9tICcuLi9pbnRlcm5hbC9zdmctaWNvbnMvS2V5Ym9hcmRBcnJvd1JpZ2h0JztcbmltcG9ydCBJY29uQnV0dG9uIGZyb20gJy4uL0ljb25CdXR0b24nO1xuaW1wb3J0IExhc3RQYWdlSWNvbkRlZmF1bHQgZnJvbSAnLi4vaW50ZXJuYWwvc3ZnLWljb25zL0xhc3RQYWdlJztcbmltcG9ydCBGaXJzdFBhZ2VJY29uRGVmYXVsdCBmcm9tICcuLi9pbnRlcm5hbC9zdmctaWNvbnMvRmlyc3RQYWdlJztcblxuLyoqXG4gKiBAaWdub3JlIC0gaW50ZXJuYWwgY29tcG9uZW50LlxuICovXG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuaW1wb3J0IHsganN4cyBhcyBfanN4cyB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuY29uc3QgVGFibGVQYWdpbmF0aW9uQWN0aW9ucyA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIFRhYmxlUGFnaW5hdGlvbkFjdGlvbnMocHJvcHMsIHJlZikge1xuICB2YXIgX3Nsb3RzJGZpcnN0QnV0dG9uLCBfc2xvdHMkbGFzdEJ1dHRvbiwgX3Nsb3RzJG5leHRCdXR0b24sIF9zbG90cyRwcmV2aW91c0J1dHRvbiwgX3Nsb3RzJGZpcnN0QnV0dG9uSWNvLCBfc2xvdHMkbGFzdEJ1dHRvbkljb24sIF9zbG90cyRuZXh0QnV0dG9uSWNvbiwgX3Nsb3RzJHByZXZpb3VzQnV0dG9uMjtcbiAgY29uc3Qge1xuICAgICAgYmFja0ljb25CdXR0b25Qcm9wcyxcbiAgICAgIGNvdW50LFxuICAgICAgZGlzYWJsZWQgPSBmYWxzZSxcbiAgICAgIGdldEl0ZW1BcmlhTGFiZWwsXG4gICAgICBuZXh0SWNvbkJ1dHRvblByb3BzLFxuICAgICAgb25QYWdlQ2hhbmdlLFxuICAgICAgcGFnZSxcbiAgICAgIHJvd3NQZXJQYWdlLFxuICAgICAgc2hvd0ZpcnN0QnV0dG9uLFxuICAgICAgc2hvd0xhc3RCdXR0b24sXG4gICAgICBzbG90cyA9IHt9LFxuICAgICAgc2xvdFByb3BzID0ge31cbiAgICB9ID0gcHJvcHMsXG4gICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkKTtcbiAgY29uc3QgaXNSdGwgPSB1c2VSdGwoKTtcbiAgY29uc3QgaGFuZGxlRmlyc3RQYWdlQnV0dG9uQ2xpY2sgPSBldmVudCA9PiB7XG4gICAgb25QYWdlQ2hhbmdlKGV2ZW50LCAwKTtcbiAgfTtcbiAgY29uc3QgaGFuZGxlQmFja0J1dHRvbkNsaWNrID0gZXZlbnQgPT4ge1xuICAgIG9uUGFnZUNoYW5nZShldmVudCwgcGFnZSAtIDEpO1xuICB9O1xuICBjb25zdCBoYW5kbGVOZXh0QnV0dG9uQ2xpY2sgPSBldmVudCA9PiB7XG4gICAgb25QYWdlQ2hhbmdlKGV2ZW50LCBwYWdlICsgMSk7XG4gIH07XG4gIGNvbnN0IGhhbmRsZUxhc3RQYWdlQnV0dG9uQ2xpY2sgPSBldmVudCA9PiB7XG4gICAgb25QYWdlQ2hhbmdlKGV2ZW50LCBNYXRoLm1heCgwLCBNYXRoLmNlaWwoY291bnQgLyByb3dzUGVyUGFnZSkgLSAxKSk7XG4gIH07XG4gIGNvbnN0IEZpcnN0QnV0dG9uID0gKF9zbG90cyRmaXJzdEJ1dHRvbiA9IHNsb3RzLmZpcnN0QnV0dG9uKSAhPSBudWxsID8gX3Nsb3RzJGZpcnN0QnV0dG9uIDogSWNvbkJ1dHRvbjtcbiAgY29uc3QgTGFzdEJ1dHRvbiA9IChfc2xvdHMkbGFzdEJ1dHRvbiA9IHNsb3RzLmxhc3RCdXR0b24pICE9IG51bGwgPyBfc2xvdHMkbGFzdEJ1dHRvbiA6IEljb25CdXR0b247XG4gIGNvbnN0IE5leHRCdXR0b24gPSAoX3Nsb3RzJG5leHRCdXR0b24gPSBzbG90cy5uZXh0QnV0dG9uKSAhPSBudWxsID8gX3Nsb3RzJG5leHRCdXR0b24gOiBJY29uQnV0dG9uO1xuICBjb25zdCBQcmV2aW91c0J1dHRvbiA9IChfc2xvdHMkcHJldmlvdXNCdXR0b24gPSBzbG90cy5wcmV2aW91c0J1dHRvbikgIT0gbnVsbCA/IF9zbG90cyRwcmV2aW91c0J1dHRvbiA6IEljb25CdXR0b247XG4gIGNvbnN0IEZpcnN0QnV0dG9uSWNvbiA9IChfc2xvdHMkZmlyc3RCdXR0b25JY28gPSBzbG90cy5maXJzdEJ1dHRvbkljb24pICE9IG51bGwgPyBfc2xvdHMkZmlyc3RCdXR0b25JY28gOiBGaXJzdFBhZ2VJY29uRGVmYXVsdDtcbiAgY29uc3QgTGFzdEJ1dHRvbkljb24gPSAoX3Nsb3RzJGxhc3RCdXR0b25JY29uID0gc2xvdHMubGFzdEJ1dHRvbkljb24pICE9IG51bGwgPyBfc2xvdHMkbGFzdEJ1dHRvbkljb24gOiBMYXN0UGFnZUljb25EZWZhdWx0O1xuICBjb25zdCBOZXh0QnV0dG9uSWNvbiA9IChfc2xvdHMkbmV4dEJ1dHRvbkljb24gPSBzbG90cy5uZXh0QnV0dG9uSWNvbikgIT0gbnVsbCA/IF9zbG90cyRuZXh0QnV0dG9uSWNvbiA6IEtleWJvYXJkQXJyb3dSaWdodDtcbiAgY29uc3QgUHJldmlvdXNCdXR0b25JY29uID0gKF9zbG90cyRwcmV2aW91c0J1dHRvbjIgPSBzbG90cy5wcmV2aW91c0J1dHRvbkljb24pICE9IG51bGwgPyBfc2xvdHMkcHJldmlvdXNCdXR0b24yIDogS2V5Ym9hcmRBcnJvd0xlZnQ7XG4gIGNvbnN0IEZpcnN0QnV0dG9uU2xvdCA9IGlzUnRsID8gTGFzdEJ1dHRvbiA6IEZpcnN0QnV0dG9uO1xuICBjb25zdCBQcmV2aW91c0J1dHRvblNsb3QgPSBpc1J0bCA/IE5leHRCdXR0b24gOiBQcmV2aW91c0J1dHRvbjtcbiAgY29uc3QgTmV4dEJ1dHRvblNsb3QgPSBpc1J0bCA/IFByZXZpb3VzQnV0dG9uIDogTmV4dEJ1dHRvbjtcbiAgY29uc3QgTGFzdEJ1dHRvblNsb3QgPSBpc1J0bCA/IEZpcnN0QnV0dG9uIDogTGFzdEJ1dHRvbjtcbiAgY29uc3QgZmlyc3RCdXR0b25TbG90UHJvcHMgPSBpc1J0bCA/IHNsb3RQcm9wcy5sYXN0QnV0dG9uIDogc2xvdFByb3BzLmZpcnN0QnV0dG9uO1xuICBjb25zdCBwcmV2aW91c0J1dHRvblNsb3RQcm9wcyA9IGlzUnRsID8gc2xvdFByb3BzLm5leHRCdXR0b24gOiBzbG90UHJvcHMucHJldmlvdXNCdXR0b247XG4gIGNvbnN0IG5leHRCdXR0b25TbG90UHJvcHMgPSBpc1J0bCA/IHNsb3RQcm9wcy5wcmV2aW91c0J1dHRvbiA6IHNsb3RQcm9wcy5uZXh0QnV0dG9uO1xuICBjb25zdCBsYXN0QnV0dG9uU2xvdFByb3BzID0gaXNSdGwgPyBzbG90UHJvcHMuZmlyc3RCdXR0b24gOiBzbG90UHJvcHMubGFzdEJ1dHRvbjtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4cyhcImRpdlwiLCBfZXh0ZW5kcyh7XG4gICAgcmVmOiByZWZcbiAgfSwgb3RoZXIsIHtcbiAgICBjaGlsZHJlbjogW3Nob3dGaXJzdEJ1dHRvbiAmJiAvKiNfX1BVUkVfXyovX2pzeChGaXJzdEJ1dHRvblNsb3QsIF9leHRlbmRzKHtcbiAgICAgIG9uQ2xpY2s6IGhhbmRsZUZpcnN0UGFnZUJ1dHRvbkNsaWNrLFxuICAgICAgZGlzYWJsZWQ6IGRpc2FibGVkIHx8IHBhZ2UgPT09IDAsXG4gICAgICBcImFyaWEtbGFiZWxcIjogZ2V0SXRlbUFyaWFMYWJlbCgnZmlyc3QnLCBwYWdlKSxcbiAgICAgIHRpdGxlOiBnZXRJdGVtQXJpYUxhYmVsKCdmaXJzdCcsIHBhZ2UpXG4gICAgfSwgZmlyc3RCdXR0b25TbG90UHJvcHMsIHtcbiAgICAgIGNoaWxkcmVuOiBpc1J0bCA/IC8qI19fUFVSRV9fKi9fanN4KExhc3RCdXR0b25JY29uLCBfZXh0ZW5kcyh7fSwgc2xvdFByb3BzLmxhc3RCdXR0b25JY29uKSkgOiAvKiNfX1BVUkVfXyovX2pzeChGaXJzdEJ1dHRvbkljb24sIF9leHRlbmRzKHt9LCBzbG90UHJvcHMuZmlyc3RCdXR0b25JY29uKSlcbiAgICB9KSksIC8qI19fUFVSRV9fKi9fanN4KFByZXZpb3VzQnV0dG9uU2xvdCwgX2V4dGVuZHMoe1xuICAgICAgb25DbGljazogaGFuZGxlQmFja0J1dHRvbkNsaWNrLFxuICAgICAgZGlzYWJsZWQ6IGRpc2FibGVkIHx8IHBhZ2UgPT09IDAsXG4gICAgICBjb2xvcjogXCJpbmhlcml0XCIsXG4gICAgICBcImFyaWEtbGFiZWxcIjogZ2V0SXRlbUFyaWFMYWJlbCgncHJldmlvdXMnLCBwYWdlKSxcbiAgICAgIHRpdGxlOiBnZXRJdGVtQXJpYUxhYmVsKCdwcmV2aW91cycsIHBhZ2UpXG4gICAgfSwgcHJldmlvdXNCdXR0b25TbG90UHJvcHMgIT0gbnVsbCA/IHByZXZpb3VzQnV0dG9uU2xvdFByb3BzIDogYmFja0ljb25CdXR0b25Qcm9wcywge1xuICAgICAgY2hpbGRyZW46IGlzUnRsID8gLyojX19QVVJFX18qL19qc3goTmV4dEJ1dHRvbkljb24sIF9leHRlbmRzKHt9LCBzbG90UHJvcHMubmV4dEJ1dHRvbkljb24pKSA6IC8qI19fUFVSRV9fKi9fanN4KFByZXZpb3VzQnV0dG9uSWNvbiwgX2V4dGVuZHMoe30sIHNsb3RQcm9wcy5wcmV2aW91c0J1dHRvbkljb24pKVxuICAgIH0pKSwgLyojX19QVVJFX18qL19qc3goTmV4dEJ1dHRvblNsb3QsIF9leHRlbmRzKHtcbiAgICAgIG9uQ2xpY2s6IGhhbmRsZU5leHRCdXR0b25DbGljayxcbiAgICAgIGRpc2FibGVkOiBkaXNhYmxlZCB8fCAoY291bnQgIT09IC0xID8gcGFnZSA+PSBNYXRoLmNlaWwoY291bnQgLyByb3dzUGVyUGFnZSkgLSAxIDogZmFsc2UpLFxuICAgICAgY29sb3I6IFwiaW5oZXJpdFwiLFxuICAgICAgXCJhcmlhLWxhYmVsXCI6IGdldEl0ZW1BcmlhTGFiZWwoJ25leHQnLCBwYWdlKSxcbiAgICAgIHRpdGxlOiBnZXRJdGVtQXJpYUxhYmVsKCduZXh0JywgcGFnZSlcbiAgICB9LCBuZXh0QnV0dG9uU2xvdFByb3BzICE9IG51bGwgPyBuZXh0QnV0dG9uU2xvdFByb3BzIDogbmV4dEljb25CdXR0b25Qcm9wcywge1xuICAgICAgY2hpbGRyZW46IGlzUnRsID8gLyojX19QVVJFX18qL19qc3goUHJldmlvdXNCdXR0b25JY29uLCBfZXh0ZW5kcyh7fSwgc2xvdFByb3BzLnByZXZpb3VzQnV0dG9uSWNvbikpIDogLyojX19QVVJFX18qL19qc3goTmV4dEJ1dHRvbkljb24sIF9leHRlbmRzKHt9LCBzbG90UHJvcHMubmV4dEJ1dHRvbkljb24pKVxuICAgIH0pKSwgc2hvd0xhc3RCdXR0b24gJiYgLyojX19QVVJFX18qL19qc3goTGFzdEJ1dHRvblNsb3QsIF9leHRlbmRzKHtcbiAgICAgIG9uQ2xpY2s6IGhhbmRsZUxhc3RQYWdlQnV0dG9uQ2xpY2ssXG4gICAgICBkaXNhYmxlZDogZGlzYWJsZWQgfHwgcGFnZSA+PSBNYXRoLmNlaWwoY291bnQgLyByb3dzUGVyUGFnZSkgLSAxLFxuICAgICAgXCJhcmlhLWxhYmVsXCI6IGdldEl0ZW1BcmlhTGFiZWwoJ2xhc3QnLCBwYWdlKSxcbiAgICAgIHRpdGxlOiBnZXRJdGVtQXJpYUxhYmVsKCdsYXN0JywgcGFnZSlcbiAgICB9LCBsYXN0QnV0dG9uU2xvdFByb3BzLCB7XG4gICAgICBjaGlsZHJlbjogaXNSdGwgPyAvKiNfX1BVUkVfXyovX2pzeChGaXJzdEJ1dHRvbkljb24sIF9leHRlbmRzKHt9LCBzbG90UHJvcHMuZmlyc3RCdXR0b25JY29uKSkgOiAvKiNfX1BVUkVfXyovX2pzeChMYXN0QnV0dG9uSWNvbiwgX2V4dGVuZHMoe30sIHNsb3RQcm9wcy5sYXN0QnV0dG9uSWNvbikpXG4gICAgfSkpXVxuICB9KSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFRhYmxlUGFnaW5hdGlvbkFjdGlvbnMucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogUHJvcHMgYXBwbGllZCB0byB0aGUgYmFjayBhcnJvdyBbYEljb25CdXR0b25gXSgvbWF0ZXJpYWwtdWkvYXBpL2ljb24tYnV0dG9uLykgZWxlbWVudC5cbiAgICovXG4gIGJhY2tJY29uQnV0dG9uUHJvcHM6IFByb3BUeXBlcy5vYmplY3QsXG4gIC8qKlxuICAgKiBUaGUgdG90YWwgbnVtYmVyIG9mIHJvd3MuXG4gICAqL1xuICBjb3VudDogUHJvcFR5cGVzLm51bWJlci5pc1JlcXVpcmVkLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgY29tcG9uZW50IGlzIGRpc2FibGVkLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZGlzYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogQWNjZXB0cyBhIGZ1bmN0aW9uIHdoaWNoIHJldHVybnMgYSBzdHJpbmcgdmFsdWUgdGhhdCBwcm92aWRlcyBhIHVzZXItZnJpZW5kbHkgbmFtZSBmb3IgdGhlIGN1cnJlbnQgcGFnZS5cbiAgICpcbiAgICogRm9yIGxvY2FsaXphdGlvbiBwdXJwb3NlcywgeW91IGNhbiB1c2UgdGhlIHByb3ZpZGVkIFt0cmFuc2xhdGlvbnNdKC9tYXRlcmlhbC11aS9ndWlkZXMvbG9jYWxpemF0aW9uLykuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIFRoZSBsaW5rIG9yIGJ1dHRvbiB0eXBlIHRvIGZvcm1hdCAoJ3BhZ2UnIHwgJ2ZpcnN0JyB8ICdsYXN0JyB8ICduZXh0JyB8ICdwcmV2aW91cycpLiBEZWZhdWx0cyB0byAncGFnZScuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBwYWdlIFRoZSBwYWdlIG51bWJlciB0byBmb3JtYXQuXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAqL1xuICBnZXRJdGVtQXJpYUxhYmVsOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAvKipcbiAgICogUHJvcHMgYXBwbGllZCB0byB0aGUgbmV4dCBhcnJvdyBbYEljb25CdXR0b25gXSgvbWF0ZXJpYWwtdWkvYXBpL2ljb24tYnV0dG9uLykgZWxlbWVudC5cbiAgICovXG4gIG5leHRJY29uQnV0dG9uUHJvcHM6IFByb3BUeXBlcy5vYmplY3QsXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSBwYWdlIGlzIGNoYW5nZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBldmVudCBUaGUgZXZlbnQgc291cmNlIG9mIHRoZSBjYWxsYmFjay5cbiAgICogQHBhcmFtIHtudW1iZXJ9IHBhZ2UgVGhlIHBhZ2Ugc2VsZWN0ZWQuXG4gICAqL1xuICBvblBhZ2VDaGFuZ2U6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIC8qKlxuICAgKiBUaGUgemVyby1iYXNlZCBpbmRleCBvZiB0aGUgY3VycmVudCBwYWdlLlxuICAgKi9cbiAgcGFnZTogUHJvcFR5cGVzLm51bWJlci5pc1JlcXVpcmVkLFxuICAvKipcbiAgICogVGhlIG51bWJlciBvZiByb3dzIHBlciBwYWdlLlxuICAgKi9cbiAgcm93c1BlclBhZ2U6IFByb3BUeXBlcy5udW1iZXIuaXNSZXF1aXJlZCxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgc2hvdyB0aGUgZmlyc3QtcGFnZSBidXR0b24uXG4gICAqL1xuICBzaG93Rmlyc3RCdXR0b246IFByb3BUeXBlcy5ib29sLmlzUmVxdWlyZWQsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHNob3cgdGhlIGxhc3QtcGFnZSBidXR0b24uXG4gICAqL1xuICBzaG93TGFzdEJ1dHRvbjogUHJvcFR5cGVzLmJvb2wuaXNSZXF1aXJlZCxcbiAgLyoqXG4gICAqIFRoZSBwcm9wcyB1c2VkIGZvciBlYWNoIHNsb3QgaW5zaWRlIHRoZSBUYWJsZVBhZ2luYXRpb25BY3Rpb25zLlxuICAgKiBAZGVmYXVsdCB7fVxuICAgKi9cbiAgc2xvdFByb3BzOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGZpcnN0QnV0dG9uOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIGZpcnN0QnV0dG9uSWNvbjogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBsYXN0QnV0dG9uOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIGxhc3RCdXR0b25JY29uOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIG5leHRCdXR0b246IFByb3BUeXBlcy5vYmplY3QsXG4gICAgbmV4dEJ1dHRvbkljb246IFByb3BUeXBlcy5vYmplY3QsXG4gICAgcHJldmlvdXNCdXR0b246IFByb3BUeXBlcy5vYmplY3QsXG4gICAgcHJldmlvdXNCdXR0b25JY29uOiBQcm9wVHlwZXMub2JqZWN0XG4gIH0pLFxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudHMgdXNlZCBmb3IgZWFjaCBzbG90IGluc2lkZSB0aGUgVGFibGVQYWdpbmF0aW9uQWN0aW9ucy5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIEhUTUwgZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICogQGRlZmF1bHQge31cbiAgICovXG4gIHNsb3RzOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGZpcnN0QnV0dG9uOiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG4gICAgZmlyc3RCdXR0b25JY29uOiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG4gICAgbGFzdEJ1dHRvbjogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuICAgIGxhc3RCdXR0b25JY29uOiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG4gICAgbmV4dEJ1dHRvbjogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuICAgIG5leHRCdXR0b25JY29uOiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG4gICAgcHJldmlvdXNCdXR0b246IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcbiAgICBwcmV2aW91c0J1dHRvbkljb246IFByb3BUeXBlcy5lbGVtZW50VHlwZVxuICB9KVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IFRhYmxlUGFnaW5hdGlvbkFjdGlvbnM7IiwiaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzc2VzJztcbmltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzJztcbmV4cG9ydCBmdW5jdGlvbiBnZXRUYWJsZVBhZ2luYXRpb25VdGlsaXR5Q2xhc3Moc2xvdCkge1xuICByZXR1cm4gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoJ011aVRhYmxlUGFnaW5hdGlvbicsIHNsb3QpO1xufVxuY29uc3QgdGFibGVQYWdpbmF0aW9uQ2xhc3NlcyA9IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMoJ011aVRhYmxlUGFnaW5hdGlvbicsIFsncm9vdCcsICd0b29sYmFyJywgJ3NwYWNlcicsICdzZWxlY3RMYWJlbCcsICdzZWxlY3RSb290JywgJ3NlbGVjdCcsICdzZWxlY3RJY29uJywgJ2lucHV0JywgJ21lbnVJdGVtJywgJ2Rpc3BsYXllZFJvd3MnLCAnYWN0aW9ucyddKTtcbmV4cG9ydCBkZWZhdWx0IHRhYmxlUGFnaW5hdGlvbkNsYXNzZXM7IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xudmFyIF9JbnB1dEJhc2U7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJBY3Rpb25zQ29tcG9uZW50XCIsIFwiYmFja0ljb25CdXR0b25Qcm9wc1wiLCBcImNsYXNzTmFtZVwiLCBcImNvbFNwYW5cIiwgXCJjb21wb25lbnRcIiwgXCJjb3VudFwiLCBcImRpc2FibGVkXCIsIFwiZ2V0SXRlbUFyaWFMYWJlbFwiLCBcImxhYmVsRGlzcGxheWVkUm93c1wiLCBcImxhYmVsUm93c1BlclBhZ2VcIiwgXCJuZXh0SWNvbkJ1dHRvblByb3BzXCIsIFwib25QYWdlQ2hhbmdlXCIsIFwib25Sb3dzUGVyUGFnZUNoYW5nZVwiLCBcInBhZ2VcIiwgXCJyb3dzUGVyUGFnZVwiLCBcInJvd3NQZXJQYWdlT3B0aW9uc1wiLCBcIlNlbGVjdFByb3BzXCIsIFwic2hvd0ZpcnN0QnV0dG9uXCIsIFwic2hvd0xhc3RCdXR0b25cIiwgXCJzbG90UHJvcHNcIiwgXCJzbG90c1wiXTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCBpbnRlZ2VyUHJvcFR5cGUgZnJvbSAnQG11aS91dGlscy9pbnRlZ2VyUHJvcFR5cGUnO1xuaW1wb3J0IGNoYWluUHJvcFR5cGVzIGZyb20gJ0BtdWkvdXRpbHMvY2hhaW5Qcm9wVHlwZXMnO1xuaW1wb3J0IGNvbXBvc2VDbGFzc2VzIGZyb20gJ0BtdWkvdXRpbHMvY29tcG9zZUNsYXNzZXMnO1xuaW1wb3J0IGlzSG9zdENvbXBvbmVudCBmcm9tICdAbXVpL3V0aWxzL2lzSG9zdENvbXBvbmVudCc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJy4uL3N0eWxlcy9zdHlsZWQnO1xuaW1wb3J0IHsgdXNlRGVmYXVsdFByb3BzIH0gZnJvbSAnLi4vRGVmYXVsdFByb3BzUHJvdmlkZXInO1xuaW1wb3J0IElucHV0QmFzZSBmcm9tICcuLi9JbnB1dEJhc2UnO1xuaW1wb3J0IE1lbnVJdGVtIGZyb20gJy4uL01lbnVJdGVtJztcbmltcG9ydCBTZWxlY3QgZnJvbSAnLi4vU2VsZWN0JztcbmltcG9ydCBUYWJsZUNlbGwgZnJvbSAnLi4vVGFibGVDZWxsJztcbmltcG9ydCBUb29sYmFyIGZyb20gJy4uL1Rvb2xiYXInO1xuaW1wb3J0IFRhYmxlUGFnaW5hdGlvbkFjdGlvbnMgZnJvbSAnLi9UYWJsZVBhZ2luYXRpb25BY3Rpb25zJztcbmltcG9ydCB1c2VJZCBmcm9tICcuLi91dGlscy91c2VJZCc7XG5pbXBvcnQgdGFibGVQYWdpbmF0aW9uQ2xhc3NlcywgeyBnZXRUYWJsZVBhZ2luYXRpb25VdGlsaXR5Q2xhc3MgfSBmcm9tICcuL3RhYmxlUGFnaW5hdGlvbkNsYXNzZXMnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmltcG9ydCB7IGNyZWF0ZUVsZW1lbnQgYXMgX2NyZWF0ZUVsZW1lbnQgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IGpzeHMgYXMgX2pzeHMgfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmNvbnN0IFRhYmxlUGFnaW5hdGlvblJvb3QgPSBzdHlsZWQoVGFibGVDZWxsLCB7XG4gIG5hbWU6ICdNdWlUYWJsZVBhZ2luYXRpb24nLFxuICBzbG90OiAnUm9vdCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4gc3R5bGVzLnJvb3Rcbn0pKCh7XG4gIHRoZW1lXG59KSA9PiAoe1xuICBvdmVyZmxvdzogJ2F1dG8nLFxuICBjb2xvcjogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGUudGV4dC5wcmltYXJ5LFxuICBmb250U2l6ZTogdGhlbWUudHlwb2dyYXBoeS5weFRvUmVtKDE0KSxcbiAgLy8gSW5jcmVhc2UgdGhlIHNwZWNpZmljaXR5IHRvIG92ZXJyaWRlIFRhYmxlQ2VsbC5cbiAgJyY6bGFzdC1jaGlsZCc6IHtcbiAgICBwYWRkaW5nOiAwXG4gIH1cbn0pKTtcbmNvbnN0IFRhYmxlUGFnaW5hdGlvblRvb2xiYXIgPSBzdHlsZWQoVG9vbGJhciwge1xuICBuYW1lOiAnTXVpVGFibGVQYWdpbmF0aW9uJyxcbiAgc2xvdDogJ1Rvb2xiYXInLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IF9leHRlbmRzKHtcbiAgICBbYCYgLiR7dGFibGVQYWdpbmF0aW9uQ2xhc3Nlcy5hY3Rpb25zfWBdOiBzdHlsZXMuYWN0aW9uc1xuICB9LCBzdHlsZXMudG9vbGJhcilcbn0pKCh7XG4gIHRoZW1lXG59KSA9PiAoe1xuICBtaW5IZWlnaHQ6IDUyLFxuICBwYWRkaW5nUmlnaHQ6IDIsXG4gIFtgJHt0aGVtZS5icmVha3BvaW50cy51cCgneHMnKX0gYW5kIChvcmllbnRhdGlvbjogbGFuZHNjYXBlKWBdOiB7XG4gICAgbWluSGVpZ2h0OiA1MlxuICB9LFxuICBbdGhlbWUuYnJlYWtwb2ludHMudXAoJ3NtJyldOiB7XG4gICAgbWluSGVpZ2h0OiA1MixcbiAgICBwYWRkaW5nUmlnaHQ6IDJcbiAgfSxcbiAgW2AmIC4ke3RhYmxlUGFnaW5hdGlvbkNsYXNzZXMuYWN0aW9uc31gXToge1xuICAgIGZsZXhTaHJpbms6IDAsXG4gICAgbWFyZ2luTGVmdDogMjBcbiAgfVxufSkpO1xuY29uc3QgVGFibGVQYWdpbmF0aW9uU3BhY2VyID0gc3R5bGVkKCdkaXYnLCB7XG4gIG5hbWU6ICdNdWlUYWJsZVBhZ2luYXRpb24nLFxuICBzbG90OiAnU3BhY2VyJyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiBzdHlsZXMuc3BhY2VyXG59KSh7XG4gIGZsZXg6ICcxIDEgMTAwJSdcbn0pO1xuY29uc3QgVGFibGVQYWdpbmF0aW9uU2VsZWN0TGFiZWwgPSBzdHlsZWQoJ3AnLCB7XG4gIG5hbWU6ICdNdWlUYWJsZVBhZ2luYXRpb24nLFxuICBzbG90OiAnU2VsZWN0TGFiZWwnLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHN0eWxlcy5zZWxlY3RMYWJlbFxufSkoKHtcbiAgdGhlbWVcbn0pID0+IF9leHRlbmRzKHt9LCB0aGVtZS50eXBvZ3JhcGh5LmJvZHkyLCB7XG4gIGZsZXhTaHJpbms6IDBcbn0pKTtcbmNvbnN0IFRhYmxlUGFnaW5hdGlvblNlbGVjdCA9IHN0eWxlZChTZWxlY3QsIHtcbiAgbmFtZTogJ011aVRhYmxlUGFnaW5hdGlvbicsXG4gIHNsb3Q6ICdTZWxlY3QnLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IF9leHRlbmRzKHtcbiAgICBbYCYgLiR7dGFibGVQYWdpbmF0aW9uQ2xhc3Nlcy5zZWxlY3RJY29ufWBdOiBzdHlsZXMuc2VsZWN0SWNvbixcbiAgICBbYCYgLiR7dGFibGVQYWdpbmF0aW9uQ2xhc3Nlcy5zZWxlY3R9YF06IHN0eWxlcy5zZWxlY3RcbiAgfSwgc3R5bGVzLmlucHV0LCBzdHlsZXMuc2VsZWN0Um9vdClcbn0pKHtcbiAgY29sb3I6ICdpbmhlcml0JyxcbiAgZm9udFNpemU6ICdpbmhlcml0JyxcbiAgZmxleFNocmluazogMCxcbiAgbWFyZ2luUmlnaHQ6IDMyLFxuICBtYXJnaW5MZWZ0OiA4LFxuICBbYCYgLiR7dGFibGVQYWdpbmF0aW9uQ2xhc3Nlcy5zZWxlY3R9YF06IHtcbiAgICBwYWRkaW5nTGVmdDogOCxcbiAgICBwYWRkaW5nUmlnaHQ6IDI0LFxuICAgIHRleHRBbGlnbjogJ3JpZ2h0JyxcbiAgICB0ZXh0QWxpZ25MYXN0OiAncmlnaHQnIC8vIEFsaWduIDxzZWxlY3Q+IG9uIENocm9tZS5cbiAgfVxufSk7XG5jb25zdCBUYWJsZVBhZ2luYXRpb25NZW51SXRlbSA9IHN0eWxlZChNZW51SXRlbSwge1xuICBuYW1lOiAnTXVpVGFibGVQYWdpbmF0aW9uJyxcbiAgc2xvdDogJ01lbnVJdGVtJyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiBzdHlsZXMubWVudUl0ZW1cbn0pKHt9KTtcbmNvbnN0IFRhYmxlUGFnaW5hdGlvbkRpc3BsYXllZFJvd3MgPSBzdHlsZWQoJ3AnLCB7XG4gIG5hbWU6ICdNdWlUYWJsZVBhZ2luYXRpb24nLFxuICBzbG90OiAnRGlzcGxheWVkUm93cycsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4gc3R5bGVzLmRpc3BsYXllZFJvd3Ncbn0pKCh7XG4gIHRoZW1lXG59KSA9PiBfZXh0ZW5kcyh7fSwgdGhlbWUudHlwb2dyYXBoeS5ib2R5Miwge1xuICBmbGV4U2hyaW5rOiAwXG59KSk7XG5mdW5jdGlvbiBkZWZhdWx0TGFiZWxEaXNwbGF5ZWRSb3dzKHtcbiAgZnJvbSxcbiAgdG8sXG4gIGNvdW50XG59KSB7XG4gIHJldHVybiBgJHtmcm9tfeKAkyR7dG99IG9mICR7Y291bnQgIT09IC0xID8gY291bnQgOiBgbW9yZSB0aGFuICR7dG99YH1gO1xufVxuZnVuY3Rpb24gZGVmYXVsdEdldEFyaWFMYWJlbCh0eXBlKSB7XG4gIHJldHVybiBgR28gdG8gJHt0eXBlfSBwYWdlYDtcbn1cbmNvbnN0IHVzZVV0aWxpdHlDbGFzc2VzID0gb3duZXJTdGF0ZSA9PiB7XG4gIGNvbnN0IHtcbiAgICBjbGFzc2VzXG4gIH0gPSBvd25lclN0YXRlO1xuICBjb25zdCBzbG90cyA9IHtcbiAgICByb290OiBbJ3Jvb3QnXSxcbiAgICB0b29sYmFyOiBbJ3Rvb2xiYXInXSxcbiAgICBzcGFjZXI6IFsnc3BhY2VyJ10sXG4gICAgc2VsZWN0TGFiZWw6IFsnc2VsZWN0TGFiZWwnXSxcbiAgICBzZWxlY3Q6IFsnc2VsZWN0J10sXG4gICAgaW5wdXQ6IFsnaW5wdXQnXSxcbiAgICBzZWxlY3RJY29uOiBbJ3NlbGVjdEljb24nXSxcbiAgICBtZW51SXRlbTogWydtZW51SXRlbSddLFxuICAgIGRpc3BsYXllZFJvd3M6IFsnZGlzcGxheWVkUm93cyddLFxuICAgIGFjdGlvbnM6IFsnYWN0aW9ucyddXG4gIH07XG4gIHJldHVybiBjb21wb3NlQ2xhc3NlcyhzbG90cywgZ2V0VGFibGVQYWdpbmF0aW9uVXRpbGl0eUNsYXNzLCBjbGFzc2VzKTtcbn07XG5cbi8qKlxuICogQSBgVGFibGVDZWxsYCBiYXNlZCBjb21wb25lbnQgZm9yIHBsYWNpbmcgaW5zaWRlIGBUYWJsZUZvb3RlcmAgZm9yIHBhZ2luYXRpb24uXG4gKi9cbmNvbnN0IFRhYmxlUGFnaW5hdGlvbiA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIFRhYmxlUGFnaW5hdGlvbihpblByb3BzLCByZWYpIHtcbiAgdmFyIF9zbG90UHJvcHMkc2VsZWN0O1xuICBjb25zdCBwcm9wcyA9IHVzZURlZmF1bHRQcm9wcyh7XG4gICAgcHJvcHM6IGluUHJvcHMsXG4gICAgbmFtZTogJ011aVRhYmxlUGFnaW5hdGlvbidcbiAgfSk7XG4gIGNvbnN0IHtcbiAgICAgIEFjdGlvbnNDb21wb25lbnQgPSBUYWJsZVBhZ2luYXRpb25BY3Rpb25zLFxuICAgICAgYmFja0ljb25CdXR0b25Qcm9wcyxcbiAgICAgIGNsYXNzTmFtZSxcbiAgICAgIGNvbFNwYW46IGNvbFNwYW5Qcm9wLFxuICAgICAgY29tcG9uZW50ID0gVGFibGVDZWxsLFxuICAgICAgY291bnQsXG4gICAgICBkaXNhYmxlZCA9IGZhbHNlLFxuICAgICAgZ2V0SXRlbUFyaWFMYWJlbCA9IGRlZmF1bHRHZXRBcmlhTGFiZWwsXG4gICAgICBsYWJlbERpc3BsYXllZFJvd3MgPSBkZWZhdWx0TGFiZWxEaXNwbGF5ZWRSb3dzLFxuICAgICAgbGFiZWxSb3dzUGVyUGFnZSA9ICdSb3dzIHBlciBwYWdlOicsXG4gICAgICBuZXh0SWNvbkJ1dHRvblByb3BzLFxuICAgICAgb25QYWdlQ2hhbmdlLFxuICAgICAgb25Sb3dzUGVyUGFnZUNoYW5nZSxcbiAgICAgIHBhZ2UsXG4gICAgICByb3dzUGVyUGFnZSxcbiAgICAgIHJvd3NQZXJQYWdlT3B0aW9ucyA9IFsxMCwgMjUsIDUwLCAxMDBdLFxuICAgICAgU2VsZWN0UHJvcHMgPSB7fSxcbiAgICAgIHNob3dGaXJzdEJ1dHRvbiA9IGZhbHNlLFxuICAgICAgc2hvd0xhc3RCdXR0b24gPSBmYWxzZSxcbiAgICAgIHNsb3RQcm9wcyA9IHt9LFxuICAgICAgc2xvdHMgPSB7fVxuICAgIH0gPSBwcm9wcyxcbiAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQpO1xuICBjb25zdCBvd25lclN0YXRlID0gcHJvcHM7XG4gIGNvbnN0IGNsYXNzZXMgPSB1c2VVdGlsaXR5Q2xhc3Nlcyhvd25lclN0YXRlKTtcbiAgY29uc3Qgc2VsZWN0UHJvcHMgPSAoX3Nsb3RQcm9wcyRzZWxlY3QgPSBzbG90UHJvcHMgPT0gbnVsbCA/IHZvaWQgMCA6IHNsb3RQcm9wcy5zZWxlY3QpICE9IG51bGwgPyBfc2xvdFByb3BzJHNlbGVjdCA6IFNlbGVjdFByb3BzO1xuICBjb25zdCBNZW51SXRlbUNvbXBvbmVudCA9IHNlbGVjdFByb3BzLm5hdGl2ZSA/ICdvcHRpb24nIDogVGFibGVQYWdpbmF0aW9uTWVudUl0ZW07XG4gIGxldCBjb2xTcGFuO1xuICBpZiAoY29tcG9uZW50ID09PSBUYWJsZUNlbGwgfHwgY29tcG9uZW50ID09PSAndGQnKSB7XG4gICAgY29sU3BhbiA9IGNvbFNwYW5Qcm9wIHx8IDEwMDA7IC8vIGNvbC1zcGFuIG92ZXIgZXZlcnl0aGluZ1xuICB9XG4gIGNvbnN0IHNlbGVjdElkID0gdXNlSWQoc2VsZWN0UHJvcHMuaWQpO1xuICBjb25zdCBsYWJlbElkID0gdXNlSWQoc2VsZWN0UHJvcHMubGFiZWxJZCk7XG4gIGNvbnN0IGdldExhYmVsRGlzcGxheWVkUm93c1RvID0gKCkgPT4ge1xuICAgIGlmIChjb3VudCA9PT0gLTEpIHtcbiAgICAgIHJldHVybiAocGFnZSArIDEpICogcm93c1BlclBhZ2U7XG4gICAgfVxuICAgIHJldHVybiByb3dzUGVyUGFnZSA9PT0gLTEgPyBjb3VudCA6IE1hdGgubWluKGNvdW50LCAocGFnZSArIDEpICogcm93c1BlclBhZ2UpO1xuICB9O1xuICByZXR1cm4gLyojX19QVVJFX18qL19qc3goVGFibGVQYWdpbmF0aW9uUm9vdCwgX2V4dGVuZHMoe1xuICAgIGNvbFNwYW46IGNvbFNwYW4sXG4gICAgcmVmOiByZWYsXG4gICAgYXM6IGNvbXBvbmVudCxcbiAgICBvd25lclN0YXRlOiBvd25lclN0YXRlLFxuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSlcbiAgfSwgb3RoZXIsIHtcbiAgICBjaGlsZHJlbjogLyojX19QVVJFX18qL19qc3hzKFRhYmxlUGFnaW5hdGlvblRvb2xiYXIsIHtcbiAgICAgIGNsYXNzTmFtZTogY2xhc3Nlcy50b29sYmFyLFxuICAgICAgY2hpbGRyZW46IFsvKiNfX1BVUkVfXyovX2pzeChUYWJsZVBhZ2luYXRpb25TcGFjZXIsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBjbGFzc2VzLnNwYWNlclxuICAgICAgfSksIHJvd3NQZXJQYWdlT3B0aW9ucy5sZW5ndGggPiAxICYmIC8qI19fUFVSRV9fKi9fanN4KFRhYmxlUGFnaW5hdGlvblNlbGVjdExhYmVsLCB7XG4gICAgICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5zZWxlY3RMYWJlbCxcbiAgICAgICAgaWQ6IGxhYmVsSWQsXG4gICAgICAgIGNoaWxkcmVuOiBsYWJlbFJvd3NQZXJQYWdlXG4gICAgICB9KSwgcm93c1BlclBhZ2VPcHRpb25zLmxlbmd0aCA+IDEgJiYgLyojX19QVVJFX18qL19qc3goVGFibGVQYWdpbmF0aW9uU2VsZWN0LCBfZXh0ZW5kcyh7XG4gICAgICAgIHZhcmlhbnQ6IFwic3RhbmRhcmRcIlxuICAgICAgfSwgIXNlbGVjdFByb3BzLnZhcmlhbnQgJiYge1xuICAgICAgICBpbnB1dDogX0lucHV0QmFzZSB8fCAoX0lucHV0QmFzZSA9IC8qI19fUFVSRV9fKi9fanN4KElucHV0QmFzZSwge30pKVxuICAgICAgfSwge1xuICAgICAgICB2YWx1ZTogcm93c1BlclBhZ2UsXG4gICAgICAgIG9uQ2hhbmdlOiBvblJvd3NQZXJQYWdlQ2hhbmdlLFxuICAgICAgICBpZDogc2VsZWN0SWQsXG4gICAgICAgIGxhYmVsSWQ6IGxhYmVsSWRcbiAgICAgIH0sIHNlbGVjdFByb3BzLCB7XG4gICAgICAgIGNsYXNzZXM6IF9leHRlbmRzKHt9LCBzZWxlY3RQcm9wcy5jbGFzc2VzLCB7XG4gICAgICAgICAgLy8gVE9ETyB2NSByZW1vdmUgYGNsYXNzZXMuaW5wdXRgXG4gICAgICAgICAgcm9vdDogY2xzeChjbGFzc2VzLmlucHV0LCBjbGFzc2VzLnNlbGVjdFJvb3QsIChzZWxlY3RQcm9wcy5jbGFzc2VzIHx8IHt9KS5yb290KSxcbiAgICAgICAgICBzZWxlY3Q6IGNsc3goY2xhc3Nlcy5zZWxlY3QsIChzZWxlY3RQcm9wcy5jbGFzc2VzIHx8IHt9KS5zZWxlY3QpLFxuICAgICAgICAgIC8vIFRPRE8gdjUgcmVtb3ZlIGBzZWxlY3RJY29uYFxuICAgICAgICAgIGljb246IGNsc3goY2xhc3Nlcy5zZWxlY3RJY29uLCAoc2VsZWN0UHJvcHMuY2xhc3NlcyB8fCB7fSkuaWNvbilcbiAgICAgICAgfSksXG4gICAgICAgIGRpc2FibGVkOiBkaXNhYmxlZCxcbiAgICAgICAgY2hpbGRyZW46IHJvd3NQZXJQYWdlT3B0aW9ucy5tYXAocm93c1BlclBhZ2VPcHRpb24gPT4gLyojX19QVVJFX18qL19jcmVhdGVFbGVtZW50KE1lbnVJdGVtQ29tcG9uZW50LCBfZXh0ZW5kcyh7fSwgIWlzSG9zdENvbXBvbmVudChNZW51SXRlbUNvbXBvbmVudCkgJiYge1xuICAgICAgICAgIG93bmVyU3RhdGVcbiAgICAgICAgfSwge1xuICAgICAgICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5tZW51SXRlbSxcbiAgICAgICAgICBrZXk6IHJvd3NQZXJQYWdlT3B0aW9uLmxhYmVsID8gcm93c1BlclBhZ2VPcHRpb24ubGFiZWwgOiByb3dzUGVyUGFnZU9wdGlvbixcbiAgICAgICAgICB2YWx1ZTogcm93c1BlclBhZ2VPcHRpb24udmFsdWUgPyByb3dzUGVyUGFnZU9wdGlvbi52YWx1ZSA6IHJvd3NQZXJQYWdlT3B0aW9uXG4gICAgICAgIH0pLCByb3dzUGVyUGFnZU9wdGlvbi5sYWJlbCA/IHJvd3NQZXJQYWdlT3B0aW9uLmxhYmVsIDogcm93c1BlclBhZ2VPcHRpb24pKVxuICAgICAgfSkpLCAvKiNfX1BVUkVfXyovX2pzeChUYWJsZVBhZ2luYXRpb25EaXNwbGF5ZWRSb3dzLCB7XG4gICAgICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5kaXNwbGF5ZWRSb3dzLFxuICAgICAgICBjaGlsZHJlbjogbGFiZWxEaXNwbGF5ZWRSb3dzKHtcbiAgICAgICAgICBmcm9tOiBjb3VudCA9PT0gMCA/IDAgOiBwYWdlICogcm93c1BlclBhZ2UgKyAxLFxuICAgICAgICAgIHRvOiBnZXRMYWJlbERpc3BsYXllZFJvd3NUbygpLFxuICAgICAgICAgIGNvdW50OiBjb3VudCA9PT0gLTEgPyAtMSA6IGNvdW50LFxuICAgICAgICAgIHBhZ2VcbiAgICAgICAgfSlcbiAgICAgIH0pLCAvKiNfX1BVUkVfXyovX2pzeChBY3Rpb25zQ29tcG9uZW50LCB7XG4gICAgICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5hY3Rpb25zLFxuICAgICAgICBiYWNrSWNvbkJ1dHRvblByb3BzOiBiYWNrSWNvbkJ1dHRvblByb3BzLFxuICAgICAgICBjb3VudDogY291bnQsXG4gICAgICAgIG5leHRJY29uQnV0dG9uUHJvcHM6IG5leHRJY29uQnV0dG9uUHJvcHMsXG4gICAgICAgIG9uUGFnZUNoYW5nZTogb25QYWdlQ2hhbmdlLFxuICAgICAgICBwYWdlOiBwYWdlLFxuICAgICAgICByb3dzUGVyUGFnZTogcm93c1BlclBhZ2UsXG4gICAgICAgIHNob3dGaXJzdEJ1dHRvbjogc2hvd0ZpcnN0QnV0dG9uLFxuICAgICAgICBzaG93TGFzdEJ1dHRvbjogc2hvd0xhc3RCdXR0b24sXG4gICAgICAgIHNsb3RQcm9wczogc2xvdFByb3BzLmFjdGlvbnMsXG4gICAgICAgIHNsb3RzOiBzbG90cy5hY3Rpb25zLFxuICAgICAgICBnZXRJdGVtQXJpYUxhYmVsOiBnZXRJdGVtQXJpYUxhYmVsLFxuICAgICAgICBkaXNhYmxlZDogZGlzYWJsZWRcbiAgICAgIH0pXVxuICAgIH0pXG4gIH0pKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVGFibGVQYWdpbmF0aW9uLnByb3BUeXBlcyAvKiByZW1vdmUtcHJvcHR5cGVzICovID0ge1xuICAvLyDilIzilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIAgV2FybmluZyDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJBcbiAgLy8g4pSCIFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucy4g4pSCXG4gIC8vIOKUgiAgICBUbyB1cGRhdGUgdGhlbSwgZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gYHBucG0gcHJvcHR5cGVzYC4gICAgIOKUglxuICAvLyDilJTilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJhcbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgZGlzcGxheWluZyB0aGUgYWN0aW9ucy5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIEhUTUwgZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICogQGRlZmF1bHQgVGFibGVQYWdpbmF0aW9uQWN0aW9uc1xuICAgKi9cbiAgQWN0aW9uc0NvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuICAvKipcbiAgICogUHJvcHMgYXBwbGllZCB0byB0aGUgYmFjayBhcnJvdyBbYEljb25CdXR0b25gXSgvbWF0ZXJpYWwtdWkvYXBpL2ljb24tYnV0dG9uLykgY29tcG9uZW50LlxuICAgKlxuICAgKiBUaGlzIHByb3AgaXMgYW4gYWxpYXMgZm9yIGBzbG90UHJvcHMuYWN0aW9ucy5wcmV2aW91c0J1dHRvbmAgYW5kIHdpbGwgYmUgb3ZlcnJpZGVuIGJ5IGl0IGlmIGJvdGggYXJlIHVzZWQuXG4gICAqIEBkZXByZWNhdGVkIFVzZSBgc2xvdFByb3BzLmFjdGlvbnMucHJldmlvdXNCdXR0b25gIGluc3RlYWQuXG4gICAqL1xuICBiYWNrSWNvbkJ1dHRvblByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNvbFNwYW46IFByb3BUeXBlcy5udW1iZXIsXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBIVE1MIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBjb21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcbiAgLyoqXG4gICAqIFRoZSB0b3RhbCBudW1iZXIgb2Ygcm93cy5cbiAgICpcbiAgICogVG8gZW5hYmxlIHNlcnZlciBzaWRlIHBhZ2luYXRpb24gZm9yIGFuIHVua25vd24gbnVtYmVyIG9mIGl0ZW1zLCBwcm92aWRlIC0xLlxuICAgKi9cbiAgY291bnQ6IGludGVnZXJQcm9wVHlwZS5pc1JlcXVpcmVkLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgY29tcG9uZW50IGlzIGRpc2FibGVkLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZGlzYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogQWNjZXB0cyBhIGZ1bmN0aW9uIHdoaWNoIHJldHVybnMgYSBzdHJpbmcgdmFsdWUgdGhhdCBwcm92aWRlcyBhIHVzZXItZnJpZW5kbHkgbmFtZSBmb3IgdGhlIGN1cnJlbnQgcGFnZS5cbiAgICogVGhpcyBpcyBpbXBvcnRhbnQgZm9yIHNjcmVlbiByZWFkZXIgdXNlcnMuXG4gICAqXG4gICAqIEZvciBsb2NhbGl6YXRpb24gcHVycG9zZXMsIHlvdSBjYW4gdXNlIHRoZSBwcm92aWRlZCBbdHJhbnNsYXRpb25zXSgvbWF0ZXJpYWwtdWkvZ3VpZGVzL2xvY2FsaXphdGlvbi8pLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdHlwZSBUaGUgbGluayBvciBidXR0b24gdHlwZSB0byBmb3JtYXQgKCdmaXJzdCcgfCAnbGFzdCcgfCAnbmV4dCcgfCAncHJldmlvdXMnKS5cbiAgICogQHJldHVybnMge3N0cmluZ31cbiAgICogQGRlZmF1bHQgZnVuY3Rpb24gZGVmYXVsdEdldEFyaWFMYWJlbCh0eXBlKSB7XG4gICAqICAgcmV0dXJuIGBHbyB0byAke3R5cGV9IHBhZ2VgO1xuICAgKiB9XG4gICAqL1xuICBnZXRJdGVtQXJpYUxhYmVsOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIEN1c3RvbWl6ZSB0aGUgZGlzcGxheWVkIHJvd3MgbGFiZWwuIEludm9rZWQgd2l0aCBhIGB7IGZyb20sIHRvLCBjb3VudCwgcGFnZSB9YFxuICAgKiBvYmplY3QuXG4gICAqXG4gICAqIEZvciBsb2NhbGl6YXRpb24gcHVycG9zZXMsIHlvdSBjYW4gdXNlIHRoZSBwcm92aWRlZCBbdHJhbnNsYXRpb25zXSgvbWF0ZXJpYWwtdWkvZ3VpZGVzL2xvY2FsaXphdGlvbi8pLlxuICAgKiBAZGVmYXVsdCBmdW5jdGlvbiBkZWZhdWx0TGFiZWxEaXNwbGF5ZWRSb3dzKHsgZnJvbSwgdG8sIGNvdW50IH0pIHtcbiAgICogICByZXR1cm4gYCR7ZnJvbX3igJMke3RvfSBvZiAke2NvdW50ICE9PSAtMSA/IGNvdW50IDogYG1vcmUgdGhhbiAke3RvfWB9YDtcbiAgICogfVxuICAgKi9cbiAgbGFiZWxEaXNwbGF5ZWRSb3dzOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIEN1c3RvbWl6ZSB0aGUgcm93cyBwZXIgcGFnZSBsYWJlbC5cbiAgICpcbiAgICogRm9yIGxvY2FsaXphdGlvbiBwdXJwb3NlcywgeW91IGNhbiB1c2UgdGhlIHByb3ZpZGVkIFt0cmFuc2xhdGlvbnNdKC9tYXRlcmlhbC11aS9ndWlkZXMvbG9jYWxpemF0aW9uLykuXG4gICAqIEBkZWZhdWx0ICdSb3dzIHBlciBwYWdlOidcbiAgICovXG4gIGxhYmVsUm93c1BlclBhZ2U6IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogUHJvcHMgYXBwbGllZCB0byB0aGUgbmV4dCBhcnJvdyBbYEljb25CdXR0b25gXSgvbWF0ZXJpYWwtdWkvYXBpL2ljb24tYnV0dG9uLykgZWxlbWVudC5cbiAgICpcbiAgICogVGhpcyBwcm9wIGlzIGFuIGFsaWFzIGZvciBgc2xvdFByb3BzLmFjdGlvbnMubmV4dEJ1dHRvbmAgYW5kIHdpbGwgYmUgb3ZlcnJpZGVuIGJ5IGl0IGlmIGJvdGggYXJlIHVzZWQuXG4gICAqIEBkZXByZWNhdGVkIFVzZSBgc2xvdFByb3BzLmFjdGlvbnMubmV4dEJ1dHRvbmAgaW5zdGVhZC5cbiAgICovXG4gIG5leHRJY29uQnV0dG9uUHJvcHM6IFByb3BUeXBlcy5vYmplY3QsXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSBwYWdlIGlzIGNoYW5nZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7UmVhY3QuTW91c2VFdmVudDxIVE1MQnV0dG9uRWxlbWVudD4gfCBudWxsfSBldmVudCBUaGUgZXZlbnQgc291cmNlIG9mIHRoZSBjYWxsYmFjay5cbiAgICogQHBhcmFtIHtudW1iZXJ9IHBhZ2UgVGhlIHBhZ2Ugc2VsZWN0ZWQuXG4gICAqL1xuICBvblBhZ2VDaGFuZ2U6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSBudW1iZXIgb2Ygcm93cyBwZXIgcGFnZSBpcyBjaGFuZ2VkLlxuICAgKlxuICAgKiBAcGFyYW0ge1JlYWN0LkNoYW5nZUV2ZW50PEhUTUxUZXh0QXJlYUVsZW1lbnQgfCBIVE1MSW5wdXRFbGVtZW50Pn0gZXZlbnQgVGhlIGV2ZW50IHNvdXJjZSBvZiB0aGUgY2FsbGJhY2suXG4gICAqL1xuICBvblJvd3NQZXJQYWdlQ2hhbmdlOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIFRoZSB6ZXJvLWJhc2VkIGluZGV4IG9mIHRoZSBjdXJyZW50IHBhZ2UuXG4gICAqL1xuICBwYWdlOiBjaGFpblByb3BUeXBlcyhpbnRlZ2VyUHJvcFR5cGUuaXNSZXF1aXJlZCwgcHJvcHMgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIGNvdW50LFxuICAgICAgcGFnZSxcbiAgICAgIHJvd3NQZXJQYWdlXG4gICAgfSA9IHByb3BzO1xuICAgIGlmIChjb3VudCA9PT0gLTEpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBjb25zdCBuZXdMYXN0UGFnZSA9IE1hdGgubWF4KDAsIE1hdGguY2VpbChjb3VudCAvIHJvd3NQZXJQYWdlKSAtIDEpO1xuICAgIGlmIChwYWdlIDwgMCB8fCBwYWdlID4gbmV3TGFzdFBhZ2UpIHtcbiAgICAgIHJldHVybiBuZXcgRXJyb3IoJ01VSTogVGhlIHBhZ2UgcHJvcCBvZiBhIFRhYmxlUGFnaW5hdGlvbiBpcyBvdXQgb2YgcmFuZ2UgJyArIGAoMCB0byAke25ld0xhc3RQYWdlfSwgYnV0IHBhZ2UgaXMgJHtwYWdlfSkuYCk7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9KSxcbiAgLyoqXG4gICAqIFRoZSBudW1iZXIgb2Ygcm93cyBwZXIgcGFnZS5cbiAgICpcbiAgICogU2V0IC0xIHRvIGRpc3BsYXkgYWxsIHRoZSByb3dzLlxuICAgKi9cbiAgcm93c1BlclBhZ2U6IGludGVnZXJQcm9wVHlwZS5pc1JlcXVpcmVkLFxuICAvKipcbiAgICogQ3VzdG9taXplcyB0aGUgb3B0aW9ucyBvZiB0aGUgcm93cyBwZXIgcGFnZSBzZWxlY3QgZmllbGQuIElmIGxlc3MgdGhhbiB0d28gb3B0aW9ucyBhcmVcbiAgICogYXZhaWxhYmxlLCBubyBzZWxlY3QgZmllbGQgd2lsbCBiZSBkaXNwbGF5ZWQuXG4gICAqIFVzZSAtMSBmb3IgdGhlIHZhbHVlIHdpdGggYSBjdXN0b20gbGFiZWwgdG8gc2hvdyBhbGwgdGhlIHJvd3MuXG4gICAqIEBkZWZhdWx0IFsxMCwgMjUsIDUwLCAxMDBdXG4gICAqL1xuICByb3dzUGVyUGFnZU9wdGlvbnM6IFByb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zaGFwZSh7XG4gICAgbGFiZWw6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgICB2YWx1ZTogUHJvcFR5cGVzLm51bWJlci5pc1JlcXVpcmVkXG4gIH0pXSkuaXNSZXF1aXJlZCksXG4gIC8qKlxuICAgKiBQcm9wcyBhcHBsaWVkIHRvIHRoZSByb3dzIHBlciBwYWdlIFtgU2VsZWN0YF0oL21hdGVyaWFsLXVpL2FwaS9zZWxlY3QvKSBlbGVtZW50LlxuICAgKlxuICAgKiBUaGlzIHByb3AgaXMgYW4gYWxpYXMgZm9yIGBzbG90UHJvcHMuc2VsZWN0YCBhbmQgd2lsbCBiZSBvdmVycmlkZW4gYnkgaXQgaWYgYm90aCBhcmUgdXNlZC5cbiAgICogQGRlcHJlY2F0ZWQgVXNlIGBzbG90UHJvcHMuc2VsZWN0YCBpbnN0ZWFkLlxuICAgKlxuICAgKiBAZGVmYXVsdCB7fVxuICAgKi9cbiAgU2VsZWN0UHJvcHM6IFByb3BUeXBlcy5vYmplY3QsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHNob3cgdGhlIGZpcnN0LXBhZ2UgYnV0dG9uLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgc2hvd0ZpcnN0QnV0dG9uOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgc2hvdyB0aGUgbGFzdC1wYWdlIGJ1dHRvbi5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIHNob3dMYXN0QnV0dG9uOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIFRoZSBwcm9wcyB1c2VkIGZvciBlYWNoIHNsb3QgaW5zaWRlIHRoZSBUYWJsZVBhZ2luYXRpb24uXG4gICAqIEBkZWZhdWx0IHt9XG4gICAqL1xuICBzbG90UHJvcHM6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgYWN0aW9uczogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICAgIGZpcnN0QnV0dG9uOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgICAgZmlyc3RCdXR0b25JY29uOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgICAgbGFzdEJ1dHRvbjogUHJvcFR5cGVzLm9iamVjdCxcbiAgICAgIGxhc3RCdXR0b25JY29uOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgICAgbmV4dEJ1dHRvbjogUHJvcFR5cGVzLm9iamVjdCxcbiAgICAgIG5leHRCdXR0b25JY29uOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgICAgcHJldmlvdXNCdXR0b246IFByb3BUeXBlcy5vYmplY3QsXG4gICAgICBwcmV2aW91c0J1dHRvbkljb246IFByb3BUeXBlcy5vYmplY3RcbiAgICB9KSxcbiAgICBzZWxlY3Q6IFByb3BUeXBlcy5vYmplY3RcbiAgfSksXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50cyB1c2VkIGZvciBlYWNoIHNsb3QgaW5zaWRlIHRoZSBUYWJsZVBhZ2luYXRpb24uXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBIVE1MIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqIEBkZWZhdWx0IHt9XG4gICAqL1xuICBzbG90czogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBhY3Rpb25zOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgICAgZmlyc3RCdXR0b246IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcbiAgICAgIGZpcnN0QnV0dG9uSWNvbjogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuICAgICAgbGFzdEJ1dHRvbjogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuICAgICAgbGFzdEJ1dHRvbkljb246IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcbiAgICAgIG5leHRCdXR0b246IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcbiAgICAgIG5leHRCdXR0b25JY29uOiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG4gICAgICBwcmV2aW91c0J1dHRvbjogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuICAgICAgcHJldmlvdXNCdXR0b25JY29uOiBQcm9wVHlwZXMuZWxlbWVudFR5cGVcbiAgICB9KVxuICB9KSxcbiAgLyoqXG4gICAqIFRoZSBzeXN0ZW0gcHJvcCB0aGF0IGFsbG93cyBkZWZpbmluZyBzeXN0ZW0gb3ZlcnJpZGVzIGFzIHdlbGwgYXMgYWRkaXRpb25hbCBDU1Mgc3R5bGVzLlxuICAgKi9cbiAgc3g6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuYm9vbF0pKSwgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IFRhYmxlUGFnaW5hdGlvbjsiLCJpbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzZXMnO1xuaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3MnO1xuZXhwb3J0IGZ1bmN0aW9uIGdldFRhYmxlUm93VXRpbGl0eUNsYXNzKHNsb3QpIHtcbiAgcmV0dXJuIGdlbmVyYXRlVXRpbGl0eUNsYXNzKCdNdWlUYWJsZVJvdycsIHNsb3QpO1xufVxuY29uc3QgdGFibGVSb3dDbGFzc2VzID0gZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcygnTXVpVGFibGVSb3cnLCBbJ3Jvb3QnLCAnc2VsZWN0ZWQnLCAnaG92ZXInLCAnaGVhZCcsICdmb290ZXInXSk7XG5leHBvcnQgZGVmYXVsdCB0YWJsZVJvd0NsYXNzZXM7IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiY2xhc3NOYW1lXCIsIFwiY29tcG9uZW50XCIsIFwiaG92ZXJcIiwgXCJzZWxlY3RlZFwiXTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCBjb21wb3NlQ2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2NvbXBvc2VDbGFzc2VzJztcbmltcG9ydCB7IGFscGhhIH0gZnJvbSAnQG11aS9zeXN0ZW0vY29sb3JNYW5pcHVsYXRvcic7XG5pbXBvcnQgVGFibGVsdmwyQ29udGV4dCBmcm9tICcuLi9UYWJsZS9UYWJsZWx2bDJDb250ZXh0JztcbmltcG9ydCB7IHVzZURlZmF1bHRQcm9wcyB9IGZyb20gJy4uL0RlZmF1bHRQcm9wc1Byb3ZpZGVyJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnLi4vc3R5bGVzL3N0eWxlZCc7XG5pbXBvcnQgdGFibGVSb3dDbGFzc2VzLCB7IGdldFRhYmxlUm93VXRpbGl0eUNsYXNzIH0gZnJvbSAnLi90YWJsZVJvd0NsYXNzZXMnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmNvbnN0IHVzZVV0aWxpdHlDbGFzc2VzID0gb3duZXJTdGF0ZSA9PiB7XG4gIGNvbnN0IHtcbiAgICBjbGFzc2VzLFxuICAgIHNlbGVjdGVkLFxuICAgIGhvdmVyLFxuICAgIGhlYWQsXG4gICAgZm9vdGVyXG4gIH0gPSBvd25lclN0YXRlO1xuICBjb25zdCBzbG90cyA9IHtcbiAgICByb290OiBbJ3Jvb3QnLCBzZWxlY3RlZCAmJiAnc2VsZWN0ZWQnLCBob3ZlciAmJiAnaG92ZXInLCBoZWFkICYmICdoZWFkJywgZm9vdGVyICYmICdmb290ZXInXVxuICB9O1xuICByZXR1cm4gY29tcG9zZUNsYXNzZXMoc2xvdHMsIGdldFRhYmxlUm93VXRpbGl0eUNsYXNzLCBjbGFzc2VzKTtcbn07XG5jb25zdCBUYWJsZVJvd1Jvb3QgPSBzdHlsZWQoJ3RyJywge1xuICBuYW1lOiAnTXVpVGFibGVSb3cnLFxuICBzbG90OiAnUm9vdCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9ID0gcHJvcHM7XG4gICAgcmV0dXJuIFtzdHlsZXMucm9vdCwgb3duZXJTdGF0ZS5oZWFkICYmIHN0eWxlcy5oZWFkLCBvd25lclN0YXRlLmZvb3RlciAmJiBzdHlsZXMuZm9vdGVyXTtcbiAgfVxufSkoKHtcbiAgdGhlbWVcbn0pID0+ICh7XG4gIGNvbG9yOiAnaW5oZXJpdCcsXG4gIGRpc3BsYXk6ICd0YWJsZS1yb3cnLFxuICB2ZXJ0aWNhbEFsaWduOiAnbWlkZGxlJyxcbiAgLy8gV2UgZGlzYWJsZSB0aGUgZm9jdXMgcmluZyBmb3IgbW91c2UsIHRvdWNoIGFuZCBrZXlib2FyZCB1c2Vycy5cbiAgb3V0bGluZTogMCxcbiAgW2AmLiR7dGFibGVSb3dDbGFzc2VzLmhvdmVyfTpob3ZlcmBdOiB7XG4gICAgYmFja2dyb3VuZENvbG9yOiAodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZS5hY3Rpb24uaG92ZXJcbiAgfSxcbiAgW2AmLiR7dGFibGVSb3dDbGFzc2VzLnNlbGVjdGVkfWBdOiB7XG4gICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS52YXJzID8gYHJnYmEoJHt0aGVtZS52YXJzLnBhbGV0dGUucHJpbWFyeS5tYWluQ2hhbm5lbH0gLyAke3RoZW1lLnZhcnMucGFsZXR0ZS5hY3Rpb24uc2VsZWN0ZWRPcGFjaXR5fSlgIDogYWxwaGEodGhlbWUucGFsZXR0ZS5wcmltYXJ5Lm1haW4sIHRoZW1lLnBhbGV0dGUuYWN0aW9uLnNlbGVjdGVkT3BhY2l0eSksXG4gICAgJyY6aG92ZXInOiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnZhcnMgPyBgcmdiYSgke3RoZW1lLnZhcnMucGFsZXR0ZS5wcmltYXJ5Lm1haW5DaGFubmVsfSAvIGNhbGMoJHt0aGVtZS52YXJzLnBhbGV0dGUuYWN0aW9uLnNlbGVjdGVkT3BhY2l0eX0gKyAke3RoZW1lLnZhcnMucGFsZXR0ZS5hY3Rpb24uaG92ZXJPcGFjaXR5fSkpYCA6IGFscGhhKHRoZW1lLnBhbGV0dGUucHJpbWFyeS5tYWluLCB0aGVtZS5wYWxldHRlLmFjdGlvbi5zZWxlY3RlZE9wYWNpdHkgKyB0aGVtZS5wYWxldHRlLmFjdGlvbi5ob3Zlck9wYWNpdHkpXG4gICAgfVxuICB9XG59KSk7XG5jb25zdCBkZWZhdWx0Q29tcG9uZW50ID0gJ3RyJztcbi8qKlxuICogV2lsbCBhdXRvbWF0aWNhbGx5IHNldCBkeW5hbWljIHJvdyBoZWlnaHRcbiAqIGJhc2VkIG9uIHRoZSBtYXRlcmlhbCB0YWJsZSBlbGVtZW50IHBhcmVudCAoaGVhZCwgYm9keSwgZXRjKS5cbiAqL1xuY29uc3QgVGFibGVSb3cgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBUYWJsZVJvdyhpblByb3BzLCByZWYpIHtcbiAgY29uc3QgcHJvcHMgPSB1c2VEZWZhdWx0UHJvcHMoe1xuICAgIHByb3BzOiBpblByb3BzLFxuICAgIG5hbWU6ICdNdWlUYWJsZVJvdydcbiAgfSk7XG4gIGNvbnN0IHtcbiAgICAgIGNsYXNzTmFtZSxcbiAgICAgIGNvbXBvbmVudCA9IGRlZmF1bHRDb21wb25lbnQsXG4gICAgICBob3ZlciA9IGZhbHNlLFxuICAgICAgc2VsZWN0ZWQgPSBmYWxzZVxuICAgIH0gPSBwcm9wcyxcbiAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQpO1xuICBjb25zdCB0YWJsZWx2bDIgPSBSZWFjdC51c2VDb250ZXh0KFRhYmxlbHZsMkNvbnRleHQpO1xuICBjb25zdCBvd25lclN0YXRlID0gX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgY29tcG9uZW50LFxuICAgIGhvdmVyLFxuICAgIHNlbGVjdGVkLFxuICAgIGhlYWQ6IHRhYmxlbHZsMiAmJiB0YWJsZWx2bDIudmFyaWFudCA9PT0gJ2hlYWQnLFxuICAgIGZvb3RlcjogdGFibGVsdmwyICYmIHRhYmxlbHZsMi52YXJpYW50ID09PSAnZm9vdGVyJ1xuICB9KTtcbiAgY29uc3QgY2xhc3NlcyA9IHVzZVV0aWxpdHlDbGFzc2VzKG93bmVyU3RhdGUpO1xuICByZXR1cm4gLyojX19QVVJFX18qL19qc3goVGFibGVSb3dSb290LCBfZXh0ZW5kcyh7XG4gICAgYXM6IGNvbXBvbmVudCxcbiAgICByZWY6IHJlZixcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWUpLFxuICAgIHJvbGU6IGNvbXBvbmVudCA9PT0gZGVmYXVsdENvbXBvbmVudCA/IG51bGwgOiAncm93JyxcbiAgICBvd25lclN0YXRlOiBvd25lclN0YXRlXG4gIH0sIG90aGVyKSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFRhYmxlUm93LnByb3BUeXBlcyAvKiByZW1vdmUtcHJvcHR5cGVzICovID0ge1xuICAvLyDilIzilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIAgV2FybmluZyDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJBcbiAgLy8g4pSCIFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucy4g4pSCXG4gIC8vIOKUgiAgICBUbyB1cGRhdGUgdGhlbSwgZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gYHBucG0gcHJvcHR5cGVzYC4gICAgIOKUglxuICAvLyDilJTilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJhcbiAgLyoqXG4gICAqIFNob3VsZCBiZSB2YWxpZCBgPHRyPmAgY2hpbGRyZW4gc3VjaCBhcyBgVGFibGVDZWxsYC5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBIVE1MIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBjb21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIHRhYmxlIHJvdyB3aWxsIHNoYWRlIG9uIGhvdmVyLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgaG92ZXI6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgdGFibGUgcm93IHdpbGwgaGF2ZSB0aGUgc2VsZWN0ZWQgc2hhZGluZy5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIHNlbGVjdGVkOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIFRoZSBzeXN0ZW0gcHJvcCB0aGF0IGFsbG93cyBkZWZpbmluZyBzeXN0ZW0gb3ZlcnJpZGVzIGFzIHdlbGwgYXMgYWRkaXRpb25hbCBDU1Mgc3R5bGVzLlxuICAgKi9cbiAgc3g6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuYm9vbF0pKSwgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IFRhYmxlUm93OyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNyZWF0ZVN2Z0ljb24gZnJvbSAnLi4vLi4vdXRpbHMvY3JlYXRlU3ZnSWNvbic7XG5cbi8qKlxuICogQGlnbm9yZSAtIGludGVybmFsIGNvbXBvbmVudC5cbiAqL1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZVN2Z0ljb24oIC8qI19fUFVSRV9fKi9fanN4KFwicGF0aFwiLCB7XG4gIGQ6IFwiTTIwIDEybC0xLjQxLTEuNDFMMTMgMTYuMTdWNGgtMnYxMi4xN2wtNS41OC01LjU5TDQgMTJsOCA4IDgtOHpcIlxufSksICdBcnJvd0Rvd253YXJkJyk7IiwiaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzc2VzJztcbmltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzJztcbmV4cG9ydCBmdW5jdGlvbiBnZXRUYWJsZVNvcnRMYWJlbFV0aWxpdHlDbGFzcyhzbG90KSB7XG4gIHJldHVybiBnZW5lcmF0ZVV0aWxpdHlDbGFzcygnTXVpVGFibGVTb3J0TGFiZWwnLCBzbG90KTtcbn1cbmNvbnN0IHRhYmxlU29ydExhYmVsQ2xhc3NlcyA9IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMoJ011aVRhYmxlU29ydExhYmVsJywgWydyb290JywgJ2FjdGl2ZScsICdpY29uJywgJ2ljb25EaXJlY3Rpb25EZXNjJywgJ2ljb25EaXJlY3Rpb25Bc2MnXSk7XG5leHBvcnQgZGVmYXVsdCB0YWJsZVNvcnRMYWJlbENsYXNzZXM7IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiYWN0aXZlXCIsIFwiY2hpbGRyZW5cIiwgXCJjbGFzc05hbWVcIiwgXCJkaXJlY3Rpb25cIiwgXCJoaWRlU29ydEljb25cIiwgXCJJY29uQ29tcG9uZW50XCJdO1xuaW1wb3J0IGNvbXBvc2VDbGFzc2VzIGZyb20gJ0BtdWkvdXRpbHMvY29tcG9zZUNsYXNzZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IEJ1dHRvbkJhc2UgZnJvbSAnLi4vQnV0dG9uQmFzZSc7XG5pbXBvcnQgQXJyb3dEb3dud2FyZEljb24gZnJvbSAnLi4vaW50ZXJuYWwvc3ZnLWljb25zL0Fycm93RG93bndhcmQnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICcuLi9zdHlsZXMvc3R5bGVkJztcbmltcG9ydCB7IHVzZURlZmF1bHRQcm9wcyB9IGZyb20gJy4uL0RlZmF1bHRQcm9wc1Byb3ZpZGVyJztcbmltcG9ydCBjYXBpdGFsaXplIGZyb20gJy4uL3V0aWxzL2NhcGl0YWxpemUnO1xuaW1wb3J0IHRhYmxlU29ydExhYmVsQ2xhc3NlcywgeyBnZXRUYWJsZVNvcnRMYWJlbFV0aWxpdHlDbGFzcyB9IGZyb20gJy4vdGFibGVTb3J0TGFiZWxDbGFzc2VzJztcbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5pbXBvcnQgeyBqc3hzIGFzIF9qc3hzIH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5jb25zdCB1c2VVdGlsaXR5Q2xhc3NlcyA9IG93bmVyU3RhdGUgPT4ge1xuICBjb25zdCB7XG4gICAgY2xhc3NlcyxcbiAgICBkaXJlY3Rpb24sXG4gICAgYWN0aXZlXG4gIH0gPSBvd25lclN0YXRlO1xuICBjb25zdCBzbG90cyA9IHtcbiAgICByb290OiBbJ3Jvb3QnLCBhY3RpdmUgJiYgJ2FjdGl2ZSddLFxuICAgIGljb246IFsnaWNvbicsIGBpY29uRGlyZWN0aW9uJHtjYXBpdGFsaXplKGRpcmVjdGlvbil9YF1cbiAgfTtcbiAgcmV0dXJuIGNvbXBvc2VDbGFzc2VzKHNsb3RzLCBnZXRUYWJsZVNvcnRMYWJlbFV0aWxpdHlDbGFzcywgY2xhc3Nlcyk7XG59O1xuY29uc3QgVGFibGVTb3J0TGFiZWxSb290ID0gc3R5bGVkKEJ1dHRvbkJhc2UsIHtcbiAgbmFtZTogJ011aVRhYmxlU29ydExhYmVsJyxcbiAgc2xvdDogJ1Jvb3QnLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBvd25lclN0YXRlXG4gICAgfSA9IHByb3BzO1xuICAgIHJldHVybiBbc3R5bGVzLnJvb3QsIG93bmVyU3RhdGUuYWN0aXZlICYmIHN0eWxlcy5hY3RpdmVdO1xuICB9XG59KSgoe1xuICB0aGVtZVxufSkgPT4gKHtcbiAgY3Vyc29yOiAncG9pbnRlcicsXG4gIGRpc3BsYXk6ICdpbmxpbmUtZmxleCcsXG4gIGp1c3RpZnlDb250ZW50OiAnZmxleC1zdGFydCcsXG4gIGZsZXhEaXJlY3Rpb246ICdpbmhlcml0JyxcbiAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICcmOmZvY3VzJzoge1xuICAgIGNvbG9yOiAodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZS50ZXh0LnNlY29uZGFyeVxuICB9LFxuICAnJjpob3Zlcic6IHtcbiAgICBjb2xvcjogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGUudGV4dC5zZWNvbmRhcnksXG4gICAgW2AmIC4ke3RhYmxlU29ydExhYmVsQ2xhc3Nlcy5pY29ufWBdOiB7XG4gICAgICBvcGFjaXR5OiAwLjVcbiAgICB9XG4gIH0sXG4gIFtgJi4ke3RhYmxlU29ydExhYmVsQ2xhc3Nlcy5hY3RpdmV9YF06IHtcbiAgICBjb2xvcjogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGUudGV4dC5wcmltYXJ5LFxuICAgIFtgJiAuJHt0YWJsZVNvcnRMYWJlbENsYXNzZXMuaWNvbn1gXToge1xuICAgICAgb3BhY2l0eTogMSxcbiAgICAgIGNvbG9yOiAodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZS50ZXh0LnNlY29uZGFyeVxuICAgIH1cbiAgfVxufSkpO1xuY29uc3QgVGFibGVTb3J0TGFiZWxJY29uID0gc3R5bGVkKCdzcGFuJywge1xuICBuYW1lOiAnTXVpVGFibGVTb3J0TGFiZWwnLFxuICBzbG90OiAnSWNvbicsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9ID0gcHJvcHM7XG4gICAgcmV0dXJuIFtzdHlsZXMuaWNvbiwgc3R5bGVzW2BpY29uRGlyZWN0aW9uJHtjYXBpdGFsaXplKG93bmVyU3RhdGUuZGlyZWN0aW9uKX1gXV07XG4gIH1cbn0pKCh7XG4gIHRoZW1lLFxuICBvd25lclN0YXRlXG59KSA9PiBfZXh0ZW5kcyh7XG4gIGZvbnRTaXplOiAxOCxcbiAgbWFyZ2luUmlnaHQ6IDQsXG4gIG1hcmdpbkxlZnQ6IDQsXG4gIG9wYWNpdHk6IDAsXG4gIHRyYW5zaXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZShbJ29wYWNpdHknLCAndHJhbnNmb3JtJ10sIHtcbiAgICBkdXJhdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuZHVyYXRpb24uc2hvcnRlclxuICB9KSxcbiAgdXNlclNlbGVjdDogJ25vbmUnXG59LCBvd25lclN0YXRlLmRpcmVjdGlvbiA9PT0gJ2Rlc2MnICYmIHtcbiAgdHJhbnNmb3JtOiAncm90YXRlKDBkZWcpJ1xufSwgb3duZXJTdGF0ZS5kaXJlY3Rpb24gPT09ICdhc2MnICYmIHtcbiAgdHJhbnNmb3JtOiAncm90YXRlKDE4MGRlZyknXG59KSk7XG5cbi8qKlxuICogQSBidXR0b24gYmFzZWQgbGFiZWwgZm9yIHBsYWNpbmcgaW5zaWRlIGBUYWJsZUNlbGxgIGZvciBjb2x1bW4gc29ydGluZy5cbiAqL1xuY29uc3QgVGFibGVTb3J0TGFiZWwgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBUYWJsZVNvcnRMYWJlbChpblByb3BzLCByZWYpIHtcbiAgY29uc3QgcHJvcHMgPSB1c2VEZWZhdWx0UHJvcHMoe1xuICAgIHByb3BzOiBpblByb3BzLFxuICAgIG5hbWU6ICdNdWlUYWJsZVNvcnRMYWJlbCdcbiAgfSk7XG4gIGNvbnN0IHtcbiAgICAgIGFjdGl2ZSA9IGZhbHNlLFxuICAgICAgY2hpbGRyZW4sXG4gICAgICBjbGFzc05hbWUsXG4gICAgICBkaXJlY3Rpb24gPSAnYXNjJyxcbiAgICAgIGhpZGVTb3J0SWNvbiA9IGZhbHNlLFxuICAgICAgSWNvbkNvbXBvbmVudCA9IEFycm93RG93bndhcmRJY29uXG4gICAgfSA9IHByb3BzLFxuICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIF9leGNsdWRlZCk7XG4gIGNvbnN0IG93bmVyU3RhdGUgPSBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICBhY3RpdmUsXG4gICAgZGlyZWN0aW9uLFxuICAgIGhpZGVTb3J0SWNvbixcbiAgICBJY29uQ29tcG9uZW50XG4gIH0pO1xuICBjb25zdCBjbGFzc2VzID0gdXNlVXRpbGl0eUNsYXNzZXMob3duZXJTdGF0ZSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeHMoVGFibGVTb3J0TGFiZWxSb290LCBfZXh0ZW5kcyh7XG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lKSxcbiAgICBjb21wb25lbnQ6IFwic3BhblwiLFxuICAgIGRpc2FibGVSaXBwbGU6IHRydWUsXG4gICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZSxcbiAgICByZWY6IHJlZlxuICB9LCBvdGhlciwge1xuICAgIGNoaWxkcmVuOiBbY2hpbGRyZW4sIGhpZGVTb3J0SWNvbiAmJiAhYWN0aXZlID8gbnVsbCA6IC8qI19fUFVSRV9fKi9fanN4KFRhYmxlU29ydExhYmVsSWNvbiwge1xuICAgICAgYXM6IEljb25Db21wb25lbnQsXG4gICAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5pY29uKSxcbiAgICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGVcbiAgICB9KV1cbiAgfSkpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBUYWJsZVNvcnRMYWJlbC5wcm9wVHlwZXMgLyogcmVtb3ZlLXByb3B0eXBlcyAqLyA9IHtcbiAgLy8g4pSM4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAIFdhcm5pbmcg4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSQXG4gIC8vIOKUgiBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMuIOKUglxuICAvLyDilIIgICAgVG8gdXBkYXRlIHRoZW0sIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIGBwbnBtIHByb3B0eXBlc2AuICAgICDilIJcbiAgLy8g4pSU4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSYXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBsYWJlbCB3aWxsIGhhdmUgdGhlIGFjdGl2ZSBzdHlsaW5nIChzaG91bGQgYmUgdHJ1ZSBmb3IgdGhlIHNvcnRlZCBjb2x1bW4pLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgYWN0aXZlOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIExhYmVsIGNvbnRlbnRzLCB0aGUgYXJyb3cgd2lsbCBiZSBhcHBlbmRlZCBhdXRvbWF0aWNhbGx5LlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIFRoZSBjdXJyZW50IHNvcnQgZGlyZWN0aW9uLlxuICAgKiBAZGVmYXVsdCAnYXNjJ1xuICAgKi9cbiAgZGlyZWN0aW9uOiBQcm9wVHlwZXMub25lT2YoWydhc2MnLCAnZGVzYyddKSxcbiAgLyoqXG4gICAqIEhpZGUgc29ydCBpY29uIHdoZW4gYWN0aXZlIGlzIGZhbHNlLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgaGlkZVNvcnRJY29uOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIFNvcnQgaWNvbiB0byB1c2UuXG4gICAqIEBkZWZhdWx0IEFycm93RG93bndhcmRJY29uXG4gICAqL1xuICBJY29uQ29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG4gIC8qKlxuICAgKiBUaGUgc3lzdGVtIHByb3AgdGhhdCBhbGxvd3MgZGVmaW5pbmcgc3lzdGVtIG92ZXJyaWRlcyBhcyB3ZWxsIGFzIGFkZGl0aW9uYWwgQ1NTIHN0eWxlcy5cbiAgICovXG4gIHN4OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLmJvb2xdKSksIFByb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCBUYWJsZVNvcnRMYWJlbDsiLCIvLyBTb3VyY2UgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vYWxpdGFoZXJpL25vcm1hbGl6ZS1zY3JvbGwtbGVmdFxubGV0IGNhY2hlZFR5cGU7XG5cbi8qKlxuICogQmFzZWQgb24gdGhlIGpxdWVyeSBwbHVnaW4gaHR0cHM6Ly9naXRodWIuY29tL290aHJlZS9qcXVlcnkucnRsLXNjcm9sbC10eXBlXG4gKlxuICogVHlwZXMgb2Ygc2Nyb2xsTGVmdCwgYXNzdW1pbmcgc2Nyb2xsV2lkdGg9MTAwIGFuZCBkaXJlY3Rpb24gaXMgcnRsLlxuICpcbiAqIFR5cGUgICAgICAgICAgICAgfCA8LSBNb3N0IExlZnQgfCBNb3N0IFJpZ2h0IC0+IHwgSW5pdGlhbFxuICogLS0tLS0tLS0tLS0tLS0tLSB8IC0tLS0tLS0tLS0tLSB8IC0tLS0tLS0tLS0tLS0gfCAtLS0tLS0tXG4gKiBkZWZhdWx0ICAgICAgICAgIHwgMCAgICAgICAgICAgIHwgMTAwICAgICAgICAgICB8IDEwMFxuICogbmVnYXRpdmUgKHNwZWMqKSB8IC0xMDAgICAgICAgICB8IDAgICAgICAgICAgICAgfCAwXG4gKiByZXZlcnNlICAgICAgICAgIHwgMTAwICAgICAgICAgIHwgMCAgICAgICAgICAgICB8IDBcbiAqXG4gKiBFZGdlIDg1OiBkZWZhdWx0XG4gKiBTYWZhcmkgMTQ6IG5lZ2F0aXZlXG4gKiBDaHJvbWUgODU6IG5lZ2F0aXZlXG4gKiBGaXJlZm94IDgxOiBuZWdhdGl2ZVxuICogSUUxMTogcmV2ZXJzZVxuICpcbiAqIHNwZWMqIGh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3NvbS12aWV3LyNkb20td2luZG93LXNjcm9sbFxuICovXG5leHBvcnQgZnVuY3Rpb24gZGV0ZWN0U2Nyb2xsVHlwZSgpIHtcbiAgaWYgKGNhY2hlZFR5cGUpIHtcbiAgICByZXR1cm4gY2FjaGVkVHlwZTtcbiAgfVxuICBjb25zdCBkdW1teSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICBjb25zdCBjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgY29udGFpbmVyLnN0eWxlLndpZHRoID0gJzEwcHgnO1xuICBjb250YWluZXIuc3R5bGUuaGVpZ2h0ID0gJzFweCc7XG4gIGR1bW15LmFwcGVuZENoaWxkKGNvbnRhaW5lcik7XG4gIGR1bW15LmRpciA9ICdydGwnO1xuICBkdW1teS5zdHlsZS5mb250U2l6ZSA9ICcxNHB4JztcbiAgZHVtbXkuc3R5bGUud2lkdGggPSAnNHB4JztcbiAgZHVtbXkuc3R5bGUuaGVpZ2h0ID0gJzFweCc7XG4gIGR1bW15LnN0eWxlLnBvc2l0aW9uID0gJ2Fic29sdXRlJztcbiAgZHVtbXkuc3R5bGUudG9wID0gJy0xMDAwcHgnO1xuICBkdW1teS5zdHlsZS5vdmVyZmxvdyA9ICdzY3JvbGwnO1xuICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGR1bW15KTtcbiAgY2FjaGVkVHlwZSA9ICdyZXZlcnNlJztcbiAgaWYgKGR1bW15LnNjcm9sbExlZnQgPiAwKSB7XG4gICAgY2FjaGVkVHlwZSA9ICdkZWZhdWx0JztcbiAgfSBlbHNlIHtcbiAgICBkdW1teS5zY3JvbGxMZWZ0ID0gMTtcbiAgICBpZiAoZHVtbXkuc2Nyb2xsTGVmdCA9PT0gMCkge1xuICAgICAgY2FjaGVkVHlwZSA9ICduZWdhdGl2ZSc7XG4gICAgfVxuICB9XG4gIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoZHVtbXkpO1xuICByZXR1cm4gY2FjaGVkVHlwZTtcbn1cblxuLy8gQmFzZWQgb24gaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzI0Mzk0Mzc2XG5leHBvcnQgZnVuY3Rpb24gZ2V0Tm9ybWFsaXplZFNjcm9sbExlZnQoZWxlbWVudCwgZGlyZWN0aW9uKSB7XG4gIGNvbnN0IHNjcm9sbExlZnQgPSBlbGVtZW50LnNjcm9sbExlZnQ7XG5cbiAgLy8gUGVyZm9ybSB0aGUgY2FsY3VsYXRpb25zIG9ubHkgd2hlbiBkaXJlY3Rpb24gaXMgcnRsIHRvIGF2b2lkIG1lc3NpbmcgdXAgdGhlIGx0ciBiZWhhdmlvclxuICBpZiAoZGlyZWN0aW9uICE9PSAncnRsJykge1xuICAgIHJldHVybiBzY3JvbGxMZWZ0O1xuICB9XG4gIGNvbnN0IHR5cGUgPSBkZXRlY3RTY3JvbGxUeXBlKCk7XG4gIHN3aXRjaCAodHlwZSkge1xuICAgIGNhc2UgJ25lZ2F0aXZlJzpcbiAgICAgIHJldHVybiBlbGVtZW50LnNjcm9sbFdpZHRoIC0gZWxlbWVudC5jbGllbnRXaWR0aCArIHNjcm9sbExlZnQ7XG4gICAgY2FzZSAncmV2ZXJzZSc6XG4gICAgICByZXR1cm4gZWxlbWVudC5zY3JvbGxXaWR0aCAtIGVsZW1lbnQuY2xpZW50V2lkdGggLSBzY3JvbGxMZWZ0O1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gc2Nyb2xsTGVmdDtcbiAgfVxufSIsImZ1bmN0aW9uIGVhc2VJbk91dFNpbih0aW1lKSB7XG4gIHJldHVybiAoMSArIE1hdGguc2luKE1hdGguUEkgKiB0aW1lIC0gTWF0aC5QSSAvIDIpKSAvIDI7XG59XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBhbmltYXRlKHByb3BlcnR5LCBlbGVtZW50LCB0bywgb3B0aW9ucyA9IHt9LCBjYiA9ICgpID0+IHt9KSB7XG4gIGNvbnN0IHtcbiAgICBlYXNlID0gZWFzZUluT3V0U2luLFxuICAgIGR1cmF0aW9uID0gMzAwIC8vIHN0YW5kYXJkXG4gIH0gPSBvcHRpb25zO1xuICBsZXQgc3RhcnQgPSBudWxsO1xuICBjb25zdCBmcm9tID0gZWxlbWVudFtwcm9wZXJ0eV07XG4gIGxldCBjYW5jZWxsZWQgPSBmYWxzZTtcbiAgY29uc3QgY2FuY2VsID0gKCkgPT4ge1xuICAgIGNhbmNlbGxlZCA9IHRydWU7XG4gIH07XG4gIGNvbnN0IHN0ZXAgPSB0aW1lc3RhbXAgPT4ge1xuICAgIGlmIChjYW5jZWxsZWQpIHtcbiAgICAgIGNiKG5ldyBFcnJvcignQW5pbWF0aW9uIGNhbmNlbGxlZCcpKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHN0YXJ0ID09PSBudWxsKSB7XG4gICAgICBzdGFydCA9IHRpbWVzdGFtcDtcbiAgICB9XG4gICAgY29uc3QgdGltZSA9IE1hdGgubWluKDEsICh0aW1lc3RhbXAgLSBzdGFydCkgLyBkdXJhdGlvbik7XG4gICAgZWxlbWVudFtwcm9wZXJ0eV0gPSBlYXNlKHRpbWUpICogKHRvIC0gZnJvbSkgKyBmcm9tO1xuICAgIGlmICh0aW1lID49IDEpIHtcbiAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICAgIGNiKG51bGwpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZShzdGVwKTtcbiAgfTtcbiAgaWYgKGZyb20gPT09IHRvKSB7XG4gICAgY2IobmV3IEVycm9yKCdFbGVtZW50IGFscmVhZHkgYXQgdGFyZ2V0IHBvc2l0aW9uJykpO1xuICAgIHJldHVybiBjYW5jZWw7XG4gIH1cbiAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHN0ZXApO1xuICByZXR1cm4gY2FuY2VsO1xufSIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcIm9uQ2hhbmdlXCJdO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBkZWJvdW5jZSBmcm9tICcuLi91dGlscy9kZWJvdW5jZSc7XG5pbXBvcnQgeyBvd25lcldpbmRvdywgdW5zdGFibGVfdXNlRW5oYW5jZWRFZmZlY3QgYXMgdXNlRW5oYW5jZWRFZmZlY3QgfSBmcm9tICcuLi91dGlscyc7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuY29uc3Qgc3R5bGVzID0ge1xuICB3aWR0aDogOTksXG4gIGhlaWdodDogOTksXG4gIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICB0b3A6IC05OTk5LFxuICBvdmVyZmxvdzogJ3Njcm9sbCdcbn07XG5cbi8qKlxuICogQGlnbm9yZSAtIGludGVybmFsIGNvbXBvbmVudC5cbiAqIFRoZSBjb21wb25lbnQgb3JpZ2luYXRlcyBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9TVE9SSVMvcmVhY3Qtc2Nyb2xsYmFyLXNpemUuXG4gKiBJdCBoYXMgYmVlbiBtb3ZlZCBpbnRvIHRoZSBjb3JlIGluIG9yZGVyIHRvIG1pbmltaXplIHRoZSBidW5kbGUgc2l6ZS5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gU2Nyb2xsYmFyU2l6ZShwcm9wcykge1xuICBjb25zdCB7XG4gICAgICBvbkNoYW5nZVxuICAgIH0gPSBwcm9wcyxcbiAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQpO1xuICBjb25zdCBzY3JvbGxiYXJIZWlnaHQgPSBSZWFjdC51c2VSZWYoKTtcbiAgY29uc3Qgbm9kZVJlZiA9IFJlYWN0LnVzZVJlZihudWxsKTtcbiAgY29uc3Qgc2V0TWVhc3VyZW1lbnRzID0gKCkgPT4ge1xuICAgIHNjcm9sbGJhckhlaWdodC5jdXJyZW50ID0gbm9kZVJlZi5jdXJyZW50Lm9mZnNldEhlaWdodCAtIG5vZGVSZWYuY3VycmVudC5jbGllbnRIZWlnaHQ7XG4gIH07XG4gIHVzZUVuaGFuY2VkRWZmZWN0KCgpID0+IHtcbiAgICBjb25zdCBoYW5kbGVSZXNpemUgPSBkZWJvdW5jZSgoKSA9PiB7XG4gICAgICBjb25zdCBwcmV2SGVpZ2h0ID0gc2Nyb2xsYmFySGVpZ2h0LmN1cnJlbnQ7XG4gICAgICBzZXRNZWFzdXJlbWVudHMoKTtcbiAgICAgIGlmIChwcmV2SGVpZ2h0ICE9PSBzY3JvbGxiYXJIZWlnaHQuY3VycmVudCkge1xuICAgICAgICBvbkNoYW5nZShzY3JvbGxiYXJIZWlnaHQuY3VycmVudCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgY29uc3QgY29udGFpbmVyV2luZG93ID0gb3duZXJXaW5kb3cobm9kZVJlZi5jdXJyZW50KTtcbiAgICBjb250YWluZXJXaW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgaGFuZGxlUmVzaXplKTtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgaGFuZGxlUmVzaXplLmNsZWFyKCk7XG4gICAgICBjb250YWluZXJXaW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigncmVzaXplJywgaGFuZGxlUmVzaXplKTtcbiAgICB9O1xuICB9LCBbb25DaGFuZ2VdKTtcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBzZXRNZWFzdXJlbWVudHMoKTtcbiAgICBvbkNoYW5nZShzY3JvbGxiYXJIZWlnaHQuY3VycmVudCk7XG4gIH0sIFtvbkNoYW5nZV0pO1xuICByZXR1cm4gLyojX19QVVJFX18qL19qc3goXCJkaXZcIiwgX2V4dGVuZHMoe1xuICAgIHN0eWxlOiBzdHlsZXMsXG4gICAgcmVmOiBub2RlUmVmXG4gIH0sIG90aGVyKSk7XG59XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBTY3JvbGxiYXJTaXplLnByb3BUeXBlcyA9IHtcbiAgb25DaGFuZ2U6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWRcbn0gOiB2b2lkIDA7IiwiaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzc2VzJztcbmltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzJztcbmV4cG9ydCBmdW5jdGlvbiBnZXRUYWJTY3JvbGxCdXR0b25VdGlsaXR5Q2xhc3Moc2xvdCkge1xuICByZXR1cm4gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoJ011aVRhYlNjcm9sbEJ1dHRvbicsIHNsb3QpO1xufVxuY29uc3QgdGFiU2Nyb2xsQnV0dG9uQ2xhc3NlcyA9IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMoJ011aVRhYlNjcm9sbEJ1dHRvbicsIFsncm9vdCcsICd2ZXJ0aWNhbCcsICdob3Jpem9udGFsJywgJ2Rpc2FibGVkJ10pO1xuZXhwb3J0IGRlZmF1bHQgdGFiU2Nyb2xsQnV0dG9uQ2xhc3NlczsiLCIndXNlIGNsaWVudCc7XG5cbi8qIGVzbGludC1kaXNhYmxlIGpzeC1hMTF5L2FyaWEtcm9sZSAqL1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImNsYXNzTmFtZVwiLCBcInNsb3RzXCIsIFwic2xvdFByb3BzXCIsIFwiZGlyZWN0aW9uXCIsIFwib3JpZW50YXRpb25cIiwgXCJkaXNhYmxlZFwiXTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCBjb21wb3NlQ2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2NvbXBvc2VDbGFzc2VzJztcbmltcG9ydCB7IHVzZVJ0bCB9IGZyb20gJ0BtdWkvc3lzdGVtL1J0bFByb3ZpZGVyJztcbmltcG9ydCB1c2VTbG90UHJvcHMgZnJvbSAnQG11aS91dGlscy91c2VTbG90UHJvcHMnO1xuaW1wb3J0IEtleWJvYXJkQXJyb3dMZWZ0IGZyb20gJy4uL2ludGVybmFsL3N2Zy1pY29ucy9LZXlib2FyZEFycm93TGVmdCc7XG5pbXBvcnQgS2V5Ym9hcmRBcnJvd1JpZ2h0IGZyb20gJy4uL2ludGVybmFsL3N2Zy1pY29ucy9LZXlib2FyZEFycm93UmlnaHQnO1xuaW1wb3J0IEJ1dHRvbkJhc2UgZnJvbSAnLi4vQnV0dG9uQmFzZSc7XG5pbXBvcnQgeyB1c2VEZWZhdWx0UHJvcHMgfSBmcm9tICcuLi9EZWZhdWx0UHJvcHNQcm92aWRlcic7XG5pbXBvcnQgc3R5bGVkIGZyb20gJy4uL3N0eWxlcy9zdHlsZWQnO1xuaW1wb3J0IHRhYlNjcm9sbEJ1dHRvbkNsYXNzZXMsIHsgZ2V0VGFiU2Nyb2xsQnV0dG9uVXRpbGl0eUNsYXNzIH0gZnJvbSAnLi90YWJTY3JvbGxCdXR0b25DbGFzc2VzJztcbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5jb25zdCB1c2VVdGlsaXR5Q2xhc3NlcyA9IG93bmVyU3RhdGUgPT4ge1xuICBjb25zdCB7XG4gICAgY2xhc3NlcyxcbiAgICBvcmllbnRhdGlvbixcbiAgICBkaXNhYmxlZFxuICB9ID0gb3duZXJTdGF0ZTtcbiAgY29uc3Qgc2xvdHMgPSB7XG4gICAgcm9vdDogWydyb290Jywgb3JpZW50YXRpb24sIGRpc2FibGVkICYmICdkaXNhYmxlZCddXG4gIH07XG4gIHJldHVybiBjb21wb3NlQ2xhc3NlcyhzbG90cywgZ2V0VGFiU2Nyb2xsQnV0dG9uVXRpbGl0eUNsYXNzLCBjbGFzc2VzKTtcbn07XG5jb25zdCBUYWJTY3JvbGxCdXR0b25Sb290ID0gc3R5bGVkKEJ1dHRvbkJhc2UsIHtcbiAgbmFtZTogJ011aVRhYlNjcm9sbEJ1dHRvbicsXG4gIHNsb3Q6ICdSb290JyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgb3duZXJTdGF0ZVxuICAgIH0gPSBwcm9wcztcbiAgICByZXR1cm4gW3N0eWxlcy5yb290LCBvd25lclN0YXRlLm9yaWVudGF0aW9uICYmIHN0eWxlc1tvd25lclN0YXRlLm9yaWVudGF0aW9uXV07XG4gIH1cbn0pKCh7XG4gIG93bmVyU3RhdGVcbn0pID0+IF9leHRlbmRzKHtcbiAgd2lkdGg6IDQwLFxuICBmbGV4U2hyaW5rOiAwLFxuICBvcGFjaXR5OiAwLjgsXG4gIFtgJi4ke3RhYlNjcm9sbEJ1dHRvbkNsYXNzZXMuZGlzYWJsZWR9YF06IHtcbiAgICBvcGFjaXR5OiAwXG4gIH1cbn0sIG93bmVyU3RhdGUub3JpZW50YXRpb24gPT09ICd2ZXJ0aWNhbCcgJiYge1xuICB3aWR0aDogJzEwMCUnLFxuICBoZWlnaHQ6IDQwLFxuICAnJiBzdmcnOiB7XG4gICAgdHJhbnNmb3JtOiBgcm90YXRlKCR7b3duZXJTdGF0ZS5pc1J0bCA/IC05MCA6IDkwfWRlZylgXG4gIH1cbn0pKTtcbmNvbnN0IFRhYlNjcm9sbEJ1dHRvbiA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIFRhYlNjcm9sbEJ1dHRvbihpblByb3BzLCByZWYpIHtcbiAgdmFyIF9zbG90cyRTdGFydFNjcm9sbEJ1dCwgX3Nsb3RzJEVuZFNjcm9sbEJ1dHRvO1xuICBjb25zdCBwcm9wcyA9IHVzZURlZmF1bHRQcm9wcyh7XG4gICAgcHJvcHM6IGluUHJvcHMsXG4gICAgbmFtZTogJ011aVRhYlNjcm9sbEJ1dHRvbidcbiAgfSk7XG4gIGNvbnN0IHtcbiAgICAgIGNsYXNzTmFtZSxcbiAgICAgIHNsb3RzID0ge30sXG4gICAgICBzbG90UHJvcHMgPSB7fSxcbiAgICAgIGRpcmVjdGlvblxuICAgIH0gPSBwcm9wcyxcbiAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQpO1xuICBjb25zdCBpc1J0bCA9IHVzZVJ0bCgpO1xuICBjb25zdCBvd25lclN0YXRlID0gX2V4dGVuZHMoe1xuICAgIGlzUnRsXG4gIH0sIHByb3BzKTtcbiAgY29uc3QgY2xhc3NlcyA9IHVzZVV0aWxpdHlDbGFzc2VzKG93bmVyU3RhdGUpO1xuICBjb25zdCBTdGFydEJ1dHRvbkljb24gPSAoX3Nsb3RzJFN0YXJ0U2Nyb2xsQnV0ID0gc2xvdHMuU3RhcnRTY3JvbGxCdXR0b25JY29uKSAhPSBudWxsID8gX3Nsb3RzJFN0YXJ0U2Nyb2xsQnV0IDogS2V5Ym9hcmRBcnJvd0xlZnQ7XG4gIGNvbnN0IEVuZEJ1dHRvbkljb24gPSAoX3Nsb3RzJEVuZFNjcm9sbEJ1dHRvID0gc2xvdHMuRW5kU2Nyb2xsQnV0dG9uSWNvbikgIT0gbnVsbCA/IF9zbG90cyRFbmRTY3JvbGxCdXR0byA6IEtleWJvYXJkQXJyb3dSaWdodDtcbiAgY29uc3Qgc3RhcnRCdXR0b25JY29uUHJvcHMgPSB1c2VTbG90UHJvcHMoe1xuICAgIGVsZW1lbnRUeXBlOiBTdGFydEJ1dHRvbkljb24sXG4gICAgZXh0ZXJuYWxTbG90UHJvcHM6IHNsb3RQcm9wcy5zdGFydFNjcm9sbEJ1dHRvbkljb24sXG4gICAgYWRkaXRpb25hbFByb3BzOiB7XG4gICAgICBmb250U2l6ZTogJ3NtYWxsJ1xuICAgIH0sXG4gICAgb3duZXJTdGF0ZVxuICB9KTtcbiAgY29uc3QgZW5kQnV0dG9uSWNvblByb3BzID0gdXNlU2xvdFByb3BzKHtcbiAgICBlbGVtZW50VHlwZTogRW5kQnV0dG9uSWNvbixcbiAgICBleHRlcm5hbFNsb3RQcm9wczogc2xvdFByb3BzLmVuZFNjcm9sbEJ1dHRvbkljb24sXG4gICAgYWRkaXRpb25hbFByb3BzOiB7XG4gICAgICBmb250U2l6ZTogJ3NtYWxsJ1xuICAgIH0sXG4gICAgb3duZXJTdGF0ZVxuICB9KTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KFRhYlNjcm9sbEJ1dHRvblJvb3QsIF9leHRlbmRzKHtcbiAgICBjb21wb25lbnQ6IFwiZGl2XCIsXG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lKSxcbiAgICByZWY6IHJlZixcbiAgICByb2xlOiBudWxsLFxuICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGUsXG4gICAgdGFiSW5kZXg6IG51bGxcbiAgfSwgb3RoZXIsIHtcbiAgICBjaGlsZHJlbjogZGlyZWN0aW9uID09PSAnbGVmdCcgPyAvKiNfX1BVUkVfXyovX2pzeChTdGFydEJ1dHRvbkljb24sIF9leHRlbmRzKHt9LCBzdGFydEJ1dHRvbkljb25Qcm9wcykpIDogLyojX19QVVJFX18qL19qc3goRW5kQnV0dG9uSWNvbiwgX2V4dGVuZHMoe30sIGVuZEJ1dHRvbkljb25Qcm9wcykpXG4gIH0pKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVGFiU2Nyb2xsQnV0dG9uLnByb3BUeXBlcyAvKiByZW1vdmUtcHJvcHR5cGVzICovID0ge1xuICAvLyDilIzilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIAgV2FybmluZyDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJBcbiAgLy8g4pSCIFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucy4g4pSCXG4gIC8vIOKUgiAgICBUbyB1cGRhdGUgdGhlbSwgZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gYHBucG0gcHJvcHR5cGVzYC4gICAgIOKUglxuICAvLyDilJTilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJhcbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogVGhlIGRpcmVjdGlvbiB0aGUgYnV0dG9uIHNob3VsZCBpbmRpY2F0ZS5cbiAgICovXG4gIGRpcmVjdGlvbjogUHJvcFR5cGVzLm9uZU9mKFsnbGVmdCcsICdyaWdodCddKS5pc1JlcXVpcmVkLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgY29tcG9uZW50IGlzIGRpc2FibGVkLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZGlzYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCBvcmllbnRhdGlvbiAobGF5b3V0IGZsb3cgZGlyZWN0aW9uKS5cbiAgICovXG4gIG9yaWVudGF0aW9uOiBQcm9wVHlwZXMub25lT2YoWydob3Jpem9udGFsJywgJ3ZlcnRpY2FsJ10pLmlzUmVxdWlyZWQsXG4gIC8qKlxuICAgKiBUaGUgZXh0cmEgcHJvcHMgZm9yIHRoZSBzbG90IGNvbXBvbmVudHMuXG4gICAqIFlvdSBjYW4gb3ZlcnJpZGUgdGhlIGV4aXN0aW5nIHByb3BzIG9yIGFkZCBuZXcgb25lcy5cbiAgICogQGRlZmF1bHQge31cbiAgICovXG4gIHNsb3RQcm9wczogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBlbmRTY3JvbGxCdXR0b25JY29uOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pLFxuICAgIHN0YXJ0U2Nyb2xsQnV0dG9uSWNvbjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKVxuICB9KSxcbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnRzIHVzZWQgZm9yIGVhY2ggc2xvdCBpbnNpZGUuXG4gICAqIEBkZWZhdWx0IHt9XG4gICAqL1xuICBzbG90czogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBFbmRTY3JvbGxCdXR0b25JY29uOiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG4gICAgU3RhcnRTY3JvbGxCdXR0b25JY29uOiBQcm9wVHlwZXMuZWxlbWVudFR5cGVcbiAgfSksXG4gIC8qKlxuICAgKiBUaGUgc3lzdGVtIHByb3AgdGhhdCBhbGxvd3MgZGVmaW5pbmcgc3lzdGVtIG92ZXJyaWRlcyBhcyB3ZWxsIGFzIGFkZGl0aW9uYWwgQ1NTIHN0eWxlcy5cbiAgICovXG4gIHN4OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLmJvb2xdKSksIFByb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCBUYWJTY3JvbGxCdXR0b247IiwiaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzc2VzJztcbmltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzJztcbmV4cG9ydCBmdW5jdGlvbiBnZXRUYWJzVXRpbGl0eUNsYXNzKHNsb3QpIHtcbiAgcmV0dXJuIGdlbmVyYXRlVXRpbGl0eUNsYXNzKCdNdWlUYWJzJywgc2xvdCk7XG59XG5jb25zdCB0YWJzQ2xhc3NlcyA9IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMoJ011aVRhYnMnLCBbJ3Jvb3QnLCAndmVydGljYWwnLCAnZmxleENvbnRhaW5lcicsICdmbGV4Q29udGFpbmVyVmVydGljYWwnLCAnY2VudGVyZWQnLCAnc2Nyb2xsZXInLCAnZml4ZWQnLCAnc2Nyb2xsYWJsZVgnLCAnc2Nyb2xsYWJsZVknLCAnaGlkZVNjcm9sbGJhcicsICdzY3JvbGxCdXR0b25zJywgJ3Njcm9sbEJ1dHRvbnNIaWRlTW9iaWxlJywgJ2luZGljYXRvciddKTtcbmV4cG9ydCBkZWZhdWx0IHRhYnNDbGFzc2VzOyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImFyaWEtbGFiZWxcIiwgXCJhcmlhLWxhYmVsbGVkYnlcIiwgXCJhY3Rpb25cIiwgXCJjZW50ZXJlZFwiLCBcImNoaWxkcmVuXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29tcG9uZW50XCIsIFwiYWxsb3dTY3JvbGxCdXR0b25zTW9iaWxlXCIsIFwiaW5kaWNhdG9yQ29sb3JcIiwgXCJvbkNoYW5nZVwiLCBcIm9yaWVudGF0aW9uXCIsIFwiU2Nyb2xsQnV0dG9uQ29tcG9uZW50XCIsIFwic2Nyb2xsQnV0dG9uc1wiLCBcInNlbGVjdGlvbkZvbGxvd3NGb2N1c1wiLCBcInNsb3RzXCIsIFwic2xvdFByb3BzXCIsIFwiVGFiSW5kaWNhdG9yUHJvcHNcIiwgXCJUYWJTY3JvbGxCdXR0b25Qcm9wc1wiLCBcInRleHRDb2xvclwiLCBcInZhbHVlXCIsIFwidmFyaWFudFwiLCBcInZpc2libGVTY3JvbGxiYXJcIl07XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBpc0ZyYWdtZW50IH0gZnJvbSAncmVhY3QtaXMnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHJlZlR5cGUgZnJvbSAnQG11aS91dGlscy9yZWZUeXBlJztcbmltcG9ydCBjb21wb3NlQ2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2NvbXBvc2VDbGFzc2VzJztcbmltcG9ydCB7IHVzZVJ0bCB9IGZyb20gJ0BtdWkvc3lzdGVtL1J0bFByb3ZpZGVyJztcbmltcG9ydCB1c2VTbG90UHJvcHMgZnJvbSAnQG11aS91dGlscy91c2VTbG90UHJvcHMnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICcuLi9zdHlsZXMvc3R5bGVkJztcbmltcG9ydCB7IHVzZURlZmF1bHRQcm9wcyB9IGZyb20gJy4uL0RlZmF1bHRQcm9wc1Byb3ZpZGVyJztcbmltcG9ydCB1c2VUaGVtZSBmcm9tICcuLi9zdHlsZXMvdXNlVGhlbWUnO1xuaW1wb3J0IGRlYm91bmNlIGZyb20gJy4uL3V0aWxzL2RlYm91bmNlJztcbmltcG9ydCB7IGdldE5vcm1hbGl6ZWRTY3JvbGxMZWZ0LCBkZXRlY3RTY3JvbGxUeXBlIH0gZnJvbSAnLi4vdXRpbHMvc2Nyb2xsTGVmdCc7XG5pbXBvcnQgYW5pbWF0ZSBmcm9tICcuLi9pbnRlcm5hbC9hbmltYXRlJztcbmltcG9ydCBTY3JvbGxiYXJTaXplIGZyb20gJy4vU2Nyb2xsYmFyU2l6ZSc7XG5pbXBvcnQgVGFiU2Nyb2xsQnV0dG9uIGZyb20gJy4uL1RhYlNjcm9sbEJ1dHRvbic7XG5pbXBvcnQgdXNlRXZlbnRDYWxsYmFjayBmcm9tICcuLi91dGlscy91c2VFdmVudENhbGxiYWNrJztcbmltcG9ydCB0YWJzQ2xhc3NlcywgeyBnZXRUYWJzVXRpbGl0eUNsYXNzIH0gZnJvbSAnLi90YWJzQ2xhc3Nlcyc7XG5pbXBvcnQgb3duZXJEb2N1bWVudCBmcm9tICcuLi91dGlscy9vd25lckRvY3VtZW50JztcbmltcG9ydCBvd25lcldpbmRvdyBmcm9tICcuLi91dGlscy9vd25lcldpbmRvdyc7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuaW1wb3J0IHsganN4cyBhcyBfanN4cyB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuY29uc3QgbmV4dEl0ZW0gPSAobGlzdCwgaXRlbSkgPT4ge1xuICBpZiAobGlzdCA9PT0gaXRlbSkge1xuICAgIHJldHVybiBsaXN0LmZpcnN0Q2hpbGQ7XG4gIH1cbiAgaWYgKGl0ZW0gJiYgaXRlbS5uZXh0RWxlbWVudFNpYmxpbmcpIHtcbiAgICByZXR1cm4gaXRlbS5uZXh0RWxlbWVudFNpYmxpbmc7XG4gIH1cbiAgcmV0dXJuIGxpc3QuZmlyc3RDaGlsZDtcbn07XG5jb25zdCBwcmV2aW91c0l0ZW0gPSAobGlzdCwgaXRlbSkgPT4ge1xuICBpZiAobGlzdCA9PT0gaXRlbSkge1xuICAgIHJldHVybiBsaXN0Lmxhc3RDaGlsZDtcbiAgfVxuICBpZiAoaXRlbSAmJiBpdGVtLnByZXZpb3VzRWxlbWVudFNpYmxpbmcpIHtcbiAgICByZXR1cm4gaXRlbS5wcmV2aW91c0VsZW1lbnRTaWJsaW5nO1xuICB9XG4gIHJldHVybiBsaXN0Lmxhc3RDaGlsZDtcbn07XG5jb25zdCBtb3ZlRm9jdXMgPSAobGlzdCwgY3VycmVudEZvY3VzLCB0cmF2ZXJzYWxGdW5jdGlvbikgPT4ge1xuICBsZXQgd3JhcHBlZE9uY2UgPSBmYWxzZTtcbiAgbGV0IG5leHRGb2N1cyA9IHRyYXZlcnNhbEZ1bmN0aW9uKGxpc3QsIGN1cnJlbnRGb2N1cyk7XG4gIHdoaWxlIChuZXh0Rm9jdXMpIHtcbiAgICAvLyBQcmV2ZW50IGluZmluaXRlIGxvb3AuXG4gICAgaWYgKG5leHRGb2N1cyA9PT0gbGlzdC5maXJzdENoaWxkKSB7XG4gICAgICBpZiAod3JhcHBlZE9uY2UpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgd3JhcHBlZE9uY2UgPSB0cnVlO1xuICAgIH1cblxuICAgIC8vIFNhbWUgbG9naWMgYXMgdXNlQXV0b2NvbXBsZXRlLmpzXG4gICAgY29uc3QgbmV4dEZvY3VzRGlzYWJsZWQgPSBuZXh0Rm9jdXMuZGlzYWJsZWQgfHwgbmV4dEZvY3VzLmdldEF0dHJpYnV0ZSgnYXJpYS1kaXNhYmxlZCcpID09PSAndHJ1ZSc7XG4gICAgaWYgKCFuZXh0Rm9jdXMuaGFzQXR0cmlidXRlKCd0YWJpbmRleCcpIHx8IG5leHRGb2N1c0Rpc2FibGVkKSB7XG4gICAgICAvLyBNb3ZlIHRvIHRoZSBuZXh0IGVsZW1lbnQuXG4gICAgICBuZXh0Rm9jdXMgPSB0cmF2ZXJzYWxGdW5jdGlvbihsaXN0LCBuZXh0Rm9jdXMpO1xuICAgIH0gZWxzZSB7XG4gICAgICBuZXh0Rm9jdXMuZm9jdXMoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gIH1cbn07XG5jb25zdCB1c2VVdGlsaXR5Q2xhc3NlcyA9IG93bmVyU3RhdGUgPT4ge1xuICBjb25zdCB7XG4gICAgdmVydGljYWwsXG4gICAgZml4ZWQsXG4gICAgaGlkZVNjcm9sbGJhcixcbiAgICBzY3JvbGxhYmxlWCxcbiAgICBzY3JvbGxhYmxlWSxcbiAgICBjZW50ZXJlZCxcbiAgICBzY3JvbGxCdXR0b25zSGlkZU1vYmlsZSxcbiAgICBjbGFzc2VzXG4gIH0gPSBvd25lclN0YXRlO1xuICBjb25zdCBzbG90cyA9IHtcbiAgICByb290OiBbJ3Jvb3QnLCB2ZXJ0aWNhbCAmJiAndmVydGljYWwnXSxcbiAgICBzY3JvbGxlcjogWydzY3JvbGxlcicsIGZpeGVkICYmICdmaXhlZCcsIGhpZGVTY3JvbGxiYXIgJiYgJ2hpZGVTY3JvbGxiYXInLCBzY3JvbGxhYmxlWCAmJiAnc2Nyb2xsYWJsZVgnLCBzY3JvbGxhYmxlWSAmJiAnc2Nyb2xsYWJsZVknXSxcbiAgICBmbGV4Q29udGFpbmVyOiBbJ2ZsZXhDb250YWluZXInLCB2ZXJ0aWNhbCAmJiAnZmxleENvbnRhaW5lclZlcnRpY2FsJywgY2VudGVyZWQgJiYgJ2NlbnRlcmVkJ10sXG4gICAgaW5kaWNhdG9yOiBbJ2luZGljYXRvciddLFxuICAgIHNjcm9sbEJ1dHRvbnM6IFsnc2Nyb2xsQnV0dG9ucycsIHNjcm9sbEJ1dHRvbnNIaWRlTW9iaWxlICYmICdzY3JvbGxCdXR0b25zSGlkZU1vYmlsZSddLFxuICAgIHNjcm9sbGFibGVYOiBbc2Nyb2xsYWJsZVggJiYgJ3Njcm9sbGFibGVYJ10sXG4gICAgaGlkZVNjcm9sbGJhcjogW2hpZGVTY3JvbGxiYXIgJiYgJ2hpZGVTY3JvbGxiYXInXVxuICB9O1xuICByZXR1cm4gY29tcG9zZUNsYXNzZXMoc2xvdHMsIGdldFRhYnNVdGlsaXR5Q2xhc3MsIGNsYXNzZXMpO1xufTtcbmNvbnN0IFRhYnNSb290ID0gc3R5bGVkKCdkaXYnLCB7XG4gIG5hbWU6ICdNdWlUYWJzJyxcbiAgc2xvdDogJ1Jvb3QnLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBvd25lclN0YXRlXG4gICAgfSA9IHByb3BzO1xuICAgIHJldHVybiBbe1xuICAgICAgW2AmIC4ke3RhYnNDbGFzc2VzLnNjcm9sbEJ1dHRvbnN9YF06IHN0eWxlcy5zY3JvbGxCdXR0b25zXG4gICAgfSwge1xuICAgICAgW2AmIC4ke3RhYnNDbGFzc2VzLnNjcm9sbEJ1dHRvbnN9YF06IG93bmVyU3RhdGUuc2Nyb2xsQnV0dG9uc0hpZGVNb2JpbGUgJiYgc3R5bGVzLnNjcm9sbEJ1dHRvbnNIaWRlTW9iaWxlXG4gICAgfSwgc3R5bGVzLnJvb3QsIG93bmVyU3RhdGUudmVydGljYWwgJiYgc3R5bGVzLnZlcnRpY2FsXTtcbiAgfVxufSkoKHtcbiAgb3duZXJTdGF0ZSxcbiAgdGhlbWVcbn0pID0+IF9leHRlbmRzKHtcbiAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxuICBtaW5IZWlnaHQ6IDQ4LFxuICAvLyBBZGQgaU9TIG1vbWVudHVtIHNjcm9sbGluZyBmb3IgaU9TIDwgMTMuMFxuICBXZWJraXRPdmVyZmxvd1Njcm9sbGluZzogJ3RvdWNoJyxcbiAgZGlzcGxheTogJ2ZsZXgnXG59LCBvd25lclN0YXRlLnZlcnRpY2FsICYmIHtcbiAgZmxleERpcmVjdGlvbjogJ2NvbHVtbidcbn0sIG93bmVyU3RhdGUuc2Nyb2xsQnV0dG9uc0hpZGVNb2JpbGUgJiYge1xuICBbYCYgLiR7dGFic0NsYXNzZXMuc2Nyb2xsQnV0dG9uc31gXToge1xuICAgIFt0aGVtZS5icmVha3BvaW50cy5kb3duKCdzbScpXToge1xuICAgICAgZGlzcGxheTogJ25vbmUnXG4gICAgfVxuICB9XG59KSk7XG5jb25zdCBUYWJzU2Nyb2xsZXIgPSBzdHlsZWQoJ2RpdicsIHtcbiAgbmFtZTogJ011aVRhYnMnLFxuICBzbG90OiAnU2Nyb2xsZXInLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBvd25lclN0YXRlXG4gICAgfSA9IHByb3BzO1xuICAgIHJldHVybiBbc3R5bGVzLnNjcm9sbGVyLCBvd25lclN0YXRlLmZpeGVkICYmIHN0eWxlcy5maXhlZCwgb3duZXJTdGF0ZS5oaWRlU2Nyb2xsYmFyICYmIHN0eWxlcy5oaWRlU2Nyb2xsYmFyLCBvd25lclN0YXRlLnNjcm9sbGFibGVYICYmIHN0eWxlcy5zY3JvbGxhYmxlWCwgb3duZXJTdGF0ZS5zY3JvbGxhYmxlWSAmJiBzdHlsZXMuc2Nyb2xsYWJsZVldO1xuICB9XG59KSgoe1xuICBvd25lclN0YXRlXG59KSA9PiBfZXh0ZW5kcyh7XG4gIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICBkaXNwbGF5OiAnaW5saW5lLWJsb2NrJyxcbiAgZmxleDogJzEgMSBhdXRvJyxcbiAgd2hpdGVTcGFjZTogJ25vd3JhcCdcbn0sIG93bmVyU3RhdGUuZml4ZWQgJiYge1xuICBvdmVyZmxvd1g6ICdoaWRkZW4nLFxuICB3aWR0aDogJzEwMCUnXG59LCBvd25lclN0YXRlLmhpZGVTY3JvbGxiYXIgJiYge1xuICAvLyBIaWRlIGRpbWVuc2lvbmxlc3Mgc2Nyb2xsYmFyIG9uIG1hY09TXG4gIHNjcm9sbGJhcldpZHRoOiAnbm9uZScsXG4gIC8vIEZpcmVmb3hcbiAgJyY6Oi13ZWJraXQtc2Nyb2xsYmFyJzoge1xuICAgIGRpc3BsYXk6ICdub25lJyAvLyBTYWZhcmkgKyBDaHJvbWVcbiAgfVxufSwgb3duZXJTdGF0ZS5zY3JvbGxhYmxlWCAmJiB7XG4gIG92ZXJmbG93WDogJ2F1dG8nLFxuICBvdmVyZmxvd1k6ICdoaWRkZW4nXG59LCBvd25lclN0YXRlLnNjcm9sbGFibGVZICYmIHtcbiAgb3ZlcmZsb3dZOiAnYXV0bycsXG4gIG92ZXJmbG93WDogJ2hpZGRlbidcbn0pKTtcbmNvbnN0IEZsZXhDb250YWluZXIgPSBzdHlsZWQoJ2RpdicsIHtcbiAgbmFtZTogJ011aVRhYnMnLFxuICBzbG90OiAnRmxleENvbnRhaW5lcicsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9ID0gcHJvcHM7XG4gICAgcmV0dXJuIFtzdHlsZXMuZmxleENvbnRhaW5lciwgb3duZXJTdGF0ZS52ZXJ0aWNhbCAmJiBzdHlsZXMuZmxleENvbnRhaW5lclZlcnRpY2FsLCBvd25lclN0YXRlLmNlbnRlcmVkICYmIHN0eWxlcy5jZW50ZXJlZF07XG4gIH1cbn0pKCh7XG4gIG93bmVyU3RhdGVcbn0pID0+IF9leHRlbmRzKHtcbiAgZGlzcGxheTogJ2ZsZXgnXG59LCBvd25lclN0YXRlLnZlcnRpY2FsICYmIHtcbiAgZmxleERpcmVjdGlvbjogJ2NvbHVtbidcbn0sIG93bmVyU3RhdGUuY2VudGVyZWQgJiYge1xuICBqdXN0aWZ5Q29udGVudDogJ2NlbnRlcidcbn0pKTtcbmNvbnN0IFRhYnNJbmRpY2F0b3IgPSBzdHlsZWQoJ3NwYW4nLCB7XG4gIG5hbWU6ICdNdWlUYWJzJyxcbiAgc2xvdDogJ0luZGljYXRvcicsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4gc3R5bGVzLmluZGljYXRvclxufSkoKHtcbiAgb3duZXJTdGF0ZSxcbiAgdGhlbWVcbn0pID0+IF9leHRlbmRzKHtcbiAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gIGhlaWdodDogMixcbiAgYm90dG9tOiAwLFxuICB3aWR0aDogJzEwMCUnLFxuICB0cmFuc2l0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoKVxufSwgb3duZXJTdGF0ZS5pbmRpY2F0b3JDb2xvciA9PT0gJ3ByaW1hcnknICYmIHtcbiAgYmFja2dyb3VuZENvbG9yOiAodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZS5wcmltYXJ5Lm1haW5cbn0sIG93bmVyU3RhdGUuaW5kaWNhdG9yQ29sb3IgPT09ICdzZWNvbmRhcnknICYmIHtcbiAgYmFja2dyb3VuZENvbG9yOiAodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZS5zZWNvbmRhcnkubWFpblxufSwgb3duZXJTdGF0ZS52ZXJ0aWNhbCAmJiB7XG4gIGhlaWdodDogJzEwMCUnLFxuICB3aWR0aDogMixcbiAgcmlnaHQ6IDBcbn0pKTtcbmNvbnN0IFRhYnNTY3JvbGxiYXJTaXplID0gc3R5bGVkKFNjcm9sbGJhclNpemUpKHtcbiAgb3ZlcmZsb3dYOiAnYXV0bycsXG4gIG92ZXJmbG93WTogJ2hpZGRlbicsXG4gIC8vIEhpZGUgZGltZW5zaW9ubGVzcyBzY3JvbGxiYXIgb24gbWFjT1NcbiAgc2Nyb2xsYmFyV2lkdGg6ICdub25lJyxcbiAgLy8gRmlyZWZveFxuICAnJjo6LXdlYmtpdC1zY3JvbGxiYXInOiB7XG4gICAgZGlzcGxheTogJ25vbmUnIC8vIFNhZmFyaSArIENocm9tZVxuICB9XG59KTtcbmNvbnN0IGRlZmF1bHRJbmRpY2F0b3JTdHlsZSA9IHt9O1xubGV0IHdhcm5lZE9uY2VUYWJQcmVzZW50ID0gZmFsc2U7XG5jb25zdCBUYWJzID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gVGFicyhpblByb3BzLCByZWYpIHtcbiAgY29uc3QgcHJvcHMgPSB1c2VEZWZhdWx0UHJvcHMoe1xuICAgIHByb3BzOiBpblByb3BzLFxuICAgIG5hbWU6ICdNdWlUYWJzJ1xuICB9KTtcbiAgY29uc3QgdGhlbWUgPSB1c2VUaGVtZSgpO1xuICBjb25zdCBpc1J0bCA9IHVzZVJ0bCgpO1xuICBjb25zdCB7XG4gICAgICAnYXJpYS1sYWJlbCc6IGFyaWFMYWJlbCxcbiAgICAgICdhcmlhLWxhYmVsbGVkYnknOiBhcmlhTGFiZWxsZWRCeSxcbiAgICAgIGFjdGlvbixcbiAgICAgIGNlbnRlcmVkID0gZmFsc2UsXG4gICAgICBjaGlsZHJlbjogY2hpbGRyZW5Qcm9wLFxuICAgICAgY2xhc3NOYW1lLFxuICAgICAgY29tcG9uZW50ID0gJ2RpdicsXG4gICAgICBhbGxvd1Njcm9sbEJ1dHRvbnNNb2JpbGUgPSBmYWxzZSxcbiAgICAgIGluZGljYXRvckNvbG9yID0gJ3ByaW1hcnknLFxuICAgICAgb25DaGFuZ2UsXG4gICAgICBvcmllbnRhdGlvbiA9ICdob3Jpem9udGFsJyxcbiAgICAgIFNjcm9sbEJ1dHRvbkNvbXBvbmVudCA9IFRhYlNjcm9sbEJ1dHRvbixcbiAgICAgIHNjcm9sbEJ1dHRvbnMgPSAnYXV0bycsXG4gICAgICBzZWxlY3Rpb25Gb2xsb3dzRm9jdXMsXG4gICAgICBzbG90cyA9IHt9LFxuICAgICAgc2xvdFByb3BzID0ge30sXG4gICAgICBUYWJJbmRpY2F0b3JQcm9wcyA9IHt9LFxuICAgICAgVGFiU2Nyb2xsQnV0dG9uUHJvcHMgPSB7fSxcbiAgICAgIHRleHRDb2xvciA9ICdwcmltYXJ5JyxcbiAgICAgIHZhbHVlLFxuICAgICAgdmFyaWFudCA9ICdzdGFuZGFyZCcsXG4gICAgICB2aXNpYmxlU2Nyb2xsYmFyID0gZmFsc2VcbiAgICB9ID0gcHJvcHMsXG4gICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkKTtcbiAgY29uc3Qgc2Nyb2xsYWJsZSA9IHZhcmlhbnQgPT09ICdzY3JvbGxhYmxlJztcbiAgY29uc3QgdmVydGljYWwgPSBvcmllbnRhdGlvbiA9PT0gJ3ZlcnRpY2FsJztcbiAgY29uc3Qgc2Nyb2xsU3RhcnQgPSB2ZXJ0aWNhbCA/ICdzY3JvbGxUb3AnIDogJ3Njcm9sbExlZnQnO1xuICBjb25zdCBzdGFydCA9IHZlcnRpY2FsID8gJ3RvcCcgOiAnbGVmdCc7XG4gIGNvbnN0IGVuZCA9IHZlcnRpY2FsID8gJ2JvdHRvbScgOiAncmlnaHQnO1xuICBjb25zdCBjbGllbnRTaXplID0gdmVydGljYWwgPyAnY2xpZW50SGVpZ2h0JyA6ICdjbGllbnRXaWR0aCc7XG4gIGNvbnN0IHNpemUgPSB2ZXJ0aWNhbCA/ICdoZWlnaHQnIDogJ3dpZHRoJztcbiAgY29uc3Qgb3duZXJTdGF0ZSA9IF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgIGNvbXBvbmVudCxcbiAgICBhbGxvd1Njcm9sbEJ1dHRvbnNNb2JpbGUsXG4gICAgaW5kaWNhdG9yQ29sb3IsXG4gICAgb3JpZW50YXRpb24sXG4gICAgdmVydGljYWwsXG4gICAgc2Nyb2xsQnV0dG9ucyxcbiAgICB0ZXh0Q29sb3IsXG4gICAgdmFyaWFudCxcbiAgICB2aXNpYmxlU2Nyb2xsYmFyLFxuICAgIGZpeGVkOiAhc2Nyb2xsYWJsZSxcbiAgICBoaWRlU2Nyb2xsYmFyOiBzY3JvbGxhYmxlICYmICF2aXNpYmxlU2Nyb2xsYmFyLFxuICAgIHNjcm9sbGFibGVYOiBzY3JvbGxhYmxlICYmICF2ZXJ0aWNhbCxcbiAgICBzY3JvbGxhYmxlWTogc2Nyb2xsYWJsZSAmJiB2ZXJ0aWNhbCxcbiAgICBjZW50ZXJlZDogY2VudGVyZWQgJiYgIXNjcm9sbGFibGUsXG4gICAgc2Nyb2xsQnV0dG9uc0hpZGVNb2JpbGU6ICFhbGxvd1Njcm9sbEJ1dHRvbnNNb2JpbGVcbiAgfSk7XG4gIGNvbnN0IGNsYXNzZXMgPSB1c2VVdGlsaXR5Q2xhc3Nlcyhvd25lclN0YXRlKTtcbiAgY29uc3Qgc3RhcnRTY3JvbGxCdXR0b25JY29uUHJvcHMgPSB1c2VTbG90UHJvcHMoe1xuICAgIGVsZW1lbnRUeXBlOiBzbG90cy5TdGFydFNjcm9sbEJ1dHRvbkljb24sXG4gICAgZXh0ZXJuYWxTbG90UHJvcHM6IHNsb3RQcm9wcy5zdGFydFNjcm9sbEJ1dHRvbkljb24sXG4gICAgb3duZXJTdGF0ZVxuICB9KTtcbiAgY29uc3QgZW5kU2Nyb2xsQnV0dG9uSWNvblByb3BzID0gdXNlU2xvdFByb3BzKHtcbiAgICBlbGVtZW50VHlwZTogc2xvdHMuRW5kU2Nyb2xsQnV0dG9uSWNvbixcbiAgICBleHRlcm5hbFNsb3RQcm9wczogc2xvdFByb3BzLmVuZFNjcm9sbEJ1dHRvbkljb24sXG4gICAgb3duZXJTdGF0ZVxuICB9KTtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpZiAoY2VudGVyZWQgJiYgc2Nyb2xsYWJsZSkge1xuICAgICAgY29uc29sZS5lcnJvcignTVVJOiBZb3UgY2FuIG5vdCB1c2UgdGhlIGBjZW50ZXJlZD17dHJ1ZX1gIGFuZCBgdmFyaWFudD1cInNjcm9sbGFibGVcImAgcHJvcGVydGllcyAnICsgJ2F0IHRoZSBzYW1lIHRpbWUgb24gYSBgVGFic2AgY29tcG9uZW50LicpO1xuICAgIH1cbiAgfVxuICBjb25zdCBbbW91bnRlZCwgc2V0TW91bnRlZF0gPSBSZWFjdC51c2VTdGF0ZShmYWxzZSk7XG4gIGNvbnN0IFtpbmRpY2F0b3JTdHlsZSwgc2V0SW5kaWNhdG9yU3R5bGVdID0gUmVhY3QudXNlU3RhdGUoZGVmYXVsdEluZGljYXRvclN0eWxlKTtcbiAgY29uc3QgW2Rpc3BsYXlTdGFydFNjcm9sbCwgc2V0RGlzcGxheVN0YXJ0U2Nyb2xsXSA9IFJlYWN0LnVzZVN0YXRlKGZhbHNlKTtcbiAgY29uc3QgW2Rpc3BsYXlFbmRTY3JvbGwsIHNldERpc3BsYXlFbmRTY3JvbGxdID0gUmVhY3QudXNlU3RhdGUoZmFsc2UpO1xuICBjb25zdCBbdXBkYXRlU2Nyb2xsT2JzZXJ2ZXIsIHNldFVwZGF0ZVNjcm9sbE9ic2VydmVyXSA9IFJlYWN0LnVzZVN0YXRlKGZhbHNlKTtcbiAgY29uc3QgW3Njcm9sbGVyU3R5bGUsIHNldFNjcm9sbGVyU3R5bGVdID0gUmVhY3QudXNlU3RhdGUoe1xuICAgIG92ZXJmbG93OiAnaGlkZGVuJyxcbiAgICBzY3JvbGxiYXJXaWR0aDogMFxuICB9KTtcbiAgY29uc3QgdmFsdWVUb0luZGV4ID0gbmV3IE1hcCgpO1xuICBjb25zdCB0YWJzUmVmID0gUmVhY3QudXNlUmVmKG51bGwpO1xuICBjb25zdCB0YWJMaXN0UmVmID0gUmVhY3QudXNlUmVmKG51bGwpO1xuICBjb25zdCBnZXRUYWJzTWV0YSA9ICgpID0+IHtcbiAgICBjb25zdCB0YWJzTm9kZSA9IHRhYnNSZWYuY3VycmVudDtcbiAgICBsZXQgdGFic01ldGE7XG4gICAgaWYgKHRhYnNOb2RlKSB7XG4gICAgICBjb25zdCByZWN0ID0gdGFic05vZGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAvLyBjcmVhdGUgYSBuZXcgb2JqZWN0IHdpdGggQ2xpZW50UmVjdCBjbGFzcyBwcm9wcyArIHNjcm9sbExlZnRcbiAgICAgIHRhYnNNZXRhID0ge1xuICAgICAgICBjbGllbnRXaWR0aDogdGFic05vZGUuY2xpZW50V2lkdGgsXG4gICAgICAgIHNjcm9sbExlZnQ6IHRhYnNOb2RlLnNjcm9sbExlZnQsXG4gICAgICAgIHNjcm9sbFRvcDogdGFic05vZGUuc2Nyb2xsVG9wLFxuICAgICAgICBzY3JvbGxMZWZ0Tm9ybWFsaXplZDogZ2V0Tm9ybWFsaXplZFNjcm9sbExlZnQodGFic05vZGUsIGlzUnRsID8gJ3J0bCcgOiAnbHRyJyksXG4gICAgICAgIHNjcm9sbFdpZHRoOiB0YWJzTm9kZS5zY3JvbGxXaWR0aCxcbiAgICAgICAgdG9wOiByZWN0LnRvcCxcbiAgICAgICAgYm90dG9tOiByZWN0LmJvdHRvbSxcbiAgICAgICAgbGVmdDogcmVjdC5sZWZ0LFxuICAgICAgICByaWdodDogcmVjdC5yaWdodFxuICAgICAgfTtcbiAgICB9XG4gICAgbGV0IHRhYk1ldGE7XG4gICAgaWYgKHRhYnNOb2RlICYmIHZhbHVlICE9PSBmYWxzZSkge1xuICAgICAgY29uc3QgY2hpbGRyZW4gPSB0YWJMaXN0UmVmLmN1cnJlbnQuY2hpbGRyZW47XG4gICAgICBpZiAoY2hpbGRyZW4ubGVuZ3RoID4gMCkge1xuICAgICAgICBjb25zdCB0YWIgPSBjaGlsZHJlblt2YWx1ZVRvSW5kZXguZ2V0KHZhbHVlKV07XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgaWYgKCF0YWIpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoW2BNVUk6IFRoZSBcXGB2YWx1ZVxcYCBwcm92aWRlZCB0byB0aGUgVGFicyBjb21wb25lbnQgaXMgaW52YWxpZC5gLCBgTm9uZSBvZiB0aGUgVGFicycgY2hpbGRyZW4gbWF0Y2ggd2l0aCBcIiR7dmFsdWV9XCIuYCwgdmFsdWVUb0luZGV4LmtleXMgPyBgWW91IGNhbiBwcm92aWRlIG9uZSBvZiB0aGUgZm9sbG93aW5nIHZhbHVlczogJHtBcnJheS5mcm9tKHZhbHVlVG9JbmRleC5rZXlzKCkpLmpvaW4oJywgJyl9LmAgOiBudWxsXS5qb2luKCdcXG4nKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRhYk1ldGEgPSB0YWIgPyB0YWIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkgOiBudWxsO1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Rlc3QnICYmICF3YXJuZWRPbmNlVGFiUHJlc2VudCAmJiB0YWJNZXRhICYmIHRhYk1ldGEud2lkdGggPT09IDAgJiYgdGFiTWV0YS5oZWlnaHQgPT09IDAgJiZcbiAgICAgICAgICAvLyBpZiB0aGUgd2hvbGUgVGFicyBjb21wb25lbnQgaXMgaGlkZGVuLCBkb24ndCB3YXJuXG4gICAgICAgICAgdGFic01ldGEuY2xpZW50V2lkdGggIT09IDApIHtcbiAgICAgICAgICAgIHRhYnNNZXRhID0gbnVsbDtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoWydNVUk6IFRoZSBgdmFsdWVgIHByb3ZpZGVkIHRvIHRoZSBUYWJzIGNvbXBvbmVudCBpcyBpbnZhbGlkLicsIGBUaGUgVGFiIHdpdGggdGhpcyBcXGB2YWx1ZVxcYCAoXCIke3ZhbHVlfVwiKSBpcyBub3QgcGFydCBvZiB0aGUgZG9jdW1lbnQgbGF5b3V0LmAsIFwiTWFrZSBzdXJlIHRoZSB0YWIgaXRlbSBpcyBwcmVzZW50IGluIHRoZSBkb2N1bWVudCBvciB0aGF0IGl0J3Mgbm90IGBkaXNwbGF5OiBub25lYC5cIl0uam9pbignXFxuJykpO1xuICAgICAgICAgICAgd2FybmVkT25jZVRhYlByZXNlbnQgPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgdGFic01ldGEsXG4gICAgICB0YWJNZXRhXG4gICAgfTtcbiAgfTtcbiAgY29uc3QgdXBkYXRlSW5kaWNhdG9yU3RhdGUgPSB1c2VFdmVudENhbGxiYWNrKCgpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICB0YWJzTWV0YSxcbiAgICAgIHRhYk1ldGFcbiAgICB9ID0gZ2V0VGFic01ldGEoKTtcbiAgICBsZXQgc3RhcnRWYWx1ZSA9IDA7XG4gICAgbGV0IHN0YXJ0SW5kaWNhdG9yO1xuICAgIGlmICh2ZXJ0aWNhbCkge1xuICAgICAgc3RhcnRJbmRpY2F0b3IgPSAndG9wJztcbiAgICAgIGlmICh0YWJNZXRhICYmIHRhYnNNZXRhKSB7XG4gICAgICAgIHN0YXJ0VmFsdWUgPSB0YWJNZXRhLnRvcCAtIHRhYnNNZXRhLnRvcCArIHRhYnNNZXRhLnNjcm9sbFRvcDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgc3RhcnRJbmRpY2F0b3IgPSBpc1J0bCA/ICdyaWdodCcgOiAnbGVmdCc7XG4gICAgICBpZiAodGFiTWV0YSAmJiB0YWJzTWV0YSkge1xuICAgICAgICBjb25zdCBjb3JyZWN0aW9uID0gaXNSdGwgPyB0YWJzTWV0YS5zY3JvbGxMZWZ0Tm9ybWFsaXplZCArIHRhYnNNZXRhLmNsaWVudFdpZHRoIC0gdGFic01ldGEuc2Nyb2xsV2lkdGggOiB0YWJzTWV0YS5zY3JvbGxMZWZ0O1xuICAgICAgICBzdGFydFZhbHVlID0gKGlzUnRsID8gLTEgOiAxKSAqICh0YWJNZXRhW3N0YXJ0SW5kaWNhdG9yXSAtIHRhYnNNZXRhW3N0YXJ0SW5kaWNhdG9yXSArIGNvcnJlY3Rpb24pO1xuICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBuZXdJbmRpY2F0b3JTdHlsZSA9IHtcbiAgICAgIFtzdGFydEluZGljYXRvcl06IHN0YXJ0VmFsdWUsXG4gICAgICAvLyBNYXkgYmUgd3JvbmcgdW50aWwgdGhlIGZvbnQgaXMgbG9hZGVkLlxuICAgICAgW3NpemVdOiB0YWJNZXRhID8gdGFiTWV0YVtzaXplXSA6IDBcbiAgICB9O1xuXG4gICAgLy8gSUUxMSBzdXBwb3J0LCByZXBsYWNlIHdpdGggTnVtYmVyLmlzTmFOXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlc3RyaWN0ZWQtZ2xvYmFsc1xuICAgIGlmIChpc05hTihpbmRpY2F0b3JTdHlsZVtzdGFydEluZGljYXRvcl0pIHx8IGlzTmFOKGluZGljYXRvclN0eWxlW3NpemVdKSkge1xuICAgICAgc2V0SW5kaWNhdG9yU3R5bGUobmV3SW5kaWNhdG9yU3R5bGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBkU3RhcnQgPSBNYXRoLmFicyhpbmRpY2F0b3JTdHlsZVtzdGFydEluZGljYXRvcl0gLSBuZXdJbmRpY2F0b3JTdHlsZVtzdGFydEluZGljYXRvcl0pO1xuICAgICAgY29uc3QgZFNpemUgPSBNYXRoLmFicyhpbmRpY2F0b3JTdHlsZVtzaXplXSAtIG5ld0luZGljYXRvclN0eWxlW3NpemVdKTtcbiAgICAgIGlmIChkU3RhcnQgPj0gMSB8fCBkU2l6ZSA+PSAxKSB7XG4gICAgICAgIHNldEluZGljYXRvclN0eWxlKG5ld0luZGljYXRvclN0eWxlKTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuICBjb25zdCBzY3JvbGwgPSAoc2Nyb2xsVmFsdWUsIHtcbiAgICBhbmltYXRpb24gPSB0cnVlXG4gIH0gPSB7fSkgPT4ge1xuICAgIGlmIChhbmltYXRpb24pIHtcbiAgICAgIGFuaW1hdGUoc2Nyb2xsU3RhcnQsIHRhYnNSZWYuY3VycmVudCwgc2Nyb2xsVmFsdWUsIHtcbiAgICAgICAgZHVyYXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmR1cmF0aW9uLnN0YW5kYXJkXG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGFic1JlZi5jdXJyZW50W3Njcm9sbFN0YXJ0XSA9IHNjcm9sbFZhbHVlO1xuICAgIH1cbiAgfTtcbiAgY29uc3QgbW92ZVRhYnNTY3JvbGwgPSBkZWx0YSA9PiB7XG4gICAgbGV0IHNjcm9sbFZhbHVlID0gdGFic1JlZi5jdXJyZW50W3Njcm9sbFN0YXJ0XTtcbiAgICBpZiAodmVydGljYWwpIHtcbiAgICAgIHNjcm9sbFZhbHVlICs9IGRlbHRhO1xuICAgIH0gZWxzZSB7XG4gICAgICBzY3JvbGxWYWx1ZSArPSBkZWx0YSAqIChpc1J0bCA/IC0xIDogMSk7XG4gICAgICAvLyBGaXggZm9yIEVkZ2VcbiAgICAgIHNjcm9sbFZhbHVlICo9IGlzUnRsICYmIGRldGVjdFNjcm9sbFR5cGUoKSA9PT0gJ3JldmVyc2UnID8gLTEgOiAxO1xuICAgIH1cbiAgICBzY3JvbGwoc2Nyb2xsVmFsdWUpO1xuICB9O1xuICBjb25zdCBnZXRTY3JvbGxTaXplID0gKCkgPT4ge1xuICAgIGNvbnN0IGNvbnRhaW5lclNpemUgPSB0YWJzUmVmLmN1cnJlbnRbY2xpZW50U2l6ZV07XG4gICAgbGV0IHRvdGFsU2l6ZSA9IDA7XG4gICAgY29uc3QgY2hpbGRyZW4gPSBBcnJheS5mcm9tKHRhYkxpc3RSZWYuY3VycmVudC5jaGlsZHJlbik7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgY29uc3QgdGFiID0gY2hpbGRyZW5baV07XG4gICAgICBpZiAodG90YWxTaXplICsgdGFiW2NsaWVudFNpemVdID4gY29udGFpbmVyU2l6ZSkge1xuICAgICAgICAvLyBJZiB0aGUgZmlyc3QgaXRlbSBpcyBsb25nZXIgdGhhbiB0aGUgY29udGFpbmVyIHNpemUsIHRoZW4gb25seSBzY3JvbGxcbiAgICAgICAgLy8gYnkgdGhlIGNvbnRhaW5lciBzaXplLlxuICAgICAgICBpZiAoaSA9PT0gMCkge1xuICAgICAgICAgIHRvdGFsU2l6ZSA9IGNvbnRhaW5lclNpemU7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICB0b3RhbFNpemUgKz0gdGFiW2NsaWVudFNpemVdO1xuICAgIH1cbiAgICByZXR1cm4gdG90YWxTaXplO1xuICB9O1xuICBjb25zdCBoYW5kbGVTdGFydFNjcm9sbENsaWNrID0gKCkgPT4ge1xuICAgIG1vdmVUYWJzU2Nyb2xsKC0xICogZ2V0U2Nyb2xsU2l6ZSgpKTtcbiAgfTtcbiAgY29uc3QgaGFuZGxlRW5kU2Nyb2xsQ2xpY2sgPSAoKSA9PiB7XG4gICAgbW92ZVRhYnNTY3JvbGwoZ2V0U2Nyb2xsU2l6ZSgpKTtcbiAgfTtcblxuICAvLyBUT0RPIFJlbW92ZSA8U2Nyb2xsYmFyU2l6ZSAvPiBhcyBicm93c2VyIHN1cHBvcnQgZm9yIGhpZGluZyB0aGUgc2Nyb2xsYmFyXG4gIC8vIHdpdGggQ1NTIGltcHJvdmVzLlxuICBjb25zdCBoYW5kbGVTY3JvbGxiYXJTaXplQ2hhbmdlID0gUmVhY3QudXNlQ2FsbGJhY2soc2Nyb2xsYmFyV2lkdGggPT4ge1xuICAgIHNldFNjcm9sbGVyU3R5bGUoe1xuICAgICAgb3ZlcmZsb3c6IG51bGwsXG4gICAgICBzY3JvbGxiYXJXaWR0aFxuICAgIH0pO1xuICB9LCBbXSk7XG4gIGNvbnN0IGdldENvbmRpdGlvbmFsRWxlbWVudHMgPSAoKSA9PiB7XG4gICAgY29uc3QgY29uZGl0aW9uYWxFbGVtZW50cyA9IHt9O1xuICAgIGNvbmRpdGlvbmFsRWxlbWVudHMuc2Nyb2xsYmFyU2l6ZUxpc3RlbmVyID0gc2Nyb2xsYWJsZSA/IC8qI19fUFVSRV9fKi9fanN4KFRhYnNTY3JvbGxiYXJTaXplLCB7XG4gICAgICBvbkNoYW5nZTogaGFuZGxlU2Nyb2xsYmFyU2l6ZUNoYW5nZSxcbiAgICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnNjcm9sbGFibGVYLCBjbGFzc2VzLmhpZGVTY3JvbGxiYXIpXG4gICAgfSkgOiBudWxsO1xuICAgIGNvbnN0IHNjcm9sbEJ1dHRvbnNBY3RpdmUgPSBkaXNwbGF5U3RhcnRTY3JvbGwgfHwgZGlzcGxheUVuZFNjcm9sbDtcbiAgICBjb25zdCBzaG93U2Nyb2xsQnV0dG9ucyA9IHNjcm9sbGFibGUgJiYgKHNjcm9sbEJ1dHRvbnMgPT09ICdhdXRvJyAmJiBzY3JvbGxCdXR0b25zQWN0aXZlIHx8IHNjcm9sbEJ1dHRvbnMgPT09IHRydWUpO1xuICAgIGNvbmRpdGlvbmFsRWxlbWVudHMuc2Nyb2xsQnV0dG9uU3RhcnQgPSBzaG93U2Nyb2xsQnV0dG9ucyA/IC8qI19fUFVSRV9fKi9fanN4KFNjcm9sbEJ1dHRvbkNvbXBvbmVudCwgX2V4dGVuZHMoe1xuICAgICAgc2xvdHM6IHtcbiAgICAgICAgU3RhcnRTY3JvbGxCdXR0b25JY29uOiBzbG90cy5TdGFydFNjcm9sbEJ1dHRvbkljb25cbiAgICAgIH0sXG4gICAgICBzbG90UHJvcHM6IHtcbiAgICAgICAgc3RhcnRTY3JvbGxCdXR0b25JY29uOiBzdGFydFNjcm9sbEJ1dHRvbkljb25Qcm9wc1xuICAgICAgfSxcbiAgICAgIG9yaWVudGF0aW9uOiBvcmllbnRhdGlvbixcbiAgICAgIGRpcmVjdGlvbjogaXNSdGwgPyAncmlnaHQnIDogJ2xlZnQnLFxuICAgICAgb25DbGljazogaGFuZGxlU3RhcnRTY3JvbGxDbGljayxcbiAgICAgIGRpc2FibGVkOiAhZGlzcGxheVN0YXJ0U2Nyb2xsXG4gICAgfSwgVGFiU2Nyb2xsQnV0dG9uUHJvcHMsIHtcbiAgICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnNjcm9sbEJ1dHRvbnMsIFRhYlNjcm9sbEJ1dHRvblByb3BzLmNsYXNzTmFtZSlcbiAgICB9KSkgOiBudWxsO1xuICAgIGNvbmRpdGlvbmFsRWxlbWVudHMuc2Nyb2xsQnV0dG9uRW5kID0gc2hvd1Njcm9sbEJ1dHRvbnMgPyAvKiNfX1BVUkVfXyovX2pzeChTY3JvbGxCdXR0b25Db21wb25lbnQsIF9leHRlbmRzKHtcbiAgICAgIHNsb3RzOiB7XG4gICAgICAgIEVuZFNjcm9sbEJ1dHRvbkljb246IHNsb3RzLkVuZFNjcm9sbEJ1dHRvbkljb25cbiAgICAgIH0sXG4gICAgICBzbG90UHJvcHM6IHtcbiAgICAgICAgZW5kU2Nyb2xsQnV0dG9uSWNvbjogZW5kU2Nyb2xsQnV0dG9uSWNvblByb3BzXG4gICAgICB9LFxuICAgICAgb3JpZW50YXRpb246IG9yaWVudGF0aW9uLFxuICAgICAgZGlyZWN0aW9uOiBpc1J0bCA/ICdsZWZ0JyA6ICdyaWdodCcsXG4gICAgICBvbkNsaWNrOiBoYW5kbGVFbmRTY3JvbGxDbGljayxcbiAgICAgIGRpc2FibGVkOiAhZGlzcGxheUVuZFNjcm9sbFxuICAgIH0sIFRhYlNjcm9sbEJ1dHRvblByb3BzLCB7XG4gICAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5zY3JvbGxCdXR0b25zLCBUYWJTY3JvbGxCdXR0b25Qcm9wcy5jbGFzc05hbWUpXG4gICAgfSkpIDogbnVsbDtcbiAgICByZXR1cm4gY29uZGl0aW9uYWxFbGVtZW50cztcbiAgfTtcbiAgY29uc3Qgc2Nyb2xsU2VsZWN0ZWRJbnRvVmlldyA9IHVzZUV2ZW50Q2FsbGJhY2soYW5pbWF0aW9uID0+IHtcbiAgICBjb25zdCB7XG4gICAgICB0YWJzTWV0YSxcbiAgICAgIHRhYk1ldGFcbiAgICB9ID0gZ2V0VGFic01ldGEoKTtcbiAgICBpZiAoIXRhYk1ldGEgfHwgIXRhYnNNZXRhKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICh0YWJNZXRhW3N0YXJ0XSA8IHRhYnNNZXRhW3N0YXJ0XSkge1xuICAgICAgLy8gbGVmdCBzaWRlIG9mIGJ1dHRvbiBpcyBvdXQgb2Ygdmlld1xuICAgICAgY29uc3QgbmV4dFNjcm9sbFN0YXJ0ID0gdGFic01ldGFbc2Nyb2xsU3RhcnRdICsgKHRhYk1ldGFbc3RhcnRdIC0gdGFic01ldGFbc3RhcnRdKTtcbiAgICAgIHNjcm9sbChuZXh0U2Nyb2xsU3RhcnQsIHtcbiAgICAgICAgYW5pbWF0aW9uXG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKHRhYk1ldGFbZW5kXSA+IHRhYnNNZXRhW2VuZF0pIHtcbiAgICAgIC8vIHJpZ2h0IHNpZGUgb2YgYnV0dG9uIGlzIG91dCBvZiB2aWV3XG4gICAgICBjb25zdCBuZXh0U2Nyb2xsU3RhcnQgPSB0YWJzTWV0YVtzY3JvbGxTdGFydF0gKyAodGFiTWV0YVtlbmRdIC0gdGFic01ldGFbZW5kXSk7XG4gICAgICBzY3JvbGwobmV4dFNjcm9sbFN0YXJ0LCB7XG4gICAgICAgIGFuaW1hdGlvblxuICAgICAgfSk7XG4gICAgfVxuICB9KTtcbiAgY29uc3QgdXBkYXRlU2Nyb2xsQnV0dG9uU3RhdGUgPSB1c2VFdmVudENhbGxiYWNrKCgpID0+IHtcbiAgICBpZiAoc2Nyb2xsYWJsZSAmJiBzY3JvbGxCdXR0b25zICE9PSBmYWxzZSkge1xuICAgICAgc2V0VXBkYXRlU2Nyb2xsT2JzZXJ2ZXIoIXVwZGF0ZVNjcm9sbE9ic2VydmVyKTtcbiAgICB9XG4gIH0pO1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGNvbnN0IGhhbmRsZVJlc2l6ZSA9IGRlYm91bmNlKCgpID0+IHtcbiAgICAgIC8vIElmIHRoZSBUYWJzIGNvbXBvbmVudCBpcyByZXBsYWNlZCBieSBTdXNwZW5zZSB3aXRoIGEgZmFsbGJhY2ssIHRoZSBsYXN0XG4gICAgICAvLyBSZXNpemVPYnNlcnZlcidzIGhhbmRsZXIgdGhhdCBydW5zIGJlY2F1c2Ugb2YgdGhlIGNoYW5nZSBpbiB0aGUgbGF5b3V0IGlzIHRyeWluZyB0b1xuICAgICAgLy8gYWNjZXNzIGEgZG9tIG5vZGUgdGhhdCBpcyBubyBsb25nZXIgdGhlcmUgKGFzIHRoZSBmYWxsYmFjayBjb21wb25lbnQgaXMgYmVpbmcgc2hvd24gaW5zdGVhZCkuXG4gICAgICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL211aS9tYXRlcmlhbC11aS9pc3N1ZXMvMzMyNzZcbiAgICAgIC8vIFRPRE86IEFkZCB0ZXN0cyB0aGF0IHdpbGwgZW5zdXJlIHRoZSBjb21wb25lbnQgaXMgbm90IGZhaWxpbmcgd2hlblxuICAgICAgLy8gcmVwbGFjZWQgYnkgU3VzcGVuc2Ugd2l0aCBhIGZhbGxiYWNrLCBvbmNlIFJlYWN0IGlzIHVwZGF0ZWQgdG8gdmVyc2lvbiAxOFxuICAgICAgaWYgKHRhYnNSZWYuY3VycmVudCkge1xuICAgICAgICB1cGRhdGVJbmRpY2F0b3JTdGF0ZSgpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGxldCByZXNpemVPYnNlcnZlcjtcblxuICAgIC8qKlxuICAgICAqIEB0eXBlIHtNdXRhdGlvbkNhbGxiYWNrfVxuICAgICAqL1xuICAgIGNvbnN0IGhhbmRsZU11dGF0aW9uID0gcmVjb3JkcyA9PiB7XG4gICAgICByZWNvcmRzLmZvckVhY2gocmVjb3JkID0+IHtcbiAgICAgICAgcmVjb3JkLnJlbW92ZWROb2Rlcy5mb3JFYWNoKGl0ZW0gPT4ge1xuICAgICAgICAgIHZhciBfcmVzaXplT2JzZXJ2ZXI7XG4gICAgICAgICAgKF9yZXNpemVPYnNlcnZlciA9IHJlc2l6ZU9ic2VydmVyKSA9PSBudWxsIHx8IF9yZXNpemVPYnNlcnZlci51bm9ic2VydmUoaXRlbSk7XG4gICAgICAgIH0pO1xuICAgICAgICByZWNvcmQuYWRkZWROb2Rlcy5mb3JFYWNoKGl0ZW0gPT4ge1xuICAgICAgICAgIHZhciBfcmVzaXplT2JzZXJ2ZXIyO1xuICAgICAgICAgIChfcmVzaXplT2JzZXJ2ZXIyID0gcmVzaXplT2JzZXJ2ZXIpID09IG51bGwgfHwgX3Jlc2l6ZU9ic2VydmVyMi5vYnNlcnZlKGl0ZW0pO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgICAgaGFuZGxlUmVzaXplKCk7XG4gICAgICB1cGRhdGVTY3JvbGxCdXR0b25TdGF0ZSgpO1xuICAgIH07XG4gICAgY29uc3Qgd2luID0gb3duZXJXaW5kb3codGFic1JlZi5jdXJyZW50KTtcbiAgICB3aW4uYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgaGFuZGxlUmVzaXplKTtcbiAgICBsZXQgbXV0YXRpb25PYnNlcnZlcjtcbiAgICBpZiAodHlwZW9mIFJlc2l6ZU9ic2VydmVyICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgcmVzaXplT2JzZXJ2ZXIgPSBuZXcgUmVzaXplT2JzZXJ2ZXIoaGFuZGxlUmVzaXplKTtcbiAgICAgIEFycmF5LmZyb20odGFiTGlzdFJlZi5jdXJyZW50LmNoaWxkcmVuKS5mb3JFYWNoKGNoaWxkID0+IHtcbiAgICAgICAgcmVzaXplT2JzZXJ2ZXIub2JzZXJ2ZShjaGlsZCk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBNdXRhdGlvbk9ic2VydmVyICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgbXV0YXRpb25PYnNlcnZlciA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKGhhbmRsZU11dGF0aW9uKTtcbiAgICAgIG11dGF0aW9uT2JzZXJ2ZXIub2JzZXJ2ZSh0YWJMaXN0UmVmLmN1cnJlbnQsIHtcbiAgICAgICAgY2hpbGRMaXN0OiB0cnVlXG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIHZhciBfbXV0YXRpb25PYnNlcnZlciwgX3Jlc2l6ZU9ic2VydmVyMztcbiAgICAgIGhhbmRsZVJlc2l6ZS5jbGVhcigpO1xuICAgICAgd2luLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIGhhbmRsZVJlc2l6ZSk7XG4gICAgICAoX211dGF0aW9uT2JzZXJ2ZXIgPSBtdXRhdGlvbk9ic2VydmVyKSA9PSBudWxsIHx8IF9tdXRhdGlvbk9ic2VydmVyLmRpc2Nvbm5lY3QoKTtcbiAgICAgIChfcmVzaXplT2JzZXJ2ZXIzID0gcmVzaXplT2JzZXJ2ZXIpID09IG51bGwgfHwgX3Jlc2l6ZU9ic2VydmVyMy5kaXNjb25uZWN0KCk7XG4gICAgfTtcbiAgfSwgW3VwZGF0ZUluZGljYXRvclN0YXRlLCB1cGRhdGVTY3JvbGxCdXR0b25TdGF0ZV0pO1xuXG4gIC8qKlxuICAgKiBUb2dnbGUgdmlzaWJpbGl0eSBvZiBzdGFydCBhbmQgZW5kIHNjcm9sbCBidXR0b25zXG4gICAqIFVzaW5nIEludGVyc2VjdGlvbk9ic2VydmVyIG9uIGZpcnN0IGFuZCBsYXN0IFRhYnMuXG4gICAqL1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGNvbnN0IHRhYkxpc3RDaGlsZHJlbiA9IEFycmF5LmZyb20odGFiTGlzdFJlZi5jdXJyZW50LmNoaWxkcmVuKTtcbiAgICBjb25zdCBsZW5ndGggPSB0YWJMaXN0Q2hpbGRyZW4ubGVuZ3RoO1xuICAgIGlmICh0eXBlb2YgSW50ZXJzZWN0aW9uT2JzZXJ2ZXIgIT09ICd1bmRlZmluZWQnICYmIGxlbmd0aCA+IDAgJiYgc2Nyb2xsYWJsZSAmJiBzY3JvbGxCdXR0b25zICE9PSBmYWxzZSkge1xuICAgICAgY29uc3QgZmlyc3RUYWIgPSB0YWJMaXN0Q2hpbGRyZW5bMF07XG4gICAgICBjb25zdCBsYXN0VGFiID0gdGFiTGlzdENoaWxkcmVuW2xlbmd0aCAtIDFdO1xuICAgICAgY29uc3Qgb2JzZXJ2ZXJPcHRpb25zID0ge1xuICAgICAgICByb290OiB0YWJzUmVmLmN1cnJlbnQsXG4gICAgICAgIHRocmVzaG9sZDogMC45OVxuICAgICAgfTtcbiAgICAgIGNvbnN0IGhhbmRsZVNjcm9sbEJ1dHRvblN0YXJ0ID0gZW50cmllcyA9PiB7XG4gICAgICAgIHNldERpc3BsYXlTdGFydFNjcm9sbCghZW50cmllc1swXS5pc0ludGVyc2VjdGluZyk7XG4gICAgICB9O1xuICAgICAgY29uc3QgZmlyc3RPYnNlcnZlciA9IG5ldyBJbnRlcnNlY3Rpb25PYnNlcnZlcihoYW5kbGVTY3JvbGxCdXR0b25TdGFydCwgb2JzZXJ2ZXJPcHRpb25zKTtcbiAgICAgIGZpcnN0T2JzZXJ2ZXIub2JzZXJ2ZShmaXJzdFRhYik7XG4gICAgICBjb25zdCBoYW5kbGVTY3JvbGxCdXR0b25FbmQgPSBlbnRyaWVzID0+IHtcbiAgICAgICAgc2V0RGlzcGxheUVuZFNjcm9sbCghZW50cmllc1swXS5pc0ludGVyc2VjdGluZyk7XG4gICAgICB9O1xuICAgICAgY29uc3QgbGFzdE9ic2VydmVyID0gbmV3IEludGVyc2VjdGlvbk9ic2VydmVyKGhhbmRsZVNjcm9sbEJ1dHRvbkVuZCwgb2JzZXJ2ZXJPcHRpb25zKTtcbiAgICAgIGxhc3RPYnNlcnZlci5vYnNlcnZlKGxhc3RUYWIpO1xuICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgZmlyc3RPYnNlcnZlci5kaXNjb25uZWN0KCk7XG4gICAgICAgIGxhc3RPYnNlcnZlci5kaXNjb25uZWN0KCk7XG4gICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9LCBbc2Nyb2xsYWJsZSwgc2Nyb2xsQnV0dG9ucywgdXBkYXRlU2Nyb2xsT2JzZXJ2ZXIsIGNoaWxkcmVuUHJvcCA9PSBudWxsID8gdm9pZCAwIDogY2hpbGRyZW5Qcm9wLmxlbmd0aF0pO1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIHNldE1vdW50ZWQodHJ1ZSk7XG4gIH0sIFtdKTtcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICB1cGRhdGVJbmRpY2F0b3JTdGF0ZSgpO1xuICB9KTtcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICAvLyBEb24ndCBhbmltYXRlIG9uIHRoZSBmaXJzdCByZW5kZXIuXG4gICAgc2Nyb2xsU2VsZWN0ZWRJbnRvVmlldyhkZWZhdWx0SW5kaWNhdG9yU3R5bGUgIT09IGluZGljYXRvclN0eWxlKTtcbiAgfSwgW3Njcm9sbFNlbGVjdGVkSW50b1ZpZXcsIGluZGljYXRvclN0eWxlXSk7XG4gIFJlYWN0LnVzZUltcGVyYXRpdmVIYW5kbGUoYWN0aW9uLCAoKSA9PiAoe1xuICAgIHVwZGF0ZUluZGljYXRvcjogdXBkYXRlSW5kaWNhdG9yU3RhdGUsXG4gICAgdXBkYXRlU2Nyb2xsQnV0dG9uczogdXBkYXRlU2Nyb2xsQnV0dG9uU3RhdGVcbiAgfSksIFt1cGRhdGVJbmRpY2F0b3JTdGF0ZSwgdXBkYXRlU2Nyb2xsQnV0dG9uU3RhdGVdKTtcbiAgY29uc3QgaW5kaWNhdG9yID0gLyojX19QVVJFX18qL19qc3goVGFic0luZGljYXRvciwgX2V4dGVuZHMoe30sIFRhYkluZGljYXRvclByb3BzLCB7XG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMuaW5kaWNhdG9yLCBUYWJJbmRpY2F0b3JQcm9wcy5jbGFzc05hbWUpLFxuICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGUsXG4gICAgc3R5bGU6IF9leHRlbmRzKHt9LCBpbmRpY2F0b3JTdHlsZSwgVGFiSW5kaWNhdG9yUHJvcHMuc3R5bGUpXG4gIH0pKTtcbiAgbGV0IGNoaWxkSW5kZXggPSAwO1xuICBjb25zdCBjaGlsZHJlbiA9IFJlYWN0LkNoaWxkcmVuLm1hcChjaGlsZHJlblByb3AsIGNoaWxkID0+IHtcbiAgICBpZiAoISAvKiNfX1BVUkVfXyovUmVhY3QuaXNWYWxpZEVsZW1lbnQoY2hpbGQpKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmIChpc0ZyYWdtZW50KGNoaWxkKSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFtcIk1VSTogVGhlIFRhYnMgY29tcG9uZW50IGRvZXNuJ3QgYWNjZXB0IGEgRnJhZ21lbnQgYXMgYSBjaGlsZC5cIiwgJ0NvbnNpZGVyIHByb3ZpZGluZyBhbiBhcnJheSBpbnN0ZWFkLiddLmpvaW4oJ1xcbicpKTtcbiAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgY2hpbGRWYWx1ZSA9IGNoaWxkLnByb3BzLnZhbHVlID09PSB1bmRlZmluZWQgPyBjaGlsZEluZGV4IDogY2hpbGQucHJvcHMudmFsdWU7XG4gICAgdmFsdWVUb0luZGV4LnNldChjaGlsZFZhbHVlLCBjaGlsZEluZGV4KTtcbiAgICBjb25zdCBzZWxlY3RlZCA9IGNoaWxkVmFsdWUgPT09IHZhbHVlO1xuICAgIGNoaWxkSW5kZXggKz0gMTtcbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNsb25lRWxlbWVudChjaGlsZCwgX2V4dGVuZHMoe1xuICAgICAgZnVsbFdpZHRoOiB2YXJpYW50ID09PSAnZnVsbFdpZHRoJyxcbiAgICAgIGluZGljYXRvcjogc2VsZWN0ZWQgJiYgIW1vdW50ZWQgJiYgaW5kaWNhdG9yLFxuICAgICAgc2VsZWN0ZWQsXG4gICAgICBzZWxlY3Rpb25Gb2xsb3dzRm9jdXMsXG4gICAgICBvbkNoYW5nZSxcbiAgICAgIHRleHRDb2xvcixcbiAgICAgIHZhbHVlOiBjaGlsZFZhbHVlXG4gICAgfSwgY2hpbGRJbmRleCA9PT0gMSAmJiB2YWx1ZSA9PT0gZmFsc2UgJiYgIWNoaWxkLnByb3BzLnRhYkluZGV4ID8ge1xuICAgICAgdGFiSW5kZXg6IDBcbiAgICB9IDoge30pKTtcbiAgfSk7XG4gIGNvbnN0IGhhbmRsZUtleURvd24gPSBldmVudCA9PiB7XG4gICAgY29uc3QgbGlzdCA9IHRhYkxpc3RSZWYuY3VycmVudDtcbiAgICBjb25zdCBjdXJyZW50Rm9jdXMgPSBvd25lckRvY3VtZW50KGxpc3QpLmFjdGl2ZUVsZW1lbnQ7XG4gICAgLy8gS2V5Ym9hcmQgbmF2aWdhdGlvbiBhc3N1bWVzIHRoYXQgW3JvbGU9XCJ0YWJcIl0gYXJlIHNpYmxpbmdzXG4gICAgLy8gdGhvdWdoIHdlIG1pZ2h0IHdhcm4gaW4gdGhlIGZ1dHVyZSBhYm91dCBuZXN0ZWQsIGludGVyYWN0aXZlIGVsZW1lbnRzXG4gICAgLy8gYXMgYSBhMTF5IHZpb2xhdGlvblxuICAgIGNvbnN0IHJvbGUgPSBjdXJyZW50Rm9jdXMuZ2V0QXR0cmlidXRlKCdyb2xlJyk7XG4gICAgaWYgKHJvbGUgIT09ICd0YWInKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGxldCBwcmV2aW91c0l0ZW1LZXkgPSBvcmllbnRhdGlvbiA9PT0gJ2hvcml6b250YWwnID8gJ0Fycm93TGVmdCcgOiAnQXJyb3dVcCc7XG4gICAgbGV0IG5leHRJdGVtS2V5ID0gb3JpZW50YXRpb24gPT09ICdob3Jpem9udGFsJyA/ICdBcnJvd1JpZ2h0JyA6ICdBcnJvd0Rvd24nO1xuICAgIGlmIChvcmllbnRhdGlvbiA9PT0gJ2hvcml6b250YWwnICYmIGlzUnRsKSB7XG4gICAgICAvLyBzd2FwIHByZXZpb3VzSXRlbUtleSB3aXRoIG5leHRJdGVtS2V5XG4gICAgICBwcmV2aW91c0l0ZW1LZXkgPSAnQXJyb3dSaWdodCc7XG4gICAgICBuZXh0SXRlbUtleSA9ICdBcnJvd0xlZnQnO1xuICAgIH1cbiAgICBzd2l0Y2ggKGV2ZW50LmtleSkge1xuICAgICAgY2FzZSBwcmV2aW91c0l0ZW1LZXk6XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIG1vdmVGb2N1cyhsaXN0LCBjdXJyZW50Rm9jdXMsIHByZXZpb3VzSXRlbSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBuZXh0SXRlbUtleTpcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgbW92ZUZvY3VzKGxpc3QsIGN1cnJlbnRGb2N1cywgbmV4dEl0ZW0pO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ0hvbWUnOlxuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBtb3ZlRm9jdXMobGlzdCwgbnVsbCwgbmV4dEl0ZW0pO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ0VuZCc6XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIG1vdmVGb2N1cyhsaXN0LCBudWxsLCBwcmV2aW91c0l0ZW0pO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgfTtcbiAgY29uc3QgY29uZGl0aW9uYWxFbGVtZW50cyA9IGdldENvbmRpdGlvbmFsRWxlbWVudHMoKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4cyhUYWJzUm9vdCwgX2V4dGVuZHMoe1xuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSksXG4gICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZSxcbiAgICByZWY6IHJlZixcbiAgICBhczogY29tcG9uZW50XG4gIH0sIG90aGVyLCB7XG4gICAgY2hpbGRyZW46IFtjb25kaXRpb25hbEVsZW1lbnRzLnNjcm9sbEJ1dHRvblN0YXJ0LCBjb25kaXRpb25hbEVsZW1lbnRzLnNjcm9sbGJhclNpemVMaXN0ZW5lciwgLyojX19QVVJFX18qL19qc3hzKFRhYnNTY3JvbGxlciwge1xuICAgICAgY2xhc3NOYW1lOiBjbGFzc2VzLnNjcm9sbGVyLFxuICAgICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZSxcbiAgICAgIHN0eWxlOiB7XG4gICAgICAgIG92ZXJmbG93OiBzY3JvbGxlclN0eWxlLm92ZXJmbG93LFxuICAgICAgICBbdmVydGljYWwgPyBgbWFyZ2luJHtpc1J0bCA/ICdMZWZ0JyA6ICdSaWdodCd9YCA6ICdtYXJnaW5Cb3R0b20nXTogdmlzaWJsZVNjcm9sbGJhciA/IHVuZGVmaW5lZCA6IC1zY3JvbGxlclN0eWxlLnNjcm9sbGJhcldpZHRoXG4gICAgICB9LFxuICAgICAgcmVmOiB0YWJzUmVmLFxuICAgICAgY2hpbGRyZW46IFsvKiNfX1BVUkVfXyovX2pzeChGbGV4Q29udGFpbmVyLCB7XG4gICAgICAgIFwiYXJpYS1sYWJlbFwiOiBhcmlhTGFiZWwsXG4gICAgICAgIFwiYXJpYS1sYWJlbGxlZGJ5XCI6IGFyaWFMYWJlbGxlZEJ5LFxuICAgICAgICBcImFyaWEtb3JpZW50YXRpb25cIjogb3JpZW50YXRpb24gPT09ICd2ZXJ0aWNhbCcgPyAndmVydGljYWwnIDogbnVsbCxcbiAgICAgICAgY2xhc3NOYW1lOiBjbGFzc2VzLmZsZXhDb250YWluZXIsXG4gICAgICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGUsXG4gICAgICAgIG9uS2V5RG93bjogaGFuZGxlS2V5RG93bixcbiAgICAgICAgcmVmOiB0YWJMaXN0UmVmLFxuICAgICAgICByb2xlOiBcInRhYmxpc3RcIixcbiAgICAgICAgY2hpbGRyZW46IGNoaWxkcmVuXG4gICAgICB9KSwgbW91bnRlZCAmJiBpbmRpY2F0b3JdXG4gICAgfSksIGNvbmRpdGlvbmFsRWxlbWVudHMuc2Nyb2xsQnV0dG9uRW5kXVxuICB9KSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFRhYnMucHJvcFR5cGVzIC8qIHJlbW92ZS1wcm9wdHlwZXMgKi8gPSB7XG4gIC8vIOKUjOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgCBXYXJuaW5nIOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUkFxuICAvLyDilIIgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zLiDilIJcbiAgLy8g4pSCICAgIFRvIHVwZGF0ZSB0aGVtLCBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBgcG5wbSBwcm9wdHlwZXNgLiAgICAg4pSCXG4gIC8vIOKUlOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUmFxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgY29tcG9uZW50IG1vdW50cy5cbiAgICogVGhpcyBpcyB1c2VmdWwgd2hlbiB5b3Ugd2FudCB0byB0cmlnZ2VyIGFuIGFjdGlvbiBwcm9ncmFtbWF0aWNhbGx5LlxuICAgKiBJdCBzdXBwb3J0cyB0d28gYWN0aW9uczogYHVwZGF0ZUluZGljYXRvcigpYCBhbmQgYHVwZGF0ZVNjcm9sbEJ1dHRvbnMoKWBcbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGFjdGlvbnMgVGhpcyBvYmplY3QgY29udGFpbnMgYWxsIHBvc3NpYmxlIGFjdGlvbnNcbiAgICogdGhhdCBjYW4gYmUgdHJpZ2dlcmVkIHByb2dyYW1tYXRpY2FsbHkuXG4gICAqL1xuICBhY3Rpb246IHJlZlR5cGUsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBzY3JvbGwgYnV0dG9ucyBhcmVuJ3QgZm9yY2VkIGhpZGRlbiBvbiBtb2JpbGUuXG4gICAqIEJ5IGRlZmF1bHQgdGhlIHNjcm9sbCBidXR0b25zIGFyZSBoaWRkZW4gb24gbW9iaWxlIGFuZCB0YWtlcyBwcmVjZWRlbmNlIG92ZXIgYHNjcm9sbEJ1dHRvbnNgLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgYWxsb3dTY3JvbGxCdXR0b25zTW9iaWxlOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIFRoZSBsYWJlbCBmb3IgdGhlIFRhYnMgYXMgYSBzdHJpbmcuXG4gICAqL1xuICAnYXJpYS1sYWJlbCc6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBBbiBpZCBvciBsaXN0IG9mIGlkcyBzZXBhcmF0ZWQgYnkgYSBzcGFjZSB0aGF0IGxhYmVsIHRoZSBUYWJzLlxuICAgKi9cbiAgJ2FyaWEtbGFiZWxsZWRieSc6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSB0YWJzIGFyZSBjZW50ZXJlZC5cbiAgICogVGhpcyBwcm9wIGlzIGludGVuZGVkIGZvciBsYXJnZSB2aWV3cy5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGNlbnRlcmVkOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgcm9vdCBub2RlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgSFRNTCBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKi9cbiAgY29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG4gIC8qKlxuICAgKiBEZXRlcm1pbmVzIHRoZSBjb2xvciBvZiB0aGUgaW5kaWNhdG9yLlxuICAgKiBAZGVmYXVsdCAncHJpbWFyeSdcbiAgICovXG4gIGluZGljYXRvckNvbG9yOiBQcm9wVHlwZXMgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqLy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ3ByaW1hcnknLCAnc2Vjb25kYXJ5J10pLCBQcm9wVHlwZXMuc3RyaW5nXSksXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSB2YWx1ZSBjaGFuZ2VzLlxuICAgKlxuICAgKiBAcGFyYW0ge1JlYWN0LlN5bnRoZXRpY0V2ZW50fSBldmVudCBUaGUgZXZlbnQgc291cmNlIG9mIHRoZSBjYWxsYmFjay4gKipXYXJuaW5nKio6IFRoaXMgaXMgYSBnZW5lcmljIGV2ZW50IG5vdCBhIGNoYW5nZSBldmVudC5cbiAgICogQHBhcmFtIHthbnl9IHZhbHVlIFdlIGRlZmF1bHQgdG8gdGhlIGluZGV4IG9mIHRoZSBjaGlsZCAobnVtYmVyKVxuICAgKi9cbiAgb25DaGFuZ2U6IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCBvcmllbnRhdGlvbiAobGF5b3V0IGZsb3cgZGlyZWN0aW9uKS5cbiAgICogQGRlZmF1bHQgJ2hvcml6b250YWwnXG4gICAqL1xuICBvcmllbnRhdGlvbjogUHJvcFR5cGVzLm9uZU9mKFsnaG9yaXpvbnRhbCcsICd2ZXJ0aWNhbCddKSxcbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCB0byByZW5kZXIgdGhlIHNjcm9sbCBidXR0b25zLlxuICAgKiBAZGVmYXVsdCBUYWJTY3JvbGxCdXR0b25cbiAgICovXG4gIFNjcm9sbEJ1dHRvbkNvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuICAvKipcbiAgICogRGV0ZXJtaW5lIGJlaGF2aW9yIG9mIHNjcm9sbCBidXR0b25zIHdoZW4gdGFicyBhcmUgc2V0IHRvIHNjcm9sbDpcbiAgICpcbiAgICogLSBgYXV0b2Agd2lsbCBvbmx5IHByZXNlbnQgdGhlbSB3aGVuIG5vdCBhbGwgdGhlIGl0ZW1zIGFyZSB2aXNpYmxlLlxuICAgKiAtIGB0cnVlYCB3aWxsIGFsd2F5cyBwcmVzZW50IHRoZW0uXG4gICAqIC0gYGZhbHNlYCB3aWxsIG5ldmVyIHByZXNlbnQgdGhlbS5cbiAgICpcbiAgICogQnkgZGVmYXVsdCB0aGUgc2Nyb2xsIGJ1dHRvbnMgYXJlIGhpZGRlbiBvbiBtb2JpbGUuXG4gICAqIFRoaXMgYmVoYXZpb3IgY2FuIGJlIGRpc2FibGVkIHdpdGggYGFsbG93U2Nyb2xsQnV0dG9uc01vYmlsZWAuXG4gICAqIEBkZWZhdWx0ICdhdXRvJ1xuICAgKi9cbiAgc2Nyb2xsQnV0dG9uczogUHJvcFR5cGVzIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi8ub25lT2YoWydhdXRvJywgZmFsc2UsIHRydWVdKSxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCB0aGUgc2VsZWN0ZWQgdGFiIGNoYW5nZXMgb24gZm9jdXMuIE90aGVyd2lzZSBpdCBvbmx5XG4gICAqIGNoYW5nZXMgb24gYWN0aXZhdGlvbi5cbiAgICovXG4gIHNlbGVjdGlvbkZvbGxvd3NGb2N1czogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBUaGUgZXh0cmEgcHJvcHMgZm9yIHRoZSBzbG90IGNvbXBvbmVudHMuXG4gICAqIFlvdSBjYW4gb3ZlcnJpZGUgdGhlIGV4aXN0aW5nIHByb3BzIG9yIGFkZCBuZXcgb25lcy5cbiAgICogQGRlZmF1bHQge31cbiAgICovXG4gIHNsb3RQcm9wczogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBlbmRTY3JvbGxCdXR0b25JY29uOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pLFxuICAgIHN0YXJ0U2Nyb2xsQnV0dG9uSWNvbjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKVxuICB9KSxcbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnRzIHVzZWQgZm9yIGVhY2ggc2xvdCBpbnNpZGUuXG4gICAqIEBkZWZhdWx0IHt9XG4gICAqL1xuICBzbG90czogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBFbmRTY3JvbGxCdXR0b25JY29uOiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG4gICAgU3RhcnRTY3JvbGxCdXR0b25JY29uOiBQcm9wVHlwZXMuZWxlbWVudFR5cGVcbiAgfSksXG4gIC8qKlxuICAgKiBUaGUgc3lzdGVtIHByb3AgdGhhdCBhbGxvd3MgZGVmaW5pbmcgc3lzdGVtIG92ZXJyaWRlcyBhcyB3ZWxsIGFzIGFkZGl0aW9uYWwgQ1NTIHN0eWxlcy5cbiAgICovXG4gIHN4OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLmJvb2xdKSksIFByb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSksXG4gIC8qKlxuICAgKiBQcm9wcyBhcHBsaWVkIHRvIHRoZSB0YWIgaW5kaWNhdG9yIGVsZW1lbnQuXG4gICAqIEBkZWZhdWx0ICB7fVxuICAgKi9cbiAgVGFiSW5kaWNhdG9yUHJvcHM6IFByb3BUeXBlcy5vYmplY3QsXG4gIC8qKlxuICAgKiBQcm9wcyBhcHBsaWVkIHRvIHRoZSBbYFRhYlNjcm9sbEJ1dHRvbmBdKC9tYXRlcmlhbC11aS9hcGkvdGFiLXNjcm9sbC1idXR0b24vKSBlbGVtZW50LlxuICAgKiBAZGVmYXVsdCB7fVxuICAgKi9cbiAgVGFiU2Nyb2xsQnV0dG9uUHJvcHM6IFByb3BUeXBlcy5vYmplY3QsXG4gIC8qKlxuICAgKiBEZXRlcm1pbmVzIHRoZSBjb2xvciBvZiB0aGUgYFRhYmAuXG4gICAqIEBkZWZhdWx0ICdwcmltYXJ5J1xuICAgKi9cbiAgdGV4dENvbG9yOiBQcm9wVHlwZXMub25lT2YoWydpbmhlcml0JywgJ3ByaW1hcnknLCAnc2Vjb25kYXJ5J10pLFxuICAvKipcbiAgICogVGhlIHZhbHVlIG9mIHRoZSBjdXJyZW50bHkgc2VsZWN0ZWQgYFRhYmAuXG4gICAqIElmIHlvdSBkb24ndCB3YW50IGFueSBzZWxlY3RlZCBgVGFiYCwgeW91IGNhbiBzZXQgdGhpcyBwcm9wIHRvIGBmYWxzZWAuXG4gICAqL1xuICB2YWx1ZTogUHJvcFR5cGVzLmFueSxcbiAgLyoqXG4gICAqIERldGVybWluZXMgYWRkaXRpb25hbCBkaXNwbGF5IGJlaGF2aW9yIG9mIHRoZSB0YWJzOlxuICAgKlxuICAgKiAgLSBgc2Nyb2xsYWJsZWAgd2lsbCBpbnZva2Ugc2Nyb2xsaW5nIHByb3BlcnRpZXMgYW5kIGFsbG93IGZvciBob3Jpem9udGFsbHlcbiAgICogIHNjcm9sbGluZyAob3Igc3dpcGluZykgb2YgdGhlIHRhYiBiYXIuXG4gICAqICAtIGBmdWxsV2lkdGhgIHdpbGwgbWFrZSB0aGUgdGFicyBncm93IHRvIHVzZSBhbGwgdGhlIGF2YWlsYWJsZSBzcGFjZSxcbiAgICogIHdoaWNoIHNob3VsZCBiZSB1c2VkIGZvciBzbWFsbCB2aWV3cywgbGlrZSBvbiBtb2JpbGUuXG4gICAqICAtIGBzdGFuZGFyZGAgd2lsbCByZW5kZXIgdGhlIGRlZmF1bHQgc3RhdGUuXG4gICAqIEBkZWZhdWx0ICdzdGFuZGFyZCdcbiAgICovXG4gIHZhcmlhbnQ6IFByb3BUeXBlcy5vbmVPZihbJ2Z1bGxXaWR0aCcsICdzY3JvbGxhYmxlJywgJ3N0YW5kYXJkJ10pLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgc2Nyb2xsYmFyIGlzIHZpc2libGUuIEl0IGNhbiBiZSB1c2VmdWwgd2hlbiBkaXNwbGF5aW5nXG4gICAqIGEgbG9uZyB2ZXJ0aWNhbCBsaXN0IG9mIHRhYnMuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICB2aXNpYmxlU2Nyb2xsYmFyOiBQcm9wVHlwZXMuYm9vbFxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IFRhYnM7IiwiaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzc2VzJztcbmltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzJztcbmV4cG9ydCBmdW5jdGlvbiBnZXRUZXh0RmllbGRVdGlsaXR5Q2xhc3Moc2xvdCkge1xuICByZXR1cm4gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoJ011aVRleHRGaWVsZCcsIHNsb3QpO1xufVxuY29uc3QgdGV4dEZpZWxkQ2xhc3NlcyA9IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMoJ011aVRleHRGaWVsZCcsIFsncm9vdCddKTtcbmV4cG9ydCBkZWZhdWx0IHRleHRGaWVsZENsYXNzZXM7IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiYXV0b0NvbXBsZXRlXCIsIFwiYXV0b0ZvY3VzXCIsIFwiY2hpbGRyZW5cIiwgXCJjbGFzc05hbWVcIiwgXCJjb2xvclwiLCBcImRlZmF1bHRWYWx1ZVwiLCBcImRpc2FibGVkXCIsIFwiZXJyb3JcIiwgXCJGb3JtSGVscGVyVGV4dFByb3BzXCIsIFwiZnVsbFdpZHRoXCIsIFwiaGVscGVyVGV4dFwiLCBcImlkXCIsIFwiSW5wdXRMYWJlbFByb3BzXCIsIFwiaW5wdXRQcm9wc1wiLCBcIklucHV0UHJvcHNcIiwgXCJpbnB1dFJlZlwiLCBcImxhYmVsXCIsIFwibWF4Um93c1wiLCBcIm1pblJvd3NcIiwgXCJtdWx0aWxpbmVcIiwgXCJuYW1lXCIsIFwib25CbHVyXCIsIFwib25DaGFuZ2VcIiwgXCJvbkZvY3VzXCIsIFwicGxhY2Vob2xkZXJcIiwgXCJyZXF1aXJlZFwiLCBcInJvd3NcIiwgXCJzZWxlY3RcIiwgXCJTZWxlY3RQcm9wc1wiLCBcInR5cGVcIiwgXCJ2YWx1ZVwiLCBcInZhcmlhbnRcIl07XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgY29tcG9zZUNsYXNzZXMgZnJvbSAnQG11aS91dGlscy9jb21wb3NlQ2xhc3Nlcyc7XG5pbXBvcnQgdXNlSWQgZnJvbSAnQG11aS91dGlscy91c2VJZCc7XG5pbXBvcnQgcmVmVHlwZSBmcm9tICdAbXVpL3V0aWxzL3JlZlR5cGUnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICcuLi9zdHlsZXMvc3R5bGVkJztcbmltcG9ydCB7IHVzZURlZmF1bHRQcm9wcyB9IGZyb20gJy4uL0RlZmF1bHRQcm9wc1Byb3ZpZGVyJztcbmltcG9ydCBJbnB1dCBmcm9tICcuLi9JbnB1dCc7XG5pbXBvcnQgRmlsbGVkSW5wdXQgZnJvbSAnLi4vRmlsbGVkSW5wdXQnO1xuaW1wb3J0IE91dGxpbmVkSW5wdXQgZnJvbSAnLi4vT3V0bGluZWRJbnB1dCc7XG5pbXBvcnQgSW5wdXRMYWJlbCBmcm9tICcuLi9JbnB1dExhYmVsJztcbmltcG9ydCBGb3JtQ29udHJvbCBmcm9tICcuLi9Gb3JtQ29udHJvbCc7XG5pbXBvcnQgRm9ybUhlbHBlclRleHQgZnJvbSAnLi4vRm9ybUhlbHBlclRleHQnO1xuaW1wb3J0IFNlbGVjdCBmcm9tICcuLi9TZWxlY3QnO1xuaW1wb3J0IHsgZ2V0VGV4dEZpZWxkVXRpbGl0eUNsYXNzIH0gZnJvbSAnLi90ZXh0RmllbGRDbGFzc2VzJztcbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5pbXBvcnQgeyBqc3hzIGFzIF9qc3hzIH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5jb25zdCB2YXJpYW50Q29tcG9uZW50ID0ge1xuICBzdGFuZGFyZDogSW5wdXQsXG4gIGZpbGxlZDogRmlsbGVkSW5wdXQsXG4gIG91dGxpbmVkOiBPdXRsaW5lZElucHV0XG59O1xuY29uc3QgdXNlVXRpbGl0eUNsYXNzZXMgPSBvd25lclN0YXRlID0+IHtcbiAgY29uc3Qge1xuICAgIGNsYXNzZXNcbiAgfSA9IG93bmVyU3RhdGU7XG4gIGNvbnN0IHNsb3RzID0ge1xuICAgIHJvb3Q6IFsncm9vdCddXG4gIH07XG4gIHJldHVybiBjb21wb3NlQ2xhc3NlcyhzbG90cywgZ2V0VGV4dEZpZWxkVXRpbGl0eUNsYXNzLCBjbGFzc2VzKTtcbn07XG5jb25zdCBUZXh0RmllbGRSb290ID0gc3R5bGVkKEZvcm1Db250cm9sLCB7XG4gIG5hbWU6ICdNdWlUZXh0RmllbGQnLFxuICBzbG90OiAnUm9vdCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4gc3R5bGVzLnJvb3Rcbn0pKHt9KTtcblxuLyoqXG4gKiBUaGUgYFRleHRGaWVsZGAgaXMgYSBjb252ZW5pZW5jZSB3cmFwcGVyIGZvciB0aGUgbW9zdCBjb21tb24gY2FzZXMgKDgwJSkuXG4gKiBJdCBjYW5ub3QgYmUgYWxsIHRoaW5ncyB0byBhbGwgcGVvcGxlLCBvdGhlcndpc2UgdGhlIEFQSSB3b3VsZCBncm93IG91dCBvZiBjb250cm9sLlxuICpcbiAqICMjIEFkdmFuY2VkIENvbmZpZ3VyYXRpb25cbiAqXG4gKiBJdCdzIGltcG9ydGFudCB0byB1bmRlcnN0YW5kIHRoYXQgdGhlIHRleHQgZmllbGQgaXMgYSBzaW1wbGUgYWJzdHJhY3Rpb25cbiAqIG9uIHRvcCBvZiB0aGUgZm9sbG93aW5nIGNvbXBvbmVudHM6XG4gKlxuICogLSBbRm9ybUNvbnRyb2xdKC9tYXRlcmlhbC11aS9hcGkvZm9ybS1jb250cm9sLylcbiAqIC0gW0lucHV0TGFiZWxdKC9tYXRlcmlhbC11aS9hcGkvaW5wdXQtbGFiZWwvKVxuICogLSBbRmlsbGVkSW5wdXRdKC9tYXRlcmlhbC11aS9hcGkvZmlsbGVkLWlucHV0LylcbiAqIC0gW091dGxpbmVkSW5wdXRdKC9tYXRlcmlhbC11aS9hcGkvb3V0bGluZWQtaW5wdXQvKVxuICogLSBbSW5wdXRdKC9tYXRlcmlhbC11aS9hcGkvaW5wdXQvKVxuICogLSBbRm9ybUhlbHBlclRleHRdKC9tYXRlcmlhbC11aS9hcGkvZm9ybS1oZWxwZXItdGV4dC8pXG4gKlxuICogSWYgeW91IHdpc2ggdG8gYWx0ZXIgdGhlIHByb3BzIGFwcGxpZWQgdG8gdGhlIGBpbnB1dGAgZWxlbWVudCwgeW91IGNhbiBkbyBzbyBhcyBmb2xsb3dzOlxuICpcbiAqIGBgYGpzeFxuICogY29uc3QgaW5wdXRQcm9wcyA9IHtcbiAqICAgc3RlcDogMzAwLFxuICogfTtcbiAqXG4gKiByZXR1cm4gPFRleHRGaWVsZCBpZD1cInRpbWVcIiB0eXBlPVwidGltZVwiIGlucHV0UHJvcHM9e2lucHV0UHJvcHN9IC8+O1xuICogYGBgXG4gKlxuICogRm9yIGFkdmFuY2VkIGNhc2VzLCBwbGVhc2UgbG9vayBhdCB0aGUgc291cmNlIG9mIFRleHRGaWVsZCBieSBjbGlja2luZyBvbiB0aGVcbiAqIFwiRWRpdCB0aGlzIHBhZ2VcIiBidXR0b24gYWJvdmUuIENvbnNpZGVyIGVpdGhlcjpcbiAqXG4gKiAtIHVzaW5nIHRoZSB1cHBlciBjYXNlIHByb3BzIGZvciBwYXNzaW5nIHZhbHVlcyBkaXJlY3RseSB0byB0aGUgY29tcG9uZW50c1xuICogLSB1c2luZyB0aGUgdW5kZXJseWluZyBjb21wb25lbnRzIGRpcmVjdGx5IGFzIHNob3duIGluIHRoZSBkZW1vc1xuICovXG5jb25zdCBUZXh0RmllbGQgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBUZXh0RmllbGQoaW5Qcm9wcywgcmVmKSB7XG4gIGNvbnN0IHByb3BzID0gdXNlRGVmYXVsdFByb3BzKHtcbiAgICBwcm9wczogaW5Qcm9wcyxcbiAgICBuYW1lOiAnTXVpVGV4dEZpZWxkJ1xuICB9KTtcbiAgY29uc3Qge1xuICAgICAgYXV0b0NvbXBsZXRlLFxuICAgICAgYXV0b0ZvY3VzID0gZmFsc2UsXG4gICAgICBjaGlsZHJlbixcbiAgICAgIGNsYXNzTmFtZSxcbiAgICAgIGNvbG9yID0gJ3ByaW1hcnknLFxuICAgICAgZGVmYXVsdFZhbHVlLFxuICAgICAgZGlzYWJsZWQgPSBmYWxzZSxcbiAgICAgIGVycm9yID0gZmFsc2UsXG4gICAgICBGb3JtSGVscGVyVGV4dFByb3BzLFxuICAgICAgZnVsbFdpZHRoID0gZmFsc2UsXG4gICAgICBoZWxwZXJUZXh0LFxuICAgICAgaWQ6IGlkT3ZlcnJpZGUsXG4gICAgICBJbnB1dExhYmVsUHJvcHMsXG4gICAgICBpbnB1dFByb3BzLFxuICAgICAgSW5wdXRQcm9wcyxcbiAgICAgIGlucHV0UmVmLFxuICAgICAgbGFiZWwsXG4gICAgICBtYXhSb3dzLFxuICAgICAgbWluUm93cyxcbiAgICAgIG11bHRpbGluZSA9IGZhbHNlLFxuICAgICAgbmFtZSxcbiAgICAgIG9uQmx1cixcbiAgICAgIG9uQ2hhbmdlLFxuICAgICAgb25Gb2N1cyxcbiAgICAgIHBsYWNlaG9sZGVyLFxuICAgICAgcmVxdWlyZWQgPSBmYWxzZSxcbiAgICAgIHJvd3MsXG4gICAgICBzZWxlY3QgPSBmYWxzZSxcbiAgICAgIFNlbGVjdFByb3BzLFxuICAgICAgdHlwZSxcbiAgICAgIHZhbHVlLFxuICAgICAgdmFyaWFudCA9ICdvdXRsaW5lZCdcbiAgICB9ID0gcHJvcHMsXG4gICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkKTtcbiAgY29uc3Qgb3duZXJTdGF0ZSA9IF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgIGF1dG9Gb2N1cyxcbiAgICBjb2xvcixcbiAgICBkaXNhYmxlZCxcbiAgICBlcnJvcixcbiAgICBmdWxsV2lkdGgsXG4gICAgbXVsdGlsaW5lLFxuICAgIHJlcXVpcmVkLFxuICAgIHNlbGVjdCxcbiAgICB2YXJpYW50XG4gIH0pO1xuICBjb25zdCBjbGFzc2VzID0gdXNlVXRpbGl0eUNsYXNzZXMob3duZXJTdGF0ZSk7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaWYgKHNlbGVjdCAmJiAhY2hpbGRyZW4pIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ01VSTogYGNoaWxkcmVuYCBtdXN0IGJlIHBhc3NlZCB3aGVuIHVzaW5nIHRoZSBgVGV4dEZpZWxkYCBjb21wb25lbnQgd2l0aCBgc2VsZWN0YC4nKTtcbiAgICB9XG4gIH1cbiAgY29uc3QgSW5wdXRNb3JlID0ge307XG4gIGlmICh2YXJpYW50ID09PSAnb3V0bGluZWQnKSB7XG4gICAgaWYgKElucHV0TGFiZWxQcm9wcyAmJiB0eXBlb2YgSW5wdXRMYWJlbFByb3BzLnNocmluayAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIElucHV0TW9yZS5ub3RjaGVkID0gSW5wdXRMYWJlbFByb3BzLnNocmluaztcbiAgICB9XG4gICAgSW5wdXRNb3JlLmxhYmVsID0gbGFiZWw7XG4gIH1cbiAgaWYgKHNlbGVjdCkge1xuICAgIC8vIHVuc2V0IGRlZmF1bHRzIGZyb20gdGV4dGJveCBpbnB1dHNcbiAgICBpZiAoIVNlbGVjdFByb3BzIHx8ICFTZWxlY3RQcm9wcy5uYXRpdmUpIHtcbiAgICAgIElucHV0TW9yZS5pZCA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgSW5wdXRNb3JlWydhcmlhLWRlc2NyaWJlZGJ5J10gPSB1bmRlZmluZWQ7XG4gIH1cbiAgY29uc3QgaWQgPSB1c2VJZChpZE92ZXJyaWRlKTtcbiAgY29uc3QgaGVscGVyVGV4dElkID0gaGVscGVyVGV4dCAmJiBpZCA/IGAke2lkfS1oZWxwZXItdGV4dGAgOiB1bmRlZmluZWQ7XG4gIGNvbnN0IGlucHV0TGFiZWxJZCA9IGxhYmVsICYmIGlkID8gYCR7aWR9LWxhYmVsYCA6IHVuZGVmaW5lZDtcbiAgY29uc3QgSW5wdXRDb21wb25lbnQgPSB2YXJpYW50Q29tcG9uZW50W3ZhcmlhbnRdO1xuICBjb25zdCBJbnB1dEVsZW1lbnQgPSAvKiNfX1BVUkVfXyovX2pzeChJbnB1dENvbXBvbmVudCwgX2V4dGVuZHMoe1xuICAgIFwiYXJpYS1kZXNjcmliZWRieVwiOiBoZWxwZXJUZXh0SWQsXG4gICAgYXV0b0NvbXBsZXRlOiBhdXRvQ29tcGxldGUsXG4gICAgYXV0b0ZvY3VzOiBhdXRvRm9jdXMsXG4gICAgZGVmYXVsdFZhbHVlOiBkZWZhdWx0VmFsdWUsXG4gICAgZnVsbFdpZHRoOiBmdWxsV2lkdGgsXG4gICAgbXVsdGlsaW5lOiBtdWx0aWxpbmUsXG4gICAgbmFtZTogbmFtZSxcbiAgICByb3dzOiByb3dzLFxuICAgIG1heFJvd3M6IG1heFJvd3MsXG4gICAgbWluUm93czogbWluUm93cyxcbiAgICB0eXBlOiB0eXBlLFxuICAgIHZhbHVlOiB2YWx1ZSxcbiAgICBpZDogaWQsXG4gICAgaW5wdXRSZWY6IGlucHV0UmVmLFxuICAgIG9uQmx1cjogb25CbHVyLFxuICAgIG9uQ2hhbmdlOiBvbkNoYW5nZSxcbiAgICBvbkZvY3VzOiBvbkZvY3VzLFxuICAgIHBsYWNlaG9sZGVyOiBwbGFjZWhvbGRlcixcbiAgICBpbnB1dFByb3BzOiBpbnB1dFByb3BzXG4gIH0sIElucHV0TW9yZSwgSW5wdXRQcm9wcykpO1xuICByZXR1cm4gLyojX19QVVJFX18qL19qc3hzKFRleHRGaWVsZFJvb3QsIF9leHRlbmRzKHtcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWUpLFxuICAgIGRpc2FibGVkOiBkaXNhYmxlZCxcbiAgICBlcnJvcjogZXJyb3IsXG4gICAgZnVsbFdpZHRoOiBmdWxsV2lkdGgsXG4gICAgcmVmOiByZWYsXG4gICAgcmVxdWlyZWQ6IHJlcXVpcmVkLFxuICAgIGNvbG9yOiBjb2xvcixcbiAgICB2YXJpYW50OiB2YXJpYW50LFxuICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGVcbiAgfSwgb3RoZXIsIHtcbiAgICBjaGlsZHJlbjogW2xhYmVsICE9IG51bGwgJiYgbGFiZWwgIT09ICcnICYmIC8qI19fUFVSRV9fKi9fanN4KElucHV0TGFiZWwsIF9leHRlbmRzKHtcbiAgICAgIGh0bWxGb3I6IGlkLFxuICAgICAgaWQ6IGlucHV0TGFiZWxJZFxuICAgIH0sIElucHV0TGFiZWxQcm9wcywge1xuICAgICAgY2hpbGRyZW46IGxhYmVsXG4gICAgfSkpLCBzZWxlY3QgPyAvKiNfX1BVUkVfXyovX2pzeChTZWxlY3QsIF9leHRlbmRzKHtcbiAgICAgIFwiYXJpYS1kZXNjcmliZWRieVwiOiBoZWxwZXJUZXh0SWQsXG4gICAgICBpZDogaWQsXG4gICAgICBsYWJlbElkOiBpbnB1dExhYmVsSWQsXG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICBpbnB1dDogSW5wdXRFbGVtZW50XG4gICAgfSwgU2VsZWN0UHJvcHMsIHtcbiAgICAgIGNoaWxkcmVuOiBjaGlsZHJlblxuICAgIH0pKSA6IElucHV0RWxlbWVudCwgaGVscGVyVGV4dCAmJiAvKiNfX1BVUkVfXyovX2pzeChGb3JtSGVscGVyVGV4dCwgX2V4dGVuZHMoe1xuICAgICAgaWQ6IGhlbHBlclRleHRJZFxuICAgIH0sIEZvcm1IZWxwZXJUZXh0UHJvcHMsIHtcbiAgICAgIGNoaWxkcmVuOiBoZWxwZXJUZXh0XG4gICAgfSkpXVxuICB9KSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFRleHRGaWVsZC5wcm9wVHlwZXMgLyogcmVtb3ZlLXByb3B0eXBlcyAqLyA9IHtcbiAgLy8g4pSM4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAIFdhcm5pbmcg4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSQXG4gIC8vIOKUgiBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMuIOKUglxuICAvLyDilIIgICAgVG8gdXBkYXRlIHRoZW0sIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIGBwbnBtIHByb3B0eXBlc2AuICAgICDilIJcbiAgLy8g4pSU4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSYXG4gIC8qKlxuICAgKiBUaGlzIHByb3AgaGVscHMgdXNlcnMgdG8gZmlsbCBmb3JtcyBmYXN0ZXIsIGVzcGVjaWFsbHkgb24gbW9iaWxlIGRldmljZXMuXG4gICAqIFRoZSBuYW1lIGNhbiBiZSBjb25mdXNpbmcsIGFzIGl0J3MgbW9yZSBsaWtlIGFuIGF1dG9maWxsLlxuICAgKiBZb3UgY2FuIGxlYXJuIG1vcmUgYWJvdXQgaXQgW2ZvbGxvd2luZyB0aGUgc3BlY2lmaWNhdGlvbl0oaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZm9ybS1jb250cm9sLWluZnJhc3RydWN0dXJlLmh0bWwjYXV0b2ZpbGwpLlxuICAgKi9cbiAgYXV0b0NvbXBsZXRlOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgYGlucHV0YCBlbGVtZW50IGlzIGZvY3VzZWQgZHVyaW5nIHRoZSBmaXJzdCBtb3VudC5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGF1dG9Gb2N1czogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogVGhlIGNvbG9yIG9mIHRoZSBjb21wb25lbnQuXG4gICAqIEl0IHN1cHBvcnRzIGJvdGggZGVmYXVsdCBhbmQgY3VzdG9tIHRoZW1lIGNvbG9ycywgd2hpY2ggY2FuIGJlIGFkZGVkIGFzIHNob3duIGluIHRoZVxuICAgKiBbcGFsZXR0ZSBjdXN0b21pemF0aW9uIGd1aWRlXShodHRwczovL211aS5jb20vbWF0ZXJpYWwtdWkvY3VzdG9taXphdGlvbi9wYWxldHRlLyNjdXN0b20tY29sb3JzKS5cbiAgICogQGRlZmF1bHQgJ3ByaW1hcnknXG4gICAqL1xuICBjb2xvcjogUHJvcFR5cGVzIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi8ub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydwcmltYXJ5JywgJ3NlY29uZGFyeScsICdlcnJvcicsICdpbmZvJywgJ3N1Y2Nlc3MnLCAnd2FybmluZyddKSwgUHJvcFR5cGVzLnN0cmluZ10pLFxuICAvKipcbiAgICogVGhlIGRlZmF1bHQgdmFsdWUuIFVzZSB3aGVuIHRoZSBjb21wb25lbnQgaXMgbm90IGNvbnRyb2xsZWQuXG4gICAqL1xuICBkZWZhdWx0VmFsdWU6IFByb3BUeXBlcy5hbnksXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBjb21wb25lbnQgaXMgZGlzYWJsZWQuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBsYWJlbCBpcyBkaXNwbGF5ZWQgaW4gYW4gZXJyb3Igc3RhdGUuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBlcnJvcjogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBQcm9wcyBhcHBsaWVkIHRvIHRoZSBbYEZvcm1IZWxwZXJUZXh0YF0oL21hdGVyaWFsLXVpL2FwaS9mb3JtLWhlbHBlci10ZXh0LykgZWxlbWVudC5cbiAgICovXG4gIEZvcm1IZWxwZXJUZXh0UHJvcHM6IFByb3BUeXBlcy5vYmplY3QsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBpbnB1dCB3aWxsIHRha2UgdXAgdGhlIGZ1bGwgd2lkdGggb2YgaXRzIGNvbnRhaW5lci5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGZ1bGxXaWR0aDogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBUaGUgaGVscGVyIHRleHQgY29udGVudC5cbiAgICovXG4gIGhlbHBlclRleHQ6IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogVGhlIGlkIG9mIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAqIFVzZSB0aGlzIHByb3AgdG8gbWFrZSBgbGFiZWxgIGFuZCBgaGVscGVyVGV4dGAgYWNjZXNzaWJsZSBmb3Igc2NyZWVuIHJlYWRlcnMuXG4gICAqL1xuICBpZDogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIFByb3BzIGFwcGxpZWQgdG8gdGhlIFtgSW5wdXRMYWJlbGBdKC9tYXRlcmlhbC11aS9hcGkvaW5wdXQtbGFiZWwvKSBlbGVtZW50LlxuICAgKiBQb2ludGVyIGV2ZW50cyBsaWtlIGBvbkNsaWNrYCBhcmUgZW5hYmxlZCBpZiBhbmQgb25seSBpZiBgc2hyaW5rYCBpcyBgdHJ1ZWAuXG4gICAqL1xuICBJbnB1dExhYmVsUHJvcHM6IFByb3BUeXBlcy5vYmplY3QsXG4gIC8qKlxuICAgKiBbQXR0cmlidXRlc10oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRNTC9FbGVtZW50L2lucHV0I0F0dHJpYnV0ZXMpIGFwcGxpZWQgdG8gdGhlIGBpbnB1dGAgZWxlbWVudC5cbiAgICovXG4gIGlucHV0UHJvcHM6IFByb3BUeXBlcy5vYmplY3QsXG4gIC8qKlxuICAgKiBQcm9wcyBhcHBsaWVkIHRvIHRoZSBJbnB1dCBlbGVtZW50LlxuICAgKiBJdCB3aWxsIGJlIGEgW2BGaWxsZWRJbnB1dGBdKC9tYXRlcmlhbC11aS9hcGkvZmlsbGVkLWlucHV0LyksXG4gICAqIFtgT3V0bGluZWRJbnB1dGBdKC9tYXRlcmlhbC11aS9hcGkvb3V0bGluZWQtaW5wdXQvKSBvciBbYElucHV0YF0oL21hdGVyaWFsLXVpL2FwaS9pbnB1dC8pXG4gICAqIGNvbXBvbmVudCBkZXBlbmRpbmcgb24gdGhlIGB2YXJpYW50YCBwcm9wIHZhbHVlLlxuICAgKi9cbiAgSW5wdXRQcm9wczogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqXG4gICAqIFBhc3MgYSByZWYgdG8gdGhlIGBpbnB1dGAgZWxlbWVudC5cbiAgICovXG4gIGlucHV0UmVmOiByZWZUeXBlLFxuICAvKipcbiAgICogVGhlIGxhYmVsIGNvbnRlbnQuXG4gICAqL1xuICBsYWJlbDogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBJZiBgZGVuc2VgIG9yIGBub3JtYWxgLCB3aWxsIGFkanVzdCB2ZXJ0aWNhbCBzcGFjaW5nIG9mIHRoaXMgYW5kIGNvbnRhaW5lZCBjb21wb25lbnRzLlxuICAgKiBAZGVmYXVsdCAnbm9uZSdcbiAgICovXG4gIG1hcmdpbjogUHJvcFR5cGVzLm9uZU9mKFsnZGVuc2UnLCAnbm9uZScsICdub3JtYWwnXSksXG4gIC8qKlxuICAgKiBNYXhpbXVtIG51bWJlciBvZiByb3dzIHRvIGRpc3BsYXkgd2hlbiBtdWx0aWxpbmUgb3B0aW9uIGlzIHNldCB0byB0cnVlLlxuICAgKi9cbiAgbWF4Um93czogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnN0cmluZ10pLFxuICAvKipcbiAgICogTWluaW11bSBudW1iZXIgb2Ygcm93cyB0byBkaXNwbGF5IHdoZW4gbXVsdGlsaW5lIG9wdGlvbiBpcyBzZXQgdG8gdHJ1ZS5cbiAgICovXG4gIG1pblJvd3M6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zdHJpbmddKSxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgYSBgdGV4dGFyZWFgIGVsZW1lbnQgaXMgcmVuZGVyZWQgaW5zdGVhZCBvZiBhbiBpbnB1dC5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIG11bHRpbGluZTogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBOYW1lIGF0dHJpYnV0ZSBvZiB0aGUgYGlucHV0YCBlbGVtZW50LlxuICAgKi9cbiAgbmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uQmx1cjogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSB2YWx1ZSBpcyBjaGFuZ2VkLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gZXZlbnQgVGhlIGV2ZW50IHNvdXJjZSBvZiB0aGUgY2FsbGJhY2suXG4gICAqIFlvdSBjYW4gcHVsbCBvdXQgdGhlIG5ldyB2YWx1ZSBieSBhY2Nlc3NpbmcgYGV2ZW50LnRhcmdldC52YWx1ZWAgKHN0cmluZykuXG4gICAqL1xuICBvbkNoYW5nZTogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkZvY3VzOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIFRoZSBzaG9ydCBoaW50IGRpc3BsYXllZCBpbiB0aGUgYGlucHV0YCBiZWZvcmUgdGhlIHVzZXIgZW50ZXJzIGEgdmFsdWUuXG4gICAqL1xuICBwbGFjZWhvbGRlcjogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGxhYmVsIGlzIGRpc3BsYXllZCBhcyByZXF1aXJlZCBhbmQgdGhlIGBpbnB1dGAgZWxlbWVudCBpcyByZXF1aXJlZC5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIHJlcXVpcmVkOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIE51bWJlciBvZiByb3dzIHRvIGRpc3BsYXkgd2hlbiBtdWx0aWxpbmUgb3B0aW9uIGlzIHNldCB0byB0cnVlLlxuICAgKi9cbiAgcm93czogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnN0cmluZ10pLFxuICAvKipcbiAgICogUmVuZGVyIGEgW2BTZWxlY3RgXSgvbWF0ZXJpYWwtdWkvYXBpL3NlbGVjdC8pIGVsZW1lbnQgd2hpbGUgcGFzc2luZyB0aGUgSW5wdXQgZWxlbWVudCB0byBgU2VsZWN0YCBhcyBgaW5wdXRgIHBhcmFtZXRlci5cbiAgICogSWYgdGhpcyBvcHRpb24gaXMgc2V0IHlvdSBtdXN0IHBhc3MgdGhlIG9wdGlvbnMgb2YgdGhlIHNlbGVjdCBhcyBjaGlsZHJlbi5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIHNlbGVjdDogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBQcm9wcyBhcHBsaWVkIHRvIHRoZSBbYFNlbGVjdGBdKC9tYXRlcmlhbC11aS9hcGkvc2VsZWN0LykgZWxlbWVudC5cbiAgICovXG4gIFNlbGVjdFByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogVGhlIHNpemUgb2YgdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIHNpemU6IFByb3BUeXBlcyAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsnbWVkaXVtJywgJ3NtYWxsJ10pLCBQcm9wVHlwZXMuc3RyaW5nXSksXG4gIC8qKlxuICAgKiBUaGUgc3lzdGVtIHByb3AgdGhhdCBhbGxvd3MgZGVmaW5pbmcgc3lzdGVtIG92ZXJyaWRlcyBhcyB3ZWxsIGFzIGFkZGl0aW9uYWwgQ1NTIHN0eWxlcy5cbiAgICovXG4gIHN4OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLmJvb2xdKSksIFByb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSksXG4gIC8qKlxuICAgKiBUeXBlIG9mIHRoZSBgaW5wdXRgIGVsZW1lbnQuIEl0IHNob3VsZCBiZSBbYSB2YWxpZCBIVE1MNSBpbnB1dCB0eXBlXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVE1ML0VsZW1lbnQvaW5wdXQjRm9ybV8lM0NpbnB1dCUzRV90eXBlcykuXG4gICAqL1xuICB0eXBlOiBQcm9wVHlwZXMgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqLy5zdHJpbmcsXG4gIC8qKlxuICAgKiBUaGUgdmFsdWUgb2YgdGhlIGBpbnB1dGAgZWxlbWVudCwgcmVxdWlyZWQgZm9yIGEgY29udHJvbGxlZCBjb21wb25lbnQuXG4gICAqL1xuICB2YWx1ZTogUHJvcFR5cGVzLmFueSxcbiAgLyoqXG4gICAqIFRoZSB2YXJpYW50IHRvIHVzZS5cbiAgICogQGRlZmF1bHQgJ291dGxpbmVkJ1xuICAgKi9cbiAgdmFyaWFudDogUHJvcFR5cGVzLm9uZU9mKFsnZmlsbGVkJywgJ291dGxpbmVkJywgJ3N0YW5kYXJkJ10pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgVGV4dEZpZWxkOyIsImltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3Nlcyc7XG5pbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3MgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzcyc7XG5leHBvcnQgZnVuY3Rpb24gZ2V0VG9nZ2xlQnV0dG9uVXRpbGl0eUNsYXNzKHNsb3QpIHtcbiAgcmV0dXJuIGdlbmVyYXRlVXRpbGl0eUNsYXNzKCdNdWlUb2dnbGVCdXR0b24nLCBzbG90KTtcbn1cbmNvbnN0IHRvZ2dsZUJ1dHRvbkNsYXNzZXMgPSBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzKCdNdWlUb2dnbGVCdXR0b24nLCBbJ3Jvb3QnLCAnZGlzYWJsZWQnLCAnc2VsZWN0ZWQnLCAnc3RhbmRhcmQnLCAncHJpbWFyeScsICdzZWNvbmRhcnknLCAnc2l6ZVNtYWxsJywgJ3NpemVNZWRpdW0nLCAnc2l6ZUxhcmdlJywgJ2Z1bGxXaWR0aCddKTtcbmV4cG9ydCBkZWZhdWx0IHRvZ2dsZUJ1dHRvbkNsYXNzZXM7IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuLyoqXG4gKiBAaWdub3JlIC0gaW50ZXJuYWwgY29tcG9uZW50LlxuICovXG5jb25zdCBUb2dnbGVCdXR0b25Hcm91cENvbnRleHQgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlQ29udGV4dCh7fSk7XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBUb2dnbGVCdXR0b25Hcm91cENvbnRleHQuZGlzcGxheU5hbWUgPSAnVG9nZ2xlQnV0dG9uR3JvdXBDb250ZXh0Jztcbn1cbmV4cG9ydCBkZWZhdWx0IFRvZ2dsZUJ1dHRvbkdyb3VwQ29udGV4dDsiLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG4vKipcbiAqIEBpZ25vcmUgLSBpbnRlcm5hbCBjb21wb25lbnQuXG4gKi9cbmNvbnN0IFRvZ2dsZUJ1dHRvbkdyb3VwQnV0dG9uQ29udGV4dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVDb250ZXh0KHVuZGVmaW5lZCk7XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBUb2dnbGVCdXR0b25Hcm91cEJ1dHRvbkNvbnRleHQuZGlzcGxheU5hbWUgPSAnVG9nZ2xlQnV0dG9uR3JvdXBCdXR0b25Db250ZXh0Jztcbn1cbmV4cG9ydCBkZWZhdWx0IFRvZ2dsZUJ1dHRvbkdyb3VwQnV0dG9uQ29udGV4dDsiLCIvLyBEZXRlcm1pbmUgaWYgdGhlIHRvZ2dsZSBidXR0b24gdmFsdWUgbWF0Y2hlcywgb3IgaXMgY29udGFpbmVkIGluLCB0aGVcbi8vIGNhbmRpZGF0ZSBncm91cCB2YWx1ZS5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzVmFsdWVTZWxlY3RlZCh2YWx1ZSwgY2FuZGlkYXRlKSB7XG4gIGlmIChjYW5kaWRhdGUgPT09IHVuZGVmaW5lZCB8fCB2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlmIChBcnJheS5pc0FycmF5KGNhbmRpZGF0ZSkpIHtcbiAgICByZXR1cm4gY2FuZGlkYXRlLmluZGV4T2YodmFsdWUpID49IDA7XG4gIH1cbiAgcmV0dXJuIHZhbHVlID09PSBjYW5kaWRhdGU7XG59IiwiJ3VzZSBjbGllbnQnO1xuXG4vLyBAaW5oZXJpdGVkQ29tcG9uZW50IEJ1dHRvbkJhc2VcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJ2YWx1ZVwiXSxcbiAgX2V4Y2x1ZGVkMiA9IFtcImNoaWxkcmVuXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29sb3JcIiwgXCJkaXNhYmxlZFwiLCBcImRpc2FibGVGb2N1c1JpcHBsZVwiLCBcImZ1bGxXaWR0aFwiLCBcIm9uQ2hhbmdlXCIsIFwib25DbGlja1wiLCBcInNlbGVjdGVkXCIsIFwic2l6ZVwiLCBcInZhbHVlXCJdO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHJlc29sdmVQcm9wcyBmcm9tICdAbXVpL3V0aWxzL3Jlc29sdmVQcm9wcyc7XG5pbXBvcnQgY29tcG9zZUNsYXNzZXMgZnJvbSAnQG11aS91dGlscy9jb21wb3NlQ2xhc3Nlcyc7XG5pbXBvcnQgeyBhbHBoYSB9IGZyb20gJy4uL3N0eWxlcyc7XG5pbXBvcnQgQnV0dG9uQmFzZSBmcm9tICcuLi9CdXR0b25CYXNlJztcbmltcG9ydCBjYXBpdGFsaXplIGZyb20gJy4uL3V0aWxzL2NhcGl0YWxpemUnO1xuaW1wb3J0IHsgdXNlRGVmYXVsdFByb3BzIH0gZnJvbSAnLi4vRGVmYXVsdFByb3BzUHJvdmlkZXInO1xuaW1wb3J0IHN0eWxlZCBmcm9tICcuLi9zdHlsZXMvc3R5bGVkJztcbmltcG9ydCB0b2dnbGVCdXR0b25DbGFzc2VzLCB7IGdldFRvZ2dsZUJ1dHRvblV0aWxpdHlDbGFzcyB9IGZyb20gJy4vdG9nZ2xlQnV0dG9uQ2xhc3Nlcyc7XG5pbXBvcnQgVG9nZ2xlQnV0dG9uR3JvdXBDb250ZXh0IGZyb20gJy4uL1RvZ2dsZUJ1dHRvbkdyb3VwL1RvZ2dsZUJ1dHRvbkdyb3VwQ29udGV4dCc7XG5pbXBvcnQgVG9nZ2xlQnV0dG9uR3JvdXBCdXR0b25Db250ZXh0IGZyb20gJy4uL1RvZ2dsZUJ1dHRvbkdyb3VwL1RvZ2dsZUJ1dHRvbkdyb3VwQnV0dG9uQ29udGV4dCc7XG5pbXBvcnQgaXNWYWx1ZVNlbGVjdGVkIGZyb20gJy4uL1RvZ2dsZUJ1dHRvbkdyb3VwL2lzVmFsdWVTZWxlY3RlZCc7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuY29uc3QgdXNlVXRpbGl0eUNsYXNzZXMgPSBvd25lclN0YXRlID0+IHtcbiAgY29uc3Qge1xuICAgIGNsYXNzZXMsXG4gICAgZnVsbFdpZHRoLFxuICAgIHNlbGVjdGVkLFxuICAgIGRpc2FibGVkLFxuICAgIHNpemUsXG4gICAgY29sb3JcbiAgfSA9IG93bmVyU3RhdGU7XG4gIGNvbnN0IHNsb3RzID0ge1xuICAgIHJvb3Q6IFsncm9vdCcsIHNlbGVjdGVkICYmICdzZWxlY3RlZCcsIGRpc2FibGVkICYmICdkaXNhYmxlZCcsIGZ1bGxXaWR0aCAmJiAnZnVsbFdpZHRoJywgYHNpemUke2NhcGl0YWxpemUoc2l6ZSl9YCwgY29sb3JdXG4gIH07XG4gIHJldHVybiBjb21wb3NlQ2xhc3NlcyhzbG90cywgZ2V0VG9nZ2xlQnV0dG9uVXRpbGl0eUNsYXNzLCBjbGFzc2VzKTtcbn07XG5jb25zdCBUb2dnbGVCdXR0b25Sb290ID0gc3R5bGVkKEJ1dHRvbkJhc2UsIHtcbiAgbmFtZTogJ011aVRvZ2dsZUJ1dHRvbicsXG4gIHNsb3Q6ICdSb290JyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgb3duZXJTdGF0ZVxuICAgIH0gPSBwcm9wcztcbiAgICByZXR1cm4gW3N0eWxlcy5yb290LCBzdHlsZXNbYHNpemUke2NhcGl0YWxpemUob3duZXJTdGF0ZS5zaXplKX1gXV07XG4gIH1cbn0pKCh7XG4gIHRoZW1lLFxuICBvd25lclN0YXRlXG59KSA9PiB7XG4gIGxldCBzZWxlY3RlZENvbG9yID0gb3duZXJTdGF0ZS5jb2xvciA9PT0gJ3N0YW5kYXJkJyA/IHRoZW1lLnBhbGV0dGUudGV4dC5wcmltYXJ5IDogdGhlbWUucGFsZXR0ZVtvd25lclN0YXRlLmNvbG9yXS5tYWluO1xuICBsZXQgc2VsZWN0ZWRDb2xvckNoYW5uZWw7XG4gIGlmICh0aGVtZS52YXJzKSB7XG4gICAgc2VsZWN0ZWRDb2xvciA9IG93bmVyU3RhdGUuY29sb3IgPT09ICdzdGFuZGFyZCcgPyB0aGVtZS52YXJzLnBhbGV0dGUudGV4dC5wcmltYXJ5IDogdGhlbWUudmFycy5wYWxldHRlW293bmVyU3RhdGUuY29sb3JdLm1haW47XG4gICAgc2VsZWN0ZWRDb2xvckNoYW5uZWwgPSBvd25lclN0YXRlLmNvbG9yID09PSAnc3RhbmRhcmQnID8gdGhlbWUudmFycy5wYWxldHRlLnRleHQucHJpbWFyeUNoYW5uZWwgOiB0aGVtZS52YXJzLnBhbGV0dGVbb3duZXJTdGF0ZS5jb2xvcl0ubWFpbkNoYW5uZWw7XG4gIH1cbiAgcmV0dXJuIF9leHRlbmRzKHt9LCB0aGVtZS50eXBvZ3JhcGh5LmJ1dHRvbiwge1xuICAgIGJvcmRlclJhZGl1czogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnNoYXBlLmJvcmRlclJhZGl1cyxcbiAgICBwYWRkaW5nOiAxMSxcbiAgICBib3JkZXI6IGAxcHggc29saWQgJHsodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZS5kaXZpZGVyfWAsXG4gICAgY29sb3I6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlLmFjdGlvbi5hY3RpdmVcbiAgfSwgb3duZXJTdGF0ZS5mdWxsV2lkdGggJiYge1xuICAgIHdpZHRoOiAnMTAwJSdcbiAgfSwge1xuICAgIFtgJi4ke3RvZ2dsZUJ1dHRvbkNsYXNzZXMuZGlzYWJsZWR9YF06IHtcbiAgICAgIGNvbG9yOiAodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZS5hY3Rpb24uZGlzYWJsZWQsXG4gICAgICBib3JkZXI6IGAxcHggc29saWQgJHsodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZS5hY3Rpb24uZGlzYWJsZWRCYWNrZ3JvdW5kfWBcbiAgICB9LFxuICAgICcmOmhvdmVyJzoge1xuICAgICAgdGV4dERlY29yYXRpb246ICdub25lJyxcbiAgICAgIC8vIFJlc2V0IG9uIG1vdXNlIGRldmljZXNcbiAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUudmFycyA/IGByZ2JhKCR7dGhlbWUudmFycy5wYWxldHRlLnRleHQucHJpbWFyeUNoYW5uZWx9IC8gJHt0aGVtZS52YXJzLnBhbGV0dGUuYWN0aW9uLmhvdmVyT3BhY2l0eX0pYCA6IGFscGhhKHRoZW1lLnBhbGV0dGUudGV4dC5wcmltYXJ5LCB0aGVtZS5wYWxldHRlLmFjdGlvbi5ob3Zlck9wYWNpdHkpLFxuICAgICAgJ0BtZWRpYSAoaG92ZXI6IG5vbmUpJzoge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICd0cmFuc3BhcmVudCdcbiAgICAgIH1cbiAgICB9LFxuICAgIFtgJi4ke3RvZ2dsZUJ1dHRvbkNsYXNzZXMuc2VsZWN0ZWR9YF06IHtcbiAgICAgIGNvbG9yOiBzZWxlY3RlZENvbG9yLFxuICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS52YXJzID8gYHJnYmEoJHtzZWxlY3RlZENvbG9yQ2hhbm5lbH0gLyAke3RoZW1lLnZhcnMucGFsZXR0ZS5hY3Rpb24uc2VsZWN0ZWRPcGFjaXR5fSlgIDogYWxwaGEoc2VsZWN0ZWRDb2xvciwgdGhlbWUucGFsZXR0ZS5hY3Rpb24uc2VsZWN0ZWRPcGFjaXR5KSxcbiAgICAgICcmOmhvdmVyJzoge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnZhcnMgPyBgcmdiYSgke3NlbGVjdGVkQ29sb3JDaGFubmVsfSAvIGNhbGMoJHt0aGVtZS52YXJzLnBhbGV0dGUuYWN0aW9uLnNlbGVjdGVkT3BhY2l0eX0gKyAke3RoZW1lLnZhcnMucGFsZXR0ZS5hY3Rpb24uaG92ZXJPcGFjaXR5fSkpYCA6IGFscGhhKHNlbGVjdGVkQ29sb3IsIHRoZW1lLnBhbGV0dGUuYWN0aW9uLnNlbGVjdGVkT3BhY2l0eSArIHRoZW1lLnBhbGV0dGUuYWN0aW9uLmhvdmVyT3BhY2l0eSksXG4gICAgICAgIC8vIFJlc2V0IG9uIHRvdWNoIGRldmljZXMsIGl0IGRvZXNuJ3QgYWRkIHNwZWNpZmljaXR5XG4gICAgICAgICdAbWVkaWEgKGhvdmVyOiBub25lKSc6IHtcbiAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnZhcnMgPyBgcmdiYSgke3NlbGVjdGVkQ29sb3JDaGFubmVsfSAvICR7dGhlbWUudmFycy5wYWxldHRlLmFjdGlvbi5zZWxlY3RlZE9wYWNpdHl9KWAgOiBhbHBoYShzZWxlY3RlZENvbG9yLCB0aGVtZS5wYWxldHRlLmFjdGlvbi5zZWxlY3RlZE9wYWNpdHkpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0sIG93bmVyU3RhdGUuc2l6ZSA9PT0gJ3NtYWxsJyAmJiB7XG4gICAgcGFkZGluZzogNyxcbiAgICBmb250U2l6ZTogdGhlbWUudHlwb2dyYXBoeS5weFRvUmVtKDEzKVxuICB9LCBvd25lclN0YXRlLnNpemUgPT09ICdsYXJnZScgJiYge1xuICAgIHBhZGRpbmc6IDE1LFxuICAgIGZvbnRTaXplOiB0aGVtZS50eXBvZ3JhcGh5LnB4VG9SZW0oMTUpXG4gIH0pO1xufSk7XG5jb25zdCBUb2dnbGVCdXR0b24gPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBUb2dnbGVCdXR0b24oaW5Qcm9wcywgcmVmKSB7XG4gIC8vIHByb3BzIHByaW9yaXR5OiBgaW5Qcm9wc2AgPiBgY29udGV4dFByb3BzYCA+IGB0aGVtZURlZmF1bHRQcm9wc2BcbiAgY29uc3QgX1JlYWN0JHVzZUNvbnRleHQgPSBSZWFjdC51c2VDb250ZXh0KFRvZ2dsZUJ1dHRvbkdyb3VwQ29udGV4dCksXG4gICAge1xuICAgICAgdmFsdWU6IGNvbnRleHRWYWx1ZVxuICAgIH0gPSBfUmVhY3QkdXNlQ29udGV4dCxcbiAgICBjb250ZXh0UHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfUmVhY3QkdXNlQ29udGV4dCwgX2V4Y2x1ZGVkKTtcbiAgY29uc3QgdG9nZ2xlQnV0dG9uR3JvdXBCdXR0b25Db250ZXh0UG9zaXRpb25DbGFzc05hbWUgPSBSZWFjdC51c2VDb250ZXh0KFRvZ2dsZUJ1dHRvbkdyb3VwQnV0dG9uQ29udGV4dCk7XG4gIGNvbnN0IHJlc29sdmVkUHJvcHMgPSByZXNvbHZlUHJvcHMoX2V4dGVuZHMoe30sIGNvbnRleHRQcm9wcywge1xuICAgIHNlbGVjdGVkOiBpc1ZhbHVlU2VsZWN0ZWQoaW5Qcm9wcy52YWx1ZSwgY29udGV4dFZhbHVlKVxuICB9KSwgaW5Qcm9wcyk7XG4gIGNvbnN0IHByb3BzID0gdXNlRGVmYXVsdFByb3BzKHtcbiAgICBwcm9wczogcmVzb2x2ZWRQcm9wcyxcbiAgICBuYW1lOiAnTXVpVG9nZ2xlQnV0dG9uJ1xuICB9KTtcbiAgY29uc3Qge1xuICAgICAgY2hpbGRyZW4sXG4gICAgICBjbGFzc05hbWUsXG4gICAgICBjb2xvciA9ICdzdGFuZGFyZCcsXG4gICAgICBkaXNhYmxlZCA9IGZhbHNlLFxuICAgICAgZGlzYWJsZUZvY3VzUmlwcGxlID0gZmFsc2UsXG4gICAgICBmdWxsV2lkdGggPSBmYWxzZSxcbiAgICAgIG9uQ2hhbmdlLFxuICAgICAgb25DbGljayxcbiAgICAgIHNlbGVjdGVkLFxuICAgICAgc2l6ZSA9ICdtZWRpdW0nLFxuICAgICAgdmFsdWVcbiAgICB9ID0gcHJvcHMsXG4gICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkMik7XG4gIGNvbnN0IG93bmVyU3RhdGUgPSBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICBjb2xvcixcbiAgICBkaXNhYmxlZCxcbiAgICBkaXNhYmxlRm9jdXNSaXBwbGUsXG4gICAgZnVsbFdpZHRoLFxuICAgIHNpemVcbiAgfSk7XG4gIGNvbnN0IGNsYXNzZXMgPSB1c2VVdGlsaXR5Q2xhc3Nlcyhvd25lclN0YXRlKTtcbiAgY29uc3QgaGFuZGxlQ2hhbmdlID0gZXZlbnQgPT4ge1xuICAgIGlmIChvbkNsaWNrKSB7XG4gICAgICBvbkNsaWNrKGV2ZW50LCB2YWx1ZSk7XG4gICAgICBpZiAoZXZlbnQuZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChvbkNoYW5nZSkge1xuICAgICAgb25DaGFuZ2UoZXZlbnQsIHZhbHVlKTtcbiAgICB9XG4gIH07XG4gIGNvbnN0IHBvc2l0aW9uQ2xhc3NOYW1lID0gdG9nZ2xlQnV0dG9uR3JvdXBCdXR0b25Db250ZXh0UG9zaXRpb25DbGFzc05hbWUgfHwgJyc7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeChUb2dnbGVCdXR0b25Sb290LCBfZXh0ZW5kcyh7XG4gICAgY2xhc3NOYW1lOiBjbHN4KGNvbnRleHRQcm9wcy5jbGFzc05hbWUsIGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lLCBwb3NpdGlvbkNsYXNzTmFtZSksXG4gICAgZGlzYWJsZWQ6IGRpc2FibGVkLFxuICAgIGZvY3VzUmlwcGxlOiAhZGlzYWJsZUZvY3VzUmlwcGxlLFxuICAgIHJlZjogcmVmLFxuICAgIG9uQ2xpY2s6IGhhbmRsZUNoYW5nZSxcbiAgICBvbkNoYW5nZTogb25DaGFuZ2UsXG4gICAgdmFsdWU6IHZhbHVlLFxuICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGUsXG4gICAgXCJhcmlhLXByZXNzZWRcIjogc2VsZWN0ZWRcbiAgfSwgb3RoZXIsIHtcbiAgICBjaGlsZHJlbjogY2hpbGRyZW5cbiAgfSkpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBUb2dnbGVCdXR0b24ucHJvcFR5cGVzIC8qIHJlbW92ZS1wcm9wdHlwZXMgKi8gPSB7XG4gIC8vIOKUjOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgCBXYXJuaW5nIOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUkFxuICAvLyDilIIgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zLiDilIJcbiAgLy8g4pSCICAgIFRvIHVwZGF0ZSB0aGVtLCBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBgcG5wbSBwcm9wdHlwZXNgLiAgICAg4pSCXG4gIC8vIOKUlOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUmFxuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBUaGUgY29sb3Igb2YgdGhlIGJ1dHRvbiB3aGVuIGl0IGlzIGluIGFuIGFjdGl2ZSBzdGF0ZS5cbiAgICogSXQgc3VwcG9ydHMgYm90aCBkZWZhdWx0IGFuZCBjdXN0b20gdGhlbWUgY29sb3JzLCB3aGljaCBjYW4gYmUgYWRkZWQgYXMgc2hvd24gaW4gdGhlXG4gICAqIFtwYWxldHRlIGN1c3RvbWl6YXRpb24gZ3VpZGVdKGh0dHBzOi8vbXVpLmNvbS9tYXRlcmlhbC11aS9jdXN0b21pemF0aW9uL3BhbGV0dGUvI2N1c3RvbS1jb2xvcnMpLlxuICAgKiBAZGVmYXVsdCAnc3RhbmRhcmQnXG4gICAqL1xuICBjb2xvcjogUHJvcFR5cGVzIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi8ub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydzdGFuZGFyZCcsICdwcmltYXJ5JywgJ3NlY29uZGFyeScsICdlcnJvcicsICdpbmZvJywgJ3N1Y2Nlc3MnLCAnd2FybmluZyddKSwgUHJvcFR5cGVzLnN0cmluZ10pLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgY29tcG9uZW50IGlzIGRpc2FibGVkLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZGlzYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgIGtleWJvYXJkIGZvY3VzIHJpcHBsZSBpcyBkaXNhYmxlZC5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRpc2FibGVGb2N1c1JpcHBsZTogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSByaXBwbGUgZWZmZWN0IGlzIGRpc2FibGVkLlxuICAgKlxuICAgKiDimqDvuI8gV2l0aG91dCBhIHJpcHBsZSB0aGVyZSBpcyBubyBzdHlsaW5nIGZvciA6Zm9jdXMtdmlzaWJsZSBieSBkZWZhdWx0LiBCZSBzdXJlXG4gICAqIHRvIGhpZ2hsaWdodCB0aGUgZWxlbWVudCBieSBhcHBseWluZyBzZXBhcmF0ZSBzdHlsZXMgd2l0aCB0aGUgYC5NdWktZm9jdXNWaXNpYmxlYCBjbGFzcy5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRpc2FibGVSaXBwbGU6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgYnV0dG9uIHdpbGwgdGFrZSB1cCB0aGUgZnVsbCB3aWR0aCBvZiBpdHMgY29udGFpbmVyLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZnVsbFdpZHRoOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIHN0YXRlIGNoYW5nZXMuXG4gICAqXG4gICAqIEBwYXJhbSB7UmVhY3QuTW91c2VFdmVudDxIVE1MRWxlbWVudD59IGV2ZW50IFRoZSBldmVudCBzb3VyY2Ugb2YgdGhlIGNhbGxiYWNrLlxuICAgKiBAcGFyYW0ge2FueX0gdmFsdWUgb2YgdGhlIHNlbGVjdGVkIGJ1dHRvbi5cbiAgICovXG4gIG9uQ2hhbmdlOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIGJ1dHRvbiBpcyBjbGlja2VkLlxuICAgKlxuICAgKiBAcGFyYW0ge1JlYWN0Lk1vdXNlRXZlbnQ8SFRNTEVsZW1lbnQ+fSBldmVudCBUaGUgZXZlbnQgc291cmNlIG9mIHRoZSBjYWxsYmFjay5cbiAgICogQHBhcmFtIHthbnl9IHZhbHVlIG9mIHRoZSBzZWxlY3RlZCBidXR0b24uXG4gICAqL1xuICBvbkNsaWNrOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGJ1dHRvbiBpcyByZW5kZXJlZCBpbiBhbiBhY3RpdmUgc3RhdGUuXG4gICAqL1xuICBzZWxlY3RlZDogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBUaGUgc2l6ZSBvZiB0aGUgY29tcG9uZW50LlxuICAgKiBUaGUgcHJvcCBkZWZhdWx0cyB0byB0aGUgdmFsdWUgaW5oZXJpdGVkIGZyb20gdGhlIHBhcmVudCBUb2dnbGVCdXR0b25Hcm91cCBjb21wb25lbnQuXG4gICAqIEBkZWZhdWx0ICdtZWRpdW0nXG4gICAqL1xuICBzaXplOiBQcm9wVHlwZXMgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqLy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ3NtYWxsJywgJ21lZGl1bScsICdsYXJnZSddKSwgUHJvcFR5cGVzLnN0cmluZ10pLFxuICAvKipcbiAgICogVGhlIHN5c3RlbSBwcm9wIHRoYXQgYWxsb3dzIGRlZmluaW5nIHN5c3RlbSBvdmVycmlkZXMgYXMgd2VsbCBhcyBhZGRpdGlvbmFsIENTUyBzdHlsZXMuXG4gICAqL1xuICBzeDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5ib29sXSkpLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pLFxuICAvKipcbiAgICogVGhlIHZhbHVlIHRvIGFzc29jaWF0ZSB3aXRoIHRoZSBidXR0b24gd2hlbiBzZWxlY3RlZCBpbiBhXG4gICAqIFRvZ2dsZUJ1dHRvbkdyb3VwLlxuICAgKi9cbiAgdmFsdWU6IFByb3BUeXBlcyAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovLmFueS5pc1JlcXVpcmVkXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgVG9nZ2xlQnV0dG9uOyIsImltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3Nlcyc7XG5pbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3MgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzcyc7XG5leHBvcnQgZnVuY3Rpb24gZ2V0VG9nZ2xlQnV0dG9uR3JvdXBVdGlsaXR5Q2xhc3Moc2xvdCkge1xuICByZXR1cm4gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoJ011aVRvZ2dsZUJ1dHRvbkdyb3VwJywgc2xvdCk7XG59XG5jb25zdCB0b2dnbGVCdXR0b25Hcm91cENsYXNzZXMgPSBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzKCdNdWlUb2dnbGVCdXR0b25Hcm91cCcsIFsncm9vdCcsICdzZWxlY3RlZCcsICdob3Jpem9udGFsJywgJ3ZlcnRpY2FsJywgJ2Rpc2FibGVkJywgJ2dyb3VwZWQnLCAnZ3JvdXBlZEhvcml6b250YWwnLCAnZ3JvdXBlZFZlcnRpY2FsJywgJ2Z1bGxXaWR0aCcsICdmaXJzdEJ1dHRvbicsICdsYXN0QnV0dG9uJywgJ21pZGRsZUJ1dHRvbiddKTtcbmV4cG9ydCBkZWZhdWx0IHRvZ2dsZUJ1dHRvbkdyb3VwQ2xhc3NlczsiLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJjaGlsZHJlblwiLCBcImNsYXNzTmFtZVwiLCBcImNvbG9yXCIsIFwiZGlzYWJsZWRcIiwgXCJleGNsdXNpdmVcIiwgXCJmdWxsV2lkdGhcIiwgXCJvbkNoYW5nZVwiLCBcIm9yaWVudGF0aW9uXCIsIFwic2l6ZVwiLCBcInZhbHVlXCJdO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgaXNGcmFnbWVudCB9IGZyb20gJ3JlYWN0LWlzJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCBjb21wb3NlQ2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2NvbXBvc2VDbGFzc2VzJztcbmltcG9ydCBnZXRWYWxpZFJlYWN0Q2hpbGRyZW4gZnJvbSAnQG11aS91dGlscy9nZXRWYWxpZFJlYWN0Q2hpbGRyZW4nO1xuaW1wb3J0IHN0eWxlZCBmcm9tICcuLi9zdHlsZXMvc3R5bGVkJztcbmltcG9ydCB7IHVzZURlZmF1bHRQcm9wcyB9IGZyb20gJy4uL0RlZmF1bHRQcm9wc1Byb3ZpZGVyJztcbmltcG9ydCBjYXBpdGFsaXplIGZyb20gJy4uL3V0aWxzL2NhcGl0YWxpemUnO1xuaW1wb3J0IHRvZ2dsZUJ1dHRvbkdyb3VwQ2xhc3NlcywgeyBnZXRUb2dnbGVCdXR0b25Hcm91cFV0aWxpdHlDbGFzcyB9IGZyb20gJy4vdG9nZ2xlQnV0dG9uR3JvdXBDbGFzc2VzJztcbmltcG9ydCBUb2dnbGVCdXR0b25Hcm91cENvbnRleHQgZnJvbSAnLi9Ub2dnbGVCdXR0b25Hcm91cENvbnRleHQnO1xuaW1wb3J0IFRvZ2dsZUJ1dHRvbkdyb3VwQnV0dG9uQ29udGV4dCBmcm9tICcuL1RvZ2dsZUJ1dHRvbkdyb3VwQnV0dG9uQ29udGV4dCc7XG5pbXBvcnQgdG9nZ2xlQnV0dG9uQ2xhc3NlcyBmcm9tICcuLi9Ub2dnbGVCdXR0b24vdG9nZ2xlQnV0dG9uQ2xhc3Nlcyc7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuY29uc3QgdXNlVXRpbGl0eUNsYXNzZXMgPSBvd25lclN0YXRlID0+IHtcbiAgY29uc3Qge1xuICAgIGNsYXNzZXMsXG4gICAgb3JpZW50YXRpb24sXG4gICAgZnVsbFdpZHRoLFxuICAgIGRpc2FibGVkXG4gIH0gPSBvd25lclN0YXRlO1xuICBjb25zdCBzbG90cyA9IHtcbiAgICByb290OiBbJ3Jvb3QnLCBvcmllbnRhdGlvbiA9PT0gJ3ZlcnRpY2FsJyAmJiAndmVydGljYWwnLCBmdWxsV2lkdGggJiYgJ2Z1bGxXaWR0aCddLFxuICAgIGdyb3VwZWQ6IFsnZ3JvdXBlZCcsIGBncm91cGVkJHtjYXBpdGFsaXplKG9yaWVudGF0aW9uKX1gLCBkaXNhYmxlZCAmJiAnZGlzYWJsZWQnXSxcbiAgICBmaXJzdEJ1dHRvbjogWydmaXJzdEJ1dHRvbiddLFxuICAgIGxhc3RCdXR0b246IFsnbGFzdEJ1dHRvbiddLFxuICAgIG1pZGRsZUJ1dHRvbjogWydtaWRkbGVCdXR0b24nXVxuICB9O1xuICByZXR1cm4gY29tcG9zZUNsYXNzZXMoc2xvdHMsIGdldFRvZ2dsZUJ1dHRvbkdyb3VwVXRpbGl0eUNsYXNzLCBjbGFzc2VzKTtcbn07XG5jb25zdCBUb2dnbGVCdXR0b25Hcm91cFJvb3QgPSBzdHlsZWQoJ2RpdicsIHtcbiAgbmFtZTogJ011aVRvZ2dsZUJ1dHRvbkdyb3VwJyxcbiAgc2xvdDogJ1Jvb3QnLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBvd25lclN0YXRlXG4gICAgfSA9IHByb3BzO1xuICAgIHJldHVybiBbe1xuICAgICAgW2AmIC4ke3RvZ2dsZUJ1dHRvbkdyb3VwQ2xhc3Nlcy5ncm91cGVkfWBdOiBzdHlsZXMuZ3JvdXBlZFxuICAgIH0sIHtcbiAgICAgIFtgJiAuJHt0b2dnbGVCdXR0b25Hcm91cENsYXNzZXMuZ3JvdXBlZH1gXTogc3R5bGVzW2Bncm91cGVkJHtjYXBpdGFsaXplKG93bmVyU3RhdGUub3JpZW50YXRpb24pfWBdXG4gICAgfSwge1xuICAgICAgW2AmIC4ke3RvZ2dsZUJ1dHRvbkdyb3VwQ2xhc3Nlcy5maXJzdEJ1dHRvbn1gXTogc3R5bGVzLmZpcnN0QnV0dG9uXG4gICAgfSwge1xuICAgICAgW2AmIC4ke3RvZ2dsZUJ1dHRvbkdyb3VwQ2xhc3Nlcy5sYXN0QnV0dG9ufWBdOiBzdHlsZXMubGFzdEJ1dHRvblxuICAgIH0sIHtcbiAgICAgIFtgJiAuJHt0b2dnbGVCdXR0b25Hcm91cENsYXNzZXMubWlkZGxlQnV0dG9ufWBdOiBzdHlsZXMubWlkZGxlQnV0dG9uXG4gICAgfSwgc3R5bGVzLnJvb3QsIG93bmVyU3RhdGUub3JpZW50YXRpb24gPT09ICd2ZXJ0aWNhbCcgJiYgc3R5bGVzLnZlcnRpY2FsLCBvd25lclN0YXRlLmZ1bGxXaWR0aCAmJiBzdHlsZXMuZnVsbFdpZHRoXTtcbiAgfVxufSkoKHtcbiAgb3duZXJTdGF0ZSxcbiAgdGhlbWVcbn0pID0+IF9leHRlbmRzKHtcbiAgZGlzcGxheTogJ2lubGluZS1mbGV4JyxcbiAgYm9yZGVyUmFkaXVzOiAodGhlbWUudmFycyB8fCB0aGVtZSkuc2hhcGUuYm9yZGVyUmFkaXVzXG59LCBvd25lclN0YXRlLm9yaWVudGF0aW9uID09PSAndmVydGljYWwnICYmIHtcbiAgZmxleERpcmVjdGlvbjogJ2NvbHVtbidcbn0sIG93bmVyU3RhdGUuZnVsbFdpZHRoICYmIHtcbiAgd2lkdGg6ICcxMDAlJ1xufSwge1xuICBbYCYgLiR7dG9nZ2xlQnV0dG9uR3JvdXBDbGFzc2VzLmdyb3VwZWR9YF06IF9leHRlbmRzKHt9LCBvd25lclN0YXRlLm9yaWVudGF0aW9uID09PSAnaG9yaXpvbnRhbCcgPyB7XG4gICAgW2AmLiR7dG9nZ2xlQnV0dG9uR3JvdXBDbGFzc2VzLnNlbGVjdGVkfSArIC4ke3RvZ2dsZUJ1dHRvbkdyb3VwQ2xhc3Nlcy5ncm91cGVkfS4ke3RvZ2dsZUJ1dHRvbkdyb3VwQ2xhc3Nlcy5zZWxlY3RlZH1gXToge1xuICAgICAgYm9yZGVyTGVmdDogMCxcbiAgICAgIG1hcmdpbkxlZnQ6IDBcbiAgICB9XG4gIH0gOiB7XG4gICAgW2AmLiR7dG9nZ2xlQnV0dG9uR3JvdXBDbGFzc2VzLnNlbGVjdGVkfSArIC4ke3RvZ2dsZUJ1dHRvbkdyb3VwQ2xhc3Nlcy5ncm91cGVkfS4ke3RvZ2dsZUJ1dHRvbkdyb3VwQ2xhc3Nlcy5zZWxlY3RlZH1gXToge1xuICAgICAgYm9yZGVyVG9wOiAwLFxuICAgICAgbWFyZ2luVG9wOiAwXG4gICAgfVxuICB9KVxufSwgb3duZXJTdGF0ZS5vcmllbnRhdGlvbiA9PT0gJ2hvcml6b250YWwnID8ge1xuICBbYCYgLiR7dG9nZ2xlQnV0dG9uR3JvdXBDbGFzc2VzLmZpcnN0QnV0dG9ufSwmIC4ke3RvZ2dsZUJ1dHRvbkdyb3VwQ2xhc3Nlcy5taWRkbGVCdXR0b259YF06IHtcbiAgICBib3JkZXJUb3BSaWdodFJhZGl1czogMCxcbiAgICBib3JkZXJCb3R0b21SaWdodFJhZGl1czogMFxuICB9LFxuICBbYCYgLiR7dG9nZ2xlQnV0dG9uR3JvdXBDbGFzc2VzLmxhc3RCdXR0b259LCYgLiR7dG9nZ2xlQnV0dG9uR3JvdXBDbGFzc2VzLm1pZGRsZUJ1dHRvbn1gXToge1xuICAgIG1hcmdpbkxlZnQ6IC0xLFxuICAgIGJvcmRlckxlZnQ6ICcxcHggc29saWQgdHJhbnNwYXJlbnQnLFxuICAgIGJvcmRlclRvcExlZnRSYWRpdXM6IDAsXG4gICAgYm9yZGVyQm90dG9tTGVmdFJhZGl1czogMFxuICB9XG59IDoge1xuICBbYCYgLiR7dG9nZ2xlQnV0dG9uR3JvdXBDbGFzc2VzLmZpcnN0QnV0dG9ufSwmIC4ke3RvZ2dsZUJ1dHRvbkdyb3VwQ2xhc3Nlcy5taWRkbGVCdXR0b259YF06IHtcbiAgICBib3JkZXJCb3R0b21MZWZ0UmFkaXVzOiAwLFxuICAgIGJvcmRlckJvdHRvbVJpZ2h0UmFkaXVzOiAwXG4gIH0sXG4gIFtgJiAuJHt0b2dnbGVCdXR0b25Hcm91cENsYXNzZXMubGFzdEJ1dHRvbn0sJiAuJHt0b2dnbGVCdXR0b25Hcm91cENsYXNzZXMubWlkZGxlQnV0dG9ufWBdOiB7XG4gICAgbWFyZ2luVG9wOiAtMSxcbiAgICBib3JkZXJUb3A6ICcxcHggc29saWQgdHJhbnNwYXJlbnQnLFxuICAgIGJvcmRlclRvcExlZnRSYWRpdXM6IDAsXG4gICAgYm9yZGVyVG9wUmlnaHRSYWRpdXM6IDBcbiAgfVxufSwgb3duZXJTdGF0ZS5vcmllbnRhdGlvbiA9PT0gJ2hvcml6b250YWwnID8ge1xuICBbYCYgLiR7dG9nZ2xlQnV0dG9uR3JvdXBDbGFzc2VzLmxhc3RCdXR0b259LiR7dG9nZ2xlQnV0dG9uQ2xhc3Nlcy5kaXNhYmxlZH0sJiAuJHt0b2dnbGVCdXR0b25Hcm91cENsYXNzZXMubWlkZGxlQnV0dG9ufS4ke3RvZ2dsZUJ1dHRvbkNsYXNzZXMuZGlzYWJsZWR9YF06IHtcbiAgICBib3JkZXJMZWZ0OiAnMXB4IHNvbGlkIHRyYW5zcGFyZW50J1xuICB9XG59IDoge1xuICBbYCYgLiR7dG9nZ2xlQnV0dG9uR3JvdXBDbGFzc2VzLmxhc3RCdXR0b259LiR7dG9nZ2xlQnV0dG9uQ2xhc3Nlcy5kaXNhYmxlZH0sJiAuJHt0b2dnbGVCdXR0b25Hcm91cENsYXNzZXMubWlkZGxlQnV0dG9ufS4ke3RvZ2dsZUJ1dHRvbkNsYXNzZXMuZGlzYWJsZWR9YF06IHtcbiAgICBib3JkZXJUb3A6ICcxcHggc29saWQgdHJhbnNwYXJlbnQnXG4gIH1cbn0pKTtcbmNvbnN0IFRvZ2dsZUJ1dHRvbkdyb3VwID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gVG9nZ2xlQnV0dG9uR3JvdXAoaW5Qcm9wcywgcmVmKSB7XG4gIGNvbnN0IHByb3BzID0gdXNlRGVmYXVsdFByb3BzKHtcbiAgICBwcm9wczogaW5Qcm9wcyxcbiAgICBuYW1lOiAnTXVpVG9nZ2xlQnV0dG9uR3JvdXAnXG4gIH0pO1xuICBjb25zdCB7XG4gICAgICBjaGlsZHJlbixcbiAgICAgIGNsYXNzTmFtZSxcbiAgICAgIGNvbG9yID0gJ3N0YW5kYXJkJyxcbiAgICAgIGRpc2FibGVkID0gZmFsc2UsXG4gICAgICBleGNsdXNpdmUgPSBmYWxzZSxcbiAgICAgIGZ1bGxXaWR0aCA9IGZhbHNlLFxuICAgICAgb25DaGFuZ2UsXG4gICAgICBvcmllbnRhdGlvbiA9ICdob3Jpem9udGFsJyxcbiAgICAgIHNpemUgPSAnbWVkaXVtJyxcbiAgICAgIHZhbHVlXG4gICAgfSA9IHByb3BzLFxuICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIF9leGNsdWRlZCk7XG4gIGNvbnN0IG93bmVyU3RhdGUgPSBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICBkaXNhYmxlZCxcbiAgICBmdWxsV2lkdGgsXG4gICAgb3JpZW50YXRpb24sXG4gICAgc2l6ZVxuICB9KTtcbiAgY29uc3QgY2xhc3NlcyA9IHVzZVV0aWxpdHlDbGFzc2VzKG93bmVyU3RhdGUpO1xuICBjb25zdCBoYW5kbGVDaGFuZ2UgPSBSZWFjdC51c2VDYWxsYmFjaygoZXZlbnQsIGJ1dHRvblZhbHVlKSA9PiB7XG4gICAgaWYgKCFvbkNoYW5nZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBpbmRleCA9IHZhbHVlICYmIHZhbHVlLmluZGV4T2YoYnV0dG9uVmFsdWUpO1xuICAgIGxldCBuZXdWYWx1ZTtcbiAgICBpZiAodmFsdWUgJiYgaW5kZXggPj0gMCkge1xuICAgICAgbmV3VmFsdWUgPSB2YWx1ZS5zbGljZSgpO1xuICAgICAgbmV3VmFsdWUuc3BsaWNlKGluZGV4LCAxKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbmV3VmFsdWUgPSB2YWx1ZSA/IHZhbHVlLmNvbmNhdChidXR0b25WYWx1ZSkgOiBbYnV0dG9uVmFsdWVdO1xuICAgIH1cbiAgICBvbkNoYW5nZShldmVudCwgbmV3VmFsdWUpO1xuICB9LCBbb25DaGFuZ2UsIHZhbHVlXSk7XG4gIGNvbnN0IGhhbmRsZUV4Y2x1c2l2ZUNoYW5nZSA9IFJlYWN0LnVzZUNhbGxiYWNrKChldmVudCwgYnV0dG9uVmFsdWUpID0+IHtcbiAgICBpZiAoIW9uQ2hhbmdlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIG9uQ2hhbmdlKGV2ZW50LCB2YWx1ZSA9PT0gYnV0dG9uVmFsdWUgPyBudWxsIDogYnV0dG9uVmFsdWUpO1xuICB9LCBbb25DaGFuZ2UsIHZhbHVlXSk7XG4gIGNvbnN0IGNvbnRleHQgPSBSZWFjdC51c2VNZW1vKCgpID0+ICh7XG4gICAgY2xhc3NOYW1lOiBjbGFzc2VzLmdyb3VwZWQsXG4gICAgb25DaGFuZ2U6IGV4Y2x1c2l2ZSA/IGhhbmRsZUV4Y2x1c2l2ZUNoYW5nZSA6IGhhbmRsZUNoYW5nZSxcbiAgICB2YWx1ZSxcbiAgICBzaXplLFxuICAgIGZ1bGxXaWR0aCxcbiAgICBjb2xvcixcbiAgICBkaXNhYmxlZFxuICB9KSwgW2NsYXNzZXMuZ3JvdXBlZCwgZXhjbHVzaXZlLCBoYW5kbGVFeGNsdXNpdmVDaGFuZ2UsIGhhbmRsZUNoYW5nZSwgdmFsdWUsIHNpemUsIGZ1bGxXaWR0aCwgY29sb3IsIGRpc2FibGVkXSk7XG4gIGNvbnN0IHZhbGlkQ2hpbGRyZW4gPSBnZXRWYWxpZFJlYWN0Q2hpbGRyZW4oY2hpbGRyZW4pO1xuICBjb25zdCBjaGlsZHJlbkNvdW50ID0gdmFsaWRDaGlsZHJlbi5sZW5ndGg7XG4gIGNvbnN0IGdldEJ1dHRvblBvc2l0aW9uQ2xhc3NOYW1lID0gaW5kZXggPT4ge1xuICAgIGNvbnN0IGlzRmlyc3RCdXR0b24gPSBpbmRleCA9PT0gMDtcbiAgICBjb25zdCBpc0xhc3RCdXR0b24gPSBpbmRleCA9PT0gY2hpbGRyZW5Db3VudCAtIDE7XG4gICAgaWYgKGlzRmlyc3RCdXR0b24gJiYgaXNMYXN0QnV0dG9uKSB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuICAgIGlmIChpc0ZpcnN0QnV0dG9uKSB7XG4gICAgICByZXR1cm4gY2xhc3Nlcy5maXJzdEJ1dHRvbjtcbiAgICB9XG4gICAgaWYgKGlzTGFzdEJ1dHRvbikge1xuICAgICAgcmV0dXJuIGNsYXNzZXMubGFzdEJ1dHRvbjtcbiAgICB9XG4gICAgcmV0dXJuIGNsYXNzZXMubWlkZGxlQnV0dG9uO1xuICB9O1xuICByZXR1cm4gLyojX19QVVJFX18qL19qc3goVG9nZ2xlQnV0dG9uR3JvdXBSb290LCBfZXh0ZW5kcyh7XG4gICAgcm9sZTogXCJncm91cFwiLFxuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSksXG4gICAgcmVmOiByZWYsXG4gICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZVxuICB9LCBvdGhlciwge1xuICAgIGNoaWxkcmVuOiAvKiNfX1BVUkVfXyovX2pzeChUb2dnbGVCdXR0b25Hcm91cENvbnRleHQuUHJvdmlkZXIsIHtcbiAgICAgIHZhbHVlOiBjb250ZXh0LFxuICAgICAgY2hpbGRyZW46IHZhbGlkQ2hpbGRyZW4ubWFwKChjaGlsZCwgaW5kZXgpID0+IHtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICBpZiAoaXNGcmFnbWVudChjaGlsZCkpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoW1wiTVVJOiBUaGUgVG9nZ2xlQnV0dG9uR3JvdXAgY29tcG9uZW50IGRvZXNuJ3QgYWNjZXB0IGEgRnJhZ21lbnQgYXMgYSBjaGlsZC5cIiwgJ0NvbnNpZGVyIHByb3ZpZGluZyBhbiBhcnJheSBpbnN0ZWFkLiddLmpvaW4oJ1xcbicpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KFRvZ2dsZUJ1dHRvbkdyb3VwQnV0dG9uQ29udGV4dC5Qcm92aWRlciwge1xuICAgICAgICAgIHZhbHVlOiBnZXRCdXR0b25Qb3NpdGlvbkNsYXNzTmFtZShpbmRleCksXG4gICAgICAgICAgY2hpbGRyZW46IGNoaWxkXG4gICAgICAgIH0sIGluZGV4KTtcbiAgICAgIH0pXG4gICAgfSlcbiAgfSkpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBUb2dnbGVCdXR0b25Hcm91cC5wcm9wVHlwZXMgLyogcmVtb3ZlLXByb3B0eXBlcyAqLyA9IHtcbiAgLy8g4pSM4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAIFdhcm5pbmcg4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSQXG4gIC8vIOKUgiBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMuIOKUglxuICAvLyDilIIgICAgVG8gdXBkYXRlIHRoZW0sIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIGBwbnBtIHByb3B0eXBlc2AuICAgICDilIJcbiAgLy8g4pSU4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSYXG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIFRoZSBjb2xvciBvZiB0aGUgYnV0dG9uIHdoZW4gaXQgaXMgc2VsZWN0ZWQuXG4gICAqIEl0IHN1cHBvcnRzIGJvdGggZGVmYXVsdCBhbmQgY3VzdG9tIHRoZW1lIGNvbG9ycywgd2hpY2ggY2FuIGJlIGFkZGVkIGFzIHNob3duIGluIHRoZVxuICAgKiBbcGFsZXR0ZSBjdXN0b21pemF0aW9uIGd1aWRlXShodHRwczovL211aS5jb20vbWF0ZXJpYWwtdWkvY3VzdG9taXphdGlvbi9wYWxldHRlLyNjdXN0b20tY29sb3JzKS5cbiAgICogQGRlZmF1bHQgJ3N0YW5kYXJkJ1xuICAgKi9cbiAgY29sb3I6IFByb3BUeXBlcyAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsnc3RhbmRhcmQnLCAncHJpbWFyeScsICdzZWNvbmRhcnknLCAnZXJyb3InLCAnaW5mbycsICdzdWNjZXNzJywgJ3dhcm5pbmcnXSksIFByb3BUeXBlcy5zdHJpbmddKSxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGNvbXBvbmVudCBpcyBkaXNhYmxlZC4gVGhpcyBpbXBsaWVzIHRoYXQgYWxsIFRvZ2dsZUJ1dHRvbiBjaGlsZHJlbiB3aWxsIGJlIGRpc2FibGVkLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZGlzYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogSWYgYHRydWVgLCBvbmx5IGFsbG93IG9uZSBvZiB0aGUgY2hpbGQgVG9nZ2xlQnV0dG9uIHZhbHVlcyB0byBiZSBzZWxlY3RlZC5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGV4Y2x1c2l2ZTogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBidXR0b24gZ3JvdXAgd2lsbCB0YWtlIHVwIHRoZSBmdWxsIHdpZHRoIG9mIGl0cyBjb250YWluZXIuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBmdWxsV2lkdGg6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgdmFsdWUgY2hhbmdlcy5cbiAgICpcbiAgICogQHBhcmFtIHtSZWFjdC5Nb3VzZUV2ZW50PEhUTUxFbGVtZW50Pn0gZXZlbnQgVGhlIGV2ZW50IHNvdXJjZSBvZiB0aGUgY2FsbGJhY2suXG4gICAqIEBwYXJhbSB7YW55fSB2YWx1ZSBvZiB0aGUgc2VsZWN0ZWQgYnV0dG9ucy4gV2hlbiBgZXhjbHVzaXZlYCBpcyB0cnVlXG4gICAqIHRoaXMgaXMgYSBzaW5nbGUgdmFsdWU7IHdoZW4gZmFsc2UgYW4gYXJyYXkgb2Ygc2VsZWN0ZWQgdmFsdWVzLiBJZiBubyB2YWx1ZVxuICAgKiBpcyBzZWxlY3RlZCBhbmQgYGV4Y2x1c2l2ZWAgaXMgdHJ1ZSB0aGUgdmFsdWUgaXMgbnVsbDsgd2hlbiBmYWxzZSBhbiBlbXB0eSBhcnJheS5cbiAgICovXG4gIG9uQ2hhbmdlOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgb3JpZW50YXRpb24gKGxheW91dCBmbG93IGRpcmVjdGlvbikuXG4gICAqIEBkZWZhdWx0ICdob3Jpem9udGFsJ1xuICAgKi9cbiAgb3JpZW50YXRpb246IFByb3BUeXBlcy5vbmVPZihbJ2hvcml6b250YWwnLCAndmVydGljYWwnXSksXG4gIC8qKlxuICAgKiBUaGUgc2l6ZSBvZiB0aGUgY29tcG9uZW50LlxuICAgKiBAZGVmYXVsdCAnbWVkaXVtJ1xuICAgKi9cbiAgc2l6ZTogUHJvcFR5cGVzIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi8ub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydzbWFsbCcsICdtZWRpdW0nLCAnbGFyZ2UnXSksIFByb3BUeXBlcy5zdHJpbmddKSxcbiAgLyoqXG4gICAqIFRoZSBzeXN0ZW0gcHJvcCB0aGF0IGFsbG93cyBkZWZpbmluZyBzeXN0ZW0gb3ZlcnJpZGVzIGFzIHdlbGwgYXMgYWRkaXRpb25hbCBDU1Mgc3R5bGVzLlxuICAgKi9cbiAgc3g6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuYm9vbF0pKSwgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKSxcbiAgLyoqXG4gICAqIFRoZSBjdXJyZW50bHkgc2VsZWN0ZWQgdmFsdWUgd2l0aGluIHRoZSBncm91cCBvciBhbiBhcnJheSBvZiBzZWxlY3RlZFxuICAgKiB2YWx1ZXMgd2hlbiBgZXhjbHVzaXZlYCBpcyBmYWxzZS5cbiAgICpcbiAgICogVGhlIHZhbHVlIG11c3QgaGF2ZSByZWZlcmVuY2UgZXF1YWxpdHkgd2l0aCB0aGUgb3B0aW9uIGluIG9yZGVyIHRvIGJlIHNlbGVjdGVkLlxuICAgKi9cbiAgdmFsdWU6IFByb3BUeXBlcy5hbnlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCBUb2dnbGVCdXR0b25Hcm91cDsiLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJnZXRUcmlnZ2VyXCIsIFwidGFyZ2V0XCJdO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuZnVuY3Rpb24gZGVmYXVsdFRyaWdnZXIoc3RvcmUsIG9wdGlvbnMpIHtcbiAgY29uc3Qge1xuICAgIGRpc2FibGVIeXN0ZXJlc2lzID0gZmFsc2UsXG4gICAgdGhyZXNob2xkID0gMTAwLFxuICAgIHRhcmdldFxuICB9ID0gb3B0aW9ucztcbiAgY29uc3QgcHJldmlvdXMgPSBzdG9yZS5jdXJyZW50O1xuICBpZiAodGFyZ2V0KSB7XG4gICAgLy8gR2V0IHZlcnRpY2FsIHNjcm9sbFxuICAgIHN0b3JlLmN1cnJlbnQgPSB0YXJnZXQucGFnZVlPZmZzZXQgIT09IHVuZGVmaW5lZCA/IHRhcmdldC5wYWdlWU9mZnNldCA6IHRhcmdldC5zY3JvbGxUb3A7XG4gIH1cbiAgaWYgKCFkaXNhYmxlSHlzdGVyZXNpcyAmJiBwcmV2aW91cyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgaWYgKHN0b3JlLmN1cnJlbnQgPCBwcmV2aW91cykge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gc3RvcmUuY3VycmVudCA+IHRocmVzaG9sZDtcbn1cbmNvbnN0IGRlZmF1bHRUYXJnZXQgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IG51bGw7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1c2VTY3JvbGxUcmlnZ2VyKG9wdGlvbnMgPSB7fSkge1xuICBjb25zdCB7XG4gICAgICBnZXRUcmlnZ2VyID0gZGVmYXVsdFRyaWdnZXIsXG4gICAgICB0YXJnZXQgPSBkZWZhdWx0VGFyZ2V0XG4gICAgfSA9IG9wdGlvbnMsXG4gICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShvcHRpb25zLCBfZXhjbHVkZWQpO1xuICBjb25zdCBzdG9yZSA9IFJlYWN0LnVzZVJlZigpO1xuICBjb25zdCBbdHJpZ2dlciwgc2V0VHJpZ2dlcl0gPSBSZWFjdC51c2VTdGF0ZSgoKSA9PiBnZXRUcmlnZ2VyKHN0b3JlLCBvdGhlcikpO1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGNvbnN0IGhhbmRsZVNjcm9sbCA9ICgpID0+IHtcbiAgICAgIHNldFRyaWdnZXIoZ2V0VHJpZ2dlcihzdG9yZSwgX2V4dGVuZHMoe1xuICAgICAgICB0YXJnZXRcbiAgICAgIH0sIG90aGVyKSkpO1xuICAgIH07XG4gICAgaGFuZGxlU2Nyb2xsKCk7IC8vIFJlLWV2YWx1YXRlIHRyaWdnZXIgd2hlbiBkZXBlbmRlbmNpZXMgY2hhbmdlXG4gICAgdGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIGhhbmRsZVNjcm9sbCwge1xuICAgICAgcGFzc2l2ZTogdHJ1ZVxuICAgIH0pO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICB0YXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgaGFuZGxlU2Nyb2xsLCB7XG4gICAgICAgIHBhc3NpdmU6IHRydWVcbiAgICAgIH0pO1xuICAgIH07XG4gICAgLy8gU2VlIE9wdGlvbiAzLiBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvaXNzdWVzLzE0NDc2I2lzc3VlY29tbWVudC00NzExOTkwNTVcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvZXhoYXVzdGl2ZS1kZXBzXG4gIH0sIFt0YXJnZXQsIGdldFRyaWdnZXIsIEpTT04uc3RyaW5naWZ5KG90aGVyKV0pO1xuICByZXR1cm4gdHJpZ2dlcjtcbn0iLCJcInVzZSBzdHJpY3RcIjtcbid1c2UgY2xpZW50JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcbnZhciBSZWFjdCA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCJyZWFjdFwiKSk7XG52YXIgX3N0eWxlZEVuZ2luZSA9IHJlcXVpcmUoXCJAbXVpL3N0eWxlZC1lbmdpbmVcIik7XG5mdW5jdGlvbiBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUoZSkgeyBpZiAoXCJmdW5jdGlvblwiICE9IHR5cGVvZiBXZWFrTWFwKSByZXR1cm4gbnVsbDsgdmFyIHIgPSBuZXcgV2Vha01hcCgpLCB0ID0gbmV3IFdlYWtNYXAoKTsgcmV0dXJuIChfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUgPSBmdW5jdGlvbiAoZSkgeyByZXR1cm4gZSA/IHQgOiByOyB9KShlKTsgfVxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQoZSwgcikgeyBpZiAoIXIgJiYgZSAmJiBlLl9fZXNNb2R1bGUpIHJldHVybiBlOyBpZiAobnVsbCA9PT0gZSB8fCBcIm9iamVjdFwiICE9IHR5cGVvZiBlICYmIFwiZnVuY3Rpb25cIiAhPSB0eXBlb2YgZSkgcmV0dXJuIHsgZGVmYXVsdDogZSB9OyB2YXIgdCA9IF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZShyKTsgaWYgKHQgJiYgdC5oYXMoZSkpIHJldHVybiB0LmdldChlKTsgdmFyIG4gPSB7IF9fcHJvdG9fXzogbnVsbCB9LCBhID0gT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7IGZvciAodmFyIHUgaW4gZSkgaWYgKFwiZGVmYXVsdFwiICE9PSB1ICYmIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlLCB1KSkgeyB2YXIgaSA9IGEgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGUsIHUpIDogbnVsbDsgaSAmJiAoaS5nZXQgfHwgaS5zZXQpID8gT2JqZWN0LmRlZmluZVByb3BlcnR5KG4sIHUsIGkpIDogblt1XSA9IGVbdV07IH0gcmV0dXJuIG4uZGVmYXVsdCA9IGUsIHQgJiYgdC5zZXQoZSwgbiksIG47IH1cbmZ1bmN0aW9uIGlzT2JqZWN0RW1wdHkob2JqKSB7XG4gIHJldHVybiBPYmplY3Qua2V5cyhvYmopLmxlbmd0aCA9PT0gMDtcbn1cbmZ1bmN0aW9uIHVzZVRoZW1lKGRlZmF1bHRUaGVtZSA9IG51bGwpIHtcbiAgY29uc3QgY29udGV4dFRoZW1lID0gUmVhY3QudXNlQ29udGV4dChfc3R5bGVkRW5naW5lLlRoZW1lQ29udGV4dCk7XG4gIHJldHVybiAhY29udGV4dFRoZW1lIHx8IGlzT2JqZWN0RW1wdHkoY29udGV4dFRoZW1lKSA/IGRlZmF1bHRUaGVtZSA6IGNvbnRleHRUaGVtZTtcbn1cbnZhciBfZGVmYXVsdCA9IGV4cG9ydHMuZGVmYXVsdCA9IHVzZVRoZW1lOyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxudmFyIHRzbGliID0gcmVxdWlyZSgndHNsaWInKTtcbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG52YXIgaGV5TGlzdGVuID0gcmVxdWlyZSgnaGV5LWxpc3RlbicpO1xudmFyIHN0eWxlVmFsdWVUeXBlcyA9IHJlcXVpcmUoJ3N0eWxlLXZhbHVlLXR5cGVzJyk7XG52YXIgcG9wbW90aW9uID0gcmVxdWlyZSgncG9wbW90aW9uJyk7XG52YXIgc3luYyA9IHJlcXVpcmUoJ2ZyYW1lc3luYycpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcERlZmF1bHRMZWdhY3kgKGUpIHsgcmV0dXJuIGUgJiYgdHlwZW9mIGUgPT09ICdvYmplY3QnICYmICdkZWZhdWx0JyBpbiBlID8gZSA6IHsgJ2RlZmF1bHQnOiBlIH07IH1cblxuZnVuY3Rpb24gX2ludGVyb3BOYW1lc3BhY2UoZSkge1xuICAgIGlmIChlICYmIGUuX19lc01vZHVsZSkgcmV0dXJuIGU7XG4gICAgdmFyIG4gPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIGlmIChlKSB7XG4gICAgICAgIE9iamVjdC5rZXlzKGUpLmZvckVhY2goZnVuY3Rpb24gKGspIHtcbiAgICAgICAgICAgIGlmIChrICE9PSAnZGVmYXVsdCcpIHtcbiAgICAgICAgICAgICAgICB2YXIgZCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZSwgayk7XG4gICAgICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG4sIGssIGQuZ2V0ID8gZCA6IHtcbiAgICAgICAgICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZVtrXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgblsnZGVmYXVsdCddID0gZTtcbiAgICByZXR1cm4gT2JqZWN0LmZyZWV6ZShuKTtcbn1cblxudmFyIFJlYWN0X19uYW1lc3BhY2UgPSAvKiNfX1BVUkVfXyovX2ludGVyb3BOYW1lc3BhY2UoUmVhY3QpO1xudmFyIFJlYWN0X19kZWZhdWx0ID0gLyojX19QVVJFX18qL19pbnRlcm9wRGVmYXVsdExlZ2FjeShSZWFjdCk7XG52YXIgc3luY19fZGVmYXVsdCA9IC8qI19fUFVSRV9fKi9faW50ZXJvcERlZmF1bHRMZWdhY3koc3luYyk7XG5cbnZhciBjcmVhdGVEZWZpbml0aW9uID0gZnVuY3Rpb24gKHByb3BOYW1lcykgeyByZXR1cm4gKHtcbiAgICBpc0VuYWJsZWQ6IGZ1bmN0aW9uIChwcm9wcykgeyByZXR1cm4gcHJvcE5hbWVzLnNvbWUoZnVuY3Rpb24gKG5hbWUpIHsgcmV0dXJuICEhcHJvcHNbbmFtZV07IH0pOyB9LFxufSk7IH07XG52YXIgZmVhdHVyZURlZmluaXRpb25zID0ge1xuICAgIG1lYXN1cmVMYXlvdXQ6IGNyZWF0ZURlZmluaXRpb24oW1xuICAgICAgICBcImxheW91dFwiLFxuICAgICAgICBcImxheW91dElkXCIsXG4gICAgICAgIFwiZHJhZ1wiLFxuICAgICAgICBcIl9sYXlvdXRSZXNldFRyYW5zZm9ybVwiLFxuICAgIF0pLFxuICAgIGFuaW1hdGlvbjogY3JlYXRlRGVmaW5pdGlvbihbXG4gICAgICAgIFwiYW5pbWF0ZVwiLFxuICAgICAgICBcImV4aXRcIixcbiAgICAgICAgXCJ2YXJpYW50c1wiLFxuICAgICAgICBcIndoaWxlSG92ZXJcIixcbiAgICAgICAgXCJ3aGlsZVRhcFwiLFxuICAgICAgICBcIndoaWxlRm9jdXNcIixcbiAgICAgICAgXCJ3aGlsZURyYWdcIixcbiAgICBdKSxcbiAgICBleGl0OiBjcmVhdGVEZWZpbml0aW9uKFtcImV4aXRcIl0pLFxuICAgIGRyYWc6IGNyZWF0ZURlZmluaXRpb24oW1wiZHJhZ1wiLCBcImRyYWdDb250cm9sc1wiXSksXG4gICAgZm9jdXM6IGNyZWF0ZURlZmluaXRpb24oW1wid2hpbGVGb2N1c1wiXSksXG4gICAgaG92ZXI6IGNyZWF0ZURlZmluaXRpb24oW1wid2hpbGVIb3ZlclwiLCBcIm9uSG92ZXJTdGFydFwiLCBcIm9uSG92ZXJFbmRcIl0pLFxuICAgIHRhcDogY3JlYXRlRGVmaW5pdGlvbihbXCJ3aGlsZVRhcFwiLCBcIm9uVGFwXCIsIFwib25UYXBTdGFydFwiLCBcIm9uVGFwQ2FuY2VsXCJdKSxcbiAgICBwYW46IGNyZWF0ZURlZmluaXRpb24oW1xuICAgICAgICBcIm9uUGFuXCIsXG4gICAgICAgIFwib25QYW5TdGFydFwiLFxuICAgICAgICBcIm9uUGFuU2Vzc2lvblN0YXJ0XCIsXG4gICAgICAgIFwib25QYW5FbmRcIixcbiAgICBdKSxcbiAgICBsYXlvdXRBbmltYXRpb246IGNyZWF0ZURlZmluaXRpb24oW1wibGF5b3V0XCIsIFwibGF5b3V0SWRcIl0pLFxufTtcbmZ1bmN0aW9uIGxvYWRGZWF0dXJlcyhmZWF0dXJlcykge1xuICAgIGZvciAodmFyIGtleSBpbiBmZWF0dXJlcykge1xuICAgICAgICB2YXIgQ29tcG9uZW50ID0gZmVhdHVyZXNba2V5XTtcbiAgICAgICAgaWYgKENvbXBvbmVudCAhPT0gbnVsbClcbiAgICAgICAgICAgIGZlYXR1cmVEZWZpbml0aW9uc1trZXldLkNvbXBvbmVudCA9IENvbXBvbmVudDtcbiAgICB9XG59XG5cbnZhciBMYXp5Q29udGV4dCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQoeyBzdHJpY3Q6IGZhbHNlIH0pO1xuXG52YXIgZmVhdHVyZU5hbWVzID0gT2JqZWN0LmtleXMoZmVhdHVyZURlZmluaXRpb25zKTtcbnZhciBudW1GZWF0dXJlcyA9IGZlYXR1cmVOYW1lcy5sZW5ndGg7XG4vKipcbiAqIExvYWQgZmVhdHVyZXMgdmlhIHJlbmRlcmxlc3MgY29tcG9uZW50cyBiYXNlZCBvbiB0aGUgcHJvdmlkZWQgTW90aW9uUHJvcHMuXG4gKi9cbmZ1bmN0aW9uIHVzZUZlYXR1cmVzKHByb3BzLCB2aXN1YWxFbGVtZW50LCBwcmVsb2FkZWRGZWF0dXJlcykge1xuICAgIHZhciBmZWF0dXJlcyA9IFtdO1xuICAgIHZhciBsYXp5Q29udGV4dCA9IFJlYWN0LnVzZUNvbnRleHQoTGF6eUNvbnRleHQpO1xuICAgIGlmICghdmlzdWFsRWxlbWVudClcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgLyoqXG4gICAgICogSWYgd2UncmUgaW4gZGV2ZWxvcG1lbnQgbW9kZSwgY2hlY2sgdG8gbWFrZSBzdXJlIHdlJ3JlIG5vdCByZW5kZXJpbmcgYSBtb3Rpb24gY29tcG9uZW50XG4gICAgICogYXMgYSBjaGlsZCBvZiBMYXp5TW90aW9uLCBhcyB0aGlzIHdpbGwgYnJlYWsgdGhlIGZpbGUtc2l6ZSBiZW5lZml0cyBvZiB1c2luZyBpdC5cbiAgICAgKi9cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiICYmXG4gICAgICAgIHByZWxvYWRlZEZlYXR1cmVzICYmXG4gICAgICAgIGxhenlDb250ZXh0LnN0cmljdCkge1xuICAgICAgICBoZXlMaXN0ZW4uaW52YXJpYW50KGZhbHNlLCBcIllvdSBoYXZlIHJlbmRlcmVkIGEgYG1vdGlvbmAgY29tcG9uZW50IHdpdGhpbiBhIGBMYXp5TW90aW9uYCBjb21wb25lbnQuIFRoaXMgd2lsbCBicmVhayB0cmVlIHNoYWtpbmcuIEltcG9ydCBhbmQgcmVuZGVyIGEgYG1gIGNvbXBvbmVudCBpbnN0ZWFkLlwiKTtcbiAgICB9XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBudW1GZWF0dXJlczsgaSsrKSB7XG4gICAgICAgIHZhciBuYW1lXzEgPSBmZWF0dXJlTmFtZXNbaV07XG4gICAgICAgIHZhciBfYSA9IGZlYXR1cmVEZWZpbml0aW9uc1tuYW1lXzFdLCBpc0VuYWJsZWQgPSBfYS5pc0VuYWJsZWQsIENvbXBvbmVudCA9IF9hLkNvbXBvbmVudDtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEl0IG1pZ2h0IGJlIHBvc3NpYmxlIGluIHRoZSBmdXR1cmUgdG8gdXNlIHRoaXMgbW9tZW50IHRvXG4gICAgICAgICAqIGR5bmFtaWNhbGx5IHJlcXVlc3QgZnVuY3Rpb25hbGl0eS4gSW4gaW5pdGlhbCB0ZXN0cyB0aGlzXG4gICAgICAgICAqIHdhcyBwcm9kdWNpbmcgYSBsb3Qgb2YgZHVwbGljYXRpb24gYW1vbmdzdCBidW5kbGVzLlxuICAgICAgICAgKi9cbiAgICAgICAgaWYgKGlzRW5hYmxlZChwcm9wcykgJiYgQ29tcG9uZW50KSB7XG4gICAgICAgICAgICBmZWF0dXJlcy5wdXNoKFJlYWN0X19uYW1lc3BhY2UuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIHRzbGliLl9fYXNzaWduKHsga2V5OiBuYW1lXzEgfSwgcHJvcHMsIHsgdmlzdWFsRWxlbWVudDogdmlzdWFsRWxlbWVudCB9KSkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmZWF0dXJlcztcbn1cblxuLyoqXG4gKiBAcHVibGljXG4gKi9cbnZhciBNb3Rpb25Db25maWdDb250ZXh0ID0gUmVhY3QuY3JlYXRlQ29udGV4dCh7XG4gICAgdHJhbnNmb3JtUGFnZVBvaW50OiBmdW5jdGlvbiAocCkgeyByZXR1cm4gcDsgfSxcbiAgICBpc1N0YXRpYzogZmFsc2UsXG59KTtcblxudmFyIE1vdGlvbkNvbnRleHQgPSBSZWFjdC5jcmVhdGVDb250ZXh0KHt9KTtcbmZ1bmN0aW9uIHVzZVZpc3VhbEVsZW1lbnRDb250ZXh0KCkge1xuICAgIHJldHVybiBSZWFjdC51c2VDb250ZXh0KE1vdGlvbkNvbnRleHQpLnZpc3VhbEVsZW1lbnQ7XG59XG5cbi8qKlxuICogQHB1YmxpY1xuICovXG52YXIgUHJlc2VuY2VDb250ZXh0ID0gUmVhY3QuY3JlYXRlQ29udGV4dChudWxsKTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgY29uc3RhbnQgdmFsdWUgb3ZlciB0aGUgbGlmZWN5Y2xlIG9mIGEgY29tcG9uZW50LlxuICpcbiAqIEV2ZW4gaWYgYHVzZU1lbW9gIGlzIHByb3ZpZGVkIGFuIGVtcHR5IGFycmF5IGFzIGl0cyBmaW5hbCBhcmd1bWVudCwgaXQgZG9lc24ndCBvZmZlclxuICogYSBndWFyYW50ZWUgdGhhdCBpdCB3b24ndCByZS1ydW4gZm9yIHBlcmZvcm1hbmNlIHJlYXNvbnMgbGF0ZXIgb24uIEJ5IHVzaW5nIGB1c2VDb25zdGFudGBcbiAqIHlvdSBjYW4gZW5zdXJlIHRoYXQgaW5pdGlhbGlzZXJzIGRvbid0IGV4ZWN1dGUgdHdpY2Ugb3IgbW9yZS5cbiAqL1xuZnVuY3Rpb24gdXNlQ29uc3RhbnQoaW5pdCkge1xuICAgIHZhciByZWYgPSBSZWFjdC51c2VSZWYobnVsbCk7XG4gICAgaWYgKHJlZi5jdXJyZW50ID09PSBudWxsKSB7XG4gICAgICAgIHJlZi5jdXJyZW50ID0gaW5pdCgpO1xuICAgIH1cbiAgICByZXR1cm4gcmVmLmN1cnJlbnQ7XG59XG5cbi8qKlxuICogV2hlbiBhIGNvbXBvbmVudCBpcyB0aGUgY2hpbGQgb2YgYEFuaW1hdGVQcmVzZW5jZWAsIGl0IGNhbiB1c2UgYHVzZVByZXNlbmNlYFxuICogdG8gYWNjZXNzIGluZm9ybWF0aW9uIGFib3V0IHdoZXRoZXIgaXQncyBzdGlsbCBwcmVzZW50IGluIHRoZSBSZWFjdCB0cmVlLlxuICpcbiAqIGBgYGpzeFxuICogaW1wb3J0IHsgdXNlUHJlc2VuY2UgfSBmcm9tIFwiZnJhbWVyLW1vdGlvblwiXG4gKlxuICogZXhwb3J0IGNvbnN0IENvbXBvbmVudCA9ICgpID0+IHtcbiAqICAgY29uc3QgW2lzUHJlc2VudCwgc2FmZVRvUmVtb3ZlXSA9IHVzZVByZXNlbmNlKClcbiAqXG4gKiAgIHVzZUVmZmVjdCgoKSA9PiB7XG4gKiAgICAgIWlzUHJlc2VudCAmJiBzZXRUaW1lb3V0KHNhZmVUb1JlbW92ZSwgMTAwMClcbiAqICAgfSwgW2lzUHJlc2VudF0pXG4gKlxuICogICByZXR1cm4gPGRpdiAvPlxuICogfVxuICogYGBgXG4gKlxuICogSWYgYGlzUHJlc2VudGAgaXMgYGZhbHNlYCwgaXQgbWVhbnMgdGhhdCBhIGNvbXBvbmVudCBoYXMgYmVlbiByZW1vdmVkIHRoZSB0cmVlLCBidXRcbiAqIGBBbmltYXRlUHJlc2VuY2VgIHdvbid0IHJlYWxseSByZW1vdmUgaXQgdW50aWwgYHNhZmVUb1JlbW92ZWAgaGFzIGJlZW4gY2FsbGVkLlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZnVuY3Rpb24gdXNlUHJlc2VuY2UoKSB7XG4gICAgdmFyIGNvbnRleHQgPSBSZWFjdC51c2VDb250ZXh0KFByZXNlbmNlQ29udGV4dCk7XG4gICAgaWYgKGNvbnRleHQgPT09IG51bGwpXG4gICAgICAgIHJldHVybiBbdHJ1ZSwgbnVsbF07XG4gICAgdmFyIGlzUHJlc2VudCA9IGNvbnRleHQuaXNQcmVzZW50LCBvbkV4aXRDb21wbGV0ZSA9IGNvbnRleHQub25FeGl0Q29tcGxldGUsIHJlZ2lzdGVyID0gY29udGV4dC5yZWdpc3RlcjtcbiAgICAvLyBJdCdzIHNhZmUgdG8gY2FsbCB0aGUgZm9sbG93aW5nIGhvb2tzIGNvbmRpdGlvbmFsbHkgKGFmdGVyIGFuIGVhcmx5IHJldHVybikgYmVjYXVzZSB0aGUgY29udGV4dCB3aWxsIGFsd2F5c1xuICAgIC8vIGVpdGhlciBiZSBudWxsIG9yIG5vbi1udWxsIGZvciB0aGUgbGlmZXNwYW4gb2YgdGhlIGNvbXBvbmVudC5cbiAgICAvLyBSZXBsYWNlIHdpdGggdXNlT3BhcXVlSWQgd2hlbiByZWxlYXNlZCBpbiBSZWFjdFxuICAgIHZhciBpZCA9IHVzZVVuaXF1ZUlkKCk7XG4gICAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlZ2lzdGVyKGlkKTsgfSwgW10pO1xuICAgIHZhciBzYWZlVG9SZW1vdmUgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBvbkV4aXRDb21wbGV0ZSA9PT0gbnVsbCB8fCBvbkV4aXRDb21wbGV0ZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogb25FeGl0Q29tcGxldGUoaWQpOyB9O1xuICAgIHJldHVybiAhaXNQcmVzZW50ICYmIG9uRXhpdENvbXBsZXRlID8gW2ZhbHNlLCBzYWZlVG9SZW1vdmVdIDogW3RydWVdO1xufVxuLyoqXG4gKiBTaW1pbGFyIHRvIGB1c2VQcmVzZW5jZWAsIGV4Y2VwdCBgdXNlSXNQcmVzZW50YCBzaW1wbHkgcmV0dXJucyB3aGV0aGVyIG9yIG5vdCB0aGUgY29tcG9uZW50IGlzIHByZXNlbnQuXG4gKiBUaGVyZSBpcyBubyBgc2FmZVRvUmVtb3ZlYCBmdW5jdGlvbi5cbiAqXG4gKiBgYGBqc3hcbiAqIGltcG9ydCB7IHVzZUlzUHJlc2VudCB9IGZyb20gXCJmcmFtZXItbW90aW9uXCJcbiAqXG4gKiBleHBvcnQgY29uc3QgQ29tcG9uZW50ID0gKCkgPT4ge1xuICogICBjb25zdCBpc1ByZXNlbnQgPSB1c2VJc1ByZXNlbnQoKVxuICpcbiAqICAgdXNlRWZmZWN0KCgpID0+IHtcbiAqICAgICAhaXNQcmVzZW50ICYmIGNvbnNvbGUubG9nKFwiSSd2ZSBiZWVuIHJlbW92ZWQhXCIpXG4gKiAgIH0sIFtpc1ByZXNlbnRdKVxuICpcbiAqICAgcmV0dXJuIDxkaXYgLz5cbiAqIH1cbiAqIGBgYFxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZnVuY3Rpb24gdXNlSXNQcmVzZW50KCkge1xuICAgIHJldHVybiBpc1ByZXNlbnQoUmVhY3QudXNlQ29udGV4dChQcmVzZW5jZUNvbnRleHQpKTtcbn1cbmZ1bmN0aW9uIGlzUHJlc2VudChjb250ZXh0KSB7XG4gICAgcmV0dXJuIGNvbnRleHQgPT09IG51bGwgPyB0cnVlIDogY29udGV4dC5pc1ByZXNlbnQ7XG59XG52YXIgY291bnRlciA9IDA7XG52YXIgaW5jcmVtZW50SWQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBjb3VudGVyKys7IH07XG52YXIgdXNlVW5pcXVlSWQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB1c2VDb25zdGFudChpbmNyZW1lbnRJZCk7IH07XG5cbi8qKlxuICogQGludGVybmFsXG4gKi9cbnZhciBMYXlvdXRHcm91cENvbnRleHQgPSBSZWFjdC5jcmVhdGVDb250ZXh0KG51bGwpO1xuXG52YXIgaXNCcm93c2VyID0gdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIjtcblxudmFyIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QgPSBpc0Jyb3dzZXIgPyBSZWFjdC51c2VMYXlvdXRFZmZlY3QgOiBSZWFjdC51c2VFZmZlY3Q7XG5cbmZ1bmN0aW9uIHVzZUxheW91dElkKF9hKSB7XG4gICAgdmFyIGxheW91dElkID0gX2EubGF5b3V0SWQ7XG4gICAgdmFyIGxheW91dEdyb3VwSWQgPSBSZWFjdC51c2VDb250ZXh0KExheW91dEdyb3VwQ29udGV4dCk7XG4gICAgcmV0dXJuIGxheW91dEdyb3VwSWQgJiYgbGF5b3V0SWQgIT09IHVuZGVmaW5lZFxuICAgICAgICA/IGxheW91dEdyb3VwSWQgKyBcIi1cIiArIGxheW91dElkXG4gICAgICAgIDogbGF5b3V0SWQ7XG59XG5mdW5jdGlvbiB1c2VWaXN1YWxFbGVtZW50KENvbXBvbmVudCwgdmlzdWFsU3RhdGUsIHByb3BzLCBjcmVhdGVWaXN1YWxFbGVtZW50KSB7XG4gICAgdmFyIGNvbmZpZyA9IFJlYWN0LnVzZUNvbnRleHQoTW90aW9uQ29uZmlnQ29udGV4dCk7XG4gICAgdmFyIGxhenlDb250ZXh0ID0gUmVhY3QudXNlQ29udGV4dChMYXp5Q29udGV4dCk7XG4gICAgdmFyIHBhcmVudCA9IHVzZVZpc3VhbEVsZW1lbnRDb250ZXh0KCk7XG4gICAgdmFyIHByZXNlbmNlQ29udGV4dCA9IFJlYWN0LnVzZUNvbnRleHQoUHJlc2VuY2VDb250ZXh0KTtcbiAgICB2YXIgbGF5b3V0SWQgPSB1c2VMYXlvdXRJZChwcm9wcyk7XG4gICAgdmFyIHZpc3VhbEVsZW1lbnRSZWYgPSBSZWFjdC51c2VSZWYodW5kZWZpbmVkKTtcbiAgICAvKipcbiAgICAgKiBJZiB3ZSBoYXZlbid0IHByZWxvYWRlZCBhIHJlbmRlcmVyLCBjaGVjayB0byBzZWUgaWYgd2UgaGF2ZSBvbmUgbGF6eS1sb2FkZWRcbiAgICAgKi9cbiAgICBpZiAoIWNyZWF0ZVZpc3VhbEVsZW1lbnQpXG4gICAgICAgIGNyZWF0ZVZpc3VhbEVsZW1lbnQgPSBsYXp5Q29udGV4dC5yZW5kZXJlcjtcbiAgICBpZiAoIXZpc3VhbEVsZW1lbnRSZWYuY3VycmVudCAmJiBjcmVhdGVWaXN1YWxFbGVtZW50KSB7XG4gICAgICAgIHZpc3VhbEVsZW1lbnRSZWYuY3VycmVudCA9IGNyZWF0ZVZpc3VhbEVsZW1lbnQoQ29tcG9uZW50LCB7XG4gICAgICAgICAgICB2aXN1YWxTdGF0ZTogdmlzdWFsU3RhdGUsXG4gICAgICAgICAgICBwYXJlbnQ6IHBhcmVudCxcbiAgICAgICAgICAgIHByb3BzOiB0c2xpYi5fX2Fzc2lnbih0c2xpYi5fX2Fzc2lnbih7fSwgcHJvcHMpLCB7IGxheW91dElkOiBsYXlvdXRJZCB9KSxcbiAgICAgICAgICAgIHByZXNlbmNlSWQ6IHByZXNlbmNlQ29udGV4dCA9PT0gbnVsbCB8fCBwcmVzZW5jZUNvbnRleHQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHByZXNlbmNlQ29udGV4dC5pZCxcbiAgICAgICAgICAgIGJsb2NrSW5pdGlhbEFuaW1hdGlvbjogKHByZXNlbmNlQ29udGV4dCA9PT0gbnVsbCB8fCBwcmVzZW5jZUNvbnRleHQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHByZXNlbmNlQ29udGV4dC5pbml0aWFsKSA9PT0gZmFsc2UsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICB2YXIgdmlzdWFsRWxlbWVudCA9IHZpc3VhbEVsZW1lbnRSZWYuY3VycmVudDtcbiAgICB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCF2aXN1YWxFbGVtZW50KVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB2aXN1YWxFbGVtZW50LnNldFByb3BzKHRzbGliLl9fYXNzaWduKHRzbGliLl9fYXNzaWduKHRzbGliLl9fYXNzaWduKHt9LCBjb25maWcpLCBwcm9wcyksIHsgbGF5b3V0SWQ6IGxheW91dElkIH0pKTtcbiAgICAgICAgdmlzdWFsRWxlbWVudC5pc1ByZXNlbnQgPSBpc1ByZXNlbnQocHJlc2VuY2VDb250ZXh0KTtcbiAgICAgICAgdmlzdWFsRWxlbWVudC5pc1ByZXNlbmNlUm9vdCA9XG4gICAgICAgICAgICAhcGFyZW50IHx8IHBhcmVudC5wcmVzZW5jZUlkICE9PSAocHJlc2VuY2VDb250ZXh0ID09PSBudWxsIHx8IHByZXNlbmNlQ29udGV4dCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcHJlc2VuY2VDb250ZXh0LmlkKTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEZpcmUgYSByZW5kZXIgdG8gZW5zdXJlIHRoZSBsYXRlc3Qgc3RhdGUgaXMgcmVmbGVjdGVkIG9uLXNjcmVlbi5cbiAgICAgICAgICovXG4gICAgICAgIHZpc3VhbEVsZW1lbnQuc3luY1JlbmRlcigpO1xuICAgIH0pO1xuICAgIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgaWYgKCF2aXN1YWxFbGVtZW50KVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAvKipcbiAgICAgICAgICogSW4gYSBmdXR1cmUgcmVmYWN0b3Igd2UgY2FuIHJlcGxhY2UgdGhlIGZlYXR1cmVzLWFzLWNvbXBvbmVudHMgYW5kXG4gICAgICAgICAqIGhhdmUgdGhpcyBsb29wIHRocm91Z2ggdGhlbSBhbGwgZmlyaW5nIFwiZWZmZWN0XCIgbGlzdGVuZXJzXG4gICAgICAgICAqL1xuICAgICAgICAoX2EgPSB2aXN1YWxFbGVtZW50LmFuaW1hdGlvblN0YXRlKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuYW5pbWF0ZUNoYW5nZXMoKTtcbiAgICB9KTtcbiAgICB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0KGZ1bmN0aW9uICgpIHsgcmV0dXJuIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHZpc3VhbEVsZW1lbnQgPT09IG51bGwgfHwgdmlzdWFsRWxlbWVudCA9PT0gdm9pZCAwID8gdm9pZCAwIDogdmlzdWFsRWxlbWVudC5ub3RpZnlVbm1vdW50KCk7IH07IH0sIFtdKTtcbiAgICByZXR1cm4gdmlzdWFsRWxlbWVudDtcbn1cblxuZnVuY3Rpb24gaXNSZWZPYmplY3QocmVmKSB7XG4gICAgcmV0dXJuICh0eXBlb2YgcmVmID09PSBcIm9iamVjdFwiICYmXG4gICAgICAgIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChyZWYsIFwiY3VycmVudFwiKSk7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIHJlZiBmdW5jdGlvbiB0aGF0LCB3aGVuIGNhbGxlZCwgaHlkcmF0ZXMgdGhlIHByb3ZpZGVkXG4gKiBleHRlcm5hbCByZWYgYW5kIFZpc3VhbEVsZW1lbnQuXG4gKi9cbmZ1bmN0aW9uIHVzZU1vdGlvblJlZih2aXN1YWxTdGF0ZSwgdmlzdWFsRWxlbWVudCwgZXh0ZXJuYWxSZWYpIHtcbiAgICByZXR1cm4gUmVhY3QudXNlQ2FsbGJhY2soZnVuY3Rpb24gKGluc3RhbmNlKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgaW5zdGFuY2UgJiYgKChfYSA9IHZpc3VhbFN0YXRlLm1vdW50KSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuY2FsbCh2aXN1YWxTdGF0ZSwgaW5zdGFuY2UpKTtcbiAgICAgICAgaWYgKHZpc3VhbEVsZW1lbnQpIHtcbiAgICAgICAgICAgIGluc3RhbmNlXG4gICAgICAgICAgICAgICAgPyB2aXN1YWxFbGVtZW50Lm1vdW50KGluc3RhbmNlKVxuICAgICAgICAgICAgICAgIDogdmlzdWFsRWxlbWVudC51bm1vdW50KCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGV4dGVybmFsUmVmKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGV4dGVybmFsUmVmID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgICAgICBleHRlcm5hbFJlZihpbnN0YW5jZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChpc1JlZk9iamVjdChleHRlcm5hbFJlZikpIHtcbiAgICAgICAgICAgICAgICBleHRlcm5hbFJlZi5jdXJyZW50ID0gaW5zdGFuY2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LCBcbiAgICAvKipcbiAgICAgKiBPbmx5IHBhc3MgYSBuZXcgcmVmIGNhbGxiYWNrIHRvIFJlYWN0IGlmIHdlJ3ZlIHJlY2VpdmVkIGEgdmlzdWFsIGVsZW1lbnRcbiAgICAgKiBmYWN0b3J5LiBPdGhlcndpc2Ugd2UnbGwgYmUgbW91bnRpbmcvcmVtb3VudGluZyBldmVyeSB0aW1lIGV4dGVybmFsUmVmXG4gICAgICogb3Igb3RoZXIgZGVwZW5kZW5jaWVzIGNoYW5nZS5cbiAgICAgKi9cbiAgICBbdmlzdWFsRWxlbWVudF0pO1xufVxuXG4vKipcbiAqIERlY2lkZXMgaWYgdGhlIHN1cHBsaWVkIHZhcmlhYmxlIGlzIGFuIGFycmF5IG9mIHZhcmlhbnQgbGFiZWxzXG4gKi9cbmZ1bmN0aW9uIGlzVmFyaWFudExhYmVscyh2KSB7XG4gICAgcmV0dXJuIEFycmF5LmlzQXJyYXkodik7XG59XG4vKipcbiAqIERlY2lkZXMgaWYgdGhlIHN1cHBsaWVkIHZhcmlhYmxlIGlzIHZhcmlhbnQgbGFiZWxcbiAqL1xuZnVuY3Rpb24gaXNWYXJpYW50TGFiZWwodikge1xuICAgIHJldHVybiB0eXBlb2YgdiA9PT0gXCJzdHJpbmdcIiB8fCBpc1ZhcmlhbnRMYWJlbHModik7XG59XG4vKipcbiAqIENyZWF0ZXMgYW4gb2JqZWN0IGNvbnRhaW5pbmcgdGhlIGxhdGVzdCBzdGF0ZSBvZiBldmVyeSBNb3Rpb25WYWx1ZSBvbiBhIFZpc3VhbEVsZW1lbnRcbiAqL1xuZnVuY3Rpb24gZ2V0Q3VycmVudCh2aXN1YWxFbGVtZW50KSB7XG4gICAgdmFyIGN1cnJlbnQgPSB7fTtcbiAgICB2aXN1YWxFbGVtZW50LmZvckVhY2hWYWx1ZShmdW5jdGlvbiAodmFsdWUsIGtleSkgeyByZXR1cm4gKGN1cnJlbnRba2V5XSA9IHZhbHVlLmdldCgpKTsgfSk7XG4gICAgcmV0dXJuIGN1cnJlbnQ7XG59XG4vKipcbiAqIENyZWF0ZXMgYW4gb2JqZWN0IGNvbnRhaW5pbmcgdGhlIGxhdGVzdCB2ZWxvY2l0eSBvZiBldmVyeSBNb3Rpb25WYWx1ZSBvbiBhIFZpc3VhbEVsZW1lbnRcbiAqL1xuZnVuY3Rpb24gZ2V0VmVsb2NpdHkkMSh2aXN1YWxFbGVtZW50KSB7XG4gICAgdmFyIHZlbG9jaXR5ID0ge307XG4gICAgdmlzdWFsRWxlbWVudC5mb3JFYWNoVmFsdWUoZnVuY3Rpb24gKHZhbHVlLCBrZXkpIHsgcmV0dXJuICh2ZWxvY2l0eVtrZXldID0gdmFsdWUuZ2V0VmVsb2NpdHkoKSk7IH0pO1xuICAgIHJldHVybiB2ZWxvY2l0eTtcbn1cbmZ1bmN0aW9uIHJlc29sdmVWYXJpYW50RnJvbVByb3BzKHByb3BzLCBkZWZpbml0aW9uLCBjdXN0b20sIGN1cnJlbnRWYWx1ZXMsIGN1cnJlbnRWZWxvY2l0eSkge1xuICAgIHZhciBfYTtcbiAgICBpZiAoY3VycmVudFZhbHVlcyA9PT0gdm9pZCAwKSB7IGN1cnJlbnRWYWx1ZXMgPSB7fTsgfVxuICAgIGlmIChjdXJyZW50VmVsb2NpdHkgPT09IHZvaWQgMCkgeyBjdXJyZW50VmVsb2NpdHkgPSB7fTsgfVxuICAgIGlmICh0eXBlb2YgZGVmaW5pdGlvbiA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICBkZWZpbml0aW9uID0gKF9hID0gcHJvcHMudmFyaWFudHMpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYVtkZWZpbml0aW9uXTtcbiAgICB9XG4gICAgcmV0dXJuIHR5cGVvZiBkZWZpbml0aW9uID09PSBcImZ1bmN0aW9uXCJcbiAgICAgICAgPyBkZWZpbml0aW9uKGN1c3RvbSAhPT0gbnVsbCAmJiBjdXN0b20gIT09IHZvaWQgMCA/IGN1c3RvbSA6IHByb3BzLmN1c3RvbSwgY3VycmVudFZhbHVlcywgY3VycmVudFZlbG9jaXR5KVxuICAgICAgICA6IGRlZmluaXRpb247XG59XG5mdW5jdGlvbiByZXNvbHZlVmFyaWFudCh2aXN1YWxFbGVtZW50LCBkZWZpbml0aW9uLCBjdXN0b20pIHtcbiAgICB2YXIgcHJvcHMgPSB2aXN1YWxFbGVtZW50LmdldFByb3BzKCk7XG4gICAgcmV0dXJuIHJlc29sdmVWYXJpYW50RnJvbVByb3BzKHByb3BzLCBkZWZpbml0aW9uLCBjdXN0b20gIT09IG51bGwgJiYgY3VzdG9tICE9PSB2b2lkIDAgPyBjdXN0b20gOiBwcm9wcy5jdXN0b20sIGdldEN1cnJlbnQodmlzdWFsRWxlbWVudCksIGdldFZlbG9jaXR5JDEodmlzdWFsRWxlbWVudCkpO1xufVxuZnVuY3Rpb24gY2hlY2tJZkNvbnRyb2xsaW5nVmFyaWFudHMocHJvcHMpIHtcbiAgICB2YXIgX2E7XG4gICAgcmV0dXJuICh0eXBlb2YgKChfYSA9IHByb3BzLmFuaW1hdGUpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5zdGFydCkgPT09IFwiZnVuY3Rpb25cIiB8fFxuICAgICAgICBpc1ZhcmlhbnRMYWJlbChwcm9wcy5pbml0aWFsKSB8fFxuICAgICAgICBpc1ZhcmlhbnRMYWJlbChwcm9wcy5hbmltYXRlKSB8fFxuICAgICAgICBpc1ZhcmlhbnRMYWJlbChwcm9wcy53aGlsZUhvdmVyKSB8fFxuICAgICAgICBpc1ZhcmlhbnRMYWJlbChwcm9wcy53aGlsZURyYWcpIHx8XG4gICAgICAgIGlzVmFyaWFudExhYmVsKHByb3BzLndoaWxlVGFwKSB8fFxuICAgICAgICBpc1ZhcmlhbnRMYWJlbChwcm9wcy53aGlsZUZvY3VzKSB8fFxuICAgICAgICBpc1ZhcmlhbnRMYWJlbChwcm9wcy5leGl0KSk7XG59XG5mdW5jdGlvbiBjaGVja0lmVmFyaWFudE5vZGUocHJvcHMpIHtcbiAgICByZXR1cm4gQm9vbGVhbihjaGVja0lmQ29udHJvbGxpbmdWYXJpYW50cyhwcm9wcykgfHwgcHJvcHMudmFyaWFudHMpO1xufVxuXG5mdW5jdGlvbiBnZXRDdXJyZW50VHJlZVZhcmlhbnRzKHByb3BzLCBjb250ZXh0KSB7XG4gICAgaWYgKGNoZWNrSWZDb250cm9sbGluZ1ZhcmlhbnRzKHByb3BzKSkge1xuICAgICAgICB2YXIgaW5pdGlhbCA9IHByb3BzLmluaXRpYWwsIGFuaW1hdGUgPSBwcm9wcy5hbmltYXRlO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgaW5pdGlhbDogaW5pdGlhbCA9PT0gZmFsc2UgfHwgaXNWYXJpYW50TGFiZWwoaW5pdGlhbClcbiAgICAgICAgICAgICAgICA/IGluaXRpYWxcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGFuaW1hdGU6IGlzVmFyaWFudExhYmVsKGFuaW1hdGUpID8gYW5pbWF0ZSA6IHVuZGVmaW5lZCxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIHByb3BzLmluaGVyaXQgIT09IGZhbHNlID8gY29udGV4dCA6IHt9O1xufVxuXG5mdW5jdGlvbiB1c2VDcmVhdGVNb3Rpb25Db250ZXh0KHByb3BzLCBpc1N0YXRpYykge1xuICAgIHZhciBfYSA9IGdldEN1cnJlbnRUcmVlVmFyaWFudHMocHJvcHMsIFJlYWN0LnVzZUNvbnRleHQoTW90aW9uQ29udGV4dCkpLCBpbml0aWFsID0gX2EuaW5pdGlhbCwgYW5pbWF0ZSA9IF9hLmFuaW1hdGU7XG4gICAgcmV0dXJuIFJlYWN0LnVzZU1lbW8oZnVuY3Rpb24gKCkgeyByZXR1cm4gKHsgaW5pdGlhbDogaW5pdGlhbCwgYW5pbWF0ZTogYW5pbWF0ZSB9KTsgfSwgXG4gICAgLyoqXG4gICAgICogT25seSBicmVhayBtZW1vaXNhdGlvbiBpbiBzdGF0aWMgbW9kZVxuICAgICAqL1xuICAgIGlzU3RhdGljXG4gICAgICAgID8gW1xuICAgICAgICAgICAgdmFyaWFudExhYmVsc0FzRGVwZW5kZW5jeShpbml0aWFsKSxcbiAgICAgICAgICAgIHZhcmlhbnRMYWJlbHNBc0RlcGVuZGVuY3koYW5pbWF0ZSksXG4gICAgICAgIF1cbiAgICAgICAgOiBbXSk7XG59XG5mdW5jdGlvbiB2YXJpYW50TGFiZWxzQXNEZXBlbmRlbmN5KHByb3ApIHtcbiAgICByZXR1cm4gQXJyYXkuaXNBcnJheShwcm9wKSA/IHByb3Auam9pbihcIiBcIikgOiBwcm9wO1xufVxuXG4vKipcbiAqIENyZWF0ZSBhIGBtb3Rpb25gIGNvbXBvbmVudC5cbiAqXG4gKiBUaGlzIGZ1bmN0aW9uIGFjY2VwdHMgYSBDb21wb25lbnQgYXJndW1lbnQsIHdoaWNoIGNhbiBiZSBlaXRoZXIgYSBzdHJpbmcgKGllIFwiZGl2XCJcbiAqIGZvciBgbW90aW9uLmRpdmApLCBvciBhbiBhY3R1YWwgUmVhY3QgY29tcG9uZW50LlxuICpcbiAqIEFsb25nc2lkZSB0aGlzIGlzIGEgY29uZmlnIG9wdGlvbiB3aGljaCBwcm92aWRlcyBhIHdheSBvZiByZW5kZXJpbmcgdGhlIHByb3ZpZGVkXG4gKiBjb21wb25lbnQgXCJvZmZsaW5lXCIsIG9yIG91dHNpZGUgdGhlIFJlYWN0IHJlbmRlciBjeWNsZS5cbiAqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZnVuY3Rpb24gY3JlYXRlTW90aW9uQ29tcG9uZW50KF9hKSB7XG4gICAgdmFyIHByZWxvYWRlZEZlYXR1cmVzID0gX2EucHJlbG9hZGVkRmVhdHVyZXMsIGNyZWF0ZVZpc3VhbEVsZW1lbnQgPSBfYS5jcmVhdGVWaXN1YWxFbGVtZW50LCB1c2VSZW5kZXIgPSBfYS51c2VSZW5kZXIsIHVzZVZpc3VhbFN0YXRlID0gX2EudXNlVmlzdWFsU3RhdGUsIENvbXBvbmVudCA9IF9hLkNvbXBvbmVudDtcbiAgICBwcmVsb2FkZWRGZWF0dXJlcyAmJiBsb2FkRmVhdHVyZXMocHJlbG9hZGVkRmVhdHVyZXMpO1xuICAgIGZ1bmN0aW9uIE1vdGlvbkNvbXBvbmVudChwcm9wcywgZXh0ZXJuYWxSZWYpIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIElmIHdlJ3JlIHJlbmRlcmluZyBpbiBhIHN0YXRpYyBlbnZpcm9ubWVudCwgd2Ugb25seSB2aXN1YWxseSB1cGRhdGUgdGhlIGNvbXBvbmVudFxuICAgICAgICAgKiBhcyBhIHJlc3VsdCBvZiBhIFJlYWN0LXJlcmVuZGVyIHJhdGhlciB0aGFuIGludGVyYWN0aW9ucyBvciBhbmltYXRpb25zLiBUaGlzXG4gICAgICAgICAqIG1lYW5zIHdlIGRvbid0IG5lZWQgdG8gbG9hZCBhZGRpdGlvbmFsIG1lbW9yeSBzdHJ1Y3R1cmVzIGxpa2UgVmlzdWFsRWxlbWVudCxcbiAgICAgICAgICogb3IgYW55IGdlc3R1cmUvYW5pbWF0aW9uIGZlYXR1cmVzLlxuICAgICAgICAgKi9cbiAgICAgICAgdmFyIGlzU3RhdGljID0gUmVhY3QudXNlQ29udGV4dChNb3Rpb25Db25maWdDb250ZXh0KS5pc1N0YXRpYztcbiAgICAgICAgdmFyIGZlYXR1cmVzID0gbnVsbDtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIENyZWF0ZSB0aGUgdHJlZSBjb250ZXh0LiBUaGlzIGlzIG1lbW9pemVkIGFuZCB3aWxsIG9ubHkgdHJpZ2dlciByZW5kZXJzXG4gICAgICAgICAqIHdoZW4gdGhlIGN1cnJlbnQgdHJlZSB2YXJpYW50IGNoYW5nZXMgaW4gc3RhdGljIG1vZGUuXG4gICAgICAgICAqL1xuICAgICAgICB2YXIgY29udGV4dCA9IHVzZUNyZWF0ZU1vdGlvbkNvbnRleHQocHJvcHMsIGlzU3RhdGljKTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqXG4gICAgICAgICAqL1xuICAgICAgICB2YXIgdmlzdWFsU3RhdGUgPSB1c2VWaXN1YWxTdGF0ZShwcm9wcywgaXNTdGF0aWMpO1xuICAgICAgICBpZiAoIWlzU3RhdGljICYmIGlzQnJvd3Nlcikge1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBDcmVhdGUgYSBWaXN1YWxFbGVtZW50IGZvciB0aGlzIGNvbXBvbmVudC4gQSBWaXN1YWxFbGVtZW50IHByb3ZpZGVzIGEgY29tbW9uXG4gICAgICAgICAgICAgKiBpbnRlcmZhY2UgdG8gcmVuZGVyZXItc3BlY2lmaWMgQVBJcyAoaWUgRE9NL1RocmVlLmpzIGV0YykgYXMgd2VsbCBhc1xuICAgICAgICAgICAgICogcHJvdmlkaW5nIGEgd2F5IG9mIHJlbmRlcmluZyB0byB0aGVzZSBBUElzIG91dHNpZGUgb2YgdGhlIFJlYWN0IHJlbmRlciBsb29wXG4gICAgICAgICAgICAgKiBmb3IgbW9yZSBwZXJmb3JtYW50IGFuaW1hdGlvbnMgYW5kIGludGVyYWN0aW9uc1xuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBjb250ZXh0LnZpc3VhbEVsZW1lbnQgPSB1c2VWaXN1YWxFbGVtZW50KENvbXBvbmVudCwgdmlzdWFsU3RhdGUsIHByb3BzLCBjcmVhdGVWaXN1YWxFbGVtZW50KTtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogTG9hZCBNb3Rpb24gZ2VzdHVyZSBhbmQgYW5pbWF0aW9uIGZlYXR1cmVzLiBUaGVzZSBhcmUgcmVuZGVyZWQgYXMgcmVuZGVybGVzc1xuICAgICAgICAgICAgICogY29tcG9uZW50cyBzbyBlYWNoIGZlYXR1cmUgY2FuIG9wdGlvbmFsbHkgbWFrZSB1c2Ugb2YgUmVhY3QgbGlmZWN5Y2xlIG1ldGhvZHMuXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogVE9ETzogVGhlIGludGVudGlvbiBpcyB0byBtb3ZlIHRoZXNlIGF3YXkgZnJvbSBhIFJlYWN0LWNlbnRyaWMgdG8gYVxuICAgICAgICAgICAgICogVmlzdWFsRWxlbWVudC1jZW50cmljIGxpZmVjeWNsZSBzY2hlbWUuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGZlYXR1cmVzID0gdXNlRmVhdHVyZXMocHJvcHMsIGNvbnRleHQudmlzdWFsRWxlbWVudCwgcHJlbG9hZGVkRmVhdHVyZXMpO1xuICAgICAgICB9XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgbW91bnQgb3JkZXIgYW5kIGhpZXJhcmNoeSBpcyBzcGVjaWZpYyB0byBlbnN1cmUgb3VyIGVsZW1lbnQgcmVmXG4gICAgICAgICAqIGlzIGh5ZHJhdGVkIGJ5IHRoZSB0aW1lIGZlYXR1cmVzIGZpcmUgdGhlaXIgZWZmZWN0cy5cbiAgICAgICAgICovXG4gICAgICAgIHJldHVybiAoUmVhY3RfX25hbWVzcGFjZS5jcmVhdGVFbGVtZW50KFJlYWN0X19uYW1lc3BhY2UuRnJhZ21lbnQsIG51bGwsXG4gICAgICAgICAgICBSZWFjdF9fbmFtZXNwYWNlLmNyZWF0ZUVsZW1lbnQoTW90aW9uQ29udGV4dC5Qcm92aWRlciwgeyB2YWx1ZTogY29udGV4dCB9LCB1c2VSZW5kZXIoQ29tcG9uZW50LCBwcm9wcywgdXNlTW90aW9uUmVmKHZpc3VhbFN0YXRlLCBjb250ZXh0LnZpc3VhbEVsZW1lbnQsIGV4dGVybmFsUmVmKSwgdmlzdWFsU3RhdGUsIGlzU3RhdGljKSksXG4gICAgICAgICAgICBmZWF0dXJlcykpO1xuICAgIH1cbiAgICByZXR1cm4gUmVhY3QuZm9yd2FyZFJlZihNb3Rpb25Db21wb25lbnQpO1xufVxuXG4vKipcbiAqIENvbnZlcnQgYW55IFJlYWN0IGNvbXBvbmVudCBpbnRvIGEgYG1vdGlvbmAgY29tcG9uZW50LiBUaGUgcHJvdmlkZWQgY29tcG9uZW50XG4gKiAqKm11c3QqKiB1c2UgYFJlYWN0LmZvcndhcmRSZWZgIHRvIHRoZSB1bmRlcmx5aW5nIERPTSBjb21wb25lbnQgeW91IHdhbnQgdG8gYW5pbWF0ZS5cbiAqXG4gKiBgYGBqc3hcbiAqIGNvbnN0IENvbXBvbmVudCA9IFJlYWN0LmZvcndhcmRSZWYoKHByb3BzLCByZWYpID0+IHtcbiAqICAgcmV0dXJuIDxkaXYgcmVmPXtyZWZ9IC8+XG4gKiB9KVxuICpcbiAqIGNvbnN0IE1vdGlvbkNvbXBvbmVudCA9IG1vdGlvbihDb21wb25lbnQpXG4gKiBgYGBcbiAqXG4gKiBAcHVibGljXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZU1vdGlvblByb3h5KGNyZWF0ZUNvbmZpZykge1xuICAgIGZ1bmN0aW9uIGN1c3RvbShDb21wb25lbnQsIGN1c3RvbU1vdGlvbkNvbXBvbmVudENvbmZpZykge1xuICAgICAgICBpZiAoY3VzdG9tTW90aW9uQ29tcG9uZW50Q29uZmlnID09PSB2b2lkIDApIHsgY3VzdG9tTW90aW9uQ29tcG9uZW50Q29uZmlnID0ge307IH1cbiAgICAgICAgcmV0dXJuIGNyZWF0ZU1vdGlvbkNvbXBvbmVudChjcmVhdGVDb25maWcoQ29tcG9uZW50LCBjdXN0b21Nb3Rpb25Db21wb25lbnRDb25maWcpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQSBjYWNoZSBvZiBnZW5lcmF0ZWQgYG1vdGlvbmAgY29tcG9uZW50cywgZS5nIGBtb3Rpb24uZGl2YCwgYG1vdGlvbi5pbnB1dGAgZXRjLlxuICAgICAqIFJhdGhlciB0aGFuIGdlbmVyYXRpbmcgdGhlbSBhbmV3IGV2ZXJ5IHJlbmRlci5cbiAgICAgKi9cbiAgICB2YXIgY29tcG9uZW50Q2FjaGUgPSBuZXcgTWFwKCk7XG4gICAgcmV0dXJuIG5ldyBQcm94eShjdXN0b20sIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIENhbGxlZCB3aGVuIGBtb3Rpb25gIGlzIHJlZmVyZW5jZWQgd2l0aCBhIHByb3A6IGBtb3Rpb24uZGl2YCwgYG1vdGlvbi5pbnB1dGAgZXRjLlxuICAgICAgICAgKiBUaGUgcHJvcCBuYW1lIGlzIHBhc3NlZCB0aHJvdWdoIGFzIGBrZXlgIGFuZCB3ZSBjYW4gdXNlIHRoYXQgdG8gZ2VuZXJhdGUgYSBgbW90aW9uYFxuICAgICAgICAgKiBET00gY29tcG9uZW50IHdpdGggdGhhdCBuYW1lLlxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoX3RhcmdldCwga2V5KSB7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIElmIHRoaXMgZWxlbWVudCBkb2Vzbid0IGV4aXN0IGluIHRoZSBjb21wb25lbnQgY2FjaGUsIGNyZWF0ZSBpdCBhbmQgY2FjaGUuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGlmICghY29tcG9uZW50Q2FjaGUuaGFzKGtleSkpIHtcbiAgICAgICAgICAgICAgICBjb21wb25lbnRDYWNoZS5zZXQoa2V5LCBjdXN0b20oa2V5KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gY29tcG9uZW50Q2FjaGUuZ2V0KGtleSk7XG4gICAgICAgIH0sXG4gICAgfSk7XG59XG5cbi8qKlxuICogV2Uga2VlcCB0aGVzZSBsaXN0ZWQgc2VwZXJhdGVseSBhcyB3ZSB1c2UgdGhlIGxvd2VyY2FzZSB0YWcgbmFtZXMgYXMgcGFydFxuICogb2YgdGhlIHJ1bnRpbWUgYnVuZGxlIHRvIGRldGVjdCBTVkcgY29tcG9uZW50c1xuICovXG52YXIgbG93ZXJjYXNlU1ZHRWxlbWVudHMgPSBbXG4gICAgXCJhbmltYXRlXCIsXG4gICAgXCJjaXJjbGVcIixcbiAgICBcImRlZnNcIixcbiAgICBcImRlc2NcIixcbiAgICBcImVsbGlwc2VcIixcbiAgICBcImdcIixcbiAgICBcImltYWdlXCIsXG4gICAgXCJsaW5lXCIsXG4gICAgXCJmaWx0ZXJcIixcbiAgICBcIm1hcmtlclwiLFxuICAgIFwibWFza1wiLFxuICAgIFwibWV0YWRhdGFcIixcbiAgICBcInBhdGhcIixcbiAgICBcInBhdHRlcm5cIixcbiAgICBcInBvbHlnb25cIixcbiAgICBcInBvbHlsaW5lXCIsXG4gICAgXCJyZWN0XCIsXG4gICAgXCJzdG9wXCIsXG4gICAgXCJzdmdcIixcbiAgICBcInN3aXRjaFwiLFxuICAgIFwic3ltYm9sXCIsXG4gICAgXCJ0ZXh0XCIsXG4gICAgXCJ0c3BhblwiLFxuICAgIFwidXNlXCIsXG4gICAgXCJ2aWV3XCIsXG5dO1xuXG5mdW5jdGlvbiBpc1NWR0NvbXBvbmVudChDb21wb25lbnQpIHtcbiAgICBpZiAoXG4gICAgLyoqXG4gICAgICogSWYgaXQncyBub3QgYSBzdHJpbmcsIGl0J3MgYSBjdXN0b20gUmVhY3QgY29tcG9uZW50LiBDdXJyZW50bHkgd2Ugb25seSBzdXBwb3J0XG4gICAgICogSFRNTCBjdXN0b20gUmVhY3QgY29tcG9uZW50cy5cbiAgICAgKi9cbiAgICB0eXBlb2YgQ29tcG9uZW50ICE9PSBcInN0cmluZ1wiIHx8XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJZiBpdCBjb250YWlucyBhIGRhc2gsIHRoZSBlbGVtZW50IGlzIGEgY3VzdG9tIEhUTUwgd2ViY29tcG9uZW50LlxuICAgICAgICAgKi9cbiAgICAgICAgQ29tcG9uZW50LmluY2x1ZGVzKFwiLVwiKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGVsc2UgaWYgKFxuICAgIC8qKlxuICAgICAqIElmIGl0J3MgaW4gb3VyIGxpc3Qgb2YgbG93ZXJjYXNlIFNWRyB0YWdzLCBpdCdzIGFuIFNWRyBjb21wb25lbnRcbiAgICAgKi9cbiAgICBsb3dlcmNhc2VTVkdFbGVtZW50cy5pbmRleE9mKENvbXBvbmVudCkgPiAtMSB8fFxuICAgICAgICAvKipcbiAgICAgICAgICogSWYgaXQgY29udGFpbnMgYSBjYXBpdGFsIGxldHRlciwgaXQncyBhbiBTVkcgY29tcG9uZW50XG4gICAgICAgICAqL1xuICAgICAgICAvW0EtWl0vLnRlc3QoQ29tcG9uZW50KSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuXG52YXIgdmFsdWVTY2FsZUNvcnJlY3Rpb24gPSB7fTtcbi8qKlxuICogQGludGVybmFsXG4gKi9cbmZ1bmN0aW9uIGFkZFNjYWxlQ29ycmVjdGlvbihjb3JyZWN0b3JzKSB7XG4gICAgZm9yICh2YXIga2V5IGluIGNvcnJlY3RvcnMpIHtcbiAgICAgICAgdmFsdWVTY2FsZUNvcnJlY3Rpb25ba2V5XSA9IGNvcnJlY3RvcnNba2V5XTtcbiAgICB9XG59XG5cbi8qKlxuICogQSBsaXN0IG9mIGFsbCB0cmFuc2Zvcm1hYmxlIGF4ZXMuIFdlJ2xsIHVzZSB0aGlzIGxpc3QgdG8gZ2VuZXJhdGVkIGEgdmVyc2lvblxuICogb2YgZWFjaCBheGVzIGZvciBlYWNoIHRyYW5zZm9ybS5cbiAqL1xudmFyIHRyYW5zZm9ybUF4ZXMgPSBbXCJcIiwgXCJYXCIsIFwiWVwiLCBcIlpcIl07XG4vKipcbiAqIEFuIG9yZGVyZWQgYXJyYXkgb2YgZWFjaCB0cmFuc2Zvcm1hYmxlIHZhbHVlLiBCeSBkZWZhdWx0LCB0cmFuc2Zvcm0gdmFsdWVzXG4gKiB3aWxsIGJlIHNvcnRlZCB0byB0aGlzIG9yZGVyLlxuICovXG52YXIgb3JkZXIgPSBbXCJ0cmFuc2xhdGVcIiwgXCJzY2FsZVwiLCBcInJvdGF0ZVwiLCBcInNrZXdcIl07XG4vKipcbiAqIEdlbmVyYXRlIGEgbGlzdCBvZiBldmVyeSBwb3NzaWJsZSB0cmFuc2Zvcm0ga2V5LlxuICovXG52YXIgdHJhbnNmb3JtUHJvcHMgPSBbXCJ0cmFuc2Zvcm1QZXJzcGVjdGl2ZVwiLCBcInhcIiwgXCJ5XCIsIFwielwiXTtcbm9yZGVyLmZvckVhY2goZnVuY3Rpb24gKG9wZXJhdGlvbktleSkge1xuICAgIHJldHVybiB0cmFuc2Zvcm1BeGVzLmZvckVhY2goZnVuY3Rpb24gKGF4ZXNLZXkpIHtcbiAgICAgICAgcmV0dXJuIHRyYW5zZm9ybVByb3BzLnB1c2gob3BlcmF0aW9uS2V5ICsgYXhlc0tleSk7XG4gICAgfSk7XG59KTtcbi8qKlxuICogQSBmdW5jdGlvbiB0byB1c2Ugd2l0aCBBcnJheS5zb3J0IHRvIHNvcnQgdHJhbnNmb3JtIGtleXMgYnkgdGhlaXIgZGVmYXVsdCBvcmRlci5cbiAqL1xuZnVuY3Rpb24gc29ydFRyYW5zZm9ybVByb3BzKGEsIGIpIHtcbiAgICByZXR1cm4gdHJhbnNmb3JtUHJvcHMuaW5kZXhPZihhKSAtIHRyYW5zZm9ybVByb3BzLmluZGV4T2YoYik7XG59XG4vKipcbiAqIEEgcXVpY2sgbG9va3VwIGZvciB0cmFuc2Zvcm0gcHJvcHMuXG4gKi9cbnZhciB0cmFuc2Zvcm1Qcm9wU2V0ID0gbmV3IFNldCh0cmFuc2Zvcm1Qcm9wcyk7XG5mdW5jdGlvbiBpc1RyYW5zZm9ybVByb3Aoa2V5KSB7XG4gICAgcmV0dXJuIHRyYW5zZm9ybVByb3BTZXQuaGFzKGtleSk7XG59XG4vKipcbiAqIEEgcXVpY2sgbG9va3VwIGZvciB0cmFuc2Zvcm0gb3JpZ2luIHByb3BzXG4gKi9cbnZhciB0cmFuc2Zvcm1PcmlnaW5Qcm9wcyA9IG5ldyBTZXQoW1wib3JpZ2luWFwiLCBcIm9yaWdpbllcIiwgXCJvcmlnaW5aXCJdKTtcbmZ1bmN0aW9uIGlzVHJhbnNmb3JtT3JpZ2luUHJvcChrZXkpIHtcbiAgICByZXR1cm4gdHJhbnNmb3JtT3JpZ2luUHJvcHMuaGFzKGtleSk7XG59XG5cbmZ1bmN0aW9uIGlzRm9yY2VkTW90aW9uVmFsdWUoa2V5LCBfYSkge1xuICAgIHZhciBsYXlvdXQgPSBfYS5sYXlvdXQsIGxheW91dElkID0gX2EubGF5b3V0SWQ7XG4gICAgcmV0dXJuIChpc1RyYW5zZm9ybVByb3Aoa2V5KSB8fFxuICAgICAgICBpc1RyYW5zZm9ybU9yaWdpblByb3Aoa2V5KSB8fFxuICAgICAgICAoKGxheW91dCB8fCBsYXlvdXRJZCAhPT0gdW5kZWZpbmVkKSAmJlxuICAgICAgICAgICAgKCEhdmFsdWVTY2FsZUNvcnJlY3Rpb25ba2V5XSB8fCBrZXkgPT09IFwib3BhY2l0eVwiKSkpO1xufVxuXG52YXIgaXNNb3Rpb25WYWx1ZSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSAhPT0gbnVsbCAmJiB0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCIgJiYgdmFsdWUuZ2V0VmVsb2NpdHk7XG59O1xuXG52YXIgdHJhbnNsYXRlQWxpYXMgPSB7XG4gICAgeDogXCJ0cmFuc2xhdGVYXCIsXG4gICAgeTogXCJ0cmFuc2xhdGVZXCIsXG4gICAgejogXCJ0cmFuc2xhdGVaXCIsXG4gICAgdHJhbnNmb3JtUGVyc3BlY3RpdmU6IFwicGVyc3BlY3RpdmVcIixcbn07XG4vKipcbiAqIEJ1aWxkIGEgQ1NTIHRyYW5zZm9ybSBzdHlsZSBmcm9tIGluZGl2aWR1YWwgeC95L3NjYWxlIGV0YyBwcm9wZXJ0aWVzLlxuICpcbiAqIFRoaXMgb3V0cHV0cyB3aXRoIGEgZGVmYXVsdCBvcmRlciBvZiB0cmFuc2Zvcm1zL3NjYWxlcy9yb3RhdGlvbnMsIHRoaXMgY2FuIGJlIGN1c3RvbWlzZWQgYnlcbiAqIHByb3ZpZGluZyBhIHRyYW5zZm9ybVRlbXBsYXRlIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBidWlsZFRyYW5zZm9ybShfYSwgX2IsIHRyYW5zZm9ybUlzRGVmYXVsdCwgdHJhbnNmb3JtVGVtcGxhdGUpIHtcbiAgICB2YXIgdHJhbnNmb3JtID0gX2EudHJhbnNmb3JtLCB0cmFuc2Zvcm1LZXlzID0gX2EudHJhbnNmb3JtS2V5cztcbiAgICB2YXIgX2MgPSBfYi5lbmFibGVIYXJkd2FyZUFjY2VsZXJhdGlvbiwgZW5hYmxlSGFyZHdhcmVBY2NlbGVyYXRpb24gPSBfYyA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9jLCBfZCA9IF9iLmFsbG93VHJhbnNmb3JtTm9uZSwgYWxsb3dUcmFuc2Zvcm1Ob25lID0gX2QgPT09IHZvaWQgMCA/IHRydWUgOiBfZDtcbiAgICAvLyBUaGUgdHJhbnNmb3JtIHN0cmluZyB3ZSdyZSBnb2luZyB0byBidWlsZCBpbnRvLlxuICAgIHZhciB0cmFuc2Zvcm1TdHJpbmcgPSBcIlwiO1xuICAgIC8vIFRyYW5zZm9ybSBrZXlzIGludG8gdGhlaXIgZGVmYXVsdCBvcmRlciAtIHRoaXMgd2lsbCBkZXRlcm1pbmUgdGhlIG91dHB1dCBvcmRlci5cbiAgICB0cmFuc2Zvcm1LZXlzLnNvcnQoc29ydFRyYW5zZm9ybVByb3BzKTtcbiAgICAvLyBUcmFjayB3aGV0aGVyIHRoZSBkZWZpbmVkIHRyYW5zZm9ybSBoYXMgYSBkZWZpbmVkIHogc28gd2UgZG9uJ3QgYWRkIGFcbiAgICAvLyBzZWNvbmQgdG8gZW5hYmxlIGhhcmR3YXJlIGFjY2VsZXJhdGlvblxuICAgIHZhciB0cmFuc2Zvcm1IYXNaID0gZmFsc2U7XG4gICAgLy8gTG9vcCBvdmVyIGVhY2ggdHJhbnNmb3JtIGFuZCBidWlsZCB0aGVtIGludG8gdHJhbnNmb3JtU3RyaW5nXG4gICAgdmFyIG51bVRyYW5zZm9ybUtleXMgPSB0cmFuc2Zvcm1LZXlzLmxlbmd0aDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG51bVRyYW5zZm9ybUtleXM7IGkrKykge1xuICAgICAgICB2YXIga2V5ID0gdHJhbnNmb3JtS2V5c1tpXTtcbiAgICAgICAgdHJhbnNmb3JtU3RyaW5nICs9ICh0cmFuc2xhdGVBbGlhc1trZXldIHx8IGtleSkgKyBcIihcIiArIHRyYW5zZm9ybVtrZXldICsgXCIpIFwiO1xuICAgICAgICBpZiAoa2V5ID09PSBcInpcIilcbiAgICAgICAgICAgIHRyYW5zZm9ybUhhc1ogPSB0cnVlO1xuICAgIH1cbiAgICBpZiAoIXRyYW5zZm9ybUhhc1ogJiYgZW5hYmxlSGFyZHdhcmVBY2NlbGVyYXRpb24pIHtcbiAgICAgICAgdHJhbnNmb3JtU3RyaW5nICs9IFwidHJhbnNsYXRlWigwKVwiO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdHJhbnNmb3JtU3RyaW5nID0gdHJhbnNmb3JtU3RyaW5nLnRyaW0oKTtcbiAgICB9XG4gICAgLy8gSWYgd2UgaGF2ZSBhIGN1c3RvbSBgdHJhbnNmb3JtYCB0ZW1wbGF0ZSwgcGFzcyBvdXIgdHJhbnNmb3JtIHZhbHVlcyBhbmRcbiAgICAvLyBnZW5lcmF0ZWQgdHJhbnNmb3JtU3RyaW5nIHRvIHRoYXQgYmVmb3JlIHJldHVybmluZ1xuICAgIGlmICh0cmFuc2Zvcm1UZW1wbGF0ZSkge1xuICAgICAgICB0cmFuc2Zvcm1TdHJpbmcgPSB0cmFuc2Zvcm1UZW1wbGF0ZSh0cmFuc2Zvcm0sIHRyYW5zZm9ybUlzRGVmYXVsdCA/IFwiXCIgOiB0cmFuc2Zvcm1TdHJpbmcpO1xuICAgIH1cbiAgICBlbHNlIGlmIChhbGxvd1RyYW5zZm9ybU5vbmUgJiYgdHJhbnNmb3JtSXNEZWZhdWx0KSB7XG4gICAgICAgIHRyYW5zZm9ybVN0cmluZyA9IFwibm9uZVwiO1xuICAgIH1cbiAgICByZXR1cm4gdHJhbnNmb3JtU3RyaW5nO1xufVxuLyoqXG4gKiBCdWlsZCBhIHRyYW5zZm9ybU9yaWdpbiBzdHlsZS4gVXNlcyB0aGUgc2FtZSBkZWZhdWx0cyBhcyB0aGUgYnJvd3NlciBmb3JcbiAqIHVuZGVmaW5lZCBvcmlnaW5zLlxuICovXG5mdW5jdGlvbiBidWlsZFRyYW5zZm9ybU9yaWdpbihfYSkge1xuICAgIHZhciBfYiA9IF9hLm9yaWdpblgsIG9yaWdpblggPSBfYiA9PT0gdm9pZCAwID8gXCI1MCVcIiA6IF9iLCBfYyA9IF9hLm9yaWdpblksIG9yaWdpblkgPSBfYyA9PT0gdm9pZCAwID8gXCI1MCVcIiA6IF9jLCBfZCA9IF9hLm9yaWdpblosIG9yaWdpblogPSBfZCA9PT0gdm9pZCAwID8gMCA6IF9kO1xuICAgIHJldHVybiBvcmlnaW5YICsgXCIgXCIgKyBvcmlnaW5ZICsgXCIgXCIgKyBvcmlnaW5aO1xufVxuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgcHJvdmlkZWQga2V5IGlzIGEgQ1NTIHZhcmlhYmxlXG4gKi9cbmZ1bmN0aW9uIGlzQ1NTVmFyaWFibGUkMShrZXkpIHtcbiAgICByZXR1cm4ga2V5LnN0YXJ0c1dpdGgoXCItLVwiKTtcbn1cblxuLyoqXG4gKiBQcm92aWRlZCBhIHZhbHVlIGFuZCBhIFZhbHVlVHlwZSwgcmV0dXJucyB0aGUgdmFsdWUgYXMgdGhhdCB2YWx1ZSB0eXBlLlxuICovXG52YXIgZ2V0VmFsdWVBc1R5cGUgPSBmdW5jdGlvbiAodmFsdWUsIHR5cGUpIHtcbiAgICByZXR1cm4gdHlwZSAmJiB0eXBlb2YgdmFsdWUgPT09IFwibnVtYmVyXCJcbiAgICAgICAgPyB0eXBlLnRyYW5zZm9ybSh2YWx1ZSlcbiAgICAgICAgOiB2YWx1ZTtcbn07XG5cbnZhciBpbnQgPSB0c2xpYi5fX2Fzc2lnbih0c2xpYi5fX2Fzc2lnbih7fSwgc3R5bGVWYWx1ZVR5cGVzLm51bWJlciksIHsgdHJhbnNmb3JtOiBNYXRoLnJvdW5kIH0pO1xuXG52YXIgbnVtYmVyVmFsdWVUeXBlcyA9IHtcbiAgICAvLyBCb3JkZXIgcHJvcHNcbiAgICBib3JkZXJXaWR0aDogc3R5bGVWYWx1ZVR5cGVzLnB4LFxuICAgIGJvcmRlclRvcFdpZHRoOiBzdHlsZVZhbHVlVHlwZXMucHgsXG4gICAgYm9yZGVyUmlnaHRXaWR0aDogc3R5bGVWYWx1ZVR5cGVzLnB4LFxuICAgIGJvcmRlckJvdHRvbVdpZHRoOiBzdHlsZVZhbHVlVHlwZXMucHgsXG4gICAgYm9yZGVyTGVmdFdpZHRoOiBzdHlsZVZhbHVlVHlwZXMucHgsXG4gICAgYm9yZGVyUmFkaXVzOiBzdHlsZVZhbHVlVHlwZXMucHgsXG4gICAgcmFkaXVzOiBzdHlsZVZhbHVlVHlwZXMucHgsXG4gICAgYm9yZGVyVG9wTGVmdFJhZGl1czogc3R5bGVWYWx1ZVR5cGVzLnB4LFxuICAgIGJvcmRlclRvcFJpZ2h0UmFkaXVzOiBzdHlsZVZhbHVlVHlwZXMucHgsXG4gICAgYm9yZGVyQm90dG9tUmlnaHRSYWRpdXM6IHN0eWxlVmFsdWVUeXBlcy5weCxcbiAgICBib3JkZXJCb3R0b21MZWZ0UmFkaXVzOiBzdHlsZVZhbHVlVHlwZXMucHgsXG4gICAgLy8gUG9zaXRpb25pbmcgcHJvcHNcbiAgICB3aWR0aDogc3R5bGVWYWx1ZVR5cGVzLnB4LFxuICAgIG1heFdpZHRoOiBzdHlsZVZhbHVlVHlwZXMucHgsXG4gICAgaGVpZ2h0OiBzdHlsZVZhbHVlVHlwZXMucHgsXG4gICAgbWF4SGVpZ2h0OiBzdHlsZVZhbHVlVHlwZXMucHgsXG4gICAgc2l6ZTogc3R5bGVWYWx1ZVR5cGVzLnB4LFxuICAgIHRvcDogc3R5bGVWYWx1ZVR5cGVzLnB4LFxuICAgIHJpZ2h0OiBzdHlsZVZhbHVlVHlwZXMucHgsXG4gICAgYm90dG9tOiBzdHlsZVZhbHVlVHlwZXMucHgsXG4gICAgbGVmdDogc3R5bGVWYWx1ZVR5cGVzLnB4LFxuICAgIC8vIFNwYWNpbmcgcHJvcHNcbiAgICBwYWRkaW5nOiBzdHlsZVZhbHVlVHlwZXMucHgsXG4gICAgcGFkZGluZ1RvcDogc3R5bGVWYWx1ZVR5cGVzLnB4LFxuICAgIHBhZGRpbmdSaWdodDogc3R5bGVWYWx1ZVR5cGVzLnB4LFxuICAgIHBhZGRpbmdCb3R0b206IHN0eWxlVmFsdWVUeXBlcy5weCxcbiAgICBwYWRkaW5nTGVmdDogc3R5bGVWYWx1ZVR5cGVzLnB4LFxuICAgIG1hcmdpbjogc3R5bGVWYWx1ZVR5cGVzLnB4LFxuICAgIG1hcmdpblRvcDogc3R5bGVWYWx1ZVR5cGVzLnB4LFxuICAgIG1hcmdpblJpZ2h0OiBzdHlsZVZhbHVlVHlwZXMucHgsXG4gICAgbWFyZ2luQm90dG9tOiBzdHlsZVZhbHVlVHlwZXMucHgsXG4gICAgbWFyZ2luTGVmdDogc3R5bGVWYWx1ZVR5cGVzLnB4LFxuICAgIC8vIFRyYW5zZm9ybSBwcm9wc1xuICAgIHJvdGF0ZTogc3R5bGVWYWx1ZVR5cGVzLmRlZ3JlZXMsXG4gICAgcm90YXRlWDogc3R5bGVWYWx1ZVR5cGVzLmRlZ3JlZXMsXG4gICAgcm90YXRlWTogc3R5bGVWYWx1ZVR5cGVzLmRlZ3JlZXMsXG4gICAgcm90YXRlWjogc3R5bGVWYWx1ZVR5cGVzLmRlZ3JlZXMsXG4gICAgc2NhbGU6IHN0eWxlVmFsdWVUeXBlcy5zY2FsZSxcbiAgICBzY2FsZVg6IHN0eWxlVmFsdWVUeXBlcy5zY2FsZSxcbiAgICBzY2FsZVk6IHN0eWxlVmFsdWVUeXBlcy5zY2FsZSxcbiAgICBzY2FsZVo6IHN0eWxlVmFsdWVUeXBlcy5zY2FsZSxcbiAgICBza2V3OiBzdHlsZVZhbHVlVHlwZXMuZGVncmVlcyxcbiAgICBza2V3WDogc3R5bGVWYWx1ZVR5cGVzLmRlZ3JlZXMsXG4gICAgc2tld1k6IHN0eWxlVmFsdWVUeXBlcy5kZWdyZWVzLFxuICAgIGRpc3RhbmNlOiBzdHlsZVZhbHVlVHlwZXMucHgsXG4gICAgdHJhbnNsYXRlWDogc3R5bGVWYWx1ZVR5cGVzLnB4LFxuICAgIHRyYW5zbGF0ZVk6IHN0eWxlVmFsdWVUeXBlcy5weCxcbiAgICB0cmFuc2xhdGVaOiBzdHlsZVZhbHVlVHlwZXMucHgsXG4gICAgeDogc3R5bGVWYWx1ZVR5cGVzLnB4LFxuICAgIHk6IHN0eWxlVmFsdWVUeXBlcy5weCxcbiAgICB6OiBzdHlsZVZhbHVlVHlwZXMucHgsXG4gICAgcGVyc3BlY3RpdmU6IHN0eWxlVmFsdWVUeXBlcy5weCxcbiAgICB0cmFuc2Zvcm1QZXJzcGVjdGl2ZTogc3R5bGVWYWx1ZVR5cGVzLnB4LFxuICAgIG9wYWNpdHk6IHN0eWxlVmFsdWVUeXBlcy5hbHBoYSxcbiAgICBvcmlnaW5YOiBzdHlsZVZhbHVlVHlwZXMucHJvZ3Jlc3NQZXJjZW50YWdlLFxuICAgIG9yaWdpblk6IHN0eWxlVmFsdWVUeXBlcy5wcm9ncmVzc1BlcmNlbnRhZ2UsXG4gICAgb3JpZ2luWjogc3R5bGVWYWx1ZVR5cGVzLnB4LFxuICAgIC8vIE1pc2NcbiAgICB6SW5kZXg6IGludCxcbiAgICAvLyBTVkdcbiAgICBmaWxsT3BhY2l0eTogc3R5bGVWYWx1ZVR5cGVzLmFscGhhLFxuICAgIHN0cm9rZU9wYWNpdHk6IHN0eWxlVmFsdWVUeXBlcy5hbHBoYSxcbiAgICBudW1PY3RhdmVzOiBpbnQsXG59O1xuXG5mdW5jdGlvbiBidWlsZEhUTUxTdHlsZXMoc3RhdGUsIGxhdGVzdFZhbHVlcywgcHJvamVjdGlvbiwgbGF5b3V0U3RhdGUsIG9wdGlvbnMsIHRyYW5zZm9ybVRlbXBsYXRlLCBidWlsZFByb2plY3Rpb25UcmFuc2Zvcm0sIGJ1aWxkUHJvamVjdGlvblRyYW5zZm9ybU9yaWdpbikge1xuICAgIHZhciBfYTtcbiAgICB2YXIgc3R5bGUgPSBzdGF0ZS5zdHlsZSwgdmFycyA9IHN0YXRlLnZhcnMsIHRyYW5zZm9ybSA9IHN0YXRlLnRyYW5zZm9ybSwgdHJhbnNmb3JtS2V5cyA9IHN0YXRlLnRyYW5zZm9ybUtleXMsIHRyYW5zZm9ybU9yaWdpbiA9IHN0YXRlLnRyYW5zZm9ybU9yaWdpbjtcbiAgICAvLyBFbXB0eSB0aGUgdHJhbnNmb3JtS2V5cyBhcnJheS4gQXMgd2UncmUgdGhyb3dpbmcgb3V0IHJlZnMgdG8gaXRzIGl0ZW1zXG4gICAgLy8gdGhpcyBtaWdodCBub3QgYmUgYXMgY2hlYXAgYXMgc3VzcGVjdGVkLiBNYXliZSB1c2luZyB0aGUgYXJyYXkgYXMgYSBidWZmZXJcbiAgICAvLyB3aXRoIGEgbWFudWFsIGluY3JlbWVudGF0aW9uIHdvdWxkIGJlIGJldHRlci5cbiAgICB0cmFuc2Zvcm1LZXlzLmxlbmd0aCA9IDA7XG4gICAgLy8gVHJhY2sgd2hldGhlciB3ZSBlbmNvdW50ZXIgYW55IHRyYW5zZm9ybSBvciB0cmFuc2Zvcm1PcmlnaW4gdmFsdWVzLlxuICAgIHZhciBoYXNUcmFuc2Zvcm0gPSBmYWxzZTtcbiAgICB2YXIgaGFzVHJhbnNmb3JtT3JpZ2luID0gZmFsc2U7XG4gICAgLy8gRG9lcyB0aGUgY2FsY3VsYXRlZCB0cmFuc2Zvcm0gZXNzZW50aWFsbHkgZXF1YWwgXCJub25lXCI/XG4gICAgdmFyIHRyYW5zZm9ybUlzTm9uZSA9IHRydWU7XG4gICAgLyoqXG4gICAgICogTG9vcCBvdmVyIGFsbCBvdXIgbGF0ZXN0IGFuaW1hdGVkIHZhbHVlcyBhbmQgZGVjaWRlIHdoZXRoZXIgdG8gaGFuZGxlIHRoZW1cbiAgICAgKiBhcyBhIHN0eWxlIG9yIENTUyB2YXJpYWJsZS5cbiAgICAgKlxuICAgICAqIFRyYW5zZm9ybXMgYW5kIHRyYW5zZm9ybSBvcmlnaW5zIGFyZSBrZXB0IHNlcGVyYXRlbHkgZm9yIGZ1cnRoZXIgcHJvY2Vzc2luZy5cbiAgICAgKi9cbiAgICBmb3IgKHZhciBrZXkgaW4gbGF0ZXN0VmFsdWVzKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IGxhdGVzdFZhbHVlc1trZXldO1xuICAgICAgICAvKipcbiAgICAgICAgICogSWYgdGhpcyBpcyBhIENTUyB2YXJpYWJsZSB3ZSBkb24ndCBkbyBhbnkgZnVydGhlciBwcm9jZXNzaW5nLlxuICAgICAgICAgKi9cbiAgICAgICAgaWYgKGlzQ1NTVmFyaWFibGUkMShrZXkpKSB7XG4gICAgICAgICAgICB2YXJzW2tleV0gPSB2YWx1ZTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIC8vIENvbnZlcnQgdGhlIHZhbHVlIHRvIGl0cyBkZWZhdWx0IHZhbHVlIHR5cGUsIGllIDAgLT4gXCIwcHhcIlxuICAgICAgICB2YXIgdmFsdWVUeXBlID0gbnVtYmVyVmFsdWVUeXBlc1trZXldO1xuICAgICAgICB2YXIgdmFsdWVBc1R5cGUgPSBnZXRWYWx1ZUFzVHlwZSh2YWx1ZSwgdmFsdWVUeXBlKTtcbiAgICAgICAgaWYgKGlzVHJhbnNmb3JtUHJvcChrZXkpKSB7XG4gICAgICAgICAgICAvLyBJZiB0aGlzIGlzIGEgdHJhbnNmb3JtLCBmbGFnIHRvIGVuYWJsZSBmdXJ0aGVyIHRyYW5zZm9ybSBwcm9jZXNzaW5nXG4gICAgICAgICAgICBoYXNUcmFuc2Zvcm0gPSB0cnVlO1xuICAgICAgICAgICAgdHJhbnNmb3JtW2tleV0gPSB2YWx1ZUFzVHlwZTtcbiAgICAgICAgICAgIHRyYW5zZm9ybUtleXMucHVzaChrZXkpO1xuICAgICAgICAgICAgLy8gSWYgd2UgYWxyZWFkeSBrbm93IHdlIGhhdmUgYSBub24tZGVmYXVsdCB0cmFuc2Zvcm0sIGVhcmx5IHJldHVyblxuICAgICAgICAgICAgaWYgKCF0cmFuc2Zvcm1Jc05vbmUpXG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAvLyBPdGhlcndpc2UgY2hlY2sgdG8gc2VlIGlmIHRoaXMgaXMgYSBkZWZhdWx0IHRyYW5zZm9ybVxuICAgICAgICAgICAgaWYgKHZhbHVlICE9PSAoKF9hID0gdmFsdWVUeXBlLmRlZmF1bHQpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IDApKVxuICAgICAgICAgICAgICAgIHRyYW5zZm9ybUlzTm9uZSA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGlzVHJhbnNmb3JtT3JpZ2luUHJvcChrZXkpKSB7XG4gICAgICAgICAgICB0cmFuc2Zvcm1PcmlnaW5ba2V5XSA9IHZhbHVlQXNUeXBlO1xuICAgICAgICAgICAgLy8gSWYgdGhpcyBpcyBhIHRyYW5zZm9ybSBvcmlnaW4sIGZsYWcgYW5kIGVuYWJsZSBmdXJ0aGVyIHRyYW5zZm9ybS1vcmlnaW4gcHJvY2Vzc2luZ1xuICAgICAgICAgICAgaGFzVHJhbnNmb3JtT3JpZ2luID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogSWYgbGF5b3V0IHByb2plY3Rpb24gaXMgb24sIGFuZCB3ZSBuZWVkIHRvIHBlcmZvcm0gc2NhbGUgY29ycmVjdGlvbiBmb3IgdGhpc1xuICAgICAgICAgICAgICogdmFsdWUgdHlwZSwgcGVyZm9ybSBpdC5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgaWYgKChwcm9qZWN0aW9uID09PSBudWxsIHx8IHByb2plY3Rpb24gPT09IHZvaWQgMCA/IHZvaWQgMCA6IHByb2plY3Rpb24uaXNIeWRyYXRlZCkgJiZcbiAgICAgICAgICAgICAgICAobGF5b3V0U3RhdGUgPT09IG51bGwgfHwgbGF5b3V0U3RhdGUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGxheW91dFN0YXRlLmlzSHlkcmF0ZWQpICYmXG4gICAgICAgICAgICAgICAgdmFsdWVTY2FsZUNvcnJlY3Rpb25ba2V5XSkge1xuICAgICAgICAgICAgICAgIHZhciBjb3JyZWN0ZWRWYWx1ZSA9IHZhbHVlU2NhbGVDb3JyZWN0aW9uW2tleV0ucHJvY2Vzcyh2YWx1ZSwgbGF5b3V0U3RhdGUsIHByb2plY3Rpb24pO1xuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAqIFNjYWxlLWNvcnJlY3RhYmxlIHZhbHVlcyBjYW4gZGVmaW5lIGEgbnVtYmVyIG9mIG90aGVyIHZhbHVlcyB0byBicmVha1xuICAgICAgICAgICAgICAgICAqIGRvd24gaW50by4gRm9yIGluc3RhbmNlIGJvcmRlclJhZGl1cyBuZWVkcyBhcHBseWluZyB0byBib3JkZXJCb3R0b21MZWZ0UmFkaXVzIGV0Y1xuICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgIHZhciBhcHBseVRvID0gdmFsdWVTY2FsZUNvcnJlY3Rpb25ba2V5XS5hcHBseVRvO1xuICAgICAgICAgICAgICAgIGlmIChhcHBseVRvKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBudW0gPSBhcHBseVRvLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBudW07IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGVbYXBwbHlUb1tpXV0gPSBjb3JyZWN0ZWRWYWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgc3R5bGVba2V5XSA9IGNvcnJlY3RlZFZhbHVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHN0eWxlW2tleV0gPSB2YWx1ZUFzVHlwZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAobGF5b3V0U3RhdGUgJiZcbiAgICAgICAgcHJvamVjdGlvbiAmJlxuICAgICAgICBidWlsZFByb2plY3Rpb25UcmFuc2Zvcm0gJiZcbiAgICAgICAgYnVpbGRQcm9qZWN0aW9uVHJhbnNmb3JtT3JpZ2luKSB7XG4gICAgICAgIHN0eWxlLnRyYW5zZm9ybSA9IGJ1aWxkUHJvamVjdGlvblRyYW5zZm9ybShsYXlvdXRTdGF0ZS5kZWx0YUZpbmFsLCBsYXlvdXRTdGF0ZS50cmVlU2NhbGUsIGhhc1RyYW5zZm9ybSA/IHRyYW5zZm9ybSA6IHVuZGVmaW5lZCk7XG4gICAgICAgIGlmICh0cmFuc2Zvcm1UZW1wbGF0ZSkge1xuICAgICAgICAgICAgc3R5bGUudHJhbnNmb3JtID0gdHJhbnNmb3JtVGVtcGxhdGUodHJhbnNmb3JtLCBzdHlsZS50cmFuc2Zvcm0pO1xuICAgICAgICB9XG4gICAgICAgIHN0eWxlLnRyYW5zZm9ybU9yaWdpbiA9IGJ1aWxkUHJvamVjdGlvblRyYW5zZm9ybU9yaWdpbihsYXlvdXRTdGF0ZSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBpZiAoaGFzVHJhbnNmb3JtKSB7XG4gICAgICAgICAgICBzdHlsZS50cmFuc2Zvcm0gPSBidWlsZFRyYW5zZm9ybShzdGF0ZSwgb3B0aW9ucywgdHJhbnNmb3JtSXNOb25lLCB0cmFuc2Zvcm1UZW1wbGF0ZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGhhc1RyYW5zZm9ybU9yaWdpbikge1xuICAgICAgICAgICAgc3R5bGUudHJhbnNmb3JtT3JpZ2luID0gYnVpbGRUcmFuc2Zvcm1PcmlnaW4odHJhbnNmb3JtT3JpZ2luKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxudmFyIGNyZWF0ZUh0bWxSZW5kZXJTdGF0ZSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICh7XG4gICAgc3R5bGU6IHt9LFxuICAgIHRyYW5zZm9ybToge30sXG4gICAgdHJhbnNmb3JtS2V5czogW10sXG4gICAgdHJhbnNmb3JtT3JpZ2luOiB7fSxcbiAgICB2YXJzOiB7fSxcbn0pOyB9O1xuXG5mdW5jdGlvbiBjb3B5UmF3VmFsdWVzT25seSh0YXJnZXQsIHNvdXJjZSwgcHJvcHMpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICAgIGlmICghaXNNb3Rpb25WYWx1ZShzb3VyY2Vba2V5XSkgJiYgIWlzRm9yY2VkTW90aW9uVmFsdWUoa2V5LCBwcm9wcykpIHtcbiAgICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgIH1cbiAgICB9XG59XG5mdW5jdGlvbiB1c2VJbml0aWFsTW90aW9uVmFsdWVzKF9hLCB2aXN1YWxTdGF0ZSwgaXNTdGF0aWMpIHtcbiAgICB2YXIgdHJhbnNmb3JtVGVtcGxhdGUgPSBfYS50cmFuc2Zvcm1UZW1wbGF0ZTtcbiAgICByZXR1cm4gUmVhY3QudXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBzdGF0ZSA9IGNyZWF0ZUh0bWxSZW5kZXJTdGF0ZSgpO1xuICAgICAgICBidWlsZEhUTUxTdHlsZXMoc3RhdGUsIHZpc3VhbFN0YXRlLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgeyBlbmFibGVIYXJkd2FyZUFjY2VsZXJhdGlvbjogIWlzU3RhdGljIH0sIHRyYW5zZm9ybVRlbXBsYXRlKTtcbiAgICAgICAgdmFyIHZhcnMgPSBzdGF0ZS52YXJzLCBzdHlsZSA9IHN0YXRlLnN0eWxlO1xuICAgICAgICByZXR1cm4gdHNsaWIuX19hc3NpZ24odHNsaWIuX19hc3NpZ24oe30sIHZhcnMpLCBzdHlsZSk7XG4gICAgfSwgW3Zpc3VhbFN0YXRlXSk7XG59XG5mdW5jdGlvbiB1c2VTdHlsZShwcm9wcywgdmlzdWFsU3RhdGUsIGlzU3RhdGljKSB7XG4gICAgdmFyIHN0eWxlUHJvcCA9IHByb3BzLnN0eWxlIHx8IHt9O1xuICAgIHZhciBzdHlsZSA9IHt9O1xuICAgIC8qKlxuICAgICAqIENvcHkgbm9uLU1vdGlvbiBWYWx1ZXMgc3RyYWlnaHQgaW50byBzdHlsZVxuICAgICAqL1xuICAgIGNvcHlSYXdWYWx1ZXNPbmx5KHN0eWxlLCBzdHlsZVByb3AsIHByb3BzKTtcbiAgICBPYmplY3QuYXNzaWduKHN0eWxlLCB1c2VJbml0aWFsTW90aW9uVmFsdWVzKHByb3BzLCB2aXN1YWxTdGF0ZSwgaXNTdGF0aWMpKTtcbiAgICBpZiAocHJvcHMudHJhbnNmb3JtVmFsdWVzKSB7XG4gICAgICAgIHN0eWxlID0gcHJvcHMudHJhbnNmb3JtVmFsdWVzKHN0eWxlKTtcbiAgICB9XG4gICAgcmV0dXJuIHN0eWxlO1xufVxuZnVuY3Rpb24gdXNlSFRNTFByb3BzKHByb3BzLCB2aXN1YWxTdGF0ZSwgaXNTdGF0aWMpIHtcbiAgICAvLyBUaGUgYGFueWAgaXNuJ3QgaWRlYWwgYnV0IGl0IGlzIHRoZSB0eXBlIG9mIGNyZWF0ZUVsZW1lbnQgcHJvcHMgYXJndW1lbnRcbiAgICB2YXIgaHRtbFByb3BzID0ge307XG4gICAgdmFyIHN0eWxlID0gdXNlU3R5bGUocHJvcHMsIHZpc3VhbFN0YXRlLCBpc1N0YXRpYyk7XG4gICAgaWYgKEJvb2xlYW4ocHJvcHMuZHJhZykpIHtcbiAgICAgICAgLy8gRGlzYWJsZSB0aGUgZ2hvc3QgZWxlbWVudCB3aGVuIGEgdXNlciBkcmFnc1xuICAgICAgICBodG1sUHJvcHMuZHJhZ2dhYmxlID0gZmFsc2U7XG4gICAgICAgIC8vIERpc2FibGUgdGV4dCBzZWxlY3Rpb25cbiAgICAgICAgc3R5bGUudXNlclNlbGVjdCA9IHN0eWxlLldlYmtpdFVzZXJTZWxlY3QgPSBzdHlsZS5XZWJraXRUb3VjaENhbGxvdXQgPVxuICAgICAgICAgICAgXCJub25lXCI7XG4gICAgICAgIC8vIERpc2FibGUgc2Nyb2xsaW5nIG9uIHRoZSBkcmFnZ2FibGUgZGlyZWN0aW9uXG4gICAgICAgIHN0eWxlLnRvdWNoQWN0aW9uID1cbiAgICAgICAgICAgIHByb3BzLmRyYWcgPT09IHRydWVcbiAgICAgICAgICAgICAgICA/IFwibm9uZVwiXG4gICAgICAgICAgICAgICAgOiBcInBhbi1cIiArIChwcm9wcy5kcmFnID09PSBcInhcIiA/IFwieVwiIDogXCJ4XCIpO1xuICAgIH1cbiAgICBodG1sUHJvcHMuc3R5bGUgPSBzdHlsZTtcbiAgICByZXR1cm4gaHRtbFByb3BzO1xufVxuXG4vKipcbiAqIEEgbGlzdCBvZiBhbGwgdmFsaWQgTW90aW9uUHJvcHMuXG4gKlxuICogQGludGVybmFscmVtYXJrc1xuICogVGhpcyBkb2Vzbid0IHRocm93IGlmIGEgYE1vdGlvblByb3BgIG5hbWUgaXMgbWlzc2luZyAtIGl0IHNob3VsZC5cbiAqL1xudmFyIHZhbGlkTW90aW9uUHJvcHMgPSBuZXcgU2V0KFtcbiAgICBcImluaXRpYWxcIixcbiAgICBcImFuaW1hdGVcIixcbiAgICBcImV4aXRcIixcbiAgICBcInN0eWxlXCIsXG4gICAgXCJ2YXJpYW50c1wiLFxuICAgIFwidHJhbnNpdGlvblwiLFxuICAgIFwidHJhbnNmb3JtVGVtcGxhdGVcIixcbiAgICBcInRyYW5zZm9ybVZhbHVlc1wiLFxuICAgIFwiY3VzdG9tXCIsXG4gICAgXCJpbmhlcml0XCIsXG4gICAgXCJsYXlvdXRcIixcbiAgICBcImxheW91dElkXCIsXG4gICAgXCJfbGF5b3V0UmVzZXRUcmFuc2Zvcm1cIixcbiAgICBcIm9uTGF5b3V0QW5pbWF0aW9uQ29tcGxldGVcIixcbiAgICBcIm9uVmlld3BvcnRCb3hVcGRhdGVcIixcbiAgICBcIm9uTGF5b3V0TWVhc3VyZVwiLFxuICAgIFwib25CZWZvcmVMYXlvdXRNZWFzdXJlXCIsXG4gICAgXCJvbkFuaW1hdGlvblN0YXJ0XCIsXG4gICAgXCJvbkFuaW1hdGlvbkNvbXBsZXRlXCIsXG4gICAgXCJvblVwZGF0ZVwiLFxuICAgIFwib25EcmFnU3RhcnRcIixcbiAgICBcIm9uRHJhZ1wiLFxuICAgIFwib25EcmFnRW5kXCIsXG4gICAgXCJvbk1lYXN1cmVEcmFnQ29uc3RyYWludHNcIixcbiAgICBcIm9uRGlyZWN0aW9uTG9ja1wiLFxuICAgIFwib25EcmFnVHJhbnNpdGlvbkVuZFwiLFxuICAgIFwiZHJhZ1wiLFxuICAgIFwiZHJhZ0NvbnRyb2xzXCIsXG4gICAgXCJkcmFnTGlzdGVuZXJcIixcbiAgICBcImRyYWdDb25zdHJhaW50c1wiLFxuICAgIFwiZHJhZ0RpcmVjdGlvbkxvY2tcIixcbiAgICBcIl9kcmFnWFwiLFxuICAgIFwiX2RyYWdZXCIsXG4gICAgXCJkcmFnRWxhc3RpY1wiLFxuICAgIFwiZHJhZ01vbWVudHVtXCIsXG4gICAgXCJkcmFnUHJvcGFnYXRpb25cIixcbiAgICBcImRyYWdUcmFuc2l0aW9uXCIsXG4gICAgXCJ3aGlsZURyYWdcIixcbiAgICBcIm9uUGFuXCIsXG4gICAgXCJvblBhblN0YXJ0XCIsXG4gICAgXCJvblBhbkVuZFwiLFxuICAgIFwib25QYW5TZXNzaW9uU3RhcnRcIixcbiAgICBcIm9uVGFwXCIsXG4gICAgXCJvblRhcFN0YXJ0XCIsXG4gICAgXCJvblRhcENhbmNlbFwiLFxuICAgIFwib25Ib3ZlclN0YXJ0XCIsXG4gICAgXCJvbkhvdmVyRW5kXCIsXG4gICAgXCJ3aGlsZUZvY3VzXCIsXG4gICAgXCJ3aGlsZVRhcFwiLFxuICAgIFwid2hpbGVIb3ZlclwiLFxuXSk7XG4vKipcbiAqIENoZWNrIHdoZXRoZXIgYSBwcm9wIG5hbWUgaXMgYSB2YWxpZCBgTW90aW9uUHJvcGAga2V5LlxuICpcbiAqIEBwYXJhbSBrZXkgLSBOYW1lIG9mIHRoZSBwcm9wZXJ0eSB0byBjaGVja1xuICogQHJldHVybnMgYHRydWVgIGlzIGtleSBpcyBhIHZhbGlkIGBNb3Rpb25Qcm9wYC5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmZ1bmN0aW9uIGlzVmFsaWRNb3Rpb25Qcm9wKGtleSkge1xuICAgIHJldHVybiB2YWxpZE1vdGlvblByb3BzLmhhcyhrZXkpO1xufVxuXG52YXIgc2hvdWxkRm9yd2FyZCA9IGZ1bmN0aW9uIChrZXkpIHsgcmV0dXJuICFpc1ZhbGlkTW90aW9uUHJvcChrZXkpOyB9O1xuLyoqXG4gKiBFbW90aW9uIGFuZCBTdHlsZWQgQ29tcG9uZW50cyBib3RoIGFsbG93IHVzZXJzIHRvIHBhc3MgdGhyb3VnaCBhcmJpdHJhcnkgcHJvcHMgdG8gdGhlaXIgY29tcG9uZW50c1xuICogdG8gZHluYW1pY2FsbHkgZ2VuZXJhdGUgQ1NTLiBUaGV5IGJvdGggdXNlIHRoZSBgQGVtb3Rpb24vaXMtcHJvcC12YWxpZGAgcGFja2FnZSB0byBkZXRlcm1pbmUgd2hpY2hcbiAqIG9mIHRoZXNlIHNob3VsZCBiZSBwYXNzZWQgdG8gdGhlIHVuZGVybHlpbmcgRE9NIG5vZGUuXG4gKlxuICogSG93ZXZlciwgd2hlbiBzdHlsaW5nIGEgTW90aW9uIGNvbXBvbmVudCBgc3R5bGVkKG1vdGlvbi5kaXYpYCwgYm90aCBwYWNrYWdlcyBwYXNzIHRocm91Z2ggKmFsbCogcHJvcHNcbiAqIGFzIGl0J3Mgc2VlbiBhcyBhbiBhcmJpdHJhcnkgY29tcG9uZW50IHJhdGhlciB0aGFuIGEgRE9NIG5vZGUuIE1vdGlvbiBvbmx5IGFsbG93cyBhcmJpdHJhcnkgcHJvcHNcbiAqIHBhc3NlZCB0aHJvdWdoIHRoZSBgY3VzdG9tYCBwcm9wIHNvIGl0IGRvZXNuJ3QgKm5lZWQqIHRoZSBwYXlsb2FkIG9yIGNvbXB1dGF0aW9uYWwgb3ZlcmhlYWQgb2ZcbiAqIGBAZW1vdGlvbi9pcy1wcm9wLXZhbGlkYCwgaG93ZXZlciB0byBmaXggdGhpcyBwcm9ibGVtIHdlIG5lZWQgdG8gdXNlIGl0LlxuICpcbiAqIEJ5IG1ha2luZyBpdCBhbiBvcHRpb25hbERlcGVuZGVuY3kgd2UgY2FuIG9mZmVyIHRoaXMgZnVuY3Rpb25hbGl0eSBvbmx5IGluIHRoZSBzaXR1YXRpb25zIHdoZXJlIGl0J3NcbiAqIGFjdHVhbGx5IHJlcXVpcmVkLlxuICovXG50cnkge1xuICAgIHZhciBlbW90aW9uSXNQcm9wVmFsaWRfMSA9IHJlcXVpcmUoXCJAZW1vdGlvbi9pcy1wcm9wLXZhbGlkXCIpLmRlZmF1bHQ7XG4gICAgc2hvdWxkRm9yd2FyZCA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgLy8gSGFuZGxlIGV2ZW50cyBleHBsaWNpdGx5IGFzIEVtb3Rpb24gdmFsaWRhdGVzIHRoZW0gYWxsIGFzIHRydWVcbiAgICAgICAgaWYgKGtleS5zdGFydHNXaXRoKFwib25cIikpIHtcbiAgICAgICAgICAgIHJldHVybiAhaXNWYWxpZE1vdGlvblByb3Aoa2V5KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBlbW90aW9uSXNQcm9wVmFsaWRfMShrZXkpO1xuICAgICAgICB9XG4gICAgfTtcbn1cbmNhdGNoIChfYSkge1xuICAgIC8vIFdlIGRvbid0IG5lZWQgdG8gYWN0dWFsbHkgZG8gYW55dGhpbmcgaGVyZSAtIHRoZSBmYWxsYmFjayBpcyB0aGUgZXhpc3RpbmcgYGlzUHJvcFZhbGlkYC5cbn1cbmZ1bmN0aW9uIGZpbHRlclByb3BzKHByb3BzLCBpc0RvbSwgZm9yd2FyZE1vdGlvblByb3BzKSB7XG4gICAgdmFyIGZpbHRlcmVkUHJvcHMgPSB7fTtcbiAgICBmb3IgKHZhciBrZXkgaW4gcHJvcHMpIHtcbiAgICAgICAgaWYgKHNob3VsZEZvcndhcmQoa2V5KSB8fFxuICAgICAgICAgICAgKGZvcndhcmRNb3Rpb25Qcm9wcyA9PT0gdHJ1ZSAmJiBpc1ZhbGlkTW90aW9uUHJvcChrZXkpKSB8fFxuICAgICAgICAgICAgKCFpc0RvbSAmJiAhaXNWYWxpZE1vdGlvblByb3Aoa2V5KSkpIHtcbiAgICAgICAgICAgIGZpbHRlcmVkUHJvcHNba2V5XSA9IHByb3BzW2tleV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZpbHRlcmVkUHJvcHM7XG59XG5cbmZ1bmN0aW9uIGNhbGNPcmlnaW4kMShvcmlnaW4sIG9mZnNldCwgc2l6ZSkge1xuICAgIHJldHVybiB0eXBlb2Ygb3JpZ2luID09PSBcInN0cmluZ1wiXG4gICAgICAgID8gb3JpZ2luXG4gICAgICAgIDogc3R5bGVWYWx1ZVR5cGVzLnB4LnRyYW5zZm9ybShvZmZzZXQgKyBzaXplICogb3JpZ2luKTtcbn1cbi8qKlxuICogVGhlIFNWRyB0cmFuc2Zvcm0gb3JpZ2luIGRlZmF1bHRzIGFyZSBkaWZmZXJlbnQgdG8gQ1NTIGFuZCBpcyBsZXNzIGludHVpdGl2ZSxcbiAqIHNvIHdlIHVzZSB0aGUgbWVhc3VyZWQgZGltZW5zaW9ucyBvZiB0aGUgU1ZHIHRvIHJlY29uY2lsZSB0aGVzZS5cbiAqL1xuZnVuY3Rpb24gY2FsY1NWR1RyYW5zZm9ybU9yaWdpbihkaW1lbnNpb25zLCBvcmlnaW5YLCBvcmlnaW5ZKSB7XG4gICAgdmFyIHB4T3JpZ2luWCA9IGNhbGNPcmlnaW4kMShvcmlnaW5YLCBkaW1lbnNpb25zLngsIGRpbWVuc2lvbnMud2lkdGgpO1xuICAgIHZhciBweE9yaWdpblkgPSBjYWxjT3JpZ2luJDEob3JpZ2luWSwgZGltZW5zaW9ucy55LCBkaW1lbnNpb25zLmhlaWdodCk7XG4gICAgcmV0dXJuIHB4T3JpZ2luWCArIFwiIFwiICsgcHhPcmlnaW5ZO1xufVxuXG4vLyBDb252ZXJ0IGEgcHJvZ3Jlc3MgMC0xIHRvIGEgcGl4ZWxzIHZhbHVlIGJhc2VkIG9uIHRoZSBwcm92aWRlZCBsZW5ndGhcbnZhciBwcm9ncmVzc1RvUGl4ZWxzID0gZnVuY3Rpb24gKHByb2dyZXNzLCBsZW5ndGgpIHtcbiAgICByZXR1cm4gc3R5bGVWYWx1ZVR5cGVzLnB4LnRyYW5zZm9ybShwcm9ncmVzcyAqIGxlbmd0aCk7XG59O1xudmFyIGRhc2hLZXlzID0ge1xuICAgIG9mZnNldDogXCJzdHJva2UtZGFzaG9mZnNldFwiLFxuICAgIGFycmF5OiBcInN0cm9rZS1kYXNoYXJyYXlcIixcbn07XG52YXIgY2FtZWxLZXlzID0ge1xuICAgIG9mZnNldDogXCJzdHJva2VEYXNob2Zmc2V0XCIsXG4gICAgYXJyYXk6IFwic3Ryb2tlRGFzaGFycmF5XCIsXG59O1xuLyoqXG4gKiBCdWlsZCBTVkcgcGF0aCBwcm9wZXJ0aWVzLiBVc2VzIHRoZSBwYXRoJ3MgbWVhc3VyZWQgbGVuZ3RoIHRvIGNvbnZlcnRcbiAqIG91ciBjdXN0b20gcGF0aExlbmd0aCwgcGF0aFNwYWNpbmcgYW5kIHBhdGhPZmZzZXQgaW50byBzdHJva2UtZGFzaG9mZnNldFxuICogYW5kIHN0cm9rZS1kYXNoYXJyYXkgYXR0cmlidXRlcy5cbiAqXG4gKiBUaGlzIGZ1bmN0aW9uIGlzIG11dGF0aXZlIHRvIHJlZHVjZSBwZXItZnJhbWUgR0MuXG4gKi9cbmZ1bmN0aW9uIGJ1aWxkU1ZHUGF0aChhdHRycywgdG90YWxMZW5ndGgsIGxlbmd0aCwgc3BhY2luZywgb2Zmc2V0LCB1c2VEYXNoQ2FzZSkge1xuICAgIGlmIChzcGFjaW5nID09PSB2b2lkIDApIHsgc3BhY2luZyA9IDE7IH1cbiAgICBpZiAob2Zmc2V0ID09PSB2b2lkIDApIHsgb2Zmc2V0ID0gMDsgfVxuICAgIGlmICh1c2VEYXNoQ2FzZSA9PT0gdm9pZCAwKSB7IHVzZURhc2hDYXNlID0gdHJ1ZTsgfVxuICAgIC8vIFdlIHVzZSBkYXNoIGNhc2Ugd2hlbiBzZXR0aW5nIGF0dHJpYnV0ZXMgZGlyZWN0bHkgdG8gdGhlIERPTSBub2RlIGFuZCBjYW1lbCBjYXNlXG4gICAgLy8gd2hlbiBkZWZpbmluZyBwcm9wcyBvbiBhIFJlYWN0IGNvbXBvbmVudC5cbiAgICB2YXIga2V5cyA9IHVzZURhc2hDYXNlID8gZGFzaEtleXMgOiBjYW1lbEtleXM7XG4gICAgLy8gQnVpbGQgdGhlIGRhc2ggb2Zmc2V0XG4gICAgYXR0cnNba2V5cy5vZmZzZXRdID0gcHJvZ3Jlc3NUb1BpeGVscygtb2Zmc2V0LCB0b3RhbExlbmd0aCk7XG4gICAgLy8gQnVpbGQgdGhlIGRhc2ggYXJyYXlcbiAgICB2YXIgcGF0aExlbmd0aCA9IHByb2dyZXNzVG9QaXhlbHMobGVuZ3RoLCB0b3RhbExlbmd0aCk7XG4gICAgdmFyIHBhdGhTcGFjaW5nID0gcHJvZ3Jlc3NUb1BpeGVscyhzcGFjaW5nLCB0b3RhbExlbmd0aCk7XG4gICAgYXR0cnNba2V5cy5hcnJheV0gPSBwYXRoTGVuZ3RoICsgXCIgXCIgKyBwYXRoU3BhY2luZztcbn1cblxuLyoqXG4gKiBCdWlsZCBTVkcgdmlzdWFsIGF0dHJidXRlcywgbGlrZSBjeCBhbmQgc3R5bGUudHJhbnNmb3JtXG4gKi9cbmZ1bmN0aW9uIGJ1aWxkU1ZHQXR0cnMoc3RhdGUsIF9hLCBwcm9qZWN0aW9uLCBsYXlvdXRTdGF0ZSwgb3B0aW9ucywgdHJhbnNmb3JtVGVtcGxhdGUsIGJ1aWxkUHJvamVjdGlvblRyYW5zZm9ybSwgYnVpbGRQcm9qZWN0aW9uVHJhbnNmb3JtT3JpZ2luKSB7XG4gICAgdmFyIGF0dHJYID0gX2EuYXR0clgsIGF0dHJZID0gX2EuYXR0clksIG9yaWdpblggPSBfYS5vcmlnaW5YLCBvcmlnaW5ZID0gX2Eub3JpZ2luWSwgcGF0aExlbmd0aCA9IF9hLnBhdGhMZW5ndGgsIF9iID0gX2EucGF0aFNwYWNpbmcsIHBhdGhTcGFjaW5nID0gX2IgPT09IHZvaWQgMCA/IDEgOiBfYiwgX2MgPSBfYS5wYXRoT2Zmc2V0LCBwYXRoT2Zmc2V0ID0gX2MgPT09IHZvaWQgMCA/IDAgOiBfYywgXG4gICAgLy8gVGhpcyBpcyBvYmplY3QgY3JlYXRpb24sIHdoaWNoIHdlIHRyeSB0byBhdm9pZCBwZXItZnJhbWUuXG4gICAgbGF0ZXN0ID0gdHNsaWIuX19yZXN0KF9hLCBbXCJhdHRyWFwiLCBcImF0dHJZXCIsIFwib3JpZ2luWFwiLCBcIm9yaWdpbllcIiwgXCJwYXRoTGVuZ3RoXCIsIFwicGF0aFNwYWNpbmdcIiwgXCJwYXRoT2Zmc2V0XCJdKTtcbiAgICBidWlsZEhUTUxTdHlsZXMoc3RhdGUsIGxhdGVzdCwgcHJvamVjdGlvbiwgbGF5b3V0U3RhdGUsIG9wdGlvbnMsIHRyYW5zZm9ybVRlbXBsYXRlLCBidWlsZFByb2plY3Rpb25UcmFuc2Zvcm0sIGJ1aWxkUHJvamVjdGlvblRyYW5zZm9ybU9yaWdpbik7XG4gICAgc3RhdGUuYXR0cnMgPSBzdGF0ZS5zdHlsZTtcbiAgICBzdGF0ZS5zdHlsZSA9IHt9O1xuICAgIHZhciBhdHRycyA9IHN0YXRlLmF0dHJzLCBzdHlsZSA9IHN0YXRlLnN0eWxlLCBkaW1lbnNpb25zID0gc3RhdGUuZGltZW5zaW9ucywgdG90YWxQYXRoTGVuZ3RoID0gc3RhdGUudG90YWxQYXRoTGVuZ3RoO1xuICAgIC8qKlxuICAgICAqIEhvd2V2ZXIsIHdlIGFwcGx5IHRyYW5zZm9ybXMgYXMgQ1NTIHRyYW5zZm9ybXMuIFNvIGlmIHdlIGRldGVjdCBhIHRyYW5zZm9ybSB3ZSB0YWtlIGl0IGZyb20gYXR0cnNcbiAgICAgKiBhbmQgY29weSBpdCBpbnRvIHN0eWxlLlxuICAgICAqL1xuICAgIGlmIChhdHRycy50cmFuc2Zvcm0pIHtcbiAgICAgICAgaWYgKGRpbWVuc2lvbnMpXG4gICAgICAgICAgICBzdHlsZS50cmFuc2Zvcm0gPSBhdHRycy50cmFuc2Zvcm07XG4gICAgICAgIGRlbGV0ZSBhdHRycy50cmFuc2Zvcm07XG4gICAgfVxuICAgIC8vIFBhcnNlIHRyYW5zZm9ybU9yaWdpblxuICAgIGlmIChkaW1lbnNpb25zICYmXG4gICAgICAgIChvcmlnaW5YICE9PSB1bmRlZmluZWQgfHwgb3JpZ2luWSAhPT0gdW5kZWZpbmVkIHx8IHN0eWxlLnRyYW5zZm9ybSkpIHtcbiAgICAgICAgc3R5bGUudHJhbnNmb3JtT3JpZ2luID0gY2FsY1NWR1RyYW5zZm9ybU9yaWdpbihkaW1lbnNpb25zLCBvcmlnaW5YICE9PSB1bmRlZmluZWQgPyBvcmlnaW5YIDogMC41LCBvcmlnaW5ZICE9PSB1bmRlZmluZWQgPyBvcmlnaW5ZIDogMC41KTtcbiAgICB9XG4gICAgLy8gVHJlYXQgeC95IG5vdCBhcyBzaG9ydGN1dHMgYnV0IGFzIGFjdHVhbCBhdHRyaWJ1dGVzXG4gICAgaWYgKGF0dHJYICE9PSB1bmRlZmluZWQpXG4gICAgICAgIGF0dHJzLnggPSBhdHRyWDtcbiAgICBpZiAoYXR0clkgIT09IHVuZGVmaW5lZClcbiAgICAgICAgYXR0cnMueSA9IGF0dHJZO1xuICAgIC8vIEJ1aWxkIFNWRyBwYXRoIGlmIG9uZSBoYXMgYmVlbiBtZWFzdXJlZFxuICAgIGlmICh0b3RhbFBhdGhMZW5ndGggIT09IHVuZGVmaW5lZCAmJiBwYXRoTGVuZ3RoICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgYnVpbGRTVkdQYXRoKGF0dHJzLCB0b3RhbFBhdGhMZW5ndGgsIHBhdGhMZW5ndGgsIHBhdGhTcGFjaW5nLCBwYXRoT2Zmc2V0LCBmYWxzZSk7XG4gICAgfVxufVxuXG52YXIgY3JlYXRlU3ZnUmVuZGVyU3RhdGUgPSBmdW5jdGlvbiAoKSB7IHJldHVybiAodHNsaWIuX19hc3NpZ24odHNsaWIuX19hc3NpZ24oe30sIGNyZWF0ZUh0bWxSZW5kZXJTdGF0ZSgpKSwgeyBhdHRyczoge30gfSkpOyB9O1xuXG5mdW5jdGlvbiB1c2VTVkdQcm9wcyhwcm9wcywgdmlzdWFsU3RhdGUpIHtcbiAgICB2YXIgdmlzdWFsUHJvcHMgPSBSZWFjdC51c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHN0YXRlID0gY3JlYXRlU3ZnUmVuZGVyU3RhdGUoKTtcbiAgICAgICAgYnVpbGRTVkdBdHRycyhzdGF0ZSwgdmlzdWFsU3RhdGUsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB7IGVuYWJsZUhhcmR3YXJlQWNjZWxlcmF0aW9uOiBmYWxzZSB9LCBwcm9wcy50cmFuc2Zvcm1UZW1wbGF0ZSk7XG4gICAgICAgIHJldHVybiB0c2xpYi5fX2Fzc2lnbih0c2xpYi5fX2Fzc2lnbih7fSwgc3RhdGUuYXR0cnMpLCB7IHN0eWxlOiB0c2xpYi5fX2Fzc2lnbih7fSwgc3RhdGUuc3R5bGUpIH0pO1xuICAgIH0sIFt2aXN1YWxTdGF0ZV0pO1xuICAgIGlmIChwcm9wcy5zdHlsZSkge1xuICAgICAgICB2YXIgcmF3U3R5bGVzID0ge307XG4gICAgICAgIGNvcHlSYXdWYWx1ZXNPbmx5KHJhd1N0eWxlcywgcHJvcHMuc3R5bGUsIHByb3BzKTtcbiAgICAgICAgdmlzdWFsUHJvcHMuc3R5bGUgPSB0c2xpYi5fX2Fzc2lnbih0c2xpYi5fX2Fzc2lnbih7fSwgcmF3U3R5bGVzKSwgdmlzdWFsUHJvcHMuc3R5bGUpO1xuICAgIH1cbiAgICByZXR1cm4gdmlzdWFsUHJvcHM7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVVzZVJlbmRlcihmb3J3YXJkTW90aW9uUHJvcHMpIHtcbiAgICBpZiAoZm9yd2FyZE1vdGlvblByb3BzID09PSB2b2lkIDApIHsgZm9yd2FyZE1vdGlvblByb3BzID0gZmFsc2U7IH1cbiAgICB2YXIgdXNlUmVuZGVyID0gZnVuY3Rpb24gKENvbXBvbmVudCwgcHJvcHMsIHJlZiwgX2EsIGlzU3RhdGljKSB7XG4gICAgICAgIHZhciBsYXRlc3RWYWx1ZXMgPSBfYS5sYXRlc3RWYWx1ZXM7XG4gICAgICAgIHZhciB1c2VWaXN1YWxQcm9wcyA9IGlzU1ZHQ29tcG9uZW50KENvbXBvbmVudClcbiAgICAgICAgICAgID8gdXNlU1ZHUHJvcHNcbiAgICAgICAgICAgIDogdXNlSFRNTFByb3BzO1xuICAgICAgICB2YXIgdmlzdWFsUHJvcHMgPSB1c2VWaXN1YWxQcm9wcyhwcm9wcywgbGF0ZXN0VmFsdWVzLCBpc1N0YXRpYyk7XG4gICAgICAgIHZhciBmaWx0ZXJlZFByb3BzID0gZmlsdGVyUHJvcHMocHJvcHMsIHR5cGVvZiBDb21wb25lbnQgPT09IFwic3RyaW5nXCIsIGZvcndhcmRNb3Rpb25Qcm9wcyk7XG4gICAgICAgIHZhciBlbGVtZW50UHJvcHMgPSB0c2xpYi5fX2Fzc2lnbih0c2xpYi5fX2Fzc2lnbih0c2xpYi5fX2Fzc2lnbih7fSwgZmlsdGVyZWRQcm9wcyksIHZpc3VhbFByb3BzKSwgeyByZWY6IHJlZiB9KTtcbiAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBlbGVtZW50UHJvcHMpO1xuICAgIH07XG4gICAgcmV0dXJuIHVzZVJlbmRlcjtcbn1cblxudmFyIENBTUVMX0NBU0VfUEFUVEVSTiA9IC8oW2Etel0pKFtBLVpdKS9nO1xudmFyIFJFUExBQ0VfVEVNUExBVEUgPSBcIiQxLSQyXCI7XG4vKipcbiAqIENvbnZlcnQgY2FtZWxDYXNlIHRvIGRhc2gtY2FzZSBwcm9wZXJ0aWVzLlxuICovXG52YXIgY2FtZWxUb0Rhc2ggPSBmdW5jdGlvbiAoc3RyKSB7XG4gICAgcmV0dXJuIHN0ci5yZXBsYWNlKENBTUVMX0NBU0VfUEFUVEVSTiwgUkVQTEFDRV9URU1QTEFURSkudG9Mb3dlckNhc2UoKTtcbn07XG5cbmZ1bmN0aW9uIHJlbmRlckhUTUwoZWxlbWVudCwgX2EpIHtcbiAgICB2YXIgc3R5bGUgPSBfYS5zdHlsZSwgdmFycyA9IF9hLnZhcnM7XG4gICAgLy8gRGlyZWN0bHkgYXNzaWduIHN0eWxlIGludG8gdGhlIEVsZW1lbnQncyBzdHlsZSBwcm9wLiBJbiB0ZXN0cyBPYmplY3QuYXNzaWduIGlzIHRoZVxuICAgIC8vIGZhc3Rlc3Qgd2F5IHRvIGFzc2lnbiBzdHlsZXMuXG4gICAgT2JqZWN0LmFzc2lnbihlbGVtZW50LnN0eWxlLCBzdHlsZSk7XG4gICAgLy8gTG9vcCBvdmVyIGFueSBDU1MgdmFyaWFibGVzIGFuZCBhc3NpZ24gdGhvc2UuXG4gICAgZm9yICh2YXIga2V5IGluIHZhcnMpIHtcbiAgICAgICAgZWxlbWVudC5zdHlsZS5zZXRQcm9wZXJ0eShrZXksIHZhcnNba2V5XSk7XG4gICAgfVxufVxuXG4vKipcbiAqIEEgc2V0IG9mIGF0dHJpYnV0ZSBuYW1lcyB0aGF0IGFyZSBhbHdheXMgcmVhZC93cml0dGVuIGFzIGNhbWVsIGNhc2UuXG4gKi9cbnZhciBjYW1lbENhc2VBdHRyaWJ1dGVzID0gbmV3IFNldChbXG4gICAgXCJiYXNlRnJlcXVlbmN5XCIsXG4gICAgXCJkaWZmdXNlQ29uc3RhbnRcIixcbiAgICBcImtlcm5lbE1hdHJpeFwiLFxuICAgIFwia2VybmVsVW5pdExlbmd0aFwiLFxuICAgIFwia2V5U3BsaW5lc1wiLFxuICAgIFwia2V5VGltZXNcIixcbiAgICBcImxpbWl0aW5nQ29uZUFuZ2xlXCIsXG4gICAgXCJtYXJrZXJIZWlnaHRcIixcbiAgICBcIm1hcmtlcldpZHRoXCIsXG4gICAgXCJudW1PY3RhdmVzXCIsXG4gICAgXCJ0YXJnZXRYXCIsXG4gICAgXCJ0YXJnZXRZXCIsXG4gICAgXCJzdXJmYWNlU2NhbGVcIixcbiAgICBcInNwZWN1bGFyQ29uc3RhbnRcIixcbiAgICBcInNwZWN1bGFyRXhwb25lbnRcIixcbiAgICBcInN0ZERldmlhdGlvblwiLFxuICAgIFwidGFibGVWYWx1ZXNcIixcbiAgICBcInZpZXdCb3hcIixcbiAgICBcImdyYWRpZW50VHJhbnNmb3JtXCIsXG5dKTtcblxuZnVuY3Rpb24gcmVuZGVyU1ZHKGVsZW1lbnQsIHJlbmRlclN0YXRlKSB7XG4gICAgcmVuZGVySFRNTChlbGVtZW50LCByZW5kZXJTdGF0ZSk7XG4gICAgZm9yICh2YXIga2V5IGluIHJlbmRlclN0YXRlLmF0dHJzKSB7XG4gICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKCFjYW1lbENhc2VBdHRyaWJ1dGVzLmhhcyhrZXkpID8gY2FtZWxUb0Rhc2goa2V5KSA6IGtleSwgcmVuZGVyU3RhdGUuYXR0cnNba2V5XSk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBzY3JhcGVNb3Rpb25WYWx1ZXNGcm9tUHJvcHMkMShwcm9wcykge1xuICAgIHZhciBzdHlsZSA9IHByb3BzLnN0eWxlO1xuICAgIHZhciBuZXdWYWx1ZXMgPSB7fTtcbiAgICBmb3IgKHZhciBrZXkgaW4gc3R5bGUpIHtcbiAgICAgICAgaWYgKGlzTW90aW9uVmFsdWUoc3R5bGVba2V5XSkgfHwgaXNGb3JjZWRNb3Rpb25WYWx1ZShrZXksIHByb3BzKSkge1xuICAgICAgICAgICAgbmV3VmFsdWVzW2tleV0gPSBzdHlsZVtrZXldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBuZXdWYWx1ZXM7XG59XG5cbmZ1bmN0aW9uIHNjcmFwZU1vdGlvblZhbHVlc0Zyb21Qcm9wcyhwcm9wcykge1xuICAgIHZhciBuZXdWYWx1ZXMgPSBzY3JhcGVNb3Rpb25WYWx1ZXNGcm9tUHJvcHMkMShwcm9wcyk7XG4gICAgZm9yICh2YXIga2V5IGluIHByb3BzKSB7XG4gICAgICAgIGlmIChpc01vdGlvblZhbHVlKHByb3BzW2tleV0pKSB7XG4gICAgICAgICAgICB2YXIgdGFyZ2V0S2V5ID0ga2V5ID09PSBcInhcIiB8fCBrZXkgPT09IFwieVwiID8gXCJhdHRyXCIgKyBrZXkudG9VcHBlckNhc2UoKSA6IGtleTtcbiAgICAgICAgICAgIG5ld1ZhbHVlc1t0YXJnZXRLZXldID0gcHJvcHNba2V5XTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbmV3VmFsdWVzO1xufVxuXG5mdW5jdGlvbiBpc0FuaW1hdGlvbkNvbnRyb2xzKHYpIHtcbiAgICByZXR1cm4gdHlwZW9mIHYgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIHYuc3RhcnQgPT09IFwiZnVuY3Rpb25cIjtcbn1cblxudmFyIGlzS2V5ZnJhbWVzVGFyZ2V0ID0gZnVuY3Rpb24gKHYpIHtcbiAgICByZXR1cm4gQXJyYXkuaXNBcnJheSh2KTtcbn07XG5cbnZhciBpc0N1c3RvbVZhbHVlID0gZnVuY3Rpb24gKHYpIHtcbiAgICByZXR1cm4gQm9vbGVhbih2ICYmIHR5cGVvZiB2ID09PSBcIm9iamVjdFwiICYmIHYubWl4ICYmIHYudG9WYWx1ZSk7XG59O1xudmFyIHJlc29sdmVGaW5hbFZhbHVlSW5LZXlmcmFtZXMgPSBmdW5jdGlvbiAodikge1xuICAgIC8vIFRPRE8gbWF5YmUgdGhyb3cgaWYgdi5sZW5ndGggLSAxIGlzIHBsYWNlaG9sZGVyIHRva2VuP1xuICAgIHJldHVybiBpc0tleWZyYW1lc1RhcmdldCh2KSA/IHZbdi5sZW5ndGggLSAxXSB8fCAwIDogdjtcbn07XG5cbi8qKlxuICogSWYgdGhlIHByb3ZpZGVkIHZhbHVlIGlzIGEgTW90aW9uVmFsdWUsIHRoaXMgcmV0dXJucyB0aGUgYWN0dWFsIHZhbHVlLCBvdGhlcndpc2UganVzdCB0aGUgdmFsdWUgaXRzZWxmXG4gKlxuICogVE9ETzogUmVtb3ZlIGFuZCBtb3ZlIHRvIGxpYnJhcnlcbiAqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZnVuY3Rpb24gcmVzb2x2ZU1vdGlvblZhbHVlKHZhbHVlKSB7XG4gICAgdmFyIHVud3JhcHBlZFZhbHVlID0gaXNNb3Rpb25WYWx1ZSh2YWx1ZSkgPyB2YWx1ZS5nZXQoKSA6IHZhbHVlO1xuICAgIHJldHVybiBpc0N1c3RvbVZhbHVlKHVud3JhcHBlZFZhbHVlKVxuICAgICAgICA/IHVud3JhcHBlZFZhbHVlLnRvVmFsdWUoKVxuICAgICAgICA6IHVud3JhcHBlZFZhbHVlO1xufVxuXG5mdW5jdGlvbiBtYWtlU3RhdGUoX2EsIHByb3BzLCBjb250ZXh0LCBwcmVzZW5jZUNvbnRleHQpIHtcbiAgICB2YXIgc2NyYXBlTW90aW9uVmFsdWVzRnJvbVByb3BzID0gX2Euc2NyYXBlTW90aW9uVmFsdWVzRnJvbVByb3BzLCBjcmVhdGVSZW5kZXJTdGF0ZSA9IF9hLmNyZWF0ZVJlbmRlclN0YXRlLCBvbk1vdW50ID0gX2Eub25Nb3VudDtcbiAgICB2YXIgc3RhdGUgPSB7XG4gICAgICAgIGxhdGVzdFZhbHVlczogbWFrZUxhdGVzdFZhbHVlcyhwcm9wcywgY29udGV4dCwgcHJlc2VuY2VDb250ZXh0LCBzY3JhcGVNb3Rpb25WYWx1ZXNGcm9tUHJvcHMpLFxuICAgICAgICByZW5kZXJTdGF0ZTogY3JlYXRlUmVuZGVyU3RhdGUoKSxcbiAgICB9O1xuICAgIGlmIChvbk1vdW50KSB7XG4gICAgICAgIHN0YXRlLm1vdW50ID0gZnVuY3Rpb24gKGluc3RhbmNlKSB7IHJldHVybiBvbk1vdW50KHByb3BzLCBpbnN0YW5jZSwgc3RhdGUpOyB9O1xuICAgIH1cbiAgICByZXR1cm4gc3RhdGU7XG59XG52YXIgbWFrZVVzZVZpc3VhbFN0YXRlID0gZnVuY3Rpb24gKGNvbmZpZykgeyByZXR1cm4gZnVuY3Rpb24gKHByb3BzLCBpc1N0YXRpYykge1xuICAgIHZhciBjb250ZXh0ID0gUmVhY3QudXNlQ29udGV4dChNb3Rpb25Db250ZXh0KTtcbiAgICB2YXIgcHJlc2VuY2VDb250ZXh0ID0gUmVhY3QudXNlQ29udGV4dChQcmVzZW5jZUNvbnRleHQpO1xuICAgIHJldHVybiBpc1N0YXRpY1xuICAgICAgICA/IG1ha2VTdGF0ZShjb25maWcsIHByb3BzLCBjb250ZXh0LCBwcmVzZW5jZUNvbnRleHQpXG4gICAgICAgIDogdXNlQ29uc3RhbnQoZnVuY3Rpb24gKCkgeyByZXR1cm4gbWFrZVN0YXRlKGNvbmZpZywgcHJvcHMsIGNvbnRleHQsIHByZXNlbmNlQ29udGV4dCk7IH0pO1xufTsgfTtcbmZ1bmN0aW9uIG1ha2VMYXRlc3RWYWx1ZXMocHJvcHMsIGNvbnRleHQsIHByZXNlbmNlQ29udGV4dCwgc2NyYXBlTW90aW9uVmFsdWVzKSB7XG4gICAgdmFyIHZhbHVlcyA9IHt9O1xuICAgIHZhciBibG9ja0luaXRpYWxBbmltYXRpb24gPSAocHJlc2VuY2VDb250ZXh0ID09PSBudWxsIHx8IHByZXNlbmNlQ29udGV4dCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcHJlc2VuY2VDb250ZXh0LmluaXRpYWwpID09PSBmYWxzZTtcbiAgICB2YXIgbW90aW9uVmFsdWVzID0gc2NyYXBlTW90aW9uVmFsdWVzKHByb3BzKTtcbiAgICBmb3IgKHZhciBrZXkgaW4gbW90aW9uVmFsdWVzKSB7XG4gICAgICAgIHZhbHVlc1trZXldID0gcmVzb2x2ZU1vdGlvblZhbHVlKG1vdGlvblZhbHVlc1trZXldKTtcbiAgICB9XG4gICAgdmFyIGluaXRpYWwgPSBwcm9wcy5pbml0aWFsLCBhbmltYXRlID0gcHJvcHMuYW5pbWF0ZTtcbiAgICB2YXIgaXNDb250cm9sbGluZ1ZhcmlhbnRzID0gY2hlY2tJZkNvbnRyb2xsaW5nVmFyaWFudHMocHJvcHMpO1xuICAgIHZhciBpc1ZhcmlhbnROb2RlID0gY2hlY2tJZlZhcmlhbnROb2RlKHByb3BzKTtcbiAgICBpZiAoY29udGV4dCAmJlxuICAgICAgICBpc1ZhcmlhbnROb2RlICYmXG4gICAgICAgICFpc0NvbnRyb2xsaW5nVmFyaWFudHMgJiZcbiAgICAgICAgcHJvcHMuaW5oZXJpdCAhPT0gZmFsc2UpIHtcbiAgICAgICAgaW5pdGlhbCAhPT0gbnVsbCAmJiBpbml0aWFsICE9PSB2b2lkIDAgPyBpbml0aWFsIDogKGluaXRpYWwgPSBjb250ZXh0LmluaXRpYWwpO1xuICAgICAgICBhbmltYXRlICE9PSBudWxsICYmIGFuaW1hdGUgIT09IHZvaWQgMCA/IGFuaW1hdGUgOiAoYW5pbWF0ZSA9IGNvbnRleHQuYW5pbWF0ZSk7XG4gICAgfVxuICAgIHZhciB2YXJpYW50VG9TZXQgPSBibG9ja0luaXRpYWxBbmltYXRpb24gfHwgaW5pdGlhbCA9PT0gZmFsc2UgPyBhbmltYXRlIDogaW5pdGlhbDtcbiAgICBpZiAodmFyaWFudFRvU2V0ICYmXG4gICAgICAgIHR5cGVvZiB2YXJpYW50VG9TZXQgIT09IFwiYm9vbGVhblwiICYmXG4gICAgICAgICFpc0FuaW1hdGlvbkNvbnRyb2xzKHZhcmlhbnRUb1NldCkpIHtcbiAgICAgICAgdmFyIGxpc3QgPSBBcnJheS5pc0FycmF5KHZhcmlhbnRUb1NldCkgPyB2YXJpYW50VG9TZXQgOiBbdmFyaWFudFRvU2V0XTtcbiAgICAgICAgbGlzdC5mb3JFYWNoKGZ1bmN0aW9uIChkZWZpbml0aW9uKSB7XG4gICAgICAgICAgICB2YXIgcmVzb2x2ZWQgPSByZXNvbHZlVmFyaWFudEZyb21Qcm9wcyhwcm9wcywgZGVmaW5pdGlvbik7XG4gICAgICAgICAgICBpZiAoIXJlc29sdmVkKVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIHZhciB0cmFuc2l0aW9uRW5kID0gcmVzb2x2ZWQudHJhbnNpdGlvbkVuZDsgcmVzb2x2ZWQudHJhbnNpdGlvbjsgdmFyIHRhcmdldCA9IHRzbGliLl9fcmVzdChyZXNvbHZlZCwgW1widHJhbnNpdGlvbkVuZFwiLCBcInRyYW5zaXRpb25cIl0pO1xuICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIHRhcmdldClcbiAgICAgICAgICAgICAgICB2YWx1ZXNba2V5XSA9IHRhcmdldFtrZXldO1xuICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIHRyYW5zaXRpb25FbmQpXG4gICAgICAgICAgICAgICAgdmFsdWVzW2tleV0gPSB0cmFuc2l0aW9uRW5kW2tleV07XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWVzO1xufVxuXG52YXIgc3ZnTW90aW9uQ29uZmlnID0ge1xuICAgIHVzZVZpc3VhbFN0YXRlOiBtYWtlVXNlVmlzdWFsU3RhdGUoe1xuICAgICAgICBzY3JhcGVNb3Rpb25WYWx1ZXNGcm9tUHJvcHM6IHNjcmFwZU1vdGlvblZhbHVlc0Zyb21Qcm9wcyxcbiAgICAgICAgY3JlYXRlUmVuZGVyU3RhdGU6IGNyZWF0ZVN2Z1JlbmRlclN0YXRlLFxuICAgICAgICBvbk1vdW50OiBmdW5jdGlvbiAocHJvcHMsIGluc3RhbmNlLCBfYSkge1xuICAgICAgICAgICAgdmFyIHJlbmRlclN0YXRlID0gX2EucmVuZGVyU3RhdGUsIGxhdGVzdFZhbHVlcyA9IF9hLmxhdGVzdFZhbHVlcztcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgcmVuZGVyU3RhdGUuZGltZW5zaW9ucyA9XG4gICAgICAgICAgICAgICAgICAgIHR5cGVvZiBpbnN0YW5jZS5nZXRCQm94ID09PVxuICAgICAgICAgICAgICAgICAgICAgICAgXCJmdW5jdGlvblwiXG4gICAgICAgICAgICAgICAgICAgICAgICA/IGluc3RhbmNlLmdldEJCb3goKVxuICAgICAgICAgICAgICAgICAgICAgICAgOiBpbnN0YW5jZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgLy8gTW9zdCBsaWtlbHkgdHJ5aW5nIHRvIG1lYXN1cmUgYW4gdW5yZW5kZXJlZCBlbGVtZW50IHVuZGVyIEZpcmVmb3hcbiAgICAgICAgICAgICAgICByZW5kZXJTdGF0ZS5kaW1lbnNpb25zID0ge1xuICAgICAgICAgICAgICAgICAgICB4OiAwLFxuICAgICAgICAgICAgICAgICAgICB5OiAwLFxuICAgICAgICAgICAgICAgICAgICB3aWR0aDogMCxcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAwLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaXNQYXRoKGluc3RhbmNlKSkge1xuICAgICAgICAgICAgICAgIHJlbmRlclN0YXRlLnRvdGFsUGF0aExlbmd0aCA9IGluc3RhbmNlLmdldFRvdGFsTGVuZ3RoKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBidWlsZFNWR0F0dHJzKHJlbmRlclN0YXRlLCBsYXRlc3RWYWx1ZXMsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB7IGVuYWJsZUhhcmR3YXJlQWNjZWxlcmF0aW9uOiBmYWxzZSB9LCBwcm9wcy50cmFuc2Zvcm1UZW1wbGF0ZSk7XG4gICAgICAgICAgICAvLyBUT0RPOiBSZXBsYWNlIHdpdGggZGlyZWN0IGFzc2lnbm1lbnRcbiAgICAgICAgICAgIHJlbmRlclNWRyhpbnN0YW5jZSwgcmVuZGVyU3RhdGUpO1xuICAgICAgICB9LFxuICAgIH0pLFxufTtcbmZ1bmN0aW9uIGlzUGF0aChlbGVtZW50KSB7XG4gICAgcmV0dXJuIGVsZW1lbnQudGFnTmFtZSA9PT0gXCJwYXRoXCI7XG59XG5cbnZhciBodG1sTW90aW9uQ29uZmlnID0ge1xuICAgIHVzZVZpc3VhbFN0YXRlOiBtYWtlVXNlVmlzdWFsU3RhdGUoe1xuICAgICAgICBzY3JhcGVNb3Rpb25WYWx1ZXNGcm9tUHJvcHM6IHNjcmFwZU1vdGlvblZhbHVlc0Zyb21Qcm9wcyQxLFxuICAgICAgICBjcmVhdGVSZW5kZXJTdGF0ZTogY3JlYXRlSHRtbFJlbmRlclN0YXRlLFxuICAgIH0pLFxufTtcblxuZnVuY3Rpb24gY3JlYXRlRG9tTW90aW9uQ29uZmlnKENvbXBvbmVudCwgX2EsIHByZWxvYWRlZEZlYXR1cmVzLCBjcmVhdGVWaXN1YWxFbGVtZW50KSB7XG4gICAgdmFyIF9iID0gX2EuZm9yd2FyZE1vdGlvblByb3BzLCBmb3J3YXJkTW90aW9uUHJvcHMgPSBfYiA9PT0gdm9pZCAwID8gZmFsc2UgOiBfYjtcbiAgICB2YXIgYmFzZUNvbmZpZyA9IGlzU1ZHQ29tcG9uZW50KENvbXBvbmVudClcbiAgICAgICAgPyBzdmdNb3Rpb25Db25maWdcbiAgICAgICAgOiBodG1sTW90aW9uQ29uZmlnO1xuICAgIHJldHVybiB0c2xpYi5fX2Fzc2lnbih0c2xpYi5fX2Fzc2lnbih7fSwgYmFzZUNvbmZpZyksIHsgcHJlbG9hZGVkRmVhdHVyZXM6IHByZWxvYWRlZEZlYXR1cmVzLCB1c2VSZW5kZXI6IGNyZWF0ZVVzZVJlbmRlcihmb3J3YXJkTW90aW9uUHJvcHMpLCBjcmVhdGVWaXN1YWxFbGVtZW50OiBjcmVhdGVWaXN1YWxFbGVtZW50LFxuICAgICAgICBDb21wb25lbnQ6IENvbXBvbmVudCB9KTtcbn1cblxudmFyIEFuaW1hdGlvblR5cGU7XG4oZnVuY3Rpb24gKEFuaW1hdGlvblR5cGUpIHtcbiAgICBBbmltYXRpb25UeXBlW1wiQW5pbWF0ZVwiXSA9IFwiYW5pbWF0ZVwiO1xuICAgIEFuaW1hdGlvblR5cGVbXCJIb3ZlclwiXSA9IFwid2hpbGVIb3ZlclwiO1xuICAgIEFuaW1hdGlvblR5cGVbXCJUYXBcIl0gPSBcIndoaWxlVGFwXCI7XG4gICAgQW5pbWF0aW9uVHlwZVtcIkRyYWdcIl0gPSBcIndoaWxlRHJhZ1wiO1xuICAgIEFuaW1hdGlvblR5cGVbXCJGb2N1c1wiXSA9IFwid2hpbGVGb2N1c1wiO1xuICAgIEFuaW1hdGlvblR5cGVbXCJFeGl0XCJdID0gXCJleGl0XCI7XG59KShBbmltYXRpb25UeXBlIHx8IChBbmltYXRpb25UeXBlID0ge30pKTtcblxuZnVuY3Rpb24gYWRkRG9tRXZlbnQodGFyZ2V0LCBldmVudE5hbWUsIGhhbmRsZXIsIG9wdGlvbnMpIHtcbiAgICB0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIGhhbmRsZXIsIG9wdGlvbnMpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7IHJldHVybiB0YXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIGhhbmRsZXIsIG9wdGlvbnMpOyB9O1xufVxuLyoqXG4gKiBBdHRhY2hlcyBhbiBldmVudCBsaXN0ZW5lciBkaXJlY3RseSB0byB0aGUgcHJvdmlkZWQgRE9NIGVsZW1lbnQuXG4gKlxuICogQnlwYXNzaW5nIFJlYWN0J3MgZXZlbnQgc3lzdGVtIGNhbiBiZSBkZXNpcmFibGUsIGZvciBpbnN0YW5jZSB3aGVuIGF0dGFjaGluZyBub24tcGFzc2l2ZVxuICogZXZlbnQgaGFuZGxlcnMuXG4gKlxuICogYGBganN4XG4gKiBjb25zdCByZWYgPSB1c2VSZWYobnVsbClcbiAqXG4gKiB1c2VEb21FdmVudChyZWYsICd3aGVlbCcsIG9uV2hlZWwsIHsgcGFzc2l2ZTogZmFsc2UgfSlcbiAqXG4gKiByZXR1cm4gPGRpdiByZWY9e3JlZn0gLz5cbiAqIGBgYFxuICpcbiAqIEBwYXJhbSByZWYgLSBSZWFjdC5SZWZPYmplY3QgdGhhdCdzIGJlZW4gcHJvdmlkZWQgdG8gdGhlIGVsZW1lbnQgeW91IHdhbnQgdG8gYmluZCB0aGUgbGlzdGVuZXIgdG8uXG4gKiBAcGFyYW0gZXZlbnROYW1lIC0gTmFtZSBvZiB0aGUgZXZlbnQgeW91IHdhbnQgbGlzdGVuIGZvci5cbiAqIEBwYXJhbSBoYW5kbGVyIC0gRnVuY3Rpb24gdG8gZmlyZSB3aGVuIHJlY2VpdmluZyB0aGUgZXZlbnQuXG4gKiBAcGFyYW0gb3B0aW9ucyAtIE9wdGlvbnMgdG8gcGFzcyB0byBgRXZlbnQuYWRkRXZlbnRMaXN0ZW5lcmAuXG4gKlxuICogQHB1YmxpY1xuICovXG5mdW5jdGlvbiB1c2VEb21FdmVudChyZWYsIGV2ZW50TmFtZSwgaGFuZGxlciwgb3B0aW9ucykge1xuICAgIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBlbGVtZW50ID0gcmVmLmN1cnJlbnQ7XG4gICAgICAgIGlmIChoYW5kbGVyICYmIGVsZW1lbnQpIHtcbiAgICAgICAgICAgIHJldHVybiBhZGREb21FdmVudChlbGVtZW50LCBldmVudE5hbWUsIGhhbmRsZXIsIG9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgfSwgW3JlZiwgZXZlbnROYW1lLCBoYW5kbGVyLCBvcHRpb25zXSk7XG59XG5cbi8qKlxuICpcbiAqIEBwYXJhbSBwcm9wc1xuICogQHBhcmFtIHJlZlxuICogQGludGVybmFsXG4gKi9cbmZ1bmN0aW9uIHVzZUZvY3VzR2VzdHVyZShfYSkge1xuICAgIHZhciB3aGlsZUZvY3VzID0gX2Eud2hpbGVGb2N1cywgdmlzdWFsRWxlbWVudCA9IF9hLnZpc3VhbEVsZW1lbnQ7XG4gICAgdmFyIG9uRm9jdXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgKF9hID0gdmlzdWFsRWxlbWVudC5hbmltYXRpb25TdGF0ZSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnNldEFjdGl2ZShBbmltYXRpb25UeXBlLkZvY3VzLCB0cnVlKTtcbiAgICB9O1xuICAgIHZhciBvbkJsdXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgKF9hID0gdmlzdWFsRWxlbWVudC5hbmltYXRpb25TdGF0ZSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnNldEFjdGl2ZShBbmltYXRpb25UeXBlLkZvY3VzLCBmYWxzZSk7XG4gICAgfTtcbiAgICB1c2VEb21FdmVudCh2aXN1YWxFbGVtZW50LCBcImZvY3VzXCIsIHdoaWxlRm9jdXMgPyBvbkZvY3VzIDogdW5kZWZpbmVkKTtcbiAgICB1c2VEb21FdmVudCh2aXN1YWxFbGVtZW50LCBcImJsdXJcIiwgd2hpbGVGb2N1cyA/IG9uQmx1ciA6IHVuZGVmaW5lZCk7XG59XG5cbmZ1bmN0aW9uIGlzTW91c2VFdmVudChldmVudCkge1xuICAgIC8vIFBvaW50ZXJFdmVudCBpbmhlcml0cyBmcm9tIE1vdXNlRXZlbnQgc28gd2UgY2FuJ3QgdXNlIGEgc3RyYWlnaHQgaW5zdGFuY2VvZiBjaGVjay5cbiAgICBpZiAodHlwZW9mIFBvaW50ZXJFdmVudCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBldmVudCBpbnN0YW5jZW9mIFBvaW50ZXJFdmVudCkge1xuICAgICAgICByZXR1cm4gISEoZXZlbnQucG9pbnRlclR5cGUgPT09IFwibW91c2VcIik7XG4gICAgfVxuICAgIHJldHVybiBldmVudCBpbnN0YW5jZW9mIE1vdXNlRXZlbnQ7XG59XG5mdW5jdGlvbiBpc1RvdWNoRXZlbnQoZXZlbnQpIHtcbiAgICB2YXIgaGFzVG91Y2hlcyA9ICEhZXZlbnQudG91Y2hlcztcbiAgICByZXR1cm4gaGFzVG91Y2hlcztcbn1cblxuLyoqXG4gKiBGaWx0ZXJzIG91dCBldmVudHMgbm90IGF0dGFjaGVkIHRvIHRoZSBwcmltYXJ5IHBvaW50ZXIgKGN1cnJlbnRseSBsZWZ0IG1vdXNlIGJ1dHRvbilcbiAqIEBwYXJhbSBldmVudEhhbmRsZXJcbiAqL1xuZnVuY3Rpb24gZmlsdGVyUHJpbWFyeVBvaW50ZXIoZXZlbnRIYW5kbGVyKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICB2YXIgaXNNb3VzZUV2ZW50ID0gZXZlbnQgaW5zdGFuY2VvZiBNb3VzZUV2ZW50O1xuICAgICAgICB2YXIgaXNQcmltYXJ5UG9pbnRlciA9ICFpc01vdXNlRXZlbnQgfHxcbiAgICAgICAgICAgIChpc01vdXNlRXZlbnQgJiYgZXZlbnQuYnV0dG9uID09PSAwKTtcbiAgICAgICAgaWYgKGlzUHJpbWFyeVBvaW50ZXIpIHtcbiAgICAgICAgICAgIGV2ZW50SGFuZGxlcihldmVudCk7XG4gICAgICAgIH1cbiAgICB9O1xufVxudmFyIGRlZmF1bHRQYWdlUG9pbnQgPSB7IHBhZ2VYOiAwLCBwYWdlWTogMCB9O1xuZnVuY3Rpb24gcG9pbnRGcm9tVG91Y2goZSwgcG9pbnRUeXBlKSB7XG4gICAgaWYgKHBvaW50VHlwZSA9PT0gdm9pZCAwKSB7IHBvaW50VHlwZSA9IFwicGFnZVwiOyB9XG4gICAgdmFyIHByaW1hcnlUb3VjaCA9IGUudG91Y2hlc1swXSB8fCBlLmNoYW5nZWRUb3VjaGVzWzBdO1xuICAgIHZhciBwb2ludCA9IHByaW1hcnlUb3VjaCB8fCBkZWZhdWx0UGFnZVBvaW50O1xuICAgIHJldHVybiB7XG4gICAgICAgIHg6IHBvaW50W3BvaW50VHlwZSArIFwiWFwiXSxcbiAgICAgICAgeTogcG9pbnRbcG9pbnRUeXBlICsgXCJZXCJdLFxuICAgIH07XG59XG5mdW5jdGlvbiBwb2ludEZyb21Nb3VzZShwb2ludCwgcG9pbnRUeXBlKSB7XG4gICAgaWYgKHBvaW50VHlwZSA9PT0gdm9pZCAwKSB7IHBvaW50VHlwZSA9IFwicGFnZVwiOyB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgeDogcG9pbnRbcG9pbnRUeXBlICsgXCJYXCJdLFxuICAgICAgICB5OiBwb2ludFtwb2ludFR5cGUgKyBcIllcIl0sXG4gICAgfTtcbn1cbmZ1bmN0aW9uIGV4dHJhY3RFdmVudEluZm8oZXZlbnQsIHBvaW50VHlwZSkge1xuICAgIGlmIChwb2ludFR5cGUgPT09IHZvaWQgMCkgeyBwb2ludFR5cGUgPSBcInBhZ2VcIjsgfVxuICAgIHJldHVybiB7XG4gICAgICAgIHBvaW50OiBpc1RvdWNoRXZlbnQoZXZlbnQpXG4gICAgICAgICAgICA/IHBvaW50RnJvbVRvdWNoKGV2ZW50LCBwb2ludFR5cGUpXG4gICAgICAgICAgICA6IHBvaW50RnJvbU1vdXNlKGV2ZW50LCBwb2ludFR5cGUpLFxuICAgIH07XG59XG5mdW5jdGlvbiBnZXRWaWV3cG9ydFBvaW50RnJvbUV2ZW50KGV2ZW50KSB7XG4gICAgcmV0dXJuIGV4dHJhY3RFdmVudEluZm8oZXZlbnQsIFwiY2xpZW50XCIpO1xufVxudmFyIHdyYXBIYW5kbGVyID0gZnVuY3Rpb24gKGhhbmRsZXIsIHNob3VsZEZpbHRlclByaW1hcnlQb2ludGVyKSB7XG4gICAgaWYgKHNob3VsZEZpbHRlclByaW1hcnlQb2ludGVyID09PSB2b2lkIDApIHsgc2hvdWxkRmlsdGVyUHJpbWFyeVBvaW50ZXIgPSBmYWxzZTsgfVxuICAgIHZhciBsaXN0ZW5lciA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICByZXR1cm4gaGFuZGxlcihldmVudCwgZXh0cmFjdEV2ZW50SW5mbyhldmVudCkpO1xuICAgIH07XG4gICAgcmV0dXJuIHNob3VsZEZpbHRlclByaW1hcnlQb2ludGVyXG4gICAgICAgID8gZmlsdGVyUHJpbWFyeVBvaW50ZXIobGlzdGVuZXIpXG4gICAgICAgIDogbGlzdGVuZXI7XG59O1xuXG4vLyBXZSBjaGVjayBmb3IgZXZlbnQgc3VwcG9ydCB2aWEgZnVuY3Rpb25zIGluIGNhc2UgdGhleSd2ZSBiZWVuIG1vY2tlZCBieSBhIHRlc3Rpbmcgc3VpdGUuXG52YXIgc3VwcG9ydHNQb2ludGVyRXZlbnRzID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBpc0Jyb3dzZXIgJiYgd2luZG93Lm9ucG9pbnRlcmRvd24gPT09IG51bGw7XG59O1xudmFyIHN1cHBvcnRzVG91Y2hFdmVudHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGlzQnJvd3NlciAmJiB3aW5kb3cub250b3VjaHN0YXJ0ID09PSBudWxsO1xufTtcbnZhciBzdXBwb3J0c01vdXNlRXZlbnRzID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBpc0Jyb3dzZXIgJiYgd2luZG93Lm9ubW91c2Vkb3duID09PSBudWxsO1xufTtcblxudmFyIG1vdXNlRXZlbnROYW1lcyA9IHtcbiAgICBwb2ludGVyZG93bjogXCJtb3VzZWRvd25cIixcbiAgICBwb2ludGVybW92ZTogXCJtb3VzZW1vdmVcIixcbiAgICBwb2ludGVydXA6IFwibW91c2V1cFwiLFxuICAgIHBvaW50ZXJjYW5jZWw6IFwibW91c2VjYW5jZWxcIixcbiAgICBwb2ludGVyb3ZlcjogXCJtb3VzZW92ZXJcIixcbiAgICBwb2ludGVyb3V0OiBcIm1vdXNlb3V0XCIsXG4gICAgcG9pbnRlcmVudGVyOiBcIm1vdXNlZW50ZXJcIixcbiAgICBwb2ludGVybGVhdmU6IFwibW91c2VsZWF2ZVwiLFxufTtcbnZhciB0b3VjaEV2ZW50TmFtZXMgPSB7XG4gICAgcG9pbnRlcmRvd246IFwidG91Y2hzdGFydFwiLFxuICAgIHBvaW50ZXJtb3ZlOiBcInRvdWNobW92ZVwiLFxuICAgIHBvaW50ZXJ1cDogXCJ0b3VjaGVuZFwiLFxuICAgIHBvaW50ZXJjYW5jZWw6IFwidG91Y2hjYW5jZWxcIixcbn07XG5mdW5jdGlvbiBnZXRQb2ludGVyRXZlbnROYW1lKG5hbWUpIHtcbiAgICBpZiAoc3VwcG9ydHNQb2ludGVyRXZlbnRzKCkpIHtcbiAgICAgICAgcmV0dXJuIG5hbWU7XG4gICAgfVxuICAgIGVsc2UgaWYgKHN1cHBvcnRzVG91Y2hFdmVudHMoKSkge1xuICAgICAgICByZXR1cm4gdG91Y2hFdmVudE5hbWVzW25hbWVdO1xuICAgIH1cbiAgICBlbHNlIGlmIChzdXBwb3J0c01vdXNlRXZlbnRzKCkpIHtcbiAgICAgICAgcmV0dXJuIG1vdXNlRXZlbnROYW1lc1tuYW1lXTtcbiAgICB9XG4gICAgcmV0dXJuIG5hbWU7XG59XG5mdW5jdGlvbiBhZGRQb2ludGVyRXZlbnQodGFyZ2V0LCBldmVudE5hbWUsIGhhbmRsZXIsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gYWRkRG9tRXZlbnQodGFyZ2V0LCBnZXRQb2ludGVyRXZlbnROYW1lKGV2ZW50TmFtZSksIHdyYXBIYW5kbGVyKGhhbmRsZXIsIGV2ZW50TmFtZSA9PT0gXCJwb2ludGVyZG93blwiKSwgb3B0aW9ucyk7XG59XG5mdW5jdGlvbiB1c2VQb2ludGVyRXZlbnQocmVmLCBldmVudE5hbWUsIGhhbmRsZXIsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gdXNlRG9tRXZlbnQocmVmLCBnZXRQb2ludGVyRXZlbnROYW1lKGV2ZW50TmFtZSksIGhhbmRsZXIgJiYgd3JhcEhhbmRsZXIoaGFuZGxlciwgZXZlbnROYW1lID09PSBcInBvaW50ZXJkb3duXCIpLCBvcHRpb25zKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlTG9jayhuYW1lKSB7XG4gICAgdmFyIGxvY2sgPSBudWxsO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBvcGVuTG9jayA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGxvY2sgPSBudWxsO1xuICAgICAgICB9O1xuICAgICAgICBpZiAobG9jayA9PT0gbnVsbCkge1xuICAgICAgICAgICAgbG9jayA9IG5hbWU7XG4gICAgICAgICAgICByZXR1cm4gb3BlbkxvY2s7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH07XG59XG52YXIgZ2xvYmFsSG9yaXpvbnRhbExvY2sgPSBjcmVhdGVMb2NrKFwiZHJhZ0hvcml6b250YWxcIik7XG52YXIgZ2xvYmFsVmVydGljYWxMb2NrID0gY3JlYXRlTG9jayhcImRyYWdWZXJ0aWNhbFwiKTtcbmZ1bmN0aW9uIGdldEdsb2JhbExvY2soZHJhZykge1xuICAgIHZhciBsb2NrID0gZmFsc2U7XG4gICAgaWYgKGRyYWcgPT09IFwieVwiKSB7XG4gICAgICAgIGxvY2sgPSBnbG9iYWxWZXJ0aWNhbExvY2soKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoZHJhZyA9PT0gXCJ4XCIpIHtcbiAgICAgICAgbG9jayA9IGdsb2JhbEhvcml6b250YWxMb2NrKCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB2YXIgb3Blbkhvcml6b250YWxfMSA9IGdsb2JhbEhvcml6b250YWxMb2NrKCk7XG4gICAgICAgIHZhciBvcGVuVmVydGljYWxfMSA9IGdsb2JhbFZlcnRpY2FsTG9jaygpO1xuICAgICAgICBpZiAob3Blbkhvcml6b250YWxfMSAmJiBvcGVuVmVydGljYWxfMSkge1xuICAgICAgICAgICAgbG9jayA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBvcGVuSG9yaXpvbnRhbF8xKCk7XG4gICAgICAgICAgICAgICAgb3BlblZlcnRpY2FsXzEoKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBSZWxlYXNlIHRoZSBsb2NrcyBiZWNhdXNlIHdlIGRvbid0IHVzZSB0aGVtXG4gICAgICAgICAgICBpZiAob3Blbkhvcml6b250YWxfMSlcbiAgICAgICAgICAgICAgICBvcGVuSG9yaXpvbnRhbF8xKCk7XG4gICAgICAgICAgICBpZiAob3BlblZlcnRpY2FsXzEpXG4gICAgICAgICAgICAgICAgb3BlblZlcnRpY2FsXzEoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbG9jaztcbn1cbmZ1bmN0aW9uIGlzRHJhZ0FjdGl2ZSgpIHtcbiAgICAvLyBDaGVjayB0aGUgZ2VzdHVyZSBsb2NrIC0gaWYgd2UgZ2V0IGl0LCBpdCBtZWFucyBubyBkcmFnIGdlc3R1cmUgaXMgYWN0aXZlXG4gICAgLy8gYW5kIHdlIGNhbiBzYWZlbHkgZmlyZSB0aGUgdGFwIGdlc3R1cmUuXG4gICAgdmFyIG9wZW5HZXN0dXJlTG9jayA9IGdldEdsb2JhbExvY2sodHJ1ZSk7XG4gICAgaWYgKCFvcGVuR2VzdHVyZUxvY2spXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIG9wZW5HZXN0dXJlTG9jaygpO1xuICAgIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlSG92ZXJFdmVudCh2aXN1YWxFbGVtZW50LCBpc0FjdGl2ZSwgY2FsbGJhY2spIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGV2ZW50LCBpbmZvKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgaWYgKCFpc01vdXNlRXZlbnQoZXZlbnQpIHx8IGlzRHJhZ0FjdGl2ZSgpKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBjYWxsYmFjayA9PT0gbnVsbCB8fCBjYWxsYmFjayA9PT0gdm9pZCAwID8gdm9pZCAwIDogY2FsbGJhY2soZXZlbnQsIGluZm8pO1xuICAgICAgICAoX2EgPSB2aXN1YWxFbGVtZW50LmFuaW1hdGlvblN0YXRlKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Euc2V0QWN0aXZlKEFuaW1hdGlvblR5cGUuSG92ZXIsIGlzQWN0aXZlKTtcbiAgICB9O1xufVxuZnVuY3Rpb24gdXNlSG92ZXJHZXN0dXJlKF9hKSB7XG4gICAgdmFyIG9uSG92ZXJTdGFydCA9IF9hLm9uSG92ZXJTdGFydCwgb25Ib3ZlckVuZCA9IF9hLm9uSG92ZXJFbmQsIHdoaWxlSG92ZXIgPSBfYS53aGlsZUhvdmVyLCB2aXN1YWxFbGVtZW50ID0gX2EudmlzdWFsRWxlbWVudDtcbiAgICB1c2VQb2ludGVyRXZlbnQodmlzdWFsRWxlbWVudCwgXCJwb2ludGVyZW50ZXJcIiwgb25Ib3ZlclN0YXJ0IHx8IHdoaWxlSG92ZXJcbiAgICAgICAgPyBjcmVhdGVIb3ZlckV2ZW50KHZpc3VhbEVsZW1lbnQsIHRydWUsIG9uSG92ZXJTdGFydClcbiAgICAgICAgOiB1bmRlZmluZWQpO1xuICAgIHVzZVBvaW50ZXJFdmVudCh2aXN1YWxFbGVtZW50LCBcInBvaW50ZXJsZWF2ZVwiLCBvbkhvdmVyRW5kIHx8IHdoaWxlSG92ZXJcbiAgICAgICAgPyBjcmVhdGVIb3ZlckV2ZW50KHZpc3VhbEVsZW1lbnQsIGZhbHNlLCBvbkhvdmVyRW5kKVxuICAgICAgICA6IHVuZGVmaW5lZCk7XG59XG5cbi8qKlxuICogUmVjdXJzaXZlbHkgdHJhdmVyc2UgdXAgdGhlIHRyZWUgdG8gY2hlY2sgd2hldGhlciB0aGUgcHJvdmlkZWQgY2hpbGQgbm9kZVxuICogaXMgdGhlIHBhcmVudCBvciBhIGRlc2NlbmRhbnQgb2YgaXQuXG4gKlxuICogQHBhcmFtIHBhcmVudCAtIEVsZW1lbnQgdG8gZmluZFxuICogQHBhcmFtIGNoaWxkIC0gRWxlbWVudCB0byB0ZXN0IGFnYWluc3QgcGFyZW50XG4gKi9cbnZhciBpc05vZGVPckNoaWxkID0gZnVuY3Rpb24gKHBhcmVudCwgY2hpbGQpIHtcbiAgICBpZiAoIWNoaWxkKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgZWxzZSBpZiAocGFyZW50ID09PSBjaGlsZCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBpc05vZGVPckNoaWxkKHBhcmVudCwgY2hpbGQucGFyZW50RWxlbWVudCk7XG4gICAgfVxufTtcblxuZnVuY3Rpb24gdXNlVW5tb3VudEVmZmVjdChjYWxsYmFjaykge1xuICAgIHJldHVybiBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkgeyByZXR1cm4gZnVuY3Rpb24gKCkgeyByZXR1cm4gY2FsbGJhY2soKTsgfTsgfSwgW10pO1xufVxuXG4vKipcbiAqIEBwYXJhbSBoYW5kbGVycyAtXG4gKiBAaW50ZXJuYWxcbiAqL1xuZnVuY3Rpb24gdXNlVGFwR2VzdHVyZShfYSkge1xuICAgIHZhciBvblRhcCA9IF9hLm9uVGFwLCBvblRhcFN0YXJ0ID0gX2Eub25UYXBTdGFydCwgb25UYXBDYW5jZWwgPSBfYS5vblRhcENhbmNlbCwgd2hpbGVUYXAgPSBfYS53aGlsZVRhcCwgdmlzdWFsRWxlbWVudCA9IF9hLnZpc3VhbEVsZW1lbnQ7XG4gICAgdmFyIGhhc1ByZXNzTGlzdGVuZXJzID0gb25UYXAgfHwgb25UYXBTdGFydCB8fCBvblRhcENhbmNlbCB8fCB3aGlsZVRhcDtcbiAgICB2YXIgaXNQcmVzc2luZyA9IFJlYWN0LnVzZVJlZihmYWxzZSk7XG4gICAgdmFyIGNhbmNlbFBvaW50ZXJFbmRMaXN0ZW5lcnMgPSBSZWFjdC51c2VSZWYobnVsbCk7XG4gICAgZnVuY3Rpb24gcmVtb3ZlUG9pbnRlckVuZExpc3RlbmVyKCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIChfYSA9IGNhbmNlbFBvaW50ZXJFbmRMaXN0ZW5lcnMuY3VycmVudCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmNhbGwoY2FuY2VsUG9pbnRlckVuZExpc3RlbmVycyk7XG4gICAgICAgIGNhbmNlbFBvaW50ZXJFbmRMaXN0ZW5lcnMuY3VycmVudCA9IG51bGw7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGNoZWNrUG9pbnRlckVuZCgpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICByZW1vdmVQb2ludGVyRW5kTGlzdGVuZXIoKTtcbiAgICAgICAgaXNQcmVzc2luZy5jdXJyZW50ID0gZmFsc2U7XG4gICAgICAgIChfYSA9IHZpc3VhbEVsZW1lbnQuYW5pbWF0aW9uU3RhdGUpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5zZXRBY3RpdmUoQW5pbWF0aW9uVHlwZS5UYXAsIGZhbHNlKTtcbiAgICAgICAgcmV0dXJuICFpc0RyYWdBY3RpdmUoKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gb25Qb2ludGVyVXAoZXZlbnQsIGluZm8pIHtcbiAgICAgICAgaWYgKCFjaGVja1BvaW50ZXJFbmQoKSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFdlIG9ubHkgY291bnQgdGhpcyBhcyBhIHRhcCBnZXN0dXJlIGlmIHRoZSBldmVudC50YXJnZXQgaXMgdGhlIHNhbWVcbiAgICAgICAgICogYXMsIG9yIGEgY2hpbGQgb2YsIHRoaXMgY29tcG9uZW50J3MgZWxlbWVudFxuICAgICAgICAgKi9cbiAgICAgICAgIWlzTm9kZU9yQ2hpbGQodmlzdWFsRWxlbWVudC5nZXRJbnN0YW5jZSgpLCBldmVudC50YXJnZXQpXG4gICAgICAgICAgICA/IG9uVGFwQ2FuY2VsID09PSBudWxsIHx8IG9uVGFwQ2FuY2VsID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvblRhcENhbmNlbChldmVudCwgaW5mbylcbiAgICAgICAgICAgIDogb25UYXAgPT09IG51bGwgfHwgb25UYXAgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9uVGFwKGV2ZW50LCBpbmZvKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gb25Qb2ludGVyQ2FuY2VsKGV2ZW50LCBpbmZvKSB7XG4gICAgICAgIGlmICghY2hlY2tQb2ludGVyRW5kKCkpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIG9uVGFwQ2FuY2VsID09PSBudWxsIHx8IG9uVGFwQ2FuY2VsID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvblRhcENhbmNlbChldmVudCwgaW5mbyk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIG9uUG9pbnRlckRvd24oZXZlbnQsIGluZm8pIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICByZW1vdmVQb2ludGVyRW5kTGlzdGVuZXIoKTtcbiAgICAgICAgaWYgKGlzUHJlc3NpbmcuY3VycmVudClcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgaXNQcmVzc2luZy5jdXJyZW50ID0gdHJ1ZTtcbiAgICAgICAgY2FuY2VsUG9pbnRlckVuZExpc3RlbmVycy5jdXJyZW50ID0gcG9wbW90aW9uLnBpcGUoYWRkUG9pbnRlckV2ZW50KHdpbmRvdywgXCJwb2ludGVydXBcIiwgb25Qb2ludGVyVXApLCBhZGRQb2ludGVyRXZlbnQod2luZG93LCBcInBvaW50ZXJjYW5jZWxcIiwgb25Qb2ludGVyQ2FuY2VsKSk7XG4gICAgICAgIG9uVGFwU3RhcnQgPT09IG51bGwgfHwgb25UYXBTdGFydCA9PT0gdm9pZCAwID8gdm9pZCAwIDogb25UYXBTdGFydChldmVudCwgaW5mbyk7XG4gICAgICAgIChfYSA9IHZpc3VhbEVsZW1lbnQuYW5pbWF0aW9uU3RhdGUpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5zZXRBY3RpdmUoQW5pbWF0aW9uVHlwZS5UYXAsIHRydWUpO1xuICAgIH1cbiAgICB1c2VQb2ludGVyRXZlbnQodmlzdWFsRWxlbWVudCwgXCJwb2ludGVyZG93blwiLCBoYXNQcmVzc0xpc3RlbmVycyA/IG9uUG9pbnRlckRvd24gOiB1bmRlZmluZWQpO1xuICAgIHVzZVVubW91bnRFZmZlY3QocmVtb3ZlUG9pbnRlckVuZExpc3RlbmVyKTtcbn1cblxudmFyIG1ha2VSZW5kZXJsZXNzQ29tcG9uZW50ID0gZnVuY3Rpb24gKGhvb2spIHsgcmV0dXJuIGZ1bmN0aW9uIChwcm9wcykge1xuICAgIGhvb2socHJvcHMpO1xuICAgIHJldHVybiBudWxsO1xufTsgfTtcblxudmFyIGdlc3R1cmVBbmltYXRpb25zID0ge1xuICAgIHRhcDogbWFrZVJlbmRlcmxlc3NDb21wb25lbnQodXNlVGFwR2VzdHVyZSksXG4gICAgZm9jdXM6IG1ha2VSZW5kZXJsZXNzQ29tcG9uZW50KHVzZUZvY3VzR2VzdHVyZSksXG4gICAgaG92ZXI6IG1ha2VSZW5kZXJsZXNzQ29tcG9uZW50KHVzZUhvdmVyR2VzdHVyZSksXG59O1xuXG5mdW5jdGlvbiBzaGFsbG93Q29tcGFyZShuZXh0LCBwcmV2KSB7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KHByZXYpKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgdmFyIHByZXZMZW5ndGggPSBwcmV2Lmxlbmd0aDtcbiAgICBpZiAocHJldkxlbmd0aCAhPT0gbmV4dC5sZW5ndGgpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByZXZMZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAocHJldltpXSAhPT0gbmV4dFtpXSlcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59XG5cbi8qKlxuICogQ29udmVydHMgc2Vjb25kcyB0byBtaWxsaXNlY29uZHNcbiAqXG4gKiBAcGFyYW0gc2Vjb25kcyAtIFRpbWUgaW4gc2Vjb25kcy5cbiAqIEByZXR1cm4gbWlsbGlzZWNvbmRzIC0gQ29udmVydGVkIHRpbWUgaW4gbWlsbGlzZWNvbmRzLlxuICovXG52YXIgc2Vjb25kc1RvTWlsbGlzZWNvbmRzID0gZnVuY3Rpb24gKHNlY29uZHMpIHsgcmV0dXJuIHNlY29uZHMgKiAxMDAwOyB9O1xuXG52YXIgZWFzaW5nTG9va3VwID0ge1xuICAgIGxpbmVhcjogcG9wbW90aW9uLmxpbmVhcixcbiAgICBlYXNlSW46IHBvcG1vdGlvbi5lYXNlSW4sXG4gICAgZWFzZUluT3V0OiBwb3Btb3Rpb24uZWFzZUluT3V0LFxuICAgIGVhc2VPdXQ6IHBvcG1vdGlvbi5lYXNlT3V0LFxuICAgIGNpcmNJbjogcG9wbW90aW9uLmNpcmNJbixcbiAgICBjaXJjSW5PdXQ6IHBvcG1vdGlvbi5jaXJjSW5PdXQsXG4gICAgY2lyY091dDogcG9wbW90aW9uLmNpcmNPdXQsXG4gICAgYmFja0luOiBwb3Btb3Rpb24uYmFja0luLFxuICAgIGJhY2tJbk91dDogcG9wbW90aW9uLmJhY2tJbk91dCxcbiAgICBiYWNrT3V0OiBwb3Btb3Rpb24uYmFja091dCxcbiAgICBhbnRpY2lwYXRlOiBwb3Btb3Rpb24uYW50aWNpcGF0ZSxcbiAgICBib3VuY2VJbjogcG9wbW90aW9uLmJvdW5jZUluLFxuICAgIGJvdW5jZUluT3V0OiBwb3Btb3Rpb24uYm91bmNlSW5PdXQsXG4gICAgYm91bmNlT3V0OiBwb3Btb3Rpb24uYm91bmNlT3V0LFxufTtcbnZhciBlYXNpbmdEZWZpbml0aW9uVG9GdW5jdGlvbiA9IGZ1bmN0aW9uIChkZWZpbml0aW9uKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZGVmaW5pdGlvbikpIHtcbiAgICAgICAgLy8gSWYgY3ViaWMgYmV6aWVyIGRlZmluaXRpb24sIGNyZWF0ZSBiZXppZXIgY3VydmVcbiAgICAgICAgaGV5TGlzdGVuLmludmFyaWFudChkZWZpbml0aW9uLmxlbmd0aCA9PT0gNCwgXCJDdWJpYyBiZXppZXIgYXJyYXlzIG11c3QgY29udGFpbiBmb3VyIG51bWVyaWNhbCB2YWx1ZXMuXCIpO1xuICAgICAgICB2YXIgX2EgPSB0c2xpYi5fX3JlYWQoZGVmaW5pdGlvbiwgNCksIHgxID0gX2FbMF0sIHkxID0gX2FbMV0sIHgyID0gX2FbMl0sIHkyID0gX2FbM107XG4gICAgICAgIHJldHVybiBwb3Btb3Rpb24uY3ViaWNCZXppZXIoeDEsIHkxLCB4MiwgeTIpO1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlb2YgZGVmaW5pdGlvbiA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAvLyBFbHNlIGxvb2t1cCBmcm9tIHRhYmxlXG4gICAgICAgIGhleUxpc3Rlbi5pbnZhcmlhbnQoZWFzaW5nTG9va3VwW2RlZmluaXRpb25dICE9PSB1bmRlZmluZWQsIFwiSW52YWxpZCBlYXNpbmcgdHlwZSAnXCIgKyBkZWZpbml0aW9uICsgXCInXCIpO1xuICAgICAgICByZXR1cm4gZWFzaW5nTG9va3VwW2RlZmluaXRpb25dO1xuICAgIH1cbiAgICByZXR1cm4gZGVmaW5pdGlvbjtcbn07XG52YXIgaXNFYXNpbmdBcnJheSA9IGZ1bmN0aW9uIChlYXNlKSB7XG4gICAgcmV0dXJuIEFycmF5LmlzQXJyYXkoZWFzZSkgJiYgdHlwZW9mIGVhc2VbMF0gIT09IFwibnVtYmVyXCI7XG59O1xuXG4vKipcbiAqIENoZWNrIGlmIGEgdmFsdWUgaXMgYW5pbWF0YWJsZS4gRXhhbXBsZXM6XG4gKlxuICog4pyFOiAxMDAsIFwiMTAwcHhcIiwgXCIjZmZmXCJcbiAqIOKdjDogXCJibG9ja1wiLCBcInVybCgyLmpwZylcIlxuICogQHBhcmFtIHZhbHVlXG4gKlxuICogQGludGVybmFsXG4gKi9cbnZhciBpc0FuaW1hdGFibGUgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgIC8vIElmIHRoZSBsaXN0IG9mIGtleXMgdGF0IG1pZ2h0IGJlIG5vbi1hbmltYXRhYmxlIGdyb3dzLCByZXBsYWNlIHdpdGggU2V0XG4gICAgaWYgKGtleSA9PT0gXCJ6SW5kZXhcIilcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIC8vIElmIGl0J3MgYSBudW1iZXIgb3IgYSBrZXlmcmFtZXMgYXJyYXksIHdlIGNhbiBhbmltYXRlIGl0LiBXZSBtaWdodCBhdCBzb21lIHBvaW50XG4gICAgLy8gbmVlZCB0byBkbyBhIGRlZXAgaXNBbmltYXRhYmxlIGNoZWNrIG9mIGtleWZyYW1lcywgb3IgbGV0IFBvcG1vdGlvbiBoYW5kbGUgdGhpcyxcbiAgICAvLyBidXQgZm9yIG5vdyBsZXRzIGxlYXZlIGl0IGxpa2UgdGhpcyBmb3IgcGVyZm9ybWFuY2UgcmVhc29uc1xuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwibnVtYmVyXCIgfHwgQXJyYXkuaXNBcnJheSh2YWx1ZSkpXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiYgLy8gSXQncyBhbmltYXRhYmxlIGlmIHdlIGhhdmUgYSBzdHJpbmdcbiAgICAgICAgc3R5bGVWYWx1ZVR5cGVzLmNvbXBsZXgudGVzdCh2YWx1ZSkgJiYgLy8gQW5kIGl0IGNvbnRhaW5zIG51bWJlcnMgYW5kL29yIGNvbG9yc1xuICAgICAgICAhdmFsdWUuc3RhcnRzV2l0aChcInVybChcIikgLy8gVW5sZXNzIGl0IHN0YXJ0cyB3aXRoIFwidXJsKFwiXG4gICAgKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59O1xuXG52YXIgdW5kZXJEYW1wZWRTcHJpbmcgPSBmdW5jdGlvbiAoKSB7IHJldHVybiAoe1xuICAgIHR5cGU6IFwic3ByaW5nXCIsXG4gICAgc3RpZmZuZXNzOiA1MDAsXG4gICAgZGFtcGluZzogMjUsXG4gICAgcmVzdERlbHRhOiAwLjUsXG4gICAgcmVzdFNwZWVkOiAxMCxcbn0pOyB9O1xudmFyIGNyaXRpY2FsbHlEYW1wZWRTcHJpbmcgPSBmdW5jdGlvbiAodG8pIHsgcmV0dXJuICh7XG4gICAgdHlwZTogXCJzcHJpbmdcIixcbiAgICBzdGlmZm5lc3M6IDU1MCxcbiAgICBkYW1waW5nOiB0byA9PT0gMCA/IDIgKiBNYXRoLnNxcnQoNTUwKSA6IDMwLFxuICAgIHJlc3REZWx0YTogMC4wMSxcbiAgICByZXN0U3BlZWQ6IDEwLFxufSk7IH07XG52YXIgbGluZWFyVHdlZW4gPSBmdW5jdGlvbiAoKSB7IHJldHVybiAoe1xuICAgIHR5cGU6IFwia2V5ZnJhbWVzXCIsXG4gICAgZWFzZTogXCJsaW5lYXJcIixcbiAgICBkdXJhdGlvbjogMC4zLFxufSk7IH07XG52YXIga2V5ZnJhbWVzID0gZnVuY3Rpb24gKHZhbHVlcykgeyByZXR1cm4gKHtcbiAgICB0eXBlOiBcImtleWZyYW1lc1wiLFxuICAgIGR1cmF0aW9uOiAwLjgsXG4gICAgdmFsdWVzOiB2YWx1ZXMsXG59KTsgfTtcbnZhciBkZWZhdWx0VHJhbnNpdGlvbnMgPSB7XG4gICAgeDogdW5kZXJEYW1wZWRTcHJpbmcsXG4gICAgeTogdW5kZXJEYW1wZWRTcHJpbmcsXG4gICAgejogdW5kZXJEYW1wZWRTcHJpbmcsXG4gICAgcm90YXRlOiB1bmRlckRhbXBlZFNwcmluZyxcbiAgICByb3RhdGVYOiB1bmRlckRhbXBlZFNwcmluZyxcbiAgICByb3RhdGVZOiB1bmRlckRhbXBlZFNwcmluZyxcbiAgICByb3RhdGVaOiB1bmRlckRhbXBlZFNwcmluZyxcbiAgICBzY2FsZVg6IGNyaXRpY2FsbHlEYW1wZWRTcHJpbmcsXG4gICAgc2NhbGVZOiBjcml0aWNhbGx5RGFtcGVkU3ByaW5nLFxuICAgIHNjYWxlOiBjcml0aWNhbGx5RGFtcGVkU3ByaW5nLFxuICAgIG9wYWNpdHk6IGxpbmVhclR3ZWVuLFxuICAgIGJhY2tncm91bmRDb2xvcjogbGluZWFyVHdlZW4sXG4gICAgY29sb3I6IGxpbmVhclR3ZWVuLFxuICAgIGRlZmF1bHQ6IGNyaXRpY2FsbHlEYW1wZWRTcHJpbmcsXG59O1xudmFyIGdldERlZmF1bHRUcmFuc2l0aW9uID0gZnVuY3Rpb24gKHZhbHVlS2V5LCB0bykge1xuICAgIHZhciB0cmFuc2l0aW9uRmFjdG9yeTtcbiAgICBpZiAoaXNLZXlmcmFtZXNUYXJnZXQodG8pKSB7XG4gICAgICAgIHRyYW5zaXRpb25GYWN0b3J5ID0ga2V5ZnJhbWVzO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdHJhbnNpdGlvbkZhY3RvcnkgPVxuICAgICAgICAgICAgZGVmYXVsdFRyYW5zaXRpb25zW3ZhbHVlS2V5XSB8fCBkZWZhdWx0VHJhbnNpdGlvbnMuZGVmYXVsdDtcbiAgICB9XG4gICAgcmV0dXJuIHRzbGliLl9fYXNzaWduKHsgdG86IHRvIH0sIHRyYW5zaXRpb25GYWN0b3J5KHRvKSk7XG59O1xuXG4vKipcbiAqIEEgbWFwIG9mIGRlZmF1bHQgdmFsdWUgdHlwZXMgZm9yIGNvbW1vbiB2YWx1ZXNcbiAqL1xudmFyIGRlZmF1bHRWYWx1ZVR5cGVzID0gdHNsaWIuX19hc3NpZ24odHNsaWIuX19hc3NpZ24oe30sIG51bWJlclZhbHVlVHlwZXMpLCB7IFxuICAgIC8vIENvbG9yIHByb3BzXG4gICAgY29sb3I6IHN0eWxlVmFsdWVUeXBlcy5jb2xvciwgYmFja2dyb3VuZENvbG9yOiBzdHlsZVZhbHVlVHlwZXMuY29sb3IsIG91dGxpbmVDb2xvcjogc3R5bGVWYWx1ZVR5cGVzLmNvbG9yLCBmaWxsOiBzdHlsZVZhbHVlVHlwZXMuY29sb3IsIHN0cm9rZTogc3R5bGVWYWx1ZVR5cGVzLmNvbG9yLCBcbiAgICAvLyBCb3JkZXIgcHJvcHNcbiAgICBib3JkZXJDb2xvcjogc3R5bGVWYWx1ZVR5cGVzLmNvbG9yLCBib3JkZXJUb3BDb2xvcjogc3R5bGVWYWx1ZVR5cGVzLmNvbG9yLCBib3JkZXJSaWdodENvbG9yOiBzdHlsZVZhbHVlVHlwZXMuY29sb3IsIGJvcmRlckJvdHRvbUNvbG9yOiBzdHlsZVZhbHVlVHlwZXMuY29sb3IsIGJvcmRlckxlZnRDb2xvcjogc3R5bGVWYWx1ZVR5cGVzLmNvbG9yLCBmaWx0ZXI6IHN0eWxlVmFsdWVUeXBlcy5maWx0ZXIsIFdlYmtpdEZpbHRlcjogc3R5bGVWYWx1ZVR5cGVzLmZpbHRlciB9KTtcbi8qKlxuICogR2V0cyB0aGUgZGVmYXVsdCBWYWx1ZVR5cGUgZm9yIHRoZSBwcm92aWRlZCB2YWx1ZSBrZXlcbiAqL1xudmFyIGdldERlZmF1bHRWYWx1ZVR5cGUgPSBmdW5jdGlvbiAoa2V5KSB7IHJldHVybiBkZWZhdWx0VmFsdWVUeXBlc1trZXldOyB9O1xuXG5mdW5jdGlvbiBnZXRBbmltYXRhYmxlTm9uZShrZXksIHZhbHVlKSB7XG4gICAgdmFyIF9hO1xuICAgIHZhciBkZWZhdWx0VmFsdWVUeXBlID0gZ2V0RGVmYXVsdFZhbHVlVHlwZShrZXkpO1xuICAgIGlmIChkZWZhdWx0VmFsdWVUeXBlICE9PSBzdHlsZVZhbHVlVHlwZXMuZmlsdGVyKVxuICAgICAgICBkZWZhdWx0VmFsdWVUeXBlID0gc3R5bGVWYWx1ZVR5cGVzLmNvbXBsZXg7XG4gICAgLy8gSWYgdmFsdWUgaXMgbm90IHJlY29nbmlzZWQgYXMgYW5pbWF0YWJsZSwgaWUgXCJub25lXCIsIGNyZWF0ZSBhbiBhbmltYXRhYmxlIHZlcnNpb24gb3JpZ2luIGJhc2VkIG9uIHRoZSB0YXJnZXRcbiAgICByZXR1cm4gKF9hID0gZGVmYXVsdFZhbHVlVHlwZS5nZXRBbmltYXRhYmxlTm9uZSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmNhbGwoZGVmYXVsdFZhbHVlVHlwZSwgdmFsdWUpO1xufVxuXG4vKipcbiAqIERlY2lkZSB3aGV0aGVyIGEgdHJhbnNpdGlvbiBpcyBkZWZpbmVkIG9uIGEgZ2l2ZW4gVHJhbnNpdGlvbi5cbiAqIFRoaXMgZmlsdGVycyBvdXQgb3JjaGVzdHJhdGlvbiBvcHRpb25zIGFuZCByZXR1cm5zIHRydWVcbiAqIGlmIGFueSBvcHRpb25zIGFyZSBsZWZ0LlxuICovXG5mdW5jdGlvbiBpc1RyYW5zaXRpb25EZWZpbmVkKF9hKSB7XG4gICAgX2Eud2hlbjsgX2EuZGVsYXk7IF9hLmRlbGF5Q2hpbGRyZW47IF9hLnN0YWdnZXJDaGlsZHJlbjsgX2Euc3RhZ2dlckRpcmVjdGlvbjsgX2EucmVwZWF0OyBfYS5yZXBlYXRUeXBlOyBfYS5yZXBlYXREZWxheTsgX2EuZnJvbTsgdmFyIHRyYW5zaXRpb24gPSB0c2xpYi5fX3Jlc3QoX2EsIFtcIndoZW5cIiwgXCJkZWxheVwiLCBcImRlbGF5Q2hpbGRyZW5cIiwgXCJzdGFnZ2VyQ2hpbGRyZW5cIiwgXCJzdGFnZ2VyRGlyZWN0aW9uXCIsIFwicmVwZWF0XCIsIFwicmVwZWF0VHlwZVwiLCBcInJlcGVhdERlbGF5XCIsIFwiZnJvbVwiXSk7XG4gICAgcmV0dXJuICEhT2JqZWN0LmtleXModHJhbnNpdGlvbikubGVuZ3RoO1xufVxudmFyIGxlZ2FjeVJlcGVhdFdhcm5pbmcgPSBmYWxzZTtcbi8qKlxuICogQ29udmVydCBGcmFtZXIgTW90aW9uJ3MgVHJhbnNpdGlvbiB0eXBlIGludG8gUG9wbW90aW9uLWNvbXBhdGlibGUgb3B0aW9ucy5cbiAqL1xuZnVuY3Rpb24gY29udmVydFRyYW5zaXRpb25Ub0FuaW1hdGlvbk9wdGlvbnMoX2EpIHtcbiAgICB2YXIgZWFzZSA9IF9hLmVhc2UsIHRpbWVzID0gX2EudGltZXMsIHlveW8gPSBfYS55b3lvLCBmbGlwID0gX2EuZmxpcCwgbG9vcCA9IF9hLmxvb3AsIHRyYW5zaXRpb24gPSB0c2xpYi5fX3Jlc3QoX2EsIFtcImVhc2VcIiwgXCJ0aW1lc1wiLCBcInlveW9cIiwgXCJmbGlwXCIsIFwibG9vcFwiXSk7XG4gICAgdmFyIG9wdGlvbnMgPSB0c2xpYi5fX2Fzc2lnbih7fSwgdHJhbnNpdGlvbik7XG4gICAgaWYgKHRpbWVzKVxuICAgICAgICBvcHRpb25zW1wib2Zmc2V0XCJdID0gdGltZXM7XG4gICAgLyoqXG4gICAgICogQ29udmVydCBhbnkgZXhpc3RpbmcgZHVyYXRpb25zIGZyb20gc2Vjb25kcyB0byBtaWxsaXNlY29uZHNcbiAgICAgKi9cbiAgICBpZiAodHJhbnNpdGlvbi5kdXJhdGlvbilcbiAgICAgICAgb3B0aW9uc1tcImR1cmF0aW9uXCJdID0gc2Vjb25kc1RvTWlsbGlzZWNvbmRzKHRyYW5zaXRpb24uZHVyYXRpb24pO1xuICAgIGlmICh0cmFuc2l0aW9uLnJlcGVhdERlbGF5KVxuICAgICAgICBvcHRpb25zLnJlcGVhdERlbGF5ID0gc2Vjb25kc1RvTWlsbGlzZWNvbmRzKHRyYW5zaXRpb24ucmVwZWF0RGVsYXkpO1xuICAgIC8qKlxuICAgICAqIE1hcCBlYXNpbmcgbmFtZXMgdG8gUG9wbW90aW9uJ3MgZWFzaW5nIGZ1bmN0aW9uc1xuICAgICAqL1xuICAgIGlmIChlYXNlKSB7XG4gICAgICAgIG9wdGlvbnNbXCJlYXNlXCJdID0gaXNFYXNpbmdBcnJheShlYXNlKVxuICAgICAgICAgICAgPyBlYXNlLm1hcChlYXNpbmdEZWZpbml0aW9uVG9GdW5jdGlvbilcbiAgICAgICAgICAgIDogZWFzaW5nRGVmaW5pdGlvblRvRnVuY3Rpb24oZWFzZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFN1cHBvcnQgbGVnYWN5IHRyYW5zaXRpb24gQVBJXG4gICAgICovXG4gICAgaWYgKHRyYW5zaXRpb24udHlwZSA9PT0gXCJ0d2VlblwiKVxuICAgICAgICBvcHRpb25zLnR5cGUgPSBcImtleWZyYW1lc1wiO1xuICAgIC8qKlxuICAgICAqIFRPRE86IFRoZXNlIG9wdGlvbnMgYXJlIG9mZmljaWFsbHkgcmVtb3ZlZCBmcm9tIHRoZSBBUEkuXG4gICAgICovXG4gICAgaWYgKHlveW8gfHwgbG9vcCB8fCBmbGlwKSB7XG4gICAgICAgIGhleUxpc3Rlbi53YXJuaW5nKCFsZWdhY3lSZXBlYXRXYXJuaW5nLCBcInlveW8sIGxvb3AgYW5kIGZsaXAgaGF2ZSBiZWVuIHJlbW92ZWQgZnJvbSB0aGUgQVBJLiBSZXBsYWNlIHdpdGggcmVwZWF0IGFuZCByZXBlYXRUeXBlIG9wdGlvbnMuXCIpO1xuICAgICAgICBsZWdhY3lSZXBlYXRXYXJuaW5nID0gdHJ1ZTtcbiAgICAgICAgaWYgKHlveW8pIHtcbiAgICAgICAgICAgIG9wdGlvbnMucmVwZWF0VHlwZSA9IFwicmV2ZXJzZVwiO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGxvb3ApIHtcbiAgICAgICAgICAgIG9wdGlvbnMucmVwZWF0VHlwZSA9IFwibG9vcFwiO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGZsaXApIHtcbiAgICAgICAgICAgIG9wdGlvbnMucmVwZWF0VHlwZSA9IFwibWlycm9yXCI7XG4gICAgICAgIH1cbiAgICAgICAgb3B0aW9ucy5yZXBlYXQgPSBsb29wIHx8IHlveW8gfHwgZmxpcCB8fCB0cmFuc2l0aW9uLnJlcGVhdDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVE9ETzogUG9wbW90aW9uIDkgaGFzIHRoZSBhYmlsaXR5IHRvIGF1dG9tYXRpY2FsbHkgZGV0ZWN0IHdoZXRoZXIgdG8gdXNlXG4gICAgICogYSBrZXlmcmFtZXMgb3Igc3ByaW5nIGFuaW1hdGlvbiwgYnV0IGRvZXMgc28gYnkgZGV0ZWN0aW5nIHZlbG9jaXR5IGFuZCBvdGhlciBzcHJpbmcgb3B0aW9ucy5cbiAgICAgKiBJdCdkIGJlIGdvb2QgdG8gaW50cm9kdWNlIGEgc2ltaWxhciB0aGluZyBoZXJlLlxuICAgICAqL1xuICAgIGlmICh0cmFuc2l0aW9uLnR5cGUgIT09IFwic3ByaW5nXCIpXG4gICAgICAgIG9wdGlvbnMudHlwZSA9IFwia2V5ZnJhbWVzXCI7XG4gICAgcmV0dXJuIG9wdGlvbnM7XG59XG4vKipcbiAqIEdldCB0aGUgZGVsYXkgZm9yIGEgdmFsdWUgYnkgY2hlY2tpbmcgVHJhbnNpdGlvbiB3aXRoIGRlY3JlYXNpbmcgc3BlY2lmaWNpdHkuXG4gKi9cbmZ1bmN0aW9uIGdldERlbGF5RnJvbVRyYW5zaXRpb24odHJhbnNpdGlvbiwga2V5KSB7XG4gICAgdmFyIF9hO1xuICAgIHZhciB2YWx1ZVRyYW5zaXRpb24gPSBnZXRWYWx1ZVRyYW5zaXRpb24odHJhbnNpdGlvbiwga2V5KSB8fCB7fTtcbiAgICByZXR1cm4gKF9hID0gdmFsdWVUcmFuc2l0aW9uLmRlbGF5KSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiAwO1xufVxuZnVuY3Rpb24gaHlkcmF0ZUtleWZyYW1lcyhvcHRpb25zKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkob3B0aW9ucy50bykgJiYgb3B0aW9ucy50b1swXSA9PT0gbnVsbCkge1xuICAgICAgICBvcHRpb25zLnRvID0gdHNsaWIuX19zcHJlYWRBcnJheShbXSwgdHNsaWIuX19yZWFkKG9wdGlvbnMudG8pKTtcbiAgICAgICAgb3B0aW9ucy50b1swXSA9IG9wdGlvbnMuZnJvbTtcbiAgICB9XG4gICAgcmV0dXJuIG9wdGlvbnM7XG59XG5mdW5jdGlvbiBnZXRQb3Btb3Rpb25BbmltYXRpb25PcHRpb25zKHRyYW5zaXRpb24sIG9wdGlvbnMsIGtleSkge1xuICAgIHZhciBfYTtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShvcHRpb25zLnRvKSkge1xuICAgICAgICAoX2EgPSB0cmFuc2l0aW9uLmR1cmF0aW9uKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiAodHJhbnNpdGlvbi5kdXJhdGlvbiA9IDAuOCk7XG4gICAgfVxuICAgIGh5ZHJhdGVLZXlmcmFtZXMob3B0aW9ucyk7XG4gICAgLyoqXG4gICAgICogR2V0IGEgZGVmYXVsdCB0cmFuc2l0aW9uIGlmIG5vbmUgaXMgZGV0ZXJtaW5lZCB0byBiZSBkZWZpbmVkLlxuICAgICAqL1xuICAgIGlmICghaXNUcmFuc2l0aW9uRGVmaW5lZCh0cmFuc2l0aW9uKSkge1xuICAgICAgICB0cmFuc2l0aW9uID0gdHNsaWIuX19hc3NpZ24odHNsaWIuX19hc3NpZ24oe30sIHRyYW5zaXRpb24pLCBnZXREZWZhdWx0VHJhbnNpdGlvbihrZXksIG9wdGlvbnMudG8pKTtcbiAgICB9XG4gICAgcmV0dXJuIHRzbGliLl9fYXNzaWduKHRzbGliLl9fYXNzaWduKHt9LCBvcHRpb25zKSwgY29udmVydFRyYW5zaXRpb25Ub0FuaW1hdGlvbk9wdGlvbnModHJhbnNpdGlvbikpO1xufVxuLyoqXG4gKlxuICovXG5mdW5jdGlvbiBnZXRBbmltYXRpb24oa2V5LCB2YWx1ZSwgdGFyZ2V0LCB0cmFuc2l0aW9uLCBvbkNvbXBsZXRlKSB7XG4gICAgdmFyIF9hO1xuICAgIHZhciB2YWx1ZVRyYW5zaXRpb24gPSBnZXRWYWx1ZVRyYW5zaXRpb24odHJhbnNpdGlvbiwga2V5KTtcbiAgICB2YXIgb3JpZ2luID0gKF9hID0gdmFsdWVUcmFuc2l0aW9uLmZyb20pICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IHZhbHVlLmdldCgpO1xuICAgIHZhciBpc1RhcmdldEFuaW1hdGFibGUgPSBpc0FuaW1hdGFibGUoa2V5LCB0YXJnZXQpO1xuICAgIGlmIChvcmlnaW4gPT09IFwibm9uZVwiICYmIGlzVGFyZ2V0QW5pbWF0YWJsZSAmJiB0eXBlb2YgdGFyZ2V0ID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJZiB3ZSdyZSB0cnlpbmcgdG8gYW5pbWF0ZSBmcm9tIFwibm9uZVwiLCB0cnkgYW5kIGdldCBhbiBhbmltYXRhYmxlIHZlcnNpb25cbiAgICAgICAgICogb2YgdGhlIHRhcmdldC4gVGhpcyBjb3VsZCBiZSBpbXByb3ZlZCB0byB3b3JrIGJvdGggd2F5cy5cbiAgICAgICAgICovXG4gICAgICAgIG9yaWdpbiA9IGdldEFuaW1hdGFibGVOb25lKGtleSwgdGFyZ2V0KTtcbiAgICB9XG4gICAgZWxzZSBpZiAoaXNaZXJvKG9yaWdpbikgJiYgdHlwZW9mIHRhcmdldCA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICBvcmlnaW4gPSBnZXRaZXJvVW5pdCh0YXJnZXQpO1xuICAgIH1cbiAgICBlbHNlIGlmICghQXJyYXkuaXNBcnJheSh0YXJnZXQpICYmXG4gICAgICAgIGlzWmVybyh0YXJnZXQpICYmXG4gICAgICAgIHR5cGVvZiBvcmlnaW4gPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgdGFyZ2V0ID0gZ2V0WmVyb1VuaXQob3JpZ2luKTtcbiAgICB9XG4gICAgdmFyIGlzT3JpZ2luQW5pbWF0YWJsZSA9IGlzQW5pbWF0YWJsZShrZXksIG9yaWdpbik7XG4gICAgaGV5TGlzdGVuLndhcm5pbmcoaXNPcmlnaW5BbmltYXRhYmxlID09PSBpc1RhcmdldEFuaW1hdGFibGUsIFwiWW91IGFyZSB0cnlpbmcgdG8gYW5pbWF0ZSBcIiArIGtleSArIFwiIGZyb20gXFxcIlwiICsgb3JpZ2luICsgXCJcXFwiIHRvIFxcXCJcIiArIHRhcmdldCArIFwiXFxcIi4gXCIgKyBvcmlnaW4gKyBcIiBpcyBub3QgYW4gYW5pbWF0YWJsZSB2YWx1ZSAtIHRvIGVuYWJsZSB0aGlzIGFuaW1hdGlvbiBzZXQgXCIgKyBvcmlnaW4gKyBcIiB0byBhIHZhbHVlIGFuaW1hdGFibGUgdG8gXCIgKyB0YXJnZXQgKyBcIiB2aWEgdGhlIGBzdHlsZWAgcHJvcGVydHkuXCIpO1xuICAgIGZ1bmN0aW9uIHN0YXJ0KCkge1xuICAgICAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgIGZyb206IG9yaWdpbixcbiAgICAgICAgICAgIHRvOiB0YXJnZXQsXG4gICAgICAgICAgICB2ZWxvY2l0eTogdmFsdWUuZ2V0VmVsb2NpdHkoKSxcbiAgICAgICAgICAgIG9uQ29tcGxldGU6IG9uQ29tcGxldGUsXG4gICAgICAgICAgICBvblVwZGF0ZTogZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHZhbHVlLnNldCh2KTsgfSxcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHZhbHVlVHJhbnNpdGlvbi50eXBlID09PSBcImluZXJ0aWFcIiB8fFxuICAgICAgICAgICAgdmFsdWVUcmFuc2l0aW9uLnR5cGUgPT09IFwiZGVjYXlcIlxuICAgICAgICAgICAgPyBwb3Btb3Rpb24uaW5lcnRpYSh0c2xpYi5fX2Fzc2lnbih0c2xpYi5fX2Fzc2lnbih7fSwgb3B0aW9ucyksIHZhbHVlVHJhbnNpdGlvbikpXG4gICAgICAgICAgICA6IHBvcG1vdGlvbi5hbmltYXRlKHRzbGliLl9fYXNzaWduKHRzbGliLl9fYXNzaWduKHt9LCBnZXRQb3Btb3Rpb25BbmltYXRpb25PcHRpb25zKHZhbHVlVHJhbnNpdGlvbiwgb3B0aW9ucywga2V5KSksIHsgb25VcGRhdGU6IGZ1bmN0aW9uICh2KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5vblVwZGF0ZSh2KTtcbiAgICAgICAgICAgICAgICAgICAgKF9hID0gdmFsdWVUcmFuc2l0aW9uLm9uVXBkYXRlKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuY2FsbCh2YWx1ZVRyYW5zaXRpb24sIHYpO1xuICAgICAgICAgICAgICAgIH0sIG9uQ29tcGxldGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgICAgICAgICBvcHRpb25zLm9uQ29tcGxldGUoKTtcbiAgICAgICAgICAgICAgICAgICAgKF9hID0gdmFsdWVUcmFuc2l0aW9uLm9uQ29tcGxldGUpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5jYWxsKHZhbHVlVHJhbnNpdGlvbik7XG4gICAgICAgICAgICAgICAgfSB9KSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHNldCgpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICB2YWx1ZS5zZXQodGFyZ2V0KTtcbiAgICAgICAgb25Db21wbGV0ZSgpO1xuICAgICAgICAoX2EgPSB2YWx1ZVRyYW5zaXRpb24gPT09IG51bGwgfHwgdmFsdWVUcmFuc2l0aW9uID09PSB2b2lkIDAgPyB2b2lkIDAgOiB2YWx1ZVRyYW5zaXRpb24ub25Db21wbGV0ZSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmNhbGwodmFsdWVUcmFuc2l0aW9uKTtcbiAgICAgICAgcmV0dXJuIHsgc3RvcDogZnVuY3Rpb24gKCkgeyB9IH07XG4gICAgfVxuICAgIHJldHVybiAhaXNPcmlnaW5BbmltYXRhYmxlIHx8XG4gICAgICAgICFpc1RhcmdldEFuaW1hdGFibGUgfHxcbiAgICAgICAgdmFsdWVUcmFuc2l0aW9uLnR5cGUgPT09IGZhbHNlXG4gICAgICAgID8gc2V0XG4gICAgICAgIDogc3RhcnQ7XG59XG5mdW5jdGlvbiBpc1plcm8odmFsdWUpIHtcbiAgICByZXR1cm4gKHZhbHVlID09PSAwIHx8XG4gICAgICAgICh0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiZcbiAgICAgICAgICAgIHBhcnNlRmxvYXQodmFsdWUpID09PSAwICYmXG4gICAgICAgICAgICB2YWx1ZS5pbmRleE9mKFwiIFwiKSA9PT0gLTEpKTtcbn1cbmZ1bmN0aW9uIGdldFplcm9Vbml0KHBvdGVudGlhbFVuaXRUeXBlKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBwb3RlbnRpYWxVbml0VHlwZSA9PT0gXCJudW1iZXJcIlxuICAgICAgICA/IDBcbiAgICAgICAgOiBnZXRBbmltYXRhYmxlTm9uZShcIlwiLCBwb3RlbnRpYWxVbml0VHlwZSk7XG59XG5mdW5jdGlvbiBnZXRWYWx1ZVRyYW5zaXRpb24odHJhbnNpdGlvbiwga2V5KSB7XG4gICAgcmV0dXJuIHRyYW5zaXRpb25ba2V5XSB8fCB0cmFuc2l0aW9uW1wiZGVmYXVsdFwiXSB8fCB0cmFuc2l0aW9uO1xufVxuLyoqXG4gKiBTdGFydCBhbmltYXRpb24gb24gYSBNb3Rpb25WYWx1ZS4gVGhpcyBmdW5jdGlvbiBpcyBhbiBpbnRlcmZhY2UgYmV0d2VlblxuICogRnJhbWVyIE1vdGlvbiBhbmQgUG9wbW90aW9uXG4gKlxuICogQGludGVybmFsXG4gKi9cbmZ1bmN0aW9uIHN0YXJ0QW5pbWF0aW9uKGtleSwgdmFsdWUsIHRhcmdldCwgdHJhbnNpdGlvbikge1xuICAgIGlmICh0cmFuc2l0aW9uID09PSB2b2lkIDApIHsgdHJhbnNpdGlvbiA9IHt9OyB9XG4gICAgcmV0dXJuIHZhbHVlLnN0YXJ0KGZ1bmN0aW9uIChvbkNvbXBsZXRlKSB7XG4gICAgICAgIHZhciBkZWxheVRpbWVyO1xuICAgICAgICB2YXIgY29udHJvbHM7XG4gICAgICAgIHZhciBhbmltYXRpb24gPSBnZXRBbmltYXRpb24oa2V5LCB2YWx1ZSwgdGFyZ2V0LCB0cmFuc2l0aW9uLCBvbkNvbXBsZXRlKTtcbiAgICAgICAgdmFyIGRlbGF5ID0gZ2V0RGVsYXlGcm9tVHJhbnNpdGlvbih0cmFuc2l0aW9uLCBrZXkpO1xuICAgICAgICB2YXIgc3RhcnQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiAoY29udHJvbHMgPSBhbmltYXRpb24oKSk7IH07XG4gICAgICAgIGlmIChkZWxheSkge1xuICAgICAgICAgICAgZGVsYXlUaW1lciA9IHNldFRpbWVvdXQoc3RhcnQsIHNlY29uZHNUb01pbGxpc2Vjb25kcyhkZWxheSkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgc3RhcnQoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KGRlbGF5VGltZXIpO1xuICAgICAgICAgICAgY29udHJvbHMgPT09IG51bGwgfHwgY29udHJvbHMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGNvbnRyb2xzLnN0b3AoKTtcbiAgICAgICAgfTtcbiAgICB9KTtcbn1cblxuLyoqXG4gKiBDaGVjayBpZiB2YWx1ZSBpcyBhIG51bWVyaWNhbCBzdHJpbmcsIGllIGEgc3RyaW5nIHRoYXQgaXMgcHVyZWx5IGEgbnVtYmVyIGVnIFwiMTAwXCIgb3IgXCItMTAwLjFcIlxuICovXG52YXIgaXNOdW1lcmljYWxTdHJpbmcgPSBmdW5jdGlvbiAodikgeyByZXR1cm4gL15cXC0/XFxkKlxcLj9cXGQrJC8udGVzdCh2KTsgfTtcblxuZnVuY3Rpb24gYWRkVW5pcXVlSXRlbShhcnIsIGl0ZW0pIHtcbiAgICBhcnIuaW5kZXhPZihpdGVtKSA9PT0gLTEgJiYgYXJyLnB1c2goaXRlbSk7XG59XG5mdW5jdGlvbiByZW1vdmVJdGVtKGFyciwgaXRlbSkge1xuICAgIHZhciBpbmRleCA9IGFyci5pbmRleE9mKGl0ZW0pO1xuICAgIGluZGV4ID4gLTEgJiYgYXJyLnNwbGljZShpbmRleCwgMSk7XG59XG5cbnZhciBTdWJzY3JpcHRpb25NYW5hZ2VyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFN1YnNjcmlwdGlvbk1hbmFnZXIoKSB7XG4gICAgICAgIHRoaXMuc3Vic2NyaXB0aW9ucyA9IFtdO1xuICAgIH1cbiAgICBTdWJzY3JpcHRpb25NYW5hZ2VyLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiAoaGFuZGxlcikge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBhZGRVbmlxdWVJdGVtKHRoaXMuc3Vic2NyaXB0aW9ucywgaGFuZGxlcik7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7IHJldHVybiByZW1vdmVJdGVtKF90aGlzLnN1YnNjcmlwdGlvbnMsIGhhbmRsZXIpOyB9O1xuICAgIH07XG4gICAgU3Vic2NyaXB0aW9uTWFuYWdlci5wcm90b3R5cGUubm90aWZ5ID0gZnVuY3Rpb24gKGEsIGIsIGMpIHtcbiAgICAgICAgdmFyIG51bVN1YnNjcmlwdGlvbnMgPSB0aGlzLnN1YnNjcmlwdGlvbnMubGVuZ3RoO1xuICAgICAgICBpZiAoIW51bVN1YnNjcmlwdGlvbnMpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGlmIChudW1TdWJzY3JpcHRpb25zID09PSAxKSB7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIElmIHRoZXJlJ3Mgb25seSBhIHNpbmdsZSBoYW5kbGVyIHdlIGNhbiBqdXN0IGNhbGwgaXQgd2l0aG91dCBpbnZva2luZyBhIGxvb3AuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHRoaXMuc3Vic2NyaXB0aW9uc1swXShhLCBiLCBjKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbnVtU3Vic2NyaXB0aW9uczsgaSsrKSB7XG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICogQ2hlY2sgd2hldGhlciB0aGUgaGFuZGxlciBleGlzdHMgYmVmb3JlIGZpcmluZyBhcyBpdCdzIHBvc3NpYmxlXG4gICAgICAgICAgICAgICAgICogdGhlIHN1YnNjcmlwdGlvbnMgd2VyZSBtb2RpZmllZCBkdXJpbmcgdGhpcyBsb29wIHJ1bm5pbmcuXG4gICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgdmFyIGhhbmRsZXIgPSB0aGlzLnN1YnNjcmlwdGlvbnNbaV07XG4gICAgICAgICAgICAgICAgaGFuZGxlciAmJiBoYW5kbGVyKGEsIGIsIGMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBTdWJzY3JpcHRpb25NYW5hZ2VyLnByb3RvdHlwZS5nZXRTaXplID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zdWJzY3JpcHRpb25zLmxlbmd0aDtcbiAgICB9O1xuICAgIFN1YnNjcmlwdGlvbk1hbmFnZXIucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnN1YnNjcmlwdGlvbnMubGVuZ3RoID0gMDtcbiAgICB9O1xuICAgIHJldHVybiBTdWJzY3JpcHRpb25NYW5hZ2VyO1xufSgpKTtcblxudmFyIGlzRmxvYXQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICByZXR1cm4gIWlzTmFOKHBhcnNlRmxvYXQodmFsdWUpKTtcbn07XG4vKipcbiAqIGBNb3Rpb25WYWx1ZWAgaXMgdXNlZCB0byB0cmFjayB0aGUgc3RhdGUgYW5kIHZlbG9jaXR5IG9mIG1vdGlvbiB2YWx1ZXMuXG4gKlxuICogQHB1YmxpY1xuICovXG52YXIgTW90aW9uVmFsdWUgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgLyoqXG4gICAgICogQHBhcmFtIGluaXQgLSBUaGUgaW5pdGlhdGluZyB2YWx1ZVxuICAgICAqIEBwYXJhbSBjb25maWcgLSBPcHRpb25hbCBjb25maWd1cmF0aW9uIG9wdGlvbnNcbiAgICAgKlxuICAgICAqIC0gIGB0cmFuc2Zvcm1lcmA6IEEgZnVuY3Rpb24gdG8gdHJhbnNmb3JtIGluY29taW5nIHZhbHVlcyB3aXRoLlxuICAgICAqXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgZnVuY3Rpb24gTW90aW9uVmFsdWUoaW5pdCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICAvKipcbiAgICAgICAgICogRHVyYXRpb24sIGluIG1pbGxpc2Vjb25kcywgc2luY2UgbGFzdCB1cGRhdGluZyBmcmFtZS5cbiAgICAgICAgICpcbiAgICAgICAgICogQGludGVybmFsXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnRpbWVEZWx0YSA9IDA7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaW1lc3RhbXAgb2YgdGhlIGxhc3QgdGltZSB0aGlzIGBNb3Rpb25WYWx1ZWAgd2FzIHVwZGF0ZWQuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBpbnRlcm5hbFxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5sYXN0VXBkYXRlZCA9IDA7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBGdW5jdGlvbnMgdG8gbm90aWZ5IHdoZW4gdGhlIGBNb3Rpb25WYWx1ZWAgdXBkYXRlcy5cbiAgICAgICAgICpcbiAgICAgICAgICogQGludGVybmFsXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnVwZGF0ZVN1YnNjcmliZXJzID0gbmV3IFN1YnNjcmlwdGlvbk1hbmFnZXIoKTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEZ1bmN0aW9ucyB0byBub3RpZnkgd2hlbiB0aGUgdmVsb2NpdHkgdXBkYXRlcy5cbiAgICAgICAgICpcbiAgICAgICAgICogQGludGVybmFsXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnZlbG9jaXR5VXBkYXRlU3Vic2NyaWJlcnMgPSBuZXcgU3Vic2NyaXB0aW9uTWFuYWdlcigpO1xuICAgICAgICAvKipcbiAgICAgICAgICogRnVuY3Rpb25zIHRvIG5vdGlmeSB3aGVuIHRoZSBgTW90aW9uVmFsdWVgIHVwZGF0ZXMgYW5kIGByZW5kZXJgIGlzIHNldCB0byBgdHJ1ZWAuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBpbnRlcm5hbFxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5yZW5kZXJTdWJzY3JpYmVycyA9IG5ldyBTdWJzY3JpcHRpb25NYW5hZ2VyKCk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUcmFja3Mgd2hldGhlciB0aGlzIHZhbHVlIGNhbiBvdXRwdXQgYSB2ZWxvY2l0eS4gQ3VycmVudGx5IHRoaXMgaXMgb25seSB0cnVlXG4gICAgICAgICAqIGlmIHRoZSB2YWx1ZSBpcyBudW1lcmljYWwsIGJ1dCB3ZSBtaWdodCBiZSBhYmxlIHRvIHdpZGVuIHRoZSBzY29wZSBoZXJlIGFuZCBzdXBwb3J0XG4gICAgICAgICAqIG90aGVyIHZhbHVlIHR5cGVzLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAaW50ZXJuYWxcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuY2FuVHJhY2tWZWxvY2l0eSA9IGZhbHNlO1xuICAgICAgICB0aGlzLnVwZGF0ZUFuZE5vdGlmeSA9IGZ1bmN0aW9uICh2LCByZW5kZXIpIHtcbiAgICAgICAgICAgIGlmIChyZW5kZXIgPT09IHZvaWQgMCkgeyByZW5kZXIgPSB0cnVlOyB9XG4gICAgICAgICAgICBfdGhpcy5wcmV2ID0gX3RoaXMuY3VycmVudDtcbiAgICAgICAgICAgIF90aGlzLmN1cnJlbnQgPSB2O1xuICAgICAgICAgICAgLy8gVXBkYXRlIHRpbWVzdGFtcFxuICAgICAgICAgICAgdmFyIF9hID0gc3luYy5nZXRGcmFtZURhdGEoKSwgZGVsdGEgPSBfYS5kZWx0YSwgdGltZXN0YW1wID0gX2EudGltZXN0YW1wO1xuICAgICAgICAgICAgaWYgKF90aGlzLmxhc3RVcGRhdGVkICE9PSB0aW1lc3RhbXApIHtcbiAgICAgICAgICAgICAgICBfdGhpcy50aW1lRGVsdGEgPSBkZWx0YTtcbiAgICAgICAgICAgICAgICBfdGhpcy5sYXN0VXBkYXRlZCA9IHRpbWVzdGFtcDtcbiAgICAgICAgICAgICAgICBzeW5jX19kZWZhdWx0WydkZWZhdWx0J10ucG9zdFJlbmRlcihfdGhpcy5zY2hlZHVsZVZlbG9jaXR5Q2hlY2spO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gVXBkYXRlIHVwZGF0ZSBzdWJzY3JpYmVyc1xuICAgICAgICAgICAgaWYgKF90aGlzLnByZXYgIT09IF90aGlzLmN1cnJlbnQpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy51cGRhdGVTdWJzY3JpYmVycy5ub3RpZnkoX3RoaXMuY3VycmVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBVcGRhdGUgdmVsb2NpdHkgc3Vic2NyaWJlcnNcbiAgICAgICAgICAgIGlmIChfdGhpcy52ZWxvY2l0eVVwZGF0ZVN1YnNjcmliZXJzLmdldFNpemUoKSkge1xuICAgICAgICAgICAgICAgIF90aGlzLnZlbG9jaXR5VXBkYXRlU3Vic2NyaWJlcnMubm90aWZ5KF90aGlzLmdldFZlbG9jaXR5KCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gVXBkYXRlIHJlbmRlciBzdWJzY3JpYmVyc1xuICAgICAgICAgICAgaWYgKHJlbmRlcikge1xuICAgICAgICAgICAgICAgIF90aGlzLnJlbmRlclN1YnNjcmliZXJzLm5vdGlmeShfdGhpcy5jdXJyZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNjaGVkdWxlIGEgdmVsb2NpdHkgY2hlY2sgZm9yIHRoZSBuZXh0IGZyYW1lLlxuICAgICAgICAgKlxuICAgICAgICAgKiBUaGlzIGlzIGFuIGluc3RhbmNlZCBhbmQgYm91bmQgZnVuY3Rpb24gdG8gcHJldmVudCBnZW5lcmF0aW5nIGEgbmV3XG4gICAgICAgICAqIGZ1bmN0aW9uIG9uY2UgcGVyIGZyYW1lLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAaW50ZXJuYWxcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuc2NoZWR1bGVWZWxvY2l0eUNoZWNrID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gc3luY19fZGVmYXVsdFsnZGVmYXVsdCddLnBvc3RSZW5kZXIoX3RoaXMudmVsb2NpdHlDaGVjayk7IH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBVcGRhdGVzIGBwcmV2YCB3aXRoIGBjdXJyZW50YCBpZiB0aGUgdmFsdWUgaGFzbid0IGJlZW4gdXBkYXRlZCB0aGlzIGZyYW1lLlxuICAgICAgICAgKiBUaGlzIGVuc3VyZXMgdmVsb2NpdHkgY2FsY3VsYXRpb25zIHJldHVybiBgMGAuXG4gICAgICAgICAqXG4gICAgICAgICAqIFRoaXMgaXMgYW4gaW5zdGFuY2VkIGFuZCBib3VuZCBmdW5jdGlvbiB0byBwcmV2ZW50IGdlbmVyYXRpbmcgYSBuZXdcbiAgICAgICAgICogZnVuY3Rpb24gb25jZSBwZXIgZnJhbWUuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBpbnRlcm5hbFxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy52ZWxvY2l0eUNoZWNrID0gZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICB2YXIgdGltZXN0YW1wID0gX2EudGltZXN0YW1wO1xuICAgICAgICAgICAgaWYgKHRpbWVzdGFtcCAhPT0gX3RoaXMubGFzdFVwZGF0ZWQpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5wcmV2ID0gX3RoaXMuY3VycmVudDtcbiAgICAgICAgICAgICAgICBfdGhpcy52ZWxvY2l0eVVwZGF0ZVN1YnNjcmliZXJzLm5vdGlmeShfdGhpcy5nZXRWZWxvY2l0eSgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5oYXNBbmltYXRlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLnByZXYgPSB0aGlzLmN1cnJlbnQgPSBpbml0O1xuICAgICAgICB0aGlzLmNhblRyYWNrVmVsb2NpdHkgPSBpc0Zsb2F0KHRoaXMuY3VycmVudCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFkZHMgYSBmdW5jdGlvbiB0aGF0IHdpbGwgYmUgbm90aWZpZWQgd2hlbiB0aGUgYE1vdGlvblZhbHVlYCBpcyB1cGRhdGVkLlxuICAgICAqXG4gICAgICogSXQgcmV0dXJucyBhIGZ1bmN0aW9uIHRoYXQsIHdoZW4gY2FsbGVkLCB3aWxsIGNhbmNlbCB0aGUgc3Vic2NyaXB0aW9uLlxuICAgICAqXG4gICAgICogV2hlbiBjYWxsaW5nIGBvbkNoYW5nZWAgaW5zaWRlIGEgUmVhY3QgY29tcG9uZW50LCBpdCBzaG91bGQgYmUgd3JhcHBlZCB3aXRoIHRoZVxuICAgICAqIGB1c2VFZmZlY3RgIGhvb2suIEFzIGl0IHJldHVybnMgYW4gdW5zdWJzY3JpYmUgZnVuY3Rpb24sIHRoaXMgc2hvdWxkIGJlIHJldHVybmVkXG4gICAgICogZnJvbSB0aGUgYHVzZUVmZmVjdGAgZnVuY3Rpb24gdG8gZW5zdXJlIHlvdSBkb24ndCBhZGQgZHVwbGljYXRlIHN1YnNjcmliZXJzLi5cbiAgICAgKlxuICAgICAqIEBsaWJyYXJ5XG4gICAgICpcbiAgICAgKiBgYGBqc3hcbiAgICAgKiBmdW5jdGlvbiBNeUNvbXBvbmVudCgpIHtcbiAgICAgKiAgIGNvbnN0IHggPSB1c2VNb3Rpb25WYWx1ZSgwKVxuICAgICAqICAgY29uc3QgeSA9IHVzZU1vdGlvblZhbHVlKDApXG4gICAgICogICBjb25zdCBvcGFjaXR5ID0gdXNlTW90aW9uVmFsdWUoMSlcbiAgICAgKlxuICAgICAqICAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAgKiAgICAgZnVuY3Rpb24gdXBkYXRlT3BhY2l0eSgpIHtcbiAgICAgKiAgICAgICBjb25zdCBtYXhYWSA9IE1hdGgubWF4KHguZ2V0KCksIHkuZ2V0KCkpXG4gICAgICogICAgICAgY29uc3QgbmV3T3BhY2l0eSA9IHRyYW5zZm9ybShtYXhYWSwgWzAsIDEwMF0sIFsxLCAwXSlcbiAgICAgKiAgICAgICBvcGFjaXR5LnNldChuZXdPcGFjaXR5KVxuICAgICAqICAgICB9XG4gICAgICpcbiAgICAgKiAgICAgY29uc3QgdW5zdWJzY3JpYmVYID0geC5vbkNoYW5nZSh1cGRhdGVPcGFjaXR5KVxuICAgICAqICAgICBjb25zdCB1bnN1YnNjcmliZVkgPSB5Lm9uQ2hhbmdlKHVwZGF0ZU9wYWNpdHkpXG4gICAgICpcbiAgICAgKiAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgKiAgICAgICB1bnN1YnNjcmliZVgoKVxuICAgICAqICAgICAgIHVuc3Vic2NyaWJlWSgpXG4gICAgICogICAgIH1cbiAgICAgKiAgIH0sIFtdKVxuICAgICAqXG4gICAgICogICByZXR1cm4gPEZyYW1lIHg9e3h9IC8+XG4gICAgICogfVxuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogQG1vdGlvblxuICAgICAqXG4gICAgICogYGBganN4XG4gICAgICogZXhwb3J0IGNvbnN0IE15Q29tcG9uZW50ID0gKCkgPT4ge1xuICAgICAqICAgY29uc3QgeCA9IHVzZU1vdGlvblZhbHVlKDApXG4gICAgICogICBjb25zdCB5ID0gdXNlTW90aW9uVmFsdWUoMClcbiAgICAgKiAgIGNvbnN0IG9wYWNpdHkgPSB1c2VNb3Rpb25WYWx1ZSgxKVxuICAgICAqXG4gICAgICogICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgICAqICAgICBmdW5jdGlvbiB1cGRhdGVPcGFjaXR5KCkge1xuICAgICAqICAgICAgIGNvbnN0IG1heFhZID0gTWF0aC5tYXgoeC5nZXQoKSwgeS5nZXQoKSlcbiAgICAgKiAgICAgICBjb25zdCBuZXdPcGFjaXR5ID0gdHJhbnNmb3JtKG1heFhZLCBbMCwgMTAwXSwgWzEsIDBdKVxuICAgICAqICAgICAgIG9wYWNpdHkuc2V0KG5ld09wYWNpdHkpXG4gICAgICogICAgIH1cbiAgICAgKlxuICAgICAqICAgICBjb25zdCB1bnN1YnNjcmliZVggPSB4Lm9uQ2hhbmdlKHVwZGF0ZU9wYWNpdHkpXG4gICAgICogICAgIGNvbnN0IHVuc3Vic2NyaWJlWSA9IHkub25DaGFuZ2UodXBkYXRlT3BhY2l0eSlcbiAgICAgKlxuICAgICAqICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAqICAgICAgIHVuc3Vic2NyaWJlWCgpXG4gICAgICogICAgICAgdW5zdWJzY3JpYmVZKClcbiAgICAgKiAgICAgfVxuICAgICAqICAgfSwgW10pXG4gICAgICpcbiAgICAgKiAgIHJldHVybiA8bW90aW9uLmRpdiBzdHlsZT17eyB4IH19IC8+XG4gICAgICogfVxuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogQGludGVybmFscmVtYXJrc1xuICAgICAqXG4gICAgICogV2UgY291bGQgbG9vayBpbnRvIGEgYHVzZU9uQ2hhbmdlYCBob29rIGlmIHRoZSBhYm92ZSBsaWZlY3ljbGUgbWFuYWdlbWVudCBwcm92ZXMgY29uZnVzaW5nLlxuICAgICAqXG4gICAgICogYGBganN4XG4gICAgICogdXNlT25DaGFuZ2UoeCwgKCkgPT4ge30pXG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBAcGFyYW0gc3Vic2NyaWJlciAtIEEgZnVuY3Rpb24gdGhhdCByZWNlaXZlcyB0aGUgbGF0ZXN0IHZhbHVlLlxuICAgICAqIEByZXR1cm5zIEEgZnVuY3Rpb24gdGhhdCwgd2hlbiBjYWxsZWQsIHdpbGwgY2FuY2VsIHRoaXMgc3Vic2NyaXB0aW9uLlxuICAgICAqXG4gICAgICogQHB1YmxpY1xuICAgICAqL1xuICAgIE1vdGlvblZhbHVlLnByb3RvdHlwZS5vbkNoYW5nZSA9IGZ1bmN0aW9uIChzdWJzY3JpcHRpb24pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudXBkYXRlU3Vic2NyaWJlcnMuYWRkKHN1YnNjcmlwdGlvbik7XG4gICAgfTtcbiAgICBNb3Rpb25WYWx1ZS5wcm90b3R5cGUuY2xlYXJMaXN0ZW5lcnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMudXBkYXRlU3Vic2NyaWJlcnMuY2xlYXIoKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEFkZHMgYSBmdW5jdGlvbiB0aGF0IHdpbGwgYmUgbm90aWZpZWQgd2hlbiB0aGUgYE1vdGlvblZhbHVlYCByZXF1ZXN0cyBhIHJlbmRlci5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBzdWJzY3JpYmVyIC0gQSBmdW5jdGlvbiB0aGF0J3MgcHJvdmlkZWQgdGhlIGxhdGVzdCB2YWx1ZS5cbiAgICAgKiBAcmV0dXJucyBBIGZ1bmN0aW9uIHRoYXQsIHdoZW4gY2FsbGVkLCB3aWxsIGNhbmNlbCB0aGlzIHN1YnNjcmlwdGlvbi5cbiAgICAgKlxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIE1vdGlvblZhbHVlLnByb3RvdHlwZS5vblJlbmRlclJlcXVlc3QgPSBmdW5jdGlvbiAoc3Vic2NyaXB0aW9uKSB7XG4gICAgICAgIC8vIFJlbmRlciBpbW1lZGlhdGVseVxuICAgICAgICBzdWJzY3JpcHRpb24odGhpcy5nZXQoKSk7XG4gICAgICAgIHJldHVybiB0aGlzLnJlbmRlclN1YnNjcmliZXJzLmFkZChzdWJzY3JpcHRpb24pO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQXR0YWNoZXMgYSBwYXNzaXZlIGVmZmVjdCB0byB0aGUgYE1vdGlvblZhbHVlYC5cbiAgICAgKlxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIE1vdGlvblZhbHVlLnByb3RvdHlwZS5hdHRhY2ggPSBmdW5jdGlvbiAocGFzc2l2ZUVmZmVjdCkge1xuICAgICAgICB0aGlzLnBhc3NpdmVFZmZlY3QgPSBwYXNzaXZlRWZmZWN0O1xuICAgIH07XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgc3RhdGUgb2YgdGhlIGBNb3Rpb25WYWx1ZWAuXG4gICAgICpcbiAgICAgKiBAcmVtYXJrc1xuICAgICAqXG4gICAgICogYGBganN4XG4gICAgICogY29uc3QgeCA9IHVzZU1vdGlvblZhbHVlKDApXG4gICAgICogeC5zZXQoMTApXG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbGF0ZXN0IC0gTGF0ZXN0IHZhbHVlIHRvIHNldC5cbiAgICAgKiBAcGFyYW0gcmVuZGVyIC0gV2hldGhlciB0byBub3RpZnkgcmVuZGVyIHN1YnNjcmliZXJzLiBEZWZhdWx0cyB0byBgdHJ1ZWBcbiAgICAgKlxuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cbiAgICBNb3Rpb25WYWx1ZS5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24gKHYsIHJlbmRlcikge1xuICAgICAgICBpZiAocmVuZGVyID09PSB2b2lkIDApIHsgcmVuZGVyID0gdHJ1ZTsgfVxuICAgICAgICBpZiAoIXJlbmRlciB8fCAhdGhpcy5wYXNzaXZlRWZmZWN0KSB7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZUFuZE5vdGlmeSh2LCByZW5kZXIpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5wYXNzaXZlRWZmZWN0KHYsIHRoaXMudXBkYXRlQW5kTm90aWZ5KTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgbGF0ZXN0IHN0YXRlIG9mIGBNb3Rpb25WYWx1ZWBcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIC0gVGhlIGxhdGVzdCBzdGF0ZSBvZiBgTW90aW9uVmFsdWVgXG4gICAgICpcbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgTW90aW9uVmFsdWUucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY3VycmVudDtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cbiAgICBNb3Rpb25WYWx1ZS5wcm90b3R5cGUuZ2V0UHJldmlvdXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByZXY7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBsYXRlc3QgdmVsb2NpdHkgb2YgYE1vdGlvblZhbHVlYFxuICAgICAqXG4gICAgICogQHJldHVybnMgLSBUaGUgbGF0ZXN0IHZlbG9jaXR5IG9mIGBNb3Rpb25WYWx1ZWAuIFJldHVybnMgYDBgIGlmIHRoZSBzdGF0ZSBpcyBub24tbnVtZXJpY2FsLlxuICAgICAqXG4gICAgICogQHB1YmxpY1xuICAgICAqL1xuICAgIE1vdGlvblZhbHVlLnByb3RvdHlwZS5nZXRWZWxvY2l0eSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gVGhpcyBjb3VsZCBiZSBpc0Zsb2F0KHRoaXMucHJldikgJiYgaXNGbG9hdCh0aGlzLmN1cnJlbnQpLCBidXQgdGhhdCB3b3VsZCBiZSB3YXN0ZWZ1bFxuICAgICAgICByZXR1cm4gdGhpcy5jYW5UcmFja1ZlbG9jaXR5XG4gICAgICAgICAgICA/IC8vIFRoZXNlIGNhc3RzIGNvdWxkIGJlIGF2b2lkZWQgaWYgcGFyc2VGbG9hdCB3b3VsZCBiZSB0eXBlZCBiZXR0ZXJcbiAgICAgICAgICAgICAgICBwb3Btb3Rpb24udmVsb2NpdHlQZXJTZWNvbmQocGFyc2VGbG9hdCh0aGlzLmN1cnJlbnQpIC1cbiAgICAgICAgICAgICAgICAgICAgcGFyc2VGbG9hdCh0aGlzLnByZXYpLCB0aGlzLnRpbWVEZWx0YSlcbiAgICAgICAgICAgIDogMDtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJlZ2lzdGVycyBhIG5ldyBhbmltYXRpb24gdG8gY29udHJvbCB0aGlzIGBNb3Rpb25WYWx1ZWAuIE9ubHkgb25lXG4gICAgICogYW5pbWF0aW9uIGNhbiBkcml2ZSBhIGBNb3Rpb25WYWx1ZWAgYXQgb25lIHRpbWUuXG4gICAgICpcbiAgICAgKiBgYGBqc3hcbiAgICAgKiB2YWx1ZS5zdGFydCgpXG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBAcGFyYW0gYW5pbWF0aW9uIC0gQSBmdW5jdGlvbiB0aGF0IHN0YXJ0cyB0aGUgcHJvdmlkZWQgYW5pbWF0aW9uXG4gICAgICpcbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBNb3Rpb25WYWx1ZS5wcm90b3R5cGUuc3RhcnQgPSBmdW5jdGlvbiAoYW5pbWF0aW9uKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHRoaXMuc3RvcCgpO1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICAgICAgICAgIF90aGlzLmhhc0FuaW1hdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIF90aGlzLnN0b3BBbmltYXRpb24gPSBhbmltYXRpb24ocmVzb2x2ZSk7XG4gICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMuY2xlYXJBbmltYXRpb24oKTsgfSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBTdG9wIHRoZSBjdXJyZW50bHkgYWN0aXZlIGFuaW1hdGlvbi5cbiAgICAgKlxuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cbiAgICBNb3Rpb25WYWx1ZS5wcm90b3R5cGUuc3RvcCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuc3RvcEFuaW1hdGlvbilcbiAgICAgICAgICAgIHRoaXMuc3RvcEFuaW1hdGlvbigpO1xuICAgICAgICB0aGlzLmNsZWFyQW5pbWF0aW9uKCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGB0cnVlYCBpZiB0aGlzIHZhbHVlIGlzIGN1cnJlbnRseSBhbmltYXRpbmcuXG4gICAgICpcbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgTW90aW9uVmFsdWUucHJvdG90eXBlLmlzQW5pbWF0aW5nID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gISF0aGlzLnN0b3BBbmltYXRpb247XG4gICAgfTtcbiAgICBNb3Rpb25WYWx1ZS5wcm90b3R5cGUuY2xlYXJBbmltYXRpb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuc3RvcEFuaW1hdGlvbiA9IG51bGw7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBEZXN0cm95IGFuZCBjbGVhbiB1cCBzdWJzY3JpYmVycyB0byB0aGlzIGBNb3Rpb25WYWx1ZWAuXG4gICAgICpcbiAgICAgKiBUaGUgYE1vdGlvblZhbHVlYCBob29rcyBsaWtlIGB1c2VNb3Rpb25WYWx1ZWAgYW5kIGB1c2VUcmFuc2Zvcm1gIGF1dG9tYXRpY2FsbHlcbiAgICAgKiBoYW5kbGUgdGhlIGxpZmVjeWNsZSBvZiB0aGUgcmV0dXJuZWQgYE1vdGlvblZhbHVlYCwgc28gdGhpcyBtZXRob2QgaXMgb25seSBuZWNlc3NhcnkgaWYgeW91J3ZlIG1hbnVhbGx5XG4gICAgICogY3JlYXRlZCBhIGBNb3Rpb25WYWx1ZWAgdmlhIHRoZSBgbW90aW9uVmFsdWVgIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHB1YmxpY1xuICAgICAqL1xuICAgIE1vdGlvblZhbHVlLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnVwZGF0ZVN1YnNjcmliZXJzLmNsZWFyKCk7XG4gICAgICAgIHRoaXMucmVuZGVyU3Vic2NyaWJlcnMuY2xlYXIoKTtcbiAgICAgICAgdGhpcy5zdG9wKCk7XG4gICAgfTtcbiAgICByZXR1cm4gTW90aW9uVmFsdWU7XG59KCkpO1xuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZnVuY3Rpb24gbW90aW9uVmFsdWUoaW5pdCkge1xuICAgIHJldHVybiBuZXcgTW90aW9uVmFsdWUoaW5pdCk7XG59XG5cbi8qKlxuICogVGVzdHMgYSBwcm92aWRlZCB2YWx1ZSBhZ2FpbnN0IGEgVmFsdWVUeXBlXG4gKi9cbnZhciB0ZXN0VmFsdWVUeXBlID0gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIGZ1bmN0aW9uICh0eXBlKSB7IHJldHVybiB0eXBlLnRlc3Qodik7IH07IH07XG5cbi8qKlxuICogVmFsdWVUeXBlIGZvciBcImF1dG9cIlxuICovXG52YXIgYXV0byA9IHtcbiAgICB0ZXN0OiBmdW5jdGlvbiAodikgeyByZXR1cm4gdiA9PT0gXCJhdXRvXCI7IH0sXG4gICAgcGFyc2U6IGZ1bmN0aW9uICh2KSB7IHJldHVybiB2OyB9LFxufTtcblxuLyoqXG4gKiBBIGxpc3Qgb2YgdmFsdWUgdHlwZXMgY29tbW9ubHkgdXNlZCBmb3IgZGltZW5zaW9uc1xuICovXG52YXIgZGltZW5zaW9uVmFsdWVUeXBlcyA9IFtzdHlsZVZhbHVlVHlwZXMubnVtYmVyLCBzdHlsZVZhbHVlVHlwZXMucHgsIHN0eWxlVmFsdWVUeXBlcy5wZXJjZW50LCBzdHlsZVZhbHVlVHlwZXMuZGVncmVlcywgc3R5bGVWYWx1ZVR5cGVzLnZ3LCBzdHlsZVZhbHVlVHlwZXMudmgsIGF1dG9dO1xuLyoqXG4gKiBUZXN0cyBhIGRpbWVuc2lvbmFsIHZhbHVlIGFnYWluc3QgdGhlIGxpc3Qgb2YgZGltZW5zaW9uIFZhbHVlVHlwZXNcbiAqL1xudmFyIGZpbmREaW1lbnNpb25WYWx1ZVR5cGUgPSBmdW5jdGlvbiAodikge1xuICAgIHJldHVybiBkaW1lbnNpb25WYWx1ZVR5cGVzLmZpbmQodGVzdFZhbHVlVHlwZSh2KSk7XG59O1xuXG4vKipcbiAqIEEgbGlzdCBvZiBhbGwgVmFsdWVUeXBlc1xuICovXG52YXIgdmFsdWVUeXBlcyA9IHRzbGliLl9fc3ByZWFkQXJyYXkodHNsaWIuX19zcHJlYWRBcnJheShbXSwgdHNsaWIuX19yZWFkKGRpbWVuc2lvblZhbHVlVHlwZXMpKSwgW3N0eWxlVmFsdWVUeXBlcy5jb2xvciwgc3R5bGVWYWx1ZVR5cGVzLmNvbXBsZXhdKTtcbi8qKlxuICogVGVzdHMgYSB2YWx1ZSBhZ2FpbnN0IHRoZSBsaXN0IG9mIFZhbHVlVHlwZXNcbiAqL1xudmFyIGZpbmRWYWx1ZVR5cGUgPSBmdW5jdGlvbiAodikgeyByZXR1cm4gdmFsdWVUeXBlcy5maW5kKHRlc3RWYWx1ZVR5cGUodikpOyB9O1xuXG4vKipcbiAqIFNldCBWaXN1YWxFbGVtZW50J3MgTW90aW9uVmFsdWUsIGNyZWF0aW5nIGEgbmV3IE1vdGlvblZhbHVlIGZvciBpdCBpZlxuICogaXQgZG9lc24ndCBleGlzdC5cbiAqL1xuZnVuY3Rpb24gc2V0TW90aW9uVmFsdWUodmlzdWFsRWxlbWVudCwga2V5LCB2YWx1ZSkge1xuICAgIGlmICh2aXN1YWxFbGVtZW50Lmhhc1ZhbHVlKGtleSkpIHtcbiAgICAgICAgdmlzdWFsRWxlbWVudC5nZXRWYWx1ZShrZXkpLnNldCh2YWx1ZSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB2aXN1YWxFbGVtZW50LmFkZFZhbHVlKGtleSwgbW90aW9uVmFsdWUodmFsdWUpKTtcbiAgICB9XG59XG5mdW5jdGlvbiBzZXRUYXJnZXQodmlzdWFsRWxlbWVudCwgZGVmaW5pdGlvbikge1xuICAgIHZhciByZXNvbHZlZCA9IHJlc29sdmVWYXJpYW50KHZpc3VhbEVsZW1lbnQsIGRlZmluaXRpb24pO1xuICAgIHZhciBfYSA9IHJlc29sdmVkXG4gICAgICAgID8gdmlzdWFsRWxlbWVudC5tYWtlVGFyZ2V0QW5pbWF0YWJsZShyZXNvbHZlZCwgZmFsc2UpXG4gICAgICAgIDoge30sIF9iID0gX2EudHJhbnNpdGlvbkVuZCwgdHJhbnNpdGlvbkVuZCA9IF9iID09PSB2b2lkIDAgPyB7fSA6IF9iOyBfYS50cmFuc2l0aW9uOyB2YXIgdGFyZ2V0ID0gdHNsaWIuX19yZXN0KF9hLCBbXCJ0cmFuc2l0aW9uRW5kXCIsIFwidHJhbnNpdGlvblwiXSk7XG4gICAgdGFyZ2V0ID0gdHNsaWIuX19hc3NpZ24odHNsaWIuX19hc3NpZ24oe30sIHRhcmdldCksIHRyYW5zaXRpb25FbmQpO1xuICAgIGZvciAodmFyIGtleSBpbiB0YXJnZXQpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gcmVzb2x2ZUZpbmFsVmFsdWVJbktleWZyYW1lcyh0YXJnZXRba2V5XSk7XG4gICAgICAgIHNldE1vdGlvblZhbHVlKHZpc3VhbEVsZW1lbnQsIGtleSwgdmFsdWUpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHNldFZhcmlhbnRzKHZpc3VhbEVsZW1lbnQsIHZhcmlhbnRMYWJlbHMpIHtcbiAgICB2YXIgcmV2ZXJzZWRMYWJlbHMgPSB0c2xpYi5fX3NwcmVhZEFycmF5KFtdLCB0c2xpYi5fX3JlYWQodmFyaWFudExhYmVscykpLnJldmVyc2UoKTtcbiAgICByZXZlcnNlZExhYmVscy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICB2YXIgdmFyaWFudCA9IHZpc3VhbEVsZW1lbnQuZ2V0VmFyaWFudChrZXkpO1xuICAgICAgICB2YXJpYW50ICYmIHNldFRhcmdldCh2aXN1YWxFbGVtZW50LCB2YXJpYW50KTtcbiAgICAgICAgKF9hID0gdmlzdWFsRWxlbWVudC52YXJpYW50Q2hpbGRyZW4pID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5mb3JFYWNoKGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgICAgICAgc2V0VmFyaWFudHMoY2hpbGQsIHZhcmlhbnRMYWJlbHMpO1xuICAgICAgICB9KTtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIHNldFZhbHVlcyh2aXN1YWxFbGVtZW50LCBkZWZpbml0aW9uKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZGVmaW5pdGlvbikpIHtcbiAgICAgICAgcmV0dXJuIHNldFZhcmlhbnRzKHZpc3VhbEVsZW1lbnQsIGRlZmluaXRpb24pO1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlb2YgZGVmaW5pdGlvbiA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICByZXR1cm4gc2V0VmFyaWFudHModmlzdWFsRWxlbWVudCwgW2RlZmluaXRpb25dKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHNldFRhcmdldCh2aXN1YWxFbGVtZW50LCBkZWZpbml0aW9uKTtcbiAgICB9XG59XG5mdW5jdGlvbiBjaGVja1RhcmdldEZvck5ld1ZhbHVlcyh2aXN1YWxFbGVtZW50LCB0YXJnZXQsIG9yaWdpbikge1xuICAgIHZhciBfYSwgX2IsIF9jO1xuICAgIHZhciBfZDtcbiAgICB2YXIgbmV3VmFsdWVLZXlzID0gT2JqZWN0LmtleXModGFyZ2V0KS5maWx0ZXIoZnVuY3Rpb24gKGtleSkgeyByZXR1cm4gIXZpc3VhbEVsZW1lbnQuaGFzVmFsdWUoa2V5KTsgfSk7XG4gICAgdmFyIG51bU5ld1ZhbHVlcyA9IG5ld1ZhbHVlS2V5cy5sZW5ndGg7XG4gICAgaWYgKCFudW1OZXdWYWx1ZXMpXG4gICAgICAgIHJldHVybjtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG51bU5ld1ZhbHVlczsgaSsrKSB7XG4gICAgICAgIHZhciBrZXkgPSBuZXdWYWx1ZUtleXNbaV07XG4gICAgICAgIHZhciB0YXJnZXRWYWx1ZSA9IHRhcmdldFtrZXldO1xuICAgICAgICB2YXIgdmFsdWUgPSBudWxsO1xuICAgICAgICAvKipcbiAgICAgICAgICogSWYgdGhlIHRhcmdldCBpcyBhIHNlcmllcyBvZiBrZXlmcmFtZXMsIHdlIGNhbiB1c2UgdGhlIGZpcnN0IHZhbHVlXG4gICAgICAgICAqIGluIHRoZSBhcnJheS4gSWYgdGhpcyBmaXJzdCB2YWx1ZSBpcyBudWxsLCB3ZSdsbCBzdGlsbCBuZWVkIHRvIHJlYWQgZnJvbSB0aGUgRE9NLlxuICAgICAgICAgKi9cbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodGFyZ2V0VmFsdWUpKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IHRhcmdldFZhbHVlWzBdO1xuICAgICAgICB9XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJZiB0aGUgdGFyZ2V0IGlzbid0IGtleWZyYW1lcywgb3IgdGhlIGZpcnN0IGtleWZyYW1lIHdhcyBudWxsLCB3ZSBuZWVkIHRvXG4gICAgICAgICAqIGZpcnN0IGNoZWNrIGlmIGFuIG9yaWdpbiB2YWx1ZSB3YXMgZXhwbGljaXRseSBkZWZpbmVkIGluIHRoZSB0cmFuc2l0aW9uIGFzIFwiZnJvbVwiLFxuICAgICAgICAgKiBpZiBub3QgcmVhZCB0aGUgdmFsdWUgZnJvbSB0aGUgRE9NLiBBcyBhbiBhYnNvbHV0ZSBmYWxsYmFjaywgdGFrZSB0aGUgZGVmaW5lZCB0YXJnZXQgdmFsdWUuXG4gICAgICAgICAqL1xuICAgICAgICBpZiAodmFsdWUgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHZhbHVlID0gKF9iID0gKF9hID0gb3JpZ2luW2tleV0pICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IHZpc3VhbEVsZW1lbnQucmVhZFZhbHVlKGtleSkpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IHRhcmdldFtrZXldO1xuICAgICAgICB9XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJZiB2YWx1ZSBpcyBzdGlsbCB1bmRlZmluZWQgb3IgbnVsbCwgaWdub3JlIGl0LiBQcmVmZXJhYmx5IHRoaXMgd291bGQgdGhyb3csXG4gICAgICAgICAqIGJ1dCB0aGlzIHdhcyBjYXVzaW5nIGlzc3VlcyBpbiBGcmFtZXIuXG4gICAgICAgICAqL1xuICAgICAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCB8fCB2YWx1ZSA9PT0gbnVsbClcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICYmIGlzTnVtZXJpY2FsU3RyaW5nKHZhbHVlKSkge1xuICAgICAgICAgICAgLy8gSWYgdGhpcyBpcyBhIG51bWJlciByZWFkIGFzIGEgc3RyaW5nLCBpZSBcIjBcIiBvciBcIjIwMFwiLCBjb252ZXJ0IGl0IHRvIGEgbnVtYmVyXG4gICAgICAgICAgICB2YWx1ZSA9IHBhcnNlRmxvYXQodmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKCFmaW5kVmFsdWVUeXBlKHZhbHVlKSAmJiBzdHlsZVZhbHVlVHlwZXMuY29tcGxleC50ZXN0KHRhcmdldFZhbHVlKSkge1xuICAgICAgICAgICAgdmFsdWUgPSBnZXRBbmltYXRhYmxlTm9uZShrZXksIHRhcmdldFZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICB2aXN1YWxFbGVtZW50LmFkZFZhbHVlKGtleSwgbW90aW9uVmFsdWUodmFsdWUpKTtcbiAgICAgICAgKF9jID0gKF9kID0gb3JpZ2luKVtrZXldKSAhPT0gbnVsbCAmJiBfYyAhPT0gdm9pZCAwID8gX2MgOiAoX2Rba2V5XSA9IHZhbHVlKTtcbiAgICAgICAgdmlzdWFsRWxlbWVudC5zZXRCYXNlVGFyZ2V0KGtleSwgdmFsdWUpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGdldE9yaWdpbkZyb21UcmFuc2l0aW9uKGtleSwgdHJhbnNpdGlvbikge1xuICAgIGlmICghdHJhbnNpdGlvbilcbiAgICAgICAgcmV0dXJuO1xuICAgIHZhciB2YWx1ZVRyYW5zaXRpb24gPSB0cmFuc2l0aW9uW2tleV0gfHwgdHJhbnNpdGlvbltcImRlZmF1bHRcIl0gfHwgdHJhbnNpdGlvbjtcbiAgICByZXR1cm4gdmFsdWVUcmFuc2l0aW9uLmZyb207XG59XG5mdW5jdGlvbiBnZXRPcmlnaW4odGFyZ2V0LCB0cmFuc2l0aW9uLCB2aXN1YWxFbGVtZW50KSB7XG4gICAgdmFyIF9hLCBfYjtcbiAgICB2YXIgb3JpZ2luID0ge307XG4gICAgZm9yICh2YXIga2V5IGluIHRhcmdldCkge1xuICAgICAgICBvcmlnaW5ba2V5XSA9XG4gICAgICAgICAgICAoX2EgPSBnZXRPcmlnaW5Gcm9tVHJhbnNpdGlvbihrZXksIHRyYW5zaXRpb24pKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiAoX2IgPSB2aXN1YWxFbGVtZW50LmdldFZhbHVlKGtleSkpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5nZXQoKTtcbiAgICB9XG4gICAgcmV0dXJuIG9yaWdpbjtcbn1cblxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZnVuY3Rpb24gYW5pbWF0ZVZpc3VhbEVsZW1lbnQodmlzdWFsRWxlbWVudCwgZGVmaW5pdGlvbiwgb3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHsgb3B0aW9ucyA9IHt9OyB9XG4gICAgdmlzdWFsRWxlbWVudC5ub3RpZnlBbmltYXRpb25TdGFydCgpO1xuICAgIHZhciBhbmltYXRpb247XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZGVmaW5pdGlvbikpIHtcbiAgICAgICAgdmFyIGFuaW1hdGlvbnMgPSBkZWZpbml0aW9uLm1hcChmdW5jdGlvbiAodmFyaWFudCkge1xuICAgICAgICAgICAgcmV0dXJuIGFuaW1hdGVWYXJpYW50KHZpc3VhbEVsZW1lbnQsIHZhcmlhbnQsIG9wdGlvbnMpO1xuICAgICAgICB9KTtcbiAgICAgICAgYW5pbWF0aW9uID0gUHJvbWlzZS5hbGwoYW5pbWF0aW9ucyk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGVvZiBkZWZpbml0aW9uID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIGFuaW1hdGlvbiA9IGFuaW1hdGVWYXJpYW50KHZpc3VhbEVsZW1lbnQsIGRlZmluaXRpb24sIG9wdGlvbnMpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdmFyIHJlc29sdmVkRGVmaW5pdGlvbiA9IHR5cGVvZiBkZWZpbml0aW9uID09PSBcImZ1bmN0aW9uXCJcbiAgICAgICAgICAgID8gcmVzb2x2ZVZhcmlhbnQodmlzdWFsRWxlbWVudCwgZGVmaW5pdGlvbiwgb3B0aW9ucy5jdXN0b20pXG4gICAgICAgICAgICA6IGRlZmluaXRpb247XG4gICAgICAgIGFuaW1hdGlvbiA9IGFuaW1hdGVUYXJnZXQodmlzdWFsRWxlbWVudCwgcmVzb2x2ZWREZWZpbml0aW9uLCBvcHRpb25zKTtcbiAgICB9XG4gICAgcmV0dXJuIGFuaW1hdGlvbi50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHZpc3VhbEVsZW1lbnQubm90aWZ5QW5pbWF0aW9uQ29tcGxldGUoZGVmaW5pdGlvbik7XG4gICAgfSk7XG59XG5mdW5jdGlvbiBhbmltYXRlVmFyaWFudCh2aXN1YWxFbGVtZW50LCB2YXJpYW50LCBvcHRpb25zKSB7XG4gICAgdmFyIF9hO1xuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHsgb3B0aW9ucyA9IHt9OyB9XG4gICAgdmFyIHJlc29sdmVkID0gcmVzb2x2ZVZhcmlhbnQodmlzdWFsRWxlbWVudCwgdmFyaWFudCwgb3B0aW9ucy5jdXN0b20pO1xuICAgIHZhciBfYiA9IChyZXNvbHZlZCB8fCB7fSkudHJhbnNpdGlvbiwgdHJhbnNpdGlvbiA9IF9iID09PSB2b2lkIDAgPyB2aXN1YWxFbGVtZW50LmdldERlZmF1bHRUcmFuc2l0aW9uKCkgfHwge30gOiBfYjtcbiAgICBpZiAob3B0aW9ucy50cmFuc2l0aW9uT3ZlcnJpZGUpIHtcbiAgICAgICAgdHJhbnNpdGlvbiA9IG9wdGlvbnMudHJhbnNpdGlvbk92ZXJyaWRlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBJZiB3ZSBoYXZlIGEgdmFyaWFudCwgY3JlYXRlIGEgY2FsbGJhY2sgdGhhdCBydW5zIGl0IGFzIGFuIGFuaW1hdGlvbi5cbiAgICAgKiBPdGhlcndpc2UsIHdlIHJlc29sdmUgYSBQcm9taXNlIGltbWVkaWF0ZWx5IGZvciBhIGNvbXBvc2FibGUgbm8tb3AuXG4gICAgICovXG4gICAgdmFyIGdldEFuaW1hdGlvbiA9IHJlc29sdmVkXG4gICAgICAgID8gZnVuY3Rpb24gKCkgeyByZXR1cm4gYW5pbWF0ZVRhcmdldCh2aXN1YWxFbGVtZW50LCByZXNvbHZlZCwgb3B0aW9ucyk7IH1cbiAgICAgICAgOiBmdW5jdGlvbiAoKSB7IHJldHVybiBQcm9taXNlLnJlc29sdmUoKTsgfTtcbiAgICAvKipcbiAgICAgKiBJZiB3ZSBoYXZlIGNoaWxkcmVuLCBjcmVhdGUgYSBjYWxsYmFjayB0aGF0IHJ1bnMgYWxsIHRoZWlyIGFuaW1hdGlvbnMuXG4gICAgICogT3RoZXJ3aXNlLCB3ZSByZXNvbHZlIGEgUHJvbWlzZSBpbW1lZGlhdGVseSBmb3IgYSBjb21wb3NhYmxlIG5vLW9wLlxuICAgICAqL1xuICAgIHZhciBnZXRDaGlsZEFuaW1hdGlvbnMgPSAoKF9hID0gdmlzdWFsRWxlbWVudC52YXJpYW50Q2hpbGRyZW4pID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5zaXplKVxuICAgICAgICA/IGZ1bmN0aW9uIChmb3J3YXJkRGVsYXkpIHtcbiAgICAgICAgICAgIGlmIChmb3J3YXJkRGVsYXkgPT09IHZvaWQgMCkgeyBmb3J3YXJkRGVsYXkgPSAwOyB9XG4gICAgICAgICAgICB2YXIgX2EgPSB0cmFuc2l0aW9uLmRlbGF5Q2hpbGRyZW4sIGRlbGF5Q2hpbGRyZW4gPSBfYSA9PT0gdm9pZCAwID8gMCA6IF9hLCBzdGFnZ2VyQ2hpbGRyZW4gPSB0cmFuc2l0aW9uLnN0YWdnZXJDaGlsZHJlbiwgc3RhZ2dlckRpcmVjdGlvbiA9IHRyYW5zaXRpb24uc3RhZ2dlckRpcmVjdGlvbjtcbiAgICAgICAgICAgIHJldHVybiBhbmltYXRlQ2hpbGRyZW4odmlzdWFsRWxlbWVudCwgdmFyaWFudCwgZGVsYXlDaGlsZHJlbiArIGZvcndhcmREZWxheSwgc3RhZ2dlckNoaWxkcmVuLCBzdGFnZ2VyRGlyZWN0aW9uLCBvcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgICA6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpOyB9O1xuICAgIC8qKlxuICAgICAqIElmIHRoZSB0cmFuc2l0aW9uIGV4cGxpY2l0bHkgZGVmaW5lcyBhIFwid2hlblwiIG9wdGlvbiwgd2UgbmVlZCB0byByZXNvbHZlIGVpdGhlclxuICAgICAqIHRoaXMgYW5pbWF0aW9uIG9yIGFsbCBjaGlsZHJlbiBhbmltYXRpb25zIGJlZm9yZSBwbGF5aW5nIHRoZSBvdGhlci5cbiAgICAgKi9cbiAgICB2YXIgd2hlbiA9IHRyYW5zaXRpb24ud2hlbjtcbiAgICBpZiAod2hlbikge1xuICAgICAgICB2YXIgX2MgPSB0c2xpYi5fX3JlYWQod2hlbiA9PT0gXCJiZWZvcmVDaGlsZHJlblwiXG4gICAgICAgICAgICA/IFtnZXRBbmltYXRpb24sIGdldENoaWxkQW5pbWF0aW9uc11cbiAgICAgICAgICAgIDogW2dldENoaWxkQW5pbWF0aW9ucywgZ2V0QW5pbWF0aW9uXSwgMiksIGZpcnN0ID0gX2NbMF0sIGxhc3QgPSBfY1sxXTtcbiAgICAgICAgcmV0dXJuIGZpcnN0KCkudGhlbihsYXN0KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLmFsbChbZ2V0QW5pbWF0aW9uKCksIGdldENoaWxkQW5pbWF0aW9ucyhvcHRpb25zLmRlbGF5KV0pO1xuICAgIH1cbn1cbi8qKlxuICogQGludGVybmFsXG4gKi9cbmZ1bmN0aW9uIGFuaW1hdGVUYXJnZXQodmlzdWFsRWxlbWVudCwgZGVmaW5pdGlvbiwgX2EpIHtcbiAgICB2YXIgX2I7XG4gICAgdmFyIF9jID0gX2EgPT09IHZvaWQgMCA/IHt9IDogX2EsIF9kID0gX2MuZGVsYXksIGRlbGF5ID0gX2QgPT09IHZvaWQgMCA/IDAgOiBfZCwgdHJhbnNpdGlvbk92ZXJyaWRlID0gX2MudHJhbnNpdGlvbk92ZXJyaWRlLCB0eXBlID0gX2MudHlwZTtcbiAgICB2YXIgX2UgPSB2aXN1YWxFbGVtZW50Lm1ha2VUYXJnZXRBbmltYXRhYmxlKGRlZmluaXRpb24pLCBfZiA9IF9lLnRyYW5zaXRpb24sIHRyYW5zaXRpb24gPSBfZiA9PT0gdm9pZCAwID8gdmlzdWFsRWxlbWVudC5nZXREZWZhdWx0VHJhbnNpdGlvbigpIDogX2YsIHRyYW5zaXRpb25FbmQgPSBfZS50cmFuc2l0aW9uRW5kLCB0YXJnZXQgPSB0c2xpYi5fX3Jlc3QoX2UsIFtcInRyYW5zaXRpb25cIiwgXCJ0cmFuc2l0aW9uRW5kXCJdKTtcbiAgICBpZiAodHJhbnNpdGlvbk92ZXJyaWRlKVxuICAgICAgICB0cmFuc2l0aW9uID0gdHJhbnNpdGlvbk92ZXJyaWRlO1xuICAgIHZhciBhbmltYXRpb25zID0gW107XG4gICAgdmFyIGFuaW1hdGlvblR5cGVTdGF0ZSA9IHR5cGUgJiYgKChfYiA9IHZpc3VhbEVsZW1lbnQuYW5pbWF0aW9uU3RhdGUpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5nZXRTdGF0ZSgpW3R5cGVdKTtcbiAgICBmb3IgKHZhciBrZXkgaW4gdGFyZ2V0KSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IHZpc3VhbEVsZW1lbnQuZ2V0VmFsdWUoa2V5KTtcbiAgICAgICAgdmFyIHZhbHVlVGFyZ2V0ID0gdGFyZ2V0W2tleV07XG4gICAgICAgIGlmICghdmFsdWUgfHxcbiAgICAgICAgICAgIHZhbHVlVGFyZ2V0ID09PSB1bmRlZmluZWQgfHxcbiAgICAgICAgICAgIChhbmltYXRpb25UeXBlU3RhdGUgJiZcbiAgICAgICAgICAgICAgICBzaG91bGRCbG9ja0FuaW1hdGlvbihhbmltYXRpb25UeXBlU3RhdGUsIGtleSkpKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgYW5pbWF0aW9uID0gc3RhcnRBbmltYXRpb24oa2V5LCB2YWx1ZSwgdmFsdWVUYXJnZXQsIHRzbGliLl9fYXNzaWduKHsgZGVsYXk6IGRlbGF5IH0sIHRyYW5zaXRpb24pKTtcbiAgICAgICAgYW5pbWF0aW9ucy5wdXNoKGFuaW1hdGlvbik7XG4gICAgfVxuICAgIHJldHVybiBQcm9taXNlLmFsbChhbmltYXRpb25zKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdHJhbnNpdGlvbkVuZCAmJiBzZXRUYXJnZXQodmlzdWFsRWxlbWVudCwgdHJhbnNpdGlvbkVuZCk7XG4gICAgfSk7XG59XG5mdW5jdGlvbiBhbmltYXRlQ2hpbGRyZW4odmlzdWFsRWxlbWVudCwgdmFyaWFudCwgZGVsYXlDaGlsZHJlbiwgc3RhZ2dlckNoaWxkcmVuLCBzdGFnZ2VyRGlyZWN0aW9uLCBvcHRpb25zKSB7XG4gICAgaWYgKGRlbGF5Q2hpbGRyZW4gPT09IHZvaWQgMCkgeyBkZWxheUNoaWxkcmVuID0gMDsgfVxuICAgIGlmIChzdGFnZ2VyQ2hpbGRyZW4gPT09IHZvaWQgMCkgeyBzdGFnZ2VyQ2hpbGRyZW4gPSAwOyB9XG4gICAgaWYgKHN0YWdnZXJEaXJlY3Rpb24gPT09IHZvaWQgMCkgeyBzdGFnZ2VyRGlyZWN0aW9uID0gMTsgfVxuICAgIHZhciBhbmltYXRpb25zID0gW107XG4gICAgdmFyIG1heFN0YWdnZXJEdXJhdGlvbiA9ICh2aXN1YWxFbGVtZW50LnZhcmlhbnRDaGlsZHJlbi5zaXplIC0gMSkgKiBzdGFnZ2VyQ2hpbGRyZW47XG4gICAgdmFyIGdlbmVyYXRlU3RhZ2dlckR1cmF0aW9uID0gc3RhZ2dlckRpcmVjdGlvbiA9PT0gMVxuICAgICAgICA/IGZ1bmN0aW9uIChpKSB7XG4gICAgICAgICAgICBpZiAoaSA9PT0gdm9pZCAwKSB7IGkgPSAwOyB9XG4gICAgICAgICAgICByZXR1cm4gaSAqIHN0YWdnZXJDaGlsZHJlbjtcbiAgICAgICAgfVxuICAgICAgICA6IGZ1bmN0aW9uIChpKSB7XG4gICAgICAgICAgICBpZiAoaSA9PT0gdm9pZCAwKSB7IGkgPSAwOyB9XG4gICAgICAgICAgICByZXR1cm4gbWF4U3RhZ2dlckR1cmF0aW9uIC0gaSAqIHN0YWdnZXJDaGlsZHJlbjtcbiAgICAgICAgfTtcbiAgICBBcnJheS5mcm9tKHZpc3VhbEVsZW1lbnQudmFyaWFudENoaWxkcmVuKVxuICAgICAgICAuc29ydChzb3J0QnlUcmVlT3JkZXIpXG4gICAgICAgIC5mb3JFYWNoKGZ1bmN0aW9uIChjaGlsZCwgaSkge1xuICAgICAgICBhbmltYXRpb25zLnB1c2goYW5pbWF0ZVZhcmlhbnQoY2hpbGQsIHZhcmlhbnQsIHRzbGliLl9fYXNzaWduKHRzbGliLl9fYXNzaWduKHt9LCBvcHRpb25zKSwgeyBkZWxheTogZGVsYXlDaGlsZHJlbiArIGdlbmVyYXRlU3RhZ2dlckR1cmF0aW9uKGkpIH0pKS50aGVuKGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNoaWxkLm5vdGlmeUFuaW1hdGlvbkNvbXBsZXRlKHZhcmlhbnQpOyB9KSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIFByb21pc2UuYWxsKGFuaW1hdGlvbnMpO1xufVxuZnVuY3Rpb24gc3RvcEFuaW1hdGlvbih2aXN1YWxFbGVtZW50KSB7XG4gICAgdmlzdWFsRWxlbWVudC5mb3JFYWNoVmFsdWUoZnVuY3Rpb24gKHZhbHVlKSB7IHJldHVybiB2YWx1ZS5zdG9wKCk7IH0pO1xufVxuZnVuY3Rpb24gc29ydEJ5VHJlZU9yZGVyKGEsIGIpIHtcbiAgICByZXR1cm4gYS5zb3J0Tm9kZVBvc2l0aW9uKGIpO1xufVxuLyoqXG4gKiBEZWNpZGUgd2hldGhlciB3ZSBzaG91bGQgYmxvY2sgdGhpcyBhbmltYXRpb24uIFByZXZpb3VzbHksIHdlIGFjaGlldmVkIHRoaXNcbiAqIGp1c3QgYnkgY2hlY2tpbmcgd2hldGhlciB0aGUga2V5IHdhcyBsaXN0ZWQgaW4gcHJvdGVjdGVkS2V5cywgYnV0IHRoaXNcbiAqIHBvc2VkIHByb2JsZW1zIGlmIGFuIGFuaW1hdGlvbiB3YXMgdHJpZ2dlcmVkIGJ5IGFmdGVyQ2hpbGRyZW4gYW5kIHByb3RlY3RlZEtleXNcbiAqIGhhZCBiZWVuIHNldCB0byB0cnVlIGluIHRoZSBtZWFudGltZS5cbiAqL1xuZnVuY3Rpb24gc2hvdWxkQmxvY2tBbmltYXRpb24oX2EsIGtleSkge1xuICAgIHZhciBwcm90ZWN0ZWRLZXlzID0gX2EucHJvdGVjdGVkS2V5cywgbmVlZHNBbmltYXRpbmcgPSBfYS5uZWVkc0FuaW1hdGluZztcbiAgICB2YXIgc2hvdWxkQmxvY2sgPSBwcm90ZWN0ZWRLZXlzLmhhc093blByb3BlcnR5KGtleSkgJiYgbmVlZHNBbmltYXRpbmdba2V5XSAhPT0gdHJ1ZTtcbiAgICBuZWVkc0FuaW1hdGluZ1trZXldID0gZmFsc2U7XG4gICAgcmV0dXJuIHNob3VsZEJsb2NrO1xufVxuXG52YXIgdmFyaWFudFByaW9yaXR5T3JkZXIgPSBbXG4gICAgQW5pbWF0aW9uVHlwZS5BbmltYXRlLFxuICAgIEFuaW1hdGlvblR5cGUuSG92ZXIsXG4gICAgQW5pbWF0aW9uVHlwZS5UYXAsXG4gICAgQW5pbWF0aW9uVHlwZS5EcmFnLFxuICAgIEFuaW1hdGlvblR5cGUuRm9jdXMsXG4gICAgQW5pbWF0aW9uVHlwZS5FeGl0LFxuXTtcbnZhciByZXZlcnNlUHJpb3JpdHlPcmRlciA9IHRzbGliLl9fc3ByZWFkQXJyYXkoW10sIHRzbGliLl9fcmVhZCh2YXJpYW50UHJpb3JpdHlPcmRlcikpLnJldmVyc2UoKTtcbnZhciBudW1BbmltYXRpb25UeXBlcyA9IHZhcmlhbnRQcmlvcml0eU9yZGVyLmxlbmd0aDtcbmZ1bmN0aW9uIGFuaW1hdGVMaXN0KHZpc3VhbEVsZW1lbnQpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGFuaW1hdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UuYWxsKGFuaW1hdGlvbnMubWFwKGZ1bmN0aW9uIChfYSkge1xuICAgICAgICAgICAgdmFyIGFuaW1hdGlvbiA9IF9hLmFuaW1hdGlvbiwgb3B0aW9ucyA9IF9hLm9wdGlvbnM7XG4gICAgICAgICAgICByZXR1cm4gYW5pbWF0ZVZpc3VhbEVsZW1lbnQodmlzdWFsRWxlbWVudCwgYW5pbWF0aW9uLCBvcHRpb25zKTtcbiAgICAgICAgfSkpO1xuICAgIH07XG59XG5mdW5jdGlvbiBjcmVhdGVBbmltYXRpb25TdGF0ZSh2aXN1YWxFbGVtZW50KSB7XG4gICAgdmFyIGFuaW1hdGUgPSBhbmltYXRlTGlzdCh2aXN1YWxFbGVtZW50KTtcbiAgICB2YXIgc3RhdGUgPSBjcmVhdGVTdGF0ZSgpO1xuICAgIHZhciBhbGxBbmltYXRlZEtleXMgPSB7fTtcbiAgICB2YXIgaXNJbml0aWFsUmVuZGVyID0gdHJ1ZTtcbiAgICAvKipcbiAgICAgKiBUaGlzIGZ1bmN0aW9uIHdpbGwgYmUgdXNlZCB0byByZWR1Y2UgdGhlIGFuaW1hdGlvbiBkZWZpbml0aW9ucyBmb3JcbiAgICAgKiBlYWNoIGFjdGl2ZSBhbmltYXRpb24gdHlwZSBpbnRvIGFuIG9iamVjdCBvZiByZXNvbHZlZCB2YWx1ZXMgZm9yIGl0LlxuICAgICAqL1xuICAgIHZhciBidWlsZFJlc29sdmVkVHlwZVZhbHVlcyA9IGZ1bmN0aW9uIChhY2MsIGRlZmluaXRpb24pIHtcbiAgICAgICAgdmFyIHJlc29sdmVkID0gcmVzb2x2ZVZhcmlhbnQodmlzdWFsRWxlbWVudCwgZGVmaW5pdGlvbik7XG4gICAgICAgIGlmIChyZXNvbHZlZCkge1xuICAgICAgICAgICAgcmVzb2x2ZWQudHJhbnNpdGlvbjsgdmFyIHRyYW5zaXRpb25FbmQgPSByZXNvbHZlZC50cmFuc2l0aW9uRW5kLCB0YXJnZXQgPSB0c2xpYi5fX3Jlc3QocmVzb2x2ZWQsIFtcInRyYW5zaXRpb25cIiwgXCJ0cmFuc2l0aW9uRW5kXCJdKTtcbiAgICAgICAgICAgIGFjYyA9IHRzbGliLl9fYXNzaWduKHRzbGliLl9fYXNzaWduKHRzbGliLl9fYXNzaWduKHt9LCBhY2MpLCB0YXJnZXQpLCB0cmFuc2l0aW9uRW5kKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYWNjO1xuICAgIH07XG4gICAgZnVuY3Rpb24gaXNBbmltYXRlZChrZXkpIHtcbiAgICAgICAgcmV0dXJuIGFsbEFuaW1hdGVkS2V5c1trZXldICE9PSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRoaXMganVzdCBhbGxvd3MgdXMgdG8gaW5qZWN0IG1vY2tlZCBhbmltYXRpb24gZnVuY3Rpb25zXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2V0QW5pbWF0ZUZ1bmN0aW9uKG1ha2VBbmltYXRvcikge1xuICAgICAgICBhbmltYXRlID0gbWFrZUFuaW1hdG9yKHZpc3VhbEVsZW1lbnQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBXaGVuIHdlIHJlY2VpdmUgbmV3IHByb3BzLCB3ZSBuZWVkIHRvOlxuICAgICAqIDEuIENyZWF0ZSBhIGxpc3Qgb2YgcHJvdGVjdGVkIGtleXMgZm9yIGVhY2ggdHlwZS4gVGhpcyBpcyBhIGRpcmVjdG9yeSBvZlxuICAgICAqICAgIHZhbHVlIGtleXMgdGhhdCBhcmUgY3VycmVudGx5IGJlaW5nIFwiaGFuZGxlZFwiIGJ5IHR5cGVzIG9mIGEgaGlnaGVyIHByaW9yaXR5XG4gICAgICogICAgc28gdGhhdCB3aGVuZXZlciBhbiBhbmltYXRpb24gaXMgcGxheWVkIG9mIGEgZ2l2ZW4gdHlwZSwgdGhlc2UgdmFsdWVzIGFyZVxuICAgICAqICAgIHByb3RlY3RlZCBmcm9tIGJlaW5nIGFuaW1hdGVkLlxuICAgICAqIDIuIERldGVybWluZSBpZiBhbiBhbmltYXRpb24gdHlwZSBuZWVkcyBhbmltYXRpbmcuXG4gICAgICogMy4gRGV0ZXJtaW5lIGlmIGFueSB2YWx1ZXMgaGF2ZSBiZWVuIHJlbW92ZWQgZnJvbSBhIHR5cGUgYW5kIGZpZ3VyZSBvdXRcbiAgICAgKiAgICB3aGF0IHRvIGFuaW1hdGUgdGhvc2UgdG8uXG4gICAgICovXG4gICAgZnVuY3Rpb24gYW5pbWF0ZUNoYW5nZXMob3B0aW9ucywgY2hhbmdlZEFjdGl2ZVR5cGUpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICB2YXIgcHJvcHMgPSB2aXN1YWxFbGVtZW50LmdldFByb3BzKCk7XG4gICAgICAgIHZhciBjb250ZXh0ID0gdmlzdWFsRWxlbWVudC5nZXRWYXJpYW50Q29udGV4dCh0cnVlKSB8fCB7fTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEEgbGlzdCBvZiBhbmltYXRpb25zIHRoYXQgd2UnbGwgYnVpbGQgaW50byBhcyB3ZSBpdGVyYXRlIHRocm91Z2ggdGhlIGFuaW1hdGlvblxuICAgICAgICAgKiB0eXBlcy4gVGhpcyB3aWxsIGdldCBleGVjdXRlZCBhdCB0aGUgZW5kIG9mIHRoZSBmdW5jdGlvbi5cbiAgICAgICAgICovXG4gICAgICAgIHZhciBhbmltYXRpb25zID0gW107XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBLZWVwIHRyYWNrIG9mIHdoaWNoIHZhbHVlcyBoYXZlIGJlZW4gcmVtb3ZlZC4gVGhlbiwgYXMgd2UgaGl0IGxvd2VyIHByaW9yaXR5XG4gICAgICAgICAqIGFuaW1hdGlvbiB0eXBlcywgd2UgY2FuIGNoZWNrIGlmIHRoZXkgY29udGFpbiByZW1vdmVkIHZhbHVlcyBhbmQgYW5pbWF0ZSB0byB0aGF0LlxuICAgICAgICAgKi9cbiAgICAgICAgdmFyIHJlbW92ZWRLZXlzID0gbmV3IFNldCgpO1xuICAgICAgICAvKipcbiAgICAgICAgICogQSBkaWN0aW9uYXJ5IG9mIGFsbCBlbmNvdW50ZXJlZCBrZXlzLiBUaGlzIGlzIGFuIG9iamVjdCB0byBsZXQgdXMgYnVpbGQgaW50byBhbmRcbiAgICAgICAgICogY29weSBpdCB3aXRob3V0IGl0ZXJhdGlvbi4gRWFjaCB0aW1lIHdlIGhpdCBhbiBhbmltYXRpb24gdHlwZSB3ZSBzZXQgaXRzIHByb3RlY3RlZFxuICAgICAgICAgKiBrZXlzIC0gdGhlIGtleXMgaXRzIG5vdCBhbGxvd2VkIHRvIGFuaW1hdGUgLSB0byB0aGUgbGF0ZXN0IHZlcnNpb24gb2YgdGhpcyBvYmplY3QuXG4gICAgICAgICAqL1xuICAgICAgICB2YXIgZW5jb3VudGVyZWRLZXlzID0ge307XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJZiBhIHZhcmlhbnQgaGFzIGJlZW4gcmVtb3ZlZCBhdCBhIGdpdmVuIGluZGV4LCBhbmQgdGhpcyBjb21wb25lbnQgaXMgY29udHJvbGxpbmdcbiAgICAgICAgICogdmFyaWFudCBhbmltYXRpb25zLCB3ZSB3YW50IHRvIGVuc3VyZSBsb3dlci1wcmlvcml0eSB2YXJpYW50cyBhcmUgZm9yY2VkIHRvIGFuaW1hdGUuXG4gICAgICAgICAqL1xuICAgICAgICB2YXIgcmVtb3ZlZFZhcmlhbnRJbmRleCA9IEluZmluaXR5O1xuICAgICAgICB2YXIgX2xvb3BfMSA9IGZ1bmN0aW9uIChpKSB7XG4gICAgICAgICAgICB2YXIgdHlwZSA9IHJldmVyc2VQcmlvcml0eU9yZGVyW2ldO1xuICAgICAgICAgICAgdmFyIHR5cGVTdGF0ZSA9IHN0YXRlW3R5cGVdO1xuICAgICAgICAgICAgdmFyIHByb3AgPSAoX2EgPSBwcm9wc1t0eXBlXSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogY29udGV4dFt0eXBlXTtcbiAgICAgICAgICAgIHZhciBwcm9wSXNWYXJpYW50ID0gaXNWYXJpYW50TGFiZWwocHJvcCk7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIElmIHRoaXMgdHlwZSBoYXMgKmp1c3QqIGNoYW5nZWQgaXNBY3RpdmUgc3RhdHVzLCBzZXQgYWN0aXZlRGVsdGFcbiAgICAgICAgICAgICAqIHRvIHRoYXQgc3RhdHVzLiBPdGhlcndpc2Ugc2V0IHRvIG51bGwuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHZhciBhY3RpdmVEZWx0YSA9IHR5cGUgPT09IGNoYW5nZWRBY3RpdmVUeXBlID8gdHlwZVN0YXRlLmlzQWN0aXZlIDogbnVsbDtcbiAgICAgICAgICAgIGlmIChhY3RpdmVEZWx0YSA9PT0gZmFsc2UpXG4gICAgICAgICAgICAgICAgcmVtb3ZlZFZhcmlhbnRJbmRleCA9IGk7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIElmIHRoaXMgcHJvcCBpcyBhbiBpbmhlcml0ZWQgdmFyaWFudCwgcmF0aGVyIHRoYW4gYmVlbiBzZXQgZGlyZWN0bHkgb24gdGhlXG4gICAgICAgICAgICAgKiBjb21wb25lbnQgaXRzZWxmLCB3ZSB3YW50IHRvIG1ha2Ugc3VyZSB3ZSBhbGxvdyB0aGUgcGFyZW50IHRvIHRyaWdnZXIgYW5pbWF0aW9ucy5cbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBUT0RPOiBDYW4gcHJvYmFibHkgY2hhbmdlIHRoaXMgdG8gYSAhaXNDb250cm9sbGluZ1ZhcmlhbnRzIGNoZWNrXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHZhciBpc0luaGVyaXRlZCA9IHByb3AgPT09IGNvbnRleHRbdHlwZV0gJiYgcHJvcCAhPT0gcHJvcHNbdHlwZV0gJiYgcHJvcElzVmFyaWFudDtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgaWYgKGlzSW5oZXJpdGVkICYmXG4gICAgICAgICAgICAgICAgaXNJbml0aWFsUmVuZGVyICYmXG4gICAgICAgICAgICAgICAgdmlzdWFsRWxlbWVudC5tYW51YWxseUFuaW1hdGVPbk1vdW50KSB7XG4gICAgICAgICAgICAgICAgaXNJbmhlcml0ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogU2V0IGFsbCBlbmNvdW50ZXJlZCBrZXlzIHNvIGZhciBhcyB0aGUgcHJvdGVjdGVkIGtleXMgZm9yIHRoaXMgdHlwZS4gVGhpcyB3aWxsXG4gICAgICAgICAgICAgKiBiZSBhbnkga2V5IHRoYXQgaGFzIGJlZW4gYW5pbWF0ZWQgb3Igb3RoZXJ3aXNlIGhhbmRsZWQgYnkgYWN0aXZlLCBoaWdoZXItcHJpb3J0aXkgdHlwZXMuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHR5cGVTdGF0ZS5wcm90ZWN0ZWRLZXlzID0gdHNsaWIuX19hc3NpZ24oe30sIGVuY291bnRlcmVkS2V5cyk7XG4gICAgICAgICAgICAvLyBDaGVjayBpZiB3ZSBjYW4gc2tpcCBhbmFseXNpbmcgdGhpcyBwcm9wIGVhcmx5XG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAvLyBJZiBpdCBpc24ndCBhY3RpdmUgYW5kIGhhc24ndCAqanVzdCogYmVlbiBzZXQgYXMgaW5hY3RpdmVcbiAgICAgICAgICAgICghdHlwZVN0YXRlLmlzQWN0aXZlICYmIGFjdGl2ZURlbHRhID09PSBudWxsKSB8fFxuICAgICAgICAgICAgICAgIC8vIElmIHdlIGRpZG4ndCBhbmQgZG9uJ3QgaGF2ZSBhbnkgZGVmaW5lZCBwcm9wIGZvciB0aGlzIGFuaW1hdGlvbiB0eXBlXG4gICAgICAgICAgICAgICAgKCFwcm9wICYmICF0eXBlU3RhdGUucHJldlByb3ApIHx8XG4gICAgICAgICAgICAgICAgLy8gT3IgaWYgdGhlIHByb3AgZG9lc24ndCBkZWZpbmUgYW4gYW5pbWF0aW9uXG4gICAgICAgICAgICAgICAgaXNBbmltYXRpb25Db250cm9scyhwcm9wKSB8fFxuICAgICAgICAgICAgICAgIHR5cGVvZiBwcm9wID09PSBcImJvb2xlYW5cIikge1xuICAgICAgICAgICAgICAgIHJldHVybiBcImNvbnRpbnVlXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEFzIHdlIGdvIGxvb2sgdGhyb3VnaCB0aGUgdmFsdWVzIGRlZmluZWQgb24gdGhpcyB0eXBlLCBpZiB3ZSBkZXRlY3RcbiAgICAgICAgICAgICAqIGEgY2hhbmdlZCB2YWx1ZSBvciBhIHZhbHVlIHRoYXQgd2FzIHJlbW92ZWQgaW4gYSBoaWdoZXIgcHJpb3JpdHksIHdlIHNldFxuICAgICAgICAgICAgICogdGhpcyB0byB0cnVlIGFuZCBhZGQgdGhpcyBwcm9wIHRvIHRoZSBhbmltYXRpb24gbGlzdC5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgdmFyIHNob3VsZEFuaW1hdGVUeXBlID0gdmFyaWFudHNIYXZlQ2hhbmdlZCh0eXBlU3RhdGUucHJldlByb3AsIHByb3ApIHx8XG4gICAgICAgICAgICAgICAgLy8gSWYgd2UncmUgbWFraW5nIHRoaXMgdmFyaWFudCBhY3RpdmUsIHdlIHdhbnQgdG8gYWx3YXlzIG1ha2UgaXQgYWN0aXZlXG4gICAgICAgICAgICAgICAgKHR5cGUgPT09IGNoYW5nZWRBY3RpdmVUeXBlICYmXG4gICAgICAgICAgICAgICAgICAgIHR5cGVTdGF0ZS5pc0FjdGl2ZSAmJlxuICAgICAgICAgICAgICAgICAgICAhaXNJbmhlcml0ZWQgJiZcbiAgICAgICAgICAgICAgICAgICAgcHJvcElzVmFyaWFudCkgfHxcbiAgICAgICAgICAgICAgICAvLyBJZiB3ZSByZW1vdmVkIGEgaGlnaGVyLXByaW9yaXR5IHZhcmlhbnQgKGkgaXMgaW4gcmV2ZXJzZSBvcmRlcilcbiAgICAgICAgICAgICAgICAoaSA+IHJlbW92ZWRWYXJpYW50SW5kZXggJiYgcHJvcElzVmFyaWFudCk7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEFzIGFuaW1hdGlvbnMgY2FuIGJlIHNldCBhcyB2YXJpYW50IGxpc3RzLCB2YXJpYW50cyBvciB0YXJnZXQgb2JqZWN0cywgd2VcbiAgICAgICAgICAgICAqIGNvZXJjZSBldmVyeXRoaW5nIHRvIGFuIGFycmF5IGlmIGl0IGlzbid0IG9uZSBhbHJlYWR5XG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHZhciBkZWZpbml0aW9uTGlzdCA9IEFycmF5LmlzQXJyYXkocHJvcCkgPyBwcm9wIDogW3Byb3BdO1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBCdWlsZCBhbiBvYmplY3Qgb2YgYWxsIHRoZSByZXNvbHZlZCB2YWx1ZXMuIFdlJ2xsIHVzZSB0aGlzIGluIHRoZSBzdWJzZXF1ZW50XG4gICAgICAgICAgICAgKiBhbmltYXRlQ2hhbmdlcyBjYWxscyB0byBkZXRlcm1pbmUgd2hldGhlciBhIHZhbHVlIGhhcyBjaGFuZ2VkLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICB2YXIgcmVzb2x2ZWRWYWx1ZXMgPSBkZWZpbml0aW9uTGlzdC5yZWR1Y2UoYnVpbGRSZXNvbHZlZFR5cGVWYWx1ZXMsIHt9KTtcbiAgICAgICAgICAgIGlmIChhY3RpdmVEZWx0YSA9PT0gZmFsc2UpXG4gICAgICAgICAgICAgICAgcmVzb2x2ZWRWYWx1ZXMgPSB7fTtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogTm93IHdlIG5lZWQgdG8gbG9vcCB0aHJvdWdoIGFsbCB0aGUga2V5cyBpbiB0aGUgcHJldiBwcm9wIGFuZCB0aGlzIHByb3AsXG4gICAgICAgICAgICAgKiBhbmQgZGVjaWRlOlxuICAgICAgICAgICAgICogMS4gSWYgdGhlIHZhbHVlIGhhcyBjaGFuZ2VkLCBhbmQgbmVlZHMgYW5pbWF0aW5nXG4gICAgICAgICAgICAgKiAyLiBJZiBpdCBoYXMgYmVlbiByZW1vdmVkLCBhbmQgbmVlZHMgYWRkaW5nIHRvIHRoZSByZW1vdmVkS2V5cyBzZXRcbiAgICAgICAgICAgICAqIDMuIElmIGl0IGhhcyBiZWVuIHJlbW92ZWQgaW4gYSBoaWdoZXIgcHJpb3JpdHkgdHlwZSBhbmQgbmVlZHMgYW5pbWF0aW5nXG4gICAgICAgICAgICAgKiA0LiBJZiBpdCBoYXNuJ3QgYmVlbiByZW1vdmVkIGluIGEgaGlnaGVyIHByaW9yaXR5IGJ1dCBoYXNuJ3QgY2hhbmdlZCwgYW5kXG4gICAgICAgICAgICAgKiAgICBuZWVkcyBhZGRpbmcgdG8gdGhlIHR5cGUncyBwcm90ZWN0ZWRLZXlzIGxpc3QuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHZhciBfYiA9IHR5cGVTdGF0ZS5wcmV2UmVzb2x2ZWRWYWx1ZXMsIHByZXZSZXNvbHZlZFZhbHVlcyA9IF9iID09PSB2b2lkIDAgPyB7fSA6IF9iO1xuICAgICAgICAgICAgdmFyIGFsbEtleXMgPSB0c2xpYi5fX2Fzc2lnbih0c2xpYi5fX2Fzc2lnbih7fSwgcHJldlJlc29sdmVkVmFsdWVzKSwgcmVzb2x2ZWRWYWx1ZXMpO1xuICAgICAgICAgICAgdmFyIG1hcmtUb0FuaW1hdGUgPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgICAgICAgc2hvdWxkQW5pbWF0ZVR5cGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHJlbW92ZWRLZXlzLmRlbGV0ZShrZXkpO1xuICAgICAgICAgICAgICAgIHR5cGVTdGF0ZS5uZWVkc0FuaW1hdGluZ1trZXldID0gdHJ1ZTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gYWxsS2V5cykge1xuICAgICAgICAgICAgICAgIHZhciBuZXh0ID0gcmVzb2x2ZWRWYWx1ZXNba2V5XTtcbiAgICAgICAgICAgICAgICB2YXIgcHJldiA9IHByZXZSZXNvbHZlZFZhbHVlc1trZXldO1xuICAgICAgICAgICAgICAgIC8vIElmIHdlJ3ZlIGFscmVhZHkgaGFuZGxlZCB0aGlzIHdlIGNhbiBqdXN0IHNraXAgYWhlYWRcbiAgICAgICAgICAgICAgICBpZiAoZW5jb3VudGVyZWRLZXlzLmhhc093blByb3BlcnR5KGtleSkpXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAqIElmIHRoZSB2YWx1ZSBoYXMgY2hhbmdlZCwgd2UgcHJvYmFibHkgd2FudCB0byBhbmltYXRlIGl0LlxuICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgIGlmIChuZXh0ICE9PSBwcmV2KSB7XG4gICAgICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAgICAgKiBJZiBib3RoIHZhbHVlcyBhcmUga2V5ZnJhbWVzLCB3ZSBuZWVkIHRvIHNoYWxsb3cgY29tcGFyZSB0aGVtIHRvXG4gICAgICAgICAgICAgICAgICAgICAqIGRldGVjdCB3aGV0aGVyIGFueSB2YWx1ZSBoYXMgY2hhbmdlZC4gSWYgaXQgaGFzLCB3ZSBhbmltYXRlIGl0LlxuICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzS2V5ZnJhbWVzVGFyZ2V0KG5leHQpICYmIGlzS2V5ZnJhbWVzVGFyZ2V0KHByZXYpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXNoYWxsb3dDb21wYXJlKG5leHQsIHByZXYpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFya1RvQW5pbWF0ZShrZXkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICogSWYgaXQgaGFzbid0IGNoYW5nZWQsIHdlIHdhbnQgdG8gZW5zdXJlIGl0IGRvZXNuJ3QgYW5pbWF0ZSBieVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIGFkZGluZyBpdCB0byB0aGUgbGlzdCBvZiBwcm90ZWN0ZWQga2V5cy5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlU3RhdGUucHJvdGVjdGVkS2V5c1trZXldID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChuZXh0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIElmIG5leHQgaXMgZGVmaW5lZCBhbmQgZG9lc24ndCBlcXVhbCBwcmV2LCBpdCBuZWVkcyBhbmltYXRpbmdcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hcmtUb0FuaW1hdGUoa2V5KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIElmIGl0J3MgdW5kZWZpbmVkLCBpdCdzIGJlZW4gcmVtb3ZlZC5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbW92ZWRLZXlzLmFkZChrZXkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKG5leHQgIT09IHVuZGVmaW5lZCAmJiByZW1vdmVkS2V5cy5oYXMoa2V5KSkge1xuICAgICAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgICAgICogSWYgbmV4dCBoYXNuJ3QgY2hhbmdlZCBhbmQgaXQgaXNuJ3QgdW5kZWZpbmVkLCB3ZSB3YW50IHRvIGNoZWNrIGlmIGl0J3NcbiAgICAgICAgICAgICAgICAgICAgICogYmVlbiByZW1vdmVkIGJ5IGEgaGlnaGVyIHByaW9yaXR5XG4gICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgICBtYXJrVG9BbmltYXRlKGtleSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgICAgICogSWYgaXQgaGFzbid0IGNoYW5nZWQsIHdlIGFkZCBpdCB0byB0aGUgbGlzdCBvZiBwcm90ZWN0ZWQgdmFsdWVzXG4gICAgICAgICAgICAgICAgICAgICAqIHRvIGVuc3VyZSBpdCBkb2Vzbid0IGdldCBhbmltYXRlZC5cbiAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgICAgIHR5cGVTdGF0ZS5wcm90ZWN0ZWRLZXlzW2tleV0gPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogVXBkYXRlIHRoZSB0eXBlU3RhdGUgc28gbmV4dCB0aW1lIGFuaW1hdGVDaGFuZ2VzIGlzIGNhbGxlZCB3ZSBjYW4gY29tcGFyZSB0aGVcbiAgICAgICAgICAgICAqIGxhdGVzdCBwcm9wIGFuZCByZXNvbHZlZFZhbHVlcyB0byB0aGVzZS5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgdHlwZVN0YXRlLnByZXZQcm9wID0gcHJvcDtcbiAgICAgICAgICAgIHR5cGVTdGF0ZS5wcmV2UmVzb2x2ZWRWYWx1ZXMgPSByZXNvbHZlZFZhbHVlcztcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgaWYgKHR5cGVTdGF0ZS5pc0FjdGl2ZSkge1xuICAgICAgICAgICAgICAgIGVuY291bnRlcmVkS2V5cyA9IHRzbGliLl9fYXNzaWduKHRzbGliLl9fYXNzaWduKHt9LCBlbmNvdW50ZXJlZEtleXMpLCByZXNvbHZlZFZhbHVlcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaXNJbml0aWFsUmVuZGVyICYmIHZpc3VhbEVsZW1lbnQuYmxvY2tJbml0aWFsQW5pbWF0aW9uKSB7XG4gICAgICAgICAgICAgICAgc2hvdWxkQW5pbWF0ZVR5cGUgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogSWYgdGhpcyBpcyBhbiBpbmhlcml0ZWQgcHJvcCB3ZSB3YW50IHRvIGhhcmQtYmxvY2sgYW5pbWF0aW9uc1xuICAgICAgICAgICAgICogVE9ETzogVGVzdCBhcyB0aGlzIHNob3VsZCBwcm9iYWJseSBzdGlsbCBoYW5kbGUgYW5pbWF0aW9ucyB0cmlnZ2VyZWRcbiAgICAgICAgICAgICAqIGJ5IHJlbW92ZWQgdmFsdWVzP1xuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBpZiAoc2hvdWxkQW5pbWF0ZVR5cGUgJiYgIWlzSW5oZXJpdGVkKSB7XG4gICAgICAgICAgICAgICAgYW5pbWF0aW9ucy5wdXNoLmFwcGx5KGFuaW1hdGlvbnMsIHRzbGliLl9fc3ByZWFkQXJyYXkoW10sIHRzbGliLl9fcmVhZChkZWZpbml0aW9uTGlzdC5tYXAoZnVuY3Rpb24gKGFuaW1hdGlvbikgeyByZXR1cm4gKHtcbiAgICAgICAgICAgICAgICAgICAgYW5pbWF0aW9uOiBhbmltYXRpb24sXG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbnM6IHRzbGliLl9fYXNzaWduKHsgdHlwZTogdHlwZSB9LCBvcHRpb25zKSxcbiAgICAgICAgICAgICAgICB9KTsgfSkpKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJdGVyYXRlIHRocm91Z2ggYWxsIGFuaW1hdGlvbiB0eXBlcyBpbiByZXZlcnNlIHByaW9yaXR5IG9yZGVyLiBGb3IgZWFjaCwgd2Ugd2FudCB0b1xuICAgICAgICAgKiBkZXRlY3Qgd2hpY2ggdmFsdWVzIGl0J3MgaGFuZGxpbmcgYW5kIHdoZXRoZXIgb3Igbm90IHRoZXkndmUgY2hhbmdlZCAoYW5kIHRoZXJlZm9yZVxuICAgICAgICAgKiBuZWVkIHRvIGJlIGFuaW1hdGVkKS4gSWYgYW55IHZhbHVlcyBoYXZlIGJlZW4gcmVtb3ZlZCwgd2Ugd2FudCB0byBkZXRlY3QgdGhvc2UgaW5cbiAgICAgICAgICogbG93ZXIgcHJpb3JpdHkgcHJvcHMgYW5kIGZsYWcgZm9yIGFuaW1hdGlvbi5cbiAgICAgICAgICovXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbnVtQW5pbWF0aW9uVHlwZXM7IGkrKykge1xuICAgICAgICAgICAgX2xvb3BfMShpKTtcbiAgICAgICAgfVxuICAgICAgICBhbGxBbmltYXRlZEtleXMgPSB0c2xpYi5fX2Fzc2lnbih7fSwgZW5jb3VudGVyZWRLZXlzKTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIElmIHRoZXJlIGFyZSBzb21lIHJlbW92ZWQgdmFsdWUgdGhhdCBoYXZlbid0IGJlZW4gZGVhbHQgd2l0aCxcbiAgICAgICAgICogd2UgbmVlZCB0byBjcmVhdGUgYSBuZXcgYW5pbWF0aW9uIHRoYXQgZmFsbHMgYmFjayBlaXRoZXIgdG8gdGhlIHZhbHVlXG4gICAgICAgICAqIGRlZmluZWQgaW4gdGhlIHN0eWxlIHByb3AsIG9yIHRoZSBsYXN0IHJlYWQgdmFsdWUuXG4gICAgICAgICAqL1xuICAgICAgICBpZiAocmVtb3ZlZEtleXMuc2l6ZSkge1xuICAgICAgICAgICAgdmFyIGZhbGxiYWNrQW5pbWF0aW9uXzEgPSB7fTtcbiAgICAgICAgICAgIHJlbW92ZWRLZXlzLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgICAgICAgIHZhciBmYWxsYmFja1RhcmdldCA9IHZpc3VhbEVsZW1lbnQuZ2V0QmFzZVRhcmdldChrZXkpO1xuICAgICAgICAgICAgICAgIGlmIChmYWxsYmFja1RhcmdldCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIGZhbGxiYWNrQW5pbWF0aW9uXzFba2V5XSA9IGZhbGxiYWNrVGFyZ2V0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgYW5pbWF0aW9ucy5wdXNoKHsgYW5pbWF0aW9uOiBmYWxsYmFja0FuaW1hdGlvbl8xIH0pO1xuICAgICAgICB9XG4gICAgICAgIHZhciBzaG91bGRBbmltYXRlID0gQm9vbGVhbihhbmltYXRpb25zLmxlbmd0aCk7XG4gICAgICAgIGlmIChpc0luaXRpYWxSZW5kZXIgJiZcbiAgICAgICAgICAgIHByb3BzLmluaXRpYWwgPT09IGZhbHNlICYmXG4gICAgICAgICAgICAhdmlzdWFsRWxlbWVudC5tYW51YWxseUFuaW1hdGVPbk1vdW50KSB7XG4gICAgICAgICAgICBzaG91bGRBbmltYXRlID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaXNJbml0aWFsUmVuZGVyID0gZmFsc2U7XG4gICAgICAgIHJldHVybiBzaG91bGRBbmltYXRlID8gYW5pbWF0ZShhbmltYXRpb25zKSA6IFByb21pc2UucmVzb2x2ZSgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDaGFuZ2Ugd2hldGhlciBhIGNlcnRhaW4gYW5pbWF0aW9uIHR5cGUgaXMgYWN0aXZlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNldEFjdGl2ZSh0eXBlLCBpc0FjdGl2ZSwgb3B0aW9ucykge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIC8vIElmIHRoZSBhY3RpdmUgc3RhdGUgaGFzbid0IGNoYW5nZWQsIHdlIGNhbiBzYWZlbHkgZG8gbm90aGluZyBoZXJlXG4gICAgICAgIGlmIChzdGF0ZVt0eXBlXS5pc0FjdGl2ZSA9PT0gaXNBY3RpdmUpXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgICAgIC8vIFByb3BhZ2F0ZSBhY3RpdmUgY2hhbmdlIHRvIGNoaWxkcmVuXG4gICAgICAgIChfYSA9IHZpc3VhbEVsZW1lbnQudmFyaWFudENoaWxkcmVuKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuZm9yRWFjaChmdW5jdGlvbiAoY2hpbGQpIHsgdmFyIF9hOyByZXR1cm4gKF9hID0gY2hpbGQuYW5pbWF0aW9uU3RhdGUpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5zZXRBY3RpdmUodHlwZSwgaXNBY3RpdmUpOyB9KTtcbiAgICAgICAgc3RhdGVbdHlwZV0uaXNBY3RpdmUgPSBpc0FjdGl2ZTtcbiAgICAgICAgcmV0dXJuIGFuaW1hdGVDaGFuZ2VzKG9wdGlvbnMsIHR5cGUpO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBpc0FuaW1hdGVkOiBpc0FuaW1hdGVkLFxuICAgICAgICBhbmltYXRlQ2hhbmdlczogYW5pbWF0ZUNoYW5nZXMsXG4gICAgICAgIHNldEFjdGl2ZTogc2V0QWN0aXZlLFxuICAgICAgICBzZXRBbmltYXRlRnVuY3Rpb246IHNldEFuaW1hdGVGdW5jdGlvbixcbiAgICAgICAgZ2V0U3RhdGU6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHN0YXRlOyB9LFxuICAgIH07XG59XG5mdW5jdGlvbiB2YXJpYW50c0hhdmVDaGFuZ2VkKHByZXYsIG5leHQpIHtcbiAgICBpZiAodHlwZW9mIG5leHQgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgcmV0dXJuIG5leHQgIT09IHByZXY7XG4gICAgfVxuICAgIGVsc2UgaWYgKGlzVmFyaWFudExhYmVscyhuZXh0KSkge1xuICAgICAgICByZXR1cm4gIXNoYWxsb3dDb21wYXJlKG5leHQsIHByZXYpO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG5mdW5jdGlvbiBjcmVhdGVUeXBlU3RhdGUoaXNBY3RpdmUpIHtcbiAgICBpZiAoaXNBY3RpdmUgPT09IHZvaWQgMCkgeyBpc0FjdGl2ZSA9IGZhbHNlOyB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgaXNBY3RpdmU6IGlzQWN0aXZlLFxuICAgICAgICBwcm90ZWN0ZWRLZXlzOiB7fSxcbiAgICAgICAgbmVlZHNBbmltYXRpbmc6IHt9LFxuICAgICAgICBwcmV2UmVzb2x2ZWRWYWx1ZXM6IHt9LFxuICAgIH07XG59XG5mdW5jdGlvbiBjcmVhdGVTdGF0ZSgpIHtcbiAgICB2YXIgX2E7XG4gICAgcmV0dXJuIF9hID0ge30sXG4gICAgICAgIF9hW0FuaW1hdGlvblR5cGUuQW5pbWF0ZV0gPSBjcmVhdGVUeXBlU3RhdGUodHJ1ZSksXG4gICAgICAgIF9hW0FuaW1hdGlvblR5cGUuSG92ZXJdID0gY3JlYXRlVHlwZVN0YXRlKCksXG4gICAgICAgIF9hW0FuaW1hdGlvblR5cGUuVGFwXSA9IGNyZWF0ZVR5cGVTdGF0ZSgpLFxuICAgICAgICBfYVtBbmltYXRpb25UeXBlLkRyYWddID0gY3JlYXRlVHlwZVN0YXRlKCksXG4gICAgICAgIF9hW0FuaW1hdGlvblR5cGUuRm9jdXNdID0gY3JlYXRlVHlwZVN0YXRlKCksXG4gICAgICAgIF9hW0FuaW1hdGlvblR5cGUuRXhpdF0gPSBjcmVhdGVUeXBlU3RhdGUoKSxcbiAgICAgICAgX2E7XG59XG5cbnZhciBhbmltYXRpb25zID0ge1xuICAgIGFuaW1hdGlvbjogbWFrZVJlbmRlcmxlc3NDb21wb25lbnQoZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgIHZhciB2aXN1YWxFbGVtZW50ID0gX2EudmlzdWFsRWxlbWVudCwgYW5pbWF0ZSA9IF9hLmFuaW1hdGU7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBXZSBkeW5hbWljYWxseSBnZW5lcmF0ZSB0aGUgQW5pbWF0aW9uU3RhdGUgbWFuYWdlciBhcyBpdCBjb250YWlucyBhIHJlZmVyZW5jZVxuICAgICAgICAgKiB0byB0aGUgdW5kZXJseWluZyBhbmltYXRpb24gbGlicmFyeS4gV2Ugb25seSB3YW50IHRvIGxvYWQgdGhhdCBpZiB3ZSBsb2FkIHRoaXMsXG4gICAgICAgICAqIHNvIHBlb3BsZSBjYW4gb3B0aW9uYWxseSBjb2RlIHNwbGl0IGl0IG91dCB1c2luZyB0aGUgYG1gIGNvbXBvbmVudC5cbiAgICAgICAgICovXG4gICAgICAgIHZpc3VhbEVsZW1lbnQuYW5pbWF0aW9uU3RhdGUgfHwgKHZpc3VhbEVsZW1lbnQuYW5pbWF0aW9uU3RhdGUgPSBjcmVhdGVBbmltYXRpb25TdGF0ZSh2aXN1YWxFbGVtZW50KSk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTdWJzY3JpYmUgYW55IHByb3ZpZGVkIEFuaW1hdGlvbkNvbnRyb2xzIHRvIHRoZSBjb21wb25lbnQncyBWaXN1YWxFbGVtZW50XG4gICAgICAgICAqL1xuICAgICAgICBpZiAoaXNBbmltYXRpb25Db250cm9scyhhbmltYXRlKSkge1xuICAgICAgICAgICAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHsgcmV0dXJuIGFuaW1hdGUuc3Vic2NyaWJlKHZpc3VhbEVsZW1lbnQpOyB9LCBbYW5pbWF0ZV0pO1xuICAgICAgICB9XG4gICAgfSksXG4gICAgZXhpdDogbWFrZVJlbmRlcmxlc3NDb21wb25lbnQoZnVuY3Rpb24gKHByb3BzKSB7XG4gICAgICAgIHZhciBjdXN0b20gPSBwcm9wcy5jdXN0b20sIHZpc3VhbEVsZW1lbnQgPSBwcm9wcy52aXN1YWxFbGVtZW50O1xuICAgICAgICB2YXIgX2EgPSB0c2xpYi5fX3JlYWQodXNlUHJlc2VuY2UoKSwgMiksIGlzUHJlc2VudCA9IF9hWzBdLCBvbkV4aXRDb21wbGV0ZSA9IF9hWzFdO1xuICAgICAgICB2YXIgcHJlc2VuY2VDb250ZXh0ID0gUmVhY3QudXNlQ29udGV4dChQcmVzZW5jZUNvbnRleHQpO1xuICAgICAgICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgICAgIHZhciBhbmltYXRpb24gPSAoX2EgPSB2aXN1YWxFbGVtZW50LmFuaW1hdGlvblN0YXRlKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Euc2V0QWN0aXZlKEFuaW1hdGlvblR5cGUuRXhpdCwgIWlzUHJlc2VudCwgeyBjdXN0b206IChfYiA9IHByZXNlbmNlQ29udGV4dCA9PT0gbnVsbCB8fCBwcmVzZW5jZUNvbnRleHQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHByZXNlbmNlQ29udGV4dC5jdXN0b20pICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IGN1c3RvbSB9KTtcbiAgICAgICAgICAgICFpc1ByZXNlbnQgJiYgKGFuaW1hdGlvbiA9PT0gbnVsbCB8fCBhbmltYXRpb24gPT09IHZvaWQgMCA/IHZvaWQgMCA6IGFuaW1hdGlvbi50aGVuKG9uRXhpdENvbXBsZXRlKSk7XG4gICAgICAgIH0sIFtpc1ByZXNlbnRdKTtcbiAgICB9KSxcbn07XG5cbi8qKlxuICogQGludGVybmFsXG4gKi9cbnZhciBQYW5TZXNzaW9uID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFBhblNlc3Npb24oZXZlbnQsIGhhbmRsZXJzLCBfYSkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgX2IgPSBfYSA9PT0gdm9pZCAwID8ge30gOiBfYSwgdHJhbnNmb3JtUGFnZVBvaW50ID0gX2IudHJhbnNmb3JtUGFnZVBvaW50O1xuICAgICAgICAvKipcbiAgICAgICAgICogQGludGVybmFsXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnN0YXJ0RXZlbnQgPSBudWxsO1xuICAgICAgICAvKipcbiAgICAgICAgICogQGludGVybmFsXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmxhc3RNb3ZlRXZlbnQgPSBudWxsO1xuICAgICAgICAvKipcbiAgICAgICAgICogQGludGVybmFsXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmxhc3RNb3ZlRXZlbnRJbmZvID0gbnVsbDtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBpbnRlcm5hbFxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5oYW5kbGVycyA9IHt9O1xuICAgICAgICB0aGlzLnVwZGF0ZVBvaW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKCEoX3RoaXMubGFzdE1vdmVFdmVudCAmJiBfdGhpcy5sYXN0TW92ZUV2ZW50SW5mbykpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgdmFyIGluZm8gPSBnZXRQYW5JbmZvKF90aGlzLmxhc3RNb3ZlRXZlbnRJbmZvLCBfdGhpcy5oaXN0b3J5KTtcbiAgICAgICAgICAgIHZhciBpc1BhblN0YXJ0ZWQgPSBfdGhpcy5zdGFydEV2ZW50ICE9PSBudWxsO1xuICAgICAgICAgICAgLy8gT25seSBzdGFydCBwYW5uaW5nIGlmIHRoZSBvZmZzZXQgaXMgbGFyZ2VyIHRoYW4gMyBwaXhlbHMuIElmIHdlIG1ha2UgaXRcbiAgICAgICAgICAgIC8vIGFueSBsYXJnZXIgdGhhbiB0aGlzIHdlJ2xsIHdhbnQgdG8gcmVzZXQgdGhlIHBvaW50ZXIgaGlzdG9yeVxuICAgICAgICAgICAgLy8gb24gdGhlIGZpcnN0IHVwZGF0ZSB0byBhdm9pZCB2aXN1YWwgc25hcHBpbmcgdG8gdGhlIGN1cnNvZS5cbiAgICAgICAgICAgIHZhciBpc0Rpc3RhbmNlUGFzdFRocmVzaG9sZCA9IHBvcG1vdGlvbi5kaXN0YW5jZShpbmZvLm9mZnNldCwgeyB4OiAwLCB5OiAwIH0pID49IDM7XG4gICAgICAgICAgICBpZiAoIWlzUGFuU3RhcnRlZCAmJiAhaXNEaXN0YW5jZVBhc3RUaHJlc2hvbGQpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgdmFyIHBvaW50ID0gaW5mby5wb2ludDtcbiAgICAgICAgICAgIHZhciB0aW1lc3RhbXAgPSBzeW5jLmdldEZyYW1lRGF0YSgpLnRpbWVzdGFtcDtcbiAgICAgICAgICAgIF90aGlzLmhpc3RvcnkucHVzaCh0c2xpYi5fX2Fzc2lnbih0c2xpYi5fX2Fzc2lnbih7fSwgcG9pbnQpLCB7IHRpbWVzdGFtcDogdGltZXN0YW1wIH0pKTtcbiAgICAgICAgICAgIHZhciBfYSA9IF90aGlzLmhhbmRsZXJzLCBvblN0YXJ0ID0gX2Eub25TdGFydCwgb25Nb3ZlID0gX2Eub25Nb3ZlO1xuICAgICAgICAgICAgaWYgKCFpc1BhblN0YXJ0ZWQpIHtcbiAgICAgICAgICAgICAgICBvblN0YXJ0ICYmIG9uU3RhcnQoX3RoaXMubGFzdE1vdmVFdmVudCwgaW5mbyk7XG4gICAgICAgICAgICAgICAgX3RoaXMuc3RhcnRFdmVudCA9IF90aGlzLmxhc3RNb3ZlRXZlbnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvbk1vdmUgJiYgb25Nb3ZlKF90aGlzLmxhc3RNb3ZlRXZlbnQsIGluZm8pO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLmhhbmRsZVBvaW50ZXJNb3ZlID0gZnVuY3Rpb24gKGV2ZW50LCBpbmZvKSB7XG4gICAgICAgICAgICBfdGhpcy5sYXN0TW92ZUV2ZW50ID0gZXZlbnQ7XG4gICAgICAgICAgICBfdGhpcy5sYXN0TW92ZUV2ZW50SW5mbyA9IHRyYW5zZm9ybVBvaW50KGluZm8sIF90aGlzLnRyYW5zZm9ybVBhZ2VQb2ludCk7XG4gICAgICAgICAgICAvLyBCZWNhdXNlIFNhZmFyaSBkb2Vzbid0IHRyaWdnZXIgbW91c2V1cCBldmVudHMgd2hlbiBpdCdzIGFib3ZlIGEgYDxzZWxlY3Q+YFxuICAgICAgICAgICAgaWYgKGlzTW91c2VFdmVudChldmVudCkgJiYgZXZlbnQuYnV0dG9ucyA9PT0gMCkge1xuICAgICAgICAgICAgICAgIF90aGlzLmhhbmRsZVBvaW50ZXJVcChldmVudCwgaW5mbyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gVGhyb3R0bGUgbW91c2UgbW92ZSBldmVudCB0byBvbmNlIHBlciBmcmFtZVxuICAgICAgICAgICAgc3luY19fZGVmYXVsdFsnZGVmYXVsdCddLnVwZGF0ZShfdGhpcy51cGRhdGVQb2ludCwgdHJ1ZSk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuaGFuZGxlUG9pbnRlclVwID0gZnVuY3Rpb24gKGV2ZW50LCBpbmZvKSB7XG4gICAgICAgICAgICBfdGhpcy5lbmQoKTtcbiAgICAgICAgICAgIHZhciBfYSA9IF90aGlzLmhhbmRsZXJzLCBvbkVuZCA9IF9hLm9uRW5kLCBvblNlc3Npb25FbmQgPSBfYS5vblNlc3Npb25FbmQ7XG4gICAgICAgICAgICB2YXIgcGFuSW5mbyA9IGdldFBhbkluZm8odHJhbnNmb3JtUG9pbnQoaW5mbywgX3RoaXMudHJhbnNmb3JtUGFnZVBvaW50KSwgX3RoaXMuaGlzdG9yeSk7XG4gICAgICAgICAgICBpZiAoX3RoaXMuc3RhcnRFdmVudCAmJiBvbkVuZCkge1xuICAgICAgICAgICAgICAgIG9uRW5kKGV2ZW50LCBwYW5JbmZvKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG9uU2Vzc2lvbkVuZCAmJiBvblNlc3Npb25FbmQoZXZlbnQsIHBhbkluZm8pO1xuICAgICAgICB9O1xuICAgICAgICAvLyBJZiB3ZSBoYXZlIG1vcmUgdGhhbiBvbmUgdG91Y2gsIGRvbid0IHN0YXJ0IGRldGVjdGluZyB0aGlzIGdlc3R1cmVcbiAgICAgICAgaWYgKGlzVG91Y2hFdmVudChldmVudCkgJiYgZXZlbnQudG91Y2hlcy5sZW5ndGggPiAxKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB0aGlzLmhhbmRsZXJzID0gaGFuZGxlcnM7XG4gICAgICAgIHRoaXMudHJhbnNmb3JtUGFnZVBvaW50ID0gdHJhbnNmb3JtUGFnZVBvaW50O1xuICAgICAgICB2YXIgaW5mbyA9IGV4dHJhY3RFdmVudEluZm8oZXZlbnQpO1xuICAgICAgICB2YXIgaW5pdGlhbEluZm8gPSB0cmFuc2Zvcm1Qb2ludChpbmZvLCB0aGlzLnRyYW5zZm9ybVBhZ2VQb2ludCk7XG4gICAgICAgIHZhciBwb2ludCA9IGluaXRpYWxJbmZvLnBvaW50O1xuICAgICAgICB2YXIgdGltZXN0YW1wID0gc3luYy5nZXRGcmFtZURhdGEoKS50aW1lc3RhbXA7XG4gICAgICAgIHRoaXMuaGlzdG9yeSA9IFt0c2xpYi5fX2Fzc2lnbih0c2xpYi5fX2Fzc2lnbih7fSwgcG9pbnQpLCB7IHRpbWVzdGFtcDogdGltZXN0YW1wIH0pXTtcbiAgICAgICAgdmFyIG9uU2Vzc2lvblN0YXJ0ID0gaGFuZGxlcnMub25TZXNzaW9uU3RhcnQ7XG4gICAgICAgIG9uU2Vzc2lvblN0YXJ0ICYmXG4gICAgICAgICAgICBvblNlc3Npb25TdGFydChldmVudCwgZ2V0UGFuSW5mbyhpbml0aWFsSW5mbywgdGhpcy5oaXN0b3J5KSk7XG4gICAgICAgIHRoaXMucmVtb3ZlTGlzdGVuZXJzID0gcG9wbW90aW9uLnBpcGUoYWRkUG9pbnRlckV2ZW50KHdpbmRvdywgXCJwb2ludGVybW92ZVwiLCB0aGlzLmhhbmRsZVBvaW50ZXJNb3ZlKSwgYWRkUG9pbnRlckV2ZW50KHdpbmRvdywgXCJwb2ludGVydXBcIiwgdGhpcy5oYW5kbGVQb2ludGVyVXApLCBhZGRQb2ludGVyRXZlbnQod2luZG93LCBcInBvaW50ZXJjYW5jZWxcIiwgdGhpcy5oYW5kbGVQb2ludGVyVXApKTtcbiAgICB9XG4gICAgUGFuU2Vzc2lvbi5wcm90b3R5cGUudXBkYXRlSGFuZGxlcnMgPSBmdW5jdGlvbiAoaGFuZGxlcnMpIHtcbiAgICAgICAgdGhpcy5oYW5kbGVycyA9IGhhbmRsZXJzO1xuICAgIH07XG4gICAgUGFuU2Vzc2lvbi5wcm90b3R5cGUuZW5kID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnJlbW92ZUxpc3RlbmVycyAmJiB0aGlzLnJlbW92ZUxpc3RlbmVycygpO1xuICAgICAgICBzeW5jLmNhbmNlbFN5bmMudXBkYXRlKHRoaXMudXBkYXRlUG9pbnQpO1xuICAgIH07XG4gICAgcmV0dXJuIFBhblNlc3Npb247XG59KCkpO1xuZnVuY3Rpb24gdHJhbnNmb3JtUG9pbnQoaW5mbywgdHJhbnNmb3JtUGFnZVBvaW50KSB7XG4gICAgcmV0dXJuIHRyYW5zZm9ybVBhZ2VQb2ludCA/IHsgcG9pbnQ6IHRyYW5zZm9ybVBhZ2VQb2ludChpbmZvLnBvaW50KSB9IDogaW5mbztcbn1cbmZ1bmN0aW9uIHN1YnRyYWN0UG9pbnQoYSwgYikge1xuICAgIHJldHVybiB7IHg6IGEueCAtIGIueCwgeTogYS55IC0gYi55IH07XG59XG5mdW5jdGlvbiBnZXRQYW5JbmZvKF9hLCBoaXN0b3J5KSB7XG4gICAgdmFyIHBvaW50ID0gX2EucG9pbnQ7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgcG9pbnQ6IHBvaW50LFxuICAgICAgICBkZWx0YTogc3VidHJhY3RQb2ludChwb2ludCwgbGFzdERldmljZVBvaW50KGhpc3RvcnkpKSxcbiAgICAgICAgb2Zmc2V0OiBzdWJ0cmFjdFBvaW50KHBvaW50LCBzdGFydERldmljZVBvaW50KGhpc3RvcnkpKSxcbiAgICAgICAgdmVsb2NpdHk6IGdldFZlbG9jaXR5KGhpc3RvcnksIDAuMSksXG4gICAgfTtcbn1cbmZ1bmN0aW9uIHN0YXJ0RGV2aWNlUG9pbnQoaGlzdG9yeSkge1xuICAgIHJldHVybiBoaXN0b3J5WzBdO1xufVxuZnVuY3Rpb24gbGFzdERldmljZVBvaW50KGhpc3RvcnkpIHtcbiAgICByZXR1cm4gaGlzdG9yeVtoaXN0b3J5Lmxlbmd0aCAtIDFdO1xufVxuZnVuY3Rpb24gZ2V0VmVsb2NpdHkoaGlzdG9yeSwgdGltZURlbHRhKSB7XG4gICAgaWYgKGhpc3RvcnkubGVuZ3RoIDwgMikge1xuICAgICAgICByZXR1cm4geyB4OiAwLCB5OiAwIH07XG4gICAgfVxuICAgIHZhciBpID0gaGlzdG9yeS5sZW5ndGggLSAxO1xuICAgIHZhciB0aW1lc3RhbXBlZFBvaW50ID0gbnVsbDtcbiAgICB2YXIgbGFzdFBvaW50ID0gbGFzdERldmljZVBvaW50KGhpc3RvcnkpO1xuICAgIHdoaWxlIChpID49IDApIHtcbiAgICAgICAgdGltZXN0YW1wZWRQb2ludCA9IGhpc3RvcnlbaV07XG4gICAgICAgIGlmIChsYXN0UG9pbnQudGltZXN0YW1wIC0gdGltZXN0YW1wZWRQb2ludC50aW1lc3RhbXAgPlxuICAgICAgICAgICAgc2Vjb25kc1RvTWlsbGlzZWNvbmRzKHRpbWVEZWx0YSkpIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGktLTtcbiAgICB9XG4gICAgaWYgKCF0aW1lc3RhbXBlZFBvaW50KSB7XG4gICAgICAgIHJldHVybiB7IHg6IDAsIHk6IDAgfTtcbiAgICB9XG4gICAgdmFyIHRpbWUgPSAobGFzdFBvaW50LnRpbWVzdGFtcCAtIHRpbWVzdGFtcGVkUG9pbnQudGltZXN0YW1wKSAvIDEwMDA7XG4gICAgaWYgKHRpbWUgPT09IDApIHtcbiAgICAgICAgcmV0dXJuIHsgeDogMCwgeTogMCB9O1xuICAgIH1cbiAgICB2YXIgY3VycmVudFZlbG9jaXR5ID0ge1xuICAgICAgICB4OiAobGFzdFBvaW50LnggLSB0aW1lc3RhbXBlZFBvaW50LngpIC8gdGltZSxcbiAgICAgICAgeTogKGxhc3RQb2ludC55IC0gdGltZXN0YW1wZWRQb2ludC55KSAvIHRpbWUsXG4gICAgfTtcbiAgICBpZiAoY3VycmVudFZlbG9jaXR5LnggPT09IEluZmluaXR5KSB7XG4gICAgICAgIGN1cnJlbnRWZWxvY2l0eS54ID0gMDtcbiAgICB9XG4gICAgaWYgKGN1cnJlbnRWZWxvY2l0eS55ID09PSBJbmZpbml0eSkge1xuICAgICAgICBjdXJyZW50VmVsb2NpdHkueSA9IDA7XG4gICAgfVxuICAgIHJldHVybiBjdXJyZW50VmVsb2NpdHk7XG59XG5cbmZ1bmN0aW9uIG5vb3AoYW55KSB7XG4gICAgcmV0dXJuIGFueTtcbn1cblxuLyoqXG4gKiBCb3VuZGluZyBib3hlcyB0ZW5kIHRvIGJlIGRlZmluZWQgYXMgdG9wLCBsZWZ0LCByaWdodCwgYm90dG9tLiBGb3IgdmFyaW91cyBvcGVyYXRpb25zXG4gKiBpdCdzIGVhc2llciB0byBjb25zaWRlciBlYWNoIGF4aXMgaW5kaXZpZHVhbGx5LiBUaGlzIGZ1bmN0aW9uIHJldHVybnMgYSBib3VuZGluZyBib3hcbiAqIGFzIGEgbWFwIG9mIHNpbmdsZS1heGlzIG1pbi9tYXggdmFsdWVzLlxuICovXG5mdW5jdGlvbiBjb252ZXJ0Qm91bmRpbmdCb3hUb0F4aXNCb3goX2EpIHtcbiAgICB2YXIgdG9wID0gX2EudG9wLCBsZWZ0ID0gX2EubGVmdCwgcmlnaHQgPSBfYS5yaWdodCwgYm90dG9tID0gX2EuYm90dG9tO1xuICAgIHJldHVybiB7XG4gICAgICAgIHg6IHsgbWluOiBsZWZ0LCBtYXg6IHJpZ2h0IH0sXG4gICAgICAgIHk6IHsgbWluOiB0b3AsIG1heDogYm90dG9tIH0sXG4gICAgfTtcbn1cbmZ1bmN0aW9uIGNvbnZlcnRBeGlzQm94VG9Cb3VuZGluZ0JveChfYSkge1xuICAgIHZhciB4ID0gX2EueCwgeSA9IF9hLnk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdG9wOiB5Lm1pbixcbiAgICAgICAgYm90dG9tOiB5Lm1heCxcbiAgICAgICAgbGVmdDogeC5taW4sXG4gICAgICAgIHJpZ2h0OiB4Lm1heCxcbiAgICB9O1xufVxuLyoqXG4gKiBBcHBsaWVzIGEgVHJhbnNmb3JtUG9pbnQgZnVuY3Rpb24gdG8gYSBib3VuZGluZyBib3guIFRyYW5zZm9ybVBvaW50IGlzIHVzdWFsbHkgYSBmdW5jdGlvblxuICogcHJvdmlkZWQgYnkgRnJhbWVyIHRvIGFsbG93IG1lYXN1cmVkIHBvaW50cyB0byBiZSBjb3JyZWN0ZWQgZm9yIGRldmljZSBzY2FsaW5nLiBUaGlzIGlzIHVzZWRcbiAqIHdoZW4gbWVhc3VyaW5nIERPTSBlbGVtZW50cyBhbmQgRE9NIGV2ZW50IHBvaW50cy5cbiAqL1xuZnVuY3Rpb24gdHJhbnNmb3JtQm91bmRpbmdCb3goX2EsIHRyYW5zZm9ybVBvaW50KSB7XG4gICAgdmFyIHRvcCA9IF9hLnRvcCwgbGVmdCA9IF9hLmxlZnQsIGJvdHRvbSA9IF9hLmJvdHRvbSwgcmlnaHQgPSBfYS5yaWdodDtcbiAgICBpZiAodHJhbnNmb3JtUG9pbnQgPT09IHZvaWQgMCkgeyB0cmFuc2Zvcm1Qb2ludCA9IG5vb3A7IH1cbiAgICB2YXIgdG9wTGVmdCA9IHRyYW5zZm9ybVBvaW50KHsgeDogbGVmdCwgeTogdG9wIH0pO1xuICAgIHZhciBib3R0b21SaWdodCA9IHRyYW5zZm9ybVBvaW50KHsgeDogcmlnaHQsIHk6IGJvdHRvbSB9KTtcbiAgICByZXR1cm4ge1xuICAgICAgICB0b3A6IHRvcExlZnQueSxcbiAgICAgICAgbGVmdDogdG9wTGVmdC54LFxuICAgICAgICBib3R0b206IGJvdHRvbVJpZ2h0LnksXG4gICAgICAgIHJpZ2h0OiBib3R0b21SaWdodC54LFxuICAgIH07XG59XG4vKipcbiAqIENyZWF0ZSBhbiBlbXB0eSBheGlzIGJveCBvZiB6ZXJvIHNpemVcbiAqL1xuZnVuY3Rpb24gYXhpc0JveCgpIHtcbiAgICByZXR1cm4geyB4OiB7IG1pbjogMCwgbWF4OiAxIH0sIHk6IHsgbWluOiAwLCBtYXg6IDEgfSB9O1xufVxuZnVuY3Rpb24gY29weUF4aXNCb3goYm94KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgeDogdHNsaWIuX19hc3NpZ24oe30sIGJveC54KSxcbiAgICAgICAgeTogdHNsaWIuX19hc3NpZ24oe30sIGJveC55KSxcbiAgICB9O1xufVxuLyoqXG4gKiBDcmVhdGUgYW4gZW1wdHkgYm94IGRlbHRhXG4gKi9cbnZhciB6ZXJvRGVsdGEgPSB7XG4gICAgdHJhbnNsYXRlOiAwLFxuICAgIHNjYWxlOiAxLFxuICAgIG9yaWdpbjogMCxcbiAgICBvcmlnaW5Qb2ludDogMCxcbn07XG5mdW5jdGlvbiBkZWx0YSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICB4OiB0c2xpYi5fX2Fzc2lnbih7fSwgemVyb0RlbHRhKSxcbiAgICAgICAgeTogdHNsaWIuX19hc3NpZ24oe30sIHplcm9EZWx0YSksXG4gICAgfTtcbn1cblxuLy8gQ2FsbCBhIGhhbmRsZXIgb25jZSBmb3IgZWFjaCBheGlzXG5mdW5jdGlvbiBlYWNoQXhpcyhoYW5kbGVyKSB7XG4gICAgcmV0dXJuIFtoYW5kbGVyKFwieFwiKSwgaGFuZGxlcihcInlcIildO1xufVxuXG52YXIgY2xhbXBQcm9ncmVzcyA9IGZ1bmN0aW9uICh2KSB7IHJldHVybiBwb3Btb3Rpb24uY2xhbXAoMCwgMSwgdik7IH07XG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgcHJvdmlkZWQgdmFsdWUgaXMgd2l0aGluIG1heERpc3RhbmNlIG9mIHRoZSBwcm92aWRlZCB0YXJnZXRcbiAqL1xuZnVuY3Rpb24gaXNOZWFyKHZhbHVlLCB0YXJnZXQsIG1heERpc3RhbmNlKSB7XG4gICAgaWYgKHRhcmdldCA9PT0gdm9pZCAwKSB7IHRhcmdldCA9IDA7IH1cbiAgICBpZiAobWF4RGlzdGFuY2UgPT09IHZvaWQgMCkgeyBtYXhEaXN0YW5jZSA9IDAuMDE7IH1cbiAgICByZXR1cm4gcG9wbW90aW9uLmRpc3RhbmNlKHZhbHVlLCB0YXJnZXQpIDwgbWF4RGlzdGFuY2U7XG59XG5mdW5jdGlvbiBjYWxjTGVuZ3RoKGF4aXMpIHtcbiAgICByZXR1cm4gYXhpcy5tYXggLSBheGlzLm1pbjtcbn1cbi8qKlxuICogQ2FsY3VsYXRlIGEgdHJhbnNmb3JtIG9yaWdpbiByZWxhdGl2ZSB0byB0aGUgc291cmNlIGF4aXMsIGJldHdlZW4gMC0xLCB0aGF0IHJlc3VsdHNcbiAqIGluIGFuIGFzdGhldGljYWxseSBwbGVhc2luZyBzY2FsZS90cmFuc2Zvcm0gbmVlZGVkIHRvIHByb2plY3QgZnJvbSBzb3VyY2UgdG8gdGFyZ2V0LlxuICovXG5mdW5jdGlvbiBjYWxjT3JpZ2luKHNvdXJjZSwgdGFyZ2V0KSB7XG4gICAgdmFyIG9yaWdpbiA9IDAuNTtcbiAgICB2YXIgc291cmNlTGVuZ3RoID0gY2FsY0xlbmd0aChzb3VyY2UpO1xuICAgIHZhciB0YXJnZXRMZW5ndGggPSBjYWxjTGVuZ3RoKHRhcmdldCk7XG4gICAgaWYgKHRhcmdldExlbmd0aCA+IHNvdXJjZUxlbmd0aCkge1xuICAgICAgICBvcmlnaW4gPSBwb3Btb3Rpb24ucHJvZ3Jlc3ModGFyZ2V0Lm1pbiwgdGFyZ2V0Lm1heCAtIHNvdXJjZUxlbmd0aCwgc291cmNlLm1pbik7XG4gICAgfVxuICAgIGVsc2UgaWYgKHNvdXJjZUxlbmd0aCA+IHRhcmdldExlbmd0aCkge1xuICAgICAgICBvcmlnaW4gPSBwb3Btb3Rpb24ucHJvZ3Jlc3Moc291cmNlLm1pbiwgc291cmNlLm1heCAtIHRhcmdldExlbmd0aCwgdGFyZ2V0Lm1pbik7XG4gICAgfVxuICAgIHJldHVybiBjbGFtcFByb2dyZXNzKG9yaWdpbik7XG59XG4vKipcbiAqIFVwZGF0ZSB0aGUgQXhpc0RlbHRhIHdpdGggYSB0cmFuc2Zvcm0gdGhhdCBwcm9qZWN0cyBzb3VyY2UgaW50byB0YXJnZXQuXG4gKlxuICogVGhlIHRyYW5zZm9ybSBgb3JpZ2luYCBpcyBvcHRpb25hbC4gSWYgbm90IHByb3ZpZGVkLCBpdCdsbCBiZSBhdXRvbWF0aWNhbGx5XG4gKiBjYWxjdWxhdGVkIGJhc2VkIG9uIHRoZSByZWxhdGl2ZSBwb3NpdGlvbnMgb2YgdGhlIHR3byBib3VuZGluZyBib3hlcy5cbiAqL1xuZnVuY3Rpb24gdXBkYXRlQXhpc0RlbHRhKGRlbHRhLCBzb3VyY2UsIHRhcmdldCwgb3JpZ2luKSB7XG4gICAgaWYgKG9yaWdpbiA9PT0gdm9pZCAwKSB7IG9yaWdpbiA9IDAuNTsgfVxuICAgIGRlbHRhLm9yaWdpbiA9IG9yaWdpbjtcbiAgICBkZWx0YS5vcmlnaW5Qb2ludCA9IHBvcG1vdGlvbi5taXgoc291cmNlLm1pbiwgc291cmNlLm1heCwgZGVsdGEub3JpZ2luKTtcbiAgICBkZWx0YS5zY2FsZSA9IGNhbGNMZW5ndGgodGFyZ2V0KSAvIGNhbGNMZW5ndGgoc291cmNlKTtcbiAgICBpZiAoaXNOZWFyKGRlbHRhLnNjYWxlLCAxLCAwLjAwMDEpKVxuICAgICAgICBkZWx0YS5zY2FsZSA9IDE7XG4gICAgZGVsdGEudHJhbnNsYXRlID1cbiAgICAgICAgcG9wbW90aW9uLm1peCh0YXJnZXQubWluLCB0YXJnZXQubWF4LCBkZWx0YS5vcmlnaW4pIC0gZGVsdGEub3JpZ2luUG9pbnQ7XG4gICAgaWYgKGlzTmVhcihkZWx0YS50cmFuc2xhdGUpKVxuICAgICAgICBkZWx0YS50cmFuc2xhdGUgPSAwO1xufVxuLyoqXG4gKiBVcGRhdGUgdGhlIEJveERlbHRhIHdpdGggYSB0cmFuc2Zvcm0gdGhhdCBwcm9qZWN0cyB0aGUgc291cmNlIGludG8gdGhlIHRhcmdldC5cbiAqXG4gKiBUaGUgdHJhbnNmb3JtIGBvcmlnaW5gIGlzIG9wdGlvbmFsLiBJZiBub3QgcHJvdmlkZWQsIGl0J2xsIGJlIGF1dG9tYXRpY2FsbHlcbiAqIGNhbGN1bGF0ZWQgYmFzZWQgb24gdGhlIHJlbGF0aXZlIHBvc2l0aW9ucyBvZiB0aGUgdHdvIGJvdW5kaW5nIGJveGVzLlxuICovXG5mdW5jdGlvbiB1cGRhdGVCb3hEZWx0YShkZWx0YSwgc291cmNlLCB0YXJnZXQsIG9yaWdpbikge1xuICAgIHVwZGF0ZUF4aXNEZWx0YShkZWx0YS54LCBzb3VyY2UueCwgdGFyZ2V0LngsIGRlZmF1bHRPcmlnaW4ob3JpZ2luLm9yaWdpblgpKTtcbiAgICB1cGRhdGVBeGlzRGVsdGEoZGVsdGEueSwgc291cmNlLnksIHRhcmdldC55LCBkZWZhdWx0T3JpZ2luKG9yaWdpbi5vcmlnaW5ZKSk7XG59XG4vKipcbiAqIEN1cnJlbnRseSB0aGlzIG9ubHkgYWNjZXB0cyBudW1lcmljYWwgb3JpZ2lucywgbWVhc3VyZWQgYXMgMC0xLCBidXQgY291bGRcbiAqIGFjY2VwdCBwaXhlbCB2YWx1ZXMgYnkgY29tcGFyaW5nIHRvIHRoZSB0YXJnZXQgYXhpcy5cbiAqL1xuZnVuY3Rpb24gZGVmYXVsdE9yaWdpbihvcmlnaW4pIHtcbiAgICByZXR1cm4gdHlwZW9mIG9yaWdpbiA9PT0gXCJudW1iZXJcIiA/IG9yaWdpbiA6IDAuNTtcbn1cbmZ1bmN0aW9uIGNhbGNSZWxhdGl2ZUF4aXModGFyZ2V0LCByZWxhdGl2ZSwgcGFyZW50KSB7XG4gICAgdGFyZ2V0Lm1pbiA9IHBhcmVudC5taW4gKyByZWxhdGl2ZS5taW47XG4gICAgdGFyZ2V0Lm1heCA9IHRhcmdldC5taW4gKyBjYWxjTGVuZ3RoKHJlbGF0aXZlKTtcbn1cbmZ1bmN0aW9uIGNhbGNSZWxhdGl2ZUJveChwcm9qZWN0aW9uLCBwYXJlbnRQcm9qZWN0aW9uKSB7XG4gICAgY2FsY1JlbGF0aXZlQXhpcyhwcm9qZWN0aW9uLnRhcmdldC54LCBwcm9qZWN0aW9uLnJlbGF0aXZlVGFyZ2V0LngsIHBhcmVudFByb2plY3Rpb24udGFyZ2V0LngpO1xuICAgIGNhbGNSZWxhdGl2ZUF4aXMocHJvamVjdGlvbi50YXJnZXQueSwgcHJvamVjdGlvbi5yZWxhdGl2ZVRhcmdldC55LCBwYXJlbnRQcm9qZWN0aW9uLnRhcmdldC55KTtcbn1cblxuLyoqXG4gKiBBcHBseSBjb25zdHJhaW50cyB0byBhIHBvaW50LiBUaGVzZSBjb25zdHJhaW50cyBhcmUgYm90aCBwaHlzaWNhbCBhbG9uZyBhblxuICogYXhpcywgYW5kIGFuIGVsYXN0aWMgZmFjdG9yIHRoYXQgZGV0ZXJtaW5lcyBob3cgbXVjaCB0byBjb25zdHJhaW4gdGhlIHBvaW50XG4gKiBieSBpZiBpdCBkb2VzIGxpZSBvdXRzaWRlIHRoZSBkZWZpbmVkIHBhcmFtZXRlcnMuXG4gKi9cbmZ1bmN0aW9uIGFwcGx5Q29uc3RyYWludHMocG9pbnQsIF9hLCBlbGFzdGljKSB7XG4gICAgdmFyIG1pbiA9IF9hLm1pbiwgbWF4ID0gX2EubWF4O1xuICAgIGlmIChtaW4gIT09IHVuZGVmaW5lZCAmJiBwb2ludCA8IG1pbikge1xuICAgICAgICAvLyBJZiB3ZSBoYXZlIGEgbWluIHBvaW50IGRlZmluZWQsIGFuZCB0aGlzIGlzIG91dHNpZGUgb2YgdGhhdCwgY29uc3RyYWluXG4gICAgICAgIHBvaW50ID0gZWxhc3RpYyA/IHBvcG1vdGlvbi5taXgobWluLCBwb2ludCwgZWxhc3RpYy5taW4pIDogTWF0aC5tYXgocG9pbnQsIG1pbik7XG4gICAgfVxuICAgIGVsc2UgaWYgKG1heCAhPT0gdW5kZWZpbmVkICYmIHBvaW50ID4gbWF4KSB7XG4gICAgICAgIC8vIElmIHdlIGhhdmUgYSBtYXggcG9pbnQgZGVmaW5lZCwgYW5kIHRoaXMgaXMgb3V0c2lkZSBvZiB0aGF0LCBjb25zdHJhaW5cbiAgICAgICAgcG9pbnQgPSBlbGFzdGljID8gcG9wbW90aW9uLm1peChtYXgsIHBvaW50LCBlbGFzdGljLm1heCkgOiBNYXRoLm1pbihwb2ludCwgbWF4KTtcbiAgICB9XG4gICAgcmV0dXJuIHBvaW50O1xufVxuLyoqXG4gKiBDYWxjdWxhdGVzIGEgbWluIHByb2plY3Rpb24gcG9pbnQgYmFzZWQgb24gYSBwb2ludGVyLCBwb2ludGVyIHByb2dyZXNzXG4gKiB3aXRoaW4gdGhlIGRyYWcgdGFyZ2V0LCBhbmQgY29uc3RyYWludHMuXG4gKlxuICogRm9yIGluc3RhbmNlIGlmIGFuIGVsZW1lbnQgd2FzIDEwMHB4IHdpZHRoLCB3ZSB3ZXJlIGRyYWdnaW5nIGZyb20gMC4yNVxuICogYWxvbmcgdGhpcyBheGlzLCB0aGUgcG9pbnRlciBpcyBhdCAyMDBweCwgYW5kIHRoZXJlIHdlcmUgbm8gY29uc3RyYWludHMsXG4gKiB3ZSB3b3VsZCBjYWxjdWxhdGUgYSBtaW4gcHJvamVjdGlvbiBwb2ludCBvZiAxNzVweC5cbiAqL1xuZnVuY3Rpb24gY2FsY0NvbnN0cmFpbmVkTWluUG9pbnQocG9pbnQsIGxlbmd0aCwgcHJvZ3Jlc3MsIGNvbnN0cmFpbnRzLCBlbGFzdGljKSB7XG4gICAgLy8gQ2FsY3VsYXRlIGEgbWluIHBvaW50IGZvciB0aGlzIGF4aXMgYW5kIGFwcGx5IGl0IHRvIHRoZSBjdXJyZW50IHBvaW50ZXJcbiAgICB2YXIgbWluID0gcG9pbnQgLSBsZW5ndGggKiBwcm9ncmVzcztcbiAgICByZXR1cm4gY29uc3RyYWludHMgPyBhcHBseUNvbnN0cmFpbnRzKG1pbiwgY29uc3RyYWludHMsIGVsYXN0aWMpIDogbWluO1xufVxuLyoqXG4gKiBDYWxjdWxhdGUgY29uc3RyYWludHMgaW4gdGVybXMgb2YgdGhlIHZpZXdwb3J0IHdoZW4gZGVmaW5lZCByZWxhdGl2ZWx5IHRvIHRoZVxuICogbWVhc3VyZWQgYXhpcy4gVGhpcyBpcyBtZWFzdXJlZCBmcm9tIHRoZSBuZWFyZXN0IGVkZ2UsIHNvIGEgbWF4IGNvbnN0cmFpbnQgb2YgMjAwXG4gKiBvbiBhbiBheGlzIHdpdGggYSBtYXggdmFsdWUgb2YgMzAwIHdvdWxkIHJldHVybiBhIGNvbnN0cmFpbnQgb2YgNTAwIC0gYXhpcyBsZW5ndGhcbiAqL1xuZnVuY3Rpb24gY2FsY1JlbGF0aXZlQXhpc0NvbnN0cmFpbnRzKGF4aXMsIG1pbiwgbWF4KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgbWluOiBtaW4gIT09IHVuZGVmaW5lZCA/IGF4aXMubWluICsgbWluIDogdW5kZWZpbmVkLFxuICAgICAgICBtYXg6IG1heCAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgICA/IGF4aXMubWF4ICsgbWF4IC0gKGF4aXMubWF4IC0gYXhpcy5taW4pXG4gICAgICAgICAgICA6IHVuZGVmaW5lZCxcbiAgICB9O1xufVxuLyoqXG4gKiBDYWxjdWxhdGUgY29uc3RyYWludHMgaW4gdGVybXMgb2YgdGhlIHZpZXdwb3J0IHdoZW5cbiAqIGRlZmluZWQgcmVsYXRpdmVseSB0byB0aGUgbWVhc3VyZWQgYm91bmRpbmcgYm94LlxuICovXG5mdW5jdGlvbiBjYWxjUmVsYXRpdmVDb25zdHJhaW50cyhsYXlvdXRCb3gsIF9hKSB7XG4gICAgdmFyIHRvcCA9IF9hLnRvcCwgbGVmdCA9IF9hLmxlZnQsIGJvdHRvbSA9IF9hLmJvdHRvbSwgcmlnaHQgPSBfYS5yaWdodDtcbiAgICByZXR1cm4ge1xuICAgICAgICB4OiBjYWxjUmVsYXRpdmVBeGlzQ29uc3RyYWludHMobGF5b3V0Qm94LngsIGxlZnQsIHJpZ2h0KSxcbiAgICAgICAgeTogY2FsY1JlbGF0aXZlQXhpc0NvbnN0cmFpbnRzKGxheW91dEJveC55LCB0b3AsIGJvdHRvbSksXG4gICAgfTtcbn1cbi8qKlxuICogQ2FsY3VsYXRlIHZpZXdwb3J0IGNvbnN0cmFpbnRzIHdoZW4gZGVmaW5lZCBhcyBhbm90aGVyIHZpZXdwb3J0LXJlbGF0aXZlIGF4aXNcbiAqL1xuZnVuY3Rpb24gY2FsY1ZpZXdwb3J0QXhpc0NvbnN0cmFpbnRzKGxheW91dEF4aXMsIGNvbnN0cmFpbnRzQXhpcykge1xuICAgIHZhciBfYTtcbiAgICB2YXIgbWluID0gY29uc3RyYWludHNBeGlzLm1pbiAtIGxheW91dEF4aXMubWluO1xuICAgIHZhciBtYXggPSBjb25zdHJhaW50c0F4aXMubWF4IC0gbGF5b3V0QXhpcy5tYXg7XG4gICAgLy8gSWYgdGhlIGNvbnN0cmFpbnRzIGF4aXMgaXMgYWN0dWFsbHkgc21hbGxlciB0aGFuIHRoZSBsYXlvdXQgYXhpcyB0aGVuIHdlIGNhblxuICAgIC8vIGZsaXAgdGhlIGNvbnN0cmFpbnRzXG4gICAgaWYgKGNvbnN0cmFpbnRzQXhpcy5tYXggLSBjb25zdHJhaW50c0F4aXMubWluIDxcbiAgICAgICAgbGF5b3V0QXhpcy5tYXggLSBsYXlvdXRBeGlzLm1pbikge1xuICAgICAgICBfYSA9IHRzbGliLl9fcmVhZChbbWF4LCBtaW5dLCAyKSwgbWluID0gX2FbMF0sIG1heCA9IF9hWzFdO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBtaW46IGxheW91dEF4aXMubWluICsgbWluLFxuICAgICAgICBtYXg6IGxheW91dEF4aXMubWluICsgbWF4LFxuICAgIH07XG59XG4vKipcbiAqIENhbGN1bGF0ZSB2aWV3cG9ydCBjb25zdHJhaW50cyB3aGVuIGRlZmluZWQgYXMgYW5vdGhlciB2aWV3cG9ydC1yZWxhdGl2ZSBib3hcbiAqL1xuZnVuY3Rpb24gY2FsY1ZpZXdwb3J0Q29uc3RyYWludHMobGF5b3V0Qm94LCBjb25zdHJhaW50c0JveCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHg6IGNhbGNWaWV3cG9ydEF4aXNDb25zdHJhaW50cyhsYXlvdXRCb3gueCwgY29uc3RyYWludHNCb3gueCksXG4gICAgICAgIHk6IGNhbGNWaWV3cG9ydEF4aXNDb25zdHJhaW50cyhsYXlvdXRCb3gueSwgY29uc3RyYWludHNCb3gueSksXG4gICAgfTtcbn1cbi8qKlxuICogQ2FsY3VsYXRlIHRoZSBhbiBheGlzIHBvc2l0aW9uIGJhc2VkIG9uIHR3byBheGVzIGFuZCBhIHByb2dyZXNzIHZhbHVlLlxuICovXG5mdW5jdGlvbiBjYWxjUG9zaXRpb25Gcm9tUHJvZ3Jlc3MoYXhpcywgY29uc3RyYWludHMsIHByb2dyZXNzKSB7XG4gICAgdmFyIGF4aXNMZW5ndGggPSBheGlzLm1heCAtIGF4aXMubWluO1xuICAgIHZhciBtaW4gPSBwb3Btb3Rpb24ubWl4KGNvbnN0cmFpbnRzLm1pbiwgY29uc3RyYWludHMubWF4IC0gYXhpc0xlbmd0aCwgcHJvZ3Jlc3MpO1xuICAgIHJldHVybiB7IG1pbjogbWluLCBtYXg6IG1pbiArIGF4aXNMZW5ndGggfTtcbn1cbi8qKlxuICogUmViYXNlIHRoZSBjYWxjdWxhdGVkIHZpZXdwb3J0IGNvbnN0cmFpbnRzIHJlbGF0aXZlIHRvIHRoZSBsYXlvdXQubWluIHBvaW50LlxuICovXG5mdW5jdGlvbiByZWJhc2VBeGlzQ29uc3RyYWludHMobGF5b3V0LCBjb25zdHJhaW50cykge1xuICAgIHZhciByZWxhdGl2ZUNvbnN0cmFpbnRzID0ge307XG4gICAgaWYgKGNvbnN0cmFpbnRzLm1pbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJlbGF0aXZlQ29uc3RyYWludHMubWluID0gY29uc3RyYWludHMubWluIC0gbGF5b3V0Lm1pbjtcbiAgICB9XG4gICAgaWYgKGNvbnN0cmFpbnRzLm1heCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJlbGF0aXZlQ29uc3RyYWludHMubWF4ID0gY29uc3RyYWludHMubWF4IC0gbGF5b3V0Lm1pbjtcbiAgICB9XG4gICAgcmV0dXJuIHJlbGF0aXZlQ29uc3RyYWludHM7XG59XG52YXIgZGVmYXVsdEVsYXN0aWMgPSAwLjM1O1xuLyoqXG4gKiBBY2NlcHRzIGEgZHJhZ0VsYXN0aWMgcHJvcCBhbmQgcmV0dXJucyByZXNvbHZlZCBlbGFzdGljIHZhbHVlcyBmb3IgZWFjaCBheGlzLlxuICovXG5mdW5jdGlvbiByZXNvbHZlRHJhZ0VsYXN0aWMoZHJhZ0VsYXN0aWMpIHtcbiAgICBpZiAoZHJhZ0VsYXN0aWMgPT09IGZhbHNlKSB7XG4gICAgICAgIGRyYWdFbGFzdGljID0gMDtcbiAgICB9XG4gICAgZWxzZSBpZiAoZHJhZ0VsYXN0aWMgPT09IHRydWUpIHtcbiAgICAgICAgZHJhZ0VsYXN0aWMgPSBkZWZhdWx0RWxhc3RpYztcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgeDogcmVzb2x2ZUF4aXNFbGFzdGljKGRyYWdFbGFzdGljLCBcImxlZnRcIiwgXCJyaWdodFwiKSxcbiAgICAgICAgeTogcmVzb2x2ZUF4aXNFbGFzdGljKGRyYWdFbGFzdGljLCBcInRvcFwiLCBcImJvdHRvbVwiKSxcbiAgICB9O1xufVxuZnVuY3Rpb24gcmVzb2x2ZUF4aXNFbGFzdGljKGRyYWdFbGFzdGljLCBtaW5MYWJlbCwgbWF4TGFiZWwpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBtaW46IHJlc29sdmVQb2ludEVsYXN0aWMoZHJhZ0VsYXN0aWMsIG1pbkxhYmVsKSxcbiAgICAgICAgbWF4OiByZXNvbHZlUG9pbnRFbGFzdGljKGRyYWdFbGFzdGljLCBtYXhMYWJlbCksXG4gICAgfTtcbn1cbmZ1bmN0aW9uIHJlc29sdmVQb2ludEVsYXN0aWMoZHJhZ0VsYXN0aWMsIGxhYmVsKSB7XG4gICAgdmFyIF9hO1xuICAgIHJldHVybiB0eXBlb2YgZHJhZ0VsYXN0aWMgPT09IFwibnVtYmVyXCJcbiAgICAgICAgPyBkcmFnRWxhc3RpY1xuICAgICAgICA6IChfYSA9IGRyYWdFbGFzdGljW2xhYmVsXSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogMDtcbn1cblxuLyoqXG4gKiBNZWFzdXJlIGFuZCByZXR1cm4gdGhlIGVsZW1lbnQgYm91bmRpbmcgYm94LlxuICpcbiAqIFdlIGNvbnZlcnQgdGhlIGJveCBpbnRvIGFuIEF4aXNCb3gyRCB0byBtYWtlIGl0IGVhc2llciB0byB3b3JrIHdpdGggZWFjaCBheGlzXG4gKiBpbmRpdmlkdWFsbHkgYW5kIHByb2dyYW1tYXRpY2FsbHkuXG4gKlxuICogVGhpcyBmdW5jdGlvbiBvcHRpb25hbGx5IGFjY2VwdHMgYSB0cmFuc2Zvcm1QYWdlUG9pbnQgZnVuY3Rpb24gd2hpY2ggYWxsb3dzIHVzIHRvIGNvbXBlbnNhdGVcbiAqIGZvciwgZm9yIGluc3RhbmNlLCBtZWFzdXJpbmcgdGhlIGVsZW1lbnQgd2l0aGluIGEgc2NhbGVkIHBsYW5lIGxpa2UgYSBGcmFtZXIgZGV2aXZjZSBwcmV2aWV3IGNvbXBvbmVudC5cbiAqL1xuZnVuY3Rpb24gZ2V0Qm91bmRpbmdCb3goZWxlbWVudCwgdHJhbnNmb3JtUGFnZVBvaW50KSB7XG4gICAgdmFyIGJveCA9IGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgcmV0dXJuIGNvbnZlcnRCb3VuZGluZ0JveFRvQXhpc0JveCh0cmFuc2Zvcm1Cb3VuZGluZ0JveChib3gsIHRyYW5zZm9ybVBhZ2VQb2ludCkpO1xufVxuXG52YXIgY29tcGFyZUJ5RGVwdGggPSBmdW5jdGlvbiAoYSwgYikge1xuICAgIHJldHVybiBhLmRlcHRoIC0gYi5kZXB0aDtcbn07XG5cbmZ1bmN0aW9uIGlzUHJvamVjdGluZyh2aXN1YWxFbGVtZW50KSB7XG4gICAgdmFyIGlzRW5hYmxlZCA9IHZpc3VhbEVsZW1lbnQucHJvamVjdGlvbi5pc0VuYWJsZWQ7XG4gICAgcmV0dXJuIGlzRW5hYmxlZCB8fCB2aXN1YWxFbGVtZW50LnNob3VsZFJlc2V0VHJhbnNmb3JtKCk7XG59XG5mdW5jdGlvbiBjb2xsZWN0UHJvamVjdGluZ0FuY2VzdG9ycyh2aXN1YWxFbGVtZW50LCBhbmNlc3RvcnMpIHtcbiAgICBpZiAoYW5jZXN0b3JzID09PSB2b2lkIDApIHsgYW5jZXN0b3JzID0gW107IH1cbiAgICB2YXIgcGFyZW50ID0gdmlzdWFsRWxlbWVudC5wYXJlbnQ7XG4gICAgaWYgKHBhcmVudClcbiAgICAgICAgY29sbGVjdFByb2plY3RpbmdBbmNlc3RvcnMocGFyZW50LCBhbmNlc3RvcnMpO1xuICAgIGlmIChpc1Byb2plY3RpbmcodmlzdWFsRWxlbWVudCkpXG4gICAgICAgIGFuY2VzdG9ycy5wdXNoKHZpc3VhbEVsZW1lbnQpO1xuICAgIHJldHVybiBhbmNlc3RvcnM7XG59XG5mdW5jdGlvbiBjb2xsZWN0UHJvamVjdGluZ0NoaWxkcmVuKHZpc3VhbEVsZW1lbnQpIHtcbiAgICB2YXIgY2hpbGRyZW4gPSBbXTtcbiAgICB2YXIgYWRkQ2hpbGQgPSBmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgICAgaWYgKGlzUHJvamVjdGluZyhjaGlsZCkpXG4gICAgICAgICAgICBjaGlsZHJlbi5wdXNoKGNoaWxkKTtcbiAgICAgICAgY2hpbGQuY2hpbGRyZW4uZm9yRWFjaChhZGRDaGlsZCk7XG4gICAgfTtcbiAgICB2aXN1YWxFbGVtZW50LmNoaWxkcmVuLmZvckVhY2goYWRkQ2hpbGQpO1xuICAgIHJldHVybiBjaGlsZHJlbi5zb3J0KGNvbXBhcmVCeURlcHRoKTtcbn1cbi8qKlxuICogVXBkYXRlIHRoZSBsYXlvdXRTdGF0ZSBieSBtZWFzdXJpbmcgdGhlIERPTSBsYXlvdXQuIFRoaXNcbiAqIHNob3VsZCBiZSBjYWxsZWQgYWZ0ZXIgcmVzZXR0aW5nIGFueSBsYXlvdXQtYWZmZWN0aW5nIHRyYW5zZm9ybXMuXG4gKi9cbmZ1bmN0aW9uIHVwZGF0ZUxheW91dE1lYXN1cmVtZW50KHZpc3VhbEVsZW1lbnQpIHtcbiAgICBpZiAodmlzdWFsRWxlbWVudC5zaG91bGRSZXNldFRyYW5zZm9ybSgpKVxuICAgICAgICByZXR1cm47XG4gICAgdmFyIGxheW91dFN0YXRlID0gdmlzdWFsRWxlbWVudC5nZXRMYXlvdXRTdGF0ZSgpO1xuICAgIHZpc3VhbEVsZW1lbnQubm90aWZ5QmVmb3JlTGF5b3V0TWVhc3VyZShsYXlvdXRTdGF0ZS5sYXlvdXQpO1xuICAgIGxheW91dFN0YXRlLmlzSHlkcmF0ZWQgPSB0cnVlO1xuICAgIGxheW91dFN0YXRlLmxheW91dCA9IHZpc3VhbEVsZW1lbnQubWVhc3VyZVZpZXdwb3J0Qm94KCk7XG4gICAgbGF5b3V0U3RhdGUubGF5b3V0Q29ycmVjdGVkID0gY29weUF4aXNCb3gobGF5b3V0U3RhdGUubGF5b3V0KTtcbiAgICB2aXN1YWxFbGVtZW50Lm5vdGlmeUxheW91dE1lYXN1cmUobGF5b3V0U3RhdGUubGF5b3V0LCB2aXN1YWxFbGVtZW50LnByZXZWaWV3cG9ydEJveCB8fCBsYXlvdXRTdGF0ZS5sYXlvdXQpO1xuICAgIHN5bmNfX2RlZmF1bHRbJ2RlZmF1bHQnXS51cGRhdGUoZnVuY3Rpb24gKCkgeyByZXR1cm4gdmlzdWFsRWxlbWVudC5yZWJhc2VQcm9qZWN0aW9uVGFyZ2V0KCk7IH0pO1xufVxuLyoqXG4gKiBSZWNvcmQgdGhlIHZpZXdwb3J0IGJveCBhcyBpdCB3YXMgYmVmb3JlIGFuIGV4cGVjdGVkIG11dGF0aW9uL3JlLXJlbmRlclxuICovXG5mdW5jdGlvbiBzbmFwc2hvdFZpZXdwb3J0Qm94KHZpc3VhbEVsZW1lbnQpIHtcbiAgICBpZiAodmlzdWFsRWxlbWVudC5zaG91bGRSZXNldFRyYW5zZm9ybSgpKVxuICAgICAgICByZXR1cm47XG4gICAgdmlzdWFsRWxlbWVudC5wcmV2Vmlld3BvcnRCb3ggPSB2aXN1YWxFbGVtZW50Lm1lYXN1cmVWaWV3cG9ydEJveChmYWxzZSk7XG4gICAgLyoqXG4gICAgICogVXBkYXRlIHRhcmdldEJveCB0byBtYXRjaCB0aGUgcHJldlZpZXdwb3J0Qm94LiBUaGlzIGlzIGp1c3QgdG8gZW5zdXJlXG4gICAgICogdGhhdCB0YXJnZXRCb3ggaXMgYWZmZWN0ZWQgYnkgc2Nyb2xsIGluIHRoZSBzYW1lIHdheSBhcyB0aGUgbWVhc3VyZWQgYm94XG4gICAgICovXG4gICAgdmlzdWFsRWxlbWVudC5yZWJhc2VQcm9qZWN0aW9uVGFyZ2V0KGZhbHNlLCB2aXN1YWxFbGVtZW50LnByZXZWaWV3cG9ydEJveCk7XG59XG5cbmZ1bmN0aW9uIHR3ZWVuQXhpcyh0YXJnZXQsIHByZXYsIG5leHQsIHApIHtcbiAgICB0YXJnZXQubWluID0gcG9wbW90aW9uLm1peChwcmV2Lm1pbiwgbmV4dC5taW4sIHApO1xuICAgIHRhcmdldC5tYXggPSBwb3Btb3Rpb24ubWl4KHByZXYubWF4LCBuZXh0Lm1heCwgcCk7XG59XG5mdW5jdGlvbiBjYWxjUmVsYXRpdmVPZmZzZXRBeGlzKHBhcmVudCwgY2hpbGQpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBtaW46IGNoaWxkLm1pbiAtIHBhcmVudC5taW4sXG4gICAgICAgIG1heDogY2hpbGQubWF4IC0gcGFyZW50Lm1pbixcbiAgICB9O1xufVxuZnVuY3Rpb24gY2FsY1JlbGF0aXZlT2Zmc2V0KHBhcmVudCwgY2hpbGQpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICB4OiBjYWxjUmVsYXRpdmVPZmZzZXRBeGlzKHBhcmVudC54LCBjaGlsZC54KSxcbiAgICAgICAgeTogY2FsY1JlbGF0aXZlT2Zmc2V0QXhpcyhwYXJlbnQueSwgY2hpbGQueSksXG4gICAgfTtcbn1cbmZ1bmN0aW9uIGNoZWNrSWZQYXJlbnRIYXNDaGFuZ2VkKHByZXYsIG5leHQpIHtcbiAgICB2YXIgcHJldklkID0gcHJldi5nZXRMYXlvdXRJZCgpO1xuICAgIHZhciBuZXh0SWQgPSBuZXh0LmdldExheW91dElkKCk7XG4gICAgcmV0dXJuIHByZXZJZCAhPT0gbmV4dElkIHx8IChuZXh0SWQgPT09IHVuZGVmaW5lZCAmJiBwcmV2ICE9PSBuZXh0KTtcbn1cblxuZnVuY3Rpb24gaXNEcmFnZ2FibGUodmlzdWFsRWxlbWVudCkge1xuICAgIHZhciBfYSA9IHZpc3VhbEVsZW1lbnQuZ2V0UHJvcHMoKSwgZHJhZyA9IF9hLmRyYWcsIF9kcmFnWCA9IF9hLl9kcmFnWDtcbiAgICByZXR1cm4gZHJhZyAmJiAhX2RyYWdYO1xufVxuXG4vKipcbiAqIFJlc2V0IGFuIGF4aXMgdG8gdGhlIHByb3ZpZGVkIG9yaWdpbiBib3guXG4gKlxuICogVGhpcyBpcyBhIG11dGF0aXZlIG9wZXJhdGlvbi5cbiAqL1xuZnVuY3Rpb24gcmVzZXRBeGlzKGF4aXMsIG9yaWdpbkF4aXMpIHtcbiAgICBheGlzLm1pbiA9IG9yaWdpbkF4aXMubWluO1xuICAgIGF4aXMubWF4ID0gb3JpZ2luQXhpcy5tYXg7XG59XG4vKipcbiAqIFJlc2V0IGEgYm94IHRvIHRoZSBwcm92aWRlZCBvcmlnaW4gYm94LlxuICpcbiAqIFRoaXMgaXMgYSBtdXRhdGl2ZSBvcGVyYXRpb24uXG4gKi9cbmZ1bmN0aW9uIHJlc2V0Qm94KGJveCwgb3JpZ2luQm94KSB7XG4gICAgcmVzZXRBeGlzKGJveC54LCBvcmlnaW5Cb3gueCk7XG4gICAgcmVzZXRBeGlzKGJveC55LCBvcmlnaW5Cb3gueSk7XG59XG4vKipcbiAqIFNjYWxlcyBhIHBvaW50IGJhc2VkIG9uIGEgZmFjdG9yIGFuZCBhbiBvcmlnaW5Qb2ludFxuICovXG5mdW5jdGlvbiBzY2FsZVBvaW50KHBvaW50LCBzY2FsZSwgb3JpZ2luUG9pbnQpIHtcbiAgICB2YXIgZGlzdGFuY2VGcm9tT3JpZ2luID0gcG9pbnQgLSBvcmlnaW5Qb2ludDtcbiAgICB2YXIgc2NhbGVkID0gc2NhbGUgKiBkaXN0YW5jZUZyb21PcmlnaW47XG4gICAgcmV0dXJuIG9yaWdpblBvaW50ICsgc2NhbGVkO1xufVxuLyoqXG4gKiBBcHBsaWVzIGEgdHJhbnNsYXRlL3NjYWxlIGRlbHRhIHRvIGEgcG9pbnRcbiAqL1xuZnVuY3Rpb24gYXBwbHlQb2ludERlbHRhKHBvaW50LCB0cmFuc2xhdGUsIHNjYWxlLCBvcmlnaW5Qb2ludCwgYm94U2NhbGUpIHtcbiAgICBpZiAoYm94U2NhbGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBwb2ludCA9IHNjYWxlUG9pbnQocG9pbnQsIGJveFNjYWxlLCBvcmlnaW5Qb2ludCk7XG4gICAgfVxuICAgIHJldHVybiBzY2FsZVBvaW50KHBvaW50LCBzY2FsZSwgb3JpZ2luUG9pbnQpICsgdHJhbnNsYXRlO1xufVxuLyoqXG4gKiBBcHBsaWVzIGEgdHJhbnNsYXRlL3NjYWxlIGRlbHRhIHRvIGFuIGF4aXNcbiAqL1xuZnVuY3Rpb24gYXBwbHlBeGlzRGVsdGEoYXhpcywgdHJhbnNsYXRlLCBzY2FsZSwgb3JpZ2luUG9pbnQsIGJveFNjYWxlKSB7XG4gICAgaWYgKHRyYW5zbGF0ZSA9PT0gdm9pZCAwKSB7IHRyYW5zbGF0ZSA9IDA7IH1cbiAgICBpZiAoc2NhbGUgPT09IHZvaWQgMCkgeyBzY2FsZSA9IDE7IH1cbiAgICBheGlzLm1pbiA9IGFwcGx5UG9pbnREZWx0YShheGlzLm1pbiwgdHJhbnNsYXRlLCBzY2FsZSwgb3JpZ2luUG9pbnQsIGJveFNjYWxlKTtcbiAgICBheGlzLm1heCA9IGFwcGx5UG9pbnREZWx0YShheGlzLm1heCwgdHJhbnNsYXRlLCBzY2FsZSwgb3JpZ2luUG9pbnQsIGJveFNjYWxlKTtcbn1cbi8qKlxuICogQXBwbGllcyBhIHRyYW5zbGF0ZS9zY2FsZSBkZWx0YSB0byBhIGJveFxuICovXG5mdW5jdGlvbiBhcHBseUJveERlbHRhKGJveCwgX2EpIHtcbiAgICB2YXIgeCA9IF9hLngsIHkgPSBfYS55O1xuICAgIGFwcGx5QXhpc0RlbHRhKGJveC54LCB4LnRyYW5zbGF0ZSwgeC5zY2FsZSwgeC5vcmlnaW5Qb2ludCk7XG4gICAgYXBwbHlBeGlzRGVsdGEoYm94LnksIHkudHJhbnNsYXRlLCB5LnNjYWxlLCB5Lm9yaWdpblBvaW50KTtcbn1cbi8qKlxuICogQXBwbHkgYSB0cmFuc2Zvcm0gdG8gYW4gYXhpcyBmcm9tIHRoZSBsYXRlc3QgcmVzb2x2ZWQgbW90aW9uIHZhbHVlcy5cbiAqIFRoaXMgZnVuY3Rpb24gYmFzaWNhbGx5IGFjdHMgYXMgYSBicmlkZ2UgYmV0d2VlbiBhIGZsYXQgbW90aW9uIHZhbHVlIG1hcFxuICogYW5kIGFwcGx5QXhpc0RlbHRhXG4gKi9cbmZ1bmN0aW9uIGFwcGx5QXhpc1RyYW5zZm9ybXMoZmluYWwsIGF4aXMsIHRyYW5zZm9ybXMsIF9hKSB7XG4gICAgdmFyIF9iID0gdHNsaWIuX19yZWFkKF9hLCAzKSwga2V5ID0gX2JbMF0sIHNjYWxlS2V5ID0gX2JbMV0sIG9yaWdpbktleSA9IF9iWzJdO1xuICAgIC8vIENvcHkgdGhlIGN1cnJlbnQgYXhpcyB0byB0aGUgZmluYWwgYXhpcyBiZWZvcmUgbXV0YXRpb25cbiAgICBmaW5hbC5taW4gPSBheGlzLm1pbjtcbiAgICBmaW5hbC5tYXggPSBheGlzLm1heDtcbiAgICB2YXIgYXhpc09yaWdpbiA9IHRyYW5zZm9ybXNbb3JpZ2luS2V5XSAhPT0gdW5kZWZpbmVkID8gdHJhbnNmb3Jtc1tvcmlnaW5LZXldIDogMC41O1xuICAgIHZhciBvcmlnaW5Qb2ludCA9IHBvcG1vdGlvbi5taXgoYXhpcy5taW4sIGF4aXMubWF4LCBheGlzT3JpZ2luKTtcbiAgICAvLyBBcHBseSB0aGUgYXhpcyBkZWx0YSB0byB0aGUgZmluYWwgYXhpc1xuICAgIGFwcGx5QXhpc0RlbHRhKGZpbmFsLCB0cmFuc2Zvcm1zW2tleV0sIHRyYW5zZm9ybXNbc2NhbGVLZXldLCBvcmlnaW5Qb2ludCwgdHJhbnNmb3Jtcy5zY2FsZSk7XG59XG4vKipcbiAqIFRoZSBuYW1lcyBvZiB0aGUgbW90aW9uIHZhbHVlcyB3ZSB3YW50IHRvIGFwcGx5IGFzIHRyYW5zbGF0aW9uLCBzY2FsZSBhbmQgb3JpZ2luLlxuICovXG52YXIgeEtleXMgPSBbXCJ4XCIsIFwic2NhbGVYXCIsIFwib3JpZ2luWFwiXTtcbnZhciB5S2V5cyA9IFtcInlcIiwgXCJzY2FsZVlcIiwgXCJvcmlnaW5ZXCJdO1xuLyoqXG4gKiBBcHBseSBhIHRyYW5zZm9ybSB0byBhIGJveCBmcm9tIHRoZSBsYXRlc3QgcmVzb2x2ZWQgbW90aW9uIHZhbHVlcy5cbiAqL1xuZnVuY3Rpb24gYXBwbHlCb3hUcmFuc2Zvcm1zKGZpbmFsQm94LCBib3gsIHRyYW5zZm9ybXMpIHtcbiAgICBhcHBseUF4aXNUcmFuc2Zvcm1zKGZpbmFsQm94LngsIGJveC54LCB0cmFuc2Zvcm1zLCB4S2V5cyk7XG4gICAgYXBwbHlBeGlzVHJhbnNmb3JtcyhmaW5hbEJveC55LCBib3gueSwgdHJhbnNmb3JtcywgeUtleXMpO1xufVxuLyoqXG4gKiBSZW1vdmUgYSBkZWx0YSBmcm9tIGEgcG9pbnQuIFRoaXMgaXMgZXNzZW50aWFsbHkgdGhlIHN0ZXBzIG9mIGFwcGx5UG9pbnREZWx0YSBpbiByZXZlcnNlXG4gKi9cbmZ1bmN0aW9uIHJlbW92ZVBvaW50RGVsdGEocG9pbnQsIHRyYW5zbGF0ZSwgc2NhbGUsIG9yaWdpblBvaW50LCBib3hTY2FsZSkge1xuICAgIHBvaW50IC09IHRyYW5zbGF0ZTtcbiAgICBwb2ludCA9IHNjYWxlUG9pbnQocG9pbnQsIDEgLyBzY2FsZSwgb3JpZ2luUG9pbnQpO1xuICAgIGlmIChib3hTY2FsZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHBvaW50ID0gc2NhbGVQb2ludChwb2ludCwgMSAvIGJveFNjYWxlLCBvcmlnaW5Qb2ludCk7XG4gICAgfVxuICAgIHJldHVybiBwb2ludDtcbn1cbi8qKlxuICogUmVtb3ZlIGEgZGVsdGEgZnJvbSBhbiBheGlzLiBUaGlzIGlzIGVzc2VudGlhbGx5IHRoZSBzdGVwcyBvZiBhcHBseUF4aXNEZWx0YSBpbiByZXZlcnNlXG4gKi9cbmZ1bmN0aW9uIHJlbW92ZUF4aXNEZWx0YShheGlzLCB0cmFuc2xhdGUsIHNjYWxlLCBvcmlnaW4sIGJveFNjYWxlKSB7XG4gICAgaWYgKHRyYW5zbGF0ZSA9PT0gdm9pZCAwKSB7IHRyYW5zbGF0ZSA9IDA7IH1cbiAgICBpZiAoc2NhbGUgPT09IHZvaWQgMCkgeyBzY2FsZSA9IDE7IH1cbiAgICBpZiAob3JpZ2luID09PSB2b2lkIDApIHsgb3JpZ2luID0gMC41OyB9XG4gICAgdmFyIG9yaWdpblBvaW50ID0gcG9wbW90aW9uLm1peChheGlzLm1pbiwgYXhpcy5tYXgsIG9yaWdpbikgLSB0cmFuc2xhdGU7XG4gICAgYXhpcy5taW4gPSByZW1vdmVQb2ludERlbHRhKGF4aXMubWluLCB0cmFuc2xhdGUsIHNjYWxlLCBvcmlnaW5Qb2ludCwgYm94U2NhbGUpO1xuICAgIGF4aXMubWF4ID0gcmVtb3ZlUG9pbnREZWx0YShheGlzLm1heCwgdHJhbnNsYXRlLCBzY2FsZSwgb3JpZ2luUG9pbnQsIGJveFNjYWxlKTtcbn1cbi8qKlxuICogUmVtb3ZlIGEgdHJhbnNmb3JtcyBmcm9tIGFuIGF4aXMuIFRoaXMgaXMgZXNzZW50aWFsbHkgdGhlIHN0ZXBzIG9mIGFwcGx5QXhpc1RyYW5zZm9ybXMgaW4gcmV2ZXJzZVxuICogYW5kIGFjdHMgYXMgYSBicmlkZ2UgYmV0d2VlbiBtb3Rpb24gdmFsdWVzIGFuZCByZW1vdmVBeGlzRGVsdGFcbiAqL1xuZnVuY3Rpb24gcmVtb3ZlQXhpc1RyYW5zZm9ybXMoYXhpcywgdHJhbnNmb3JtcywgX2EpIHtcbiAgICB2YXIgX2IgPSB0c2xpYi5fX3JlYWQoX2EsIDMpLCBrZXkgPSBfYlswXSwgc2NhbGVLZXkgPSBfYlsxXSwgb3JpZ2luS2V5ID0gX2JbMl07XG4gICAgcmVtb3ZlQXhpc0RlbHRhKGF4aXMsIHRyYW5zZm9ybXNba2V5XSwgdHJhbnNmb3Jtc1tzY2FsZUtleV0sIHRyYW5zZm9ybXNbb3JpZ2luS2V5XSwgdHJhbnNmb3Jtcy5zY2FsZSk7XG59XG4vKipcbiAqIFJlbW92ZSBhIHRyYW5zZm9ybXMgZnJvbSBhbiBib3guIFRoaXMgaXMgZXNzZW50aWFsbHkgdGhlIHN0ZXBzIG9mIGFwcGx5QXhpc0JveCBpbiByZXZlcnNlXG4gKiBhbmQgYWN0cyBhcyBhIGJyaWRnZSBiZXR3ZWVuIG1vdGlvbiB2YWx1ZXMgYW5kIHJlbW92ZUF4aXNEZWx0YVxuICovXG5mdW5jdGlvbiByZW1vdmVCb3hUcmFuc2Zvcm1zKGJveCwgdHJhbnNmb3Jtcykge1xuICAgIHJlbW92ZUF4aXNUcmFuc2Zvcm1zKGJveC54LCB0cmFuc2Zvcm1zLCB4S2V5cyk7XG4gICAgcmVtb3ZlQXhpc1RyYW5zZm9ybXMoYm94LnksIHRyYW5zZm9ybXMsIHlLZXlzKTtcbn1cbi8qKlxuICogQXBwbHkgYSB0cmVlIG9mIGRlbHRhcyB0byBhIGJveC4gV2UgZG8gdGhpcyB0byBjYWxjdWxhdGUgdGhlIGVmZmVjdCBvZiBhbGwgdGhlIHRyYW5zZm9ybXNcbiAqIGluIGEgdHJlZSB1cG9uIG91ciBib3ggYmVmb3JlIHRoZW4gY2FsY3VsYXRpbmcgaG93IHRvIHByb2plY3QgaXQgaW50byBvdXIgZGVzaXJlZCB2aWV3cG9ydC1yZWxhdGl2ZSBib3hcbiAqXG4gKiBUaGlzIGlzIHRoZSBmaW5hbCBuZXN0ZWQgbG9vcCB3aXRoaW4gdXBkYXRlTGF5b3V0RGVsdGEgZm9yIGZ1dHVyZSByZWZhY3RvcmluZ1xuICovXG5mdW5jdGlvbiBhcHBseVRyZWVEZWx0YXMoYm94LCB0cmVlU2NhbGUsIHRyZWVQYXRoKSB7XG4gICAgdmFyIHRyZWVMZW5ndGggPSB0cmVlUGF0aC5sZW5ndGg7XG4gICAgaWYgKCF0cmVlTGVuZ3RoKVxuICAgICAgICByZXR1cm47XG4gICAgLy8gUmVzZXQgdGhlIHRyZWVTY2FsZVxuICAgIHRyZWVTY2FsZS54ID0gdHJlZVNjYWxlLnkgPSAxO1xuICAgIHZhciBub2RlO1xuICAgIHZhciBkZWx0YTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRyZWVMZW5ndGg7IGkrKykge1xuICAgICAgICBub2RlID0gdHJlZVBhdGhbaV07XG4gICAgICAgIGRlbHRhID0gbm9kZS5nZXRMYXlvdXRTdGF0ZSgpLmRlbHRhO1xuICAgICAgICAvLyBJbmNvcG9yYXRlIGVhY2ggYW5jZXN0b3IncyBzY2FsZSBpbnRvIGEgY3VsbXVsYXRpdmUgdHJlZVNjYWxlIGZvciB0aGlzIGNvbXBvbmVudFxuICAgICAgICB0cmVlU2NhbGUueCAqPSBkZWx0YS54LnNjYWxlO1xuICAgICAgICB0cmVlU2NhbGUueSAqPSBkZWx0YS55LnNjYWxlO1xuICAgICAgICAvLyBBcHBseSBlYWNoIGFuY2VzdG9yJ3MgY2FsY3VsYXRlZCBkZWx0YSBpbnRvIHRoaXMgY29tcG9uZW50J3MgcmVjb3JkZWQgbGF5b3V0IGJveFxuICAgICAgICBhcHBseUJveERlbHRhKGJveCwgZGVsdGEpO1xuICAgICAgICAvLyBJZiB0aGlzIGlzIGEgZHJhZ2dhYmxlIGFuY2VzdG9yLCBhbHNvIGluY29ycG9yYXRlIHRoZSBub2RlJ3MgdHJhbnNmb3JtIHRvIHRoZSBsYXlvdXQgYm94XG4gICAgICAgIGlmIChpc0RyYWdnYWJsZShub2RlKSkge1xuICAgICAgICAgICAgYXBwbHlCb3hUcmFuc2Zvcm1zKGJveCwgYm94LCBub2RlLmdldExhdGVzdFZhbHVlcygpKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgYm9vbGVhbiBzdGF0aW5nIHdoZXRoZXIgb3Igbm90IHdlIGNvbnZlcnRlZCB0aGUgcHJvamVjdGlvblxuICogdG8gcmVsYXRpdmUgcHJvamVjdGlvbi5cbiAqL1xuZnVuY3Rpb24gY29udmVydFRvUmVsYXRpdmVQcm9qZWN0aW9uKHZpc3VhbEVsZW1lbnQsIGlzTGF5b3V0RHJhZykge1xuICAgIGlmIChpc0xheW91dERyYWcgPT09IHZvaWQgMCkgeyBpc0xheW91dERyYWcgPSB0cnVlOyB9XG4gICAgdmFyIHByb2plY3Rpb25QYXJlbnQgPSB2aXN1YWxFbGVtZW50LmdldFByb2plY3Rpb25QYXJlbnQoKTtcbiAgICBpZiAoIXByb2plY3Rpb25QYXJlbnQpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB2YXIgb2Zmc2V0O1xuICAgIGlmIChpc0xheW91dERyYWcpIHtcbiAgICAgICAgb2Zmc2V0ID0gY2FsY1JlbGF0aXZlT2Zmc2V0KHByb2plY3Rpb25QYXJlbnQucHJvamVjdGlvbi50YXJnZXQsIHZpc3VhbEVsZW1lbnQucHJvamVjdGlvbi50YXJnZXQpO1xuICAgICAgICByZW1vdmVCb3hUcmFuc2Zvcm1zKG9mZnNldCwgcHJvamVjdGlvblBhcmVudC5nZXRMYXRlc3RWYWx1ZXMoKSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBvZmZzZXQgPSBjYWxjUmVsYXRpdmVPZmZzZXQocHJvamVjdGlvblBhcmVudC5nZXRMYXlvdXRTdGF0ZSgpLmxheW91dCwgdmlzdWFsRWxlbWVudC5nZXRMYXlvdXRTdGF0ZSgpLmxheW91dCk7XG4gICAgfVxuICAgIGVhY2hBeGlzKGZ1bmN0aW9uIChheGlzKSB7XG4gICAgICAgIHJldHVybiB2aXN1YWxFbGVtZW50LnNldFByb2plY3Rpb25UYXJnZXRBeGlzKGF4aXMsIG9mZnNldFtheGlzXS5taW4sIG9mZnNldFtheGlzXS5tYXgsIHRydWUpO1xuICAgIH0pO1xuICAgIHJldHVybiB0cnVlO1xufVxuXG52YXIgdW5yZXNvbHZlZEpvYnMgPSBuZXcgU2V0KCk7XG5mdW5jdGlvbiBwdXNoSm9iKHN0YWNrLCBqb2IsIHBvaW50ZXIpIHtcbiAgICBpZiAoIXN0YWNrW3BvaW50ZXJdKVxuICAgICAgICBzdGFja1twb2ludGVyXSA9IFtdO1xuICAgIHN0YWNrW3BvaW50ZXJdLnB1c2goam9iKTtcbn1cbmZ1bmN0aW9uIGJhdGNoTGF5b3V0KGNhbGxiYWNrKSB7XG4gICAgdW5yZXNvbHZlZEpvYnMuYWRkKGNhbGxiYWNrKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkgeyByZXR1cm4gdW5yZXNvbHZlZEpvYnMuZGVsZXRlKGNhbGxiYWNrKTsgfTtcbn1cbmZ1bmN0aW9uIGZsdXNoTGF5b3V0KCkge1xuICAgIGlmICghdW5yZXNvbHZlZEpvYnMuc2l6ZSlcbiAgICAgICAgcmV0dXJuO1xuICAgIHZhciBwb2ludGVyID0gMDtcbiAgICB2YXIgcmVhZHMgPSBbW11dO1xuICAgIHZhciB3cml0ZXMgPSBbXTtcbiAgICB2YXIgc2V0UmVhZCA9IGZ1bmN0aW9uIChqb2IpIHsgcmV0dXJuIHB1c2hKb2IocmVhZHMsIGpvYiwgcG9pbnRlcik7IH07XG4gICAgdmFyIHNldFdyaXRlID0gZnVuY3Rpb24gKGpvYikge1xuICAgICAgICBwdXNoSm9iKHdyaXRlcywgam9iLCBwb2ludGVyKTtcbiAgICAgICAgcG9pbnRlcisrO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUmVzb2x2ZSBqb2JzIGludG8gdGhlaXIgYXJyYXkgc3RhY2tzXG4gICAgICovXG4gICAgdW5yZXNvbHZlZEpvYnMuZm9yRWFjaChmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgICAgY2FsbGJhY2soc2V0UmVhZCwgc2V0V3JpdGUpO1xuICAgICAgICBwb2ludGVyID0gMDtcbiAgICB9KTtcbiAgICB1bnJlc29sdmVkSm9icy5jbGVhcigpO1xuICAgIC8qKlxuICAgICAqIEV4ZWN1dGUgam9ic1xuICAgICAqL1xuICAgIHZhciBudW1TdGFja3MgPSB3cml0ZXMubGVuZ3RoO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDw9IG51bVN0YWNrczsgaSsrKSB7XG4gICAgICAgIHJlYWRzW2ldICYmIHJlYWRzW2ldLmZvckVhY2goZXhlY3V0ZUpvYik7XG4gICAgICAgIHdyaXRlc1tpXSAmJiB3cml0ZXNbaV0uZm9yRWFjaChleGVjdXRlSm9iKTtcbiAgICB9XG59XG52YXIgZXhlY3V0ZUpvYiA9IGZ1bmN0aW9uIChqb2IpIHsgcmV0dXJuIGpvYigpOyB9O1xuXG52YXIgZWxlbWVudERyYWdDb250cm9scyA9IG5ldyBXZWFrTWFwKCk7XG4vKipcbiAqXG4gKi9cbnZhciBsYXN0UG9pbnRlckV2ZW50O1xudmFyIFZpc3VhbEVsZW1lbnREcmFnQ29udHJvbHMgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gVmlzdWFsRWxlbWVudERyYWdDb250cm9scyhfYSkge1xuICAgICAgICB2YXIgdmlzdWFsRWxlbWVudCA9IF9hLnZpc3VhbEVsZW1lbnQ7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUcmFjayB3aGV0aGVyIHdlJ3JlIGN1cnJlbnRseSBkcmFnZ2luZy5cbiAgICAgICAgICpcbiAgICAgICAgICogQGludGVybmFsXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmlzRHJhZ2dpbmcgPSBmYWxzZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBjdXJyZW50IGRpcmVjdGlvbiBvZiBkcmFnLCBvciBgbnVsbGAgaWYgYm90aC5cbiAgICAgICAgICpcbiAgICAgICAgICogQGludGVybmFsXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmN1cnJlbnREaXJlY3Rpb24gPSBudWxsO1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIHBlcm1pdHRlZCBib3VuZGFyaWVzIG9mIHRyYXZlbCwgaW4gcGl4ZWxzLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAaW50ZXJuYWxcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuY29uc3RyYWludHMgPSBmYWxzZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBwZXItYXhpcyByZXNvbHZlZCBlbGFzdGljIHZhbHVlcy5cbiAgICAgICAgICpcbiAgICAgICAgICogQGludGVybmFsXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmVsYXN0aWMgPSBheGlzQm94KCk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBIHJlZmVyZW5jZSB0byB0aGUgaG9zdCBjb21wb25lbnQncyBsYXRlc3QgcHJvcHMuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBpbnRlcm5hbFxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5wcm9wcyA9IHt9O1xuICAgICAgICAvKipcbiAgICAgICAgICogQGludGVybmFsXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmhhc011dGF0ZWRDb25zdHJhaW50cyA9IGZhbHNlO1xuICAgICAgICAvKipcbiAgICAgICAgICogVHJhY2sgdGhlIGluaXRpYWwgcG9zaXRpb24gb2YgdGhlIGN1cnNvciByZWxhdGl2ZSB0byB0aGUgZHJhZ2dpbmcgZWxlbWVudFxuICAgICAgICAgKiB3aGVuIGRyYWdnaW5nIHN0YXJ0cyBhcyBhIHZhbHVlIG9mIDAtMSBvbiBlYWNoIGF4aXMuIFdlIHRoZW4gdXNlIHRoaXMgdG8gY2FsY3VsYXRlXG4gICAgICAgICAqIGFuIGlkZWFsIGJvdW5kaW5nIGJveCBmb3IgdGhlIFZpc3VhbEVsZW1lbnQgcmVuZGVyZXIgdG8gcHJvamVjdCBpbnRvIGV2ZXJ5IGZyYW1lLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAaW50ZXJuYWxcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuY3Vyc29yUHJvZ3Jlc3MgPSB7XG4gICAgICAgICAgICB4OiAwLjUsXG4gICAgICAgICAgICB5OiAwLjUsXG4gICAgICAgIH07XG4gICAgICAgIC8vIFdoZW4gdXBkYXRpbmcgX2RyYWdYLCBvciBfZHJhZ1kgaW5zdGVhZCBvZiB0aGUgVmlzdWFsRWxlbWVudCxcbiAgICAgICAgLy8gcGVyc2lzdCB0aGVpciB2YWx1ZXMgYmV0d2VlbiBkcmFnIGdlc3R1cmVzLlxuICAgICAgICB0aGlzLm9yaWdpblBvaW50ID0ge307XG4gICAgICAgIC8vIFRoaXMgaXMgYSByZWZlcmVuY2UgdG8gdGhlIGdsb2JhbCBkcmFnIGdlc3R1cmUgbG9jaywgZW5zdXJpbmcgb25seSBvbmUgY29tcG9uZW50XG4gICAgICAgIC8vIGNhbiBcImNhcHR1cmVcIiB0aGUgZHJhZyBvZiBvbmUgb3IgYm90aCBheGVzLlxuICAgICAgICAvLyBUT0RPOiBMb29rIGludG8gbW92aW5nIHRoaXMgaW50byBwYW5zZXNzaW9uP1xuICAgICAgICB0aGlzLm9wZW5HbG9iYWxMb2NrID0gbnVsbDtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBpbnRlcm5hbFxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5wYW5TZXNzaW9uID0gbnVsbDtcbiAgICAgICAgdGhpcy52aXN1YWxFbGVtZW50ID0gdmlzdWFsRWxlbWVudDtcbiAgICAgICAgdGhpcy52aXN1YWxFbGVtZW50LmVuYWJsZUxheW91dFByb2plY3Rpb24oKTtcbiAgICAgICAgZWxlbWVudERyYWdDb250cm9scy5zZXQodmlzdWFsRWxlbWVudCwgdGhpcyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEluc3RhbnRpYXRlIGEgUGFuU2Vzc2lvbiBmb3IgdGhlIGRyYWcgZ2VzdHVyZVxuICAgICAqXG4gICAgICogQHB1YmxpY1xuICAgICAqL1xuICAgIFZpc3VhbEVsZW1lbnREcmFnQ29udHJvbHMucHJvdG90eXBlLnN0YXJ0ID0gZnVuY3Rpb24gKG9yaWdpbkV2ZW50LCBfYSkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgX2IgPSBfYSA9PT0gdm9pZCAwID8ge30gOiBfYSwgX2MgPSBfYi5zbmFwVG9DdXJzb3IsIHNuYXBUb0N1cnNvciA9IF9jID09PSB2b2lkIDAgPyBmYWxzZSA6IF9jLCBjdXJzb3JQcm9ncmVzcyA9IF9iLmN1cnNvclByb2dyZXNzO1xuICAgICAgICB2YXIgb25TZXNzaW9uU3RhcnQgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgIC8vIFN0b3AgYW55IGFuaW1hdGlvbnMgb24gYm90aCBheGlzIHZhbHVlcyBpbW1lZGlhdGVseS4gVGhpcyBhbGxvd3MgdGhlIHVzZXIgdG8gdGhyb3cgYW5kIGNhdGNoXG4gICAgICAgICAgICAvLyB0aGUgY29tcG9uZW50LlxuICAgICAgICAgICAgX3RoaXMuc3RvcE1vdGlvbigpO1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBTYXZlIHRoZSBpbml0aWFsIHBvaW50LiBXZSdsbCB1c2UgdGhpcyB0byBjYWxjdWxhdGUgdGhlIHBvaW50ZXIncyBwb3NpdGlvbiByYXRoZXJcbiAgICAgICAgICAgICAqIHRoYW4gdGhlIG9uZSB3ZSByZWNlaXZlIHdoZW4gdGhlIGdlc3R1cmUgYWN0dWFsbHkgc3RhcnRzLiBCeSB0aGVuLCB0aGUgcG9pbnRlciB3aWxsXG4gICAgICAgICAgICAgKiBoYXZlIGFscmVhZHkgbW92ZWQsIGFuZCB0aGUgcGVyY2VwdGlvbiB3aWxsIGJlIG9mIHRoZSBwb2ludGVyIFwic2xpcHBpbmdcIiBhY3Jvc3MgdGhlIGVsZW1lbnRcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgdmFyIGluaXRpYWxQb2ludCA9IGdldFZpZXdwb3J0UG9pbnRGcm9tRXZlbnQoZXZlbnQpLnBvaW50O1xuICAgICAgICAgICAgKF9hID0gX3RoaXMuY2FuY2VsTGF5b3V0KSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuY2FsbChfdGhpcyk7XG4gICAgICAgICAgICBfdGhpcy5jYW5jZWxMYXlvdXQgPSBiYXRjaExheW91dChmdW5jdGlvbiAocmVhZCwgd3JpdGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgYW5jZXN0b3JzID0gY29sbGVjdFByb2plY3RpbmdBbmNlc3RvcnMoX3RoaXMudmlzdWFsRWxlbWVudCk7XG4gICAgICAgICAgICAgICAgdmFyIGNoaWxkcmVuID0gY29sbGVjdFByb2plY3RpbmdDaGlsZHJlbihfdGhpcy52aXN1YWxFbGVtZW50KTtcbiAgICAgICAgICAgICAgICB2YXIgdHJlZSA9IHRzbGliLl9fc3ByZWFkQXJyYXkodHNsaWIuX19zcHJlYWRBcnJheShbXSwgdHNsaWIuX19yZWFkKGFuY2VzdG9ycykpLCB0c2xpYi5fX3JlYWQoY2hpbGRyZW4pKTtcbiAgICAgICAgICAgICAgICB2YXIgaGFzTWFudWFsbHlTZXRDdXJzb3JPcmlnaW4gPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgKiBBcHBseSBhIHNpbXBsZSBsb2NrIHRvIHRoZSBwcm9qZWN0aW9uIHRhcmdldC4gVGhpcyBlbnN1cmVzIG5vIGFuaW1hdGlvbnNcbiAgICAgICAgICAgICAgICAgKiBjYW4gcnVuIG9uIHRoZSBwcm9qZWN0aW9uIGJveCB3aGlsZSB0aGlzIGxvY2sgaXMgYWN0aXZlLlxuICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgIF90aGlzLmlzTGF5b3V0RHJhZygpICYmIF90aGlzLnZpc3VhbEVsZW1lbnQubG9ja1Byb2plY3Rpb25UYXJnZXQoKTtcbiAgICAgICAgICAgICAgICB3cml0ZShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHRyZWUuZm9yRWFjaChmdW5jdGlvbiAoZWxlbWVudCkgeyByZXR1cm4gZWxlbWVudC5yZXNldFRyYW5zZm9ybSgpOyB9KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICByZWFkKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlTGF5b3V0TWVhc3VyZW1lbnQoX3RoaXMudmlzdWFsRWxlbWVudCk7XG4gICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuLmZvckVhY2godXBkYXRlTGF5b3V0TWVhc3VyZW1lbnQpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHdyaXRlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgdHJlZS5mb3JFYWNoKGZ1bmN0aW9uIChlbGVtZW50KSB7IHJldHVybiBlbGVtZW50LnJlc3RvcmVUcmFuc2Zvcm0oKTsgfSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzbmFwVG9DdXJzb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGhhc01hbnVhbGx5U2V0Q3Vyc29yT3JpZ2luID0gX3RoaXMuc25hcFRvQ3Vyc29yKGluaXRpYWxQb2ludCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICByZWFkKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGlzUmVsYXRpdmVEcmFnID0gQm9vbGVhbihfdGhpcy5nZXRBeGlzTW90aW9uVmFsdWUoXCJ4XCIpICYmICFfdGhpcy5pc0V4dGVybmFsRHJhZygpKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFpc1JlbGF0aXZlRHJhZykge1xuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMudmlzdWFsRWxlbWVudC5yZWJhc2VQcm9qZWN0aW9uVGFyZ2V0KHRydWUsIF90aGlzLnZpc3VhbEVsZW1lbnQubWVhc3VyZVZpZXdwb3J0Qm94KGZhbHNlKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgX3RoaXMudmlzdWFsRWxlbWVudC5zY2hlZHVsZVVwZGF0ZUxheW91dFByb2plY3Rpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICAgICAqIFdoZW4gZHJhZ2dpbmcgc3RhcnRzLCB3ZSB3YW50IHRvIGZpbmQgd2hlcmUgdGhlIGN1cnNvciBpcyByZWxhdGl2ZSB0byB0aGUgYm91bmRpbmcgYm94XG4gICAgICAgICAgICAgICAgICAgICAqIG9mIHRoZSBlbGVtZW50LiBFdmVyeSBmcmFtZSwgd2UgY2FsY3VsYXRlIGEgbmV3IGJvdW5kaW5nIGJveCB1c2luZyB0aGlzIHJlbGF0aXZlIHBvc2l0aW9uXG4gICAgICAgICAgICAgICAgICAgICAqIGFuZCBsZXQgdGhlIHZpc3VhbEVsZW1lbnQgcmVuZGVyZXIgZmlndXJlIG91dCBob3cgdG8gcmVwcm9qZWN0IHRoZSBlbGVtZW50IGludG8gdGhpcyBib3VuZGluZ1xuICAgICAgICAgICAgICAgICAgICAgKiBib3guXG4gICAgICAgICAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgICAgICAgICAqIEJ5IGRvaW5nIGl0IHRoaXMgd2F5LCByYXRoZXIgdGhhbiBhcHBseWluZyBhbiB4L3kgdHJhbnNmb3JtIGRpcmVjdGx5IHRvIHRoZSBlbGVtZW50LFxuICAgICAgICAgICAgICAgICAgICAgKiB3ZSBjYW4gZW5zdXJlIHRoZSBjb21wb25lbnQgYWx3YXlzIHZpc3VhbGx5IHN0aWNrcyB0byB0aGUgY3Vyc29yIGFzIHdlJ2QgZXhwZWN0LCBldmVuXG4gICAgICAgICAgICAgICAgICAgICAqIGlmIHRoZSBET00gZWxlbWVudCBpdHNlbGYgY2hhbmdlcyBsYXlvdXQgYXMgYSByZXN1bHQgb2YgUmVhY3QgdXBkYXRlcyB0aGUgdXNlciBtaWdodFxuICAgICAgICAgICAgICAgICAgICAgKiBtYWtlIGJhc2VkIG9uIHRoZSBkcmFnIHBvc2l0aW9uLlxuICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAgICAgdmFyIHByb2plY3Rpb24gPSBfdGhpcy52aXN1YWxFbGVtZW50LnByb2plY3Rpb247XG4gICAgICAgICAgICAgICAgICAgIGVhY2hBeGlzKGZ1bmN0aW9uIChheGlzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWhhc01hbnVhbGx5U2V0Q3Vyc29yT3JpZ2luKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF9hID0gcHJvamVjdGlvbi50YXJnZXRbYXhpc10sIG1pbiA9IF9hLm1pbiwgbWF4ID0gX2EubWF4O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLmN1cnNvclByb2dyZXNzW2F4aXNdID0gY3Vyc29yUHJvZ3Jlc3NcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBjdXJzb3JQcm9ncmVzc1theGlzXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IHBvcG1vdGlvbi5wcm9ncmVzcyhtaW4sIG1heCwgaW5pdGlhbFBvaW50W2F4aXNdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAgICAgICAgICogSWYgd2UgaGF2ZSBleHRlcm5hbCBkcmFnIE1vdGlvblZhbHVlcywgcmVjb3JkIHRoZWlyIG9yaWdpbiBwb2ludC4gT24gcG9pbnRlcm1vdmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAqIHdlJ2xsIGFwcGx5IHRoZSBwYW4gZ2VzdHVyZSBvZmZzZXQgZGlyZWN0bHkgdG8gdGhpcyB2YWx1ZS5cbiAgICAgICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGF4aXNWYWx1ZSA9IF90aGlzLmdldEF4aXNNb3Rpb25WYWx1ZShheGlzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChheGlzVmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5vcmlnaW5Qb2ludFtheGlzXSA9IGF4aXNWYWx1ZS5nZXQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgd3JpdGUoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBzeW5jLmZsdXNoU3luYy51cGRhdGUoKTtcbiAgICAgICAgICAgICAgICAgICAgc3luYy5mbHVzaFN5bmMucHJlUmVuZGVyKCk7XG4gICAgICAgICAgICAgICAgICAgIHN5bmMuZmx1c2hTeW5jLnJlbmRlcigpO1xuICAgICAgICAgICAgICAgICAgICBzeW5jLmZsdXNoU3luYy5wb3N0UmVuZGVyKCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcmVhZChmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy5yZXNvbHZlRHJhZ0NvbnN0cmFpbnRzKCk7IH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICAgIHZhciBvblN0YXJ0ID0gZnVuY3Rpb24gKGV2ZW50LCBpbmZvKSB7XG4gICAgICAgICAgICB2YXIgX2EsIF9iLCBfYztcbiAgICAgICAgICAgIC8vIEF0dGVtcHQgdG8gZ3JhYiB0aGUgZ2xvYmFsIGRyYWcgZ2VzdHVyZSBsb2NrIC0gbWF5YmUgbWFrZSB0aGlzIHBhcnQgb2YgUGFuU2Vzc2lvblxuICAgICAgICAgICAgdmFyIF9kID0gX3RoaXMucHJvcHMsIGRyYWcgPSBfZC5kcmFnLCBkcmFnUHJvcGFnYXRpb24gPSBfZC5kcmFnUHJvcGFnYXRpb247XG4gICAgICAgICAgICBpZiAoZHJhZyAmJiAhZHJhZ1Byb3BhZ2F0aW9uKSB7XG4gICAgICAgICAgICAgICAgaWYgKF90aGlzLm9wZW5HbG9iYWxMb2NrKVxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5vcGVuR2xvYmFsTG9jaygpO1xuICAgICAgICAgICAgICAgIF90aGlzLm9wZW5HbG9iYWxMb2NrID0gZ2V0R2xvYmFsTG9jayhkcmFnKTtcbiAgICAgICAgICAgICAgICAvLyBJZiB3ZSBkb24gJ3QgaGF2ZSB0aGUgbG9jaywgZG9uJ3Qgc3RhcnQgZHJhZ2dpbmdcbiAgICAgICAgICAgICAgICBpZiAoIV90aGlzLm9wZW5HbG9iYWxMb2NrKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmbHVzaExheW91dCgpO1xuICAgICAgICAgICAgLy8gU2V0IGN1cnJlbnQgZHJhZyBzdGF0dXNcbiAgICAgICAgICAgIF90aGlzLmlzRHJhZ2dpbmcgPSB0cnVlO1xuICAgICAgICAgICAgX3RoaXMuY3VycmVudERpcmVjdGlvbiA9IG51bGw7XG4gICAgICAgICAgICAvLyBGaXJlIG9uRHJhZ1N0YXJ0IGV2ZW50XG4gICAgICAgICAgICAoX2IgPSAoX2EgPSBfdGhpcy5wcm9wcykub25EcmFnU3RhcnQpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5jYWxsKF9hLCBldmVudCwgaW5mbyk7XG4gICAgICAgICAgICAoX2MgPSBfdGhpcy52aXN1YWxFbGVtZW50LmFuaW1hdGlvblN0YXRlKSA9PT0gbnVsbCB8fCBfYyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Muc2V0QWN0aXZlKEFuaW1hdGlvblR5cGUuRHJhZywgdHJ1ZSk7XG4gICAgICAgIH07XG4gICAgICAgIHZhciBvbk1vdmUgPSBmdW5jdGlvbiAoZXZlbnQsIGluZm8pIHtcbiAgICAgICAgICAgIHZhciBfYSwgX2IsIF9jLCBfZDtcbiAgICAgICAgICAgIHZhciBfZSA9IF90aGlzLnByb3BzLCBkcmFnUHJvcGFnYXRpb24gPSBfZS5kcmFnUHJvcGFnYXRpb24sIGRyYWdEaXJlY3Rpb25Mb2NrID0gX2UuZHJhZ0RpcmVjdGlvbkxvY2s7XG4gICAgICAgICAgICAvLyBJZiB3ZSBkaWRuJ3Qgc3VjY2Vzc2Z1bGx5IHJlY2VpdmUgdGhlIGdlc3R1cmUgbG9jaywgZWFybHkgcmV0dXJuLlxuICAgICAgICAgICAgaWYgKCFkcmFnUHJvcGFnYXRpb24gJiYgIV90aGlzLm9wZW5HbG9iYWxMb2NrKVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIHZhciBvZmZzZXQgPSBpbmZvLm9mZnNldDtcbiAgICAgICAgICAgIC8vIEF0dGVtcHQgdG8gZGV0ZWN0IGRyYWcgZGlyZWN0aW9uIGlmIGRpcmVjdGlvbkxvY2sgaXMgdHJ1ZVxuICAgICAgICAgICAgaWYgKGRyYWdEaXJlY3Rpb25Mb2NrICYmIF90aGlzLmN1cnJlbnREaXJlY3Rpb24gPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5jdXJyZW50RGlyZWN0aW9uID0gZ2V0Q3VycmVudERpcmVjdGlvbihvZmZzZXQpO1xuICAgICAgICAgICAgICAgIC8vIElmIHdlJ3ZlIHN1Y2Nlc3NmdWxseSBzZXQgYSBkaXJlY3Rpb24sIG5vdGlmeSBsaXN0ZW5lclxuICAgICAgICAgICAgICAgIGlmIChfdGhpcy5jdXJyZW50RGlyZWN0aW9uICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIChfYiA9IChfYSA9IF90aGlzLnByb3BzKS5vbkRpcmVjdGlvbkxvY2spID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5jYWxsKF9hLCBfdGhpcy5jdXJyZW50RGlyZWN0aW9uKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gVXBkYXRlIGVhY2ggcG9pbnQgd2l0aCB0aGUgbGF0ZXN0IHBvc2l0aW9uXG4gICAgICAgICAgICBfdGhpcy51cGRhdGVBeGlzKFwieFwiLCBpbmZvLnBvaW50LCBvZmZzZXQpO1xuICAgICAgICAgICAgX3RoaXMudXBkYXRlQXhpcyhcInlcIiwgaW5mby5wb2ludCwgb2Zmc2V0KTtcbiAgICAgICAgICAgIC8vIEZpcmUgb25EcmFnIGV2ZW50XG4gICAgICAgICAgICAoX2QgPSAoX2MgPSBfdGhpcy5wcm9wcykub25EcmFnKSA9PT0gbnVsbCB8fCBfZCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2QuY2FsbChfYywgZXZlbnQsIGluZm8pO1xuICAgICAgICAgICAgLy8gVXBkYXRlIHRoZSBsYXN0IHBvaW50ZXIgZXZlbnRcbiAgICAgICAgICAgIGxhc3RQb2ludGVyRXZlbnQgPSBldmVudDtcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIG9uU2Vzc2lvbkVuZCA9IGZ1bmN0aW9uIChldmVudCwgaW5mbykge1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzLnN0b3AoZXZlbnQsIGluZm8pO1xuICAgICAgICB9O1xuICAgICAgICB2YXIgdHJhbnNmb3JtUGFnZVBvaW50ID0gdGhpcy5wcm9wcy50cmFuc2Zvcm1QYWdlUG9pbnQ7XG4gICAgICAgIHRoaXMucGFuU2Vzc2lvbiA9IG5ldyBQYW5TZXNzaW9uKG9yaWdpbkV2ZW50LCB7XG4gICAgICAgICAgICBvblNlc3Npb25TdGFydDogb25TZXNzaW9uU3RhcnQsXG4gICAgICAgICAgICBvblN0YXJ0OiBvblN0YXJ0LFxuICAgICAgICAgICAgb25Nb3ZlOiBvbk1vdmUsXG4gICAgICAgICAgICBvblNlc3Npb25FbmQ6IG9uU2Vzc2lvbkVuZCxcbiAgICAgICAgfSwgeyB0cmFuc2Zvcm1QYWdlUG9pbnQ6IHRyYW5zZm9ybVBhZ2VQb2ludCB9KTtcbiAgICB9O1xuICAgIFZpc3VhbEVsZW1lbnREcmFnQ29udHJvbHMucHJvdG90eXBlLnJlc29sdmVEcmFnQ29uc3RyYWludHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciBfYSA9IHRoaXMucHJvcHMsIGRyYWdDb25zdHJhaW50cyA9IF9hLmRyYWdDb25zdHJhaW50cywgZHJhZ0VsYXN0aWMgPSBfYS5kcmFnRWxhc3RpYztcbiAgICAgICAgdmFyIGxheW91dCA9IHRoaXMudmlzdWFsRWxlbWVudC5nZXRMYXlvdXRTdGF0ZSgpLmxheW91dENvcnJlY3RlZDtcbiAgICAgICAgaWYgKGRyYWdDb25zdHJhaW50cykge1xuICAgICAgICAgICAgdGhpcy5jb25zdHJhaW50cyA9IGlzUmVmT2JqZWN0KGRyYWdDb25zdHJhaW50cylcbiAgICAgICAgICAgICAgICA/IHRoaXMucmVzb2x2ZVJlZkNvbnN0cmFpbnRzKGxheW91dCwgZHJhZ0NvbnN0cmFpbnRzKVxuICAgICAgICAgICAgICAgIDogY2FsY1JlbGF0aXZlQ29uc3RyYWludHMobGF5b3V0LCBkcmFnQ29uc3RyYWludHMpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5jb25zdHJhaW50cyA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZWxhc3RpYyA9IHJlc29sdmVEcmFnRWxhc3RpYyhkcmFnRWxhc3RpYyk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJZiB3ZSdyZSBvdXRwdXR0aW5nIHRvIGV4dGVybmFsIE1vdGlvblZhbHVlcywgd2Ugd2FudCB0byByZWJhc2UgdGhlIG1lYXN1cmVkIGNvbnN0cmFpbnRzXG4gICAgICAgICAqIGZyb20gdmlld3BvcnQtcmVsYXRpdmUgdG8gY29tcG9uZW50LXJlbGF0aXZlLlxuICAgICAgICAgKi9cbiAgICAgICAgaWYgKHRoaXMuY29uc3RyYWludHMgJiYgIXRoaXMuaGFzTXV0YXRlZENvbnN0cmFpbnRzKSB7XG4gICAgICAgICAgICBlYWNoQXhpcyhmdW5jdGlvbiAoYXhpcykge1xuICAgICAgICAgICAgICAgIGlmIChfdGhpcy5nZXRBeGlzTW90aW9uVmFsdWUoYXhpcykpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuY29uc3RyYWludHNbYXhpc10gPSByZWJhc2VBeGlzQ29uc3RyYWludHMobGF5b3V0W2F4aXNdLCBfdGhpcy5jb25zdHJhaW50c1theGlzXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFZpc3VhbEVsZW1lbnREcmFnQ29udHJvbHMucHJvdG90eXBlLnJlc29sdmVSZWZDb25zdHJhaW50cyA9IGZ1bmN0aW9uIChsYXlvdXRCb3gsIGNvbnN0cmFpbnRzKSB7XG4gICAgICAgIHZhciBfYSA9IHRoaXMucHJvcHMsIG9uTWVhc3VyZURyYWdDb25zdHJhaW50cyA9IF9hLm9uTWVhc3VyZURyYWdDb25zdHJhaW50cywgdHJhbnNmb3JtUGFnZVBvaW50ID0gX2EudHJhbnNmb3JtUGFnZVBvaW50O1xuICAgICAgICB2YXIgY29uc3RyYWludHNFbGVtZW50ID0gY29uc3RyYWludHMuY3VycmVudDtcbiAgICAgICAgaGV5TGlzdGVuLmludmFyaWFudChjb25zdHJhaW50c0VsZW1lbnQgIT09IG51bGwsIFwiSWYgYGRyYWdDb25zdHJhaW50c2AgaXMgc2V0IGFzIGEgUmVhY3QgcmVmLCB0aGF0IHJlZiBtdXN0IGJlIHBhc3NlZCB0byBhbm90aGVyIGNvbXBvbmVudCdzIGByZWZgIHByb3AuXCIpO1xuICAgICAgICB0aGlzLmNvbnN0cmFpbnRzQm94ID0gZ2V0Qm91bmRpbmdCb3goY29uc3RyYWludHNFbGVtZW50LCB0cmFuc2Zvcm1QYWdlUG9pbnQpO1xuICAgICAgICB2YXIgbWVhc3VyZWRDb25zdHJhaW50cyA9IGNhbGNWaWV3cG9ydENvbnN0cmFpbnRzKGxheW91dEJveCwgdGhpcy5jb25zdHJhaW50c0JveCk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJZiB0aGVyZSdzIGFuIG9uTWVhc3VyZURyYWdDb25zdHJhaW50cyBsaXN0ZW5lciB3ZSBjYWxsIGl0IGFuZFxuICAgICAgICAgKiBpZiBkaWZmZXJlbnQgY29uc3RyYWludHMgYXJlIHJldHVybmVkLCBzZXQgY29uc3RyYWludHMgdG8gdGhhdFxuICAgICAgICAgKi9cbiAgICAgICAgaWYgKG9uTWVhc3VyZURyYWdDb25zdHJhaW50cykge1xuICAgICAgICAgICAgdmFyIHVzZXJDb25zdHJhaW50cyA9IG9uTWVhc3VyZURyYWdDb25zdHJhaW50cyhjb252ZXJ0QXhpc0JveFRvQm91bmRpbmdCb3gobWVhc3VyZWRDb25zdHJhaW50cykpO1xuICAgICAgICAgICAgdGhpcy5oYXNNdXRhdGVkQ29uc3RyYWludHMgPSAhIXVzZXJDb25zdHJhaW50cztcbiAgICAgICAgICAgIGlmICh1c2VyQ29uc3RyYWludHMpIHtcbiAgICAgICAgICAgICAgICBtZWFzdXJlZENvbnN0cmFpbnRzID0gY29udmVydEJvdW5kaW5nQm94VG9BeGlzQm94KHVzZXJDb25zdHJhaW50cyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1lYXN1cmVkQ29uc3RyYWludHM7XG4gICAgfTtcbiAgICBWaXN1YWxFbGVtZW50RHJhZ0NvbnRyb2xzLnByb3RvdHlwZS5jYW5jZWxEcmFnID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICB0aGlzLnZpc3VhbEVsZW1lbnQudW5sb2NrUHJvamVjdGlvblRhcmdldCgpO1xuICAgICAgICAoX2EgPSB0aGlzLmNhbmNlbExheW91dCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmNhbGwodGhpcyk7XG4gICAgICAgIHRoaXMuaXNEcmFnZ2luZyA9IGZhbHNlO1xuICAgICAgICB0aGlzLnBhblNlc3Npb24gJiYgdGhpcy5wYW5TZXNzaW9uLmVuZCgpO1xuICAgICAgICB0aGlzLnBhblNlc3Npb24gPSBudWxsO1xuICAgICAgICBpZiAoIXRoaXMucHJvcHMuZHJhZ1Byb3BhZ2F0aW9uICYmIHRoaXMub3Blbkdsb2JhbExvY2spIHtcbiAgICAgICAgICAgIHRoaXMub3Blbkdsb2JhbExvY2soKTtcbiAgICAgICAgICAgIHRoaXMub3Blbkdsb2JhbExvY2sgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIChfYiA9IHRoaXMudmlzdWFsRWxlbWVudC5hbmltYXRpb25TdGF0ZSkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLnNldEFjdGl2ZShBbmltYXRpb25UeXBlLkRyYWcsIGZhbHNlKTtcbiAgICB9O1xuICAgIFZpc3VhbEVsZW1lbnREcmFnQ29udHJvbHMucHJvdG90eXBlLnN0b3AgPSBmdW5jdGlvbiAoZXZlbnQsIGluZm8pIHtcbiAgICAgICAgdmFyIF9hLCBfYiwgX2M7XG4gICAgICAgIChfYSA9IHRoaXMucGFuU2Vzc2lvbikgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmVuZCgpO1xuICAgICAgICB0aGlzLnBhblNlc3Npb24gPSBudWxsO1xuICAgICAgICB2YXIgaXNEcmFnZ2luZyA9IHRoaXMuaXNEcmFnZ2luZztcbiAgICAgICAgdGhpcy5jYW5jZWxEcmFnKCk7XG4gICAgICAgIGlmICghaXNEcmFnZ2luZylcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdmFyIHZlbG9jaXR5ID0gaW5mby52ZWxvY2l0eTtcbiAgICAgICAgdGhpcy5hbmltYXRlRHJhZ0VuZCh2ZWxvY2l0eSk7XG4gICAgICAgIChfYyA9IChfYiA9IHRoaXMucHJvcHMpLm9uRHJhZ0VuZCkgPT09IG51bGwgfHwgX2MgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9jLmNhbGwoX2IsIGV2ZW50LCBpbmZvKTtcbiAgICB9O1xuICAgIFZpc3VhbEVsZW1lbnREcmFnQ29udHJvbHMucHJvdG90eXBlLnNuYXBUb0N1cnNvciA9IGZ1bmN0aW9uIChwb2ludCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICByZXR1cm4gZWFjaEF4aXMoZnVuY3Rpb24gKGF4aXMpIHtcbiAgICAgICAgICAgIHZhciBkcmFnID0gX3RoaXMucHJvcHMuZHJhZztcbiAgICAgICAgICAgIC8vIElmIHdlJ3JlIG5vdCBkcmFnZ2luZyB0aGlzIGF4aXMsIGRvIGFuIGVhcmx5IHJldHVybi5cbiAgICAgICAgICAgIGlmICghc2hvdWxkRHJhZyhheGlzLCBkcmFnLCBfdGhpcy5jdXJyZW50RGlyZWN0aW9uKSlcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB2YXIgYXhpc1ZhbHVlID0gX3RoaXMuZ2V0QXhpc01vdGlvblZhbHVlKGF4aXMpO1xuICAgICAgICAgICAgaWYgKGF4aXNWYWx1ZSkge1xuICAgICAgICAgICAgICAgIHZhciBib3ggPSBfdGhpcy52aXN1YWxFbGVtZW50LmdldExheW91dFN0YXRlKCkubGF5b3V0O1xuICAgICAgICAgICAgICAgIHZhciBsZW5ndGhfMSA9IGJveFtheGlzXS5tYXggLSBib3hbYXhpc10ubWluO1xuICAgICAgICAgICAgICAgIHZhciBjZW50ZXIgPSBib3hbYXhpc10ubWluICsgbGVuZ3RoXzEgLyAyO1xuICAgICAgICAgICAgICAgIHZhciBvZmZzZXQgPSBwb2ludFtheGlzXSAtIGNlbnRlcjtcbiAgICAgICAgICAgICAgICBfdGhpcy5vcmlnaW5Qb2ludFtheGlzXSA9IHBvaW50W2F4aXNdO1xuICAgICAgICAgICAgICAgIGF4aXNWYWx1ZS5zZXQob2Zmc2V0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIF90aGlzLmN1cnNvclByb2dyZXNzW2F4aXNdID0gMC41O1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KS5pbmNsdWRlcyh0cnVlKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFVwZGF0ZSB0aGUgc3BlY2lmaWVkIGF4aXMgd2l0aCB0aGUgbGF0ZXN0IHBvaW50ZXIgaW5mb3JtYXRpb24uXG4gICAgICovXG4gICAgVmlzdWFsRWxlbWVudERyYWdDb250cm9scy5wcm90b3R5cGUudXBkYXRlQXhpcyA9IGZ1bmN0aW9uIChheGlzLCBwb2ludCwgb2Zmc2V0KSB7XG4gICAgICAgIHZhciBkcmFnID0gdGhpcy5wcm9wcy5kcmFnO1xuICAgICAgICAvLyBJZiB3ZSdyZSBub3QgZHJhZ2dpbmcgdGhpcyBheGlzLCBkbyBhbiBlYXJseSByZXR1cm4uXG4gICAgICAgIGlmICghc2hvdWxkRHJhZyhheGlzLCBkcmFnLCB0aGlzLmN1cnJlbnREaXJlY3Rpb24pKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRBeGlzTW90aW9uVmFsdWUoYXhpcylcbiAgICAgICAgICAgID8gdGhpcy51cGRhdGVBeGlzTW90aW9uVmFsdWUoYXhpcywgb2Zmc2V0KVxuICAgICAgICAgICAgOiB0aGlzLnVwZGF0ZVZpc3VhbEVsZW1lbnRBeGlzKGF4aXMsIHBvaW50KTtcbiAgICB9O1xuICAgIFZpc3VhbEVsZW1lbnREcmFnQ29udHJvbHMucHJvdG90eXBlLnVwZGF0ZUF4aXNNb3Rpb25WYWx1ZSA9IGZ1bmN0aW9uIChheGlzLCBvZmZzZXQpIHtcbiAgICAgICAgdmFyIGF4aXNWYWx1ZSA9IHRoaXMuZ2V0QXhpc01vdGlvblZhbHVlKGF4aXMpO1xuICAgICAgICBpZiAoIW9mZnNldCB8fCAhYXhpc1ZhbHVlKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB2YXIgbmV4dFZhbHVlID0gdGhpcy5vcmlnaW5Qb2ludFtheGlzXSArIG9mZnNldFtheGlzXTtcbiAgICAgICAgdmFyIHVwZGF0ZSA9IHRoaXMuY29uc3RyYWludHNcbiAgICAgICAgICAgID8gYXBwbHlDb25zdHJhaW50cyhuZXh0VmFsdWUsIHRoaXMuY29uc3RyYWludHNbYXhpc10sIHRoaXMuZWxhc3RpY1theGlzXSlcbiAgICAgICAgICAgIDogbmV4dFZhbHVlO1xuICAgICAgICBheGlzVmFsdWUuc2V0KHVwZGF0ZSk7XG4gICAgfTtcbiAgICBWaXN1YWxFbGVtZW50RHJhZ0NvbnRyb2xzLnByb3RvdHlwZS51cGRhdGVWaXN1YWxFbGVtZW50QXhpcyA9IGZ1bmN0aW9uIChheGlzLCBwb2ludCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIC8vIEdldCB0aGUgYWN0dWFsIGxheW91dCBib3VuZGluZyBib3ggb2YgdGhlIGVsZW1lbnRcbiAgICAgICAgdmFyIGF4aXNMYXlvdXQgPSB0aGlzLnZpc3VhbEVsZW1lbnQuZ2V0TGF5b3V0U3RhdGUoKS5sYXlvdXRbYXhpc107XG4gICAgICAgIC8vIENhbGN1bGF0ZSBpdHMgY3VycmVudCBsZW5ndGguIEluIHRoZSBmdXR1cmUgd2UgbWlnaHQgd2FudCB0byBsZXJwIHRoaXMgdG8gYW5pbWF0ZVxuICAgICAgICAvLyBiZXR3ZWVuIGxlbmd0aHMgaWYgdGhlIGxheW91dCBjaGFuZ2VzIGFzIHdlIGNoYW5nZSB0aGUgRE9NXG4gICAgICAgIHZhciBheGlzTGVuZ3RoID0gYXhpc0xheW91dC5tYXggLSBheGlzTGF5b3V0Lm1pbjtcbiAgICAgICAgLy8gR2V0IHRoZSBpbml0aWFsIHByb2dyZXNzIHRoYXQgdGhlIHBvaW50ZXIgc2F0IG9uIHRoaXMgYXhpcyBvbiBnZXN0dXJlIHN0YXJ0LlxuICAgICAgICB2YXIgYXhpc1Byb2dyZXNzID0gdGhpcy5jdXJzb3JQcm9ncmVzc1theGlzXTtcbiAgICAgICAgLy8gQ2FsY3VsYXRlIGEgbmV3IG1pbiBwb2ludCBiYXNlZCBvbiB0aGUgbGF0ZXN0IHBvaW50ZXIgcG9zaXRpb24sIGNvbnN0cmFpbnRzIGFuZCBlbGFzdGljXG4gICAgICAgIHZhciBtaW4gPSBjYWxjQ29uc3RyYWluZWRNaW5Qb2ludChwb2ludFtheGlzXSwgYXhpc0xlbmd0aCwgYXhpc1Byb2dyZXNzLCAoX2EgPSB0aGlzLmNvbnN0cmFpbnRzKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2FbYXhpc10sIHRoaXMuZWxhc3RpY1theGlzXSk7XG4gICAgICAgIC8vIFVwZGF0ZSB0aGUgYXhpcyB2aWV3cG9ydCB0YXJnZXQgd2l0aCB0aGlzIG5ldyBtaW4gYW5kIHRoZSBsZW5ndGhcbiAgICAgICAgdGhpcy52aXN1YWxFbGVtZW50LnNldFByb2plY3Rpb25UYXJnZXRBeGlzKGF4aXMsIG1pbiwgbWluICsgYXhpc0xlbmd0aCk7XG4gICAgfTtcbiAgICBWaXN1YWxFbGVtZW50RHJhZ0NvbnRyb2xzLnByb3RvdHlwZS5zZXRQcm9wcyA9IGZ1bmN0aW9uIChfYSkge1xuICAgICAgICB2YXIgX2IgPSBfYS5kcmFnLCBkcmFnID0gX2IgPT09IHZvaWQgMCA/IGZhbHNlIDogX2IsIF9jID0gX2EuZHJhZ0RpcmVjdGlvbkxvY2ssIGRyYWdEaXJlY3Rpb25Mb2NrID0gX2MgPT09IHZvaWQgMCA/IGZhbHNlIDogX2MsIF9kID0gX2EuZHJhZ1Byb3BhZ2F0aW9uLCBkcmFnUHJvcGFnYXRpb24gPSBfZCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfZCwgX2UgPSBfYS5kcmFnQ29uc3RyYWludHMsIGRyYWdDb25zdHJhaW50cyA9IF9lID09PSB2b2lkIDAgPyBmYWxzZSA6IF9lLCBfZiA9IF9hLmRyYWdFbGFzdGljLCBkcmFnRWxhc3RpYyA9IF9mID09PSB2b2lkIDAgPyBkZWZhdWx0RWxhc3RpYyA6IF9mLCBfZyA9IF9hLmRyYWdNb21lbnR1bSwgZHJhZ01vbWVudHVtID0gX2cgPT09IHZvaWQgMCA/IHRydWUgOiBfZywgcmVtYWluaW5nUHJvcHMgPSB0c2xpYi5fX3Jlc3QoX2EsIFtcImRyYWdcIiwgXCJkcmFnRGlyZWN0aW9uTG9ja1wiLCBcImRyYWdQcm9wYWdhdGlvblwiLCBcImRyYWdDb25zdHJhaW50c1wiLCBcImRyYWdFbGFzdGljXCIsIFwiZHJhZ01vbWVudHVtXCJdKTtcbiAgICAgICAgdGhpcy5wcm9wcyA9IHRzbGliLl9fYXNzaWduKHsgZHJhZzogZHJhZyxcbiAgICAgICAgICAgIGRyYWdEaXJlY3Rpb25Mb2NrOiBkcmFnRGlyZWN0aW9uTG9jayxcbiAgICAgICAgICAgIGRyYWdQcm9wYWdhdGlvbjogZHJhZ1Byb3BhZ2F0aW9uLFxuICAgICAgICAgICAgZHJhZ0NvbnN0cmFpbnRzOiBkcmFnQ29uc3RyYWludHMsXG4gICAgICAgICAgICBkcmFnRWxhc3RpYzogZHJhZ0VsYXN0aWMsXG4gICAgICAgICAgICBkcmFnTW9tZW50dW06IGRyYWdNb21lbnR1bSB9LCByZW1haW5pbmdQcm9wcyk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBEcmFnIHdvcmtzIGRpZmZlcmVudGx5IGRlcGVuZGluZyBvbiB3aGljaCBwcm9wcyBhcmUgcHJvdmlkZWQuXG4gICAgICpcbiAgICAgKiAtIElmIF9kcmFnWCBhbmQgX2RyYWdZIGFyZSBwcm92aWRlZCwgd2Ugb3V0cHV0IHRoZSBnZXN0dXJlIGRlbHRhIGRpcmVjdGx5IHRvIHRob3NlIG1vdGlvbiB2YWx1ZXMuXG4gICAgICogLSBJZiB0aGUgY29tcG9uZW50IHdpbGwgcGVyZm9ybSBsYXlvdXQgYW5pbWF0aW9ucywgd2Ugb3V0cHV0IHRoZSBnZXN0dXJlIHRvIHRoZSBjb21wb25lbnQnc1xuICAgICAqICAgICAgdmlzdWFsIGJvdW5kaW5nIGJveFxuICAgICAqIC0gT3RoZXJ3aXNlLCB3ZSBhcHBseSB0aGUgZGVsdGEgdG8gdGhlIHgveSBtb3Rpb24gdmFsdWVzLlxuICAgICAqL1xuICAgIFZpc3VhbEVsZW1lbnREcmFnQ29udHJvbHMucHJvdG90eXBlLmdldEF4aXNNb3Rpb25WYWx1ZSA9IGZ1bmN0aW9uIChheGlzKSB7XG4gICAgICAgIHZhciBfYSA9IHRoaXMucHJvcHMsIGxheW91dCA9IF9hLmxheW91dCwgbGF5b3V0SWQgPSBfYS5sYXlvdXRJZDtcbiAgICAgICAgdmFyIGRyYWdLZXkgPSBcIl9kcmFnXCIgKyBheGlzLnRvVXBwZXJDYXNlKCk7XG4gICAgICAgIGlmICh0aGlzLnByb3BzW2RyYWdLZXldKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wcm9wc1tkcmFnS2V5XTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICghbGF5b3V0ICYmIGxheW91dElkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnZpc3VhbEVsZW1lbnQuZ2V0VmFsdWUoYXhpcywgMCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFZpc3VhbEVsZW1lbnREcmFnQ29udHJvbHMucHJvdG90eXBlLmlzTGF5b3V0RHJhZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuICF0aGlzLmdldEF4aXNNb3Rpb25WYWx1ZShcInhcIik7XG4gICAgfTtcbiAgICBWaXN1YWxFbGVtZW50RHJhZ0NvbnRyb2xzLnByb3RvdHlwZS5pc0V4dGVybmFsRHJhZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF9hID0gdGhpcy5wcm9wcywgX2RyYWdYID0gX2EuX2RyYWdYLCBfZHJhZ1kgPSBfYS5fZHJhZ1k7XG4gICAgICAgIHJldHVybiBfZHJhZ1ggfHwgX2RyYWdZO1xuICAgIH07XG4gICAgVmlzdWFsRWxlbWVudERyYWdDb250cm9scy5wcm90b3R5cGUuYW5pbWF0ZURyYWdFbmQgPSBmdW5jdGlvbiAodmVsb2NpdHkpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIF9hID0gdGhpcy5wcm9wcywgZHJhZyA9IF9hLmRyYWcsIGRyYWdNb21lbnR1bSA9IF9hLmRyYWdNb21lbnR1bSwgZHJhZ0VsYXN0aWMgPSBfYS5kcmFnRWxhc3RpYywgZHJhZ1RyYW5zaXRpb24gPSBfYS5kcmFnVHJhbnNpdGlvbjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEV2ZXJ5dGhpbmcgYmV5b25kIHRoZSBkcmFnIGdlc3R1cmUgc2hvdWxkIGJlIHBlcmZvcm1lZCB3aXRoXG4gICAgICAgICAqIHJlbGF0aXZlIHByb2plY3Rpb24gc28gY2hpbGRyZW4gc3RheSBpbiBzeW5jIHdpdGggdGhlaXIgcGFyZW50IGVsZW1lbnQuXG4gICAgICAgICAqL1xuICAgICAgICB2YXIgaXNSZWxhdGl2ZSA9IGNvbnZlcnRUb1JlbGF0aXZlUHJvamVjdGlvbih0aGlzLnZpc3VhbEVsZW1lbnQsIHRoaXMuaXNMYXlvdXREcmFnKCkgJiYgIXRoaXMuaXNFeHRlcm5hbERyYWcoKSk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJZiB3ZSBoYWQgcHJldmlvdXNseSByZXNvbHZlZCBjb25zdHJhaW50cyByZWxhdGl2ZSB0byB0aGUgdmlld3BvcnQsXG4gICAgICAgICAqIHdlIG5lZWQgdG8gYWxzbyBjb252ZXJ0IHRob3NlIHRvIGEgcmVsYXRpdmUgY29vcmRpbmF0ZSBzcGFjZSBmb3IgdGhlIGFuaW1hdGlvblxuICAgICAgICAgKi9cbiAgICAgICAgdmFyIGNvbnN0cmFpbnRzID0gdGhpcy5jb25zdHJhaW50cyB8fCB7fTtcbiAgICAgICAgaWYgKGlzUmVsYXRpdmUgJiZcbiAgICAgICAgICAgIE9iamVjdC5rZXlzKGNvbnN0cmFpbnRzKS5sZW5ndGggJiZcbiAgICAgICAgICAgIHRoaXMuaXNMYXlvdXREcmFnKCkpIHtcbiAgICAgICAgICAgIHZhciBwcm9qZWN0aW9uUGFyZW50ID0gdGhpcy52aXN1YWxFbGVtZW50LmdldFByb2plY3Rpb25QYXJlbnQoKTtcbiAgICAgICAgICAgIGlmIChwcm9qZWN0aW9uUGFyZW50KSB7XG4gICAgICAgICAgICAgICAgdmFyIHJlbGF0aXZlQ29uc3RyYWludHNfMSA9IGNhbGNSZWxhdGl2ZU9mZnNldChwcm9qZWN0aW9uUGFyZW50LnByb2plY3Rpb24udGFyZ2V0RmluYWwsIGNvbnN0cmFpbnRzKTtcbiAgICAgICAgICAgICAgICBlYWNoQXhpcyhmdW5jdGlvbiAoYXhpcykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgX2EgPSByZWxhdGl2ZUNvbnN0cmFpbnRzXzFbYXhpc10sIG1pbiA9IF9hLm1pbiwgbWF4ID0gX2EubWF4O1xuICAgICAgICAgICAgICAgICAgICBjb25zdHJhaW50c1theGlzXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1pbjogaXNOYU4obWluKSA/IHVuZGVmaW5lZCA6IG1pbixcbiAgICAgICAgICAgICAgICAgICAgICAgIG1heDogaXNOYU4obWF4KSA/IHVuZGVmaW5lZCA6IG1heCxcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB2YXIgbW9tZW50dW1BbmltYXRpb25zID0gZWFjaEF4aXMoZnVuY3Rpb24gKGF4aXMpIHtcbiAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgIGlmICghc2hvdWxkRHJhZyhheGlzLCBkcmFnLCBfdGhpcy5jdXJyZW50RGlyZWN0aW9uKSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciB0cmFuc2l0aW9uID0gKF9hID0gY29uc3RyYWludHMgPT09IG51bGwgfHwgY29uc3RyYWludHMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGNvbnN0cmFpbnRzW2F4aXNdKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiB7fTtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogT3ZlcmRhbXAgdGhlIGJvdW5kYXJ5IHNwcmluZyBpZiBgZHJhZ0VsYXN0aWNgIGlzIGRpc2FibGVkLiBUaGVyZSdzIHN0aWxsIGEgZnJhbWVcbiAgICAgICAgICAgICAqIG9mIHNwcmluZyBhbmltYXRpb25zIHNvIHdlIHNob3VsZCBsb29rIGludG8gYWRkaW5nIGEgZGlzYWJsZSBzcHJpbmcgb3B0aW9uIHRvIGBpbmVydGlhYC5cbiAgICAgICAgICAgICAqIFdlIGNvdWxkIGRvIHNvbWV0aGluZyBoZXJlIHdoZXJlIHdlIGFmZmVjdCB0aGUgYGJvdW5jZVN0aWZmbmVzc2AgYW5kIGBib3VuY2VEYW1waW5nYFxuICAgICAgICAgICAgICogdXNpbmcgdGhlIHZhbHVlIG9mIGBkcmFnRWxhc3RpY2AuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHZhciBib3VuY2VTdGlmZm5lc3MgPSBkcmFnRWxhc3RpYyA/IDIwMCA6IDEwMDAwMDA7XG4gICAgICAgICAgICB2YXIgYm91bmNlRGFtcGluZyA9IGRyYWdFbGFzdGljID8gNDAgOiAxMDAwMDAwMDtcbiAgICAgICAgICAgIHZhciBpbmVydGlhID0gdHNsaWIuX19hc3NpZ24odHNsaWIuX19hc3NpZ24oeyB0eXBlOiBcImluZXJ0aWFcIiwgdmVsb2NpdHk6IGRyYWdNb21lbnR1bSA/IHZlbG9jaXR5W2F4aXNdIDogMCwgYm91bmNlU3RpZmZuZXNzOiBib3VuY2VTdGlmZm5lc3MsXG4gICAgICAgICAgICAgICAgYm91bmNlRGFtcGluZzogYm91bmNlRGFtcGluZywgdGltZUNvbnN0YW50OiA3NTAsIHJlc3REZWx0YTogMSwgcmVzdFNwZWVkOiAxMCB9LCBkcmFnVHJhbnNpdGlvbiksIHRyYW5zaXRpb24pO1xuICAgICAgICAgICAgLy8gSWYgd2UncmUgbm90IGFuaW1hdGluZyBvbiBhbiBleHRlcm5hbGx5LXByb3ZpZGVkIGBNb3Rpb25WYWx1ZWAgd2UgY2FuIHVzZSB0aGVcbiAgICAgICAgICAgIC8vIGNvbXBvbmVudCdzIGFuaW1hdGlvbiBjb250cm9scyB3aGljaCB3aWxsIGhhbmRsZSBpbnRlcmFjdGlvbnMgd2l0aCB3aGlsZUhvdmVyIChldGMpLFxuICAgICAgICAgICAgLy8gb3RoZXJ3aXNlIHdlIGp1c3QgaGF2ZSB0byBhbmltYXRlIHRoZSBgTW90aW9uVmFsdWVgIGl0c2VsZi5cbiAgICAgICAgICAgIHJldHVybiBfdGhpcy5nZXRBeGlzTW90aW9uVmFsdWUoYXhpcylcbiAgICAgICAgICAgICAgICA/IF90aGlzLnN0YXJ0QXhpc1ZhbHVlQW5pbWF0aW9uKGF4aXMsIGluZXJ0aWEpXG4gICAgICAgICAgICAgICAgOiBfdGhpcy52aXN1YWxFbGVtZW50LnN0YXJ0TGF5b3V0QW5pbWF0aW9uKGF4aXMsIGluZXJ0aWEsIGlzUmVsYXRpdmUpO1xuICAgICAgICB9KTtcbiAgICAgICAgLy8gUnVuIGFsbCBhbmltYXRpb25zIGFuZCB0aGVuIHJlc29sdmUgdGhlIG5ldyBkcmFnIGNvbnN0cmFpbnRzLlxuICAgICAgICByZXR1cm4gUHJvbWlzZS5hbGwobW9tZW50dW1BbmltYXRpb25zKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgICAgICAoX2IgPSAoX2EgPSBfdGhpcy5wcm9wcykub25EcmFnVHJhbnNpdGlvbkVuZCkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmNhbGwoX2EpO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIFZpc3VhbEVsZW1lbnREcmFnQ29udHJvbHMucHJvdG90eXBlLnN0b3BNb3Rpb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGVhY2hBeGlzKGZ1bmN0aW9uIChheGlzKSB7XG4gICAgICAgICAgICB2YXIgYXhpc1ZhbHVlID0gX3RoaXMuZ2V0QXhpc01vdGlvblZhbHVlKGF4aXMpO1xuICAgICAgICAgICAgYXhpc1ZhbHVlXG4gICAgICAgICAgICAgICAgPyBheGlzVmFsdWUuc3RvcCgpXG4gICAgICAgICAgICAgICAgOiBfdGhpcy52aXN1YWxFbGVtZW50LnN0b3BMYXlvdXRBbmltYXRpb24oKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBWaXN1YWxFbGVtZW50RHJhZ0NvbnRyb2xzLnByb3RvdHlwZS5zdGFydEF4aXNWYWx1ZUFuaW1hdGlvbiA9IGZ1bmN0aW9uIChheGlzLCB0cmFuc2l0aW9uKSB7XG4gICAgICAgIHZhciBheGlzVmFsdWUgPSB0aGlzLmdldEF4aXNNb3Rpb25WYWx1ZShheGlzKTtcbiAgICAgICAgaWYgKCFheGlzVmFsdWUpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHZhciBjdXJyZW50VmFsdWUgPSBheGlzVmFsdWUuZ2V0KCk7XG4gICAgICAgIGF4aXNWYWx1ZS5zZXQoY3VycmVudFZhbHVlKTtcbiAgICAgICAgYXhpc1ZhbHVlLnNldChjdXJyZW50VmFsdWUpOyAvLyBTZXQgdHdpY2UgdG8gaGFyZC1yZXNldCB2ZWxvY2l0eVxuICAgICAgICByZXR1cm4gc3RhcnRBbmltYXRpb24oYXhpcywgYXhpc1ZhbHVlLCAwLCB0cmFuc2l0aW9uKTtcbiAgICB9O1xuICAgIFZpc3VhbEVsZW1lbnREcmFnQ29udHJvbHMucHJvdG90eXBlLnNjYWxlUG9pbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciBfYSA9IHRoaXMucHJvcHMsIGRyYWcgPSBfYS5kcmFnLCBkcmFnQ29uc3RyYWludHMgPSBfYS5kcmFnQ29uc3RyYWludHM7XG4gICAgICAgIGlmICghaXNSZWZPYmplY3QoZHJhZ0NvbnN0cmFpbnRzKSB8fCAhdGhpcy5jb25zdHJhaW50c0JveClcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgLy8gU3RvcCBhbnkgY3VycmVudCBhbmltYXRpb25zIGFzIHRoZXJlIGNhbiBiZSBzb21lIHZpc3VhbCBnbGl0Y2hpbmcgaWYgd2UgcmVzaXplIG1pZCBhbmltYXRpb25cbiAgICAgICAgdGhpcy5zdG9wTW90aW9uKCk7XG4gICAgICAgIC8vIFJlY29yZCB0aGUgcmVsYXRpdmUgcHJvZ3Jlc3Mgb2YgdGhlIHRhcmdldEJveCByZWxhdGl2ZSB0byB0aGUgY29uc3RyYWludHNCb3hcbiAgICAgICAgdmFyIGJveFByb2dyZXNzID0geyB4OiAwLCB5OiAwIH07XG4gICAgICAgIGVhY2hBeGlzKGZ1bmN0aW9uIChheGlzKSB7XG4gICAgICAgICAgICBib3hQcm9ncmVzc1theGlzXSA9IGNhbGNPcmlnaW4oX3RoaXMudmlzdWFsRWxlbWVudC5wcm9qZWN0aW9uLnRhcmdldFtheGlzXSwgX3RoaXMuY29uc3RyYWludHNCb3hbYXhpc10pO1xuICAgICAgICB9KTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEZvciBlYWNoIGF4aXMsIGNhbGN1bGF0ZSB0aGUgY3VycmVudCBwcm9ncmVzcyBvZiB0aGUgbGF5b3V0IGF4aXMgd2l0aGluIHRoZSBjb25zdHJhaW50cy5cbiAgICAgICAgICogVGhlbiwgdXNpbmcgdGhlIGxhdGVzdCBsYXlvdXQgYW5kIGNvbnN0cmFpbnRzIG1lYXN1cmVtZW50cywgcmVwb3NpdGlvbiB0aGUgbmV3IGxheW91dCBheGlzXG4gICAgICAgICAqIHByb3BvcnRpb25hbGx5IHdpdGhpbiB0aGUgY29uc3RyYWludHMuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnVwZGF0ZUNvbnN0cmFpbnRzKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGVhY2hBeGlzKGZ1bmN0aW9uIChheGlzKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFzaG91bGREcmFnKGF4aXMsIGRyYWcsIG51bGwpKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgLy8gQ2FsY3VsYXRlIHRoZSBwb3NpdGlvbiBvZiB0aGUgdGFyZ2V0Qm94IHJlbGF0aXZlIHRvIHRoZSBjb25zdHJhaW50c0JveCB1c2luZyB0aGVcbiAgICAgICAgICAgICAgICAvLyBwcmV2aW91c2x5IGNhbGN1bGF0ZWQgcHJvZ3Jlc3NcbiAgICAgICAgICAgICAgICB2YXIgX2EgPSBjYWxjUG9zaXRpb25Gcm9tUHJvZ3Jlc3MoX3RoaXMudmlzdWFsRWxlbWVudC5wcm9qZWN0aW9uLnRhcmdldFtheGlzXSwgX3RoaXMuY29uc3RyYWludHNCb3hbYXhpc10sIGJveFByb2dyZXNzW2F4aXNdKSwgbWluID0gX2EubWluLCBtYXggPSBfYS5tYXg7XG4gICAgICAgICAgICAgICAgX3RoaXMudmlzdWFsRWxlbWVudC5zZXRQcm9qZWN0aW9uVGFyZ2V0QXhpcyhheGlzLCBtaW4sIG1heCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJZiBhbnkgb3RoZXIgZHJhZ2dhYmxlIGNvbXBvbmVudHMgYXJlIHF1ZXVpbmcgdGhlIHNhbWUgdGFza3Mgc3luY2hyb25vdXNseVxuICAgICAgICAgKiB0aGlzIHdpbGwgd2FpdCB1bnRpbCB0aGV5J3ZlIGFsbCBiZWVuIHNjaGVkdWxlZCBiZWZvcmUgZmx1c2hpbmcuXG4gICAgICAgICAqL1xuICAgICAgICBzZXRUaW1lb3V0KGZsdXNoTGF5b3V0LCAxKTtcbiAgICB9O1xuICAgIFZpc3VhbEVsZW1lbnREcmFnQ29udHJvbHMucHJvdG90eXBlLnVwZGF0ZUNvbnN0cmFpbnRzID0gZnVuY3Rpb24gKG9uUmVhZHkpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdGhpcy5jYW5jZWxMYXlvdXQgPSBiYXRjaExheW91dChmdW5jdGlvbiAocmVhZCwgd3JpdGUpIHtcbiAgICAgICAgICAgIHZhciBhbmNlc3RvcnMgPSBjb2xsZWN0UHJvamVjdGluZ0FuY2VzdG9ycyhfdGhpcy52aXN1YWxFbGVtZW50KTtcbiAgICAgICAgICAgIHdyaXRlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYW5jZXN0b3JzLmZvckVhY2goZnVuY3Rpb24gKGVsZW1lbnQpIHsgcmV0dXJuIGVsZW1lbnQucmVzZXRUcmFuc2Zvcm0oKTsgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJlYWQoZnVuY3Rpb24gKCkgeyByZXR1cm4gdXBkYXRlTGF5b3V0TWVhc3VyZW1lbnQoX3RoaXMudmlzdWFsRWxlbWVudCk7IH0pO1xuICAgICAgICAgICAgd3JpdGUoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBhbmNlc3RvcnMuZm9yRWFjaChmdW5jdGlvbiAoZWxlbWVudCkgeyByZXR1cm4gZWxlbWVudC5yZXN0b3JlVHJhbnNmb3JtKCk7IH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZWFkKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5yZXNvbHZlRHJhZ0NvbnN0cmFpbnRzKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmIChvblJlYWR5KVxuICAgICAgICAgICAgICAgIHdyaXRlKG9uUmVhZHkpO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIFZpc3VhbEVsZW1lbnREcmFnQ29udHJvbHMucHJvdG90eXBlLm1vdW50ID0gZnVuY3Rpb24gKHZpc3VhbEVsZW1lbnQpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIGVsZW1lbnQgPSB2aXN1YWxFbGVtZW50LmdldEluc3RhbmNlKCk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBdHRhY2ggYSBwb2ludGVyZG93biBldmVudCBsaXN0ZW5lciBvbiB0aGlzIERPTSBlbGVtZW50IHRvIGluaXRpYXRlIGRyYWcgdHJhY2tpbmcuXG4gICAgICAgICAqL1xuICAgICAgICB2YXIgc3RvcFBvaW50ZXJMaXN0ZW5lciA9IGFkZFBvaW50ZXJFdmVudChlbGVtZW50LCBcInBvaW50ZXJkb3duXCIsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgdmFyIF9hID0gX3RoaXMucHJvcHMsIGRyYWcgPSBfYS5kcmFnLCBfYiA9IF9hLmRyYWdMaXN0ZW5lciwgZHJhZ0xpc3RlbmVyID0gX2IgPT09IHZvaWQgMCA/IHRydWUgOiBfYjtcbiAgICAgICAgICAgIGRyYWcgJiYgZHJhZ0xpc3RlbmVyICYmIF90aGlzLnN0YXJ0KGV2ZW50KTtcbiAgICAgICAgfSk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBdHRhY2ggYSB3aW5kb3cgcmVzaXplIGxpc3RlbmVyIHRvIHNjYWxlIHRoZSBkcmFnZ2FibGUgdGFyZ2V0IHdpdGhpbiBpdHMgZGVmaW5lZFxuICAgICAgICAgKiBjb25zdHJhaW50cyBhcyB0aGUgd2luZG93IHJlc2l6ZXMuXG4gICAgICAgICAqL1xuICAgICAgICB2YXIgc3RvcFJlc2l6ZUxpc3RlbmVyID0gYWRkRG9tRXZlbnQod2luZG93LCBcInJlc2l6ZVwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBfdGhpcy5zY2FsZVBvaW50KCk7XG4gICAgICAgIH0pO1xuICAgICAgICAvKipcbiAgICAgICAgICogRW5zdXJlIGRyYWcgY29uc3RyYWludHMgYXJlIHJlc29sdmVkIGNvcnJlY3RseSByZWxhdGl2ZSB0byB0aGUgZHJhZ2dpbmcgZWxlbWVudFxuICAgICAgICAgKiB3aGVuZXZlciBpdHMgbGF5b3V0IGNoYW5nZXMuXG4gICAgICAgICAqL1xuICAgICAgICB2YXIgc3RvcExheW91dFVwZGF0ZUxpc3RlbmVyID0gdmlzdWFsRWxlbWVudC5vbkxheW91dFVwZGF0ZShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoX3RoaXMuaXNEcmFnZ2luZykge1xuICAgICAgICAgICAgICAgIF90aGlzLnJlc29sdmVEcmFnQ29uc3RyYWludHMoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJZiB0aGUgcHJldmlvdXMgY29tcG9uZW50IHdpdGggdGhpcyBzYW1lIGxheW91dElkIHdhcyBkcmFnZ2luZyBhdCB0aGUgdGltZVxuICAgICAgICAgKiBpdCB3YXMgdW5tb3VudGVkLCB3ZSB3YW50IHRvIGNvbnRpbnVlIHRoZSBzYW1lIGdlc3R1cmUgb24gdGhpcyBjb21wb25lbnQuXG4gICAgICAgICAqL1xuICAgICAgICB2YXIgcHJldkRyYWdDdXJzb3IgPSB2aXN1YWxFbGVtZW50LnByZXZEcmFnQ3Vyc29yO1xuICAgICAgICBpZiAocHJldkRyYWdDdXJzb3IpIHtcbiAgICAgICAgICAgIHRoaXMuc3RhcnQobGFzdFBvaW50ZXJFdmVudCwgeyBjdXJzb3JQcm9ncmVzczogcHJldkRyYWdDdXJzb3IgfSk7XG4gICAgICAgIH1cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJldHVybiBhIGZ1bmN0aW9uIHRoYXQgd2lsbCB0ZWFyZG93biB0aGUgZHJhZyBnZXN0dXJlXG4gICAgICAgICAqL1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgc3RvcFBvaW50ZXJMaXN0ZW5lciA9PT0gbnVsbCB8fCBzdG9wUG9pbnRlckxpc3RlbmVyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBzdG9wUG9pbnRlckxpc3RlbmVyKCk7XG4gICAgICAgICAgICBzdG9wUmVzaXplTGlzdGVuZXIgPT09IG51bGwgfHwgc3RvcFJlc2l6ZUxpc3RlbmVyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBzdG9wUmVzaXplTGlzdGVuZXIoKTtcbiAgICAgICAgICAgIHN0b3BMYXlvdXRVcGRhdGVMaXN0ZW5lciA9PT0gbnVsbCB8fCBzdG9wTGF5b3V0VXBkYXRlTGlzdGVuZXIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHN0b3BMYXlvdXRVcGRhdGVMaXN0ZW5lcigpO1xuICAgICAgICAgICAgX3RoaXMuY2FuY2VsRHJhZygpO1xuICAgICAgICB9O1xuICAgIH07XG4gICAgcmV0dXJuIFZpc3VhbEVsZW1lbnREcmFnQ29udHJvbHM7XG59KCkpO1xuZnVuY3Rpb24gc2hvdWxkRHJhZyhkaXJlY3Rpb24sIGRyYWcsIGN1cnJlbnREaXJlY3Rpb24pIHtcbiAgICByZXR1cm4gKChkcmFnID09PSB0cnVlIHx8IGRyYWcgPT09IGRpcmVjdGlvbikgJiZcbiAgICAgICAgKGN1cnJlbnREaXJlY3Rpb24gPT09IG51bGwgfHwgY3VycmVudERpcmVjdGlvbiA9PT0gZGlyZWN0aW9uKSk7XG59XG4vKipcbiAqIEJhc2VkIG9uIGFuIHgveSBvZmZzZXQgZGV0ZXJtaW5lIHRoZSBjdXJyZW50IGRyYWcgZGlyZWN0aW9uLiBJZiBib3RoIGF4aXMnIG9mZnNldHMgYXJlIGxvd2VyXG4gKiB0aGFuIHRoZSBwcm92aWRlZCB0aHJlc2hvbGQsIHJldHVybiBgbnVsbGAuXG4gKlxuICogQHBhcmFtIG9mZnNldCAtIFRoZSB4L3kgb2Zmc2V0IGZyb20gb3JpZ2luLlxuICogQHBhcmFtIGxvY2tUaHJlc2hvbGQgLSAoT3B0aW9uYWwpIC0gdGhlIG1pbmltdW0gYWJzb2x1dGUgb2Zmc2V0IGJlZm9yZSB3ZSBjYW4gZGV0ZXJtaW5lIGEgZHJhZyBkaXJlY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGdldEN1cnJlbnREaXJlY3Rpb24ob2Zmc2V0LCBsb2NrVGhyZXNob2xkKSB7XG4gICAgaWYgKGxvY2tUaHJlc2hvbGQgPT09IHZvaWQgMCkgeyBsb2NrVGhyZXNob2xkID0gMTA7IH1cbiAgICB2YXIgZGlyZWN0aW9uID0gbnVsbDtcbiAgICBpZiAoTWF0aC5hYnMob2Zmc2V0LnkpID4gbG9ja1RocmVzaG9sZCkge1xuICAgICAgICBkaXJlY3Rpb24gPSBcInlcIjtcbiAgICB9XG4gICAgZWxzZSBpZiAoTWF0aC5hYnMob2Zmc2V0LngpID4gbG9ja1RocmVzaG9sZCkge1xuICAgICAgICBkaXJlY3Rpb24gPSBcInhcIjtcbiAgICB9XG4gICAgcmV0dXJuIGRpcmVjdGlvbjtcbn1cblxuLyoqXG4gKiBBIGhvb2sgdGhhdCBhbGxvd3MgYW4gZWxlbWVudCB0byBiZSBkcmFnZ2VkLlxuICpcbiAqIEBpbnRlcm5hbFxuICovXG5mdW5jdGlvbiB1c2VEcmFnKHByb3BzKSB7XG4gICAgdmFyIGdyb3VwRHJhZ0NvbnRyb2xzID0gcHJvcHMuZHJhZ0NvbnRyb2xzLCB2aXN1YWxFbGVtZW50ID0gcHJvcHMudmlzdWFsRWxlbWVudDtcbiAgICB2YXIgdHJhbnNmb3JtUGFnZVBvaW50ID0gUmVhY3QudXNlQ29udGV4dChNb3Rpb25Db25maWdDb250ZXh0KS50cmFuc2Zvcm1QYWdlUG9pbnQ7XG4gICAgdmFyIGRyYWdDb250cm9scyA9IHVzZUNvbnN0YW50KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBWaXN1YWxFbGVtZW50RHJhZ0NvbnRyb2xzKHtcbiAgICAgICAgICAgIHZpc3VhbEVsZW1lbnQ6IHZpc3VhbEVsZW1lbnQsXG4gICAgICAgIH0pO1xuICAgIH0pO1xuICAgIGRyYWdDb250cm9scy5zZXRQcm9wcyh0c2xpYi5fX2Fzc2lnbih0c2xpYi5fX2Fzc2lnbih7fSwgcHJvcHMpLCB7IHRyYW5zZm9ybVBhZ2VQb2ludDogdHJhbnNmb3JtUGFnZVBvaW50IH0pKTtcbiAgICAvLyBJZiB3ZSd2ZSBiZWVuIHByb3ZpZGVkIGEgRHJhZ0NvbnRyb2xzIGZvciBtYW51YWwgY29udHJvbCBvdmVyIHRoZSBkcmFnIGdlc3R1cmUsXG4gICAgLy8gc3Vic2NyaWJlIHRoaXMgY29tcG9uZW50IHRvIGl0IG9uIG1vdW50LlxuICAgIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7IHJldHVybiBncm91cERyYWdDb250cm9scyAmJiBncm91cERyYWdDb250cm9scy5zdWJzY3JpYmUoZHJhZ0NvbnRyb2xzKTsgfSwgW2RyYWdDb250cm9sc10pO1xuICAgIC8vIE1vdW50IHRoZSBkcmFnIGNvbnRyb2xzIHdpdGggdGhlIHZpc3VhbEVsZW1lbnRcbiAgICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkgeyByZXR1cm4gZHJhZ0NvbnRyb2xzLm1vdW50KHZpc3VhbEVsZW1lbnQpOyB9LCBbXSk7XG59XG5cbi8qKlxuICpcbiAqIEBwYXJhbSBoYW5kbGVycyAtXG4gKiBAcGFyYW0gcmVmIC1cbiAqXG4gKiBAaW50ZXJuYWxyZW1hcmtzXG4gKiBDdXJyZW50bHkgdGhpcyBzZXRzIG5ldyBwYW4gZ2VzdHVyZSBmdW5jdGlvbnMgZXZlcnkgcmVuZGVyLiBUaGUgbWVtbyByb3V0ZSBoYXMgYmVlbiBleHBsb3JlZFxuICogaW4gdGhlIHBhc3QgYnV0IHVsdGltYXRlbHkgd2UncmUgc3RpbGwgY3JlYXRpbmcgbmV3IGZ1bmN0aW9ucyBldmVyeSByZW5kZXIuIEFuIG9wdGltaXNhdGlvblxuICogdG8gZXhwbG9yZSBpcyBjcmVhdGluZyB0aGUgcGFuIGdlc3R1cmVzIGFuZCBsb2FkaW5nIHRoZW0gaW50byBhIGByZWZgLlxuICpcbiAqIEBpbnRlcm5hbFxuICovXG5mdW5jdGlvbiB1c2VQYW5HZXN0dXJlKF9hKSB7XG4gICAgdmFyIG9uUGFuID0gX2Eub25QYW4sIG9uUGFuU3RhcnQgPSBfYS5vblBhblN0YXJ0LCBvblBhbkVuZCA9IF9hLm9uUGFuRW5kLCBvblBhblNlc3Npb25TdGFydCA9IF9hLm9uUGFuU2Vzc2lvblN0YXJ0LCB2aXN1YWxFbGVtZW50ID0gX2EudmlzdWFsRWxlbWVudDtcbiAgICB2YXIgaGFzUGFuRXZlbnRzID0gb25QYW4gfHwgb25QYW5TdGFydCB8fCBvblBhbkVuZCB8fCBvblBhblNlc3Npb25TdGFydDtcbiAgICB2YXIgcGFuU2Vzc2lvbiA9IFJlYWN0LnVzZVJlZihudWxsKTtcbiAgICB2YXIgdHJhbnNmb3JtUGFnZVBvaW50ID0gUmVhY3QudXNlQ29udGV4dChNb3Rpb25Db25maWdDb250ZXh0KS50cmFuc2Zvcm1QYWdlUG9pbnQ7XG4gICAgdmFyIGhhbmRsZXJzID0ge1xuICAgICAgICBvblNlc3Npb25TdGFydDogb25QYW5TZXNzaW9uU3RhcnQsXG4gICAgICAgIG9uU3RhcnQ6IG9uUGFuU3RhcnQsXG4gICAgICAgIG9uTW92ZTogb25QYW4sXG4gICAgICAgIG9uRW5kOiBmdW5jdGlvbiAoZXZlbnQsIGluZm8pIHtcbiAgICAgICAgICAgIHBhblNlc3Npb24uY3VycmVudCA9IG51bGw7XG4gICAgICAgICAgICBvblBhbkVuZCAmJiBvblBhbkVuZChldmVudCwgaW5mbyk7XG4gICAgICAgIH0sXG4gICAgfTtcbiAgICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAocGFuU2Vzc2lvbi5jdXJyZW50ICE9PSBudWxsKSB7XG4gICAgICAgICAgICBwYW5TZXNzaW9uLmN1cnJlbnQudXBkYXRlSGFuZGxlcnMoaGFuZGxlcnMpO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgZnVuY3Rpb24gb25Qb2ludGVyRG93bihldmVudCkge1xuICAgICAgICBwYW5TZXNzaW9uLmN1cnJlbnQgPSBuZXcgUGFuU2Vzc2lvbihldmVudCwgaGFuZGxlcnMsIHtcbiAgICAgICAgICAgIHRyYW5zZm9ybVBhZ2VQb2ludDogdHJhbnNmb3JtUGFnZVBvaW50LFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgdXNlUG9pbnRlckV2ZW50KHZpc3VhbEVsZW1lbnQsIFwicG9pbnRlcmRvd25cIiwgaGFzUGFuRXZlbnRzICYmIG9uUG9pbnRlckRvd24pO1xuICAgIHVzZVVubW91bnRFZmZlY3QoZnVuY3Rpb24gKCkgeyByZXR1cm4gcGFuU2Vzc2lvbi5jdXJyZW50ICYmIHBhblNlc3Npb24uY3VycmVudC5lbmQoKTsgfSk7XG59XG5cbnZhciBkcmFnID0ge1xuICAgIHBhbjogbWFrZVJlbmRlcmxlc3NDb21wb25lbnQodXNlUGFuR2VzdHVyZSksXG4gICAgZHJhZzogbWFrZVJlbmRlcmxlc3NDb21wb25lbnQodXNlRHJhZyksXG59O1xuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xudmFyIFByZXNlbmNlO1xuKGZ1bmN0aW9uIChQcmVzZW5jZSkge1xuICAgIFByZXNlbmNlW1ByZXNlbmNlW1wiRW50ZXJpbmdcIl0gPSAwXSA9IFwiRW50ZXJpbmdcIjtcbiAgICBQcmVzZW5jZVtQcmVzZW5jZVtcIlByZXNlbnRcIl0gPSAxXSA9IFwiUHJlc2VudFwiO1xuICAgIFByZXNlbmNlW1ByZXNlbmNlW1wiRXhpdGluZ1wiXSA9IDJdID0gXCJFeGl0aW5nXCI7XG59KShQcmVzZW5jZSB8fCAoUHJlc2VuY2UgPSB7fSkpO1xuLyoqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydHMuVmlzaWJpbGl0eUFjdGlvbiA9IHZvaWQgMDtcbihmdW5jdGlvbiAoVmlzaWJpbGl0eUFjdGlvbikge1xuICAgIFZpc2liaWxpdHlBY3Rpb25bVmlzaWJpbGl0eUFjdGlvbltcIkhpZGVcIl0gPSAwXSA9IFwiSGlkZVwiO1xuICAgIFZpc2liaWxpdHlBY3Rpb25bVmlzaWJpbGl0eUFjdGlvbltcIlNob3dcIl0gPSAxXSA9IFwiU2hvd1wiO1xufSkoZXhwb3J0cy5WaXNpYmlsaXR5QWN0aW9uIHx8IChleHBvcnRzLlZpc2liaWxpdHlBY3Rpb24gPSB7fSkpO1xuXG5mdW5jdGlvbiBpc0NTU1ZhcmlhYmxlKHZhbHVlKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiAmJiB2YWx1ZS5zdGFydHNXaXRoKFwidmFyKC0tXCIpO1xufVxuLyoqXG4gKiBQYXJzZSBGcmFtZXIncyBzcGVjaWFsIENTUyB2YXJpYWJsZSBmb3JtYXQgaW50byBhIENTUyB0b2tlbiBhbmQgYSBmYWxsYmFjay5cbiAqXG4gKiBgYGBcbiAqIGB2YXIoLS1mb28sICNmZmYpYCA9PiBbYC0tZm9vYCwgJyNmZmYnXVxuICogYGBgXG4gKlxuICogQHBhcmFtIGN1cnJlbnRcbiAqL1xudmFyIGNzc1ZhcmlhYmxlUmVnZXggPSAvdmFyXFwoKC0tW2EtekEtWjAtOS1fXSspLD8gPyhbYS16QS1aMC05ICgpJSMuLC1dKyk/XFwpLztcbmZ1bmN0aW9uIHBhcnNlQ1NTVmFyaWFibGUoY3VycmVudCkge1xuICAgIHZhciBtYXRjaCA9IGNzc1ZhcmlhYmxlUmVnZXguZXhlYyhjdXJyZW50KTtcbiAgICBpZiAoIW1hdGNoKVxuICAgICAgICByZXR1cm4gWyxdO1xuICAgIHZhciBfYSA9IHRzbGliLl9fcmVhZChtYXRjaCwgMyksIHRva2VuID0gX2FbMV0sIGZhbGxiYWNrID0gX2FbMl07XG4gICAgcmV0dXJuIFt0b2tlbiwgZmFsbGJhY2tdO1xufVxudmFyIG1heERlcHRoID0gNDtcbmZ1bmN0aW9uIGdldFZhcmlhYmxlVmFsdWUoY3VycmVudCwgZWxlbWVudCwgZGVwdGgpIHtcbiAgICBpZiAoZGVwdGggPT09IHZvaWQgMCkgeyBkZXB0aCA9IDE7IH1cbiAgICBoZXlMaXN0ZW4uaW52YXJpYW50KGRlcHRoIDw9IG1heERlcHRoLCBcIk1heCBDU1MgdmFyaWFibGUgZmFsbGJhY2sgZGVwdGggZGV0ZWN0ZWQgaW4gcHJvcGVydHkgXFxcIlwiICsgY3VycmVudCArIFwiXFxcIi4gVGhpcyBtYXkgaW5kaWNhdGUgYSBjaXJjdWxhciBmYWxsYmFjayBkZXBlbmRlbmN5LlwiKTtcbiAgICB2YXIgX2EgPSB0c2xpYi5fX3JlYWQocGFyc2VDU1NWYXJpYWJsZShjdXJyZW50KSwgMiksIHRva2VuID0gX2FbMF0sIGZhbGxiYWNrID0gX2FbMV07XG4gICAgLy8gTm8gQ1NTIHZhcmlhYmxlIGRldGVjdGVkXG4gICAgaWYgKCF0b2tlbilcbiAgICAgICAgcmV0dXJuO1xuICAgIC8vIEF0dGVtcHQgdG8gcmVhZCB0aGlzIENTUyB2YXJpYWJsZSBvZmYgdGhlIGVsZW1lbnRcbiAgICB2YXIgcmVzb2x2ZWQgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KS5nZXRQcm9wZXJ0eVZhbHVlKHRva2VuKTtcbiAgICBpZiAocmVzb2x2ZWQpIHtcbiAgICAgICAgcmV0dXJuIHJlc29sdmVkLnRyaW0oKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoaXNDU1NWYXJpYWJsZShmYWxsYmFjaykpIHtcbiAgICAgICAgLy8gVGhlIGZhbGxiYWNrIG1pZ2h0IGl0c2VsZiBiZSBhIENTUyB2YXJpYWJsZSwgaW4gd2hpY2ggY2FzZSB3ZSBhdHRlbXB0IHRvIHJlc29sdmUgaXQgdG9vLlxuICAgICAgICByZXR1cm4gZ2V0VmFyaWFibGVWYWx1ZShmYWxsYmFjaywgZWxlbWVudCwgZGVwdGggKyAxKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBmYWxsYmFjaztcbiAgICB9XG59XG4vKipcbiAqIFJlc29sdmUgQ1NTIHZhcmlhYmxlcyBmcm9tXG4gKlxuICogQGludGVybmFsXG4gKi9cbmZ1bmN0aW9uIHJlc29sdmVDU1NWYXJpYWJsZXModmlzdWFsRWxlbWVudCwgX2EsIHRyYW5zaXRpb25FbmQpIHtcbiAgICB2YXIgX2I7XG4gICAgdmFyIHRhcmdldCA9IHRzbGliLl9fcmVzdChfYSwgW10pO1xuICAgIHZhciBlbGVtZW50ID0gdmlzdWFsRWxlbWVudC5nZXRJbnN0YW5jZSgpO1xuICAgIGlmICghKGVsZW1lbnQgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCkpXG4gICAgICAgIHJldHVybiB7IHRhcmdldDogdGFyZ2V0LCB0cmFuc2l0aW9uRW5kOiB0cmFuc2l0aW9uRW5kIH07XG4gICAgLy8gSWYgYHRyYW5zaXRpb25FbmRgIGlzbid0IGB1bmRlZmluZWRgLCBjbG9uZSBpdC4gV2UgY291bGQgY2xvbmUgYHRhcmdldGAgYW5kIGB0cmFuc2l0aW9uRW5kYFxuICAgIC8vIG9ubHkgaWYgdGhleSBjaGFuZ2UgYnV0IEkgdGhpbmsgdGhpcyByZWFkcyBjbGVhcmVyIGFuZCB0aGlzIGlzbid0IGEgcGVyZm9ybWFuY2UtY3JpdGljYWwgcGF0aC5cbiAgICBpZiAodHJhbnNpdGlvbkVuZCkge1xuICAgICAgICB0cmFuc2l0aW9uRW5kID0gdHNsaWIuX19hc3NpZ24oe30sIHRyYW5zaXRpb25FbmQpO1xuICAgIH1cbiAgICAvLyBHbyB0aHJvdWdoIGV4aXN0aW5nIGBNb3Rpb25WYWx1ZWBzIGFuZCBlbnN1cmUgYW55IGV4aXN0aW5nIENTUyB2YXJpYWJsZXMgYXJlIHJlc29sdmVkXG4gICAgdmlzdWFsRWxlbWVudC5mb3JFYWNoVmFsdWUoZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHZhciBjdXJyZW50ID0gdmFsdWUuZ2V0KCk7XG4gICAgICAgIGlmICghaXNDU1NWYXJpYWJsZShjdXJyZW50KSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdmFyIHJlc29sdmVkID0gZ2V0VmFyaWFibGVWYWx1ZShjdXJyZW50LCBlbGVtZW50KTtcbiAgICAgICAgaWYgKHJlc29sdmVkKVxuICAgICAgICAgICAgdmFsdWUuc2V0KHJlc29sdmVkKTtcbiAgICB9KTtcbiAgICAvLyBDeWNsZSB0aHJvdWdoIGV2ZXJ5IHRhcmdldCBwcm9wZXJ0eSBhbmQgcmVzb2x2ZSBDU1MgdmFyaWFibGVzLiBDdXJyZW50bHlcbiAgICAvLyB3ZSBvbmx5IHJlYWQgc2luZ2xlLXZhciBwcm9wZXJ0aWVzIGxpa2UgYHZhcigtLWZvbylgLCBub3QgYGNhbGModmFyKC0tZm9vKSArIDIwcHgpYFxuICAgIGZvciAodmFyIGtleSBpbiB0YXJnZXQpIHtcbiAgICAgICAgdmFyIGN1cnJlbnQgPSB0YXJnZXRba2V5XTtcbiAgICAgICAgaWYgKCFpc0NTU1ZhcmlhYmxlKGN1cnJlbnQpKVxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIHZhciByZXNvbHZlZCA9IGdldFZhcmlhYmxlVmFsdWUoY3VycmVudCwgZWxlbWVudCk7XG4gICAgICAgIGlmICghcmVzb2x2ZWQpXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgLy8gQ2xvbmUgdGFyZ2V0IGlmIGl0IGhhc24ndCBhbHJlYWR5IGJlZW5cbiAgICAgICAgdGFyZ2V0W2tleV0gPSByZXNvbHZlZDtcbiAgICAgICAgLy8gSWYgdGhlIHVzZXIgaGFzbid0IGFscmVhZHkgc2V0IHRoaXMga2V5IG9uIGB0cmFuc2l0aW9uRW5kYCwgc2V0IGl0IHRvIHRoZSB1bnJlc29sdmVkXG4gICAgICAgIC8vIENTUyB2YXJpYWJsZS4gVGhpcyB3aWxsIGVuc3VyZSB0aGF0IGFmdGVyIHRoZSBhbmltYXRpb24gdGhlIGNvbXBvbmVudCB3aWxsIHJlZmxlY3RcbiAgICAgICAgLy8gY2hhbmdlcyBpbiB0aGUgdmFsdWUgb2YgdGhlIENTUyB2YXJpYWJsZS5cbiAgICAgICAgaWYgKHRyYW5zaXRpb25FbmQpXG4gICAgICAgICAgICAoX2IgPSB0cmFuc2l0aW9uRW5kW2tleV0pICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6ICh0cmFuc2l0aW9uRW5kW2tleV0gPSBjdXJyZW50KTtcbiAgICB9XG4gICAgcmV0dXJuIHsgdGFyZ2V0OiB0YXJnZXQsIHRyYW5zaXRpb25FbmQ6IHRyYW5zaXRpb25FbmQgfTtcbn1cblxuZnVuY3Rpb24gcGl4ZWxzVG9QZXJjZW50KHBpeGVscywgYXhpcykge1xuICAgIHJldHVybiAocGl4ZWxzIC8gKGF4aXMubWF4IC0gYXhpcy5taW4pKSAqIDEwMDtcbn1cbi8qKlxuICogV2UgYWx3YXlzIGNvcnJlY3QgYm9yZGVyUmFkaXVzIGFzIGEgcGVyY2VudGFnZSByYXRoZXIgdGhhbiBwaXhlbHMgdG8gcmVkdWNlIHBhaW50cy5cbiAqIEZvciBleGFtcGxlLCBpZiB5b3UgYXJlIHByb2plY3RpbmcgYSBib3ggdGhhdCBpcyAxMDBweCB3aWRlIHdpdGggYSAxMHB4IGJvcmRlclJhZGl1c1xuICogaW50byBhIGJveCB0aGF0IGlzIDIwMHB4IHdpZGUgd2l0aCBhIDIwcHggYm9yZGVyUmFkaXVzLCB0aGF0IGlzIGFjdHVhbGx5IGEgMTAlXG4gKiBib3JkZXJSYWRpdXMgaW4gYm90aCBzdGF0ZXMuIElmIHdlIGFuaW1hdGUgYmV0d2VlbiB0aGUgdHdvIGluIHBpeGVscyB0aGF0IHdpbGwgdHJpZ2dlclxuICogYSBwYWludCBlYWNoIHRpbWUuIElmIHdlIGFuaW1hdGUgYmV0d2VlbiB0aGUgdHdvIGluIHBlcmNlbnRhZ2Ugd2UnbGwgYXZvaWQgYSBwYWludC5cbiAqL1xuZnVuY3Rpb24gY29ycmVjdEJvcmRlclJhZGl1cyhsYXRlc3QsIF9sYXlvdXRTdGF0ZSwgX2EpIHtcbiAgICB2YXIgdGFyZ2V0ID0gX2EudGFyZ2V0O1xuICAgIC8qKlxuICAgICAqIElmIGxhdGVzdCBpcyBhIHN0cmluZywgaWYgaXQncyBhIHBlcmNlbnRhZ2Ugd2UgY2FuIHJldHVybiBpbW1lZGlhdGVseSBhcyBpdCdzXG4gICAgICogZ29pbmcgdG8gYmUgc3RyZXRjaGVkIGFwcHJvcHJpYXRlbHkuIE90aGVyd2lzZSwgaWYgaXQncyBhIHBpeGVsLCBjb252ZXJ0IGl0IHRvIGEgbnVtYmVyLlxuICAgICAqL1xuICAgIGlmICh0eXBlb2YgbGF0ZXN0ID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIGlmIChzdHlsZVZhbHVlVHlwZXMucHgudGVzdChsYXRlc3QpKSB7XG4gICAgICAgICAgICBsYXRlc3QgPSBwYXJzZUZsb2F0KGxhdGVzdCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gbGF0ZXN0O1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIElmIGxhdGVzdCBpcyBhIG51bWJlciwgaXQncyBhIHBpeGVsIHZhbHVlLiBXZSB1c2UgdGhlIGN1cnJlbnQgdmlld3BvcnRCb3ggdG8gY2FsY3VsYXRlIHRoYXRcbiAgICAgKiBwaXhlbCB2YWx1ZSBhcyBhIHBlcmNlbnRhZ2Ugb2YgZWFjaCBheGlzXG4gICAgICovXG4gICAgdmFyIHggPSBwaXhlbHNUb1BlcmNlbnQobGF0ZXN0LCB0YXJnZXQueCk7XG4gICAgdmFyIHkgPSBwaXhlbHNUb1BlcmNlbnQobGF0ZXN0LCB0YXJnZXQueSk7XG4gICAgcmV0dXJuIHggKyBcIiUgXCIgKyB5ICsgXCIlXCI7XG59XG52YXIgdmFyVG9rZW4gPSBcIl8kY3NzXCI7XG5mdW5jdGlvbiBjb3JyZWN0Qm94U2hhZG93KGxhdGVzdCwgX2EpIHtcbiAgICB2YXIgZGVsdGEgPSBfYS5kZWx0YSwgdHJlZVNjYWxlID0gX2EudHJlZVNjYWxlO1xuICAgIHZhciBvcmlnaW5hbCA9IGxhdGVzdDtcbiAgICAvKipcbiAgICAgKiBXZSBuZWVkIHRvIGZpcnN0IHN0cmlwIGFuZCBzdG9yZSBDU1MgdmFyaWFibGVzIGZyb20gdGhlIHN0cmluZy5cbiAgICAgKi9cbiAgICB2YXIgY29udGFpbnNDU1NWYXJpYWJsZXMgPSBsYXRlc3QuaW5jbHVkZXMoXCJ2YXIoXCIpO1xuICAgIHZhciBjc3NWYXJpYWJsZXMgPSBbXTtcbiAgICBpZiAoY29udGFpbnNDU1NWYXJpYWJsZXMpIHtcbiAgICAgICAgbGF0ZXN0ID0gbGF0ZXN0LnJlcGxhY2UoY3NzVmFyaWFibGVSZWdleCwgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgICAgICAgICBjc3NWYXJpYWJsZXMucHVzaChtYXRjaCk7XG4gICAgICAgICAgICByZXR1cm4gdmFyVG9rZW47XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICB2YXIgc2hhZG93ID0gc3R5bGVWYWx1ZVR5cGVzLmNvbXBsZXgucGFyc2UobGF0ZXN0KTtcbiAgICAvLyBUT0RPOiBEb2Vzbid0IHN1cHBvcnQgbXVsdGlwbGUgc2hhZG93c1xuICAgIGlmIChzaGFkb3cubGVuZ3RoID4gNSlcbiAgICAgICAgcmV0dXJuIG9yaWdpbmFsO1xuICAgIHZhciB0ZW1wbGF0ZSA9IHN0eWxlVmFsdWVUeXBlcy5jb21wbGV4LmNyZWF0ZVRyYW5zZm9ybWVyKGxhdGVzdCk7XG4gICAgdmFyIG9mZnNldCA9IHR5cGVvZiBzaGFkb3dbMF0gIT09IFwibnVtYmVyXCIgPyAxIDogMDtcbiAgICAvLyBDYWxjdWxhdGUgdGhlIG92ZXJhbGwgY29udGV4dCBzY2FsZVxuICAgIHZhciB4U2NhbGUgPSBkZWx0YS54LnNjYWxlICogdHJlZVNjYWxlLng7XG4gICAgdmFyIHlTY2FsZSA9IGRlbHRhLnkuc2NhbGUgKiB0cmVlU2NhbGUueTtcbiAgICBzaGFkb3dbMCArIG9mZnNldF0gLz0geFNjYWxlO1xuICAgIHNoYWRvd1sxICsgb2Zmc2V0XSAvPSB5U2NhbGU7XG4gICAgLyoqXG4gICAgICogSWRlYWxseSB3ZSdkIGNvcnJlY3QgeCBhbmQgeSBzY2FsZXMgaW5kaXZpZHVhbGx5LCBidXQgYmVjYXVzZSBibHVyIGFuZFxuICAgICAqIHNwcmVhZCBhcHBseSB0byBib3RoIHdlIGhhdmUgdG8gdGFrZSBhIHNjYWxlIGF2ZXJhZ2UgYW5kIGFwcGx5IHRoYXQgaW5zdGVhZC5cbiAgICAgKiBXZSBjb3VsZCBwb3RlbnRpYWxseSBpbXByb3ZlIHRoZSBvdXRjb21lIG9mIHRoaXMgYnkgaW5jb3Jwb3JhdGluZyB0aGUgcmF0aW8gYmV0d2VlblxuICAgICAqIHRoZSB0d28gc2NhbGVzLlxuICAgICAqL1xuICAgIHZhciBhdmVyYWdlU2NhbGUgPSBwb3Btb3Rpb24ubWl4KHhTY2FsZSwgeVNjYWxlLCAwLjUpO1xuICAgIC8vIEJsdXJcbiAgICBpZiAodHlwZW9mIHNoYWRvd1syICsgb2Zmc2V0XSA9PT0gXCJudW1iZXJcIilcbiAgICAgICAgc2hhZG93WzIgKyBvZmZzZXRdIC89IGF2ZXJhZ2VTY2FsZTtcbiAgICAvLyBTcHJlYWRcbiAgICBpZiAodHlwZW9mIHNoYWRvd1szICsgb2Zmc2V0XSA9PT0gXCJudW1iZXJcIilcbiAgICAgICAgc2hhZG93WzMgKyBvZmZzZXRdIC89IGF2ZXJhZ2VTY2FsZTtcbiAgICB2YXIgb3V0cHV0ID0gdGVtcGxhdGUoc2hhZG93KTtcbiAgICBpZiAoY29udGFpbnNDU1NWYXJpYWJsZXMpIHtcbiAgICAgICAgdmFyIGlfMSA9IDA7XG4gICAgICAgIG91dHB1dCA9IG91dHB1dC5yZXBsYWNlKHZhclRva2VuLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgY3NzVmFyaWFibGUgPSBjc3NWYXJpYWJsZXNbaV8xXTtcbiAgICAgICAgICAgIGlfMSsrO1xuICAgICAgICAgICAgcmV0dXJuIGNzc1ZhcmlhYmxlO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIG91dHB1dDtcbn1cbnZhciBib3JkZXJDb3JyZWN0aW9uRGVmaW5pdGlvbiA9IHtcbiAgICBwcm9jZXNzOiBjb3JyZWN0Qm9yZGVyUmFkaXVzLFxufTtcbnZhciBkZWZhdWx0U2NhbGVDb3JyZWN0b3JzID0ge1xuICAgIGJvcmRlclJhZGl1czogdHNsaWIuX19hc3NpZ24odHNsaWIuX19hc3NpZ24oe30sIGJvcmRlckNvcnJlY3Rpb25EZWZpbml0aW9uKSwgeyBhcHBseVRvOiBbXG4gICAgICAgICAgICBcImJvcmRlclRvcExlZnRSYWRpdXNcIixcbiAgICAgICAgICAgIFwiYm9yZGVyVG9wUmlnaHRSYWRpdXNcIixcbiAgICAgICAgICAgIFwiYm9yZGVyQm90dG9tTGVmdFJhZGl1c1wiLFxuICAgICAgICAgICAgXCJib3JkZXJCb3R0b21SaWdodFJhZGl1c1wiLFxuICAgICAgICBdIH0pLFxuICAgIGJvcmRlclRvcExlZnRSYWRpdXM6IGJvcmRlckNvcnJlY3Rpb25EZWZpbml0aW9uLFxuICAgIGJvcmRlclRvcFJpZ2h0UmFkaXVzOiBib3JkZXJDb3JyZWN0aW9uRGVmaW5pdGlvbixcbiAgICBib3JkZXJCb3R0b21MZWZ0UmFkaXVzOiBib3JkZXJDb3JyZWN0aW9uRGVmaW5pdGlvbixcbiAgICBib3JkZXJCb3R0b21SaWdodFJhZGl1czogYm9yZGVyQ29ycmVjdGlvbkRlZmluaXRpb24sXG4gICAgYm94U2hhZG93OiB7XG4gICAgICAgIHByb2Nlc3M6IGNvcnJlY3RCb3hTaGFkb3csXG4gICAgfSxcbn07XG5cbnZhciBwcm9ncmVzc1RhcmdldCA9IDEwMDA7XG52YXIgQW5pbWF0ZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYi5fX2V4dGVuZHMoQW5pbWF0ZSwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBBbmltYXRlKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEEgbXV0YWJsZSBvYmplY3QgdGhhdCB0cmFja3MgdGhlIHRhcmdldCB2aWV3cG9ydCBib3hcbiAgICAgICAgICogZm9yIHRoZSBjdXJyZW50IGFuaW1hdGlvbiBmcmFtZS5cbiAgICAgICAgICovXG4gICAgICAgIF90aGlzLmZyYW1lVGFyZ2V0ID0gYXhpc0JveCgpO1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIGN1cnJlbnQgYW5pbWF0aW9uIHRhcmdldCwgd2UgdXNlIHRoaXMgdG8gY2hlY2sgd2hldGhlciB0byBzdGFydFxuICAgICAgICAgKiBhIG5ldyBhbmltYXRpb24gb3IgY29udGludWUgdGhlIGV4aXN0aW5nIG9uZS5cbiAgICAgICAgICovXG4gICAgICAgIF90aGlzLmN1cnJlbnRBbmltYXRpb25UYXJnZXQgPSBheGlzQm94KCk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUcmFjayB3aGV0aGVyIHdlJ3JlIGFuaW1hdGluZyB0aGlzIGF4aXMuXG4gICAgICAgICAqL1xuICAgICAgICBfdGhpcy5pc0FuaW1hdGluZyA9IHtcbiAgICAgICAgICAgIHg6IGZhbHNlLFxuICAgICAgICAgICAgeTogZmFsc2UsXG4gICAgICAgIH07XG4gICAgICAgIF90aGlzLnN0b3BBeGlzQW5pbWF0aW9uID0ge1xuICAgICAgICAgICAgeDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgeTogdW5kZWZpbmVkLFxuICAgICAgICB9O1xuICAgICAgICBfdGhpcy5pc0FuaW1hdGluZ1RyZWUgPSBmYWxzZTtcbiAgICAgICAgX3RoaXMuYW5pbWF0ZSA9IGZ1bmN0aW9uICh0YXJnZXQsIG9yaWdpbiwgX2EpIHtcbiAgICAgICAgICAgIGlmIChfYSA9PT0gdm9pZCAwKSB7IF9hID0ge307IH1cbiAgICAgICAgICAgIHZhciBvcmlnaW5Cb3ggPSBfYS5vcmlnaW5Cb3gsIHRhcmdldEJveCA9IF9hLnRhcmdldEJveCwgdmlzaWJpbGl0eUFjdGlvbiA9IF9hLnZpc2liaWxpdHlBY3Rpb24sIHNob3VsZFN0YWNrQW5pbWF0ZSA9IF9hLnNob3VsZFN0YWNrQW5pbWF0ZSwgb25Db21wbGV0ZSA9IF9hLm9uQ29tcGxldGUsIHByZXZQYXJlbnQgPSBfYS5wcmV2UGFyZW50LCBjb25maWcgPSB0c2xpYi5fX3Jlc3QoX2EsIFtcIm9yaWdpbkJveFwiLCBcInRhcmdldEJveFwiLCBcInZpc2liaWxpdHlBY3Rpb25cIiwgXCJzaG91bGRTdGFja0FuaW1hdGVcIiwgXCJvbkNvbXBsZXRlXCIsIFwicHJldlBhcmVudFwiXSk7XG4gICAgICAgICAgICB2YXIgX2IgPSBfdGhpcy5wcm9wcywgdmlzdWFsRWxlbWVudCA9IF9iLnZpc3VhbEVsZW1lbnQsIGxheW91dCA9IF9iLmxheW91dDtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogRWFybHkgcmV0dXJuIGlmIHdlJ3ZlIGJlZW4gaW5zdHJ1Y3RlZCBub3QgdG8gYW5pbWF0ZSB0aGlzIHJlbmRlci5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgaWYgKHNob3VsZFN0YWNrQW5pbWF0ZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5pc0FuaW1hdGluZ1RyZWUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMuc2FmZVRvUmVtb3ZlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFByaW9yaXRpc2UgdHJlZSBhbmltYXRpb25zXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGlmIChfdGhpcy5pc0FuaW1hdGluZ1RyZWUgJiYgc2hvdWxkU3RhY2tBbmltYXRlICE9PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoc2hvdWxkU3RhY2tBbmltYXRlKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuaXNBbmltYXRpbmdUcmVlID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQWxsb3cgdGhlIG1lYXN1cmVkIG9yaWdpbiAocHJldiBib3VuZGluZyBib3gpIGFuZCB0YXJnZXQgKGFjdHVhbCBsYXlvdXQpIHRvIGJlXG4gICAgICAgICAgICAgKiBvdmVycmlkZGVuIGJ5IHRoZSBwcm92aWRlZCBjb25maWcuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIG9yaWdpbiA9IG9yaWdpbkJveCB8fCBvcmlnaW47XG4gICAgICAgICAgICB0YXJnZXQgPSB0YXJnZXRCb3ggfHwgdGFyZ2V0O1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBJZiB0aGlzIGVsZW1lbnQgaGFzIGEgcHJvamVjdGluZyBwYXJlbnQsIHRoZXJlJ3MgYW4gb3Bwb3J0dW5pdHkgdG8gYW5pbWF0ZVxuICAgICAgICAgICAgICogaXQgcmVsYXRpdmVseSB0byB0aGF0IHBhcmVudCByYXRoZXIgdGhhbiByZWxhdGl2ZWx5IHRvIHRoZSB2aWV3cG9ydC4gVGhpc1xuICAgICAgICAgICAgICogYWxsb3dzIHVzIHRvIGFkZCBvcmNoZXN0cmF0ZWQgYW5pbWF0aW9ucy5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgdmFyIGlzUmVsYXRpdmUgPSBmYWxzZTtcbiAgICAgICAgICAgIHZhciBwcm9qZWN0aW9uUGFyZW50ID0gdmlzdWFsRWxlbWVudC5nZXRQcm9qZWN0aW9uUGFyZW50KCk7XG4gICAgICAgICAgICBpZiAocHJvamVjdGlvblBhcmVudCkge1xuICAgICAgICAgICAgICAgIHZhciBwcmV2UGFyZW50Vmlld3BvcnRCb3ggPSBwcm9qZWN0aW9uUGFyZW50LnByZXZWaWV3cG9ydEJveDtcbiAgICAgICAgICAgICAgICB2YXIgcGFyZW50TGF5b3V0ID0gcHJvamVjdGlvblBhcmVudC5nZXRMYXlvdXRTdGF0ZSgpLmxheW91dDtcbiAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgKiBJZiB3ZSdyZSBiZWluZyBwcm92aWRlZCBhIHByZXZpb3VzIHBhcmVudCBWaXN1YWxFbGVtZW50IGJ5IEFuaW1hdGVTaGFyZWRMYXlvdXRcbiAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICBpZiAocHJldlBhcmVudCkge1xuICAgICAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgICAgICogSWYgd2UndmUgYmVlbiBwcm92aWRlZCBhbiBleHBsaWNpdCB0YXJnZXQgYm94IGl0IG1lYW5zIHdlJ3JlIGFuaW1hdGluZyBiYWNrXG4gICAgICAgICAgICAgICAgICAgICAqIHRvIHRoaXMgcHJldmlvdXMgcGFyZW50LiBTbyB3ZSBjYW4gbWFrZSBhIHJlbGF0aXZlIGJveCBieSBjb21wYXJpbmcgdG8gdGhlIHByZXZpb3VzXG4gICAgICAgICAgICAgICAgICAgICAqIHBhcmVudCdzIGxheW91dFxuICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhcmdldEJveCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50TGF5b3V0ID0gcHJldlBhcmVudC5nZXRMYXlvdXRTdGF0ZSgpLmxheW91dDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgICAgICogTGlrZXdpc2UgaWYgd2UndmUgYmVlbiBwcm92aWRlZCBhbiBleHBsaWNpdCBvcmlnaW4gYm94IGl0IG1lYW5zIHdlJ3JlXG4gICAgICAgICAgICAgICAgICAgICAqIGFuaW1hdGluZyBvdXQgZnJvbSBhIGRpZmZlcmVudCBlbGVtZW50LiBTbyB3ZSBzaG91bGQgZmlndXJlIG91dCB3aGVyZSB0aGF0IHdhc1xuICAgICAgICAgICAgICAgICAgICAgKiBvbiBzY3JlZW4gcmVsYXRpdmUgdG8gdGhlIG5ldyBwYXJlbnQgZWxlbWVudC5cbiAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcmlnaW5Cb3ggJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICFjaGVja0lmUGFyZW50SGFzQ2hhbmdlZChwcmV2UGFyZW50LCBwcm9qZWN0aW9uUGFyZW50KSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgcHJldlBhcmVudC5wcmV2Vmlld3BvcnRCb3gpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHByZXZQYXJlbnRWaWV3cG9ydEJveCA9IHByZXZQYXJlbnQucHJldlZpZXdwb3J0Qm94O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChwcmV2UGFyZW50Vmlld3BvcnRCb3ggJiZcbiAgICAgICAgICAgICAgICAgICAgaXNQcm92aWRlZENvcnJlY3REYXRhRm9yUmVsYXRpdmVTaGFyZWRMYXlvdXQocHJldlBhcmVudCwgb3JpZ2luQm94LCB0YXJnZXRCb3gpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlzUmVsYXRpdmUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBvcmlnaW4gPSBjYWxjUmVsYXRpdmVPZmZzZXQocHJldlBhcmVudFZpZXdwb3J0Qm94LCBvcmlnaW4pO1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXQgPSBjYWxjUmVsYXRpdmVPZmZzZXQocGFyZW50TGF5b3V0LCB0YXJnZXQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBib3hIYXNNb3ZlZCA9IGhhc01vdmVkKG9yaWdpbiwgdGFyZ2V0KTtcbiAgICAgICAgICAgIHZhciBhbmltYXRpb25zID0gZWFjaEF4aXMoZnVuY3Rpb24gKGF4aXMpIHtcbiAgICAgICAgICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAqIElmIGxheW91dCBpcyBzZXQgdG8gXCJwb3NpdGlvblwiLCB3ZSBjYW4gcmVzaXplIHRoZSBvcmlnaW4gYm94IGJhc2VkIG9uIHRoZSB0YXJnZXRcbiAgICAgICAgICAgICAgICAgKiBib3ggYW5kIG9ubHkgYW5pbWF0ZSBpdHMgcG9zaXRpb24uXG4gICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgaWYgKGxheW91dCA9PT0gXCJwb3NpdGlvblwiKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0YXJnZXRMZW5ndGggPSB0YXJnZXRbYXhpc10ubWF4IC0gdGFyZ2V0W2F4aXNdLm1pbjtcbiAgICAgICAgICAgICAgICAgICAgb3JpZ2luW2F4aXNdLm1heCA9IG9yaWdpbltheGlzXS5taW4gKyB0YXJnZXRMZW5ndGg7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh2aXN1YWxFbGVtZW50LnByb2plY3Rpb24uaXNUYXJnZXRMb2NrZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmICh2aXNpYmlsaXR5QWN0aW9uICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdmlzdWFsRWxlbWVudC5zZXRWaXNpYmlsaXR5KHZpc2liaWxpdHlBY3Rpb24gPT09IGV4cG9ydHMuVmlzaWJpbGl0eUFjdGlvbi5TaG93KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoYm94SGFzTW92ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gSWYgdGhlIGJveCBoYXMgbW92ZWQsIGFuaW1hdGUgYmV0d2VlbiBpdCdzIGN1cnJlbnQgdmlzdWFsIHN0YXRlIGFuZCBpdHNcbiAgICAgICAgICAgICAgICAgICAgLy8gZmluYWwgc3RhdGVcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLmFuaW1hdGVBeGlzKGF4aXMsIHRhcmdldFtheGlzXSwgb3JpZ2luW2F4aXNdLCB0c2xpYi5fX2Fzc2lnbih0c2xpYi5fX2Fzc2lnbih7fSwgY29uZmlnKSwgeyBpc1JlbGF0aXZlOiBpc1JlbGF0aXZlIH0pKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIChfYiA9IChfYSA9IF90aGlzLnN0b3BBeGlzQW5pbWF0aW9uKVtheGlzXSkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmNhbGwoX2EpO1xuICAgICAgICAgICAgICAgICAgICAvLyBJZiB0aGUgYm94IGhhcyByZW1haW5lZCBpbiB0aGUgc2FtZSBwbGFjZSwgaW1tZWRpYXRlbHkgc2V0IHRoZSBheGlzIHRhcmdldFxuICAgICAgICAgICAgICAgICAgICAvLyB0byB0aGUgZmluYWwgZGVzaXJlZCBzdGF0ZVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmlzdWFsRWxlbWVudC5zZXRQcm9qZWN0aW9uVGFyZ2V0QXhpcyhheGlzLCB0YXJnZXRbYXhpc10ubWluLCB0YXJnZXRbYXhpc10ubWF4LCBpc1JlbGF0aXZlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIC8vIEZvcmNlIGEgcmVuZGVyIHRvIGVuc3VyZSB0aGVyZSdzIG5vIGZsYXNoIG9mIHVuY29ycmVjdGVkIGJvdW5kaW5nIGJveC5cbiAgICAgICAgICAgIHZpc3VhbEVsZW1lbnQuc3luY1JlbmRlcigpO1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBJZiB0aGlzIHZpc3VhbEVsZW1lbnQgaXNuJ3QgcHJlc2VudCAoaWUgaXQncyBiZWVuIHJlbW92ZWQgZnJvbSB0aGUgdHJlZSBieSB0aGUgdXNlciBidXRcbiAgICAgICAgICAgICAqIGtlcHQgaW4gYnkgdGhlIHRyZWUgYnkgQW5pbWF0ZVByZXNlbmNlKSB0aGVuIGNhbGwgc2FmZVRvUmVtb3ZlIHdoZW4gYWxsIGF4aXMgYW5pbWF0aW9uc1xuICAgICAgICAgICAgICogaGF2ZSBzdWNjZXNzZnVsbHkgZmluaXNoZWQuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLmFsbChhbmltYXRpb25zKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5pc0FuaW1hdGluZ1RyZWUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBvbkNvbXBsZXRlICYmIG9uQ29tcGxldGUoKTtcbiAgICAgICAgICAgICAgICB2aXN1YWxFbGVtZW50Lm5vdGlmeUxheW91dEFuaW1hdGlvbkNvbXBsZXRlKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBBbmltYXRlLnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIHZpc3VhbEVsZW1lbnQgPSB0aGlzLnByb3BzLnZpc3VhbEVsZW1lbnQ7XG4gICAgICAgIHZpc3VhbEVsZW1lbnQuYW5pbWF0ZU1vdGlvblZhbHVlID0gc3RhcnRBbmltYXRpb247XG4gICAgICAgIHZpc3VhbEVsZW1lbnQuZW5hYmxlTGF5b3V0UHJvamVjdGlvbigpO1xuICAgICAgICB0aGlzLnVuc3ViTGF5b3V0UmVhZHkgPSB2aXN1YWxFbGVtZW50Lm9uTGF5b3V0VXBkYXRlKHRoaXMuYW5pbWF0ZSk7XG4gICAgICAgIHZpc3VhbEVsZW1lbnQubGF5b3V0U2FmZVRvUmVtb3ZlID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMuc2FmZVRvUmVtb3ZlKCk7IH07XG4gICAgICAgIGFkZFNjYWxlQ29ycmVjdGlvbihkZWZhdWx0U2NhbGVDb3JyZWN0b3JzKTtcbiAgICB9O1xuICAgIEFuaW1hdGUucHJvdG90eXBlLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB0aGlzLnVuc3ViTGF5b3V0UmVhZHkoKTtcbiAgICAgICAgZWFjaEF4aXMoZnVuY3Rpb24gKGF4aXMpIHsgdmFyIF9hLCBfYjsgcmV0dXJuIChfYiA9IChfYSA9IF90aGlzLnN0b3BBeGlzQW5pbWF0aW9uKVtheGlzXSkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmNhbGwoX2EpOyB9KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFRPRE86IFRoaXMgbWFudWFsbHkgcGVyZm9ybXMgYW5pbWF0aW9ucyBvbiB0aGUgdmlzdWFsRWxlbWVudCdzIGxheW91dCBwcm9ncmVzc1xuICAgICAqIHZhbHVlcy4gSXQnZCBiZSBwcmVmZXJhYmxlIHRvIGFtZW5kIHRoZSBzdGFydExheW91dEF4aXNBbmltYXRpb25cbiAgICAgKiBBUEkgdG8gYWNjZXB0IG1vcmUgY3VzdG9tIGFuaW1hdGlvbnMgbGlrZSB0aGlzLlxuICAgICAqL1xuICAgIEFuaW1hdGUucHJvdG90eXBlLmFuaW1hdGVBeGlzID0gZnVuY3Rpb24gKGF4aXMsIHRhcmdldCwgb3JpZ2luLCBfYSkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgX2IsIF9jO1xuICAgICAgICB2YXIgX2QgPSBfYSA9PT0gdm9pZCAwID8ge30gOiBfYSwgdHJhbnNpdGlvbiA9IF9kLnRyYW5zaXRpb24sIGlzUmVsYXRpdmUgPSBfZC5pc1JlbGF0aXZlO1xuICAgICAgICAvKipcbiAgICAgICAgICogSWYgd2UncmUgbm90IGFuaW1hdGluZyB0byBhIG5ldyB0YXJnZXQsIGRvbid0IHJ1biB0aGlzIGFuaW1hdGlvblxuICAgICAgICAgKi9cbiAgICAgICAgaWYgKHRoaXMuaXNBbmltYXRpbmdbYXhpc10gJiZcbiAgICAgICAgICAgIGF4aXNJc0VxdWFsKHRhcmdldCwgdGhpcy5jdXJyZW50QW5pbWF0aW9uVGFyZ2V0W2F4aXNdKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIChfYyA9IChfYiA9IHRoaXMuc3RvcEF4aXNBbmltYXRpb24pW2F4aXNdKSA9PT0gbnVsbCB8fCBfYyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2MuY2FsbChfYik7XG4gICAgICAgIHRoaXMuaXNBbmltYXRpbmdbYXhpc10gPSB0cnVlO1xuICAgICAgICB2YXIgdmlzdWFsRWxlbWVudCA9IHRoaXMucHJvcHMudmlzdWFsRWxlbWVudDtcbiAgICAgICAgdmFyIGZyYW1lVGFyZ2V0ID0gdGhpcy5mcmFtZVRhcmdldFtheGlzXTtcbiAgICAgICAgdmFyIGxheW91dFByb2dyZXNzID0gdmlzdWFsRWxlbWVudC5nZXRQcm9qZWN0aW9uQW5pbWF0aW9uUHJvZ3Jlc3MoKVtheGlzXTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNldCBsYXlvdXQgcHJvZ3Jlc3MgYmFjayB0byAwLiBXZSBzZXQgaXQgdHdpY2UgdG8gaGFyZC1yZXNldCBhbnkgdmVsb2NpdHkgdGhhdCBtaWdodFxuICAgICAgICAgKiBiZSByZS1pbmNvcG9yYXRlZCBpbnRvIGEgc3Vic2VxdWVudCBzcHJpbmcgYW5pbWF0aW9uLlxuICAgICAgICAgKi9cbiAgICAgICAgbGF5b3V0UHJvZ3Jlc3MuY2xlYXJMaXN0ZW5lcnMoKTtcbiAgICAgICAgbGF5b3V0UHJvZ3Jlc3Muc2V0KDApO1xuICAgICAgICBsYXlvdXRQcm9ncmVzcy5zZXQoMCk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDcmVhdGUgYW4gYW5pbWF0aW9uIGZ1bmN0aW9uIHRvIHJ1biBvbmNlIHBlciBmcmFtZS4gVGhpcyB3aWxsIHR3ZWVuIHRoZSB2aXN1YWwgYm91bmRpbmcgYm94IGZyb21cbiAgICAgICAgICogb3JpZ2luIHRvIHRhcmdldCB1c2luZyB0aGUgbGF0ZXN0IHByb2dyZXNzIHZhbHVlLlxuICAgICAgICAgKi9cbiAgICAgICAgdmFyIGZyYW1lID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgLy8gQ29udmVydCB0aGUgbGF0ZXN0IGxheW91dFByb2dyZXNzLCB3aGljaCBpcyBhIHZhbHVlIGZyb20gMC0xMDAwLCBpbnRvIGEgMC0xIHByb2dyZXNzXG4gICAgICAgICAgICB2YXIgcCA9IGxheW91dFByb2dyZXNzLmdldCgpIC8gcHJvZ3Jlc3NUYXJnZXQ7XG4gICAgICAgICAgICAvLyBUd2VlbiB0aGUgYXhpcyBhbmQgdXBkYXRlIHRoZSB2aXN1YWxFbGVtZW50IHdpdGggdGhlIGxhdGVzdCB2YWx1ZXNcbiAgICAgICAgICAgIHR3ZWVuQXhpcyhmcmFtZVRhcmdldCwgb3JpZ2luLCB0YXJnZXQsIHApO1xuICAgICAgICAgICAgdmlzdWFsRWxlbWVudC5zZXRQcm9qZWN0aW9uVGFyZ2V0QXhpcyhheGlzLCBmcmFtZVRhcmdldC5taW4sIGZyYW1lVGFyZ2V0Lm1heCwgaXNSZWxhdGl2ZSk7XG4gICAgICAgIH07XG4gICAgICAgIC8vIFN5bmNocm9ub3VzbHkgcnVuIGEgZnJhbWUgdG8gZW5zdXJlIHRoZXJlJ3Mgbm8gZmxhc2ggb2YgdGhlIHVuY29ycmVjdGVkIGJvdW5kaW5nIGJveC5cbiAgICAgICAgZnJhbWUoKTtcbiAgICAgICAgLy8gQ3JlYXRlIGEgZnVuY3Rpb24gdG8gc3RvcCBhbmltYXRpb24gb24gdGhpcyBzcGVjaWZpYyBheGlzXG4gICAgICAgIHZhciB1bnN1YnNjcmliZVByb2dyZXNzID0gbGF5b3V0UHJvZ3Jlc3Mub25DaGFuZ2UoZnJhbWUpO1xuICAgICAgICB0aGlzLnN0b3BBeGlzQW5pbWF0aW9uW2F4aXNdID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgX3RoaXMuaXNBbmltYXRpbmdbYXhpc10gPSBmYWxzZTtcbiAgICAgICAgICAgIGxheW91dFByb2dyZXNzLnN0b3AoKTtcbiAgICAgICAgICAgIHVuc3Vic2NyaWJlUHJvZ3Jlc3MoKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5jdXJyZW50QW5pbWF0aW9uVGFyZ2V0W2F4aXNdID0gdGFyZ2V0O1xuICAgICAgICB2YXIgbGF5b3V0VHJhbnNpdGlvbiA9IHRyYW5zaXRpb24gfHxcbiAgICAgICAgICAgIHZpc3VhbEVsZW1lbnQuZ2V0RGVmYXVsdFRyYW5zaXRpb24oKSB8fFxuICAgICAgICAgICAgZGVmYXVsdExheW91dFRyYW5zaXRpb247XG4gICAgICAgIC8vIFN0YXJ0IHRoZSBhbmltYXRpb24gb24gdGhpcyBheGlzXG4gICAgICAgIHZhciBhbmltYXRpb24gPSBzdGFydEFuaW1hdGlvbihheGlzID09PSBcInhcIiA/IFwibGF5b3V0WFwiIDogXCJsYXlvdXRZXCIsIGxheW91dFByb2dyZXNzLCBwcm9ncmVzc1RhcmdldCwgbGF5b3V0VHJhbnNpdGlvbiAmJiBnZXRWYWx1ZVRyYW5zaXRpb24obGF5b3V0VHJhbnNpdGlvbiwgXCJsYXlvdXRcIikpLnRoZW4odGhpcy5zdG9wQXhpc0FuaW1hdGlvbltheGlzXSk7XG4gICAgICAgIHJldHVybiBhbmltYXRpb247XG4gICAgfTtcbiAgICBBbmltYXRlLnByb3RvdHlwZS5zYWZlVG9SZW1vdmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgIChfYiA9IChfYSA9IHRoaXMucHJvcHMpLnNhZmVUb1JlbW92ZSkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmNhbGwoX2EpO1xuICAgIH07XG4gICAgQW5pbWF0ZS5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9O1xuICAgIHJldHVybiBBbmltYXRlO1xufShSZWFjdF9fbmFtZXNwYWNlLkNvbXBvbmVudCkpO1xuZnVuY3Rpb24gQW5pbWF0ZUxheW91dENvbnRleHRQcm92aWRlcihwcm9wcykge1xuICAgIHZhciBfYSA9IHRzbGliLl9fcmVhZCh1c2VQcmVzZW5jZSgpLCAyKSwgc2FmZVRvUmVtb3ZlID0gX2FbMV07XG4gICAgcmV0dXJuIFJlYWN0X19uYW1lc3BhY2UuY3JlYXRlRWxlbWVudChBbmltYXRlLCB0c2xpYi5fX2Fzc2lnbih7fSwgcHJvcHMsIHsgc2FmZVRvUmVtb3ZlOiBzYWZlVG9SZW1vdmUgfSkpO1xufVxuZnVuY3Rpb24gaGFzTW92ZWQoYSwgYikge1xuICAgIHJldHVybiAoIWlzWmVyb0JveChhKSAmJlxuICAgICAgICAhaXNaZXJvQm94KGIpICYmXG4gICAgICAgICghYXhpc0lzRXF1YWwoYS54LCBiLngpIHx8ICFheGlzSXNFcXVhbChhLnksIGIueSkpKTtcbn1cbnZhciB6ZXJvQXhpcyA9IHsgbWluOiAwLCBtYXg6IDAgfTtcbmZ1bmN0aW9uIGlzWmVyb0JveChhKSB7XG4gICAgcmV0dXJuIGF4aXNJc0VxdWFsKGEueCwgemVyb0F4aXMpICYmIGF4aXNJc0VxdWFsKGEueSwgemVyb0F4aXMpO1xufVxuZnVuY3Rpb24gYXhpc0lzRXF1YWwoYSwgYikge1xuICAgIHJldHVybiBhLm1pbiA9PT0gYi5taW4gJiYgYS5tYXggPT09IGIubWF4O1xufVxudmFyIGRlZmF1bHRMYXlvdXRUcmFuc2l0aW9uID0ge1xuICAgIGR1cmF0aW9uOiAwLjQ1LFxuICAgIGVhc2U6IFswLjQsIDAsIDAuMSwgMV0sXG59O1xuZnVuY3Rpb24gaXNQcm92aWRlZENvcnJlY3REYXRhRm9yUmVsYXRpdmVTaGFyZWRMYXlvdXQocHJldlBhcmVudCwgb3JpZ2luQm94LCB0YXJnZXRCb3gpIHtcbiAgICByZXR1cm4gcHJldlBhcmVudCB8fCAoIXByZXZQYXJlbnQgJiYgIShvcmlnaW5Cb3ggfHwgdGFyZ2V0Qm94KSk7XG59XG5cbi8qKlxuICogRGVmYXVsdCBoYW5kbGVycyBmb3IgYmF0Y2hpbmcgVmlzdWFsRWxlbWVudHNcbiAqL1xudmFyIGRlZmF1bHRIYW5kbGVyID0ge1xuICAgIGxheW91dFJlYWR5OiBmdW5jdGlvbiAoY2hpbGQpIHsgcmV0dXJuIGNoaWxkLm5vdGlmeUxheW91dFJlYWR5KCk7IH0sXG59O1xuLyoqXG4gKiBDcmVhdGUgYSBiYXRjaGVyIHRvIHByb2Nlc3MgVmlzdWFsRWxlbWVudHNcbiAqL1xuZnVuY3Rpb24gY3JlYXRlQmF0Y2hlcigpIHtcbiAgICB2YXIgcXVldWUgPSBuZXcgU2V0KCk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgYWRkOiBmdW5jdGlvbiAoY2hpbGQpIHsgcmV0dXJuIHF1ZXVlLmFkZChjaGlsZCk7IH0sXG4gICAgICAgIGZsdXNoOiBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICAgIHZhciBfYiA9IF9hID09PSB2b2lkIDAgPyBkZWZhdWx0SGFuZGxlciA6IF9hLCBsYXlvdXRSZWFkeSA9IF9iLmxheW91dFJlYWR5LCBwYXJlbnQgPSBfYi5wYXJlbnQ7XG4gICAgICAgICAgICBiYXRjaExheW91dChmdW5jdGlvbiAocmVhZCwgd3JpdGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgb3JkZXIgPSBBcnJheS5mcm9tKHF1ZXVlKS5zb3J0KGNvbXBhcmVCeURlcHRoKTtcbiAgICAgICAgICAgICAgICB2YXIgYW5jZXN0b3JzID0gcGFyZW50XG4gICAgICAgICAgICAgICAgICAgID8gY29sbGVjdFByb2plY3RpbmdBbmNlc3RvcnMocGFyZW50KVxuICAgICAgICAgICAgICAgICAgICA6IFtdO1xuICAgICAgICAgICAgICAgIHdyaXRlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGFsbEVsZW1lbnRzID0gdHNsaWIuX19zcHJlYWRBcnJheSh0c2xpYi5fX3NwcmVhZEFycmF5KFtdLCB0c2xpYi5fX3JlYWQoYW5jZXN0b3JzKSksIHRzbGliLl9fcmVhZChvcmRlcikpO1xuICAgICAgICAgICAgICAgICAgICBhbGxFbGVtZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChlbGVtZW50KSB7IHJldHVybiBlbGVtZW50LnJlc2V0VHJhbnNmb3JtKCk7IH0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJlYWQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBvcmRlci5mb3JFYWNoKHVwZGF0ZUxheW91dE1lYXN1cmVtZW50KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB3cml0ZShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIGFuY2VzdG9ycy5mb3JFYWNoKGZ1bmN0aW9uIChlbGVtZW50KSB7IHJldHVybiBlbGVtZW50LnJlc3RvcmVUcmFuc2Zvcm0oKTsgfSk7XG4gICAgICAgICAgICAgICAgICAgIG9yZGVyLmZvckVhY2gobGF5b3V0UmVhZHkpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJlYWQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgICAgICogQWZ0ZXIgYWxsIGNoaWxkcmVuIGhhdmUgc3RhcnRlZCBhbmltYXRpbmcsIGVuc3VyZSBhbnkgRW50ZXJpbmcgY29tcG9uZW50cyBhcmUgc2V0IHRvIFByZXNlbnQuXG4gICAgICAgICAgICAgICAgICAgICAqIElmIHdlIGFkZCBkZWZlcnJlZCBhbmltYXRpb25zIChzZXQgdXAgYWxsIGFuaW1hdGlvbnMgYW5kIHRoZW4gc3RhcnQgdGhlbSBpbiB0d28gbG9vcHMpIHRoaXNcbiAgICAgICAgICAgICAgICAgICAgICogY291bGQgYmUgbW92ZWQgdG8gdGhlIHN0YXJ0IGxvb3AuIEJ1dCBpdCBuZWVkcyB0byBoYXBwZW4gYWZ0ZXIgYWxsIHRoZSBhbmltYXRpb25zIGNvbmZpZ3NcbiAgICAgICAgICAgICAgICAgICAgICogYXJlIGdlbmVyYXRlZCBpbiBBbmltYXRlU2hhcmVkTGF5b3V0IGFzIHRoaXMgcmVsaWVzIG9uIHByZXNlbmNlIGRhdGFcbiAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgICAgIG9yZGVyLmZvckVhY2goZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2hpbGQuaXNQcmVzZW50KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkLnByZXNlbmNlID0gUHJlc2VuY2UuUHJlc2VudDtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgd3JpdGUoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgICAgICogU3RhcnRpbmcgdGhlc2UgYW5pbWF0aW9ucyB3aWxsIGhhdmUgcXVldWVkIGpvYnMgb24gdGhlIGZyYW1lIGxvb3AuIEluIHNvbWUgc2l0dWF0aW9ucyxcbiAgICAgICAgICAgICAgICAgICAgICogbGlrZSB3aGVuIHJlbW92aW5nIGFuIGVsZW1lbnQsIHRoZXNlIHdpbGwgYmUgcHJvY2Vzc2VkIHRvbyBsYXRlIGFmdGVyIHRoZSBET00gaXMgbWFuaXB1bGF0ZWQsXG4gICAgICAgICAgICAgICAgICAgICAqIGxlYXZpbmcgYSBmbGFzaCBvZiBpbmNvcnJlY3RseS1wcm9qZWN0ZWQgY29udGVudC4gQnkgbWFudWFsbHkgZmx1c2hpbmcgdGhlc2Ugam9ic1xuICAgICAgICAgICAgICAgICAgICAgKiB3ZSBlbnN1cmUgdGhlcmUncyBubyBmbGFzaC5cbiAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgICAgIHN5bmMuZmx1c2hTeW5jLnByZVJlbmRlcigpO1xuICAgICAgICAgICAgICAgICAgICBzeW5jLmZsdXNoU3luYy5yZW5kZXIoKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICByZWFkKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICAgICAqIFNjaGVkdWxlIGEgY2FsbGJhY2sgYXQgdGhlIGVuZCBvZiB0aGUgZm9sbG93aW5nIGZyYW1lIHRvIGFzc2lnbiB0aGUgbGF0ZXN0IHByb2plY3Rpb25cbiAgICAgICAgICAgICAgICAgICAgICogYm94IHRvIHRoZSBwcmV2Vmlld3BvcnRCb3ggc25hcHNob3QuIE9uY2UgZ2xvYmFsIGJhdGNoaW5nIGlzIGluIHBsYWNlIHRoaXMgY291bGQgYmUgcnVuXG4gICAgICAgICAgICAgICAgICAgICAqIHN5bmNocm9ub3VzbHkuIEJ1dCBmb3Igbm93IGl0IGVuc3VyZXMgdGhhdCBpZiBhbnkgbmVzdGVkIGBBbmltYXRlU2hhcmVkTGF5b3V0YCB0b3AtbGV2ZWxcbiAgICAgICAgICAgICAgICAgICAgICogY2hpbGQgYXR0ZW1wdHMgdG8gY2FsY3VsYXRlIGl0cyBwcmV2aW91cyByZWxhdGl2ZSBwb3NpdGlvbiBhZ2FpbnN0IGEgcHJldlZpZXdwb3J0Qm94XG4gICAgICAgICAgICAgICAgICAgICAqIGl0IHdpbGwgYmUgYWdhaW5zdCBpdHMgbGF0ZXN0IHByb2plY3Rpb24gYm94IGluc3RlYWQsIGFzIHRoZSBzbmFwc2hvdCBpcyB1c2VsZXNzIGJleW9uZCB0aGlzXG4gICAgICAgICAgICAgICAgICAgICAqIHJlbmRlci5cbiAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgICAgIHN5bmNfX2RlZmF1bHRbJ2RlZmF1bHQnXS5wb3N0UmVuZGVyKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBvcmRlci5mb3JFYWNoKGFzc2lnblByb2plY3Rpb25Ub1NuYXBzaG90KTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHF1ZXVlLmNsZWFyKCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIC8vIFRPRE86IE5lZWQgdG8gZmluZCBhIGxheW91dC1zeW5jaHJvbm91cyB3YXkgb2YgZmx1c2hpbmcgdGhpc1xuICAgICAgICAgICAgZmx1c2hMYXlvdXQoKTtcbiAgICAgICAgfSxcbiAgICB9O1xufVxuZnVuY3Rpb24gYXNzaWduUHJvamVjdGlvblRvU25hcHNob3QoY2hpbGQpIHtcbiAgICBjaGlsZC5wcmV2Vmlld3BvcnRCb3ggPSBjaGlsZC5wcm9qZWN0aW9uLnRhcmdldDtcbn1cblxudmFyIFNoYXJlZExheW91dENvbnRleHQgPSBSZWFjdC5jcmVhdGVDb250ZXh0KGNyZWF0ZUJhdGNoZXIoKSk7XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG52YXIgRnJhbWVyVHJlZUxheW91dENvbnRleHQgPSBSZWFjdC5jcmVhdGVDb250ZXh0KGNyZWF0ZUJhdGNoZXIoKSk7XG5mdW5jdGlvbiBpc1NoYXJlZExheW91dChjb250ZXh0KSB7XG4gICAgcmV0dXJuICEhY29udGV4dC5mb3JjZVVwZGF0ZTtcbn1cblxuLyoqXG4gKiBUaGlzIGNvbXBvbmVudCBpcyByZXNwb25zaWJsZSBmb3Igc2NoZWR1bGluZyB0aGUgbWVhc3VyaW5nIG9mIHRoZSBtb3Rpb24gY29tcG9uZW50XG4gKi9cbnZhciBNZWFzdXJlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRzbGliLl9fZXh0ZW5kcyhNZWFzdXJlLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIE1lYXN1cmUoKSB7XG4gICAgICAgIHJldHVybiBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogSWYgdGhpcyBpcyBhIGNoaWxkIG9mIGEgU3luY0NvbnRleHQsIHJlZ2lzdGVyIHRoZSBWaXN1YWxFbGVtZW50IHdpdGggaXQgb24gbW91bnQuXG4gICAgICovXG4gICAgTWVhc3VyZS5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfYSA9IHRoaXMucHJvcHMsIHN5bmNMYXlvdXQgPSBfYS5zeW5jTGF5b3V0LCBmcmFtZXJTeW5jTGF5b3V0ID0gX2EuZnJhbWVyU3luY0xheW91dCwgdmlzdWFsRWxlbWVudCA9IF9hLnZpc3VhbEVsZW1lbnQ7XG4gICAgICAgIGlzU2hhcmVkTGF5b3V0KHN5bmNMYXlvdXQpICYmIHN5bmNMYXlvdXQucmVnaXN0ZXIodmlzdWFsRWxlbWVudCk7XG4gICAgICAgIGlzU2hhcmVkTGF5b3V0KGZyYW1lclN5bmNMYXlvdXQpICYmXG4gICAgICAgICAgICBmcmFtZXJTeW5jTGF5b3V0LnJlZ2lzdGVyKHZpc3VhbEVsZW1lbnQpO1xuICAgICAgICB2aXN1YWxFbGVtZW50Lm9uVW5tb3VudChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoaXNTaGFyZWRMYXlvdXQoc3luY0xheW91dCkpIHtcbiAgICAgICAgICAgICAgICBzeW5jTGF5b3V0LnJlbW92ZSh2aXN1YWxFbGVtZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpc1NoYXJlZExheW91dChmcmFtZXJTeW5jTGF5b3V0KSkge1xuICAgICAgICAgICAgICAgIGZyYW1lclN5bmNMYXlvdXQucmVtb3ZlKHZpc3VhbEVsZW1lbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIElmIHRoaXMgaXMgYSBjaGlsZCBvZiBhIFN5bmNDb250ZXh0LCBub3RpZnkgaXQgdGhhdCBpdCBuZWVkcyB0byByZS1yZW5kZXIuIEl0IHdpbGwgdGhlblxuICAgICAqIGhhbmRsZSB0aGUgc25hcHNob3R0aW5nLlxuICAgICAqXG4gICAgICogSWYgaXQgaXMgc3RhbmQtYWxvbmUgY29tcG9uZW50LCBhZGQgaXQgdG8gdGhlIGJhdGNoZXIuXG4gICAgICovXG4gICAgTWVhc3VyZS5wcm90b3R5cGUuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfYSA9IHRoaXMucHJvcHMsIHN5bmNMYXlvdXQgPSBfYS5zeW5jTGF5b3V0LCB2aXN1YWxFbGVtZW50ID0gX2EudmlzdWFsRWxlbWVudDtcbiAgICAgICAgaWYgKGlzU2hhcmVkTGF5b3V0KHN5bmNMYXlvdXQpKSB7XG4gICAgICAgICAgICBzeW5jTGF5b3V0LnN5bmNVcGRhdGUoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHNuYXBzaG90Vmlld3BvcnRCb3godmlzdWFsRWxlbWVudCk7XG4gICAgICAgICAgICBzeW5jTGF5b3V0LmFkZCh2aXN1YWxFbGVtZW50KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9O1xuICAgIE1lYXN1cmUucHJvdG90eXBlLmNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHN5bmNMYXlvdXQgPSB0aGlzLnByb3BzLnN5bmNMYXlvdXQ7XG4gICAgICAgIGlmICghaXNTaGFyZWRMYXlvdXQoc3luY0xheW91dCkpXG4gICAgICAgICAgICBzeW5jTGF5b3V0LmZsdXNoKCk7XG4gICAgfTtcbiAgICBNZWFzdXJlLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH07XG4gICAgcmV0dXJuIE1lYXN1cmU7XG59KFJlYWN0X19kZWZhdWx0WydkZWZhdWx0J10uQ29tcG9uZW50KSk7XG5mdW5jdGlvbiBNZWFzdXJlQ29udGV4dFByb3ZpZGVyKHByb3BzKSB7XG4gICAgdmFyIHN5bmNMYXlvdXQgPSBSZWFjdC51c2VDb250ZXh0KFNoYXJlZExheW91dENvbnRleHQpO1xuICAgIHZhciBmcmFtZXJTeW5jTGF5b3V0ID0gUmVhY3QudXNlQ29udGV4dChGcmFtZXJUcmVlTGF5b3V0Q29udGV4dCk7XG4gICAgcmV0dXJuIChSZWFjdF9fZGVmYXVsdFsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoTWVhc3VyZSwgdHNsaWIuX19hc3NpZ24oe30sIHByb3BzLCB7IHN5bmNMYXlvdXQ6IHN5bmNMYXlvdXQsIGZyYW1lclN5bmNMYXlvdXQ6IGZyYW1lclN5bmNMYXlvdXQgfSkpKTtcbn1cblxudmFyIGxheW91dEFuaW1hdGlvbnMgPSB7XG4gICAgbWVhc3VyZUxheW91dDogTWVhc3VyZUNvbnRleHRQcm92aWRlcixcbiAgICBsYXlvdXRBbmltYXRpb246IEFuaW1hdGVMYXlvdXRDb250ZXh0UHJvdmlkZXIsXG59O1xuXG52YXIgY3JlYXRlUHJvamVjdGlvblN0YXRlID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gKHtcbiAgICBpc0VuYWJsZWQ6IGZhbHNlLFxuICAgIGlzSHlkcmF0ZWQ6IGZhbHNlLFxuICAgIGlzVGFyZ2V0TG9ja2VkOiBmYWxzZSxcbiAgICB0YXJnZXQ6IGF4aXNCb3goKSxcbiAgICB0YXJnZXRGaW5hbDogYXhpc0JveCgpLFxufSk7IH07XG5mdW5jdGlvbiBjcmVhdGVMYXlvdXRTdGF0ZSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBpc0h5ZHJhdGVkOiBmYWxzZSxcbiAgICAgICAgbGF5b3V0OiBheGlzQm94KCksXG4gICAgICAgIGxheW91dENvcnJlY3RlZDogYXhpc0JveCgpLFxuICAgICAgICB0cmVlU2NhbGU6IHsgeDogMSwgeTogMSB9LFxuICAgICAgICBkZWx0YTogZGVsdGEoKSxcbiAgICAgICAgZGVsdGFGaW5hbDogZGVsdGEoKSxcbiAgICAgICAgZGVsdGFUcmFuc2Zvcm06IFwiXCIsXG4gICAgfTtcbn1cbnZhciB6ZXJvTGF5b3V0ID0gY3JlYXRlTGF5b3V0U3RhdGUoKTtcblxuLyoqXG4gKiBCdWlsZCBhIHRyYW5zZm9ybSBzdHlsZSB0aGF0IHRha2VzIGEgY2FsY3VsYXRlZCBkZWx0YSBiZXR3ZWVuIHRoZSBlbGVtZW50J3MgY3VycmVudFxuICogc3BhY2Ugb24gc2NyZWVuIGFuZCBwcm9qZWN0cyBpdCBpbnRvIHRoZSBkZXNpcmVkIHNwYWNlLlxuICovXG5mdW5jdGlvbiBidWlsZExheW91dFByb2plY3Rpb25UcmFuc2Zvcm0oX2EsIHRyZWVTY2FsZSwgbGF0ZXN0VHJhbnNmb3JtKSB7XG4gICAgdmFyIHggPSBfYS54LCB5ID0gX2EueTtcbiAgICAvKipcbiAgICAgKiBUaGUgdHJhbnNsYXRpb25zIHdlIHVzZSB0byBjYWxjdWxhdGUgYXJlIGFsd2F5cyByZWxhdGl2ZSB0byB0aGUgdmlld3BvcnQgY29vcmRpbmF0ZSBzcGFjZS5cbiAgICAgKiBCdXQgd2hlbiB3ZSBhcHBseSBzY2FsZXMsIHdlIGFsc28gc2NhbGUgdGhlIGNvb3JkaW5hdGUgc3BhY2Ugb2YgYW4gZWxlbWVudCBhbmQgaXRzIGNoaWxkcmVuLlxuICAgICAqIEZvciBpbnN0YW5jZSBpZiB3ZSBoYXZlIGEgdHJlZVNjYWxlICh0aGUgY3VsbWluYXRpb24gb2YgYWxsIHBhcmVudCBzY2FsZXMpIG9mIDAuNSBhbmQgd2UgbmVlZFxuICAgICAqIHRvIG1vdmUgYW4gZWxlbWVudCAxMDAgcGl4ZWxzLCB3ZSBhY3R1YWxseSBuZWVkIHRvIG1vdmUgaXQgMjAwIGluIHdpdGhpbiB0aGF0IHNjYWxlZCBzcGFjZS5cbiAgICAgKi9cbiAgICB2YXIgeFRyYW5zbGF0ZSA9IHgudHJhbnNsYXRlIC8gdHJlZVNjYWxlLng7XG4gICAgdmFyIHlUcmFuc2xhdGUgPSB5LnRyYW5zbGF0ZSAvIHRyZWVTY2FsZS55O1xuICAgIHZhciB0cmFuc2Zvcm0gPSBcInRyYW5zbGF0ZTNkKFwiICsgeFRyYW5zbGF0ZSArIFwicHgsIFwiICsgeVRyYW5zbGF0ZSArIFwicHgsIDApIFwiO1xuICAgIGlmIChsYXRlc3RUcmFuc2Zvcm0pIHtcbiAgICAgICAgdmFyIHJvdGF0ZSA9IGxhdGVzdFRyYW5zZm9ybS5yb3RhdGUsIHJvdGF0ZVggPSBsYXRlc3RUcmFuc2Zvcm0ucm90YXRlWCwgcm90YXRlWSA9IGxhdGVzdFRyYW5zZm9ybS5yb3RhdGVZO1xuICAgICAgICBpZiAocm90YXRlKVxuICAgICAgICAgICAgdHJhbnNmb3JtICs9IFwicm90YXRlKFwiICsgcm90YXRlICsgXCIpIFwiO1xuICAgICAgICBpZiAocm90YXRlWClcbiAgICAgICAgICAgIHRyYW5zZm9ybSArPSBcInJvdGF0ZVgoXCIgKyByb3RhdGVYICsgXCIpIFwiO1xuICAgICAgICBpZiAocm90YXRlWSlcbiAgICAgICAgICAgIHRyYW5zZm9ybSArPSBcInJvdGF0ZVkoXCIgKyByb3RhdGVZICsgXCIpIFwiO1xuICAgIH1cbiAgICB0cmFuc2Zvcm0gKz0gXCJzY2FsZShcIiArIHguc2NhbGUgKyBcIiwgXCIgKyB5LnNjYWxlICsgXCIpXCI7XG4gICAgcmV0dXJuICFsYXRlc3RUcmFuc2Zvcm0gJiYgdHJhbnNmb3JtID09PSBpZGVudGl0eVByb2plY3Rpb24gPyBcIlwiIDogdHJhbnNmb3JtO1xufVxuLyoqXG4gKiBUYWtlIHRoZSBjYWxjdWxhdGVkIGRlbHRhIG9yaWdpbiBhbmQgYXBwbHkgaXQgYXMgYSB0cmFuc2Zvcm0gc3RyaW5nLlxuICovXG5mdW5jdGlvbiBidWlsZExheW91dFByb2plY3Rpb25UcmFuc2Zvcm1PcmlnaW4oX2EpIHtcbiAgICB2YXIgZGVsdGFGaW5hbCA9IF9hLmRlbHRhRmluYWw7XG4gICAgcmV0dXJuIGRlbHRhRmluYWwueC5vcmlnaW4gKiAxMDAgKyBcIiUgXCIgKyBkZWx0YUZpbmFsLnkub3JpZ2luICogMTAwICsgXCIlIDBcIjtcbn1cbnZhciBpZGVudGl0eVByb2plY3Rpb24gPSBidWlsZExheW91dFByb2plY3Rpb25UcmFuc2Zvcm0oemVyb0xheW91dC5kZWx0YSwgemVyb0xheW91dC50cmVlU2NhbGUsIHsgeDogMSwgeTogMSB9KTtcblxudmFyIG5hbWVzID0gW1xuICAgIFwiTGF5b3V0TWVhc3VyZVwiLFxuICAgIFwiQmVmb3JlTGF5b3V0TWVhc3VyZVwiLFxuICAgIFwiTGF5b3V0VXBkYXRlXCIsXG4gICAgXCJWaWV3cG9ydEJveFVwZGF0ZVwiLFxuICAgIFwiVXBkYXRlXCIsXG4gICAgXCJSZW5kZXJcIixcbiAgICBcIkFuaW1hdGlvbkNvbXBsZXRlXCIsXG4gICAgXCJMYXlvdXRBbmltYXRpb25Db21wbGV0ZVwiLFxuICAgIFwiQW5pbWF0aW9uU3RhcnRcIixcbiAgICBcIlNldEF4aXNUYXJnZXRcIixcbiAgICBcIlVubW91bnRcIixcbl07XG5mdW5jdGlvbiBjcmVhdGVMaWZlY3ljbGVzKCkge1xuICAgIHZhciBtYW5hZ2VycyA9IG5hbWVzLm1hcChmdW5jdGlvbiAoKSB7IHJldHVybiBuZXcgU3Vic2NyaXB0aW9uTWFuYWdlcigpOyB9KTtcbiAgICB2YXIgcHJvcFN1YnNjcmlwdGlvbnMgPSB7fTtcbiAgICB2YXIgbGlmZWN5Y2xlcyA9IHtcbiAgICAgICAgY2xlYXJBbGxMaXN0ZW5lcnM6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG1hbmFnZXJzLmZvckVhY2goZnVuY3Rpb24gKG1hbmFnZXIpIHsgcmV0dXJuIG1hbmFnZXIuY2xlYXIoKTsgfSk7IH0sXG4gICAgICAgIHVwZGF0ZVByb3BMaXN0ZW5lcnM6IGZ1bmN0aW9uIChwcm9wcykge1xuICAgICAgICAgICAgcmV0dXJuIG5hbWVzLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICAgICAgKF9hID0gcHJvcFN1YnNjcmlwdGlvbnNbbmFtZV0pID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5jYWxsKHByb3BTdWJzY3JpcHRpb25zKTtcbiAgICAgICAgICAgICAgICB2YXIgb24gPSBcIm9uXCIgKyBuYW1lO1xuICAgICAgICAgICAgICAgIHZhciBwcm9wTGlzdGVuZXIgPSBwcm9wc1tvbl07XG4gICAgICAgICAgICAgICAgaWYgKHByb3BMaXN0ZW5lcikge1xuICAgICAgICAgICAgICAgICAgICBwcm9wU3Vic2NyaXB0aW9uc1tuYW1lXSA9IGxpZmVjeWNsZXNbb25dKHByb3BMaXN0ZW5lcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgfTtcbiAgICBtYW5hZ2Vycy5mb3JFYWNoKGZ1bmN0aW9uIChtYW5hZ2VyLCBpKSB7XG4gICAgICAgIGxpZmVjeWNsZXNbXCJvblwiICsgbmFtZXNbaV1dID0gZnVuY3Rpb24gKGhhbmRsZXIpIHsgcmV0dXJuIG1hbmFnZXIuYWRkKGhhbmRsZXIpOyB9O1xuICAgICAgICBsaWZlY3ljbGVzW1wibm90aWZ5XCIgKyBuYW1lc1tpXV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgYXJncyA9IFtdO1xuICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbWFuYWdlci5ub3RpZnkuYXBwbHkobWFuYWdlciwgdHNsaWIuX19zcHJlYWRBcnJheShbXSwgdHNsaWIuX19yZWFkKGFyZ3MpKSk7XG4gICAgICAgIH07XG4gICAgfSk7XG4gICAgcmV0dXJuIGxpZmVjeWNsZXM7XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZU1vdGlvblZhbHVlc0Zyb21Qcm9wcyhlbGVtZW50LCBuZXh0LCBwcmV2KSB7XG4gICAgdmFyIF9hO1xuICAgIGZvciAodmFyIGtleSBpbiBuZXh0KSB7XG4gICAgICAgIHZhciBuZXh0VmFsdWUgPSBuZXh0W2tleV07XG4gICAgICAgIHZhciBwcmV2VmFsdWUgPSBwcmV2W2tleV07XG4gICAgICAgIGlmIChpc01vdGlvblZhbHVlKG5leHRWYWx1ZSkpIHtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogSWYgdGhpcyBpcyBhIG1vdGlvbiB2YWx1ZSBmb3VuZCBpbiBwcm9wcyBvciBzdHlsZSwgd2Ugd2FudCB0byBhZGQgaXRcbiAgICAgICAgICAgICAqIHRvIG91ciB2aXN1YWwgZWxlbWVudCdzIG1vdGlvbiB2YWx1ZSBtYXAuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGVsZW1lbnQuYWRkVmFsdWUoa2V5LCBuZXh0VmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGlzTW90aW9uVmFsdWUocHJldlZhbHVlKSkge1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBJZiB3ZSdyZSBzd2FwcGluZyB0byBhIG5ldyBtb3Rpb24gdmFsdWUsIGNyZWF0ZSBhIG5ldyBtb3Rpb24gdmFsdWVcbiAgICAgICAgICAgICAqIGZyb20gdGhhdFxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBlbGVtZW50LmFkZFZhbHVlKGtleSwgbW90aW9uVmFsdWUobmV4dFZhbHVlKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAocHJldlZhbHVlICE9PSBuZXh0VmFsdWUpIHtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogSWYgdGhpcyBpcyBhIGZsYXQgdmFsdWUgdGhhdCBoYXMgY2hhbmdlZCwgdXBkYXRlIHRoZSBtb3Rpb24gdmFsdWVcbiAgICAgICAgICAgICAqIG9yIGNyZWF0ZSBvbmUgaWYgaXQgZG9lc24ndCBleGlzdC4gV2Ugb25seSB3YW50IHRvIGRvIHRoaXMgaWYgd2UncmVcbiAgICAgICAgICAgICAqIG5vdCBoYW5kbGluZyB0aGUgdmFsdWUgd2l0aCBvdXIgYW5pbWF0aW9uIHN0YXRlLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBpZiAoZWxlbWVudC5oYXNWYWx1ZShrZXkpKSB7XG4gICAgICAgICAgICAgICAgdmFyIGV4aXN0aW5nVmFsdWUgPSBlbGVtZW50LmdldFZhbHVlKGtleSk7XG4gICAgICAgICAgICAgICAgLy8gVE9ETzogT25seSB1cGRhdGUgdmFsdWVzIHRoYXQgYXJlbid0IGJlaW5nIGFuaW1hdGVkIG9yIGV2ZW4gbG9va2VkIGF0XG4gICAgICAgICAgICAgICAgIWV4aXN0aW5nVmFsdWUuaGFzQW5pbWF0ZWQgJiYgZXhpc3RpbmdWYWx1ZS5zZXQobmV4dFZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGVsZW1lbnQuYWRkVmFsdWUoa2V5LCBtb3Rpb25WYWx1ZSgoX2EgPSBlbGVtZW50LmdldFN0YXRpY1ZhbHVlKGtleSkpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IG5leHRWYWx1ZSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIC8vIEhhbmRsZSByZW1vdmVkIHZhbHVlc1xuICAgIGZvciAodmFyIGtleSBpbiBwcmV2KSB7XG4gICAgICAgIGlmIChuZXh0W2tleV0gPT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIGVsZW1lbnQucmVtb3ZlVmFsdWUoa2V5KTtcbiAgICB9XG4gICAgcmV0dXJuIG5leHQ7XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUxheW91dERlbHRhcyhfYSwgX2IsIHRyZWVQYXRoLCB0cmFuc2Zvcm1PcmlnaW4pIHtcbiAgICB2YXIgZGVsdGEgPSBfYS5kZWx0YSwgbGF5b3V0ID0gX2EubGF5b3V0LCBsYXlvdXRDb3JyZWN0ZWQgPSBfYS5sYXlvdXRDb3JyZWN0ZWQsIHRyZWVTY2FsZSA9IF9hLnRyZWVTY2FsZTtcbiAgICB2YXIgdGFyZ2V0ID0gX2IudGFyZ2V0O1xuICAgIC8qKlxuICAgICAqIFJlc2V0IHRoZSBjb3JyZWN0ZWQgYm94IHdpdGggdGhlIGxhdGVzdCB2YWx1ZXMgZnJvbSBib3gsIGFzIHdlJ3JlIHRoZW4gZ29pbmdcbiAgICAgKiB0byBwZXJmb3JtIG11dGF0aXZlIG9wZXJhdGlvbnMgb24gaXQuXG4gICAgICovXG4gICAgcmVzZXRCb3gobGF5b3V0Q29ycmVjdGVkLCBsYXlvdXQpO1xuICAgIC8qKlxuICAgICAqIEFwcGx5IGFsbCB0aGUgcGFyZW50IGRlbHRhcyB0byB0aGlzIGJveCB0byBwcm9kdWNlIHRoZSBjb3JyZWN0ZWQgYm94LiBUaGlzXG4gICAgICogaXMgdGhlIGxheW91dCBib3gsIGFzIGl0IHdpbGwgYXBwZWFyIG9uIHNjcmVlbiBhcyBhIHJlc3VsdCBvZiB0aGUgdHJhbnNmb3JtcyBvZiBpdHMgcGFyZW50cy5cbiAgICAgKi9cbiAgICBhcHBseVRyZWVEZWx0YXMobGF5b3V0Q29ycmVjdGVkLCB0cmVlU2NhbGUsIHRyZWVQYXRoKTtcbiAgICAvKipcbiAgICAgKiBVcGRhdGUgdGhlIGRlbHRhIGJldHdlZW4gdGhlIGNvcnJlY3RlZCBib3ggYW5kIHRoZSB0YXJnZXQgYm94IGJlZm9yZSB1c2VyLXNldCB0cmFuc2Zvcm1zIHdlcmUgYXBwbGllZC5cbiAgICAgKiBUaGlzIHdpbGwgYWxsb3cgdXMgdG8gY2FsY3VsYXRlIHRoZSBjb3JyZWN0ZWQgYm9yZGVyUmFkaXVzIGFuZCBib3hTaGFkb3cgdG8gY29tcGVuc2F0ZVxuICAgICAqIGZvciBvdXIgbGF5b3V0IHJlcHJvamVjdGlvbiwgYnV0IHN0aWxsIGFsbG93IHRoZW0gdG8gYmUgc2NhbGVkIGNvcnJlY3RseSBieSB0aGUgdXNlci5cbiAgICAgKiBJdCBtaWdodCBiZSB0aGF0IHRvIHNpbXBsaWZ5IHRoaXMgd2UgbWF5IHdhbnQgdG8gYWNjZXB0IHRoYXQgdXNlci1zZXQgc2NhbGUgaXMgYWxzbyBjb3JyZWN0ZWRcbiAgICAgKiBhbmQgd2Ugd291bGRuJ3QgaGF2ZSB0byBrZWVwIGFuZCBjYWxjIGJvdGggZGVsdGFzLCBPUiB3ZSBjb3VsZCBzdXBwb3J0IGEgdXNlciBzZXR0aW5nXG4gICAgICogdG8gYWxsb3cgcGVvcGxlIHRvIGNob29zZSB3aGV0aGVyIHRoZXNlIHN0eWxlcyBhcmUgY29ycmVjdGVkIGJhc2VkIG9uIGp1c3QgdGhlXG4gICAgICogbGF5b3V0IHJlcHJvamVjdGlvbiBvciB0aGUgZmluYWwgYm91bmRpbmcgYm94LlxuICAgICAqL1xuICAgIHVwZGF0ZUJveERlbHRhKGRlbHRhLCBsYXlvdXRDb3JyZWN0ZWQsIHRhcmdldCwgdHJhbnNmb3JtT3JpZ2luKTtcbn1cblxudmFyIEZsYXRUcmVlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEZsYXRUcmVlKCkge1xuICAgICAgICB0aGlzLmNoaWxkcmVuID0gW107XG4gICAgICAgIHRoaXMuaXNEaXJ0eSA9IGZhbHNlO1xuICAgIH1cbiAgICBGbGF0VHJlZS5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgICAgIGFkZFVuaXF1ZUl0ZW0odGhpcy5jaGlsZHJlbiwgY2hpbGQpO1xuICAgICAgICB0aGlzLmlzRGlydHkgPSB0cnVlO1xuICAgIH07XG4gICAgRmxhdFRyZWUucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgICByZW1vdmVJdGVtKHRoaXMuY2hpbGRyZW4sIGNoaWxkKTtcbiAgICAgICAgdGhpcy5pc0RpcnR5ID0gdHJ1ZTtcbiAgICB9O1xuICAgIEZsYXRUcmVlLnByb3RvdHlwZS5mb3JFYWNoID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgICAgIHRoaXMuaXNEaXJ0eSAmJiB0aGlzLmNoaWxkcmVuLnNvcnQoY29tcGFyZUJ5RGVwdGgpO1xuICAgICAgICB0aGlzLmlzRGlydHkgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5jaGlsZHJlbi5mb3JFYWNoKGNhbGxiYWNrKTtcbiAgICB9O1xuICAgIHJldHVybiBGbGF0VHJlZTtcbn0oKSk7XG5cbmZ1bmN0aW9uIHNldEN1cnJlbnRWaWV3cG9ydEJveCh2aXN1YWxFbGVtZW50KSB7XG4gICAgdmFyIHByb2plY3Rpb25QYXJlbnQgPSB2aXN1YWxFbGVtZW50LmdldFByb2plY3Rpb25QYXJlbnQoKTtcbiAgICBpZiAoIXByb2plY3Rpb25QYXJlbnQpIHtcbiAgICAgICAgdmlzdWFsRWxlbWVudC5yZWJhc2VQcm9qZWN0aW9uVGFyZ2V0KCk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIHJlbGF0aXZlT2Zmc2V0ID0gY2FsY1JlbGF0aXZlT2Zmc2V0KHByb2plY3Rpb25QYXJlbnQuZ2V0TGF5b3V0U3RhdGUoKS5sYXlvdXQsIHZpc3VhbEVsZW1lbnQuZ2V0TGF5b3V0U3RhdGUoKS5sYXlvdXQpO1xuICAgIGVhY2hBeGlzKGZ1bmN0aW9uIChheGlzKSB7XG4gICAgICAgIHZpc3VhbEVsZW1lbnQuc2V0UHJvamVjdGlvblRhcmdldEF4aXMoYXhpcywgcmVsYXRpdmVPZmZzZXRbYXhpc10ubWluLCByZWxhdGl2ZU9mZnNldFtheGlzXS5tYXgsIHRydWUpO1xuICAgIH0pO1xufVxuXG52YXIgdmlzdWFsRWxlbWVudCA9IGZ1bmN0aW9uIChfYSkge1xuICAgIHZhciBfYiA9IF9hLnRyZWVUeXBlLCB0cmVlVHlwZSA9IF9iID09PSB2b2lkIDAgPyBcIlwiIDogX2IsIGJ1aWxkID0gX2EuYnVpbGQsIGdldEJhc2VUYXJnZXQgPSBfYS5nZXRCYXNlVGFyZ2V0LCBtYWtlVGFyZ2V0QW5pbWF0YWJsZSA9IF9hLm1ha2VUYXJnZXRBbmltYXRhYmxlLCBtZWFzdXJlVmlld3BvcnRCb3ggPSBfYS5tZWFzdXJlVmlld3BvcnRCb3gsIHJlbmRlckluc3RhbmNlID0gX2EucmVuZGVyLCByZWFkVmFsdWVGcm9tSW5zdGFuY2UgPSBfYS5yZWFkVmFsdWVGcm9tSW5zdGFuY2UsIHJlc2V0VHJhbnNmb3JtID0gX2EucmVzZXRUcmFuc2Zvcm0sIHJlc3RvcmVUcmFuc2Zvcm0gPSBfYS5yZXN0b3JlVHJhbnNmb3JtLCByZW1vdmVWYWx1ZUZyb21SZW5kZXJTdGF0ZSA9IF9hLnJlbW92ZVZhbHVlRnJvbVJlbmRlclN0YXRlLCBzb3J0Tm9kZVBvc2l0aW9uID0gX2Euc29ydE5vZGVQb3NpdGlvbiwgc2NyYXBlTW90aW9uVmFsdWVzRnJvbVByb3BzID0gX2Euc2NyYXBlTW90aW9uVmFsdWVzRnJvbVByb3BzO1xuICAgIHJldHVybiBmdW5jdGlvbiAoX2EsIG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIHBhcmVudCA9IF9hLnBhcmVudCwgcHJvcHMgPSBfYS5wcm9wcywgcHJlc2VuY2VJZCA9IF9hLnByZXNlbmNlSWQsIGJsb2NrSW5pdGlhbEFuaW1hdGlvbiA9IF9hLmJsb2NrSW5pdGlhbEFuaW1hdGlvbiwgdmlzdWFsU3RhdGUgPSBfYS52aXN1YWxTdGF0ZTtcbiAgICAgICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkgeyBvcHRpb25zID0ge307IH1cbiAgICAgICAgdmFyIGxhdGVzdFZhbHVlcyA9IHZpc3VhbFN0YXRlLmxhdGVzdFZhbHVlcywgcmVuZGVyU3RhdGUgPSB2aXN1YWxTdGF0ZS5yZW5kZXJTdGF0ZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBpbnN0YW5jZSBvZiB0aGUgcmVuZGVyLXNwZWNpZmljIG5vZGUgdGhhdCB3aWxsIGJlIGh5ZHJhdGVkIGJ5IHRoZVxuICAgICAgICAgKiBleHBvc2VkIFJlYWN0IHJlZi4gU28gZm9yIGV4YW1wbGUsIHRoaXMgdmlzdWFsIGVsZW1lbnQgY2FuIGhvc3QgYVxuICAgICAgICAgKiBIVE1MRWxlbWVudCwgcGxhaW4gb2JqZWN0LCBvciBUaHJlZS5qcyBvYmplY3QuIFRoZSBmdW5jdGlvbnMgcHJvdmlkZWRcbiAgICAgICAgICogaW4gVmlzdWFsRWxlbWVudENvbmZpZyBhbGxvdyB1cyB0byBpbnRlcmZhY2Ugd2l0aCB0aGlzIGluc3RhbmNlLlxuICAgICAgICAgKi9cbiAgICAgICAgdmFyIGluc3RhbmNlO1xuICAgICAgICAvKipcbiAgICAgICAgICogTWFuYWdlcyB0aGUgc3Vic2NyaXB0aW9ucyBmb3IgYSB2aXN1YWwgZWxlbWVudCdzIGxpZmVjeWNsZSwgZm9yIGluc3RhbmNlXG4gICAgICAgICAqIG9uUmVuZGVyIGFuZCBvblZpZXdwb3J0Qm94VXBkYXRlLlxuICAgICAgICAgKi9cbiAgICAgICAgdmFyIGxpZmVjeWNsZXMgPSBjcmVhdGVMaWZlY3ljbGVzKCk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKlxuICAgICAgICAgKi9cbiAgICAgICAgdmFyIHByb2plY3Rpb24gPSBjcmVhdGVQcm9qZWN0aW9uU3RhdGUoKTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEEgcmVmZXJlbmNlIHRvIHRoZSBuZWFyZXN0IHByb2plY3RpbmcgcGFyZW50LiBUaGlzIGlzIGVpdGhlclxuICAgICAgICAgKiB1bmRlZmluZWQgaWYgd2UgaGF2ZW4ndCBsb29rZWQgZm9yIHRoZSBuZWFyZXN0IHByb2plY3RpbmcgcGFyZW50LFxuICAgICAgICAgKiBmYWxzZSBpZiB0aGVyZSBpcyBubyBwYXJlbnQgcGVyZm9ybWluZyBsYXlvdXQgcHJvamVjdGlvbiwgb3IgYSByZWZlcmVuY2VcbiAgICAgICAgICogdG8gdGhlIHByb2plY3RpbmcgcGFyZW50LlxuICAgICAgICAgKi9cbiAgICAgICAgdmFyIHByb2plY3Rpb25QYXJlbnQ7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGlzIGlzIGEgcmVmZXJlbmNlIHRvIHRoZSB2aXN1YWwgc3RhdGUgb2YgdGhlIFwibGVhZFwiIHZpc3VhbCBlbGVtZW50LlxuICAgICAgICAgKiBVc3VhbGx5LCB0aGlzIHdpbGwgYmUgdGhpcyB2aXN1YWwgZWxlbWVudC4gQnV0IGlmIGl0IHNoYXJlcyBhIGxheW91dElkXG4gICAgICAgICAqIHdpdGggb3RoZXIgdmlzdWFsIGVsZW1lbnRzLCBvbmx5IG9uZSBvZiB0aGVtIHdpbGwgYmUgZGVzaWduYXRlZCBsZWFkIGJ5XG4gICAgICAgICAqIEFuaW1hdGVTaGFyZWRMYXlvdXQuIEFsbCB0aGUgb3RoZXIgdmlzdWFsIGVsZW1lbnRzIHdpbGwgdGFrZSBvbiB0aGUgdmlzdWFsXG4gICAgICAgICAqIGFwcGVhcmFuY2Ugb2YgdGhlIGxlYWQgd2hpbGUgdGhleSBjcm9zc2ZhZGUgdG8gaXQuXG4gICAgICAgICAqL1xuICAgICAgICB2YXIgbGVhZFByb2plY3Rpb24gPSBwcm9qZWN0aW9uO1xuICAgICAgICB2YXIgbGVhZExhdGVzdFZhbHVlcyA9IGxhdGVzdFZhbHVlcztcbiAgICAgICAgdmFyIHVuc3Vic2NyaWJlRnJvbUxlYWRWaXN1YWxFbGVtZW50O1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIGxhdGVzdCBsYXlvdXQgbWVhc3VyZW1lbnRzIGFuZCBjYWxjdWxhdGVkIHByb2plY3Rpb25zLiBUaGlzXG4gICAgICAgICAqIGlzIHNlcGVyYXRlIGZyb20gdGhlIHRhcmdldCBwcm9qZWN0aW9uIGRhdGEgaW4gdmlzdWFsU3RhdGUgYXNcbiAgICAgICAgICogbWFueSB2aXN1YWwgZWxlbWVudHMgbWlnaHQgcG9pbnQgdG8gdGhlIHNhbWUgcGllY2Ugb2YgdmlzdWFsU3RhdGUgYXNcbiAgICAgICAgICogYSB0YXJnZXQsIHdoZXJlYXMgdGhleSBtaWdodCBlYWNoIGhhdmUgZGlmZmVyZW50IGxheW91dHMgYW5kIHRodXNcbiAgICAgICAgICogcHJvamVjdGlvbiBjYWxjdWxhdGlvbnMgbmVlZGVkIHRvIHByb2plY3QgaW50byB0aGUgc2FtZSB2aWV3cG9ydCBib3guXG4gICAgICAgICAqL1xuICAgICAgICB2YXIgbGF5b3V0U3RhdGUgPSBjcmVhdGVMYXlvdXRTdGF0ZSgpO1xuICAgICAgICAvKipcbiAgICAgICAgICpcbiAgICAgICAgICovXG4gICAgICAgIHZhciBjcm9zc2ZhZGVyO1xuICAgICAgICAvKipcbiAgICAgICAgICogS2VlcCB0cmFjayBvZiB3aGV0aGVyIHRoZSB2aWV3cG9ydCBib3ggaGFzIGJlZW4gdXBkYXRlZCBzaW5jZSB0aGVcbiAgICAgICAgICogbGFzdCB0aW1lIHRoZSBsYXlvdXQgcHJvamVjdGlvbiB3YXMgcmUtY2FsY3VsYXRlZC5cbiAgICAgICAgICovXG4gICAgICAgIHZhciBoYXNWaWV3cG9ydEJveFVwZGF0ZWQgPSBmYWxzZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEEgbWFwIG9mIGFsbCBtb3Rpb24gdmFsdWVzIGF0dGFjaGVkIHRvIHRoaXMgdmlzdWFsIGVsZW1lbnQuIE1vdGlvblxuICAgICAgICAgKiB2YWx1ZXMgYXJlIHNvdXJjZSBvZiB0cnV0aCBmb3IgYW55IGdpdmVuIGFuaW1hdGVkIHZhbHVlLiBBIG1vdGlvblxuICAgICAgICAgKiB2YWx1ZSBtaWdodCBiZSBwcm92aWRlZCBleHRlcm5hbGx5IGJ5IHRoZSBjb21wb25lbnQgdmlhIHByb3BzLlxuICAgICAgICAgKi9cbiAgICAgICAgdmFyIHZhbHVlcyA9IG5ldyBNYXAoKTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEEgbWFwIG9mIGV2ZXJ5IHN1YnNjcmlwdGlvbiB0aGF0IGJpbmRzIHRoZSBwcm92aWRlZCBvciBnZW5lcmF0ZWRcbiAgICAgICAgICogbW90aW9uIHZhbHVlcyBvbkNoYW5nZSBsaXN0ZW5lcnMgdG8gdGhpcyB2aXN1YWwgZWxlbWVudC5cbiAgICAgICAgICovXG4gICAgICAgIHZhciB2YWx1ZVN1YnNjcmlwdGlvbnMgPSBuZXcgTWFwKCk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBIHJlZmVyZW5jZSB0byB0aGUgcHJldmlvdXNseS1wcm92aWRlZCBtb3Rpb24gdmFsdWVzIGFzIHJldHVybmVkXG4gICAgICAgICAqIGZyb20gc2NyYXBlTW90aW9uVmFsdWVzRnJvbVByb3BzLiBXZSB1c2UgdGhlIGtleXMgaW4gaGVyZSB0byBkZXRlcm1pbmVcbiAgICAgICAgICogaWYgYW55IG1vdGlvbiB2YWx1ZXMgbmVlZCB0byBiZSByZW1vdmVkIGFmdGVyIHByb3BzIGFyZSB1cGRhdGVkLlxuICAgICAgICAgKi9cbiAgICAgICAgdmFyIHByZXZNb3Rpb25WYWx1ZXMgPSB7fTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIHgveSBtb3Rpb24gdmFsdWVzIHRoYXQgdHJhY2sgdGhlIHByb2dyZXNzIG9mIGluaXRpYXRlZCBsYXlvdXRcbiAgICAgICAgICogYW5pbWF0aW9ucy5cbiAgICAgICAgICpcbiAgICAgICAgICogVE9ETzogVGFyZ2V0IGZvciByZW1vdmFsXG4gICAgICAgICAqL1xuICAgICAgICB2YXIgcHJvamVjdGlvblRhcmdldFByb2dyZXNzO1xuICAgICAgICAvKipcbiAgICAgICAgICogV2hlbiB2YWx1ZXMgYXJlIHJlbW92ZWQgZnJvbSBhbGwgYW5pbWF0aW9uIHByb3BzIHdlIG5lZWQgdG8gc2VhcmNoXG4gICAgICAgICAqIGZvciBhIGZhbGxiYWNrIHZhbHVlIHRvIGFuaW1hdGUgdG8uIFRoZXNlIHZhbHVlcyBhcmUgdHJhY2tlZCBpbiBiYXNlVGFyZ2V0LlxuICAgICAgICAgKi9cbiAgICAgICAgdmFyIGJhc2VUYXJnZXQgPSB0c2xpYi5fX2Fzc2lnbih7fSwgbGF0ZXN0VmFsdWVzKTtcbiAgICAgICAgLy8gSW50ZXJuYWwgbWV0aG9kcyA9PT09PT09PT09PT09PT09PT09PT09PT1cbiAgICAgICAgLyoqXG4gICAgICAgICAqIE9uIG1vdW50LCB0aGlzIHdpbGwgYmUgaHlkcmF0ZWQgd2l0aCBhIGNhbGxiYWNrIHRvIGRpc2Nvbm5lY3RcbiAgICAgICAgICogdGhpcyB2aXN1YWwgZWxlbWVudCBmcm9tIGl0cyBwYXJlbnQgb24gdW5tb3VudC5cbiAgICAgICAgICovXG4gICAgICAgIHZhciByZW1vdmVGcm9tVmFyaWFudFRyZWU7XG4gICAgICAgIC8qKlxuICAgICAgICAgKlxuICAgICAgICAgKi9cbiAgICAgICAgZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICAgICAgaWYgKCFpbnN0YW5jZSlcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICBpZiAoZWxlbWVudC5pc1Byb2plY3Rpb25SZWFkeSgpKSB7XG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICogQXBwbHkgdGhlIGxhdGVzdCB1c2VyLXNldCB0cmFuc2Zvcm1zIHRvIHRoZSB0YXJnZXRCb3ggdG8gcHJvZHVjZSB0aGUgdGFyZ2V0Qm94RmluYWwuXG4gICAgICAgICAgICAgICAgICogVGhpcyBpcyB0aGUgZmluYWwgYm94IHRoYXQgd2Ugd2lsbCB0aGVuIHByb2plY3QgaW50byBieSBjYWxjdWxhdGluZyBhIHRyYW5zZm9ybSBkZWx0YSBhbmRcbiAgICAgICAgICAgICAgICAgKiBhcHBseWluZyBpdCB0byB0aGUgY29ycmVjdGVkIGJveC5cbiAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICBhcHBseUJveFRyYW5zZm9ybXMobGVhZFByb2plY3Rpb24udGFyZ2V0RmluYWwsIGxlYWRQcm9qZWN0aW9uLnRhcmdldCwgbGVhZExhdGVzdFZhbHVlcyk7XG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICogVXBkYXRlIHRoZSBkZWx0YSBiZXR3ZWVuIHRoZSBjb3JyZWN0ZWQgYm94IGFuZCB0aGUgZmluYWwgdGFyZ2V0IGJveCwgYWZ0ZXJcbiAgICAgICAgICAgICAgICAgKiB1c2VyLXNldCB0cmFuc2Zvcm1zIGFyZSBhcHBsaWVkIHRvIGl0LiBUaGlzIHdpbGwgYmUgdXNlZCBieSB0aGUgcmVuZGVyZXIgdG9cbiAgICAgICAgICAgICAgICAgKiBjcmVhdGUgYSB0cmFuc2Zvcm0gc3R5bGUgdGhhdCB3aWxsIHJlcHJvamVjdCB0aGUgZWxlbWVudCBmcm9tIGl0cyBhY3R1YWwgbGF5b3V0XG4gICAgICAgICAgICAgICAgICogaW50byB0aGUgZGVzaXJlZCBib3VuZGluZyBib3guXG4gICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgdXBkYXRlQm94RGVsdGEobGF5b3V0U3RhdGUuZGVsdGFGaW5hbCwgbGF5b3V0U3RhdGUubGF5b3V0Q29ycmVjdGVkLCBsZWFkUHJvamVjdGlvbi50YXJnZXRGaW5hbCwgbGF0ZXN0VmFsdWVzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRyaWdnZXJCdWlsZCgpO1xuICAgICAgICAgICAgcmVuZGVySW5zdGFuY2UoaW5zdGFuY2UsIHJlbmRlclN0YXRlKTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiB0cmlnZ2VyQnVpbGQoKSB7XG4gICAgICAgICAgICB2YXIgdmFsdWVzVG9SZW5kZXIgPSBsYXRlc3RWYWx1ZXM7XG4gICAgICAgICAgICBpZiAoY3Jvc3NmYWRlciAmJiBjcm9zc2ZhZGVyLmlzQWN0aXZlKCkpIHtcbiAgICAgICAgICAgICAgICB2YXIgY3Jvc3NmYWRlZFZhbHVlcyA9IGNyb3NzZmFkZXIuZ2V0Q3Jvc3NmYWRlU3RhdGUoZWxlbWVudCk7XG4gICAgICAgICAgICAgICAgaWYgKGNyb3NzZmFkZWRWYWx1ZXMpXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlc1RvUmVuZGVyID0gY3Jvc3NmYWRlZFZhbHVlcztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJ1aWxkKGVsZW1lbnQsIHJlbmRlclN0YXRlLCB2YWx1ZXNUb1JlbmRlciwgbGVhZFByb2plY3Rpb24sIGxheW91dFN0YXRlLCBvcHRpb25zLCBwcm9wcyk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gdXBkYXRlKCkge1xuICAgICAgICAgICAgbGlmZWN5Y2xlcy5ub3RpZnlVcGRhdGUobGF0ZXN0VmFsdWVzKTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiB1cGRhdGVMYXlvdXRQcm9qZWN0aW9uKCkge1xuICAgICAgICAgICAgaWYgKCFlbGVtZW50LmlzUHJvamVjdGlvblJlYWR5KCkpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgdmFyIGRlbHRhID0gbGF5b3V0U3RhdGUuZGVsdGEsIHRyZWVTY2FsZSA9IGxheW91dFN0YXRlLnRyZWVTY2FsZTtcbiAgICAgICAgICAgIHZhciBwcmV2VHJlZVNjYWxlWCA9IHRyZWVTY2FsZS54O1xuICAgICAgICAgICAgdmFyIHByZXZUcmVlU2NhbGVZID0gdHJlZVNjYWxlLnk7XG4gICAgICAgICAgICB2YXIgcHJldkRlbHRhVHJhbnNmb3JtID0gbGF5b3V0U3RhdGUuZGVsdGFUcmFuc2Zvcm07XG4gICAgICAgICAgICB1cGRhdGVMYXlvdXREZWx0YXMobGF5b3V0U3RhdGUsIGxlYWRQcm9qZWN0aW9uLCBlbGVtZW50LnBhdGgsIGxhdGVzdFZhbHVlcyk7XG4gICAgICAgICAgICBoYXNWaWV3cG9ydEJveFVwZGF0ZWQgJiZcbiAgICAgICAgICAgICAgICBlbGVtZW50Lm5vdGlmeVZpZXdwb3J0Qm94VXBkYXRlKGxlYWRQcm9qZWN0aW9uLnRhcmdldCwgZGVsdGEpO1xuICAgICAgICAgICAgaGFzVmlld3BvcnRCb3hVcGRhdGVkID0gZmFsc2U7XG4gICAgICAgICAgICB2YXIgZGVsdGFUcmFuc2Zvcm0gPSBidWlsZExheW91dFByb2plY3Rpb25UcmFuc2Zvcm0oZGVsdGEsIHRyZWVTY2FsZSk7XG4gICAgICAgICAgICBpZiAoZGVsdGFUcmFuc2Zvcm0gIT09IHByZXZEZWx0YVRyYW5zZm9ybSB8fFxuICAgICAgICAgICAgICAgIC8vIEFsc28gY29tcGFyZSBjYWxjdWxhdGVkIHRyZWVTY2FsZSwgZm9yIHZhbHVlcyB0aGF0IHJlbHkgb24gdGhpcyBvbmx5IGZvciBzY2FsZSBjb3JyZWN0aW9uXG4gICAgICAgICAgICAgICAgcHJldlRyZWVTY2FsZVggIT09IHRyZWVTY2FsZS54IHx8XG4gICAgICAgICAgICAgICAgcHJldlRyZWVTY2FsZVkgIT09IHRyZWVTY2FsZS55KSB7XG4gICAgICAgICAgICAgICAgZWxlbWVudC5zY2hlZHVsZVJlbmRlcigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGF5b3V0U3RhdGUuZGVsdGFUcmFuc2Zvcm0gPSBkZWx0YVRyYW5zZm9ybTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiB1cGRhdGVUcmVlTGF5b3V0UHJvamVjdGlvbigpIHtcbiAgICAgICAgICAgIGVsZW1lbnQubGF5b3V0VHJlZS5mb3JFYWNoKGZpcmVVcGRhdGVMYXlvdXRQcm9qZWN0aW9uKTtcbiAgICAgICAgfVxuICAgICAgICAvKipcbiAgICAgICAgICpcbiAgICAgICAgICovXG4gICAgICAgIGZ1bmN0aW9uIGJpbmRUb01vdGlvblZhbHVlKGtleSwgdmFsdWUpIHtcbiAgICAgICAgICAgIHZhciByZW1vdmVPbkNoYW5nZSA9IHZhbHVlLm9uQ2hhbmdlKGZ1bmN0aW9uIChsYXRlc3RWYWx1ZSkge1xuICAgICAgICAgICAgICAgIGxhdGVzdFZhbHVlc1trZXldID0gbGF0ZXN0VmFsdWU7XG4gICAgICAgICAgICAgICAgcHJvcHMub25VcGRhdGUgJiYgc3luY19fZGVmYXVsdFsnZGVmYXVsdCddLnVwZGF0ZSh1cGRhdGUsIGZhbHNlLCB0cnVlKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdmFyIHJlbW92ZU9uUmVuZGVyUmVxdWVzdCA9IHZhbHVlLm9uUmVuZGVyUmVxdWVzdChlbGVtZW50LnNjaGVkdWxlUmVuZGVyKTtcbiAgICAgICAgICAgIHZhbHVlU3Vic2NyaXB0aW9ucy5zZXQoa2V5LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmVtb3ZlT25DaGFuZ2UoKTtcbiAgICAgICAgICAgICAgICByZW1vdmVPblJlbmRlclJlcXVlc3QoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBbnkgbW90aW9uIHZhbHVlcyB0aGF0IGFyZSBwcm92aWRlZCB0byB0aGUgZWxlbWVudCB3aGVuIGNyZWF0ZWRcbiAgICAgICAgICogYXJlbid0IHlldCBib3VuZCB0byB0aGUgZWxlbWVudCwgYXMgdGhpcyB3b3VsZCB0ZWNobmljYWxseSBiZSBpbXB1cmUuXG4gICAgICAgICAqIEhvd2V2ZXIsIHdlIGl0ZXJhdGUgdGhyb3VnaCB0aGUgbW90aW9uIHZhbHVlcyBhbmQgc2V0IHRoZW0gdG8gdGhlXG4gICAgICAgICAqIGluaXRpYWwgdmFsdWVzIGZvciB0aGlzIGNvbXBvbmVudC5cbiAgICAgICAgICpcbiAgICAgICAgICogVE9ETzogVGhpcyBpcyBpbXB1cmUgYW5kIHdlIHNob3VsZCBsb29rIGF0IGNoYW5naW5nIHRoaXMgdG8gcnVuIG9uIG1vdW50LlxuICAgICAgICAgKiBEb2luZyBzbyB3aWxsIGJyZWFrIHNvbWUgdGVzdHMgYnV0IHRoaXMgaXNuJ3QgbmVjY2Vzc2FyaWx5IGEgYnJlYWtpbmcgY2hhbmdlLFxuICAgICAgICAgKiBtb3JlIGEgcmVmbGVjdGlvbiBvZiB0aGUgdGVzdC5cbiAgICAgICAgICovXG4gICAgICAgIHZhciBpbml0aWFsTW90aW9uVmFsdWVzID0gc2NyYXBlTW90aW9uVmFsdWVzRnJvbVByb3BzKHByb3BzKTtcbiAgICAgICAgZm9yICh2YXIga2V5IGluIGluaXRpYWxNb3Rpb25WYWx1ZXMpIHtcbiAgICAgICAgICAgIHZhciB2YWx1ZSA9IGluaXRpYWxNb3Rpb25WYWx1ZXNba2V5XTtcbiAgICAgICAgICAgIGlmIChsYXRlc3RWYWx1ZXNba2V5XSAhPT0gdW5kZWZpbmVkICYmIGlzTW90aW9uVmFsdWUodmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgdmFsdWUuc2V0KGxhdGVzdFZhbHVlc1trZXldLCBmYWxzZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLyoqXG4gICAgICAgICAqIERldGVybWluZSB3aGF0IHJvbGUgdGhpcyB2aXN1YWwgZWxlbWVudCBzaG91bGQgdGFrZSBpbiB0aGUgdmFyaWFudCB0cmVlLlxuICAgICAgICAgKi9cbiAgICAgICAgdmFyIGlzQ29udHJvbGxpbmdWYXJpYW50cyA9IGNoZWNrSWZDb250cm9sbGluZ1ZhcmlhbnRzKHByb3BzKTtcbiAgICAgICAgdmFyIGlzVmFyaWFudE5vZGUgPSBjaGVja0lmVmFyaWFudE5vZGUocHJvcHMpO1xuICAgICAgICB2YXIgZWxlbWVudCA9IHRzbGliLl9fYXNzaWduKHRzbGliLl9fYXNzaWduKHsgdHJlZVR5cGU6IHRyZWVUeXBlLCBcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogVGhpcyBpcyBhIG1pcnJvciBvZiB0aGUgaW50ZXJuYWwgaW5zdGFuY2UgcHJvcCwgd2hpY2gga2VlcHNcbiAgICAgICAgICAgICAqIFZpc3VhbEVsZW1lbnQgdHlwZS1jb21wYXRpYmxlIHdpdGggUmVhY3QncyBSZWZPYmplY3QuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGN1cnJlbnQ6IG51bGwsIFxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBUaGUgZGVwdGggb2YgdGhpcyB2aXN1YWwgZWxlbWVudCB3aXRoaW4gdGhlIHZpc3VhbCBlbGVtZW50IHRyZWUuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGRlcHRoOiBwYXJlbnQgPyBwYXJlbnQuZGVwdGggKyAxIDogMCwgcGFyZW50OiBwYXJlbnQsIGNoaWxkcmVuOiBuZXcgU2V0KCksIFxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBBbiBhbmNlc3RvciBwYXRoIGJhY2sgdG8gdGhlIHJvb3QgdmlzdWFsIGVsZW1lbnQuIFRoaXMgaXMgdXNlZFxuICAgICAgICAgICAgICogYnkgbGF5b3V0IHByb2plY3Rpb24gdG8gcXVpY2tseSByZWN1cnNlIGJhY2sgdXAgdGhlIHRyZWUuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHBhdGg6IHBhcmVudCA/IHRzbGliLl9fc3ByZWFkQXJyYXkodHNsaWIuX19zcHJlYWRBcnJheShbXSwgdHNsaWIuX19yZWFkKHBhcmVudC5wYXRoKSksIFtwYXJlbnRdKSA6IFtdLCBsYXlvdXRUcmVlOiBwYXJlbnQgPyBwYXJlbnQubGF5b3V0VHJlZSA6IG5ldyBGbGF0VHJlZSgpLCBcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgcHJlc2VuY2VJZDogcHJlc2VuY2VJZCxcbiAgICAgICAgICAgIHByb2plY3Rpb246IHByb2plY3Rpb24sIFxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBJZiB0aGlzIGNvbXBvbmVudCBpcyBwYXJ0IG9mIHRoZSB2YXJpYW50IHRyZWUsIGl0IHNob3VsZCB0cmFja1xuICAgICAgICAgICAgICogYW55IGNoaWxkcmVuIHRoYXQgYXJlIGFsc28gcGFydCBvZiB0aGUgdHJlZS4gVGhpcyBpcyBlc3NlbnRpYWxseVxuICAgICAgICAgICAgICogYSBzaGFkb3cgdHJlZSB0byBzaW1wbGlmeSBsb2dpYyBhcm91bmQgaG93IHRvIHN0YWdnZXIgb3ZlciBjaGlsZHJlbi5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgdmFyaWFudENoaWxkcmVuOiBpc1ZhcmlhbnROb2RlID8gbmV3IFNldCgpIDogdW5kZWZpbmVkLCBcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogV2hldGhlciB0aGlzIGluc3RhbmNlIGlzIHZpc2libGUuIFRoaXMgY2FuIGJlIGNoYW5nZWQgaW1wZXJhdGl2ZWx5XG4gICAgICAgICAgICAgKiBieSBBbmltYXRlU2hhcmVkTGF5b3V0LCBpcyBhbmFsb2dvdXMgdG8gQ1NTJ3MgdmlzaWJpbGl0eSBpbiB0aGF0XG4gICAgICAgICAgICAgKiBoaWRkZW4gZWxlbWVudHMgc2hvdWxkIHRha2UgdXAgbGF5b3V0LCBhbmQgbmVlZHMgZW5hY3RpbmcgYnkgdGhlIGNvbmZpZ3VyZWRcbiAgICAgICAgICAgICAqIHJlbmRlciBmdW5jdGlvbi5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgaXNWaXNpYmxlOiB1bmRlZmluZWQsIFxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBOb3JtYWxseSwgaWYgYSBjb21wb25lbnQgaXMgY29udHJvbGxlZCBieSBhIHBhcmVudCdzIHZhcmlhbnRzLCBpdCBjYW5cbiAgICAgICAgICAgICAqIHJlbHkgb24gdGhhdCBhbmNlc3RvciB0byB0cmlnZ2VyIGFuaW1hdGlvbnMgZnVydGhlciBkb3duIHRoZSB0cmVlLlxuICAgICAgICAgICAgICogSG93ZXZlciwgaWYgYSBjb21wb25lbnQgaXMgY3JlYXRlZCBhZnRlciBpdHMgcGFyZW50IGlzIG1vdW50ZWQsIHRoZSBwYXJlbnRcbiAgICAgICAgICAgICAqIHdvbid0IHRyaWdnZXIgdGhhdCBtb3VudCBhbmltYXRpb24gc28gdGhlIGNoaWxkIG5lZWRzIHRvLlxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIFRPRE86IFRoaXMgbWlnaHQgYmUgYmV0dGVyIHJlcGxhY2VkIHdpdGggYSBtZXRob2QgaXNQYXJlbnRNb3VudGVkXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIG1hbnVhbGx5QW5pbWF0ZU9uTW91bnQ6IEJvb2xlYW4ocGFyZW50ID09PSBudWxsIHx8IHBhcmVudCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcGFyZW50LmlzTW91bnRlZCgpKSwgXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFRoaXMgY2FuIGJlIHNldCBieSBBbmltYXRlUHJlc2VuY2UgdG8gZm9yY2UgY29tcG9uZW50cyB0aGF0IG1vdW50XG4gICAgICAgICAgICAgKiBhdCB0aGUgc2FtZSB0aW1lIGFzIGl0IHRvIG1vdW50IGFzIGlmIHRoZXkgaGF2ZSBpbml0aWFsPXtmYWxzZX0gc2V0LlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBibG9ja0luaXRpYWxBbmltYXRpb246IGJsb2NrSW5pdGlhbEFuaW1hdGlvbiwgXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIERldGVybWluZSB3aGV0aGVyIHRoaXMgY29tcG9uZW50IGhhcyBtb3VudGVkIHlldC4gVGhpcyBpcyBtb3N0bHkgdXNlZFxuICAgICAgICAgICAgICogYnkgdmFyaWFudCBjaGlsZHJlbiB0byBkZXRlcm1pbmUgd2hldGhlciB0aGV5IG5lZWQgdG8gdHJpZ2dlciB0aGVpclxuICAgICAgICAgICAgICogb3duIGFuaW1hdGlvbnMgb24gbW91bnQuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGlzTW91bnRlZDogZnVuY3Rpb24gKCkgeyByZXR1cm4gQm9vbGVhbihpbnN0YW5jZSk7IH0sIG1vdW50OiBmdW5jdGlvbiAobmV3SW5zdGFuY2UpIHtcbiAgICAgICAgICAgICAgICBpbnN0YW5jZSA9IGVsZW1lbnQuY3VycmVudCA9IG5ld0luc3RhbmNlO1xuICAgICAgICAgICAgICAgIGVsZW1lbnQucG9pbnRUbyhlbGVtZW50KTtcbiAgICAgICAgICAgICAgICBpZiAoaXNWYXJpYW50Tm9kZSAmJiBwYXJlbnQgJiYgIWlzQ29udHJvbGxpbmdWYXJpYW50cykge1xuICAgICAgICAgICAgICAgICAgICByZW1vdmVGcm9tVmFyaWFudFRyZWUgPSBwYXJlbnQgPT09IG51bGwgfHwgcGFyZW50ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBwYXJlbnQuYWRkVmFyaWFudENoaWxkKGVsZW1lbnQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBwYXJlbnQgPT09IG51bGwgfHwgcGFyZW50ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBwYXJlbnQuY2hpbGRyZW4uYWRkKGVsZW1lbnQpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgdW5tb3VudDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHN5bmMuY2FuY2VsU3luYy51cGRhdGUodXBkYXRlKTtcbiAgICAgICAgICAgICAgICBzeW5jLmNhbmNlbFN5bmMucmVuZGVyKHJlbmRlcik7XG4gICAgICAgICAgICAgICAgc3luYy5jYW5jZWxTeW5jLnByZVJlbmRlcihlbGVtZW50LnVwZGF0ZUxheW91dFByb2plY3Rpb24pO1xuICAgICAgICAgICAgICAgIHZhbHVlU3Vic2NyaXB0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uIChyZW1vdmUpIHsgcmV0dXJuIHJlbW92ZSgpOyB9KTtcbiAgICAgICAgICAgICAgICBlbGVtZW50LnN0b3BMYXlvdXRBbmltYXRpb24oKTtcbiAgICAgICAgICAgICAgICBlbGVtZW50LmxheW91dFRyZWUucmVtb3ZlKGVsZW1lbnQpO1xuICAgICAgICAgICAgICAgIHJlbW92ZUZyb21WYXJpYW50VHJlZSA9PT0gbnVsbCB8fCByZW1vdmVGcm9tVmFyaWFudFRyZWUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlbW92ZUZyb21WYXJpYW50VHJlZSgpO1xuICAgICAgICAgICAgICAgIHBhcmVudCA9PT0gbnVsbCB8fCBwYXJlbnQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHBhcmVudC5jaGlsZHJlbi5kZWxldGUoZWxlbWVudCk7XG4gICAgICAgICAgICAgICAgdW5zdWJzY3JpYmVGcm9tTGVhZFZpc3VhbEVsZW1lbnQgPT09IG51bGwgfHwgdW5zdWJzY3JpYmVGcm9tTGVhZFZpc3VhbEVsZW1lbnQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHVuc3Vic2NyaWJlRnJvbUxlYWRWaXN1YWxFbGVtZW50KCk7XG4gICAgICAgICAgICAgICAgbGlmZWN5Y2xlcy5jbGVhckFsbExpc3RlbmVycygpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQWRkIGEgY2hpbGQgdmlzdWFsIGVsZW1lbnQgdG8gb3VyIHNldCBvZiBjaGlsZHJlbi5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgYWRkVmFyaWFudENoaWxkOiBmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICAgICAgdmFyIGNsb3Nlc3RWYXJpYW50Tm9kZSA9IGVsZW1lbnQuZ2V0Q2xvc2VzdFZhcmlhbnROb2RlKCk7XG4gICAgICAgICAgICAgICAgaWYgKGNsb3Nlc3RWYXJpYW50Tm9kZSkge1xuICAgICAgICAgICAgICAgICAgICAoX2EgPSBjbG9zZXN0VmFyaWFudE5vZGUudmFyaWFudENoaWxkcmVuKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuYWRkKGNoaWxkKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNsb3Nlc3RWYXJpYW50Tm9kZS52YXJpYW50Q2hpbGRyZW4uZGVsZXRlKGNoaWxkKTsgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc29ydE5vZGVQb3NpdGlvbjogZnVuY3Rpb24gKG90aGVyKSB7XG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICogSWYgdGhlc2Ugbm9kZXMgYXJlbid0IGV2ZW4gb2YgdGhlIHNhbWUgdHlwZSB3ZSBjYW4ndCBjb21wYXJlIHRoZWlyIGRlcHRoLlxuICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgIGlmICghc29ydE5vZGVQb3NpdGlvbiB8fCB0cmVlVHlwZSAhPT0gb3RoZXIudHJlZVR5cGUpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgICAgICAgIHJldHVybiBzb3J0Tm9kZVBvc2l0aW9uKGVsZW1lbnQuZ2V0SW5zdGFuY2UoKSwgb3RoZXIuZ2V0SW5zdGFuY2UoKSk7XG4gICAgICAgICAgICB9LCBcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogUmV0dXJucyB0aGUgY2xvc2VzdCB2YXJpYW50IG5vZGUgaW4gdGhlIHRyZWUgc3RhcnRpbmcgZnJvbVxuICAgICAgICAgICAgICogdGhpcyB2aXN1YWwgZWxlbWVudC5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgZ2V0Q2xvc2VzdFZhcmlhbnROb2RlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlzVmFyaWFudE5vZGUgPyBlbGVtZW50IDogcGFyZW50ID09PSBudWxsIHx8IHBhcmVudCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcGFyZW50LmdldENsb3Nlc3RWYXJpYW50Tm9kZSgpO1xuICAgICAgICAgICAgfSwgXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEEgbWV0aG9kIHRoYXQgc2NoZWR1bGVzIGFuIHVwZGF0ZSB0byBsYXlvdXQgcHJvamVjdGlvbnMgdGhyb3VnaG91dFxuICAgICAgICAgICAgICogdGhlIHRyZWUuIFdlIGluaGVyaXQgZnJvbSB0aGUgcGFyZW50IHNvIHRoZXJlJ3Mgb25seSBldmVyIG9uZVxuICAgICAgICAgICAgICogam9iIHNjaGVkdWxlZCBvbiB0aGUgbmV4dCBmcmFtZSAtIHRoYXQgb2YgdGhlIHJvb3QgdmlzdWFsIGVsZW1lbnQuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHNjaGVkdWxlVXBkYXRlTGF5b3V0UHJvamVjdGlvbjogcGFyZW50XG4gICAgICAgICAgICAgICAgPyBwYXJlbnQuc2NoZWR1bGVVcGRhdGVMYXlvdXRQcm9qZWN0aW9uXG4gICAgICAgICAgICAgICAgOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzeW5jX19kZWZhdWx0WydkZWZhdWx0J10ucHJlUmVuZGVyKGVsZW1lbnQudXBkYXRlVHJlZUxheW91dFByb2plY3Rpb24sIGZhbHNlLCB0cnVlKTtcbiAgICAgICAgICAgICAgICB9LCBcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogRXhwb3NlIHRoZSBsYXRlc3QgbGF5b3V0SWQgcHJvcC5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgZ2V0TGF5b3V0SWQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHByb3BzLmxheW91dElkOyB9LCBcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogUmV0dXJucyB0aGUgY3VycmVudCBpbnN0YW5jZS5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgZ2V0SW5zdGFuY2U6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGluc3RhbmNlOyB9LCBcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogR2V0L3NldCB0aGUgbGF0ZXN0IHN0YXRpYyB2YWx1ZXMuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGdldFN0YXRpY1ZhbHVlOiBmdW5jdGlvbiAoa2V5KSB7IHJldHVybiBsYXRlc3RWYWx1ZXNba2V5XTsgfSwgc2V0U3RhdGljVmFsdWU6IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7IHJldHVybiAobGF0ZXN0VmFsdWVzW2tleV0gPSB2YWx1ZSk7IH0sIFxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBSZXR1cm5zIHRoZSBsYXRlc3QgbW90aW9uIHZhbHVlIHN0YXRlLiBDdXJyZW50bHkgb25seSB1c2VkIHRvIHRha2VcbiAgICAgICAgICAgICAqIGEgc25hcHNob3Qgb2YgdGhlIHZpc3VhbCBlbGVtZW50IC0gcGVyaGFwcyB0aGlzIGNhbiByZXR1cm4gdGhlIHdob2xlXG4gICAgICAgICAgICAgKiB2aXN1YWwgc3RhdGVcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgZ2V0TGF0ZXN0VmFsdWVzOiBmdW5jdGlvbiAoKSB7IHJldHVybiBsYXRlc3RWYWx1ZXM7IH0sIFxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBTZXQgdGhlIHZpc2libGl0eSBvZiB0aGUgdmlzdWFsIGVsZW1lbnQuIElmIGl0J3MgY2hhbmdlZCwgc2NoZWR1bGVcbiAgICAgICAgICAgICAqIGEgcmVuZGVyIHRvIHJlZmxlY3QgdGhlc2UgY2hhbmdlcy5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgc2V0VmlzaWJpbGl0eTogZnVuY3Rpb24gKHZpc2liaWxpdHkpIHtcbiAgICAgICAgICAgICAgICBpZiAoZWxlbWVudC5pc1Zpc2libGUgPT09IHZpc2liaWxpdHkpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICBlbGVtZW50LmlzVmlzaWJsZSA9IHZpc2liaWxpdHk7XG4gICAgICAgICAgICAgICAgZWxlbWVudC5zY2hlZHVsZVJlbmRlcigpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogTWFrZSBhIHRhcmdldCBhbmltYXRhYmxlIGJ5IFBvcG1vdGlvbi4gRm9yIGluc3RhbmNlLCBpZiB3ZSdyZVxuICAgICAgICAgICAgICogdHJ5aW5nIHRvIGFuaW1hdGUgd2lkdGggZnJvbSAxMDBweCB0byAxMDB2dyB3ZSBuZWVkIHRvIG1lYXN1cmUgMTAwdndcbiAgICAgICAgICAgICAqIGluIHBpeGVscyB0byBkZXRlcm1pbmUgd2hhdCB3ZSByZWFsbHkgbmVlZCB0byBhbmltYXRlIHRvLiBUaGlzIGlzIGFsc29cbiAgICAgICAgICAgICAqIHBsdWdnYWJsZSB0byBzdXBwb3J0IEZyYW1lcidzIGN1c3RvbSB2YWx1ZSB0eXBlcyBsaWtlIENvbG9yLFxuICAgICAgICAgICAgICogYW5kIENTUyB2YXJpYWJsZXMuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIG1ha2VUYXJnZXRBbmltYXRhYmxlOiBmdW5jdGlvbiAodGFyZ2V0LCBjYW5NdXRhdGUpIHtcbiAgICAgICAgICAgICAgICBpZiAoY2FuTXV0YXRlID09PSB2b2lkIDApIHsgY2FuTXV0YXRlID0gdHJ1ZTsgfVxuICAgICAgICAgICAgICAgIHJldHVybiBtYWtlVGFyZ2V0QW5pbWF0YWJsZShlbGVtZW50LCB0YXJnZXQsIHByb3BzLCBjYW5NdXRhdGUpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIC8vIE1vdGlvbiB2YWx1ZXMgPT09PT09PT09PT09PT09PT09PT09PT09XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEFkZCBhIG1vdGlvbiB2YWx1ZSBhbmQgYmluZCBpdCB0byB0aGlzIHZpc3VhbCBlbGVtZW50LlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBhZGRWYWx1ZTogZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICAgICAgICAgICAgICAvLyBSZW1vdmUgZXhpc3RpbmcgdmFsdWUgaWYgaXQgZXhpc3RzXG4gICAgICAgICAgICAgICAgaWYgKGVsZW1lbnQuaGFzVmFsdWUoa2V5KSlcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5yZW1vdmVWYWx1ZShrZXkpO1xuICAgICAgICAgICAgICAgIHZhbHVlcy5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgbGF0ZXN0VmFsdWVzW2tleV0gPSB2YWx1ZS5nZXQoKTtcbiAgICAgICAgICAgICAgICBiaW5kVG9Nb3Rpb25WYWx1ZShrZXksIHZhbHVlKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFJlbW92ZSBhIG1vdGlvbiB2YWx1ZSBhbmQgdW5iaW5kIGFueSBhY3RpdmUgc3Vic2NyaXB0aW9ucy5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgcmVtb3ZlVmFsdWU6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICAgICAgdmFsdWVzLmRlbGV0ZShrZXkpO1xuICAgICAgICAgICAgICAgIChfYSA9IHZhbHVlU3Vic2NyaXB0aW9ucy5nZXQoa2V5KSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hKCk7XG4gICAgICAgICAgICAgICAgdmFsdWVTdWJzY3JpcHRpb25zLmRlbGV0ZShrZXkpO1xuICAgICAgICAgICAgICAgIGRlbGV0ZSBsYXRlc3RWYWx1ZXNba2V5XTtcbiAgICAgICAgICAgICAgICByZW1vdmVWYWx1ZUZyb21SZW5kZXJTdGF0ZShrZXksIHJlbmRlclN0YXRlKTtcbiAgICAgICAgICAgIH0sIFxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBDaGVjayB3aGV0aGVyIHdlIGhhdmUgYSBtb3Rpb24gdmFsdWUgZm9yIHRoaXMga2V5XG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGhhc1ZhbHVlOiBmdW5jdGlvbiAoa2V5KSB7IHJldHVybiB2YWx1ZXMuaGFzKGtleSk7IH0sIFxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBHZXQgYSBtb3Rpb24gdmFsdWUgZm9yIHRoaXMga2V5LiBJZiBjYWxsZWQgd2l0aCBhIGRlZmF1bHRcbiAgICAgICAgICAgICAqIHZhbHVlLCB3ZSdsbCBjcmVhdGUgb25lIGlmIG5vbmUgZXhpc3RzLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBnZXRWYWx1ZTogZnVuY3Rpb24gKGtleSwgZGVmYXVsdFZhbHVlKSB7XG4gICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gdmFsdWVzLmdldChrZXkpO1xuICAgICAgICAgICAgICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkICYmIGRlZmF1bHRWYWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gbW90aW9uVmFsdWUoZGVmYXVsdFZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5hZGRWYWx1ZShrZXksIHZhbHVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICAgICAgfSwgXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEl0ZXJhdGUgb3ZlciBvdXIgbW90aW9uIHZhbHVlcy5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgZm9yRWFjaFZhbHVlOiBmdW5jdGlvbiAoY2FsbGJhY2spIHsgcmV0dXJuIHZhbHVlcy5mb3JFYWNoKGNhbGxiYWNrKTsgfSwgXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIElmIHdlJ3JlIHRyeWluZyB0byBhbmltYXRlIHRvIGEgcHJldmlvdXNseSB1bmVuY291bnRlcmVkIHZhbHVlLFxuICAgICAgICAgICAgICogd2UgbmVlZCB0byBjaGVjayBmb3IgaXQgaW4gb3VyIHN0YXRlIGFuZCBhcyBhIGxhc3QgcmVzb3J0IHJlYWQgaXRcbiAgICAgICAgICAgICAqIGRpcmVjdGx5IGZyb20gdGhlIGluc3RhbmNlICh3aGljaCBtaWdodCBoYXZlIHBlcmZvcm1hbmNlIGltcGxpY2F0aW9ucykuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHJlYWRWYWx1ZTogZnVuY3Rpb24gKGtleSkgeyB2YXIgX2E7IHJldHVybiAoX2EgPSBsYXRlc3RWYWx1ZXNba2V5XSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogcmVhZFZhbHVlRnJvbUluc3RhbmNlKGluc3RhbmNlLCBrZXksIG9wdGlvbnMpOyB9LCBcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogU2V0IHRoZSBiYXNlIHRhcmdldCB0byBsYXRlciBhbmltYXRlIGJhY2sgdG8uIFRoaXMgaXMgY3VycmVudGx5XG4gICAgICAgICAgICAgKiBvbmx5IGh5ZHJhdGVkIG9uIGNyZWF0aW9uIGFuZCB3aGVuIHdlIGZpcnN0IHJlYWQgYSB2YWx1ZS5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgc2V0QmFzZVRhcmdldDogZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICAgICAgICAgICAgICBiYXNlVGFyZ2V0W2tleV0gPSB2YWx1ZTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEZpbmQgdGhlIGJhc2UgdGFyZ2V0IGZvciBhIHZhbHVlIHRoYXRzIGJlZW4gcmVtb3ZlZCBmcm9tIGFsbCBhbmltYXRpb25cbiAgICAgICAgICAgICAqIHByb3BzLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBnZXRCYXNlVGFyZ2V0OiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgICAgICAgaWYgKGdldEJhc2VUYXJnZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRhcmdldCA9IGdldEJhc2VUYXJnZXQocHJvcHMsIGtleSk7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0YXJnZXQgIT09IHVuZGVmaW5lZCAmJiAhaXNNb3Rpb25WYWx1ZSh0YXJnZXQpKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRhcmdldDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGJhc2VUYXJnZXRba2V5XTtcbiAgICAgICAgICAgIH0gfSwgbGlmZWN5Y2xlcyksIHsgXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEJ1aWxkIHRoZSByZW5kZXJlciBzdGF0ZSBiYXNlZCBvbiB0aGUgbGF0ZXN0IHZpc3VhbCBzdGF0ZS5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgYnVpbGQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB0cmlnZ2VyQnVpbGQoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVuZGVyU3RhdGU7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBTY2hlZHVsZSBhIHJlbmRlciBvbiB0aGUgbmV4dCBhbmltYXRpb24gZnJhbWUuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHNjaGVkdWxlUmVuZGVyOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgc3luY19fZGVmYXVsdFsnZGVmYXVsdCddLnJlbmRlcihyZW5kZXIsIGZhbHNlLCB0cnVlKTtcbiAgICAgICAgICAgIH0sIFxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBTeW5jaHJvbm91c2x5IGZpcmUgcmVuZGVyLiBJdCdzIHByZWZlcmVkIHRoYXQgd2UgYmF0Y2ggcmVuZGVycyBidXRcbiAgICAgICAgICAgICAqIGluIG1hbnkgY2lyY3Vtc3RhbmNlcywgbGlrZSBsYXlvdXQgbWVhc3VyZW1lbnQsIHdlIG5lZWQgdG8gcnVuIHRoaXNcbiAgICAgICAgICAgICAqIHN5bmNocm9ub3VzbHkuIEhvd2V2ZXIgaW4gdGhvc2UgaW5zdGFuY2VzIG90aGVyIG1lYXN1cmVzIHNob3VsZCBiZSB0YWtlblxuICAgICAgICAgICAgICogdG8gYmF0Y2ggcmVhZHMvd3JpdGVzLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBzeW5jUmVuZGVyOiByZW5kZXIsIFxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBVcGRhdGUgdGhlIHByb3ZpZGVkIHByb3BzLiBFbnN1cmUgYW55IG5ld2x5LWFkZGVkIG1vdGlvbiB2YWx1ZXMgYXJlXG4gICAgICAgICAgICAgKiBhZGRlZCB0byBvdXIgbWFwLCBvbGQgb25lcyByZW1vdmVkLCBhbmQgbGlzdGVuZXJzIHVwZGF0ZWQuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHNldFByb3BzOiBmdW5jdGlvbiAobmV3UHJvcHMpIHtcbiAgICAgICAgICAgICAgICBwcm9wcyA9IG5ld1Byb3BzO1xuICAgICAgICAgICAgICAgIGxpZmVjeWNsZXMudXBkYXRlUHJvcExpc3RlbmVycyhuZXdQcm9wcyk7XG4gICAgICAgICAgICAgICAgcHJldk1vdGlvblZhbHVlcyA9IHVwZGF0ZU1vdGlvblZhbHVlc0Zyb21Qcm9wcyhlbGVtZW50LCBzY3JhcGVNb3Rpb25WYWx1ZXNGcm9tUHJvcHMocHJvcHMpLCBwcmV2TW90aW9uVmFsdWVzKTtcbiAgICAgICAgICAgIH0sIGdldFByb3BzOiBmdW5jdGlvbiAoKSB7IHJldHVybiBwcm9wczsgfSwgXG4gICAgICAgICAgICAvLyBWYXJpYW50cyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogUmV0dXJucyB0aGUgdmFyaWFudCBkZWZpbml0aW9uIHdpdGggYSBnaXZlbiBuYW1lLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBnZXRWYXJpYW50OiBmdW5jdGlvbiAobmFtZSkgeyB2YXIgX2E7IHJldHVybiAoX2EgPSBwcm9wcy52YXJpYW50cykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hW25hbWVdOyB9LCBcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogUmV0dXJucyB0aGUgZGVmaW5lZCBkZWZhdWx0IHRyYW5zaXRpb24gb24gdGhpcyBjb21wb25lbnQuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGdldERlZmF1bHRUcmFuc2l0aW9uOiBmdW5jdGlvbiAoKSB7IHJldHVybiBwcm9wcy50cmFuc2l0aW9uOyB9LCBcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogVXNlZCBieSBjaGlsZCB2YXJpYW50IG5vZGVzIHRvIGdldCB0aGUgY2xvc2VzdCBhbmNlc3RvciB2YXJpYW50IHByb3BzLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBnZXRWYXJpYW50Q29udGV4dDogZnVuY3Rpb24gKHN0YXJ0QXRQYXJlbnQpIHtcbiAgICAgICAgICAgICAgICBpZiAoc3RhcnRBdFBhcmVudCA9PT0gdm9pZCAwKSB7IHN0YXJ0QXRQYXJlbnQgPSBmYWxzZTsgfVxuICAgICAgICAgICAgICAgIGlmIChzdGFydEF0UGFyZW50KVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcGFyZW50ID09PSBudWxsIHx8IHBhcmVudCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcGFyZW50LmdldFZhcmlhbnRDb250ZXh0KCk7XG4gICAgICAgICAgICAgICAgaWYgKCFpc0NvbnRyb2xsaW5nVmFyaWFudHMpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNvbnRleHRfMSA9IChwYXJlbnQgPT09IG51bGwgfHwgcGFyZW50ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBwYXJlbnQuZ2V0VmFyaWFudENvbnRleHQoKSkgfHwge307XG4gICAgICAgICAgICAgICAgICAgIGlmIChwcm9wcy5pbml0aWFsICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHRfMS5pbml0aWFsID0gcHJvcHMuaW5pdGlhbDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY29udGV4dF8xO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgY29udGV4dCA9IHt9O1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbnVtVmFyaWFudFByb3BzOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5hbWVfMSA9IHZhcmlhbnRQcm9wc1tpXTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHByb3AgPSBwcm9wc1tuYW1lXzFdO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXNWYXJpYW50TGFiZWwocHJvcCkgfHwgcHJvcCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHRbbmFtZV8xXSA9IHByb3A7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbnRleHQ7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgLy8gTGF5b3V0IHByb2plY3Rpb24gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEVuYWJsZSBsYXlvdXQgcHJvamVjdGlvbiBmb3IgdGhpcyB2aXN1YWwgZWxlbWVudC4gV29uJ3QgYWN0dWFsbHlcbiAgICAgICAgICAgICAqIG9jY3VyIHVudGlsIHdlIGFsc28gaGF2ZSBoeWRyYXRlZCBsYXlvdXQgbWVhc3VyZW1lbnRzLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBlbmFibGVMYXlvdXRQcm9qZWN0aW9uOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcHJvamVjdGlvbi5pc0VuYWJsZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGVsZW1lbnQubGF5b3V0VHJlZS5hZGQoZWxlbWVudCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBMb2NrIHRoZSBwcm9qZWN0aW9uIHRhcmdldCwgZm9yIGluc3RhbmNlIHdoZW4gZHJhZ2dpbmcsIHNvXG4gICAgICAgICAgICAgKiBub3RoaW5nIGVsc2UgY2FuIHRyeSBhbmQgYW5pbWF0ZSBpdC5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgbG9ja1Byb2plY3Rpb25UYXJnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBwcm9qZWN0aW9uLmlzVGFyZ2V0TG9ja2VkID0gdHJ1ZTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB1bmxvY2tQcm9qZWN0aW9uVGFyZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgZWxlbWVudC5zdG9wTGF5b3V0QW5pbWF0aW9uKCk7XG4gICAgICAgICAgICAgICAgcHJvamVjdGlvbi5pc1RhcmdldExvY2tlZCA9IGZhbHNlO1xuICAgICAgICAgICAgfSwgZ2V0TGF5b3V0U3RhdGU6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGxheW91dFN0YXRlOyB9LCBzZXRDcm9zc2ZhZGVyOiBmdW5jdGlvbiAobmV3Q3Jvc3NmYWRlcikge1xuICAgICAgICAgICAgICAgIGNyb3NzZmFkZXIgPSBuZXdDcm9zc2ZhZGVyO1xuICAgICAgICAgICAgfSwgaXNQcm9qZWN0aW9uUmVhZHk6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcHJvamVjdGlvbi5pc0VuYWJsZWQgJiZcbiAgICAgICAgICAgICAgICAgICAgcHJvamVjdGlvbi5pc0h5ZHJhdGVkICYmXG4gICAgICAgICAgICAgICAgICAgIGxheW91dFN0YXRlLmlzSHlkcmF0ZWQ7XG4gICAgICAgICAgICB9LCBcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogU3RhcnQgYSBsYXlvdXQgYW5pbWF0aW9uIG9uIGEgZ2l2ZW4gYXhpcy5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgc3RhcnRMYXlvdXRBbmltYXRpb246IGZ1bmN0aW9uIChheGlzLCB0cmFuc2l0aW9uLCBpc1JlbGF0aXZlKSB7XG4gICAgICAgICAgICAgICAgaWYgKGlzUmVsYXRpdmUgPT09IHZvaWQgMCkgeyBpc1JlbGF0aXZlID0gZmFsc2U7IH1cbiAgICAgICAgICAgICAgICB2YXIgcHJvZ3Jlc3MgPSBlbGVtZW50LmdldFByb2plY3Rpb25BbmltYXRpb25Qcm9ncmVzcygpW2F4aXNdO1xuICAgICAgICAgICAgICAgIHZhciBfYSA9IGlzUmVsYXRpdmVcbiAgICAgICAgICAgICAgICAgICAgPyBwcm9qZWN0aW9uLnJlbGF0aXZlVGFyZ2V0W2F4aXNdXG4gICAgICAgICAgICAgICAgICAgIDogcHJvamVjdGlvbi50YXJnZXRbYXhpc10sIG1pbiA9IF9hLm1pbiwgbWF4ID0gX2EubWF4O1xuICAgICAgICAgICAgICAgIHZhciBsZW5ndGggPSBtYXggLSBtaW47XG4gICAgICAgICAgICAgICAgcHJvZ3Jlc3MuY2xlYXJMaXN0ZW5lcnMoKTtcbiAgICAgICAgICAgICAgICBwcm9ncmVzcy5zZXQobWluKTtcbiAgICAgICAgICAgICAgICBwcm9ncmVzcy5zZXQobWluKTsgLy8gU2V0IHR3aWNlIHRvIGhhcmQtcmVzZXQgdmVsb2NpdHlcbiAgICAgICAgICAgICAgICBwcm9ncmVzcy5vbkNoYW5nZShmdW5jdGlvbiAodikge1xuICAgICAgICAgICAgICAgICAgICBlbGVtZW50LnNldFByb2plY3Rpb25UYXJnZXRBeGlzKGF4aXMsIHYsIHYgKyBsZW5ndGgsIGlzUmVsYXRpdmUpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybiBlbGVtZW50LmFuaW1hdGVNb3Rpb25WYWx1ZShheGlzLCBwcm9ncmVzcywgMCwgdHJhbnNpdGlvbik7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBTdG9wIGxheW91dCBhbmltYXRpb25zLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBzdG9wTGF5b3V0QW5pbWF0aW9uOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgZWFjaEF4aXMoZnVuY3Rpb24gKGF4aXMpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVsZW1lbnQuZ2V0UHJvamVjdGlvbkFuaW1hdGlvblByb2dyZXNzKClbYXhpc10uc3RvcCgpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogTWVhc3VyZSB0aGUgY3VycmVudCB2aWV3cG9ydCBib3ggd2l0aCBvciB3aXRob3V0IHRyYW5zZm9ybXMuXG4gICAgICAgICAgICAgKiBPbmx5IG1lYXN1cmVzIGF4aXMtYWxpZ25lZCBib3hlcywgcm90YXRlIGFuZCBza2V3IG11c3QgYmUgbWFudWFsbHlcbiAgICAgICAgICAgICAqIHJlbW92ZWQgd2l0aCBhIHJlLXJlbmRlciB0byB3b3JrLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBtZWFzdXJlVmlld3BvcnRCb3g6IGZ1bmN0aW9uICh3aXRoVHJhbnNmb3JtKSB7XG4gICAgICAgICAgICAgICAgaWYgKHdpdGhUcmFuc2Zvcm0gPT09IHZvaWQgMCkgeyB3aXRoVHJhbnNmb3JtID0gdHJ1ZTsgfVxuICAgICAgICAgICAgICAgIHZhciB2aWV3cG9ydEJveCA9IG1lYXN1cmVWaWV3cG9ydEJveChpbnN0YW5jZSwgb3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgaWYgKCF3aXRoVHJhbnNmb3JtKVxuICAgICAgICAgICAgICAgICAgICByZW1vdmVCb3hUcmFuc2Zvcm1zKHZpZXdwb3J0Qm94LCBsYXRlc3RWYWx1ZXMpO1xuICAgICAgICAgICAgICAgIHJldHVybiB2aWV3cG9ydEJveDtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEdldCB0aGUgbW90aW9uIHZhbHVlcyB0cmFja2luZyB0aGUgbGF5b3V0IGFuaW1hdGlvbnMgb24gZWFjaFxuICAgICAgICAgICAgICogYXhpcy4gTGF6eSBpbml0IGlmIG5vdCBhbHJlYWR5IGNyZWF0ZWQuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGdldFByb2plY3Rpb25BbmltYXRpb25Qcm9ncmVzczogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHByb2plY3Rpb25UYXJnZXRQcm9ncmVzcyB8fCAocHJvamVjdGlvblRhcmdldFByb2dyZXNzID0ge1xuICAgICAgICAgICAgICAgICAgICB4OiBtb3Rpb25WYWx1ZSgwKSxcbiAgICAgICAgICAgICAgICAgICAgeTogbW90aW9uVmFsdWUoMCksXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHByb2plY3Rpb25UYXJnZXRQcm9ncmVzcztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFVwZGF0ZSB0aGUgcHJvamVjdGlvbiBvZiBhIHNpbmdsZSBheGlzLiBTY2hlZHVsZSBhbiB1cGRhdGUgdG9cbiAgICAgICAgICAgICAqIHRoZSB0cmVlIGxheW91dCBwcm9qZWN0aW9uLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBzZXRQcm9qZWN0aW9uVGFyZ2V0QXhpczogZnVuY3Rpb24gKGF4aXMsIG1pbiwgbWF4LCBpc1JlbGF0aXZlKSB7XG4gICAgICAgICAgICAgICAgaWYgKGlzUmVsYXRpdmUgPT09IHZvaWQgMCkgeyBpc1JlbGF0aXZlID0gZmFsc2U7IH1cbiAgICAgICAgICAgICAgICB2YXIgdGFyZ2V0O1xuICAgICAgICAgICAgICAgIGlmIChpc1JlbGF0aXZlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghcHJvamVjdGlvbi5yZWxhdGl2ZVRhcmdldCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcHJvamVjdGlvbi5yZWxhdGl2ZVRhcmdldCA9IGF4aXNCb3goKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0YXJnZXQgPSBwcm9qZWN0aW9uLnJlbGF0aXZlVGFyZ2V0W2F4aXNdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcHJvamVjdGlvbi5yZWxhdGl2ZVRhcmdldCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0ID0gcHJvamVjdGlvbi50YXJnZXRbYXhpc107XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHByb2plY3Rpb24uaXNIeWRyYXRlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgdGFyZ2V0Lm1pbiA9IG1pbjtcbiAgICAgICAgICAgICAgICB0YXJnZXQubWF4ID0gbWF4O1xuICAgICAgICAgICAgICAgIC8vIEZsYWcgdGhhdCB3ZSB3YW50IHRvIGZpcmUgdGhlIG9uVmlld3BvcnRCb3hVcGRhdGUgZXZlbnQgaGFuZGxlclxuICAgICAgICAgICAgICAgIGhhc1ZpZXdwb3J0Qm94VXBkYXRlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgbGlmZWN5Y2xlcy5ub3RpZnlTZXRBeGlzVGFyZ2V0KCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBSZWJhc2UgdGhlIHByb2plY3Rpb24gdGFyZ2V0IG9uIHRvcCBvZiB0aGUgcHJvdmlkZWQgdmlld3BvcnQgYm94XG4gICAgICAgICAgICAgKiBvciB0aGUgbWVhc3VyZWQgbGF5b3V0LiBUaGlzIGVuc3VyZXMgdGhhdCBub24tYW5pbWF0aW5nIGVsZW1lbnRzXG4gICAgICAgICAgICAgKiBkb24ndCBmYWxsIG91dCBvZiBzeW5jIGRpZmZlcmVuY2VzIGluIG1lYXN1cmVtZW50cyB2cyBwcm9qZWN0aW9uc1xuICAgICAgICAgICAgICogYWZ0ZXIgYSBwYWdlIHNjcm9sbCBvciBvdGhlciByZWxheW91dC5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgcmViYXNlUHJvamVjdGlvblRhcmdldDogZnVuY3Rpb24gKGZvcmNlLCBib3gpIHtcbiAgICAgICAgICAgICAgICBpZiAoYm94ID09PSB2b2lkIDApIHsgYm94ID0gbGF5b3V0U3RhdGUubGF5b3V0OyB9XG4gICAgICAgICAgICAgICAgdmFyIF9hID0gZWxlbWVudC5nZXRQcm9qZWN0aW9uQW5pbWF0aW9uUHJvZ3Jlc3MoKSwgeCA9IF9hLngsIHkgPSBfYS55O1xuICAgICAgICAgICAgICAgIHZhciBzaG91bGRSZWJhc2UgPSAhcHJvamVjdGlvbi5yZWxhdGl2ZVRhcmdldCAmJlxuICAgICAgICAgICAgICAgICAgICAhcHJvamVjdGlvbi5pc1RhcmdldExvY2tlZCAmJlxuICAgICAgICAgICAgICAgICAgICAheC5pc0FuaW1hdGluZygpICYmXG4gICAgICAgICAgICAgICAgICAgICF5LmlzQW5pbWF0aW5nKCk7XG4gICAgICAgICAgICAgICAgaWYgKGZvcmNlIHx8IHNob3VsZFJlYmFzZSkge1xuICAgICAgICAgICAgICAgICAgICBlYWNoQXhpcyhmdW5jdGlvbiAoYXhpcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF9hID0gYm94W2F4aXNdLCBtaW4gPSBfYS5taW4sIG1heCA9IF9hLm1heDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuc2V0UHJvamVjdGlvblRhcmdldEF4aXMoYXhpcywgbWluLCBtYXgpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBOb3RpZnkgdGhlIHZpc3VhbCBlbGVtZW50IHRoYXQgaXRzIGxheW91dCBpcyB1cC10by1kYXRlLlxuICAgICAgICAgICAgICogQ3VycmVudGx5IEFuaW1hdGUudHN4IHVzZXMgdGhpcyB0byBjaGVjayB3aGV0aGVyIGEgbGF5b3V0IGFuaW1hdGlvblxuICAgICAgICAgICAgICogbmVlZHMgdG8gYmUgcGVyZm9ybWVkLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBub3RpZnlMYXlvdXRSZWFkeTogZnVuY3Rpb24gKGNvbmZpZykge1xuICAgICAgICAgICAgICAgIHNldEN1cnJlbnRWaWV3cG9ydEJveChlbGVtZW50KTtcbiAgICAgICAgICAgICAgICBlbGVtZW50Lm5vdGlmeUxheW91dFVwZGF0ZShsYXlvdXRTdGF0ZS5sYXlvdXQsIGVsZW1lbnQucHJldlZpZXdwb3J0Qm94IHx8IGxheW91dFN0YXRlLmxheW91dCwgY29uZmlnKTtcbiAgICAgICAgICAgIH0sIFxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBUZW1wb3JhcmlseSByZXNldCB0aGUgdHJhbnNmb3JtIG9mIHRoZSBpbnN0YW5jZS5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgcmVzZXRUcmFuc2Zvcm06IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlc2V0VHJhbnNmb3JtKGVsZW1lbnQsIGluc3RhbmNlLCBwcm9wcyk7IH0sIHJlc3RvcmVUcmFuc2Zvcm06IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlc3RvcmVUcmFuc2Zvcm0oaW5zdGFuY2UsIHJlbmRlclN0YXRlKTsgfSwgdXBkYXRlTGF5b3V0UHJvamVjdGlvbjogdXBkYXRlTGF5b3V0UHJvamVjdGlvbixcbiAgICAgICAgICAgIHVwZGF0ZVRyZWVMYXlvdXRQcm9qZWN0aW9uOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgZWxlbWVudC5sYXlvdXRUcmVlLmZvckVhY2goZmlyZVJlc29sdmVSZWxhdGl2ZVRhcmdldEJveCk7XG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICogU2NoZWR1bGUgdGhlIHByb2plY3Rpb24gdXBkYXRlcyBhdCB0aGUgZW5kIG9mIHRoZSBjdXJyZW50IHByZVJlbmRlclxuICAgICAgICAgICAgICAgICAqIHN0ZXAuIFRoaXMgd2lsbCBlbnN1cmUgdGhhdCBhbGwgbGF5b3V0IHRyZWVzIHdpbGwgZmlyc3QgcmVzb2x2ZVxuICAgICAgICAgICAgICAgICAqIHJlbGF0aXZlIHByb2plY3Rpb24gYm94ZXMgaW50byB2aWV3cG9ydCBib3hlcywgYW5kICp0aGVuKlxuICAgICAgICAgICAgICAgICAqIHVwZGF0ZSBwcm9qZWN0aW9ucy5cbiAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICBzeW5jX19kZWZhdWx0WydkZWZhdWx0J10ucHJlUmVuZGVyKHVwZGF0ZVRyZWVMYXlvdXRQcm9qZWN0aW9uLCBmYWxzZSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgLy8gc3luYy5wb3N0UmVuZGVyKCgpID0+IGVsZW1lbnQuc2NoZWR1bGVVcGRhdGVMYXlvdXRQcm9qZWN0aW9uKCkpXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZ2V0UHJvamVjdGlvblBhcmVudDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGlmIChwcm9qZWN0aW9uUGFyZW50ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGZvdW5kUGFyZW50ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIC8vIFNlYXJjaCBiYWNrd2FyZHMgdGhyb3VnaCB0aGUgdHJlZSBwYXRoXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSBlbGVtZW50LnBhdGgubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhbmNlc3RvciA9IGVsZW1lbnQucGF0aFtpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhbmNlc3Rvci5wcm9qZWN0aW9uLmlzRW5hYmxlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvdW5kUGFyZW50ID0gYW5jZXN0b3I7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcHJvamVjdGlvblBhcmVudCA9IGZvdW5kUGFyZW50O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gcHJvamVjdGlvblBhcmVudDtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZXNvbHZlUmVsYXRpdmVUYXJnZXRCb3g6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgcmVsYXRpdmVQYXJlbnQgPSBlbGVtZW50LmdldFByb2plY3Rpb25QYXJlbnQoKTtcbiAgICAgICAgICAgICAgICBpZiAoIXByb2plY3Rpb24ucmVsYXRpdmVUYXJnZXQgfHwgIXJlbGF0aXZlUGFyZW50KVxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgY2FsY1JlbGF0aXZlQm94KHByb2plY3Rpb24sIHJlbGF0aXZlUGFyZW50LnByb2plY3Rpb24pO1xuICAgICAgICAgICAgICAgIGlmIChpc0RyYWdnYWJsZShyZWxhdGl2ZVBhcmVudCkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRhcmdldCA9IHByb2plY3Rpb24udGFyZ2V0O1xuICAgICAgICAgICAgICAgICAgICBhcHBseUJveFRyYW5zZm9ybXModGFyZ2V0LCB0YXJnZXQsIHJlbGF0aXZlUGFyZW50LmdldExhdGVzdFZhbHVlcygpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2hvdWxkUmVzZXRUcmFuc2Zvcm06IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gQm9vbGVhbihwcm9wcy5fbGF5b3V0UmVzZXRUcmFuc2Zvcm0pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgcG9pbnRUbzogZnVuY3Rpb24gKG5ld0xlYWQpIHtcbiAgICAgICAgICAgICAgICBsZWFkUHJvamVjdGlvbiA9IG5ld0xlYWQucHJvamVjdGlvbjtcbiAgICAgICAgICAgICAgICBsZWFkTGF0ZXN0VmFsdWVzID0gbmV3TGVhZC5nZXRMYXRlc3RWYWx1ZXMoKTtcbiAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgKiBTdWJzY3JpYmUgdG8gbGVhZCBjb21wb25lbnQncyBsYXlvdXQgYW5pbWF0aW9uc1xuICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgIHVuc3Vic2NyaWJlRnJvbUxlYWRWaXN1YWxFbGVtZW50ID09PSBudWxsIHx8IHVuc3Vic2NyaWJlRnJvbUxlYWRWaXN1YWxFbGVtZW50ID09PSB2b2lkIDAgPyB2b2lkIDAgOiB1bnN1YnNjcmliZUZyb21MZWFkVmlzdWFsRWxlbWVudCgpO1xuICAgICAgICAgICAgICAgIHVuc3Vic2NyaWJlRnJvbUxlYWRWaXN1YWxFbGVtZW50ID0gcG9wbW90aW9uLnBpcGUobmV3TGVhZC5vblNldEF4aXNUYXJnZXQoZWxlbWVudC5zY2hlZHVsZVVwZGF0ZUxheW91dFByb2plY3Rpb24pLCBuZXdMZWFkLm9uTGF5b3V0QW5pbWF0aW9uQ29tcGxldGUoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlbGVtZW50LmlzUHJlc2VudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5wcmVzZW5jZSA9IFByZXNlbmNlLlByZXNlbnQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAoX2EgPSBlbGVtZW50LmxheW91dFNhZmVUb1JlbW92ZSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmNhbGwoZWxlbWVudCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICB9LCBcbiAgICAgICAgICAgIC8vIFRPRE86IENsZWFuIHRoaXMgdXBcbiAgICAgICAgICAgIGlzUHJlc2VudDogdHJ1ZSwgcHJlc2VuY2U6IFByZXNlbmNlLkVudGVyaW5nIH0pO1xuICAgICAgICByZXR1cm4gZWxlbWVudDtcbiAgICB9O1xufTtcbmZ1bmN0aW9uIGZpcmVSZXNvbHZlUmVsYXRpdmVUYXJnZXRCb3goY2hpbGQpIHtcbiAgICBjaGlsZC5yZXNvbHZlUmVsYXRpdmVUYXJnZXRCb3goKTtcbn1cbmZ1bmN0aW9uIGZpcmVVcGRhdGVMYXlvdXRQcm9qZWN0aW9uKGNoaWxkKSB7XG4gICAgY2hpbGQudXBkYXRlTGF5b3V0UHJvamVjdGlvbigpO1xufVxudmFyIHZhcmlhbnRQcm9wcyA9IHRzbGliLl9fc3ByZWFkQXJyYXkoW1wiaW5pdGlhbFwiXSwgdHNsaWIuX19yZWFkKHZhcmlhbnRQcmlvcml0eU9yZGVyKSk7XG52YXIgbnVtVmFyaWFudFByb3BzID0gdmFyaWFudFByb3BzLmxlbmd0aDtcblxudmFyIHBvc2l0aW9uYWxLZXlzID0gbmV3IFNldChbXG4gICAgXCJ3aWR0aFwiLFxuICAgIFwiaGVpZ2h0XCIsXG4gICAgXCJ0b3BcIixcbiAgICBcImxlZnRcIixcbiAgICBcInJpZ2h0XCIsXG4gICAgXCJib3R0b21cIixcbiAgICBcInhcIixcbiAgICBcInlcIixcbl0pO1xudmFyIGlzUG9zaXRpb25hbEtleSA9IGZ1bmN0aW9uIChrZXkpIHsgcmV0dXJuIHBvc2l0aW9uYWxLZXlzLmhhcyhrZXkpOyB9O1xudmFyIGhhc1Bvc2l0aW9uYWxLZXkgPSBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKHRhcmdldCkuc29tZShpc1Bvc2l0aW9uYWxLZXkpO1xufTtcbnZhciBzZXRBbmRSZXNldFZlbG9jaXR5ID0gZnVuY3Rpb24gKHZhbHVlLCB0bykge1xuICAgIC8vIExvb2tzIG9kZCBidXQgc2V0dGluZyBpdCB0d2ljZSBkb2Vzbid0IHJlbmRlciwgaXQnbGwganVzdFxuICAgIC8vIHNldCBib3RoIHByZXYgYW5kIGN1cnJlbnQgdG8gdGhlIGxhdGVzdCB2YWx1ZVxuICAgIHZhbHVlLnNldCh0bywgZmFsc2UpO1xuICAgIHZhbHVlLnNldCh0byk7XG59O1xudmFyIGlzTnVtT3JQeFR5cGUgPSBmdW5jdGlvbiAodikge1xuICAgIHJldHVybiB2ID09PSBzdHlsZVZhbHVlVHlwZXMubnVtYmVyIHx8IHYgPT09IHN0eWxlVmFsdWVUeXBlcy5weDtcbn07XG52YXIgQm91bmRpbmdCb3hEaW1lbnNpb247XG4oZnVuY3Rpb24gKEJvdW5kaW5nQm94RGltZW5zaW9uKSB7XG4gICAgQm91bmRpbmdCb3hEaW1lbnNpb25bXCJ3aWR0aFwiXSA9IFwid2lkdGhcIjtcbiAgICBCb3VuZGluZ0JveERpbWVuc2lvbltcImhlaWdodFwiXSA9IFwiaGVpZ2h0XCI7XG4gICAgQm91bmRpbmdCb3hEaW1lbnNpb25bXCJsZWZ0XCJdID0gXCJsZWZ0XCI7XG4gICAgQm91bmRpbmdCb3hEaW1lbnNpb25bXCJyaWdodFwiXSA9IFwicmlnaHRcIjtcbiAgICBCb3VuZGluZ0JveERpbWVuc2lvbltcInRvcFwiXSA9IFwidG9wXCI7XG4gICAgQm91bmRpbmdCb3hEaW1lbnNpb25bXCJib3R0b21cIl0gPSBcImJvdHRvbVwiO1xufSkoQm91bmRpbmdCb3hEaW1lbnNpb24gfHwgKEJvdW5kaW5nQm94RGltZW5zaW9uID0ge30pKTtcbnZhciBnZXRQb3NGcm9tTWF0cml4ID0gZnVuY3Rpb24gKG1hdHJpeCwgcG9zKSB7XG4gICAgcmV0dXJuIHBhcnNlRmxvYXQobWF0cml4LnNwbGl0KFwiLCBcIilbcG9zXSk7XG59O1xudmFyIGdldFRyYW5zbGF0ZUZyb21NYXRyaXggPSBmdW5jdGlvbiAocG9zMiwgcG9zMykgeyByZXR1cm4gZnVuY3Rpb24gKF9iYm94LCBfYSkge1xuICAgIHZhciB0cmFuc2Zvcm0gPSBfYS50cmFuc2Zvcm07XG4gICAgaWYgKHRyYW5zZm9ybSA9PT0gXCJub25lXCIgfHwgIXRyYW5zZm9ybSlcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgdmFyIG1hdHJpeDNkID0gdHJhbnNmb3JtLm1hdGNoKC9ebWF0cml4M2RcXCgoLispXFwpJC8pO1xuICAgIGlmIChtYXRyaXgzZCkge1xuICAgICAgICByZXR1cm4gZ2V0UG9zRnJvbU1hdHJpeChtYXRyaXgzZFsxXSwgcG9zMyk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB2YXIgbWF0cml4ID0gdHJhbnNmb3JtLm1hdGNoKC9ebWF0cml4XFwoKC4rKVxcKSQvKTtcbiAgICAgICAgaWYgKG1hdHJpeCkge1xuICAgICAgICAgICAgcmV0dXJuIGdldFBvc0Zyb21NYXRyaXgobWF0cml4WzFdLCBwb3MyKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9XG4gICAgfVxufTsgfTtcbnZhciB0cmFuc2Zvcm1LZXlzID0gbmV3IFNldChbXCJ4XCIsIFwieVwiLCBcInpcIl0pO1xudmFyIG5vblRyYW5zbGF0aW9uYWxUcmFuc2Zvcm1LZXlzID0gdHJhbnNmb3JtUHJvcHMuZmlsdGVyKGZ1bmN0aW9uIChrZXkpIHsgcmV0dXJuICF0cmFuc2Zvcm1LZXlzLmhhcyhrZXkpOyB9KTtcbmZ1bmN0aW9uIHJlbW92ZU5vblRyYW5zbGF0aW9uYWxUcmFuc2Zvcm0odmlzdWFsRWxlbWVudCkge1xuICAgIHZhciByZW1vdmVkVHJhbnNmb3JtcyA9IFtdO1xuICAgIG5vblRyYW5zbGF0aW9uYWxUcmFuc2Zvcm1LZXlzLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICB2YXIgdmFsdWUgPSB2aXN1YWxFbGVtZW50LmdldFZhbHVlKGtleSk7XG4gICAgICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZW1vdmVkVHJhbnNmb3Jtcy5wdXNoKFtrZXksIHZhbHVlLmdldCgpXSk7XG4gICAgICAgICAgICB2YWx1ZS5zZXQoa2V5LnN0YXJ0c1dpdGgoXCJzY2FsZVwiKSA/IDEgOiAwKTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIC8vIEFwcGx5IGNoYW5nZXMgdG8gZWxlbWVudCBiZWZvcmUgbWVhc3VyZW1lbnRcbiAgICBpZiAocmVtb3ZlZFRyYW5zZm9ybXMubGVuZ3RoKVxuICAgICAgICB2aXN1YWxFbGVtZW50LnN5bmNSZW5kZXIoKTtcbiAgICByZXR1cm4gcmVtb3ZlZFRyYW5zZm9ybXM7XG59XG52YXIgcG9zaXRpb25hbFZhbHVlcyA9IHtcbiAgICAvLyBEaW1lbnNpb25zXG4gICAgd2lkdGg6IGZ1bmN0aW9uIChfYSkge1xuICAgICAgICB2YXIgeCA9IF9hLng7XG4gICAgICAgIHJldHVybiB4Lm1heCAtIHgubWluO1xuICAgIH0sXG4gICAgaGVpZ2h0OiBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgdmFyIHkgPSBfYS55O1xuICAgICAgICByZXR1cm4geS5tYXggLSB5Lm1pbjtcbiAgICB9LFxuICAgIHRvcDogZnVuY3Rpb24gKF9iYm94LCBfYSkge1xuICAgICAgICB2YXIgdG9wID0gX2EudG9wO1xuICAgICAgICByZXR1cm4gcGFyc2VGbG9hdCh0b3ApO1xuICAgIH0sXG4gICAgbGVmdDogZnVuY3Rpb24gKF9iYm94LCBfYSkge1xuICAgICAgICB2YXIgbGVmdCA9IF9hLmxlZnQ7XG4gICAgICAgIHJldHVybiBwYXJzZUZsb2F0KGxlZnQpO1xuICAgIH0sXG4gICAgYm90dG9tOiBmdW5jdGlvbiAoX2EsIF9iKSB7XG4gICAgICAgIHZhciB5ID0gX2EueTtcbiAgICAgICAgdmFyIHRvcCA9IF9iLnRvcDtcbiAgICAgICAgcmV0dXJuIHBhcnNlRmxvYXQodG9wKSArICh5Lm1heCAtIHkubWluKTtcbiAgICB9LFxuICAgIHJpZ2h0OiBmdW5jdGlvbiAoX2EsIF9iKSB7XG4gICAgICAgIHZhciB4ID0gX2EueDtcbiAgICAgICAgdmFyIGxlZnQgPSBfYi5sZWZ0O1xuICAgICAgICByZXR1cm4gcGFyc2VGbG9hdChsZWZ0KSArICh4Lm1heCAtIHgubWluKTtcbiAgICB9LFxuICAgIC8vIFRyYW5zZm9ybVxuICAgIHg6IGdldFRyYW5zbGF0ZUZyb21NYXRyaXgoNCwgMTMpLFxuICAgIHk6IGdldFRyYW5zbGF0ZUZyb21NYXRyaXgoNSwgMTQpLFxufTtcbnZhciBjb252ZXJ0Q2hhbmdlZFZhbHVlVHlwZXMgPSBmdW5jdGlvbiAodGFyZ2V0LCB2aXN1YWxFbGVtZW50LCBjaGFuZ2VkS2V5cykge1xuICAgIHZhciBvcmlnaW5CYm94ID0gdmlzdWFsRWxlbWVudC5tZWFzdXJlVmlld3BvcnRCb3goKTtcbiAgICB2YXIgZWxlbWVudCA9IHZpc3VhbEVsZW1lbnQuZ2V0SW5zdGFuY2UoKTtcbiAgICB2YXIgZWxlbWVudENvbXB1dGVkU3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpO1xuICAgIHZhciBkaXNwbGF5ID0gZWxlbWVudENvbXB1dGVkU3R5bGUuZGlzcGxheSwgdG9wID0gZWxlbWVudENvbXB1dGVkU3R5bGUudG9wLCBsZWZ0ID0gZWxlbWVudENvbXB1dGVkU3R5bGUubGVmdCwgYm90dG9tID0gZWxlbWVudENvbXB1dGVkU3R5bGUuYm90dG9tLCByaWdodCA9IGVsZW1lbnRDb21wdXRlZFN0eWxlLnJpZ2h0LCB0cmFuc2Zvcm0gPSBlbGVtZW50Q29tcHV0ZWRTdHlsZS50cmFuc2Zvcm07XG4gICAgdmFyIG9yaWdpbkNvbXB1dGVkU3R5bGUgPSB7IHRvcDogdG9wLCBsZWZ0OiBsZWZ0LCBib3R0b206IGJvdHRvbSwgcmlnaHQ6IHJpZ2h0LCB0cmFuc2Zvcm06IHRyYW5zZm9ybSB9O1xuICAgIC8vIElmIHRoZSBlbGVtZW50IGlzIGN1cnJlbnRseSBzZXQgdG8gZGlzcGxheTogXCJub25lXCIsIG1ha2UgaXQgdmlzaWJsZSBiZWZvcmVcbiAgICAvLyBtZWFzdXJpbmcgdGhlIHRhcmdldCBib3VuZGluZyBib3hcbiAgICBpZiAoZGlzcGxheSA9PT0gXCJub25lXCIpIHtcbiAgICAgICAgdmlzdWFsRWxlbWVudC5zZXRTdGF0aWNWYWx1ZShcImRpc3BsYXlcIiwgdGFyZ2V0LmRpc3BsYXkgfHwgXCJibG9ja1wiKTtcbiAgICB9XG4gICAgLy8gQXBwbHkgdGhlIGxhdGVzdCB2YWx1ZXMgKGFzIHNldCBpbiBjaGVja0FuZENvbnZlcnRDaGFuZ2VkVmFsdWVUeXBlcylcbiAgICB2aXN1YWxFbGVtZW50LnN5bmNSZW5kZXIoKTtcbiAgICB2YXIgdGFyZ2V0QmJveCA9IHZpc3VhbEVsZW1lbnQubWVhc3VyZVZpZXdwb3J0Qm94KCk7XG4gICAgY2hhbmdlZEtleXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIC8vIFJlc3RvcmUgc3R5bGVzIHRvIHRoZWlyICoqY2FsY3VsYXRlZCBjb21wdXRlZCBzdHlsZSoqLCBub3QgdGhlaXIgYWN0dWFsXG4gICAgICAgIC8vIG9yaWdpbmFsbHkgc2V0IHN0eWxlLiBUaGlzIGFsbG93cyB1cyB0byBhbmltYXRlIGJldHdlZW4gZXF1aXZhbGVudCBwaXhlbCB1bml0cy5cbiAgICAgICAgdmFyIHZhbHVlID0gdmlzdWFsRWxlbWVudC5nZXRWYWx1ZShrZXkpO1xuICAgICAgICBzZXRBbmRSZXNldFZlbG9jaXR5KHZhbHVlLCBwb3NpdGlvbmFsVmFsdWVzW2tleV0ob3JpZ2luQmJveCwgb3JpZ2luQ29tcHV0ZWRTdHlsZSkpO1xuICAgICAgICB0YXJnZXRba2V5XSA9IHBvc2l0aW9uYWxWYWx1ZXNba2V5XSh0YXJnZXRCYm94LCBlbGVtZW50Q29tcHV0ZWRTdHlsZSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHRhcmdldDtcbn07XG52YXIgY2hlY2tBbmRDb252ZXJ0Q2hhbmdlZFZhbHVlVHlwZXMgPSBmdW5jdGlvbiAodmlzdWFsRWxlbWVudCwgdGFyZ2V0LCBvcmlnaW4sIHRyYW5zaXRpb25FbmQpIHtcbiAgICBpZiAob3JpZ2luID09PSB2b2lkIDApIHsgb3JpZ2luID0ge307IH1cbiAgICBpZiAodHJhbnNpdGlvbkVuZCA9PT0gdm9pZCAwKSB7IHRyYW5zaXRpb25FbmQgPSB7fTsgfVxuICAgIHRhcmdldCA9IHRzbGliLl9fYXNzaWduKHt9LCB0YXJnZXQpO1xuICAgIHRyYW5zaXRpb25FbmQgPSB0c2xpYi5fX2Fzc2lnbih7fSwgdHJhbnNpdGlvbkVuZCk7XG4gICAgdmFyIHRhcmdldFBvc2l0aW9uYWxLZXlzID0gT2JqZWN0LmtleXModGFyZ2V0KS5maWx0ZXIoaXNQb3NpdGlvbmFsS2V5KTtcbiAgICAvLyBXZSB3YW50IHRvIHJlbW92ZSBhbnkgdHJhbnNmb3JtIHZhbHVlcyB0aGF0IGNvdWxkIGFmZmVjdCB0aGUgZWxlbWVudCdzIGJvdW5kaW5nIGJveCBiZWZvcmVcbiAgICAvLyBpdCdzIG1lYXN1cmVkLiBXZSdsbCByZWFwcGx5IHRoZXNlIGxhdGVyLlxuICAgIHZhciByZW1vdmVkVHJhbnNmb3JtVmFsdWVzID0gW107XG4gICAgdmFyIGhhc0F0dGVtcHRlZFRvUmVtb3ZlVHJhbnNmb3JtVmFsdWVzID0gZmFsc2U7XG4gICAgdmFyIGNoYW5nZWRWYWx1ZVR5cGVLZXlzID0gW107XG4gICAgdGFyZ2V0UG9zaXRpb25hbEtleXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IHZpc3VhbEVsZW1lbnQuZ2V0VmFsdWUoa2V5KTtcbiAgICAgICAgaWYgKCF2aXN1YWxFbGVtZW50Lmhhc1ZhbHVlKGtleSkpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHZhciBmcm9tID0gb3JpZ2luW2tleV07XG4gICAgICAgIHZhciB0byA9IHRhcmdldFtrZXldO1xuICAgICAgICB2YXIgZnJvbVR5cGUgPSBmaW5kRGltZW5zaW9uVmFsdWVUeXBlKGZyb20pO1xuICAgICAgICB2YXIgdG9UeXBlO1xuICAgICAgICAvLyBUT0RPOiBUaGUgY3VycmVudCBpbXBsZW1lbnRhdGlvbiBvZiB0aGlzIGJhc2ljYWxseSB0aHJvd3MgYW4gZXJyb3JcbiAgICAgICAgLy8gaWYgeW91IHRyeSBhbmQgZG8gdmFsdWUgY29udmVyc2lvbiB2aWEga2V5ZnJhbWVzLiBUaGVyZSdzIHByb2JhYmx5XG4gICAgICAgIC8vIGEgd2F5IG9mIGRvaW5nIHRoaXMgYnV0IHRoZSBwZXJmb3JtYW5jZSBpbXBsaWNhdGlvbnMgd291bGQgbmVlZCBncmVhdGVyIHNjcnV0aW55LFxuICAgICAgICAvLyBhcyBpdCdkIGJlIGRvaW5nIG11bHRpcGxlIHJlc2l6ZS1yZW1lYXN1cmUgb3BlcmF0aW9ucy5cbiAgICAgICAgaWYgKGlzS2V5ZnJhbWVzVGFyZ2V0KHRvKSkge1xuICAgICAgICAgICAgdmFyIG51bUtleWZyYW1lcyA9IHRvLmxlbmd0aDtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSB0b1swXSA9PT0gbnVsbCA/IDEgOiAwOyBpIDwgbnVtS2V5ZnJhbWVzOyBpKyspIHtcbiAgICAgICAgICAgICAgICBpZiAoIXRvVHlwZSkge1xuICAgICAgICAgICAgICAgICAgICB0b1R5cGUgPSBmaW5kRGltZW5zaW9uVmFsdWVUeXBlKHRvW2ldKTtcbiAgICAgICAgICAgICAgICAgICAgaGV5TGlzdGVuLmludmFyaWFudCh0b1R5cGUgPT09IGZyb21UeXBlIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAoaXNOdW1PclB4VHlwZShmcm9tVHlwZSkgJiYgaXNOdW1PclB4VHlwZSh0b1R5cGUpKSwgXCJLZXlmcmFtZXMgbXVzdCBiZSBvZiB0aGUgc2FtZSBkaW1lbnNpb24gYXMgdGhlIGN1cnJlbnQgdmFsdWVcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBoZXlMaXN0ZW4uaW52YXJpYW50KGZpbmREaW1lbnNpb25WYWx1ZVR5cGUodG9baV0pID09PSB0b1R5cGUsIFwiQWxsIGtleWZyYW1lcyBtdXN0IGJlIG9mIHRoZSBzYW1lIHR5cGVcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdG9UeXBlID0gZmluZERpbWVuc2lvblZhbHVlVHlwZSh0byk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGZyb21UeXBlICE9PSB0b1R5cGUpIHtcbiAgICAgICAgICAgIC8vIElmIHRoZXkncmUgYm90aCBqdXN0IG51bWJlciBvciBweCwgY29udmVydCB0aGVtIGJvdGggdG8gbnVtYmVycyByYXRoZXIgdGhhblxuICAgICAgICAgICAgLy8gcmVseWluZyBvbiByZXNpemUvcmVtZWFzdXJlIHRvIGNvbnZlcnQgKHdoaWNoIGlzIHdhc3RlZnVsIGluIHRoaXMgc2l0dWF0aW9uKVxuICAgICAgICAgICAgaWYgKGlzTnVtT3JQeFR5cGUoZnJvbVR5cGUpICYmIGlzTnVtT3JQeFR5cGUodG9UeXBlKSkge1xuICAgICAgICAgICAgICAgIHZhciBjdXJyZW50ID0gdmFsdWUuZ2V0KCk7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBjdXJyZW50ID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlLnNldChwYXJzZUZsb2F0KGN1cnJlbnQpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB0byA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXRba2V5XSA9IHBhcnNlRmxvYXQodG8pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChBcnJheS5pc0FycmF5KHRvKSAmJiB0b1R5cGUgPT09IHN0eWxlVmFsdWVUeXBlcy5weCkge1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXRba2V5XSA9IHRvLm1hcChwYXJzZUZsb2F0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICgoZnJvbVR5cGUgPT09IG51bGwgfHwgZnJvbVR5cGUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGZyb21UeXBlLnRyYW5zZm9ybSkgJiZcbiAgICAgICAgICAgICAgICAodG9UeXBlID09PSBudWxsIHx8IHRvVHlwZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogdG9UeXBlLnRyYW5zZm9ybSkgJiZcbiAgICAgICAgICAgICAgICAoZnJvbSA9PT0gMCB8fCB0byA9PT0gMCkpIHtcbiAgICAgICAgICAgICAgICAvLyBJZiBvbmUgb3IgdGhlIG90aGVyIHZhbHVlIGlzIDAsIGl0J3Mgc2FmZSB0byBjb2VyY2UgaXQgdG8gdGhlXG4gICAgICAgICAgICAgICAgLy8gdHlwZSBvZiB0aGUgb3RoZXIgd2l0aG91dCBtZWFzdXJlbWVudFxuICAgICAgICAgICAgICAgIGlmIChmcm9tID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlLnNldCh0b1R5cGUudHJhbnNmb3JtKGZyb20pKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldFtrZXldID0gZnJvbVR5cGUudHJhbnNmb3JtKHRvKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBJZiB3ZSdyZSBnb2luZyB0byBkbyB2YWx1ZSBjb252ZXJzaW9uIHZpYSBET00gbWVhc3VyZW1lbnRzLCB3ZSBmaXJzdFxuICAgICAgICAgICAgICAgIC8vIG5lZWQgdG8gcmVtb3ZlIG5vbi1wb3NpdGlvbmFsIHRyYW5zZm9ybSB2YWx1ZXMgdGhhdCBjb3VsZCBhZmZlY3QgdGhlIGJib3ggbWVhc3VyZW1lbnRzLlxuICAgICAgICAgICAgICAgIGlmICghaGFzQXR0ZW1wdGVkVG9SZW1vdmVUcmFuc2Zvcm1WYWx1ZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVtb3ZlZFRyYW5zZm9ybVZhbHVlcyA9IHJlbW92ZU5vblRyYW5zbGF0aW9uYWxUcmFuc2Zvcm0odmlzdWFsRWxlbWVudCk7XG4gICAgICAgICAgICAgICAgICAgIGhhc0F0dGVtcHRlZFRvUmVtb3ZlVHJhbnNmb3JtVmFsdWVzID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2hhbmdlZFZhbHVlVHlwZUtleXMucHVzaChrZXkpO1xuICAgICAgICAgICAgICAgIHRyYW5zaXRpb25FbmRba2V5XSA9XG4gICAgICAgICAgICAgICAgICAgIHRyYW5zaXRpb25FbmRba2V5XSAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgICAgICAgICA/IHRyYW5zaXRpb25FbmRba2V5XVxuICAgICAgICAgICAgICAgICAgICAgICAgOiB0YXJnZXRba2V5XTtcbiAgICAgICAgICAgICAgICBzZXRBbmRSZXNldFZlbG9jaXR5KHZhbHVlLCB0byk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAoY2hhbmdlZFZhbHVlVHlwZUtleXMubGVuZ3RoKSB7XG4gICAgICAgIHZhciBjb252ZXJ0ZWRUYXJnZXQgPSBjb252ZXJ0Q2hhbmdlZFZhbHVlVHlwZXModGFyZ2V0LCB2aXN1YWxFbGVtZW50LCBjaGFuZ2VkVmFsdWVUeXBlS2V5cyk7XG4gICAgICAgIC8vIElmIHdlIHJlbW92ZWQgdHJhbnNmb3JtIHZhbHVlcywgcmVhcHBseSB0aGVtIGJlZm9yZSB0aGUgbmV4dCByZW5kZXJcbiAgICAgICAgaWYgKHJlbW92ZWRUcmFuc2Zvcm1WYWx1ZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICByZW1vdmVkVHJhbnNmb3JtVmFsdWVzLmZvckVhY2goZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICAgICAgdmFyIF9iID0gdHNsaWIuX19yZWFkKF9hLCAyKSwga2V5ID0gX2JbMF0sIHZhbHVlID0gX2JbMV07XG4gICAgICAgICAgICAgICAgdmlzdWFsRWxlbWVudC5nZXRWYWx1ZShrZXkpLnNldCh2YWx1ZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICAvLyBSZWFwcGx5IG9yaWdpbmFsIHZhbHVlc1xuICAgICAgICB2aXN1YWxFbGVtZW50LnN5bmNSZW5kZXIoKTtcbiAgICAgICAgcmV0dXJuIHsgdGFyZ2V0OiBjb252ZXJ0ZWRUYXJnZXQsIHRyYW5zaXRpb25FbmQ6IHRyYW5zaXRpb25FbmQgfTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiB7IHRhcmdldDogdGFyZ2V0LCB0cmFuc2l0aW9uRW5kOiB0cmFuc2l0aW9uRW5kIH07XG4gICAgfVxufTtcbi8qKlxuICogQ29udmVydCB2YWx1ZSB0eXBlcyBmb3IgeC95L3dpZHRoL2hlaWdodC90b3AvbGVmdC9ib3R0b20vcmlnaHRcbiAqXG4gKiBBbGxvd3MgYW5pbWF0aW9uIGJldHdlZW4gYCdhdXRvJ2AgLT4gYCcxMDAlJ2Agb3IgYDBgIC0+IGAnY2FsYyg1MCUgLSAxMHZ3KSdgXG4gKlxuICogQGludGVybmFsXG4gKi9cbmZ1bmN0aW9uIHVuaXRDb252ZXJzaW9uKHZpc3VhbEVsZW1lbnQsIHRhcmdldCwgb3JpZ2luLCB0cmFuc2l0aW9uRW5kKSB7XG4gICAgcmV0dXJuIGhhc1Bvc2l0aW9uYWxLZXkodGFyZ2V0KVxuICAgICAgICA/IGNoZWNrQW5kQ29udmVydENoYW5nZWRWYWx1ZVR5cGVzKHZpc3VhbEVsZW1lbnQsIHRhcmdldCwgb3JpZ2luLCB0cmFuc2l0aW9uRW5kKVxuICAgICAgICA6IHsgdGFyZ2V0OiB0YXJnZXQsIHRyYW5zaXRpb25FbmQ6IHRyYW5zaXRpb25FbmQgfTtcbn1cblxuLyoqXG4gKiBQYXJzZSBhIERPTSB2YXJpYW50IHRvIG1ha2UgaXQgYW5pbWF0YWJsZS4gVGhpcyBpbnZvbHZlcyByZXNvbHZpbmcgQ1NTIHZhcmlhYmxlc1xuICogYW5kIGVuc3VyaW5nIGFuaW1hdGlvbnMgbGlrZSBcIjIwJVwiID0+IFwiY2FsYyg1MHZ3KVwiIGFyZSBwZXJmb3JtZWQgaW4gcGl4ZWxzLlxuICovXG52YXIgcGFyc2VEb21WYXJpYW50ID0gZnVuY3Rpb24gKHZpc3VhbEVsZW1lbnQsIHRhcmdldCwgb3JpZ2luLCB0cmFuc2l0aW9uRW5kKSB7XG4gICAgdmFyIHJlc29sdmVkID0gcmVzb2x2ZUNTU1ZhcmlhYmxlcyh2aXN1YWxFbGVtZW50LCB0YXJnZXQsIHRyYW5zaXRpb25FbmQpO1xuICAgIHRhcmdldCA9IHJlc29sdmVkLnRhcmdldDtcbiAgICB0cmFuc2l0aW9uRW5kID0gcmVzb2x2ZWQudHJhbnNpdGlvbkVuZDtcbiAgICByZXR1cm4gdW5pdENvbnZlcnNpb24odmlzdWFsRWxlbWVudCwgdGFyZ2V0LCBvcmlnaW4sIHRyYW5zaXRpb25FbmQpO1xufTtcblxuZnVuY3Rpb24gZ2V0Q29tcHV0ZWRTdHlsZSQxKGVsZW1lbnQpIHtcbiAgICByZXR1cm4gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWxlbWVudCk7XG59XG52YXIgaHRtbENvbmZpZyA9IHtcbiAgICB0cmVlVHlwZTogXCJkb21cIixcbiAgICByZWFkVmFsdWVGcm9tSW5zdGFuY2U6IGZ1bmN0aW9uIChkb21FbGVtZW50LCBrZXkpIHtcbiAgICAgICAgaWYgKGlzVHJhbnNmb3JtUHJvcChrZXkpKSB7XG4gICAgICAgICAgICB2YXIgZGVmYXVsdFR5cGUgPSBnZXREZWZhdWx0VmFsdWVUeXBlKGtleSk7XG4gICAgICAgICAgICByZXR1cm4gZGVmYXVsdFR5cGUgPyBkZWZhdWx0VHlwZS5kZWZhdWx0IHx8IDAgOiAwO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdmFyIGNvbXB1dGVkU3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlJDEoZG9tRWxlbWVudCk7XG4gICAgICAgICAgICByZXR1cm4gKChpc0NTU1ZhcmlhYmxlJDEoa2V5KVxuICAgICAgICAgICAgICAgID8gY29tcHV0ZWRTdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKGtleSlcbiAgICAgICAgICAgICAgICA6IGNvbXB1dGVkU3R5bGVba2V5XSkgfHwgMCk7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIHNvcnROb2RlUG9zaXRpb246IGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBjb21wYXJlRG9jdW1lbnRQb3NpdGlvbiByZXR1cm5zIGEgYml0bWFzaywgYnkgdXNpbmcgdGhlIGJpdHdpc2UgJlxuICAgICAgICAgKiB3ZSdyZSByZXR1cm5pbmcgdHJ1ZSBpZiAyIGluIHRoYXQgYml0bWFzayBpcyBzZXQgdG8gdHJ1ZS4gMiBpcyBzZXRcbiAgICAgICAgICogdG8gdHJ1ZSBpZiBiIHByZWNlZWRzIGEuXG4gICAgICAgICAqL1xuICAgICAgICByZXR1cm4gYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihiKSAmIDIgPyAxIDogLTE7XG4gICAgfSxcbiAgICBnZXRCYXNlVGFyZ2V0OiBmdW5jdGlvbiAocHJvcHMsIGtleSkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHJldHVybiAoX2EgPSBwcm9wcy5zdHlsZSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hW2tleV07XG4gICAgfSxcbiAgICBtZWFzdXJlVmlld3BvcnRCb3g6IGZ1bmN0aW9uIChlbGVtZW50LCBfYSkge1xuICAgICAgICB2YXIgdHJhbnNmb3JtUGFnZVBvaW50ID0gX2EudHJhbnNmb3JtUGFnZVBvaW50O1xuICAgICAgICByZXR1cm4gZ2V0Qm91bmRpbmdCb3goZWxlbWVudCwgdHJhbnNmb3JtUGFnZVBvaW50KTtcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIFJlc2V0IHRoZSB0cmFuc2Zvcm0gb24gdGhlIGN1cnJlbnQgRWxlbWVudC4gVGhpcyBpcyBjYWxsZWQgYXMgcGFydFxuICAgICAqIG9mIGEgYmF0Y2hlZCBwcm9jZXNzIGFjcm9zcyB0aGUgZW50aXJlIGxheW91dCB0cmVlLiBUbyByZW1vdmUgdGhpcyB3cml0ZVxuICAgICAqIGN5Y2xlIGl0J2QgYmUgaW50ZXJlc3RpbmcgdG8gc2VlIGlmIGl0J3MgcG9zc2libGUgdG8gXCJ1bmRvXCIgYWxsIHRoZSBjdXJyZW50XG4gICAgICogbGF5b3V0IHRyYW5zZm9ybXMgdXAgdGhlIHRyZWUgaW4gdGhlIHNhbWUgd2F5IHRoaXMuZ2V0Qm91bmRpbmdCb3hXaXRob3V0VHJhbnNmb3Jtc1xuICAgICAqIHdvcmtzXG4gICAgICovXG4gICAgcmVzZXRUcmFuc2Zvcm06IGZ1bmN0aW9uIChlbGVtZW50LCBkb21FbGVtZW50LCBwcm9wcykge1xuICAgICAgICB2YXIgdHJhbnNmb3JtVGVtcGxhdGUgPSBwcm9wcy50cmFuc2Zvcm1UZW1wbGF0ZTtcbiAgICAgICAgZG9tRWxlbWVudC5zdHlsZS50cmFuc2Zvcm0gPSB0cmFuc2Zvcm1UZW1wbGF0ZVxuICAgICAgICAgICAgPyB0cmFuc2Zvcm1UZW1wbGF0ZSh7fSwgXCJcIilcbiAgICAgICAgICAgIDogXCJub25lXCI7XG4gICAgICAgIC8vIEVuc3VyZSB0aGF0IHdoYXRldmVyIGhhcHBlbnMgbmV4dCwgd2UgcmVzdG9yZSBvdXIgdHJhbnNmb3JtIG9uIHRoZSBuZXh0IGZyYW1lXG4gICAgICAgIGVsZW1lbnQuc2NoZWR1bGVSZW5kZXIoKTtcbiAgICB9LFxuICAgIHJlc3RvcmVUcmFuc2Zvcm06IGZ1bmN0aW9uIChpbnN0YW5jZSwgbXV0YWJsZVN0YXRlKSB7XG4gICAgICAgIGluc3RhbmNlLnN0eWxlLnRyYW5zZm9ybSA9IG11dGFibGVTdGF0ZS5zdHlsZS50cmFuc2Zvcm07XG4gICAgfSxcbiAgICByZW1vdmVWYWx1ZUZyb21SZW5kZXJTdGF0ZTogZnVuY3Rpb24gKGtleSwgX2EpIHtcbiAgICAgICAgdmFyIHZhcnMgPSBfYS52YXJzLCBzdHlsZSA9IF9hLnN0eWxlO1xuICAgICAgICBkZWxldGUgdmFyc1trZXldO1xuICAgICAgICBkZWxldGUgc3R5bGVba2V5XTtcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIEVuc3VyZSB0aGF0IEhUTUwgYW5kIEZyYW1lci1zcGVjaWZpYyB2YWx1ZSB0eXBlcyBsaWtlIGBweGAtPmAlYCBhbmQgYENvbG9yYFxuICAgICAqIGNhbiBiZSBhbmltYXRlZCBieSBNb3Rpb24uXG4gICAgICovXG4gICAgbWFrZVRhcmdldEFuaW1hdGFibGU6IGZ1bmN0aW9uIChlbGVtZW50LCBfYSwgX2IsIGlzTW91bnRlZCkge1xuICAgICAgICB2YXIgdHJhbnNmb3JtVmFsdWVzID0gX2IudHJhbnNmb3JtVmFsdWVzO1xuICAgICAgICBpZiAoaXNNb3VudGVkID09PSB2b2lkIDApIHsgaXNNb3VudGVkID0gdHJ1ZTsgfVxuICAgICAgICB2YXIgdHJhbnNpdGlvbiA9IF9hLnRyYW5zaXRpb24sIHRyYW5zaXRpb25FbmQgPSBfYS50cmFuc2l0aW9uRW5kLCB0YXJnZXQgPSB0c2xpYi5fX3Jlc3QoX2EsIFtcInRyYW5zaXRpb25cIiwgXCJ0cmFuc2l0aW9uRW5kXCJdKTtcbiAgICAgICAgdmFyIG9yaWdpbiA9IGdldE9yaWdpbih0YXJnZXQsIHRyYW5zaXRpb24gfHwge30sIGVsZW1lbnQpO1xuICAgICAgICAvKipcbiAgICAgICAgICogSWYgRnJhbWVyIGhhcyBwcm92aWRlZCBhIGZ1bmN0aW9uIHRvIGNvbnZlcnQgYENvbG9yYCBldGMgdmFsdWUgdHlwZXMsIGNvbnZlcnQgdGhlbVxuICAgICAgICAgKi9cbiAgICAgICAgaWYgKHRyYW5zZm9ybVZhbHVlcykge1xuICAgICAgICAgICAgaWYgKHRyYW5zaXRpb25FbmQpXG4gICAgICAgICAgICAgICAgdHJhbnNpdGlvbkVuZCA9IHRyYW5zZm9ybVZhbHVlcyh0cmFuc2l0aW9uRW5kKTtcbiAgICAgICAgICAgIGlmICh0YXJnZXQpXG4gICAgICAgICAgICAgICAgdGFyZ2V0ID0gdHJhbnNmb3JtVmFsdWVzKHRhcmdldCk7XG4gICAgICAgICAgICBpZiAob3JpZ2luKVxuICAgICAgICAgICAgICAgIG9yaWdpbiA9IHRyYW5zZm9ybVZhbHVlcyhvcmlnaW4pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc01vdW50ZWQpIHtcbiAgICAgICAgICAgIGNoZWNrVGFyZ2V0Rm9yTmV3VmFsdWVzKGVsZW1lbnQsIHRhcmdldCwgb3JpZ2luKTtcbiAgICAgICAgICAgIHZhciBwYXJzZWQgPSBwYXJzZURvbVZhcmlhbnQoZWxlbWVudCwgdGFyZ2V0LCBvcmlnaW4sIHRyYW5zaXRpb25FbmQpO1xuICAgICAgICAgICAgdHJhbnNpdGlvbkVuZCA9IHBhcnNlZC50cmFuc2l0aW9uRW5kO1xuICAgICAgICAgICAgdGFyZ2V0ID0gcGFyc2VkLnRhcmdldDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHNsaWIuX19hc3NpZ24oeyB0cmFuc2l0aW9uOiB0cmFuc2l0aW9uLFxuICAgICAgICAgICAgdHJhbnNpdGlvbkVuZDogdHJhbnNpdGlvbkVuZCB9LCB0YXJnZXQpO1xuICAgIH0sXG4gICAgc2NyYXBlTW90aW9uVmFsdWVzRnJvbVByb3BzOiBzY3JhcGVNb3Rpb25WYWx1ZXNGcm9tUHJvcHMkMSxcbiAgICBidWlsZDogZnVuY3Rpb24gKGVsZW1lbnQsIHJlbmRlclN0YXRlLCBsYXRlc3RWYWx1ZXMsIHByb2plY3Rpb24sIGxheW91dFN0YXRlLCBvcHRpb25zLCBwcm9wcykge1xuICAgICAgICBpZiAoZWxlbWVudC5pc1Zpc2libGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmVuZGVyU3RhdGUuc3R5bGUudmlzaWJpbGl0eSA9IGVsZW1lbnQuaXNWaXNpYmxlXG4gICAgICAgICAgICAgICAgPyBcInZpc2libGVcIlxuICAgICAgICAgICAgICAgIDogXCJoaWRkZW5cIjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgaXNQcm9qZWN0aW9uVHJhbmZvcm0gPSBwcm9qZWN0aW9uLmlzRW5hYmxlZCAmJiBsYXlvdXRTdGF0ZS5pc0h5ZHJhdGVkO1xuICAgICAgICBidWlsZEhUTUxTdHlsZXMocmVuZGVyU3RhdGUsIGxhdGVzdFZhbHVlcywgcHJvamVjdGlvbiwgbGF5b3V0U3RhdGUsIG9wdGlvbnMsIHByb3BzLnRyYW5zZm9ybVRlbXBsYXRlLCBpc1Byb2plY3Rpb25UcmFuZm9ybSA/IGJ1aWxkTGF5b3V0UHJvamVjdGlvblRyYW5zZm9ybSA6IHVuZGVmaW5lZCwgaXNQcm9qZWN0aW9uVHJhbmZvcm1cbiAgICAgICAgICAgID8gYnVpbGRMYXlvdXRQcm9qZWN0aW9uVHJhbnNmb3JtT3JpZ2luXG4gICAgICAgICAgICA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICByZW5kZXI6IHJlbmRlckhUTUwsXG59O1xudmFyIGh0bWxWaXN1YWxFbGVtZW50ID0gdmlzdWFsRWxlbWVudChodG1sQ29uZmlnKTtcblxudmFyIHN2Z1Zpc3VhbEVsZW1lbnQgPSB2aXN1YWxFbGVtZW50KHRzbGliLl9fYXNzaWduKHRzbGliLl9fYXNzaWduKHt9LCBodG1sQ29uZmlnKSwgeyBnZXRCYXNlVGFyZ2V0OiBmdW5jdGlvbiAocHJvcHMsIGtleSkge1xuICAgICAgICByZXR1cm4gcHJvcHNba2V5XTtcbiAgICB9LFxuICAgIHJlYWRWYWx1ZUZyb21JbnN0YW5jZTogZnVuY3Rpb24gKGRvbUVsZW1lbnQsIGtleSkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGlmIChpc1RyYW5zZm9ybVByb3Aoa2V5KSkge1xuICAgICAgICAgICAgcmV0dXJuICgoX2EgPSBnZXREZWZhdWx0VmFsdWVUeXBlKGtleSkpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5kZWZhdWx0KSB8fCAwO1xuICAgICAgICB9XG4gICAgICAgIGtleSA9ICFjYW1lbENhc2VBdHRyaWJ1dGVzLmhhcyhrZXkpID8gY2FtZWxUb0Rhc2goa2V5KSA6IGtleTtcbiAgICAgICAgcmV0dXJuIGRvbUVsZW1lbnQuZ2V0QXR0cmlidXRlKGtleSk7XG4gICAgfSxcbiAgICBzY3JhcGVNb3Rpb25WYWx1ZXNGcm9tUHJvcHM6IHNjcmFwZU1vdGlvblZhbHVlc0Zyb21Qcm9wcyxcbiAgICBidWlsZDogZnVuY3Rpb24gKF9lbGVtZW50LCByZW5kZXJTdGF0ZSwgbGF0ZXN0VmFsdWVzLCBwcm9qZWN0aW9uLCBsYXlvdXRTdGF0ZSwgb3B0aW9ucywgcHJvcHMpIHtcbiAgICAgICAgdmFyIGlzUHJvamVjdGlvblRyYW5mb3JtID0gcHJvamVjdGlvbi5pc0VuYWJsZWQgJiYgbGF5b3V0U3RhdGUuaXNIeWRyYXRlZDtcbiAgICAgICAgYnVpbGRTVkdBdHRycyhyZW5kZXJTdGF0ZSwgbGF0ZXN0VmFsdWVzLCBwcm9qZWN0aW9uLCBsYXlvdXRTdGF0ZSwgb3B0aW9ucywgcHJvcHMudHJhbnNmb3JtVGVtcGxhdGUsIGlzUHJvamVjdGlvblRyYW5mb3JtID8gYnVpbGRMYXlvdXRQcm9qZWN0aW9uVHJhbnNmb3JtIDogdW5kZWZpbmVkLCBpc1Byb2plY3Rpb25UcmFuZm9ybVxuICAgICAgICAgICAgPyBidWlsZExheW91dFByb2plY3Rpb25UcmFuc2Zvcm1PcmlnaW5cbiAgICAgICAgICAgIDogdW5kZWZpbmVkKTtcbiAgICB9LCByZW5kZXI6IHJlbmRlclNWRyB9KSk7XG5cbnZhciBjcmVhdGVEb21WaXN1YWxFbGVtZW50ID0gZnVuY3Rpb24gKENvbXBvbmVudCwgb3B0aW9ucykge1xuICAgIHJldHVybiBpc1NWR0NvbXBvbmVudChDb21wb25lbnQpXG4gICAgICAgID8gc3ZnVmlzdWFsRWxlbWVudChvcHRpb25zLCB7IGVuYWJsZUhhcmR3YXJlQWNjZWxlcmF0aW9uOiBmYWxzZSB9KVxuICAgICAgICA6IGh0bWxWaXN1YWxFbGVtZW50KG9wdGlvbnMsIHsgZW5hYmxlSGFyZHdhcmVBY2NlbGVyYXRpb246IHRydWUgfSk7XG59O1xuXG52YXIgZmVhdHVyZUJ1bmRsZSA9IHRzbGliLl9fYXNzaWduKHRzbGliLl9fYXNzaWduKHRzbGliLl9fYXNzaWduKHRzbGliLl9fYXNzaWduKHt9LCBhbmltYXRpb25zKSwgZ2VzdHVyZUFuaW1hdGlvbnMpLCBkcmFnKSwgbGF5b3V0QW5pbWF0aW9ucyk7XG4vKipcbiAqIEhUTUwgJiBTVkcgY29tcG9uZW50cywgb3B0aW1pc2VkIGZvciB1c2Ugd2l0aCBnZXN0dXJlcyBhbmQgYW5pbWF0aW9uLiBUaGVzZSBjYW4gYmUgdXNlZCBhc1xuICogZHJvcC1pbiByZXBsYWNlbWVudHMgZm9yIGFueSBIVE1MICYgU1ZHIGNvbXBvbmVudCwgYWxsIENTUyAmIFNWRyBwcm9wZXJ0aWVzIGFyZSBzdXBwb3J0ZWQuXG4gKlxuICogQHB1YmxpY1xuICovXG52YXIgbW90aW9uID0gLypAX19QVVJFX18qLyBjcmVhdGVNb3Rpb25Qcm94eShmdW5jdGlvbiAoQ29tcG9uZW50LCBjb25maWcpIHtcbiAgICByZXR1cm4gY3JlYXRlRG9tTW90aW9uQ29uZmlnKENvbXBvbmVudCwgY29uZmlnLCBmZWF0dXJlQnVuZGxlLCBjcmVhdGVEb21WaXN1YWxFbGVtZW50KTtcbn0pO1xuLyoqXG4gKiBDcmVhdGUgYSBET00gYG1vdGlvbmAgY29tcG9uZW50IHdpdGggdGhlIHByb3ZpZGVkIHN0cmluZy4gVGhpcyBpcyBwcmltYXJpbHkgaW50ZW5kZWRcbiAqIGFzIGEgZnVsbCBhbHRlcm5hdGl2ZSB0byBgbW90aW9uYCBmb3IgY29uc3VtZXJzIHdobyBoYXZlIHRvIHN1cHBvcnQgZW52aXJvbm1lbnRzIHRoYXQgZG9uJ3RcbiAqIHN1cHBvcnQgYFByb3h5YC5cbiAqXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiBpbXBvcnQgeyBjcmVhdGVEb21Nb3Rpb25Db21wb25lbnQgfSBmcm9tIFwiZnJhbWVyLW1vdGlvblwiXG4gKlxuICogY29uc3QgbW90aW9uID0ge1xuICogICBkaXY6IGNyZWF0ZURvbU1vdGlvbkNvbXBvbmVudCgnZGl2JylcbiAqIH1cbiAqIGBgYFxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZnVuY3Rpb24gY3JlYXRlRG9tTW90aW9uQ29tcG9uZW50KGtleSkge1xuICAgIHJldHVybiBjcmVhdGVNb3Rpb25Db21wb25lbnQoY3JlYXRlRG9tTW90aW9uQ29uZmlnKGtleSwgeyBmb3J3YXJkTW90aW9uUHJvcHM6IGZhbHNlIH0sIGZlYXR1cmVCdW5kbGUsIGNyZWF0ZURvbVZpc3VhbEVsZW1lbnQpKTtcbn1cblxuLyoqXG4gKiBAcHVibGljXG4gKi9cbnZhciBtID0gY3JlYXRlTW90aW9uUHJveHkoY3JlYXRlRG9tTW90aW9uQ29uZmlnKTtcblxuZnVuY3Rpb24gdXNlRm9yY2VVcGRhdGUoKSB7XG4gICAgdmFyIHVubG9hZGluZ1JlZiA9IFJlYWN0LnVzZVJlZihmYWxzZSk7XG4gICAgdmFyIF9hID0gdHNsaWIuX19yZWFkKFJlYWN0LnVzZVN0YXRlKDApLCAyKSwgZm9yY2VkUmVuZGVyQ291bnQgPSBfYVswXSwgc2V0Rm9yY2VkUmVuZGVyQ291bnQgPSBfYVsxXTtcbiAgICB1c2VVbm1vdW50RWZmZWN0KGZ1bmN0aW9uICgpIHsgcmV0dXJuICh1bmxvYWRpbmdSZWYuY3VycmVudCA9IHRydWUpOyB9KTtcbiAgICByZXR1cm4gUmVhY3QudXNlQ2FsbGJhY2soZnVuY3Rpb24gKCkge1xuICAgICAgICAhdW5sb2FkaW5nUmVmLmN1cnJlbnQgJiYgc2V0Rm9yY2VkUmVuZGVyQ291bnQoZm9yY2VkUmVuZGVyQ291bnQgKyAxKTtcbiAgICB9LCBbZm9yY2VkUmVuZGVyQ291bnRdKTtcbn1cblxudmFyIHByZXNlbmNlSWQgPSAwO1xuZnVuY3Rpb24gZ2V0UHJlc2VuY2VJZCgpIHtcbiAgICB2YXIgaWQgPSBwcmVzZW5jZUlkO1xuICAgIHByZXNlbmNlSWQrKztcbiAgICByZXR1cm4gaWQ7XG59XG52YXIgUHJlc2VuY2VDaGlsZCA9IGZ1bmN0aW9uIChfYSkge1xuICAgIHZhciBjaGlsZHJlbiA9IF9hLmNoaWxkcmVuLCBpbml0aWFsID0gX2EuaW5pdGlhbCwgaXNQcmVzZW50ID0gX2EuaXNQcmVzZW50LCBvbkV4aXRDb21wbGV0ZSA9IF9hLm9uRXhpdENvbXBsZXRlLCBjdXN0b20gPSBfYS5jdXN0b20sIHByZXNlbmNlQWZmZWN0c0xheW91dCA9IF9hLnByZXNlbmNlQWZmZWN0c0xheW91dDtcbiAgICB2YXIgcHJlc2VuY2VDaGlsZHJlbiA9IHVzZUNvbnN0YW50KG5ld0NoaWxkcmVuTWFwKTtcbiAgICB2YXIgaWQgPSB1c2VDb25zdGFudChnZXRQcmVzZW5jZUlkKTtcbiAgICB2YXIgY29udGV4dCA9IFJlYWN0LnVzZU1lbW8oZnVuY3Rpb24gKCkgeyByZXR1cm4gKHtcbiAgICAgICAgaWQ6IGlkLFxuICAgICAgICBpbml0aWFsOiBpbml0aWFsLFxuICAgICAgICBpc1ByZXNlbnQ6IGlzUHJlc2VudCxcbiAgICAgICAgY3VzdG9tOiBjdXN0b20sXG4gICAgICAgIG9uRXhpdENvbXBsZXRlOiBmdW5jdGlvbiAoY2hpbGRJZCkge1xuICAgICAgICAgICAgcHJlc2VuY2VDaGlsZHJlbi5zZXQoY2hpbGRJZCwgdHJ1ZSk7XG4gICAgICAgICAgICB2YXIgYWxsQ29tcGxldGUgPSB0cnVlO1xuICAgICAgICAgICAgcHJlc2VuY2VDaGlsZHJlbi5mb3JFYWNoKGZ1bmN0aW9uIChpc0NvbXBsZXRlKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFpc0NvbXBsZXRlKVxuICAgICAgICAgICAgICAgICAgICBhbGxDb21wbGV0ZSA9IGZhbHNlO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBhbGxDb21wbGV0ZSAmJiAob25FeGl0Q29tcGxldGUgPT09IG51bGwgfHwgb25FeGl0Q29tcGxldGUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9uRXhpdENvbXBsZXRlKCkpO1xuICAgICAgICB9LFxuICAgICAgICByZWdpc3RlcjogZnVuY3Rpb24gKGNoaWxkSWQpIHtcbiAgICAgICAgICAgIHByZXNlbmNlQ2hpbGRyZW4uc2V0KGNoaWxkSWQsIGZhbHNlKTtcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7IHJldHVybiBwcmVzZW5jZUNoaWxkcmVuLmRlbGV0ZShjaGlsZElkKTsgfTtcbiAgICAgICAgfSxcbiAgICB9KTsgfSwgXG4gICAgLyoqXG4gICAgICogSWYgdGhlIHByZXNlbmNlIG9mIGEgY2hpbGQgYWZmZWN0cyB0aGUgbGF5b3V0IG9mIHRoZSBjb21wb25lbnRzIGFyb3VuZCBpdCxcbiAgICAgKiB3ZSB3YW50IHRvIG1ha2UgYSBuZXcgY29udGV4dCB2YWx1ZSB0byBlbnN1cmUgdGhleSBnZXQgcmUtcmVuZGVyZWRcbiAgICAgKiBzbyB0aGV5IGNhbiBkZXRlY3QgdGhhdCBsYXlvdXQgY2hhbmdlLlxuICAgICAqL1xuICAgIHByZXNlbmNlQWZmZWN0c0xheW91dCA/IHVuZGVmaW5lZCA6IFtpc1ByZXNlbnRdKTtcbiAgICBSZWFjdC51c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcHJlc2VuY2VDaGlsZHJlbi5mb3JFYWNoKGZ1bmN0aW9uIChfLCBrZXkpIHsgcmV0dXJuIHByZXNlbmNlQ2hpbGRyZW4uc2V0KGtleSwgZmFsc2UpOyB9KTtcbiAgICB9LCBbaXNQcmVzZW50XSk7XG4gICAgLyoqXG4gICAgICogSWYgdGhlcmUncyBubyBgbW90aW9uYCBjb21wb25lbnRzIHRvIGZpcmUgZXhpdCBhbmltYXRpb25zLCB3ZSB3YW50IHRvIHJlbW92ZSB0aGlzXG4gICAgICogY29tcG9uZW50IGltbWVkaWF0ZWx5LlxuICAgICAqL1xuICAgIFJlYWN0X19uYW1lc3BhY2UudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgIWlzUHJlc2VudCAmJiAhcHJlc2VuY2VDaGlsZHJlbi5zaXplICYmIChvbkV4aXRDb21wbGV0ZSA9PT0gbnVsbCB8fCBvbkV4aXRDb21wbGV0ZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogb25FeGl0Q29tcGxldGUoKSk7XG4gICAgfSwgW2lzUHJlc2VudF0pO1xuICAgIHJldHVybiAoUmVhY3RfX25hbWVzcGFjZS5jcmVhdGVFbGVtZW50KFByZXNlbmNlQ29udGV4dC5Qcm92aWRlciwgeyB2YWx1ZTogY29udGV4dCB9LCBjaGlsZHJlbikpO1xufTtcbmZ1bmN0aW9uIG5ld0NoaWxkcmVuTWFwKCkge1xuICAgIHJldHVybiBuZXcgTWFwKCk7XG59XG5cbmZ1bmN0aW9uIGdldENoaWxkS2V5KGNoaWxkKSB7XG4gICAgcmV0dXJuIGNoaWxkLmtleSB8fCBcIlwiO1xufVxuZnVuY3Rpb24gdXBkYXRlQ2hpbGRMb29rdXAoY2hpbGRyZW4sIGFsbENoaWxkcmVuKSB7XG4gICAgdmFyIHNlZW5DaGlsZHJlbiA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IG5ldyBTZXQoKSA6IG51bGw7XG4gICAgY2hpbGRyZW4uZm9yRWFjaChmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgICAgdmFyIGtleSA9IGdldENoaWxkS2V5KGNoaWxkKTtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiAmJiBzZWVuQ2hpbGRyZW4pIHtcbiAgICAgICAgICAgIGlmIChzZWVuQ2hpbGRyZW4uaGFzKGtleSkpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oXCJDaGlsZHJlbiBvZiBBbmltYXRlUHJlc2VuY2UgcmVxdWlyZSB1bmlxdWUga2V5cy4gXFxcIlwiICsga2V5ICsgXCJcXFwiIGlzIGEgZHVwbGljYXRlLlwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNlZW5DaGlsZHJlbi5hZGQoa2V5KTtcbiAgICAgICAgfVxuICAgICAgICBhbGxDaGlsZHJlbi5zZXQoa2V5LCBjaGlsZCk7XG4gICAgfSk7XG59XG5mdW5jdGlvbiBvbmx5RWxlbWVudHMoY2hpbGRyZW4pIHtcbiAgICB2YXIgZmlsdGVyZWQgPSBbXTtcbiAgICAvLyBXZSB1c2UgZm9yRWFjaCBoZXJlIGluc3RlYWQgb2YgbWFwIGFzIG1hcCBtdXRhdGVzIHRoZSBjb21wb25lbnQga2V5IGJ5IHByZXByZW5kaW5nIGAuJGBcbiAgICBSZWFjdC5DaGlsZHJlbi5mb3JFYWNoKGNoaWxkcmVuLCBmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgICAgaWYgKFJlYWN0LmlzVmFsaWRFbGVtZW50KGNoaWxkKSlcbiAgICAgICAgICAgIGZpbHRlcmVkLnB1c2goY2hpbGQpO1xuICAgIH0pO1xuICAgIHJldHVybiBmaWx0ZXJlZDtcbn1cbi8qKlxuICogYEFuaW1hdGVQcmVzZW5jZWAgZW5hYmxlcyB0aGUgYW5pbWF0aW9uIG9mIGNvbXBvbmVudHMgdGhhdCBoYXZlIGJlZW4gcmVtb3ZlZCBmcm9tIHRoZSB0cmVlLlxuICpcbiAqIFdoZW4gYWRkaW5nL3JlbW92aW5nIG1vcmUgdGhhbiBhIHNpbmdsZSBjaGlsZCwgZXZlcnkgY2hpbGQgKiptdXN0KiogYmUgZ2l2ZW4gYSB1bmlxdWUgYGtleWAgcHJvcC5cbiAqXG4gKiBAbGlicmFyeVxuICpcbiAqIEFueSBgRnJhbWVgIGNvbXBvbmVudHMgdGhhdCBoYXZlIGFuIGBleGl0YCBwcm9wZXJ0eSBkZWZpbmVkIHdpbGwgYW5pbWF0ZSBvdXQgd2hlbiByZW1vdmVkIGZyb21cbiAqIHRoZSB0cmVlLlxuICpcbiAqIGBgYGpzeFxuICogaW1wb3J0IHsgRnJhbWUsIEFuaW1hdGVQcmVzZW5jZSB9IGZyb20gJ2ZyYW1lcidcbiAqXG4gKiAvLyBBcyBpdGVtcyBhcmUgYWRkZWQgYW5kIHJlbW92ZWQgZnJvbSBgaXRlbXNgXG4gKiBleHBvcnQgZnVuY3Rpb24gSXRlbXMoeyBpdGVtcyB9KSB7XG4gKiAgIHJldHVybiAoXG4gKiAgICAgPEFuaW1hdGVQcmVzZW5jZT5cbiAqICAgICAgIHtpdGVtcy5tYXAoaXRlbSA9PiAoXG4gKiAgICAgICAgIDxGcmFtZVxuICogICAgICAgICAgIGtleT17aXRlbS5pZH1cbiAqICAgICAgICAgICBpbml0aWFsPXt7IG9wYWNpdHk6IDAgfX1cbiAqICAgICAgICAgICBhbmltYXRlPXt7IG9wYWNpdHk6IDEgfX1cbiAqICAgICAgICAgICBleGl0PXt7IG9wYWNpdHk6IDAgfX1cbiAqICAgICAgICAgLz5cbiAqICAgICAgICkpfVxuICogICAgIDwvQW5pbWF0ZVByZXNlbmNlPlxuICogICApXG4gKiB9XG4gKiBgYGBcbiAqXG4gKiBZb3UgY2FuIHNlcXVlbmNlIGV4aXQgYW5pbWF0aW9ucyB0aHJvdWdob3V0IGEgdHJlZSB1c2luZyB2YXJpYW50cy5cbiAqXG4gKiBAbW90aW9uXG4gKlxuICogQW55IGBtb3Rpb25gIGNvbXBvbmVudHMgdGhhdCBoYXZlIGFuIGBleGl0YCBwcm9wZXJ0eSBkZWZpbmVkIHdpbGwgYW5pbWF0ZSBvdXQgd2hlbiByZW1vdmVkIGZyb21cbiAqIHRoZSB0cmVlLlxuICpcbiAqIGBgYGpzeFxuICogaW1wb3J0IHsgbW90aW9uLCBBbmltYXRlUHJlc2VuY2UgfSBmcm9tICdmcmFtZXItbW90aW9uJ1xuICpcbiAqIGV4cG9ydCBjb25zdCBJdGVtcyA9ICh7IGl0ZW1zIH0pID0+IChcbiAqICAgPEFuaW1hdGVQcmVzZW5jZT5cbiAqICAgICB7aXRlbXMubWFwKGl0ZW0gPT4gKFxuICogICAgICAgPG1vdGlvbi5kaXZcbiAqICAgICAgICAga2V5PXtpdGVtLmlkfVxuICogICAgICAgICBpbml0aWFsPXt7IG9wYWNpdHk6IDAgfX1cbiAqICAgICAgICAgYW5pbWF0ZT17eyBvcGFjaXR5OiAxIH19XG4gKiAgICAgICAgIGV4aXQ9e3sgb3BhY2l0eTogMCB9fVxuICogICAgICAgLz5cbiAqICAgICApKX1cbiAqICAgPC9BbmltYXRlUHJlc2VuY2U+XG4gKiApXG4gKiBgYGBcbiAqXG4gKiBZb3UgY2FuIHNlcXVlbmNlIGV4aXQgYW5pbWF0aW9ucyB0aHJvdWdob3V0IGEgdHJlZSB1c2luZyB2YXJpYW50cy5cbiAqXG4gKiBJZiBhIGNoaWxkIGNvbnRhaW5zIG11bHRpcGxlIGBtb3Rpb25gIGNvbXBvbmVudHMgd2l0aCBgZXhpdGAgcHJvcHMsIGl0IHdpbGwgb25seSB1bm1vdW50IHRoZSBjaGlsZFxuICogb25jZSBhbGwgYG1vdGlvbmAgY29tcG9uZW50cyBoYXZlIGZpbmlzaGVkIGFuaW1hdGluZyBvdXQuIExpa2V3aXNlLCBhbnkgY29tcG9uZW50cyB1c2luZ1xuICogYHVzZVByZXNlbmNlYCBhbGwgbmVlZCB0byBjYWxsIGBzYWZlVG9SZW1vdmVgLlxuICpcbiAqIEBwdWJsaWNcbiAqL1xudmFyIEFuaW1hdGVQcmVzZW5jZSA9IGZ1bmN0aW9uIChfYSkge1xuICAgIHZhciBjaGlsZHJlbiA9IF9hLmNoaWxkcmVuLCBjdXN0b20gPSBfYS5jdXN0b20sIF9iID0gX2EuaW5pdGlhbCwgaW5pdGlhbCA9IF9iID09PSB2b2lkIDAgPyB0cnVlIDogX2IsIG9uRXhpdENvbXBsZXRlID0gX2Eub25FeGl0Q29tcGxldGUsIGV4aXRCZWZvcmVFbnRlciA9IF9hLmV4aXRCZWZvcmVFbnRlciwgX2MgPSBfYS5wcmVzZW5jZUFmZmVjdHNMYXlvdXQsIHByZXNlbmNlQWZmZWN0c0xheW91dCA9IF9jID09PSB2b2lkIDAgPyB0cnVlIDogX2M7XG4gICAgLy8gV2Ugd2FudCB0byBmb3JjZSBhIHJlLXJlbmRlciBvbmNlIGFsbCBleGl0aW5nIGFuaW1hdGlvbnMgaGF2ZSBmaW5pc2hlZC4gV2VcbiAgICAvLyBlaXRoZXIgdXNlIGEgbG9jYWwgZm9yY2VSZW5kZXIgZnVuY3Rpb24sIG9yIG9uZSBmcm9tIGEgcGFyZW50IGNvbnRleHQgaWYgaXQgZXhpc3RzLlxuICAgIHZhciBmb3JjZVJlbmRlciA9IHVzZUZvcmNlVXBkYXRlKCk7XG4gICAgdmFyIGxheW91dENvbnRleHQgPSBSZWFjdC51c2VDb250ZXh0KFNoYXJlZExheW91dENvbnRleHQpO1xuICAgIGlmIChpc1NoYXJlZExheW91dChsYXlvdXRDb250ZXh0KSkge1xuICAgICAgICBmb3JjZVJlbmRlciA9IGxheW91dENvbnRleHQuZm9yY2VVcGRhdGU7XG4gICAgfVxuICAgIHZhciBpc0luaXRpYWxSZW5kZXIgPSBSZWFjdC51c2VSZWYodHJ1ZSk7XG4gICAgLy8gRmlsdGVyIG91dCBhbnkgY2hpbGRyZW4gdGhhdCBhcmVuJ3QgUmVhY3RFbGVtZW50cy4gV2UgY2FuIG9ubHkgdHJhY2sgUmVhY3RFbGVtZW50cyB3aXRoIGEgcHJvcHMua2V5XG4gICAgdmFyIGZpbHRlcmVkQ2hpbGRyZW4gPSBvbmx5RWxlbWVudHMoY2hpbGRyZW4pO1xuICAgIC8vIEtlZXAgYSBsaXZpbmcgcmVjb3JkIG9mIHRoZSBjaGlsZHJlbiB3ZSdyZSBhY3R1YWxseSByZW5kZXJpbmcgc28gd2VcbiAgICAvLyBjYW4gZGlmZiB0byBmaWd1cmUgb3V0IHdoaWNoIGFyZSBlbnRlcmluZyBhbmQgZXhpdGluZ1xuICAgIHZhciBwcmVzZW50Q2hpbGRyZW4gPSBSZWFjdC51c2VSZWYoZmlsdGVyZWRDaGlsZHJlbik7XG4gICAgLy8gQSBsb29rdXAgdGFibGUgdG8gcXVpY2tseSByZWZlcmVuY2UgY29tcG9uZW50cyBieSBrZXlcbiAgICB2YXIgYWxsQ2hpbGRyZW4gPSBSZWFjdC51c2VSZWYobmV3IE1hcCgpKVxuICAgICAgICAuY3VycmVudDtcbiAgICAvLyBBIGxpdmluZyByZWNvcmQgb2YgYWxsIGN1cnJlbnRseSBleGl0aW5nIGNvbXBvbmVudHMuXG4gICAgdmFyIGV4aXRpbmcgPSBSZWFjdC51c2VSZWYobmV3IFNldCgpKS5jdXJyZW50O1xuICAgIHVwZGF0ZUNoaWxkTG9va3VwKGZpbHRlcmVkQ2hpbGRyZW4sIGFsbENoaWxkcmVuKTtcbiAgICAvLyBJZiB0aGlzIGlzIHRoZSBpbml0aWFsIGNvbXBvbmVudCByZW5kZXIsIGp1c3QgZGVhbCB3aXRoIGxvZ2ljIHN1cnJvdW5kaW5nIHdoZXRoZXJcbiAgICAvLyB3ZSBwbGF5IG9uTW91bnQgYW5pbWF0aW9ucyBvciBub3QuXG4gICAgaWYgKGlzSW5pdGlhbFJlbmRlci5jdXJyZW50KSB7XG4gICAgICAgIGlzSW5pdGlhbFJlbmRlci5jdXJyZW50ID0gZmFsc2U7XG4gICAgICAgIHJldHVybiAoUmVhY3RfX25hbWVzcGFjZS5jcmVhdGVFbGVtZW50KFJlYWN0X19uYW1lc3BhY2UuRnJhZ21lbnQsIG51bGwsIGZpbHRlcmVkQ2hpbGRyZW4ubWFwKGZ1bmN0aW9uIChjaGlsZCkgeyByZXR1cm4gKFJlYWN0X19uYW1lc3BhY2UuY3JlYXRlRWxlbWVudChQcmVzZW5jZUNoaWxkLCB7IGtleTogZ2V0Q2hpbGRLZXkoY2hpbGQpLCBpc1ByZXNlbnQ6IHRydWUsIGluaXRpYWw6IGluaXRpYWwgPyB1bmRlZmluZWQgOiBmYWxzZSwgcHJlc2VuY2VBZmZlY3RzTGF5b3V0OiBwcmVzZW5jZUFmZmVjdHNMYXlvdXQgfSwgY2hpbGQpKTsgfSkpKTtcbiAgICB9XG4gICAgLy8gSWYgdGhpcyBpcyBhIHN1YnNlcXVlbnQgcmVuZGVyLCBkZWFsIHdpdGggZW50ZXJpbmcgYW5kIGV4aXRpbmcgY2hpbGRyZW5cbiAgICB2YXIgY2hpbGRyZW5Ub1JlbmRlciA9IHRzbGliLl9fc3ByZWFkQXJyYXkoW10sIHRzbGliLl9fcmVhZChmaWx0ZXJlZENoaWxkcmVuKSk7XG4gICAgLy8gRGlmZiB0aGUga2V5cyBvZiB0aGUgY3VycmVudGx5LXByZXNlbnQgYW5kIHRhcmdldCBjaGlsZHJlbiB0byB1cGRhdGUgb3VyXG4gICAgLy8gZXhpdGluZyBsaXN0LlxuICAgIHZhciBwcmVzZW50S2V5cyA9IHByZXNlbnRDaGlsZHJlbi5jdXJyZW50Lm1hcChnZXRDaGlsZEtleSk7XG4gICAgdmFyIHRhcmdldEtleXMgPSBmaWx0ZXJlZENoaWxkcmVuLm1hcChnZXRDaGlsZEtleSk7XG4gICAgLy8gRGlmZiB0aGUgcHJlc2VudCBjaGlsZHJlbiB3aXRoIG91ciB0YXJnZXQgY2hpbGRyZW4gYW5kIG1hcmsgdGhvc2UgdGhhdCBhcmUgZXhpdGluZ1xuICAgIHZhciBudW1QcmVzZW50ID0gcHJlc2VudEtleXMubGVuZ3RoO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbnVtUHJlc2VudDsgaSsrKSB7XG4gICAgICAgIHZhciBrZXkgPSBwcmVzZW50S2V5c1tpXTtcbiAgICAgICAgaWYgKHRhcmdldEtleXMuaW5kZXhPZihrZXkpID09PSAtMSkge1xuICAgICAgICAgICAgZXhpdGluZy5hZGQoa2V5KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIEluIGNhc2UgdGhpcyBrZXkgaGFzIHJlLWVudGVyZWQsIHJlbW92ZSBmcm9tIHRoZSBleGl0aW5nIGxpc3RcbiAgICAgICAgICAgIGV4aXRpbmcuZGVsZXRlKGtleSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gSWYgd2UgY3VycmVudGx5IGhhdmUgZXhpdGluZyBjaGlsZHJlbiwgYW5kIHdlJ3JlIGRlZmVycmluZyByZW5kZXJpbmcgaW5jb21pbmcgY2hpbGRyZW5cbiAgICAvLyB1bnRpbCBhZnRlciBhbGwgY3VycmVudCBjaGlsZHJlbiBoYXZlIGV4aXRpbmcsIGVtcHR5IHRoZSBjaGlsZHJlblRvUmVuZGVyIGFycmF5XG4gICAgaWYgKGV4aXRCZWZvcmVFbnRlciAmJiBleGl0aW5nLnNpemUpIHtcbiAgICAgICAgY2hpbGRyZW5Ub1JlbmRlciA9IFtdO1xuICAgIH1cbiAgICAvLyBMb29wIHRocm91Z2ggYWxsIGN1cnJlbnRseSBleGl0aW5nIGNvbXBvbmVudHMgYW5kIGNsb25lIHRoZW0gdG8gb3ZlcndyaXRlIGBhbmltYXRlYFxuICAgIC8vIHdpdGggYW55IGBleGl0YCBwcm9wIHRoZXkgbWlnaHQgaGF2ZSBkZWZpbmVkLlxuICAgIGV4aXRpbmcuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIC8vIElmIHRoaXMgY29tcG9uZW50IGlzIGFjdHVhbGx5IGVudGVyaW5nIGFnYWluLCBlYXJseSByZXR1cm5cbiAgICAgICAgaWYgKHRhcmdldEtleXMuaW5kZXhPZihrZXkpICE9PSAtMSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdmFyIGNoaWxkID0gYWxsQ2hpbGRyZW4uZ2V0KGtleSk7XG4gICAgICAgIGlmICghY2hpbGQpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHZhciBpbnNlcnRpb25JbmRleCA9IHByZXNlbnRLZXlzLmluZGV4T2Yoa2V5KTtcbiAgICAgICAgdmFyIG9uRXhpdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGFsbENoaWxkcmVuLmRlbGV0ZShrZXkpO1xuICAgICAgICAgICAgZXhpdGluZy5kZWxldGUoa2V5KTtcbiAgICAgICAgICAgIC8vIFJlbW92ZSB0aGlzIGNoaWxkIGZyb20gdGhlIHByZXNlbnQgY2hpbGRyZW5cbiAgICAgICAgICAgIHZhciByZW1vdmVJbmRleCA9IHByZXNlbnRDaGlsZHJlbi5jdXJyZW50LmZpbmRJbmRleChmdW5jdGlvbiAocHJlc2VudENoaWxkKSB7IHJldHVybiBwcmVzZW50Q2hpbGQua2V5ID09PSBrZXk7IH0pO1xuICAgICAgICAgICAgcHJlc2VudENoaWxkcmVuLmN1cnJlbnQuc3BsaWNlKHJlbW92ZUluZGV4LCAxKTtcbiAgICAgICAgICAgIC8vIERlZmVyIHJlLXJlbmRlcmluZyB1bnRpbCBhbGwgZXhpdGluZyBjaGlsZHJlbiBoYXZlIGluZGVlZCBsZWZ0XG4gICAgICAgICAgICBpZiAoIWV4aXRpbmcuc2l6ZSkge1xuICAgICAgICAgICAgICAgIHByZXNlbnRDaGlsZHJlbi5jdXJyZW50ID0gZmlsdGVyZWRDaGlsZHJlbjtcbiAgICAgICAgICAgICAgICBmb3JjZVJlbmRlcigpO1xuICAgICAgICAgICAgICAgIG9uRXhpdENvbXBsZXRlICYmIG9uRXhpdENvbXBsZXRlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIGNoaWxkcmVuVG9SZW5kZXIuc3BsaWNlKGluc2VydGlvbkluZGV4LCAwLCBSZWFjdF9fbmFtZXNwYWNlLmNyZWF0ZUVsZW1lbnQoUHJlc2VuY2VDaGlsZCwgeyBrZXk6IGdldENoaWxkS2V5KGNoaWxkKSwgaXNQcmVzZW50OiBmYWxzZSwgb25FeGl0Q29tcGxldGU6IG9uRXhpdCwgY3VzdG9tOiBjdXN0b20sIHByZXNlbmNlQWZmZWN0c0xheW91dDogcHJlc2VuY2VBZmZlY3RzTGF5b3V0IH0sIGNoaWxkKSk7XG4gICAgfSk7XG4gICAgLy8gQWRkIGBNb3Rpb25Db250ZXh0YCBldmVuIHRvIGNoaWxkcmVuIHRoYXQgZG9uJ3QgbmVlZCBpdCB0byBlbnN1cmUgd2UncmUgcmVuZGVyaW5nXG4gICAgLy8gdGhlIHNhbWUgdHJlZSBiZXR3ZWVuIHJlbmRlcnNcbiAgICBjaGlsZHJlblRvUmVuZGVyID0gY2hpbGRyZW5Ub1JlbmRlci5tYXAoZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgICAgIHZhciBrZXkgPSBjaGlsZC5rZXk7XG4gICAgICAgIHJldHVybiBleGl0aW5nLmhhcyhrZXkpID8gKGNoaWxkKSA6IChSZWFjdF9fbmFtZXNwYWNlLmNyZWF0ZUVsZW1lbnQoUHJlc2VuY2VDaGlsZCwgeyBrZXk6IGdldENoaWxkS2V5KGNoaWxkKSwgaXNQcmVzZW50OiB0cnVlLCBwcmVzZW5jZUFmZmVjdHNMYXlvdXQ6IHByZXNlbmNlQWZmZWN0c0xheW91dCB9LCBjaGlsZCkpO1xuICAgIH0pO1xuICAgIHByZXNlbnRDaGlsZHJlbi5jdXJyZW50ID0gY2hpbGRyZW5Ub1JlbmRlcjtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiICYmXG4gICAgICAgIGV4aXRCZWZvcmVFbnRlciAmJlxuICAgICAgICBjaGlsZHJlblRvUmVuZGVyLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgY29uc29sZS53YXJuKFwiWW91J3JlIGF0dGVtcHRpbmcgdG8gYW5pbWF0ZSBtdWx0aXBsZSBjaGlsZHJlbiB3aXRoaW4gQW5pbWF0ZVByZXNlbmNlLCBidXQgaXRzIGV4aXRCZWZvcmVFbnRlciBwcm9wIGlzIHNldCB0byB0cnVlLiBUaGlzIHdpbGwgbGVhZCB0byBvZGQgdmlzdWFsIGJlaGF2aW91ci5cIik7XG4gICAgfVxuICAgIHJldHVybiAoUmVhY3RfX25hbWVzcGFjZS5jcmVhdGVFbGVtZW50KFJlYWN0X19uYW1lc3BhY2UuRnJhZ21lbnQsIG51bGwsIGV4aXRpbmcuc2l6ZVxuICAgICAgICA/IGNoaWxkcmVuVG9SZW5kZXJcbiAgICAgICAgOiBjaGlsZHJlblRvUmVuZGVyLm1hcChmdW5jdGlvbiAoY2hpbGQpIHsgcmV0dXJuIFJlYWN0LmNsb25lRWxlbWVudChjaGlsZCk7IH0pKSk7XG59O1xuXG4vKipcbiAqIEFuaW1hdGUgYSBzaW5nbGUgdmFsdWUgb3IgYSBgTW90aW9uVmFsdWVgLlxuICpcbiAqIFRoZSBmaXJzdCBhcmd1bWVudCBpcyBlaXRoZXIgYSBgTW90aW9uVmFsdWVgIHRvIGFuaW1hdGUsIG9yIGFuIGluaXRpYWwgYW5pbWF0aW9uIHZhbHVlLlxuICpcbiAqIFRoZSBzZWNvbmQgaXMgZWl0aGVyIGEgdmFsdWUgdG8gYW5pbWF0ZSB0bywgb3IgYW4gYXJyYXkgb2Yga2V5ZnJhbWVzIHRvIGFuaW1hdGUgdGhyb3VnaC5cbiAqXG4gKiBUaGUgdGhpcmQgYXJndW1lbnQgY2FuIGJlIGVpdGhlciB0d2VlbiBvciBzcHJpbmcgb3B0aW9ucywgYW5kIG9wdGlvbmFsIGxpZmVjeWNsZSBtZXRob2RzOiBgb25VcGRhdGVgLCBgb25QbGF5YCwgYG9uQ29tcGxldGVgLCBgb25SZXBlYXRgIGFuZCBgb25TdG9wYC5cbiAqXG4gKiBSZXR1cm5zIGBBbmltYXRpb25QbGF5YmFja0NvbnRyb2xzYCwgY3VycmVudGx5IGp1c3QgYSBgc3RvcGAgbWV0aG9kLlxuICpcbiAqIGBgYGphdmFzY3JpcHRcbiAqIGNvbnN0IHggPSB1c2VNb3Rpb25WYWx1ZSgwKVxuICpcbiAqIHVzZUVmZmVjdCgoKSA9PiB7XG4gKiAgIGNvbnN0IGNvbnRyb2xzID0gYW5pbWF0ZSh4LCAxMDAsIHtcbiAqICAgICB0eXBlOiBcInNwcmluZ1wiLFxuICogICAgIHN0aWZmbmVzczogMjAwMCxcbiAqICAgICBvbkNvbXBsZXRlOiB2ID0+IHt9XG4gKiAgIH0pXG4gKlxuICogICByZXR1cm4gY29udHJvbHMuc3RvcFxuICogfSlcbiAqIGBgYFxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZnVuY3Rpb24gYW5pbWF0ZShmcm9tLCB0bywgdHJhbnNpdGlvbikge1xuICAgIGlmICh0cmFuc2l0aW9uID09PSB2b2lkIDApIHsgdHJhbnNpdGlvbiA9IHt9OyB9XG4gICAgdmFyIHZhbHVlID0gaXNNb3Rpb25WYWx1ZShmcm9tKSA/IGZyb20gOiBtb3Rpb25WYWx1ZShmcm9tKTtcbiAgICBzdGFydEFuaW1hdGlvbihcIlwiLCB2YWx1ZSwgdG8sIHRyYW5zaXRpb24pO1xuICAgIHJldHVybiB7XG4gICAgICAgIHN0b3A6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHZhbHVlLnN0b3AoKTsgfSxcbiAgICB9O1xufVxuXG5mdW5jdGlvbiBjcmVhdGVDcm9zc2ZhZGVyKCkge1xuICAgIC8qKlxuICAgICAqIFRoZSBjdXJyZW50IHN0YXRlIG9mIHRoZSBjcm9zc2ZhZGUgYXMgYSB2YWx1ZSBiZXR3ZWVuIDAgYW5kIDFcbiAgICAgKi9cbiAgICB2YXIgcHJvZ3Jlc3MgPSBtb3Rpb25WYWx1ZSgxKTtcbiAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgICAgbGVhZDogdW5kZWZpbmVkLFxuICAgICAgICBmb2xsb3c6IHVuZGVmaW5lZCxcbiAgICAgICAgY3Jvc3NmYWRlT3BhY2l0eTogZmFsc2UsXG4gICAgICAgIHByZXNlcnZlRm9sbG93T3BhY2l0eTogZmFsc2UsXG4gICAgfTtcbiAgICB2YXIgcHJldk9wdGlvbnMgPSB0c2xpYi5fX2Fzc2lnbih7fSwgb3B0aW9ucyk7XG4gICAgdmFyIGxlYWRTdGF0ZSA9IHt9O1xuICAgIHZhciBmb2xsb3dTdGF0ZSA9IHt9O1xuICAgIC8qKlxuICAgICAqXG4gICAgICovXG4gICAgdmFyIGlzQWN0aXZlID0gZmFsc2U7XG4gICAgLyoqXG4gICAgICpcbiAgICAgKi9cbiAgICB2YXIgZmluYWxDcm9zc2ZhZGVGcmFtZSA9IG51bGw7XG4gICAgLyoqXG4gICAgICogRnJhbWVzdGFtcCBvZiB0aGUgbGFzdCBmcmFtZSB3ZSB1cGRhdGVkIHZhbHVlcyBhdC5cbiAgICAgKi9cbiAgICB2YXIgcHJldlVwZGF0ZSA9IDA7XG4gICAgZnVuY3Rpb24gc3RhcnRDcm9zc2ZhZGVBbmltYXRpb24odGFyZ2V0LCB0cmFuc2l0aW9uKSB7XG4gICAgICAgIHZhciBsZWFkID0gb3B0aW9ucy5sZWFkLCBmb2xsb3cgPSBvcHRpb25zLmZvbGxvdztcbiAgICAgICAgaXNBY3RpdmUgPSB0cnVlO1xuICAgICAgICBmaW5hbENyb3NzZmFkZUZyYW1lID0gbnVsbDtcbiAgICAgICAgdmFyIGhhc1VwZGF0ZWQgPSBmYWxzZTtcbiAgICAgICAgdmFyIG9uVXBkYXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaGFzVXBkYXRlZCA9IHRydWU7XG4gICAgICAgICAgICBsZWFkICYmIGxlYWQuc2NoZWR1bGVSZW5kZXIoKTtcbiAgICAgICAgICAgIGZvbGxvdyAmJiBmb2xsb3cuc2NoZWR1bGVSZW5kZXIoKTtcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIG9uQ29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpc0FjdGl2ZSA9IGZhbHNlO1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBJZiB0aGUgY3Jvc3NmYWRlIGFuaW1hdGlvbiBpcyBubyBsb25nZXIgYWN0aXZlLCBmbGFnIGEgZnJhbWVcbiAgICAgICAgICAgICAqIHRoYXQgd2UncmUgc3RpbGwgYWxsb3dlZCB0byBjcm9zc2ZhZGVcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgZmluYWxDcm9zc2ZhZGVGcmFtZSA9IHN5bmMuZ2V0RnJhbWVEYXRhKCkudGltZXN0YW1wO1xuICAgICAgICB9O1xuICAgICAgICB0cmFuc2l0aW9uID0gdHJhbnNpdGlvbiAmJiBnZXRWYWx1ZVRyYW5zaXRpb24odHJhbnNpdGlvbiwgXCJjcm9zc2ZhZGVcIik7XG4gICAgICAgIHJldHVybiBhbmltYXRlKHByb2dyZXNzLCB0YXJnZXQsIHRzbGliLl9fYXNzaWduKHRzbGliLl9fYXNzaWduKHt9LCB0cmFuc2l0aW9uKSwgeyBvblVwZGF0ZTogb25VcGRhdGUsIG9uQ29tcGxldGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWhhc1VwZGF0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgcHJvZ3Jlc3Muc2V0KHRhcmdldCk7XG4gICAgICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAgICAgKiBJZiB3ZSBuZXZlciByYW4gYW4gdXBkYXRlLCBmb3IgaW5zdGFuY2UgaWYgdGhpcyB3YXMgYW4gaW5zdGFudCB0cmFuc2l0aW9uLCBmaXJlIGFcbiAgICAgICAgICAgICAgICAgICAgICogc2ltdWxhdGVkIGZpbmFsIGZyYW1lIHRvIGVuc3VyZSB0aGUgY3Jvc3NmYWRlIGdldHMgYXBwbGllZCBjb3JyZWN0bHkuXG4gICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgICBzeW5jX19kZWZhdWx0WydkZWZhdWx0J10ucmVhZChvbkNvbXBsZXRlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIG9uQ29tcGxldGUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgb25VcGRhdGUoKTtcbiAgICAgICAgICAgIH0gfSkpO1xuICAgIH1cbiAgICBmdW5jdGlvbiB1cGRhdGVDcm9zc2ZhZGUoKSB7XG4gICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBXZSBvbmx5IHdhbnQgdG8gY29tcHV0ZSB0aGUgY3Jvc3NmYWRlIG9uY2UgcGVyIGZyYW1lLCBzbyB3ZVxuICAgICAgICAgKiBjb21wYXJlIHRoZSBwcmV2aW91cyB1cGRhdGUgZnJhbWVzdGFtcCB3aXRoIHRoZSBjdXJyZW50IGZyYW1lXG4gICAgICAgICAqIGFuZCBlYXJseSByZXR1cm4gaWYgdGhleSdyZSB0aGUgc2FtZS5cbiAgICAgICAgICovXG4gICAgICAgIHZhciB0aW1lc3RhbXAgPSBzeW5jLmdldEZyYW1lRGF0YSgpLnRpbWVzdGFtcDtcbiAgICAgICAgdmFyIGxlYWQgPSBvcHRpb25zLmxlYWQsIGZvbGxvdyA9IG9wdGlvbnMuZm9sbG93O1xuICAgICAgICBpZiAodGltZXN0YW1wID09PSBwcmV2VXBkYXRlIHx8ICFsZWFkKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBwcmV2VXBkYXRlID0gdGltZXN0YW1wO1xuICAgICAgICAvKipcbiAgICAgICAgICogTWVyZ2UgZWFjaCBjb21wb25lbnQncyBsYXRlc3QgdmFsdWVzIGludG8gb3VyIGNyb3NzZmFkZWQgc3RhdGVcbiAgICAgICAgICogYmVmb3JlIGNyb3NzZmFkaW5nLlxuICAgICAgICAgKi9cbiAgICAgICAgdmFyIGxhdGVzdExlYWRWYWx1ZXMgPSBsZWFkLmdldExhdGVzdFZhbHVlcygpO1xuICAgICAgICBPYmplY3QuYXNzaWduKGxlYWRTdGF0ZSwgbGF0ZXN0TGVhZFZhbHVlcyk7XG4gICAgICAgIHZhciBsYXRlc3RGb2xsb3dWYWx1ZXMgPSBmb2xsb3dcbiAgICAgICAgICAgID8gZm9sbG93LmdldExhdGVzdFZhbHVlcygpXG4gICAgICAgICAgICA6IG9wdGlvbnMucHJldlZhbHVlcztcbiAgICAgICAgT2JqZWN0LmFzc2lnbihmb2xsb3dTdGF0ZSwgbGF0ZXN0Rm9sbG93VmFsdWVzKTtcbiAgICAgICAgdmFyIHAgPSBwcm9ncmVzcy5nZXQoKTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIENyb3NzZmFkZSB0aGUgb3BhY2l0eSBiZXR3ZWVuIHRoZSB0d28gY29tcG9uZW50cy4gVGhpcyB3aWxsIHJlc3VsdFxuICAgICAgICAgKiBpbiBhIGRpZmZlcmVudCBvcGFjaXR5IGZvciBlYWNoIGNvbXBvbmVudC5cbiAgICAgICAgICovXG4gICAgICAgIHZhciBsZWFkVGFyZ2V0T3BhY2l0eSA9IChfYSA9IGxhdGVzdExlYWRWYWx1ZXMub3BhY2l0eSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogMTtcbiAgICAgICAgdmFyIGZvbGxvd1RhcmdldE9wYWNpdHkgPSAoX2IgPSBsYXRlc3RGb2xsb3dWYWx1ZXMgPT09IG51bGwgfHwgbGF0ZXN0Rm9sbG93VmFsdWVzID09PSB2b2lkIDAgPyB2b2lkIDAgOiBsYXRlc3RGb2xsb3dWYWx1ZXMub3BhY2l0eSkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogMTtcbiAgICAgICAgaWYgKG9wdGlvbnMuY3Jvc3NmYWRlT3BhY2l0eSAmJiBmb2xsb3cpIHtcbiAgICAgICAgICAgIGxlYWRTdGF0ZS5vcGFjaXR5ID0gcG9wbW90aW9uLm1peChcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogSWYgdGhlIGZvbGxvdyBjaGlsZCBoYXMgYmVlbiBjb21wbGV0ZWx5IGhpZGRlbiB3ZSBhbmltYXRlXG4gICAgICAgICAgICAgKiB0aGlzIG9wYWNpdHkgZnJvbSBpdHMgcHJldmlvdXMgb3BhY2l0eSwgYnV0IG90aGVyd2lzZSBmcm9tIGNvbXBsZXRlbHkgdHJhbnNwYXJlbnQuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGZvbGxvdy5pc1Zpc2libGUgIT09IGZhbHNlID8gMCA6IGZvbGxvd1RhcmdldE9wYWNpdHksIGxlYWRUYXJnZXRPcGFjaXR5LCBlYXNlQ3Jvc3NmYWRlSW4ocCkpO1xuICAgICAgICAgICAgZm9sbG93U3RhdGUub3BhY2l0eSA9IG9wdGlvbnMucHJlc2VydmVGb2xsb3dPcGFjaXR5XG4gICAgICAgICAgICAgICAgPyBmb2xsb3dUYXJnZXRPcGFjaXR5XG4gICAgICAgICAgICAgICAgOiBwb3Btb3Rpb24ubWl4KGZvbGxvd1RhcmdldE9wYWNpdHksIDAsIGVhc2VDcm9zc2ZhZGVPdXQocCkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKCFmb2xsb3cpIHtcbiAgICAgICAgICAgIGxlYWRTdGF0ZS5vcGFjaXR5ID0gcG9wbW90aW9uLm1peChmb2xsb3dUYXJnZXRPcGFjaXR5LCBsZWFkVGFyZ2V0T3BhY2l0eSwgcCk7XG4gICAgICAgIH1cbiAgICAgICAgbWl4VmFsdWVzKGxlYWRTdGF0ZSwgZm9sbG93U3RhdGUsIGxhdGVzdExlYWRWYWx1ZXMsIGxhdGVzdEZvbGxvd1ZhbHVlcyB8fCB7fSwgQm9vbGVhbihmb2xsb3cpLCBwKTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgaXNBY3RpdmU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBsZWFkU3RhdGUgJiZcbiAgICAgICAgICAgICAgICAoaXNBY3RpdmUgfHwgc3luYy5nZXRGcmFtZURhdGEoKS50aW1lc3RhbXAgPT09IGZpbmFsQ3Jvc3NmYWRlRnJhbWUpO1xuICAgICAgICB9LFxuICAgICAgICBmcm9tTGVhZDogZnVuY3Rpb24gKHRyYW5zaXRpb24pIHtcbiAgICAgICAgICAgIHJldHVybiBzdGFydENyb3NzZmFkZUFuaW1hdGlvbigwLCB0cmFuc2l0aW9uKTtcbiAgICAgICAgfSxcbiAgICAgICAgdG9MZWFkOiBmdW5jdGlvbiAodHJhbnNpdGlvbikge1xuICAgICAgICAgICAgdmFyIGluaXRpYWxQcm9ncmVzcyA9IDA7XG4gICAgICAgICAgICBpZiAoIW9wdGlvbnMucHJldlZhbHVlcyAmJiAhb3B0aW9ucy5mb2xsb3cpIHtcbiAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgKiBJZiB3ZSdyZSBub3QgY29taW5nIGZyb20gYW55d2hlcmUsIHN0YXJ0IGF0IHRoZSBlbmQgb2YgdGhlIGFuaW1hdGlvbi5cbiAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICBpbml0aWFsUHJvZ3Jlc3MgPSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAocHJldk9wdGlvbnMubGVhZCA9PT0gb3B0aW9ucy5mb2xsb3cgJiZcbiAgICAgICAgICAgICAgICBwcmV2T3B0aW9ucy5mb2xsb3cgPT09IG9wdGlvbnMubGVhZCkge1xuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAqIElmIHdlJ3JlIHN3YXBwaW5nIGZvbGxvdy9sZWFkIHdlIGNhbiByZXZlcnNlIHRoZSBwcm9ncmVzc1xuICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgIGluaXRpYWxQcm9ncmVzcyA9IDEgLSBwcm9ncmVzcy5nZXQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHByb2dyZXNzLnNldChpbml0aWFsUHJvZ3Jlc3MpO1xuICAgICAgICAgICAgcmV0dXJuIHN0YXJ0Q3Jvc3NmYWRlQW5pbWF0aW9uKDEsIHRyYW5zaXRpb24pO1xuICAgICAgICB9LFxuICAgICAgICByZXNldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcHJvZ3Jlc3Muc2V0KDEpOyB9LFxuICAgICAgICBzdG9wOiBmdW5jdGlvbiAoKSB7IHJldHVybiBwcm9ncmVzcy5zdG9wKCk7IH0sXG4gICAgICAgIGdldENyb3NzZmFkZVN0YXRlOiBmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgICAgICAgICAgdXBkYXRlQ3Jvc3NmYWRlKCk7XG4gICAgICAgICAgICBpZiAoZWxlbWVudCA9PT0gb3B0aW9ucy5sZWFkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGxlYWRTdGF0ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGVsZW1lbnQgPT09IG9wdGlvbnMuZm9sbG93KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZvbGxvd1N0YXRlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBzZXRPcHRpb25zOiBmdW5jdGlvbiAobmV3T3B0aW9ucykge1xuICAgICAgICAgICAgcHJldk9wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgICAgICAgb3B0aW9ucyA9IG5ld09wdGlvbnM7XG4gICAgICAgICAgICBsZWFkU3RhdGUgPSB7fTtcbiAgICAgICAgICAgIGZvbGxvd1N0YXRlID0ge307XG4gICAgICAgIH0sXG4gICAgICAgIGdldExhdGVzdFZhbHVlczogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIGxlYWRTdGF0ZTtcbiAgICAgICAgfSxcbiAgICB9O1xufVxudmFyIGVhc2VDcm9zc2ZhZGVJbiA9IGNvbXByZXNzKDAsIDAuNSwgcG9wbW90aW9uLmNpcmNPdXQpO1xudmFyIGVhc2VDcm9zc2ZhZGVPdXQgPSBjb21wcmVzcygwLjUsIDAuOTUsIHBvcG1vdGlvbi5saW5lYXIpO1xuZnVuY3Rpb24gY29tcHJlc3MobWluLCBtYXgsIGVhc2luZykge1xuICAgIHJldHVybiBmdW5jdGlvbiAocCkge1xuICAgICAgICAvLyBDb3VsZCByZXBsYWNlIGlmcyB3aXRoIGNsYW1wXG4gICAgICAgIGlmIChwIDwgbWluKVxuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIGlmIChwID4gbWF4KVxuICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgIHJldHVybiBlYXNpbmcocG9wbW90aW9uLnByb2dyZXNzKG1pbiwgbWF4LCBwKSk7XG4gICAgfTtcbn1cbnZhciBib3JkZXJzID0gW1wiVG9wTGVmdFwiLCBcIlRvcFJpZ2h0XCIsIFwiQm90dG9tTGVmdFwiLCBcIkJvdHRvbVJpZ2h0XCJdO1xudmFyIG51bUJvcmRlcnMgPSBib3JkZXJzLmxlbmd0aDtcbmZ1bmN0aW9uIG1peFZhbHVlcyhsZWFkU3RhdGUsIGZvbGxvd1N0YXRlLCBsYXRlc3RMZWFkVmFsdWVzLCBsYXRlc3RGb2xsb3dWYWx1ZXMsIGhhc0ZvbGxvd0VsZW1lbnQsIHApIHtcbiAgICAvKipcbiAgICAgKiBNaXggYm9yZGVyIHJhZGl1c1xuICAgICAqL1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbnVtQm9yZGVyczsgaSsrKSB7XG4gICAgICAgIHZhciBib3JkZXJMYWJlbCA9IFwiYm9yZGVyXCIgKyBib3JkZXJzW2ldICsgXCJSYWRpdXNcIjtcbiAgICAgICAgdmFyIGZvbGxvd1JhZGl1cyA9IGdldFJhZGl1cyhsYXRlc3RGb2xsb3dWYWx1ZXMsIGJvcmRlckxhYmVsKTtcbiAgICAgICAgdmFyIGxlYWRSYWRpdXMgPSBnZXRSYWRpdXMobGF0ZXN0TGVhZFZhbHVlcywgYm9yZGVyTGFiZWwpO1xuICAgICAgICBpZiAoZm9sbG93UmFkaXVzID09PSB1bmRlZmluZWQgJiYgbGVhZFJhZGl1cyA9PT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIGZvbGxvd1JhZGl1cyB8fCAoZm9sbG93UmFkaXVzID0gMCk7XG4gICAgICAgIGxlYWRSYWRpdXMgfHwgKGxlYWRSYWRpdXMgPSAwKTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEN1cnJlbnRseSB3ZSdyZSBvbmx5IGNyb3NzZmFkaW5nIGJldHdlZW4gbnVtZXJpY2FsIGJvcmRlciByYWRpdXMuXG4gICAgICAgICAqIEl0IHdvdWxkIGJlIHBvc3NpYmxlIHRvIGNyb3NzZmFkZSBiZXR3ZWVuIHBlcmNlbnRhZ2VzIGZvciBhIGxpdHRsZVxuICAgICAgICAgKiBleHRyYSBidW5kbGUgc2l6ZS5cbiAgICAgICAgICovXG4gICAgICAgIGlmICh0eXBlb2YgZm9sbG93UmFkaXVzID09PSBcIm51bWJlclwiICYmXG4gICAgICAgICAgICB0eXBlb2YgbGVhZFJhZGl1cyA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICAgICAgdmFyIHJhZGl1cyA9IE1hdGgubWF4KHBvcG1vdGlvbi5taXgoZm9sbG93UmFkaXVzLCBsZWFkUmFkaXVzLCBwKSwgMCk7XG4gICAgICAgICAgICBsZWFkU3RhdGVbYm9yZGVyTGFiZWxdID0gZm9sbG93U3RhdGVbYm9yZGVyTGFiZWxdID0gcmFkaXVzO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE1peCByb3RhdGlvblxuICAgICAqL1xuICAgIGlmIChsYXRlc3RGb2xsb3dWYWx1ZXMucm90YXRlIHx8IGxhdGVzdExlYWRWYWx1ZXMucm90YXRlKSB7XG4gICAgICAgIHZhciByb3RhdGUgPSBwb3Btb3Rpb24ubWl4KGxhdGVzdEZvbGxvd1ZhbHVlcy5yb3RhdGUgfHwgMCwgbGF0ZXN0TGVhZFZhbHVlcy5yb3RhdGUgfHwgMCwgcCk7XG4gICAgICAgIGxlYWRTdGF0ZS5yb3RhdGUgPSBmb2xsb3dTdGF0ZS5yb3RhdGUgPSByb3RhdGU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFdlIG9ubHkgd2FudCB0byBtaXggdGhlIGJhY2tncm91bmQgY29sb3IgaWYgdGhlcmUncyBhIGZvbGxvdyBlbGVtZW50XG4gICAgICogdGhhdCB3ZSdyZSBub3QgY3Jvc3NmYWRpbmcgb3BhY2l0eSBiZXR3ZWVuLiBGb3IgaW5zdGFuY2Ugd2l0aCBzd2l0Y2hcbiAgICAgKiBBbmltYXRlU2hhcmVkTGF5b3V0IGFuaW1hdGlvbnMsIHRoaXMgaGVscHMgdGhlIGlsbHVzaW9uIG9mIGEgY29udGludW91c1xuICAgICAqIGVsZW1lbnQgYmVpbmcgYW5pbWF0ZWQgYnV0IGFsc28gY3V0cyBkb3duIG9uIHRoZSBudW1iZXIgb2YgcGFpbnRzIHRyaWdnZXJlZFxuICAgICAqIGZvciBlbGVtZW50cyB3aGVyZSBvcGFjaXR5IGlzIGRvaW5nIHRoYXQgd29yayBmb3IgdXMuXG4gICAgICovXG4gICAgaWYgKCFoYXNGb2xsb3dFbGVtZW50ICYmXG4gICAgICAgIGxhdGVzdExlYWRWYWx1ZXMuYmFja2dyb3VuZENvbG9yICYmXG4gICAgICAgIGxhdGVzdEZvbGxvd1ZhbHVlcy5iYWNrZ3JvdW5kQ29sb3IpIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoaXMgaXNuJ3QgaWRlYWwgcGVyZm9ybWFuY2Utd2lzZSBhcyBtaXhDb2xvciBpcyBjcmVhdGluZyBhIG5ldyBmdW5jdGlvbiBldmVyeSBmcmFtZS5cbiAgICAgICAgICogV2UgY291bGQgcHJvYmFibHkgY3JlYXRlIGEgbWl4ZXIgdGhhdCBydW5zIGF0IHRoZSBzdGFydCBvZiB0aGUgYW5pbWF0aW9uIGJ1dFxuICAgICAgICAgKiB0aGUgaWRlYSBiZWhpbmQgdGhlIGNyb3NzZmFkZXIgaXMgdGhhdCBpdCBydW5zIGR5bmFtaWNhbGx5IGJldHdlZW4gdHdvIHBvdGVudGlhbGx5XG4gICAgICAgICAqIGNoYW5naW5nIHRhcmdldHMgKGllIG9wYWNpdHkgb3IgYm9yZGVyUmFkaXVzIG1heSBiZSBhbmltYXRpbmcgaW5kZXBlbmRlbnRseSB2aWEgdmFyaWFudHMpXG4gICAgICAgICAqL1xuICAgICAgICBsZWFkU3RhdGUuYmFja2dyb3VuZENvbG9yID0gZm9sbG93U3RhdGUuYmFja2dyb3VuZENvbG9yID0gcG9wbW90aW9uLm1peENvbG9yKGxhdGVzdEZvbGxvd1ZhbHVlcy5iYWNrZ3JvdW5kQ29sb3IsIGxhdGVzdExlYWRWYWx1ZXMuYmFja2dyb3VuZENvbG9yKShwKTtcbiAgICB9XG59XG5mdW5jdGlvbiBnZXRSYWRpdXModmFsdWVzLCByYWRpdXNOYW1lKSB7XG4gICAgdmFyIF9hO1xuICAgIHJldHVybiAoX2EgPSB2YWx1ZXNbcmFkaXVzTmFtZV0pICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IHZhbHVlcy5ib3JkZXJSYWRpdXM7XG59XG5cbmZ1bmN0aW9uIGxheW91dFN0YWNrKCkge1xuICAgIHZhciBzdGFjayA9IG5ldyBTZXQoKTtcbiAgICB2YXIgc3RhdGUgPSB7IGxlYWRJc0V4aXRpbmc6IGZhbHNlIH07XG4gICAgdmFyIHByZXZTdGF0ZSA9IHRzbGliLl9fYXNzaWduKHt9LCBzdGF0ZSk7XG4gICAgdmFyIHByZXZWYWx1ZXM7XG4gICAgdmFyIHByZXZWaWV3cG9ydEJveDtcbiAgICB2YXIgcHJldkRyYWdDdXJzb3I7XG4gICAgdmFyIGNyb3NzZmFkZXIgPSBjcmVhdGVDcm9zc2ZhZGVyKCk7XG4gICAgdmFyIG5lZWRzQ3Jvc3NmYWRlQW5pbWF0aW9uID0gZmFsc2U7XG4gICAgZnVuY3Rpb24gZ2V0Rm9sbG93Vmlld3BvcnRCb3goKSB7XG4gICAgICAgIHJldHVybiBzdGF0ZS5mb2xsb3cgPyBzdGF0ZS5mb2xsb3cucHJldlZpZXdwb3J0Qm94IDogcHJldlZpZXdwb3J0Qm94O1xuICAgIH1cbiAgICBmdW5jdGlvbiBnZXRGb2xsb3dMYXlvdXQoKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgcmV0dXJuIChfYSA9IHN0YXRlLmZvbGxvdykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmdldExheW91dFN0YXRlKCkubGF5b3V0O1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBhZGQ6IGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgICAgICAgICBlbGVtZW50LnNldENyb3NzZmFkZXIoY3Jvc3NmYWRlcik7XG4gICAgICAgICAgICBzdGFjay5hZGQoZWxlbWVudCk7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEh5ZHJhdGUgbmV3IGVsZW1lbnQgd2l0aCBwcmV2aW91cyBkcmFnIHBvc2l0aW9uIGlmIHdlIGhhdmUgb25lXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGlmIChwcmV2RHJhZ0N1cnNvcilcbiAgICAgICAgICAgICAgICBlbGVtZW50LnByZXZEcmFnQ3Vyc29yID0gcHJldkRyYWdDdXJzb3I7XG4gICAgICAgICAgICBpZiAoIXN0YXRlLmxlYWQpXG4gICAgICAgICAgICAgICAgc3RhdGUubGVhZCA9IGVsZW1lbnQ7XG4gICAgICAgIH0sXG4gICAgICAgIHJlbW92ZTogZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICAgICAgICAgIHN0YWNrLmRlbGV0ZShlbGVtZW50KTtcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0TGVhZDogZnVuY3Rpb24gKCkgeyByZXR1cm4gc3RhdGUubGVhZDsgfSxcbiAgICAgICAgdXBkYXRlU25hcHNob3Q6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICghc3RhdGUubGVhZClcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICBwcmV2VmFsdWVzID0gY3Jvc3NmYWRlci5pc0FjdGl2ZSgpXG4gICAgICAgICAgICAgICAgPyBjcm9zc2ZhZGVyLmdldExhdGVzdFZhbHVlcygpXG4gICAgICAgICAgICAgICAgOiBzdGF0ZS5sZWFkLmdldExhdGVzdFZhbHVlcygpO1xuICAgICAgICAgICAgcHJldlZpZXdwb3J0Qm94ID0gc3RhdGUubGVhZC5wcmV2Vmlld3BvcnRCb3g7XG4gICAgICAgICAgICB2YXIgZHJhZ0NvbnRyb2xzID0gZWxlbWVudERyYWdDb250cm9scy5nZXQoc3RhdGUubGVhZCk7XG4gICAgICAgICAgICBpZiAoZHJhZ0NvbnRyb2xzICYmIGRyYWdDb250cm9scy5pc0RyYWdnaW5nKSB7XG4gICAgICAgICAgICAgICAgcHJldkRyYWdDdXJzb3IgPSBkcmFnQ29udHJvbHMuY3Vyc29yUHJvZ3Jlc3M7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGNsZWFyU25hcHNob3Q6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHByZXZEcmFnQ3Vyc29yID0gcHJldlZpZXdwb3J0Qm94ID0gdW5kZWZpbmVkO1xuICAgICAgICB9LFxuICAgICAgICB1cGRhdGVMZWFkQW5kRm9sbG93OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICBwcmV2U3RhdGUgPSB0c2xpYi5fX2Fzc2lnbih7fSwgc3RhdGUpO1xuICAgICAgICAgICAgdmFyIGxlYWQ7XG4gICAgICAgICAgICB2YXIgZm9sbG93O1xuICAgICAgICAgICAgdmFyIG9yZGVyID0gQXJyYXkuZnJvbShzdGFjayk7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gb3JkZXIubGVuZ3RoOyBpLS07IGkgPj0gMCkge1xuICAgICAgICAgICAgICAgIHZhciBlbGVtZW50ID0gb3JkZXJbaV07XG4gICAgICAgICAgICAgICAgaWYgKGxlYWQpXG4gICAgICAgICAgICAgICAgICAgIGZvbGxvdyAhPT0gbnVsbCAmJiBmb2xsb3cgIT09IHZvaWQgMCA/IGZvbGxvdyA6IChmb2xsb3cgPSBlbGVtZW50KTtcbiAgICAgICAgICAgICAgICBsZWFkICE9PSBudWxsICYmIGxlYWQgIT09IHZvaWQgMCA/IGxlYWQgOiAobGVhZCA9IGVsZW1lbnQpO1xuICAgICAgICAgICAgICAgIGlmIChsZWFkICYmIGZvbGxvdylcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzdGF0ZS5sZWFkID0gbGVhZDtcbiAgICAgICAgICAgIHN0YXRlLmZvbGxvdyA9IGZvbGxvdztcbiAgICAgICAgICAgIHN0YXRlLmxlYWRJc0V4aXRpbmcgPSAoKF9hID0gc3RhdGUubGVhZCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnByZXNlbmNlKSA9PT0gUHJlc2VuY2UuRXhpdGluZztcbiAgICAgICAgICAgIGNyb3NzZmFkZXIuc2V0T3B0aW9ucyh7XG4gICAgICAgICAgICAgICAgbGVhZDogbGVhZCxcbiAgICAgICAgICAgICAgICBmb2xsb3c6IGZvbGxvdyxcbiAgICAgICAgICAgICAgICBwcmV2VmFsdWVzOiBwcmV2VmFsdWVzLFxuICAgICAgICAgICAgICAgIGNyb3NzZmFkZU9wYWNpdHk6IChmb2xsb3cgPT09IG51bGwgfHwgZm9sbG93ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBmb2xsb3cuaXNQcmVzZW5jZVJvb3QpIHx8IChsZWFkID09PSBudWxsIHx8IGxlYWQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGxlYWQuaXNQcmVzZW5jZVJvb3QpLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAvLyBEb24ndCBjcm9zc2ZhZGUgaWYgd2UndmUganVzdCBhbmltYXRlZCBiYWNrIGZyb20gbGVhZCBhbmQgc3dpdGNoZWQgdGhlXG4gICAgICAgICAgICAvLyBvbGQgZm9sbG93IHRvIHRoZSBuZXcgbGVhZC5cbiAgICAgICAgICAgIHN0YXRlLmxlYWQgIT09IHByZXZTdGF0ZS5mb2xsb3cgJiZcbiAgICAgICAgICAgICAgICAocHJldlN0YXRlLmxlYWQgIT09IHN0YXRlLmxlYWQgfHxcbiAgICAgICAgICAgICAgICAgICAgcHJldlN0YXRlLmxlYWRJc0V4aXRpbmcgIT09IHN0YXRlLmxlYWRJc0V4aXRpbmcpKSB7XG4gICAgICAgICAgICAgICAgbmVlZHNDcm9zc2ZhZGVBbmltYXRpb24gPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBhbmltYXRlOiBmdW5jdGlvbiAoY2hpbGQsIHNob3VsZENyb3NzZmFkZSkge1xuICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgaWYgKHNob3VsZENyb3NzZmFkZSA9PT0gdm9pZCAwKSB7IHNob3VsZENyb3NzZmFkZSA9IGZhbHNlOyB9XG4gICAgICAgICAgICBpZiAoY2hpbGQgPT09IHN0YXRlLmxlYWQpIHtcbiAgICAgICAgICAgICAgICBpZiAoc2hvdWxkQ3Jvc3NmYWRlKSB7XG4gICAgICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAgICAgKiBQb2ludCBhIGxlYWQgdG8gaXRzZWxmIGluIGNhc2UgaXQgd2FzIHByZXZpb3VzbHkgcG9pbnRpbmdcbiAgICAgICAgICAgICAgICAgICAgICogdG8gYSBkaWZmZXJlbnQgdmlzdWFsIGVsZW1lbnRcbiAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgICAgIGNoaWxkLnBvaW50VG8oc3RhdGUubGVhZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjaGlsZC5zZXRWaXNpYmlsaXR5KHRydWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgY29uZmlnID0ge307XG4gICAgICAgICAgICAgICAgdmFyIHByZXZQYXJlbnQgPSAoX2EgPSBzdGF0ZS5mb2xsb3cpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5nZXRQcm9qZWN0aW9uUGFyZW50KCk7XG4gICAgICAgICAgICAgICAgaWYgKHByZXZQYXJlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICAgICAqIFdlJ2xsIHVzZSB0aGlzIHRvIGRldGVybWluZSBpZiB0aGUgZWxlbWVudCBvciBpdHMgbGF5b3V0SWQgaGFzIGJlZW4gcmVwYXJlbnRlZC5cbiAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgICAgIGNvbmZpZy5wcmV2UGFyZW50ID0gcHJldlBhcmVudDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGNoaWxkLnByZXNlbmNlID09PSBQcmVzZW5jZS5FbnRlcmluZykge1xuICAgICAgICAgICAgICAgICAgICBjb25maWcub3JpZ2luQm94ID0gZ2V0Rm9sbG93Vmlld3BvcnRCb3goKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoY2hpbGQucHJlc2VuY2UgPT09IFByZXNlbmNlLkV4aXRpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uZmlnLnRhcmdldEJveCA9IGdldEZvbGxvd0xheW91dCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAobmVlZHNDcm9zc2ZhZGVBbmltYXRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgbmVlZHNDcm9zc2ZhZGVBbmltYXRpb24gPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRyYW5zaXRpb24gPSBjaGlsZC5nZXREZWZhdWx0VHJhbnNpdGlvbigpO1xuICAgICAgICAgICAgICAgICAgICBjaGlsZC5wcmVzZW5jZSA9PT0gUHJlc2VuY2UuRW50ZXJpbmdcbiAgICAgICAgICAgICAgICAgICAgICAgID8gY3Jvc3NmYWRlci50b0xlYWQodHJhbnNpdGlvbilcbiAgICAgICAgICAgICAgICAgICAgICAgIDogY3Jvc3NmYWRlci5mcm9tTGVhZCh0cmFuc2l0aW9uKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2hpbGQubm90aWZ5TGF5b3V0UmVhZHkoY29uZmlnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmIChzaG91bGRDcm9zc2ZhZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgc3RhdGUubGVhZCAmJiBjaGlsZC5wb2ludFRvKHN0YXRlLmxlYWQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY2hpbGQuc2V0VmlzaWJpbGl0eShmYWxzZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgIH07XG59XG5cbmZ1bmN0aW9uIHJlc2V0Um90YXRlKGNoaWxkKSB7XG4gICAgLy8gSWYgdGhlcmUncyBubyBkZXRlY3RlZCByb3RhdGlvbiB2YWx1ZXMsIHdlIGNhbiBlYXJseSByZXR1cm4gd2l0aG91dCBhIGZvcmNlZCByZW5kZXIuXG4gICAgdmFyIGhhc1JvdGF0ZSA9IGZhbHNlO1xuICAgIC8vIEtlZXAgYSByZWNvcmQgb2YgYWxsIHRoZSB2YWx1ZXMgd2UndmUgcmVzZXRcbiAgICB2YXIgcmVzZXRWYWx1ZXMgPSB7fTtcbiAgICAvLyBDaGVjayB0aGUgcm90YXRlIHZhbHVlIG9mIGFsbCBheGVzIGFuZCByZXNldCB0byAwXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0cmFuc2Zvcm1BeGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBheGlzID0gdHJhbnNmb3JtQXhlc1tpXTtcbiAgICAgICAgdmFyIGtleSA9IFwicm90YXRlXCIgKyBheGlzO1xuICAgICAgICAvLyBJZiB0aGlzIHJvdGF0aW9uIGRvZXNuJ3QgZXhpc3QgYXMgYSBtb3Rpb24gdmFsdWUsIHRoZW4gd2UgZG9uJ3RcbiAgICAgICAgLy8gbmVlZCB0byByZXNldCBpdFxuICAgICAgICBpZiAoIWNoaWxkLmhhc1ZhbHVlKGtleSkgfHwgY2hpbGQuZ2V0U3RhdGljVmFsdWUoa2V5KSA9PT0gMClcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICBoYXNSb3RhdGUgPSB0cnVlO1xuICAgICAgICAvLyBSZWNvcmQgdGhlIHJvdGF0aW9uIGFuZCB0aGVuIHRlbXBvcmFyaWx5IHNldCBpdCB0byAwXG4gICAgICAgIHJlc2V0VmFsdWVzW2tleV0gPSBjaGlsZC5nZXRTdGF0aWNWYWx1ZShrZXkpO1xuICAgICAgICBjaGlsZC5zZXRTdGF0aWNWYWx1ZShrZXksIDApO1xuICAgIH1cbiAgICAvLyBJZiB0aGVyZSdzIG5vIHJvdGF0aW9uIHZhbHVlcywgd2UgZG9uJ3QgbmVlZCB0byBkbyBhbnkgbW9yZS5cbiAgICBpZiAoIWhhc1JvdGF0ZSlcbiAgICAgICAgcmV0dXJuO1xuICAgIC8vIEZvcmNlIGEgcmVuZGVyIG9mIHRoaXMgZWxlbWVudCB0byBhcHBseSB0aGUgdHJhbnNmb3JtIHdpdGggYWxsIHJvdGF0aW9uc1xuICAgIC8vIHNldCB0byAwLlxuICAgIGNoaWxkLnN5bmNSZW5kZXIoKTtcbiAgICAvLyBQdXQgYmFjayBhbGwgdGhlIHZhbHVlcyB3ZSByZXNldFxuICAgIGZvciAodmFyIGtleSBpbiByZXNldFZhbHVlcykge1xuICAgICAgICBjaGlsZC5zZXRTdGF0aWNWYWx1ZShrZXksIHJlc2V0VmFsdWVzW2tleV0pO1xuICAgIH1cbiAgICAvLyBTY2hlZHVsZSBhIHJlbmRlciBmb3IgdGhlIG5leHQgZnJhbWUuIFRoaXMgZW5zdXJlcyB3ZSB3b24ndCB2aXN1YWxseVxuICAgIC8vIHNlZSB0aGUgZWxlbWVudCB3aXRoIHRoZSByZXNldCByb3RhdGUgdmFsdWUgYXBwbGllZC5cbiAgICBjaGlsZC5zY2hlZHVsZVJlbmRlcigpO1xufVxuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xudmFyIEFuaW1hdGVTaGFyZWRMYXlvdXQgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWIuX19leHRlbmRzKEFuaW1hdGVTaGFyZWRMYXlvdXQsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gQW5pbWF0ZVNoYXJlZExheW91dCgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBIGxpc3Qgb2YgYWxsIHRoZSBjaGlsZHJlbiBpbiB0aGUgc2hhcmVkIGxheW91dFxuICAgICAgICAgKi9cbiAgICAgICAgX3RoaXMuY2hpbGRyZW4gPSBuZXcgU2V0KCk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBcyBhbmltYXRlIGNvbXBvbmVudHMgd2l0aCBhIGRlZmluZWQgYGxheW91dElkYCBhcmUgYWRkZWQvcmVtb3ZlZCB0byB0aGUgdHJlZSxcbiAgICAgICAgICogd2Ugc3RvcmUgdGhlbSBpbiBvcmRlci4gV2hlbiBvbmUgaXMgYWRkZWQsIGl0IHdpbGwgYW5pbWF0ZSBvdXQgZnJvbSB0aGVcbiAgICAgICAgICogcHJldmlvdXMgb25lLCBhbmQgd2hlbiBpdCdzIHJlbW92ZWQsIGl0J2xsIGFuaW1hdGUgdG8gdGhlIHByZXZpb3VzIG9uZS5cbiAgICAgICAgICovXG4gICAgICAgIF90aGlzLnN0YWNrcyA9IG5ldyBNYXAoKTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRyYWNrIHdoZXRoZXIgdGhlIGNvbXBvbmVudCBoYXMgbW91bnRlZC4gSWYgaXQgaGFzbid0LCB0aGUgcHJlc2VuY2Ugb2YgYWRkZWQgY2hpbGRyZW5cbiAgICAgICAgICogYXJlIHNldCB0byBQcmVzZW50LCB3aGVyZWFzIGlmIGl0IGhhcyB0aGV5J3JlIGNvbnNpZGVyZWQgRW50ZXJpbmdcbiAgICAgICAgICovXG4gICAgICAgIF90aGlzLmhhc01vdW50ZWQgPSBmYWxzZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRyYWNrIHdoZXRoZXIgd2UgYWxyZWFkeSBoYXZlIGFuIHVwZGF0ZSBzY2hlZHVsZWQuIElmIHdlIGRvbid0LCB3ZSdsbCBydW4gc25hcHNob3RzXG4gICAgICAgICAqIGFuZCBzY2hlZHVsZSBvbmUuXG4gICAgICAgICAqL1xuICAgICAgICBfdGhpcy51cGRhdGVTY2hlZHVsZWQgPSBmYWxzZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRyYWNrcyB3aGV0aGVyIHdlIGFscmVhZHkgaGF2ZSBhIHJlbmRlciBzY2hlZHVsZWQuIElmIHdlIGRvbid0LCB3ZSdsbCBmb3JjZSBvbmUgd2l0aCB0aGlzLmZvcmNlUmVuZGVyXG4gICAgICAgICAqL1xuICAgICAgICBfdGhpcy5yZW5kZXJTY2hlZHVsZWQgPSBmYWxzZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBtZXRob2RzIHByb3ZpZGVkIHRvIGFsbCBjaGlsZHJlbiBpbiB0aGUgc2hhcmVkIGxheW91dCB0cmVlLlxuICAgICAgICAgKi9cbiAgICAgICAgX3RoaXMuc3luY0NvbnRleHQgPSB0c2xpYi5fX2Fzc2lnbih0c2xpYi5fX2Fzc2lnbih7fSwgY3JlYXRlQmF0Y2hlcigpKSwgeyBzeW5jVXBkYXRlOiBmdW5jdGlvbiAoZm9yY2UpIHsgcmV0dXJuIF90aGlzLnNjaGVkdWxlVXBkYXRlKGZvcmNlKTsgfSwgZm9yY2VVcGRhdGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAvLyBCeSBjb3B5aW5nIHN5bmNDb250ZXh0IHRvIGl0c2VsZiwgd2hlbiB0aGlzIGNvbXBvbmVudCByZS1yZW5kZXJzIGl0J2xsIGFsc28gcmUtcmVuZGVyXG4gICAgICAgICAgICAgICAgLy8gYWxsIGNoaWxkcmVuIHN1YnNjcmliZWQgdG8gdGhlIFNoYXJlZExheW91dCBjb250ZXh0LlxuICAgICAgICAgICAgICAgIF90aGlzLnN5bmNDb250ZXh0ID0gdHNsaWIuX19hc3NpZ24oe30sIF90aGlzLnN5bmNDb250ZXh0KTtcbiAgICAgICAgICAgICAgICBfdGhpcy5zY2hlZHVsZVVwZGF0ZSh0cnVlKTtcbiAgICAgICAgICAgIH0sIHJlZ2lzdGVyOiBmdW5jdGlvbiAoY2hpbGQpIHsgcmV0dXJuIF90aGlzLmFkZENoaWxkKGNoaWxkKTsgfSwgcmVtb3ZlOiBmdW5jdGlvbiAoY2hpbGQpIHsgcmV0dXJuIF90aGlzLnJlbW92ZUNoaWxkKGNoaWxkKTsgfSB9KTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBBbmltYXRlU2hhcmVkTGF5b3V0LnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5oYXNNb3VudGVkID0gdHJ1ZTtcbiAgICB9O1xuICAgIEFuaW1hdGVTaGFyZWRMYXlvdXQucHJvdG90eXBlLmNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5zdGFydExheW91dEFuaW1hdGlvbigpO1xuICAgIH07XG4gICAgQW5pbWF0ZVNoYXJlZExheW91dC5wcm90b3R5cGUuc2hvdWxkQ29tcG9uZW50VXBkYXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnJlbmRlclNjaGVkdWxlZCA9IHRydWU7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH07XG4gICAgQW5pbWF0ZVNoYXJlZExheW91dC5wcm90b3R5cGUuc3RhcnRMYXlvdXRBbmltYXRpb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZXNldCB1cGRhdGUgYW5kIHJlbmRlciBzY2hlZHVsZWQgc3RhdHVzXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnJlbmRlclNjaGVkdWxlZCA9IHRoaXMudXBkYXRlU2NoZWR1bGVkID0gZmFsc2U7XG4gICAgICAgIHZhciB0eXBlID0gdGhpcy5wcm9wcy50eXBlO1xuICAgICAgICAvKipcbiAgICAgICAgICogVXBkYXRlIHByZXNlbmNlIG1ldGFkYXRhIGJhc2VkIG9uIHRoZSBsYXRlc3QgQW5pbWF0ZVByZXNlbmNlIHN0YXR1cy5cbiAgICAgICAgICogVGhpcyBpcyBhIGtpbmQgb2YgZ29vZnkgd2F5IG9mIGRlYWxpbmcgd2l0aCB0aGlzLCBwZXJoYXBzIHRoZXJlJ3MgYSBiZXR0ZXIgbW9kZWwgdG8gZmluZC5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuY2hpbGRyZW4uZm9yRWFjaChmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgICAgICAgIGlmICghY2hpbGQuaXNQcmVzZW50KSB7XG4gICAgICAgICAgICAgICAgY2hpbGQucHJlc2VuY2UgPSBQcmVzZW5jZS5FeGl0aW5nO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoY2hpbGQucHJlc2VuY2UgIT09IFByZXNlbmNlLkVudGVyaW5nKSB7XG4gICAgICAgICAgICAgICAgY2hpbGQucHJlc2VuY2UgPVxuICAgICAgICAgICAgICAgICAgICBjaGlsZC5wcmVzZW5jZSA9PT0gUHJlc2VuY2UuRXhpdGluZ1xuICAgICAgICAgICAgICAgICAgICAgICAgPyBQcmVzZW5jZS5FbnRlcmluZ1xuICAgICAgICAgICAgICAgICAgICAgICAgOiBQcmVzZW5jZS5QcmVzZW50O1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy51cGRhdGVTdGFja3MoKTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIENyZWF0ZSBhIGhhbmRsZXIgd2hpY2ggd2UgY2FuIHVzZSB0byBmbHVzaCB0aGUgY2hpbGRyZW4gYW5pbWF0aW9uc1xuICAgICAgICAgKi9cbiAgICAgICAgdmFyIGhhbmRsZXIgPSB7XG4gICAgICAgICAgICBsYXlvdXRSZWFkeTogZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgICAgICAgICAgICAgaWYgKGNoaWxkLmdldExheW91dElkKCkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgc3RhY2sgPSBfdGhpcy5nZXRTdGFjayhjaGlsZCk7XG4gICAgICAgICAgICAgICAgICAgIHN0YWNrLmFuaW1hdGUoY2hpbGQsIHR5cGUgPT09IFwiY3Jvc3NmYWRlXCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY2hpbGQubm90aWZ5TGF5b3V0UmVhZHkoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcGFyZW50OiB0aGlzLmNvbnRleHQudmlzdWFsRWxlbWVudCxcbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNoYXJlZCBsYXlvdXQgYW5pbWF0aW9ucyBjYW4gYmUgdXNlZCB3aXRob3V0IHRoZSBBbmltYXRlU2hhcmVkTGF5b3V0IHdyYXBwaW5nIGNvbXBvbmVudC5cbiAgICAgICAgICogVGhpcyByZXF1aXJlcyBzb21lIGNvLW9yZGluYXRpb24gYWNyb3NzIGNvbXBvbmVudHMgdG8gc3RvcCBsYXlvdXQgdGhyYXNoaW5nXG4gICAgICAgICAqIGFuZCBlbnN1cmUgbWVhc3VyZW1lbnRzIGFyZSB0YWtlbiBhdCB0aGUgY29ycmVjdCB0aW1lLlxuICAgICAgICAgKlxuICAgICAgICAgKiBIZXJlIHdlIHVzZSB0aGF0IHNhbWUgbWVjaGFuaXNtIG9mIHNjaGVkdWxlL2ZsdXNoLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5jaGlsZHJlbi5mb3JFYWNoKGZ1bmN0aW9uIChjaGlsZCkgeyByZXR1cm4gX3RoaXMuc3luY0NvbnRleHQuYWRkKGNoaWxkKTsgfSk7XG4gICAgICAgIHRoaXMuc3luY0NvbnRleHQuZmx1c2goaGFuZGxlcik7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDbGVhciBzbmFwc2hvdHMgc28gc3Vic2VxdWVudCByZXJlbmRlcnMgZG9uJ3QgcmV0YWluIG1lbW9yeSBvZiBvdXRnb2luZyBjb21wb25lbnRzXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnN0YWNrcy5mb3JFYWNoKGZ1bmN0aW9uIChzdGFjaykgeyByZXR1cm4gc3RhY2suY2xlYXJTbmFwc2hvdCgpOyB9KTtcbiAgICB9O1xuICAgIEFuaW1hdGVTaGFyZWRMYXlvdXQucHJvdG90eXBlLnVwZGF0ZVN0YWNrcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5zdGFja3MuZm9yRWFjaChmdW5jdGlvbiAoc3RhY2spIHsgcmV0dXJuIHN0YWNrLnVwZGF0ZUxlYWRBbmRGb2xsb3coKTsgfSk7XG4gICAgfTtcbiAgICBBbmltYXRlU2hhcmVkTGF5b3V0LnByb3RvdHlwZS5zY2hlZHVsZVVwZGF0ZSA9IGZ1bmN0aW9uIChmb3JjZSkge1xuICAgICAgICBpZiAoZm9yY2UgPT09IHZvaWQgMCkgeyBmb3JjZSA9IGZhbHNlOyB9XG4gICAgICAgIGlmICghKGZvcmNlIHx8ICF0aGlzLnVwZGF0ZVNjaGVkdWxlZCkpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBGbGFnIHdlJ3ZlIHNjaGVkdWxlZCBhbiB1cGRhdGVcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMudXBkYXRlU2NoZWR1bGVkID0gdHJ1ZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFdyaXRlOiBSZXNldCB0cmFuc2Zvcm1zIHNvIGJvdW5kaW5nIGJveGVzIGNhbiBiZSBhY2N1cmF0ZWx5IG1lYXN1cmVkLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5jaGlsZHJlbi5mb3JFYWNoKGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgICAgICAgcmVzZXRSb3RhdGUoY2hpbGQpO1xuICAgICAgICAgICAgaWYgKGNoaWxkLnNob3VsZFJlc2V0VHJhbnNmb3JtKCkpXG4gICAgICAgICAgICAgICAgY2hpbGQucmVzZXRUcmFuc2Zvcm0oKTtcbiAgICAgICAgfSk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZWFkOiBTbmFwc2hvdCBjaGlsZHJlblxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5jaGlsZHJlbi5mb3JFYWNoKHNuYXBzaG90Vmlld3BvcnRCb3gpO1xuICAgICAgICAvKipcbiAgICAgICAgICogRXZlcnkgY2hpbGQga2VlcHMgYSBsb2NhbCBzbmFwc2hvdCwgYnV0IHdlIGFsc28gd2FudCB0byByZWNvcmRcbiAgICAgICAgICogc25hcHNob3RzIG9mIHRoZSB2aXNpYmxlIGNoaWxkcmVuIGFzLCBpZiB0aGV5J3JlIGFyZSBiZWluZyByZW1vdmVkXG4gICAgICAgICAqIGluIHRoaXMgcmVuZGVyLCB3ZSBjYW4gc3RpbGwgYWNjZXNzIHRoZW0uXG4gICAgICAgICAqXG4gICAgICAgICAqIFRPRE86IFdoYXQgd291bGQgYmUgYmV0dGVyIGhlcmUgaXMgZG9pbmcgYSBzaW5nbGUgbG9vcCB3aGVyZSB3ZVxuICAgICAgICAgKiBvbmx5IHNuYXBzaG90Vmlld3BvcnRCb3hlcyBvZiB1bmRlZmluZWQgbGF5b3V0SWRzIGFuZCB0aGVuIG9uZSBmb3IgZWFjaCBzdGFja1xuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5zdGFja3MuZm9yRWFjaChmdW5jdGlvbiAoc3RhY2spIHsgcmV0dXJuIHN0YWNrLnVwZGF0ZVNuYXBzaG90KCk7IH0pO1xuICAgICAgICAvKipcbiAgICAgICAgICogRm9yY2UgYSByZXJlbmRlciBieSBzZXR0aW5nIHN0YXRlIGlmIHdlIGFyZW4ndCBhbHJlYWR5IGdvaW5nIHRvIHJlbmRlci5cbiAgICAgICAgICovXG4gICAgICAgIGlmIChmb3JjZSB8fCAhdGhpcy5yZW5kZXJTY2hlZHVsZWQpIHtcbiAgICAgICAgICAgIHRoaXMucmVuZGVyU2NoZWR1bGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMuZm9yY2VVcGRhdGUoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgQW5pbWF0ZVNoYXJlZExheW91dC5wcm90b3R5cGUuYWRkQ2hpbGQgPSBmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgICAgdGhpcy5jaGlsZHJlbi5hZGQoY2hpbGQpO1xuICAgICAgICB0aGlzLmFkZFRvU3RhY2soY2hpbGQpO1xuICAgICAgICBjaGlsZC5wcmVzZW5jZSA9IHRoaXMuaGFzTW91bnRlZCA/IFByZXNlbmNlLkVudGVyaW5nIDogUHJlc2VuY2UuUHJlc2VudDtcbiAgICB9O1xuICAgIEFuaW1hdGVTaGFyZWRMYXlvdXQucHJvdG90eXBlLnJlbW92ZUNoaWxkID0gZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgICAgIHRoaXMuc2NoZWR1bGVVcGRhdGUoKTtcbiAgICAgICAgdGhpcy5jaGlsZHJlbi5kZWxldGUoY2hpbGQpO1xuICAgICAgICB0aGlzLnJlbW92ZUZyb21TdGFjayhjaGlsZCk7XG4gICAgfTtcbiAgICBBbmltYXRlU2hhcmVkTGF5b3V0LnByb3RvdHlwZS5hZGRUb1N0YWNrID0gZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgICAgIHZhciBzdGFjayA9IHRoaXMuZ2V0U3RhY2soY2hpbGQpO1xuICAgICAgICBzdGFjayA9PT0gbnVsbCB8fCBzdGFjayA9PT0gdm9pZCAwID8gdm9pZCAwIDogc3RhY2suYWRkKGNoaWxkKTtcbiAgICB9O1xuICAgIEFuaW1hdGVTaGFyZWRMYXlvdXQucHJvdG90eXBlLnJlbW92ZUZyb21TdGFjayA9IGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgICB2YXIgc3RhY2sgPSB0aGlzLmdldFN0YWNrKGNoaWxkKTtcbiAgICAgICAgc3RhY2sgPT09IG51bGwgfHwgc3RhY2sgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHN0YWNrLnJlbW92ZShjaGlsZCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSZXR1cm4gYSBzdGFjayBvZiBhbmltYXRlIGNoaWxkcmVuIGJhc2VkIG9uIHRoZSBwcm92aWRlZCBsYXlvdXRJZC5cbiAgICAgKiBXaWxsIGNyZWF0ZSBhIHN0YWNrIGlmIG5vbmUgY3VycmVudGx5IGV4aXN0cyB3aXRoIHRoYXQgbGF5b3V0SWQuXG4gICAgICovXG4gICAgQW5pbWF0ZVNoYXJlZExheW91dC5wcm90b3R5cGUuZ2V0U3RhY2sgPSBmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgICAgdmFyIGlkID0gY2hpbGQuZ2V0TGF5b3V0SWQoKTtcbiAgICAgICAgaWYgKGlkID09PSB1bmRlZmluZWQpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIC8vIENyZWF0ZSBzdGFjayBpZiBpdCBkb2Vzbid0IGFscmVhZHkgZXhpc3RcbiAgICAgICAgIXRoaXMuc3RhY2tzLmhhcyhpZCkgJiYgdGhpcy5zdGFja3Muc2V0KGlkLCBsYXlvdXRTdGFjaygpKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RhY2tzLmdldChpZCk7XG4gICAgfTtcbiAgICBBbmltYXRlU2hhcmVkTGF5b3V0LnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAoUmVhY3RfX25hbWVzcGFjZS5jcmVhdGVFbGVtZW50KFNoYXJlZExheW91dENvbnRleHQuUHJvdmlkZXIsIHsgdmFsdWU6IHRoaXMuc3luY0NvbnRleHQgfSwgdGhpcy5wcm9wcy5jaGlsZHJlbikpO1xuICAgIH07XG4gICAgQW5pbWF0ZVNoYXJlZExheW91dC5jb250ZXh0VHlwZSA9IE1vdGlvbkNvbnRleHQ7XG4gICAgcmV0dXJuIEFuaW1hdGVTaGFyZWRMYXlvdXQ7XG59KFJlYWN0X19uYW1lc3BhY2UuQ29tcG9uZW50KSk7XG5cbi8qKlxuICogYE1vdGlvbkNvbmZpZ2AgaXMgdXNlZCB0byBzZXQgY29uZmlndXJhdGlvbiBvcHRpb25zIGZvciBhbGwgY2hpbGRyZW4gYG1vdGlvbmAgY29tcG9uZW50cy5cbiAqXG4gKiBgYGBqc3hcbiAqIGltcG9ydCB7IG1vdGlvbiwgTW90aW9uQ29uZmlnIH0gZnJvbSBcImZyYW1lci1tb3Rpb25cIlxuICpcbiAqIGV4cG9ydCBmdW5jdGlvbiBBcHAoKSB7XG4gKiAgIHJldHVybiAoXG4gKiAgICAgPE1vdGlvbkNvbmZpZyB0cmFuc2l0aW9uPXt7IHR5cGU6IFwic3ByaW5nXCIgfX0+XG4gKiAgICAgICA8bW90aW9uLmRpdiBhbmltYXRlPXt7IHg6IDEwMCB9fSAvPlxuICogICAgIDwvTW90aW9uQ29uZmlnPlxuICogICApXG4gKiB9XG4gKiBgYGBcbiAqXG4gKiBAcHVibGljXG4gKi9cbmZ1bmN0aW9uIE1vdGlvbkNvbmZpZyhfYSkge1xuICAgIHZhciBjaGlsZHJlbiA9IF9hLmNoaWxkcmVuLCBjb25maWcgPSB0c2xpYi5fX3Jlc3QoX2EsIFtcImNoaWxkcmVuXCJdKTtcbiAgICAvKipcbiAgICAgKiBJbmhlcml0IHByb3BzIGZyb20gYW55IHBhcmVudCBNb3Rpb25Db25maWcgY29tcG9uZW50c1xuICAgICAqL1xuICAgIGNvbmZpZyA9IHRzbGliLl9fYXNzaWduKHRzbGliLl9fYXNzaWduKHt9LCBSZWFjdC51c2VDb250ZXh0KE1vdGlvbkNvbmZpZ0NvbnRleHQpKSwgY29uZmlnKTtcbiAgICAvKipcbiAgICAgKiBEb24ndCBhbGxvdyBpc1N0YXRpYyB0byBjaGFuZ2UgYmV0d2VlbiByZW5kZXJzIGFzIGl0IGFmZmVjdHMgaG93IG1hbnkgaG9va3NcbiAgICAgKiBtb3Rpb24gY29tcG9uZW50cyBmaXJlLlxuICAgICAqL1xuICAgIGNvbmZpZy5pc1N0YXRpYyA9IHVzZUNvbnN0YW50KGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNvbmZpZy5pc1N0YXRpYzsgfSk7XG4gICAgLyoqXG4gICAgICogQ3JlYXRpbmcgYSBuZXcgY29uZmlnIGNvbnRleHQgb2JqZWN0IHdpbGwgcmUtcmVuZGVyIGV2ZXJ5IGBtb3Rpb25gIGNvbXBvbmVudFxuICAgICAqIGV2ZXJ5IHRpbWUgaXQgcmVuZGVycy4gU28gd2Ugb25seSB3YW50IHRvIGNyZWF0ZSBhIG5ldyBvbmUgc3BhcmluZ2x5LlxuICAgICAqL1xuICAgIHZhciB0cmFuc2l0aW9uRGVwZW5kZW5jeSA9IHR5cGVvZiBjb25maWcudHJhbnNpdGlvbiA9PT0gXCJvYmplY3RcIlxuICAgICAgICA/IGNvbmZpZy50cmFuc2l0aW9uLnRvU3RyaW5nKClcbiAgICAgICAgOiBcIlwiO1xuICAgIHZhciBjb250ZXh0ID0gUmVhY3QudXNlTWVtbyhmdW5jdGlvbiAoKSB7IHJldHVybiBjb25maWc7IH0sIFtcbiAgICAgICAgdHJhbnNpdGlvbkRlcGVuZGVuY3ksXG4gICAgICAgIGNvbmZpZy50cmFuc2Zvcm1QYWdlUG9pbnQsXG4gICAgXSk7XG4gICAgcmV0dXJuIChSZWFjdF9fbmFtZXNwYWNlLmNyZWF0ZUVsZW1lbnQoTW90aW9uQ29uZmlnQ29udGV4dC5Qcm92aWRlciwgeyB2YWx1ZTogY29udGV4dCB9LCBjaGlsZHJlbikpO1xufVxuXG4vKipcbiAqIFVzZWQgaW4gY29uanVuY3Rpb24gd2l0aCB0aGUgYG1gIGNvbXBvbmVudCB0byByZWR1Y2UgYnVuZGxlIHNpemUuXG4gKlxuICogYG1gIGlzIGEgdmVyc2lvbiBvZiB0aGUgYG1vdGlvbmAgY29tcG9uZW50IHRoYXQgb25seSBsb2FkcyBmdW5jdGlvbmFsaXR5XG4gKiBjcml0aWNhbCBmb3IgdGhlIGluaXRpYWwgcmVuZGVyLlxuICpcbiAqIGBMYXp5TW90aW9uYCBjYW4gdGhlbiBiZSB1c2VkIHRvIGVpdGhlciBzeW5jaHJvbm91c2x5IG9yIGFzeW5jaHJvbm91c2x5XG4gKiBsb2FkIGFuaW1hdGlvbiBhbmQgZ2VzdHVyZSBzdXBwb3J0LlxuICpcbiAqIGBgYGpzeFxuICogLy8gU3luY2hyb25vdXMgbG9hZGluZ1xuICogaW1wb3J0IHsgTGF6eU1vdGlvbiwgbSwgZG9tQW5pbWF0aW9ucyB9IGZyb20gXCJmcmFtZXItbW90aW9uXCJcbiAqXG4gKiBmdW5jdGlvbiBBcHAoKSB7XG4gKiAgIHJldHVybiAoXG4gKiAgICAgPExhenlNb3Rpb24gZmVhdHVyZXM9e2RvbUFuaW1hdGlvbnN9PlxuICogICAgICAgPG0uZGl2IGFuaW1hdGU9e3sgc2NhbGU6IDIgfX0gLz5cbiAqICAgICA8L0xhenlNb3Rpb24+XG4gKiAgIClcbiAqIH1cbiAqXG4gKiAvLyBBc3luY2hyb25vdXMgbG9hZGluZ1xuICogaW1wb3J0IHsgTGF6eU1vdGlvbiwgbSB9IGZyb20gXCJmcmFtZXItbW90aW9uXCJcbiAqXG4gKiBmdW5jdGlvbiBBcHAoKSB7XG4gKiAgIHJldHVybiAoXG4gKiAgICAgPExhenlNb3Rpb24gZmVhdHVyZXM9eygpID0+IGltcG9ydCgnLi9wYXRoL3RvL2RvbUFuaW1hdGlvbnMnKX0+XG4gKiAgICAgICA8bS5kaXYgYW5pbWF0ZT17eyBzY2FsZTogMiB9fSAvPlxuICogICAgIDwvTGF6eU1vdGlvbj5cbiAqICAgKVxuICogfVxuICogYGBgXG4gKlxuICogQHB1YmxpY1xuICovXG5mdW5jdGlvbiBMYXp5TW90aW9uKF9hKSB7XG4gICAgdmFyIGNoaWxkcmVuID0gX2EuY2hpbGRyZW4sIGZlYXR1cmVzID0gX2EuZmVhdHVyZXMsIF9iID0gX2Euc3RyaWN0LCBzdHJpY3QgPSBfYiA9PT0gdm9pZCAwID8gZmFsc2UgOiBfYjtcbiAgICB2YXIgX2MgPSB0c2xpYi5fX3JlYWQoUmVhY3QudXNlU3RhdGUoIWlzTGF6eUJ1bmRsZShmZWF0dXJlcykpLCAyKSwgc2V0SXNMb2FkZWQgPSBfY1sxXTtcbiAgICB2YXIgbG9hZGVkUmVuZGVyZXIgPSBSZWFjdC51c2VSZWYodW5kZWZpbmVkKTtcbiAgICAvKipcbiAgICAgKiBJZiB0aGlzIGlzIGEgc3luY2hyb25vdXMgbG9hZCwgbG9hZCBmZWF0dXJlcyBpbW1lZGlhdGVseVxuICAgICAqL1xuICAgIGlmICghaXNMYXp5QnVuZGxlKGZlYXR1cmVzKSkge1xuICAgICAgICB2YXIgcmVuZGVyZXIgPSBmZWF0dXJlcy5yZW5kZXJlciwgbG9hZGVkRmVhdHVyZXMgPSB0c2xpYi5fX3Jlc3QoZmVhdHVyZXMsIFtcInJlbmRlcmVyXCJdKTtcbiAgICAgICAgbG9hZGVkUmVuZGVyZXIuY3VycmVudCA9IHJlbmRlcmVyO1xuICAgICAgICBsb2FkRmVhdHVyZXMobG9hZGVkRmVhdHVyZXMpO1xuICAgIH1cbiAgICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoaXNMYXp5QnVuZGxlKGZlYXR1cmVzKSkge1xuICAgICAgICAgICAgZmVhdHVyZXMoKS50aGVuKGZ1bmN0aW9uIChfYSkge1xuICAgICAgICAgICAgICAgIHZhciByZW5kZXJlciA9IF9hLnJlbmRlcmVyLCBsb2FkZWRGZWF0dXJlcyA9IHRzbGliLl9fcmVzdChfYSwgW1wicmVuZGVyZXJcIl0pO1xuICAgICAgICAgICAgICAgIGxvYWRGZWF0dXJlcyhsb2FkZWRGZWF0dXJlcyk7XG4gICAgICAgICAgICAgICAgbG9hZGVkUmVuZGVyZXIuY3VycmVudCA9IHJlbmRlcmVyO1xuICAgICAgICAgICAgICAgIHNldElzTG9hZGVkKHRydWUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9LCBbXSk7XG4gICAgcmV0dXJuIChSZWFjdF9fbmFtZXNwYWNlLmNyZWF0ZUVsZW1lbnQoTGF6eUNvbnRleHQuUHJvdmlkZXIsIHsgdmFsdWU6IHsgcmVuZGVyZXI6IGxvYWRlZFJlbmRlcmVyLmN1cnJlbnQsIHN0cmljdDogc3RyaWN0IH0gfSwgY2hpbGRyZW4pKTtcbn1cbmZ1bmN0aW9uIGlzTGF6eUJ1bmRsZShmZWF0dXJlcykge1xuICAgIHJldHVybiB0eXBlb2YgZmVhdHVyZXMgPT09IFwiZnVuY3Rpb25cIjtcbn1cblxuLyoqXG4gKiBAcHVibGljXG4gKi9cbnZhciBkb21BbmltYXRpb24gPSB0c2xpYi5fX2Fzc2lnbih0c2xpYi5fX2Fzc2lnbih7IHJlbmRlcmVyOiBjcmVhdGVEb21WaXN1YWxFbGVtZW50IH0sIGFuaW1hdGlvbnMpLCBnZXN0dXJlQW5pbWF0aW9ucyk7XG5cbi8qKlxuICogQHB1YmxpY1xuICovXG52YXIgZG9tTWF4ID0gdHNsaWIuX19hc3NpZ24odHNsaWIuX19hc3NpZ24odHNsaWIuX19hc3NpZ24oe30sIGRvbUFuaW1hdGlvbiksIGRyYWcpLCBsYXlvdXRBbmltYXRpb25zKTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgYE1vdGlvblZhbHVlYCB0byB0cmFjayB0aGUgc3RhdGUgYW5kIHZlbG9jaXR5IG9mIGEgdmFsdWUuXG4gKlxuICogVXN1YWxseSwgdGhlc2UgYXJlIGNyZWF0ZWQgYXV0b21hdGljYWxseS4gRm9yIGFkdmFuY2VkIHVzZS1jYXNlcywgbGlrZSB1c2Ugd2l0aCBgdXNlVHJhbnNmb3JtYCwgeW91IGNhbiBjcmVhdGUgYE1vdGlvblZhbHVlYHMgZXh0ZXJuYWxseSBhbmQgcGFzcyB0aGVtIGludG8gdGhlIGFuaW1hdGVkIGNvbXBvbmVudCB2aWEgdGhlIGBzdHlsZWAgcHJvcC5cbiAqXG4gKiBAbGlicmFyeVxuICpcbiAqIGBgYGpzeFxuICogZXhwb3J0IGZ1bmN0aW9uIE15Q29tcG9uZW50KCkge1xuICogICBjb25zdCBzY2FsZSA9IHVzZU1vdGlvblZhbHVlKDEpXG4gKlxuICogICByZXR1cm4gPEZyYW1lIHNjYWxlPXtzY2FsZX0gLz5cbiAqIH1cbiAqIGBgYFxuICpcbiAqIEBtb3Rpb25cbiAqXG4gKiBgYGBqc3hcbiAqIGV4cG9ydCBjb25zdCBNeUNvbXBvbmVudCA9ICgpID0+IHtcbiAqICAgY29uc3Qgc2NhbGUgPSB1c2VNb3Rpb25WYWx1ZSgxKVxuICpcbiAqICAgcmV0dXJuIDxtb3Rpb24uZGl2IHN0eWxlPXt7IHNjYWxlIH19IC8+XG4gKiB9XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0gaW5pdGlhbCAtIFRoZSBpbml0aWFsIHN0YXRlLlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZnVuY3Rpb24gdXNlTW90aW9uVmFsdWUoaW5pdGlhbCkge1xuICAgIHZhciB2YWx1ZSA9IHVzZUNvbnN0YW50KGZ1bmN0aW9uICgpIHsgcmV0dXJuIG1vdGlvblZhbHVlKGluaXRpYWwpOyB9KTtcbiAgICAvKipcbiAgICAgKiBJZiB0aGlzIG1vdGlvbiB2YWx1ZSBpcyBiZWluZyB1c2VkIGluIHN0YXRpYyBtb2RlLCBsaWtlIG9uXG4gICAgICogdGhlIEZyYW1lciBjYW52YXMsIGZvcmNlIGNvbXBvbmVudHMgdG8gcmVyZW5kZXIgd2hlbiB0aGUgbW90aW9uXG4gICAgICogdmFsdWUgaXMgdXBkYXRlZC5cbiAgICAgKi9cbiAgICB2YXIgaXNTdGF0aWMgPSBSZWFjdC51c2VDb250ZXh0KE1vdGlvbkNvbmZpZ0NvbnRleHQpLmlzU3RhdGljO1xuICAgIGlmIChpc1N0YXRpYykge1xuICAgICAgICB2YXIgX2EgPSB0c2xpYi5fX3JlYWQoUmVhY3QudXNlU3RhdGUoaW5pdGlhbCksIDIpLCBzZXRMYXRlc3RfMSA9IF9hWzFdO1xuICAgICAgICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkgeyByZXR1cm4gdmFsdWUub25DaGFuZ2Uoc2V0TGF0ZXN0XzEpOyB9LCBbXSk7XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZTtcbn1cblxuZnVuY3Rpb24gdXNlT25DaGFuZ2UodmFsdWUsIGNhbGxiYWNrKSB7XG4gICAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKGlzTW90aW9uVmFsdWUodmFsdWUpKVxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlLm9uQ2hhbmdlKGNhbGxiYWNrKTtcbiAgICB9LCBbY2FsbGJhY2tdKTtcbn1cbmZ1bmN0aW9uIHVzZU11bHRpT25DaGFuZ2UodmFsdWVzLCBoYW5kbGVyKSB7XG4gICAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHN1YnNjcmlwdGlvbnMgPSB2YWx1ZXMubWFwKGZ1bmN0aW9uICh2YWx1ZSkgeyByZXR1cm4gdmFsdWUub25DaGFuZ2UoaGFuZGxlcik7IH0pO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkgeyByZXR1cm4gc3Vic2NyaXB0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uICh1bnN1YnNjcmliZSkgeyByZXR1cm4gdW5zdWJzY3JpYmUoKTsgfSk7IH07XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIHVzZUNvbWJpbmVNb3Rpb25WYWx1ZXModmFsdWVzLCBjb21iaW5lVmFsdWVzKSB7XG4gICAgLyoqXG4gICAgICogSW5pdGlhbGlzZSB0aGUgcmV0dXJuZWQgbW90aW9uIHZhbHVlLiBUaGlzIHJlbWFpbnMgdGhlIHNhbWUgYmV0d2VlbiByZW5kZXJzLlxuICAgICAqL1xuICAgIHZhciB2YWx1ZSA9IHVzZU1vdGlvblZhbHVlKGNvbWJpbmVWYWx1ZXMoKSk7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgZnVuY3Rpb24gdGhhdCB3aWxsIHVwZGF0ZSB0aGUgdGVtcGxhdGUgbW90aW9uIHZhbHVlIHdpdGggdGhlIGxhdGVzdCB2YWx1ZXMuXG4gICAgICogVGhpcyBpcyBwcmUtYm91bmQgc28gd2hlbmV2ZXIgYSBtb3Rpb24gdmFsdWUgdXBkYXRlcyBpdCBjYW4gc2NoZWR1bGUgaXRzXG4gICAgICogZXhlY3V0aW9uIGluIEZyYW1lc3luYy4gSWYgaXQncyBhbHJlYWR5IGJlZW4gc2NoZWR1bGVkIGl0IHdvbid0IGJlIGZpcmVkIHR3aWNlXG4gICAgICogaW4gYSBzaW5nbGUgZnJhbWUuXG4gICAgICovXG4gICAgdmFyIHVwZGF0ZVZhbHVlID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdmFsdWUuc2V0KGNvbWJpbmVWYWx1ZXMoKSk7IH07XG4gICAgLyoqXG4gICAgICogU3luY2hyb25vdXNseSB1cGRhdGUgdGhlIG1vdGlvbiB2YWx1ZSB3aXRoIHRoZSBsYXRlc3QgdmFsdWVzIGR1cmluZyB0aGUgcmVuZGVyLlxuICAgICAqIFRoaXMgZW5zdXJlcyB0aGF0IHdpdGhpbiBhIFJlYWN0IHJlbmRlciwgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBET00gYXJlIHVwLXRvLWRhdGUuXG4gICAgICovXG4gICAgdXBkYXRlVmFsdWUoKTtcbiAgICAvKipcbiAgICAgKiBTdWJzY3JpYmUgdG8gYWxsIG1vdGlvbiB2YWx1ZXMgZm91bmQgd2l0aGluIHRoZSB0ZW1wbGF0ZS4gV2hlbmV2ZXIgYW55IG9mIHRoZW0gY2hhbmdlLFxuICAgICAqIHNjaGVkdWxlIGFuIHVwZGF0ZS5cbiAgICAgKi9cbiAgICB1c2VNdWx0aU9uQ2hhbmdlKHZhbHVlcywgZnVuY3Rpb24gKCkgeyByZXR1cm4gc3luY19fZGVmYXVsdFsnZGVmYXVsdCddLnVwZGF0ZSh1cGRhdGVWYWx1ZSwgZmFsc2UsIHRydWUpOyB9KTtcbiAgICByZXR1cm4gdmFsdWU7XG59XG5cbi8qKlxuICogQ29tYmluZSBtdWx0aXBsZSBtb3Rpb24gdmFsdWVzIGludG8gYSBuZXcgb25lIHVzaW5nIGEgc3RyaW5nIHRlbXBsYXRlIGxpdGVyYWwuXG4gKlxuICogYGBganN4XG4gKiBpbXBvcnQge1xuICogICBtb3Rpb24sXG4gKiAgIHVzZVNwcmluZyxcbiAqICAgdXNlTW90aW9uVmFsdWUsXG4gKiAgIHVzZU1vdGlvblRlbXBsYXRlXG4gKiB9IGZyb20gXCJmcmFtZXItbW90aW9uXCJcbiAqXG4gKiBmdW5jdGlvbiBDb21wb25lbnQoKSB7XG4gKiAgIGNvbnN0IHNoYWRvd1ggPSB1c2VTcHJpbmcoMClcbiAqICAgY29uc3Qgc2hhZG93WSA9IHVzZU1vdGlvblZhbHVlKDApXG4gKiAgIGNvbnN0IHNoYWRvdyA9IHVzZU1vdGlvblRlbXBsYXRlYGRyb3Atc2hhZG93KCR7c2hhZG93WH1weCAke3NoYWRvd1l9cHggMjBweCByZ2JhKDAsMCwwLDAuMykpYFxuICpcbiAqICAgcmV0dXJuIDxtb3Rpb24uZGl2IHN0eWxlPXt7IGZpbHRlcjogc2hhZG93IH19IC8+XG4gKiB9XG4gKiBgYGBcbiAqXG4gKiBAcHVibGljXG4gKi9cbmZ1bmN0aW9uIHVzZU1vdGlvblRlbXBsYXRlKGZyYWdtZW50cykge1xuICAgIHZhciB2YWx1ZXMgPSBbXTtcbiAgICBmb3IgKHZhciBfaSA9IDE7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICB2YWx1ZXNbX2kgLSAxXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIGZ1bmN0aW9uIHRoYXQgd2lsbCBidWlsZCBhIHN0cmluZyBmcm9tIHRoZSBsYXRlc3QgbW90aW9uIHZhbHVlcy5cbiAgICAgKi9cbiAgICB2YXIgbnVtRnJhZ21lbnRzID0gZnJhZ21lbnRzLmxlbmd0aDtcbiAgICBmdW5jdGlvbiBidWlsZFZhbHVlKCkge1xuICAgICAgICB2YXIgb3V0cHV0ID0gXCJcIjtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBudW1GcmFnbWVudHM7IGkrKykge1xuICAgICAgICAgICAgb3V0cHV0ICs9IGZyYWdtZW50c1tpXTtcbiAgICAgICAgICAgIHZhciB2YWx1ZSA9IHZhbHVlc1tpXTtcbiAgICAgICAgICAgIGlmICh2YWx1ZSlcbiAgICAgICAgICAgICAgICBvdXRwdXQgKz0gdmFsdWVzW2ldLmdldCgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvdXRwdXQ7XG4gICAgfVxuICAgIHJldHVybiB1c2VDb21iaW5lTW90aW9uVmFsdWVzKHZhbHVlcywgYnVpbGRWYWx1ZSk7XG59XG5cbnZhciBpc0N1c3RvbVZhbHVlVHlwZSA9IGZ1bmN0aW9uICh2KSB7XG4gICAgcmV0dXJuIHR5cGVvZiB2ID09PSBcIm9iamVjdFwiICYmIHYubWl4O1xufTtcbnZhciBnZXRNaXhlciA9IGZ1bmN0aW9uICh2KSB7IHJldHVybiAoaXNDdXN0b21WYWx1ZVR5cGUodikgPyB2Lm1peCA6IHVuZGVmaW5lZCk7IH07XG5mdW5jdGlvbiB0cmFuc2Zvcm0oKSB7XG4gICAgdmFyIGFyZ3MgPSBbXTtcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgfVxuICAgIHZhciB1c2VJbW1lZGlhdGUgPSAhQXJyYXkuaXNBcnJheShhcmdzWzBdKTtcbiAgICB2YXIgYXJnT2Zmc2V0ID0gdXNlSW1tZWRpYXRlID8gMCA6IC0xO1xuICAgIHZhciBpbnB1dFZhbHVlID0gYXJnc1swICsgYXJnT2Zmc2V0XTtcbiAgICB2YXIgaW5wdXRSYW5nZSA9IGFyZ3NbMSArIGFyZ09mZnNldF07XG4gICAgdmFyIG91dHB1dFJhbmdlID0gYXJnc1syICsgYXJnT2Zmc2V0XTtcbiAgICB2YXIgb3B0aW9ucyA9IGFyZ3NbMyArIGFyZ09mZnNldF07XG4gICAgdmFyIGludGVycG9sYXRvciA9IHBvcG1vdGlvbi5pbnRlcnBvbGF0ZShpbnB1dFJhbmdlLCBvdXRwdXRSYW5nZSwgdHNsaWIuX19hc3NpZ24oeyBtaXhlcjogZ2V0TWl4ZXIob3V0cHV0UmFuZ2VbMF0pIH0sIG9wdGlvbnMpKTtcbiAgICByZXR1cm4gdXNlSW1tZWRpYXRlID8gaW50ZXJwb2xhdG9yKGlucHV0VmFsdWUpIDogaW50ZXJwb2xhdG9yO1xufVxuXG5mdW5jdGlvbiB1c2VUcmFuc2Zvcm0oaW5wdXQsIGlucHV0UmFuZ2VPclRyYW5zZm9ybWVyLCBvdXRwdXRSYW5nZSwgb3B0aW9ucykge1xuICAgIHZhciB0cmFuc2Zvcm1lciA9IHR5cGVvZiBpbnB1dFJhbmdlT3JUcmFuc2Zvcm1lciA9PT0gXCJmdW5jdGlvblwiXG4gICAgICAgID8gaW5wdXRSYW5nZU9yVHJhbnNmb3JtZXJcbiAgICAgICAgOiB0cmFuc2Zvcm0oaW5wdXRSYW5nZU9yVHJhbnNmb3JtZXIsIG91dHB1dFJhbmdlLCBvcHRpb25zKTtcbiAgICByZXR1cm4gQXJyYXkuaXNBcnJheShpbnB1dClcbiAgICAgICAgPyB1c2VMaXN0VHJhbnNmb3JtKGlucHV0LCB0cmFuc2Zvcm1lcilcbiAgICAgICAgOiB1c2VMaXN0VHJhbnNmb3JtKFtpbnB1dF0sIGZ1bmN0aW9uIChfYSkge1xuICAgICAgICAgICAgdmFyIF9iID0gdHNsaWIuX19yZWFkKF9hLCAxKSwgbGF0ZXN0ID0gX2JbMF07XG4gICAgICAgICAgICByZXR1cm4gdHJhbnNmb3JtZXIobGF0ZXN0KTtcbiAgICAgICAgfSk7XG59XG5mdW5jdGlvbiB1c2VMaXN0VHJhbnNmb3JtKHZhbHVlcywgdHJhbnNmb3JtZXIpIHtcbiAgICB2YXIgbGF0ZXN0ID0gdXNlQ29uc3RhbnQoZnVuY3Rpb24gKCkgeyByZXR1cm4gW107IH0pO1xuICAgIHJldHVybiB1c2VDb21iaW5lTW90aW9uVmFsdWVzKHZhbHVlcywgZnVuY3Rpb24gKCkge1xuICAgICAgICBsYXRlc3QubGVuZ3RoID0gMDtcbiAgICAgICAgdmFyIG51bVZhbHVlcyA9IHZhbHVlcy5sZW5ndGg7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbnVtVmFsdWVzOyBpKyspIHtcbiAgICAgICAgICAgIGxhdGVzdFtpXSA9IHZhbHVlc1tpXS5nZXQoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJhbnNmb3JtZXIobGF0ZXN0KTtcbiAgICB9KTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgYE1vdGlvblZhbHVlYCB0aGF0LCB3aGVuIGBzZXRgLCB3aWxsIHVzZSBhIHNwcmluZyBhbmltYXRpb24gdG8gYW5pbWF0ZSB0byBpdHMgbmV3IHN0YXRlLlxuICpcbiAqIEl0IGNhbiBlaXRoZXIgd29yayBhcyBhIHN0YW5kLWFsb25lIGBNb3Rpb25WYWx1ZWAgYnkgaW5pdGlhbGlzaW5nIGl0IHdpdGggYSB2YWx1ZSwgb3IgYXMgYSBzdWJzY3JpYmVyXG4gKiB0byBhbm90aGVyIGBNb3Rpb25WYWx1ZWAuXG4gKlxuICogQHJlbWFya3NcbiAqXG4gKiBgYGBqc3hcbiAqIGNvbnN0IHggPSB1c2VTcHJpbmcoMCwgeyBzdGlmZm5lc3M6IDMwMCB9KVxuICogY29uc3QgeSA9IHVzZVNwcmluZyh4LCB7IGRhbXBpbmc6IDEwIH0pXG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0gaW5wdXRWYWx1ZSAtIGBNb3Rpb25WYWx1ZWAgb3IgbnVtYmVyLiBJZiBwcm92aWRlZCBhIGBNb3Rpb25WYWx1ZWAsIHdoZW4gdGhlIGlucHV0IGBNb3Rpb25WYWx1ZWAgY2hhbmdlcywgdGhlIGNyZWF0ZWQgYE1vdGlvblZhbHVlYCB3aWxsIHNwcmluZyB0b3dhcmRzIHRoYXQgdmFsdWUuXG4gKiBAcGFyYW0gc3ByaW5nQ29uZmlnIC0gQ29uZmlndXJhdGlvbiBvcHRpb25zIGZvciB0aGUgc3ByaW5nLlxuICogQHJldHVybnMgYE1vdGlvblZhbHVlYFxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZnVuY3Rpb24gdXNlU3ByaW5nKHNvdXJjZSwgY29uZmlnKSB7XG4gICAgaWYgKGNvbmZpZyA9PT0gdm9pZCAwKSB7IGNvbmZpZyA9IHt9OyB9XG4gICAgdmFyIGlzU3RhdGljID0gUmVhY3QudXNlQ29udGV4dChNb3Rpb25Db25maWdDb250ZXh0KS5pc1N0YXRpYztcbiAgICB2YXIgYWN0aXZlU3ByaW5nQW5pbWF0aW9uID0gUmVhY3QudXNlUmVmKG51bGwpO1xuICAgIHZhciB2YWx1ZSA9IHVzZU1vdGlvblZhbHVlKGlzTW90aW9uVmFsdWUoc291cmNlKSA/IHNvdXJjZS5nZXQoKSA6IHNvdXJjZSk7XG4gICAgUmVhY3QudXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZS5hdHRhY2goZnVuY3Rpb24gKHYsIHNldCkge1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBBIG1vcmUgaG9sbGlzdGljIGFwcHJvYWNoIHRvIHRoaXMgbWlnaHQgYmUgdG8gdXNlIGlzU3RhdGljIHRvIGZpeCBWaXN1YWxFbGVtZW50IGFuaW1hdGlvbnNcbiAgICAgICAgICAgICAqIGF0IHRoYXQgbGV2ZWwsIGJ1dCB0aGlzIHdpbGwgd29yayBmb3Igbm93XG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGlmIChpc1N0YXRpYylcbiAgICAgICAgICAgICAgICByZXR1cm4gc2V0KHYpO1xuICAgICAgICAgICAgaWYgKGFjdGl2ZVNwcmluZ0FuaW1hdGlvbi5jdXJyZW50KSB7XG4gICAgICAgICAgICAgICAgYWN0aXZlU3ByaW5nQW5pbWF0aW9uLmN1cnJlbnQuc3RvcCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYWN0aXZlU3ByaW5nQW5pbWF0aW9uLmN1cnJlbnQgPSBwb3Btb3Rpb24uYW5pbWF0ZSh0c2xpYi5fX2Fzc2lnbih0c2xpYi5fX2Fzc2lnbih7IGZyb206IHZhbHVlLmdldCgpLCB0bzogdiwgdmVsb2NpdHk6IHZhbHVlLmdldFZlbG9jaXR5KCkgfSwgY29uZmlnKSwgeyBvblVwZGF0ZTogc2V0IH0pKTtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZS5nZXQoKTtcbiAgICAgICAgfSk7XG4gICAgfSwgT2JqZWN0LnZhbHVlcyhjb25maWcpKTtcbiAgICB1c2VPbkNoYW5nZShzb3VyY2UsIGZ1bmN0aW9uICh2KSB7IHJldHVybiB2YWx1ZS5zZXQocGFyc2VGbG9hdCh2KSk7IH0pO1xuICAgIHJldHVybiB2YWx1ZTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgYE1vdGlvblZhbHVlYCB0aGF0IHVwZGF0ZXMgd2hlbiB0aGUgdmVsb2NpdHkgb2YgdGhlIHByb3ZpZGVkIGBNb3Rpb25WYWx1ZWAgY2hhbmdlcy5cbiAqXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiBjb25zdCB4ID0gdXNlTW90aW9uVmFsdWUoMClcbiAqIGNvbnN0IHhWZWxvY2l0eSA9IHVzZVZlbG9jaXR5KHgpXG4gKiBjb25zdCB4QWNjZWxlcmF0aW9uID0gdXNlVmVsb2NpdHkoeFZlbG9jaXR5KVxuICogYGBgXG4gKlxuICogQHB1YmxpY1xuICovXG5mdW5jdGlvbiB1c2VWZWxvY2l0eSh2YWx1ZSkge1xuICAgIHZhciB2ZWxvY2l0eSA9IHVzZU1vdGlvblZhbHVlKHZhbHVlLmdldFZlbG9jaXR5KCkpO1xuICAgIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZS52ZWxvY2l0eVVwZGF0ZVN1YnNjcmliZXJzLmFkZChmdW5jdGlvbiAobmV3VmVsb2NpdHkpIHtcbiAgICAgICAgICAgIHZlbG9jaXR5LnNldChuZXdWZWxvY2l0eSk7XG4gICAgICAgIH0pO1xuICAgIH0sIFt2YWx1ZV0pO1xuICAgIHJldHVybiB2ZWxvY2l0eTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlU2Nyb2xsTW90aW9uVmFsdWVzKCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHNjcm9sbFg6IG1vdGlvblZhbHVlKDApLFxuICAgICAgICBzY3JvbGxZOiBtb3Rpb25WYWx1ZSgwKSxcbiAgICAgICAgc2Nyb2xsWFByb2dyZXNzOiBtb3Rpb25WYWx1ZSgwKSxcbiAgICAgICAgc2Nyb2xsWVByb2dyZXNzOiBtb3Rpb25WYWx1ZSgwKSxcbiAgICB9O1xufVxuZnVuY3Rpb24gc2V0UHJvZ3Jlc3Mob2Zmc2V0LCBtYXhPZmZzZXQsIHZhbHVlKSB7XG4gICAgdmFsdWUuc2V0KCFvZmZzZXQgfHwgIW1heE9mZnNldCA/IDAgOiBvZmZzZXQgLyBtYXhPZmZzZXQpO1xufVxuZnVuY3Rpb24gY3JlYXRlU2Nyb2xsVXBkYXRlcih2YWx1ZXMsIGdldE9mZnNldHMpIHtcbiAgICB2YXIgdXBkYXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX2EgPSBnZXRPZmZzZXRzKCksIHhPZmZzZXQgPSBfYS54T2Zmc2V0LCB5T2Zmc2V0ID0gX2EueU9mZnNldCwgeE1heE9mZnNldCA9IF9hLnhNYXhPZmZzZXQsIHlNYXhPZmZzZXQgPSBfYS55TWF4T2Zmc2V0O1xuICAgICAgICAvLyBTZXQgYWJzb2x1dGUgcG9zaXRpb25zXG4gICAgICAgIHZhbHVlcy5zY3JvbGxYLnNldCh4T2Zmc2V0KTtcbiAgICAgICAgdmFsdWVzLnNjcm9sbFkuc2V0KHlPZmZzZXQpO1xuICAgICAgICAvLyBTZXQgMC0xIHByb2dyZXNzXG4gICAgICAgIHNldFByb2dyZXNzKHhPZmZzZXQsIHhNYXhPZmZzZXQsIHZhbHVlcy5zY3JvbGxYUHJvZ3Jlc3MpO1xuICAgICAgICBzZXRQcm9ncmVzcyh5T2Zmc2V0LCB5TWF4T2Zmc2V0LCB2YWx1ZXMuc2Nyb2xsWVByb2dyZXNzKTtcbiAgICB9O1xuICAgIHVwZGF0ZSgpO1xuICAgIHJldHVybiB1cGRhdGU7XG59XG5cbnZhciBnZXRFbGVtZW50U2Nyb2xsT2Zmc2V0cyA9IGZ1bmN0aW9uIChlbGVtZW50KSB7IHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgeE9mZnNldDogZWxlbWVudC5zY3JvbGxMZWZ0LFxuICAgICAgICB5T2Zmc2V0OiBlbGVtZW50LnNjcm9sbFRvcCxcbiAgICAgICAgeE1heE9mZnNldDogZWxlbWVudC5zY3JvbGxXaWR0aCAtIGVsZW1lbnQub2Zmc2V0V2lkdGgsXG4gICAgICAgIHlNYXhPZmZzZXQ6IGVsZW1lbnQuc2Nyb2xsSGVpZ2h0IC0gZWxlbWVudC5vZmZzZXRIZWlnaHQsXG4gICAgfTtcbn07IH07XG4vKipcbiAqIFJldHVybnMgTW90aW9uVmFsdWVzIHRoYXQgdXBkYXRlIHdoZW4gdGhlIHByb3ZpZGVkIGVsZW1lbnQgc2Nyb2xsczpcbiAqXG4gKiAtIGBzY3JvbGxYYCDigJQgSG9yaXpvbnRhbCBzY3JvbGwgZGlzdGFuY2UgaW4gcGl4ZWxzLlxuICogLSBgc2Nyb2xsWWAg4oCUIFZlcnRpY2FsIHNjcm9sbCBkaXN0YW5jZSBpbiBwaXhlbHMuXG4gKiAtIGBzY3JvbGxYUHJvZ3Jlc3NgIOKAlCBIb3Jpem9udGFsIHNjcm9sbCBwcm9ncmVzcyBiZXR3ZWVuIGAwYCBhbmQgYDFgLlxuICogLSBgc2Nyb2xsWVByb2dyZXNzYCDigJQgVmVydGljYWwgc2Nyb2xsIHByb2dyZXNzIGJldHdlZW4gYDBgIGFuZCBgMWAuXG4gKlxuICogVGhpcyBlbGVtZW50IG11c3QgYmUgc2V0IHRvIGBvdmVyZmxvdzogc2Nyb2xsYCBvbiBlaXRoZXIgb3IgYm90aCBheGVzIHRvIHJlcG9ydCBzY3JvbGwgb2Zmc2V0LlxuICpcbiAqIEBsaWJyYXJ5XG4gKlxuICogYGBganN4XG4gKiBpbXBvcnQgKiBhcyBSZWFjdCBmcm9tIFwicmVhY3RcIlxuICogaW1wb3J0IHtcbiAqICAgRnJhbWUsXG4gKiAgIHVzZUVsZW1lbnRTY3JvbGwsXG4gKiAgIHVzZVRyYW5zZm9ybVxuICogfSBmcm9tIFwiZnJhbWVyXCJcbiAqXG4gKiBleHBvcnQgZnVuY3Rpb24gTXlDb21wb25lbnQoKSB7XG4gKiAgIGNvbnN0IHJlZiA9IFJlYWN0LnVzZVJlZigpXG4gKiAgIGNvbnN0IHsgc2Nyb2xsWVByb2dyZXNzIH0gPSB1c2VFbGVtZW50U2Nyb2xsKHJlZilcbiAqXG4gKiAgIHJldHVybiAoXG4gKiAgICAgPEZyYW1lIHJlZj17cmVmfT5cbiAqICAgICAgIDxGcmFtZSBzY2FsZVg9e3Njcm9sbFlQcm9ncmVzc30gLz5cbiAqICAgICA8L0ZyYW1lPlxuICogICApXG4gKiB9XG4gKiBgYGBcbiAqXG4gKiBAbW90aW9uXG4gKlxuICogYGBganN4XG4gKiBleHBvcnQgY29uc3QgTXlDb21wb25lbnQgPSAoKSA9PiB7XG4gKiAgIGNvbnN0IHJlZiA9IHVzZVJlZigpXG4gKiAgIGNvbnN0IHsgc2Nyb2xsWVByb2dyZXNzIH0gPSB1c2VFbGVtZW50U2Nyb2xsKHJlZilcbiAqXG4gKiAgIHJldHVybiAoXG4gKiAgICAgPGRpdiByZWY9e3JlZn0+XG4gKiAgICAgICA8bW90aW9uLmRpdiBzdHlsZT17eyBzY2FsZVg6IHNjcm9sbFlQcm9ncmVzcyB9fSAvPlxuICogICAgIDwvZGl2PlxuICogICApXG4gKiB9XG4gKiBgYGBcbiAqXG4gKiBAcHVibGljXG4gKi9cbmZ1bmN0aW9uIHVzZUVsZW1lbnRTY3JvbGwocmVmKSB7XG4gICAgdmFyIHZhbHVlcyA9IHVzZUNvbnN0YW50KGNyZWF0ZVNjcm9sbE1vdGlvblZhbHVlcyk7XG4gICAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBlbGVtZW50ID0gcmVmLmN1cnJlbnQ7XG4gICAgICAgIGhleUxpc3Rlbi5pbnZhcmlhbnQoISFlbGVtZW50LCBcInJlZiBwcm92aWRlZCB0byB1c2VTY3JvbGwgbXVzdCBiZSBwYXNzZWQgaW50byBhIEhUTUwgZWxlbWVudC5cIik7XG4gICAgICAgIGlmICghZWxlbWVudClcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdmFyIHVwZGF0ZVNjcm9sbFZhbHVlcyA9IGNyZWF0ZVNjcm9sbFVwZGF0ZXIodmFsdWVzLCBnZXRFbGVtZW50U2Nyb2xsT2Zmc2V0cyhlbGVtZW50KSk7XG4gICAgICAgIHZhciBzY3JvbGxMaXN0ZW5lciA9IGFkZERvbUV2ZW50KGVsZW1lbnQsIFwic2Nyb2xsXCIsIHVwZGF0ZVNjcm9sbFZhbHVlcywgeyBwYXNzaXZlOiB0cnVlIH0pO1xuICAgICAgICB2YXIgcmVzaXplTGlzdGVuZXIgPSBhZGREb21FdmVudChlbGVtZW50LCBcInJlc2l6ZVwiLCB1cGRhdGVTY3JvbGxWYWx1ZXMpO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgc2Nyb2xsTGlzdGVuZXIgJiYgc2Nyb2xsTGlzdGVuZXIoKTtcbiAgICAgICAgICAgIHJlc2l6ZUxpc3RlbmVyICYmIHJlc2l6ZUxpc3RlbmVyKCk7XG4gICAgICAgIH07XG4gICAgfSwgW10pO1xuICAgIHJldHVybiB2YWx1ZXM7XG59XG5cbnZhciB2aWV3cG9ydFNjcm9sbFZhbHVlcztcbmZ1bmN0aW9uIGdldFZpZXdwb3J0U2Nyb2xsT2Zmc2V0cygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICB4T2Zmc2V0OiB3aW5kb3cucGFnZVhPZmZzZXQsXG4gICAgICAgIHlPZmZzZXQ6IHdpbmRvdy5wYWdlWU9mZnNldCxcbiAgICAgICAgeE1heE9mZnNldDogZG9jdW1lbnQuYm9keS5jbGllbnRXaWR0aCAtIHdpbmRvdy5pbm5lcldpZHRoLFxuICAgICAgICB5TWF4T2Zmc2V0OiBkb2N1bWVudC5ib2R5LmNsaWVudEhlaWdodCAtIHdpbmRvdy5pbm5lckhlaWdodCxcbiAgICB9O1xufVxudmFyIGhhc0xpc3RlbmVycyA9IGZhbHNlO1xuZnVuY3Rpb24gYWRkRXZlbnRMaXN0ZW5lcnMoKSB7XG4gICAgaGFzTGlzdGVuZXJzID0gdHJ1ZTtcbiAgICBpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJ1bmRlZmluZWRcIilcbiAgICAgICAgcmV0dXJuO1xuICAgIHZhciB1cGRhdGVTY3JvbGxWYWx1ZXMgPSBjcmVhdGVTY3JvbGxVcGRhdGVyKHZpZXdwb3J0U2Nyb2xsVmFsdWVzLCBnZXRWaWV3cG9ydFNjcm9sbE9mZnNldHMpO1xuICAgIGFkZERvbUV2ZW50KHdpbmRvdywgXCJzY3JvbGxcIiwgdXBkYXRlU2Nyb2xsVmFsdWVzLCB7IHBhc3NpdmU6IHRydWUgfSk7XG4gICAgYWRkRG9tRXZlbnQod2luZG93LCBcInJlc2l6ZVwiLCB1cGRhdGVTY3JvbGxWYWx1ZXMpO1xufVxuLyoqXG4gKiBSZXR1cm5zIE1vdGlvblZhbHVlcyB0aGF0IHVwZGF0ZSB3aGVuIHRoZSB2aWV3cG9ydCBzY3JvbGxzOlxuICpcbiAqIC0gYHNjcm9sbFhgIOKAlCBIb3Jpem9udGFsIHNjcm9sbCBkaXN0YW5jZSBpbiBwaXhlbHMuXG4gKiAtIGBzY3JvbGxZYCDigJQgVmVydGljYWwgc2Nyb2xsIGRpc3RhbmNlIGluIHBpeGVscy5cbiAqIC0gYHNjcm9sbFhQcm9ncmVzc2Ag4oCUIEhvcml6b250YWwgc2Nyb2xsIHByb2dyZXNzIGJldHdlZW4gYDBgIGFuZCBgMWAuXG4gKiAtIGBzY3JvbGxZUHJvZ3Jlc3NgIOKAlCBWZXJ0aWNhbCBzY3JvbGwgcHJvZ3Jlc3MgYmV0d2VlbiBgMGAgYW5kIGAxYC5cbiAqXG4gKiAqKldhcm5pbmc6KiogU2V0dGluZyBgYm9keWAgb3IgYGh0bWxgIHRvIGBoZWlnaHQ6IDEwMCVgIG9yIHNpbWlsYXIgd2lsbCBicmVhayB0aGUgYFByb2dyZXNzYFxuICogdmFsdWVzIGFzIHRoaXMgYnJlYWtzIHRoZSBicm93c2VyJ3MgY2FwYWJpbGl0eSB0byBhY2N1cmF0ZWx5IG1lYXN1cmUgdGhlIHBhZ2UgbGVuZ3RoLlxuICpcbiAqIEBsaWJyYXJ5XG4gKlxuICogYGBganN4XG4gKiBpbXBvcnQgKiBhcyBSZWFjdCBmcm9tIFwicmVhY3RcIlxuICogaW1wb3J0IHtcbiAqICAgRnJhbWUsXG4gKiAgIHVzZVZpZXdwb3J0U2Nyb2xsLFxuICogICB1c2VUcmFuc2Zvcm1cbiAqIH0gZnJvbSBcImZyYW1lclwiXG4gKlxuICogZXhwb3J0IGZ1bmN0aW9uIE15Q29tcG9uZW50KCkge1xuICogICBjb25zdCB7IHNjcm9sbFlQcm9ncmVzcyB9ID0gdXNlVmlld3BvcnRTY3JvbGwoKVxuICogICByZXR1cm4gPEZyYW1lIHNjYWxlWD17c2Nyb2xsWVByb2dyZXNzfSAvPlxuICogfVxuICogYGBgXG4gKlxuICogQG1vdGlvblxuICpcbiAqIGBgYGpzeFxuICogZXhwb3J0IGNvbnN0IE15Q29tcG9uZW50ID0gKCkgPT4ge1xuICogICBjb25zdCB7IHNjcm9sbFlQcm9ncmVzcyB9ID0gdXNlVmlld3BvcnRTY3JvbGwoKVxuICogICByZXR1cm4gPG1vdGlvbi5kaXYgc3R5bGU9e3sgc2NhbGVYOiBzY3JvbGxZUHJvZ3Jlc3MgfX0gLz5cbiAqIH1cbiAqIGBgYFxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZnVuY3Rpb24gdXNlVmlld3BvcnRTY3JvbGwoKSB7XG4gICAgLyoqXG4gICAgICogTGF6eS1pbml0aWFsaXNlIHRoZSB2aWV3cG9ydCBzY3JvbGwgdmFsdWVzXG4gICAgICovXG4gICAgaWYgKCF2aWV3cG9ydFNjcm9sbFZhbHVlcykge1xuICAgICAgICB2aWV3cG9ydFNjcm9sbFZhbHVlcyA9IGNyZWF0ZVNjcm9sbE1vdGlvblZhbHVlcygpO1xuICAgIH1cbiAgICB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgIWhhc0xpc3RlbmVycyAmJiBhZGRFdmVudExpc3RlbmVycygpO1xuICAgIH0sIFtdKTtcbiAgICByZXR1cm4gdmlld3BvcnRTY3JvbGxWYWx1ZXM7XG59XG5cbi8vIERvZXMgdGhpcyBkZXZpY2UgcHJlZmVyIHJlZHVjZWQgbW90aW9uPyBSZXR1cm5zIGBudWxsYCBzZXJ2ZXItc2lkZS5cbnZhciBwcmVmZXJzUmVkdWNlZE1vdGlvbjtcbmZ1bmN0aW9uIGluaXRQcmVmZXJzUmVkdWNlZE1vdGlvbigpIHtcbiAgICBwcmVmZXJzUmVkdWNlZE1vdGlvbiA9IG1vdGlvblZhbHVlKG51bGwpO1xuICAgIGlmICh0eXBlb2Ygd2luZG93ID09PSBcInVuZGVmaW5lZFwiKVxuICAgICAgICByZXR1cm47XG4gICAgaWYgKHdpbmRvdy5tYXRjaE1lZGlhKSB7XG4gICAgICAgIHZhciBtb3Rpb25NZWRpYVF1ZXJ5XzEgPSB3aW5kb3cubWF0Y2hNZWRpYShcIihwcmVmZXJzLXJlZHVjZWQtbW90aW9uKVwiKTtcbiAgICAgICAgdmFyIHNldFJlZHVjZWRNb3Rpb25QcmVmZXJlbmNlcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBwcmVmZXJzUmVkdWNlZE1vdGlvbi5zZXQobW90aW9uTWVkaWFRdWVyeV8xLm1hdGNoZXMpO1xuICAgICAgICB9O1xuICAgICAgICBtb3Rpb25NZWRpYVF1ZXJ5XzEuYWRkTGlzdGVuZXIoc2V0UmVkdWNlZE1vdGlvblByZWZlcmVuY2VzKTtcbiAgICAgICAgc2V0UmVkdWNlZE1vdGlvblByZWZlcmVuY2VzKCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBwcmVmZXJzUmVkdWNlZE1vdGlvbi5zZXQoZmFsc2UpO1xuICAgIH1cbn1cbi8qKlxuICogQSBob29rIHRoYXQgcmV0dXJucyBgdHJ1ZWAgaWYgd2Ugc2hvdWxkIGJlIHVzaW5nIHJlZHVjZWQgbW90aW9uIGJhc2VkIG9uIHRoZSBjdXJyZW50IGRldmljZSdzIFJlZHVjZWQgTW90aW9uIHNldHRpbmcuXG4gKlxuICogVGhpcyBjYW4gYmUgdXNlZCB0byBpbXBsZW1lbnQgY2hhbmdlcyB0byB5b3VyIFVJIGJhc2VkIG9uIFJlZHVjZWQgTW90aW9uLiBGb3IgaW5zdGFuY2UsIHJlcGxhY2luZyBtb3Rpb24tc2lja25lc3MgaW5kdWNpbmdcbiAqIGB4YC9geWAgYW5pbWF0aW9ucyB3aXRoIGBvcGFjaXR5YCwgZGlzYWJsaW5nIHRoZSBhdXRvcGxheSBvZiBiYWNrZ3JvdW5kIHZpZGVvcywgb3IgdHVybmluZyBvZmYgcGFyYWxsYXggbW90aW9uLlxuICpcbiAqIEl0IHdpbGwgYWN0aXZlbHkgcmVzcG9uZCB0byBjaGFuZ2VzIGFuZCByZS1yZW5kZXIgeW91ciBjb21wb25lbnRzIHdpdGggdGhlIGxhdGVzdCBzZXR0aW5nLlxuICpcbiAqIGBgYGpzeFxuICogZXhwb3J0IGZ1bmN0aW9uIFNpZGViYXIoeyBpc09wZW4gfSkge1xuICogICBjb25zdCBzaG91bGRSZWR1Y2VNb3Rpb24gPSB1c2VSZWR1Y2VkTW90aW9uKClcbiAqICAgY29uc3QgY2xvc2VkWCA9IHNob3VsZFJlZHVjZU1vdGlvbiA/IDAgOiBcIi0xMDAlXCJcbiAqXG4gKiAgIHJldHVybiAoXG4gKiAgICAgPG1vdGlvbi5kaXYgYW5pbWF0ZT17e1xuICogICAgICAgb3BhY2l0eTogaXNPcGVuID8gMSA6IDAsXG4gKiAgICAgICB4OiBpc09wZW4gPyAwIDogY2xvc2VkWFxuICogICAgIH19IC8+XG4gKiAgIClcbiAqIH1cbiAqIGBgYFxuICpcbiAqIEByZXR1cm4gYm9vbGVhblxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZnVuY3Rpb24gdXNlUmVkdWNlZE1vdGlvbigpIHtcbiAgICAvKipcbiAgICAgKiBMYXp5IGluaXRpYWxpc2F0aW9uIG9mIHByZWZlcnNSZWR1Y2VkTW90aW9uXG4gICAgICovXG4gICAgIXByZWZlcnNSZWR1Y2VkTW90aW9uICYmIGluaXRQcmVmZXJzUmVkdWNlZE1vdGlvbigpO1xuICAgIHZhciBfYSA9IHRzbGliLl9fcmVhZChSZWFjdC51c2VTdGF0ZShwcmVmZXJzUmVkdWNlZE1vdGlvbi5nZXQoKSksIDIpLCBzaG91bGRSZWR1Y2VNb3Rpb24gPSBfYVswXSwgc2V0U2hvdWxkUmVkdWNlTW90aW9uID0gX2FbMV07XG4gICAgdXNlT25DaGFuZ2UocHJlZmVyc1JlZHVjZWRNb3Rpb24sIHNldFNob3VsZFJlZHVjZU1vdGlvbik7XG4gICAgcmV0dXJuIHNob3VsZFJlZHVjZU1vdGlvbjtcbn1cblxuLyoqXG4gKiBAcHVibGljXG4gKi9cbmZ1bmN0aW9uIGFuaW1hdGlvbkNvbnRyb2xzKCkge1xuICAgIC8qKlxuICAgICAqIFRyYWNrIHdoZXRoZXIgdGhlIGhvc3QgY29tcG9uZW50IGhhcyBtb3VudGVkLlxuICAgICAqL1xuICAgIHZhciBoYXNNb3VudGVkID0gZmFsc2U7XG4gICAgLyoqXG4gICAgICogUGVuZGluZyBhbmltYXRpb25zIHRoYXQgYXJlIHN0YXJ0ZWQgYmVmb3JlIGEgY29tcG9uZW50IGlzIG1vdW50ZWQuXG4gICAgICogVE9ETzogUmVtb3ZlIHRoaXMgYXMgYW5pbWF0aW9ucyBzaG91bGQgb25seSBydW4gaW4gZWZmZWN0c1xuICAgICAqL1xuICAgIHZhciBwZW5kaW5nQW5pbWF0aW9ucyA9IFtdO1xuICAgIC8qKlxuICAgICAqIEEgY29sbGVjdGlvbiBvZiBsaW5rZWQgY29tcG9uZW50IGFuaW1hdGlvbiBjb250cm9scy5cbiAgICAgKi9cbiAgICB2YXIgc3Vic2NyaWJlcnMgPSBuZXcgU2V0KCk7XG4gICAgdmFyIGNvbnRyb2xzID0ge1xuICAgICAgICBzdWJzY3JpYmU6IGZ1bmN0aW9uICh2aXN1YWxFbGVtZW50KSB7XG4gICAgICAgICAgICBzdWJzY3JpYmVycy5hZGQodmlzdWFsRWxlbWVudCk7XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkgeyByZXR1cm4gdm9pZCBzdWJzY3JpYmVycy5kZWxldGUodmlzdWFsRWxlbWVudCk7IH07XG4gICAgICAgIH0sXG4gICAgICAgIHN0YXJ0OiBmdW5jdGlvbiAoZGVmaW5pdGlvbiwgdHJhbnNpdGlvbk92ZXJyaWRlKSB7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFRPRE86IFdlIG9ubHkgcGVyZm9ybSB0aGlzIGhhc01vdW50ZWQgY2hlY2sgYmVjYXVzZSBpbiBGcmFtZXIgd2UgdXNlZCB0b1xuICAgICAgICAgICAgICogZW5jb3VyYWdlIHRoZSBhYmlsaXR5IHRvIHN0YXJ0IGFuIGFuaW1hdGlvbiB3aXRoaW4gdGhlIHJlbmRlciBwaGFzZS4gVGhpc1xuICAgICAgICAgICAgICogaXNuJ3QgYmVoYXZpb3VyIGNvbmN1cnJlbnQtc2FmZSBzbyB3aGVuIHdlIG1ha2UgRnJhbWVyIGNvbmN1cnJlbnQtc2FmZVxuICAgICAgICAgICAgICogd2UgY2FuIGRpdGNoIHRoaXMuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGlmIChoYXNNb3VudGVkKSB7XG4gICAgICAgICAgICAgICAgdmFyIGFuaW1hdGlvbnNfMSA9IFtdO1xuICAgICAgICAgICAgICAgIHN1YnNjcmliZXJzLmZvckVhY2goZnVuY3Rpb24gKHZpc3VhbEVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgYW5pbWF0aW9uc18xLnB1c2goYW5pbWF0ZVZpc3VhbEVsZW1lbnQodmlzdWFsRWxlbWVudCwgZGVmaW5pdGlvbiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNpdGlvbk92ZXJyaWRlOiB0cmFuc2l0aW9uT3ZlcnJpZGUsXG4gICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5hbGwoYW5pbWF0aW9uc18xKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xuICAgICAgICAgICAgICAgICAgICBwZW5kaW5nQW5pbWF0aW9ucy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFuaW1hdGlvbjogW2RlZmluaXRpb24sIHRyYW5zaXRpb25PdmVycmlkZV0sXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlOiByZXNvbHZlLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAoZGVmaW5pdGlvbikge1xuICAgICAgICAgICAgaGV5TGlzdGVuLmludmFyaWFudChoYXNNb3VudGVkLCBcImNvbnRyb2xzLnNldCgpIHNob3VsZCBvbmx5IGJlIGNhbGxlZCBhZnRlciBhIGNvbXBvbmVudCBoYXMgbW91bnRlZC4gQ29uc2lkZXIgY2FsbGluZyB3aXRoaW4gYSB1c2VFZmZlY3QgaG9vay5cIik7XG4gICAgICAgICAgICByZXR1cm4gc3Vic2NyaWJlcnMuZm9yRWFjaChmdW5jdGlvbiAodmlzdWFsRWxlbWVudCkge1xuICAgICAgICAgICAgICAgIHNldFZhbHVlcyh2aXN1YWxFbGVtZW50LCBkZWZpbml0aW9uKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBzdG9wOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBzdWJzY3JpYmVycy5mb3JFYWNoKGZ1bmN0aW9uICh2aXN1YWxFbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgc3RvcEFuaW1hdGlvbih2aXN1YWxFbGVtZW50KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBtb3VudDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaGFzTW91bnRlZCA9IHRydWU7XG4gICAgICAgICAgICBwZW5kaW5nQW5pbWF0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uIChfYSkge1xuICAgICAgICAgICAgICAgIHZhciBhbmltYXRpb24gPSBfYS5hbmltYXRpb24sIHJlc29sdmUgPSBfYS5yZXNvbHZlO1xuICAgICAgICAgICAgICAgIGNvbnRyb2xzLnN0YXJ0LmFwcGx5KGNvbnRyb2xzLCB0c2xpYi5fX3NwcmVhZEFycmF5KFtdLCB0c2xpYi5fX3JlYWQoYW5pbWF0aW9uKSkpLnRoZW4ocmVzb2x2ZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgaGFzTW91bnRlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGNvbnRyb2xzLnN0b3AoKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgfTtcbiAgICByZXR1cm4gY29udHJvbHM7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBgQW5pbWF0aW9uQ29udHJvbHNgLCB3aGljaCBjYW4gYmUgdXNlZCB0byBtYW51YWxseSBzdGFydCwgc3RvcFxuICogYW5kIHNlcXVlbmNlIGFuaW1hdGlvbnMgb24gb25lIG9yIG1vcmUgY29tcG9uZW50cy5cbiAqXG4gKiBUaGUgcmV0dXJuZWQgYEFuaW1hdGlvbkNvbnRyb2xzYCBzaG91bGQgYmUgcGFzc2VkIHRvIHRoZSBgYW5pbWF0ZWAgcHJvcGVydHlcbiAqIG9mIHRoZSBjb21wb25lbnRzIHlvdSB3YW50IHRvIGFuaW1hdGUuXG4gKlxuICogVGhlc2UgY29tcG9uZW50cyBjYW4gdGhlbiBiZSBhbmltYXRlZCB3aXRoIHRoZSBgc3RhcnRgIG1ldGhvZC5cbiAqXG4gKiBAbGlicmFyeVxuICpcbiAqIGBgYGpzeFxuICogaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnXG4gKiBpbXBvcnQgeyBGcmFtZSwgdXNlQW5pbWF0aW9uIH0gZnJvbSAnZnJhbWVyJ1xuICpcbiAqIGV4cG9ydCBmdW5jdGlvbiBNeUNvbXBvbmVudChwcm9wcykge1xuICogICAgY29uc3QgY29udHJvbHMgPSB1c2VBbmltYXRpb24oKVxuICpcbiAqICAgIGNvbnRyb2xzLnN0YXJ0KHtcbiAqICAgICAgICB4OiAxMDAsXG4gKiAgICAgICAgdHJhbnNpdGlvbjogeyBkdXJhdGlvbjogMC41IH0sXG4gKiAgICB9KVxuICpcbiAqICAgIHJldHVybiA8RnJhbWUgYW5pbWF0ZT17Y29udHJvbHN9IC8+XG4gKiB9XG4gKiBgYGBcbiAqXG4gKiBAbW90aW9uXG4gKlxuICogYGBganN4XG4gKiBpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCdcbiAqIGltcG9ydCB7IG1vdGlvbiwgdXNlQW5pbWF0aW9uIH0gZnJvbSAnZnJhbWVyLW1vdGlvbidcbiAqXG4gKiBleHBvcnQgZnVuY3Rpb24gTXlDb21wb25lbnQocHJvcHMpIHtcbiAqICAgIGNvbnN0IGNvbnRyb2xzID0gdXNlQW5pbWF0aW9uKClcbiAqXG4gKiAgICBjb250cm9scy5zdGFydCh7XG4gKiAgICAgICAgeDogMTAwLFxuICogICAgICAgIHRyYW5zaXRpb246IHsgZHVyYXRpb246IDAuNSB9LFxuICogICAgfSlcbiAqXG4gKiAgICByZXR1cm4gPG1vdGlvbi5kaXYgYW5pbWF0ZT17Y29udHJvbHN9IC8+XG4gKiB9XG4gKiBgYGBcbiAqXG4gKiBAcmV0dXJucyBBbmltYXRpb24gY29udHJvbGxlciB3aXRoIGBzdGFydGAgYW5kIGBzdG9wYCBtZXRob2RzXG4gKlxuICogQHB1YmxpY1xuICovXG5mdW5jdGlvbiB1c2VBbmltYXRpb24oKSB7XG4gICAgdmFyIGNvbnRyb2xzID0gdXNlQ29uc3RhbnQoYW5pbWF0aW9uQ29udHJvbHMpO1xuICAgIFJlYWN0LnVzZUVmZmVjdChjb250cm9scy5tb3VudCwgW10pO1xuICAgIHJldHVybiBjb250cm9scztcbn1cblxuLyoqXG4gKiBDeWNsZXMgdGhyb3VnaCBhIHNlcmllcyBvZiB2aXN1YWwgcHJvcGVydGllcy4gQ2FuIGJlIHVzZWQgdG8gdG9nZ2xlIGJldHdlZW4gb3IgY3ljbGUgdGhyb3VnaCBhbmltYXRpb25zLiBJdCB3b3JrcyBzaW1pbGFyIHRvIGB1c2VTdGF0ZWAgaW4gUmVhY3QuIEl0IGlzIHByb3ZpZGVkIGFuIGluaXRpYWwgYXJyYXkgb2YgcG9zc2libGUgc3RhdGVzLCBhbmQgcmV0dXJucyBhbiBhcnJheSBvZiB0d28gYXJndW1lbnRzLlxuICpcbiAqIEBsaWJyYXJ5XG4gKlxuICogYGBganN4XG4gKiBpbXBvcnQgKiBhcyBSZWFjdCBmcm9tIFwicmVhY3RcIlxuICogaW1wb3J0IHsgRnJhbWUsIHVzZUN5Y2xlIH0gZnJvbSBcImZyYW1lclwiXG4gKlxuICogZXhwb3J0IGZ1bmN0aW9uIE15Q29tcG9uZW50KCkge1xuICogICBjb25zdCBbeCwgY3ljbGVYXSA9IHVzZUN5Y2xlKDAsIDUwLCAxMDApXG4gKlxuICogICByZXR1cm4gKFxuICogICAgIDxGcmFtZVxuICogICAgICAgYW5pbWF0ZT17eyB4OiB4IH19XG4gKiAgICAgICBvblRhcD17KCkgPT4gY3ljbGVYKCl9XG4gKiAgICAgIC8+XG4gKiAgICApXG4gKiB9XG4gKiBgYGBcbiAqXG4gKiBAbW90aW9uXG4gKlxuICogQW4gaW5kZXggdmFsdWUgY2FuIGJlIHBhc3NlZCB0byB0aGUgcmV0dXJuZWQgYGN5Y2xlYCBmdW5jdGlvbiB0byBjeWNsZSB0byBhIHNwZWNpZmljIGluZGV4LlxuICpcbiAqIGBgYGpzeFxuICogaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBcInJlYWN0XCJcbiAqIGltcG9ydCB7IG1vdGlvbiwgdXNlQ3ljbGUgfSBmcm9tIFwiZnJhbWVyLW1vdGlvblwiXG4gKlxuICogZXhwb3J0IGNvbnN0IE15Q29tcG9uZW50ID0gKCkgPT4ge1xuICogICBjb25zdCBbeCwgY3ljbGVYXSA9IHVzZUN5Y2xlKDAsIDUwLCAxMDApXG4gKlxuICogICByZXR1cm4gKFxuICogICAgIDxtb3Rpb24uZGl2XG4gKiAgICAgICBhbmltYXRlPXt7IHg6IHggfX1cbiAqICAgICAgIG9uVGFwPXsoKSA9PiBjeWNsZVgoKX1cbiAqICAgICAgLz5cbiAqICAgIClcbiAqIH1cbiAqIGBgYFxuICpcbiAqIEBwYXJhbSBpdGVtcyAtIGl0ZW1zIHRvIGN5Y2xlIHRocm91Z2hcbiAqIEByZXR1cm5zIFtjdXJyZW50U3RhdGUsIGN5Y2xlU3RhdGVdXG4gKlxuICogQHB1YmxpY1xuICovXG5mdW5jdGlvbiB1c2VDeWNsZSgpIHtcbiAgICB2YXIgaXRlbXMgPSBbXTtcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICBpdGVtc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgIH1cbiAgICB2YXIgaW5kZXggPSBSZWFjdC51c2VSZWYoMCk7XG4gICAgdmFyIF9hID0gdHNsaWIuX19yZWFkKFJlYWN0LnVzZVN0YXRlKGl0ZW1zW2luZGV4LmN1cnJlbnRdKSwgMiksIGl0ZW0gPSBfYVswXSwgc2V0SXRlbSA9IF9hWzFdO1xuICAgIHJldHVybiBbXG4gICAgICAgIGl0ZW0sXG4gICAgICAgIGZ1bmN0aW9uIChuZXh0KSB7XG4gICAgICAgICAgICBpbmRleC5jdXJyZW50ID1cbiAgICAgICAgICAgICAgICB0eXBlb2YgbmV4dCAhPT0gXCJudW1iZXJcIlxuICAgICAgICAgICAgICAgICAgICA/IHBvcG1vdGlvbi53cmFwKDAsIGl0ZW1zLmxlbmd0aCwgaW5kZXguY3VycmVudCArIDEpXG4gICAgICAgICAgICAgICAgICAgIDogbmV4dDtcbiAgICAgICAgICAgIHNldEl0ZW0oaXRlbXNbaW5kZXguY3VycmVudF0pO1xuICAgICAgICB9LFxuICAgIF07XG59XG5cbi8qKlxuICogQ2FuIG1hbnVhbGx5IHRyaWdnZXIgYSBkcmFnIGdlc3R1cmUgb24gb25lIG9yIG1vcmUgYGRyYWdgLWVuYWJsZWQgYG1vdGlvbmAgY29tcG9uZW50cy5cbiAqXG4gKiBAbGlicmFyeVxuICpcbiAqIGBgYGpzeFxuICogY29uc3QgZHJhZ0NvbnRyb2xzID0gdXNlRHJhZ0NvbnRyb2xzKClcbiAqXG4gKiBmdW5jdGlvbiBzdGFydERyYWcoZXZlbnQpIHtcbiAqICAgZHJhZ0NvbnRyb2xzLnN0YXJ0KGV2ZW50LCB7IHNuYXBUb0N1cnNvcjogdHJ1ZSB9KVxuICogfVxuICpcbiAqIHJldHVybiAoXG4gKiAgIDw+XG4gKiAgICAgPEZyYW1lIG9uVGFwU3RhcnQ9e3N0YXJ0RHJhZ30gLz5cbiAqICAgICA8RnJhbWUgZHJhZz1cInhcIiBkcmFnQ29udHJvbHM9e2RyYWdDb250cm9sc30gLz5cbiAqICAgPC8+XG4gKiApXG4gKiBgYGBcbiAqXG4gKiBAbW90aW9uXG4gKlxuICogYGBganN4XG4gKiBjb25zdCBkcmFnQ29udHJvbHMgPSB1c2VEcmFnQ29udHJvbHMoKVxuICpcbiAqIGZ1bmN0aW9uIHN0YXJ0RHJhZyhldmVudCkge1xuICogICBkcmFnQ29udHJvbHMuc3RhcnQoZXZlbnQsIHsgc25hcFRvQ3Vyc29yOiB0cnVlIH0pXG4gKiB9XG4gKlxuICogcmV0dXJuIChcbiAqICAgPD5cbiAqICAgICA8ZGl2IG9uUG9pbnRlckRvd249e3N0YXJ0RHJhZ30gLz5cbiAqICAgICA8bW90aW9uLmRpdiBkcmFnPVwieFwiIGRyYWdDb250cm9scz17ZHJhZ0NvbnRyb2xzfSAvPlxuICogICA8Lz5cbiAqIClcbiAqIGBgYFxuICpcbiAqIEBwdWJsaWNcbiAqL1xudmFyIERyYWdDb250cm9scyA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBEcmFnQ29udHJvbHMoKSB7XG4gICAgICAgIHRoaXMuY29tcG9uZW50Q29udHJvbHMgPSBuZXcgU2V0KCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFN1YnNjcmliZSBhIGNvbXBvbmVudCdzIGludGVybmFsIGBWaXN1YWxFbGVtZW50RHJhZ0NvbnRyb2xzYCB0byB0aGUgdXNlci1mYWNpbmcgQVBJLlxuICAgICAqXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgRHJhZ0NvbnRyb2xzLnByb3RvdHlwZS5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoY29udHJvbHMpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdGhpcy5jb21wb25lbnRDb250cm9scy5hZGQoY29udHJvbHMpO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMuY29tcG9uZW50Q29udHJvbHMuZGVsZXRlKGNvbnRyb2xzKTsgfTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFN0YXJ0IGEgZHJhZyBnZXN0dXJlIG9uIGV2ZXJ5IGBtb3Rpb25gIGNvbXBvbmVudCB0aGF0IGhhcyB0aGlzIHNldCBvZiBkcmFnIGNvbnRyb2xzXG4gICAgICogcGFzc2VkIGludG8gaXQgdmlhIHRoZSBgZHJhZ0NvbnRyb2xzYCBwcm9wLlxuICAgICAqXG4gICAgICogYGBganN4XG4gICAgICogZHJhZ0NvbnRyb2xzLnN0YXJ0KGUsIHtcbiAgICAgKiAgIHNuYXBUb0N1cnNvcjogdHJ1ZVxuICAgICAqIH0pXG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZXZlbnQgLSBQb2ludGVyRXZlbnRcbiAgICAgKiBAcGFyYW0gb3B0aW9ucyAtIE9wdGlvbnNcbiAgICAgKlxuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cbiAgICBEcmFnQ29udHJvbHMucHJvdG90eXBlLnN0YXJ0ID0gZnVuY3Rpb24gKGV2ZW50LCBvcHRpb25zKSB7XG4gICAgICAgIHRoaXMuY29tcG9uZW50Q29udHJvbHMuZm9yRWFjaChmdW5jdGlvbiAoY29udHJvbHMpIHtcbiAgICAgICAgICAgIGNvbnRyb2xzLnN0YXJ0KGV2ZW50Lm5hdGl2ZUV2ZW50IHx8IGV2ZW50LCBvcHRpb25zKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBEcmFnQ29udHJvbHMucHJvdG90eXBlLnVwZGF0ZUNvbnN0cmFpbnRzID0gZnVuY3Rpb24gKGZsdXNoKSB7XG4gICAgICAgIGlmIChmbHVzaCA9PT0gdm9pZCAwKSB7IGZsdXNoID0gdHJ1ZTsgfVxuICAgICAgICB0aGlzLmNvbXBvbmVudENvbnRyb2xzLmZvckVhY2goZnVuY3Rpb24gKGNvbnRyb2xzKSB7XG4gICAgICAgICAgICBjb250cm9scy51cGRhdGVDb25zdHJhaW50cygpO1xuICAgICAgICB9KTtcbiAgICAgICAgZmx1c2ggJiYgZmx1c2hMYXlvdXQoKTtcbiAgICB9O1xuICAgIHJldHVybiBEcmFnQ29udHJvbHM7XG59KCkpO1xudmFyIGNyZWF0ZURyYWdDb250cm9scyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG5ldyBEcmFnQ29udHJvbHMoKTsgfTtcbi8qKlxuICogVXN1YWxseSwgZHJhZ2dpbmcgaXMgaW5pdGlhdGVkIGJ5IHByZXNzaW5nIGRvd24gb24gYSBgbW90aW9uYCBjb21wb25lbnQgd2l0aCBhIGBkcmFnYCBwcm9wXG4gKiBhbmQgbW92aW5nIGl0LiBGb3Igc29tZSB1c2UtY2FzZXMsIGZvciBpbnN0YW5jZSBjbGlja2luZyBhdCBhbiBhcmJpdHJhcnkgcG9pbnQgb24gYSB2aWRlbyBzY3J1YmJlciwgd2VcbiAqIG1pZ2h0IHdhbnQgdG8gaW5pdGlhdGUgdGhhdCBkcmFnZ2luZyBmcm9tIGEgZGlmZmVyZW50IGNvbXBvbmVudCB0aGFuIHRoZSBkcmFnZ2FibGUgb25lLlxuICpcbiAqIEJ5IGNyZWF0aW5nIGEgYGRyYWdDb250cm9sc2AgdXNpbmcgdGhlIGB1c2VEcmFnQ29udHJvbHNgIGhvb2ssIHdlIGNhbiBwYXNzIHRoaXMgaW50b1xuICogdGhlIGRyYWdnYWJsZSBjb21wb25lbnQncyBgZHJhZ0NvbnRyb2xzYCBwcm9wLiBJdCBleHBvc2VzIGEgYHN0YXJ0YCBtZXRob2RcbiAqIHRoYXQgY2FuIHN0YXJ0IGRyYWdnaW5nIGZyb20gcG9pbnRlciBldmVudHMgb24gb3RoZXIgY29tcG9uZW50cy5cbiAqXG4gKiBAbGlicmFyeVxuICpcbiAqIGBgYGpzeFxuICogY29uc3QgZHJhZ0NvbnRyb2xzID0gdXNlRHJhZ0NvbnRyb2xzKClcbiAqXG4gKiBmdW5jdGlvbiBzdGFydERyYWcoZXZlbnQpIHtcbiAqICAgZHJhZ0NvbnRyb2xzLnN0YXJ0KGV2ZW50LCB7IHNuYXBUb0N1cnNvcjogdHJ1ZSB9KVxuICogfVxuICpcbiAqIHJldHVybiAoXG4gKiAgIDw+XG4gKiAgICAgPEZyYW1lIG9uVGFwU3RhcnQ9e3N0YXJ0RHJhZ30gLz5cbiAqICAgICA8RnJhbWUgZHJhZz1cInhcIiBkcmFnQ29udHJvbHM9e2RyYWdDb250cm9sc30gLz5cbiAqICAgPC8+XG4gKiApXG4gKiBgYGBcbiAqXG4gKiBAbW90aW9uXG4gKlxuICogYGBganN4XG4gKiBjb25zdCBkcmFnQ29udHJvbHMgPSB1c2VEcmFnQ29udHJvbHMoKVxuICpcbiAqIGZ1bmN0aW9uIHN0YXJ0RHJhZyhldmVudCkge1xuICogICBkcmFnQ29udHJvbHMuc3RhcnQoZXZlbnQsIHsgc25hcFRvQ3Vyc29yOiB0cnVlIH0pXG4gKiB9XG4gKlxuICogcmV0dXJuIChcbiAqICAgPD5cbiAqICAgICA8ZGl2IG9uUG9pbnRlckRvd249e3N0YXJ0RHJhZ30gLz5cbiAqICAgICA8bW90aW9uLmRpdiBkcmFnPVwieFwiIGRyYWdDb250cm9scz17ZHJhZ0NvbnRyb2xzfSAvPlxuICogICA8Lz5cbiAqIClcbiAqIGBgYFxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZnVuY3Rpb24gdXNlRHJhZ0NvbnRyb2xzKCkge1xuICAgIHJldHVybiB1c2VDb25zdGFudChjcmVhdGVEcmFnQ29udHJvbHMpO1xufVxuXG52YXIgY3JlYXRlT2JqZWN0ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gKHt9KTsgfTtcbnZhciBzdGF0ZVZpc3VhbEVsZW1lbnQgPSB2aXN1YWxFbGVtZW50KHtcbiAgICBidWlsZDogZnVuY3Rpb24gKCkgeyB9LFxuICAgIG1lYXN1cmVWaWV3cG9ydEJveDogYXhpc0JveCxcbiAgICByZXNldFRyYW5zZm9ybTogZnVuY3Rpb24gKCkgeyB9LFxuICAgIHJlc3RvcmVUcmFuc2Zvcm06IGZ1bmN0aW9uICgpIHsgfSxcbiAgICByZW1vdmVWYWx1ZUZyb21SZW5kZXJTdGF0ZTogZnVuY3Rpb24gKCkgeyB9LFxuICAgIHJlbmRlcjogZnVuY3Rpb24gKCkgeyB9LFxuICAgIHNjcmFwZU1vdGlvblZhbHVlc0Zyb21Qcm9wczogY3JlYXRlT2JqZWN0LFxuICAgIHJlYWRWYWx1ZUZyb21JbnN0YW5jZTogZnVuY3Rpb24gKF9zdGF0ZSwga2V5LCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBvcHRpb25zLmluaXRpYWxTdGF0ZVtrZXldIHx8IDA7XG4gICAgfSxcbiAgICBtYWtlVGFyZ2V0QW5pbWF0YWJsZTogZnVuY3Rpb24gKGVsZW1lbnQsIF9hKSB7XG4gICAgICAgIHZhciB0cmFuc2l0aW9uID0gX2EudHJhbnNpdGlvbiwgdHJhbnNpdGlvbkVuZCA9IF9hLnRyYW5zaXRpb25FbmQsIHRhcmdldCA9IHRzbGliLl9fcmVzdChfYSwgW1widHJhbnNpdGlvblwiLCBcInRyYW5zaXRpb25FbmRcIl0pO1xuICAgICAgICB2YXIgb3JpZ2luID0gZ2V0T3JpZ2luKHRhcmdldCwgdHJhbnNpdGlvbiB8fCB7fSwgZWxlbWVudCk7XG4gICAgICAgIGNoZWNrVGFyZ2V0Rm9yTmV3VmFsdWVzKGVsZW1lbnQsIHRhcmdldCwgb3JpZ2luKTtcbiAgICAgICAgcmV0dXJuIHRzbGliLl9fYXNzaWduKHsgdHJhbnNpdGlvbjogdHJhbnNpdGlvbiwgdHJhbnNpdGlvbkVuZDogdHJhbnNpdGlvbkVuZCB9LCB0YXJnZXQpO1xuICAgIH0sXG59KTtcbnZhciB1c2VWaXN1YWxTdGF0ZSA9IG1ha2VVc2VWaXN1YWxTdGF0ZSh7XG4gICAgc2NyYXBlTW90aW9uVmFsdWVzRnJvbVByb3BzOiBjcmVhdGVPYmplY3QsXG4gICAgY3JlYXRlUmVuZGVyU3RhdGU6IGNyZWF0ZU9iamVjdCxcbn0pO1xuLyoqXG4gKiBUaGlzIGlzIG5vdCBhbiBvZmZpY2lhbGx5IHN1cHBvcnRlZCBBUEkgYW5kIG1heSBiZSByZW1vdmVkXG4gKiBvbiBhbnkgdmVyc2lvbi5cbiAqIEBpbnRlcm5hbFxuICovXG5mdW5jdGlvbiB1c2VBbmltYXRlZFN0YXRlKGluaXRpYWxTdGF0ZSkge1xuICAgIHZhciBfYSA9IHRzbGliLl9fcmVhZChSZWFjdC51c2VTdGF0ZShpbml0aWFsU3RhdGUpLCAyKSwgYW5pbWF0aW9uU3RhdGUgPSBfYVswXSwgc2V0QW5pbWF0aW9uU3RhdGUgPSBfYVsxXTtcbiAgICB2YXIgdmlzdWFsU3RhdGUgPSB1c2VWaXN1YWxTdGF0ZSh7fSwgZmFsc2UpO1xuICAgIHZhciBlbGVtZW50ID0gdXNlQ29uc3RhbnQoZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gc3RhdGVWaXN1YWxFbGVtZW50KHsgcHJvcHM6IHt9LCB2aXN1YWxTdGF0ZTogdmlzdWFsU3RhdGUgfSwgeyBpbml0aWFsU3RhdGU6IGluaXRpYWxTdGF0ZSB9KTtcbiAgICB9KTtcbiAgICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgICAgICBlbGVtZW50Lm1vdW50KHt9KTtcbiAgICAgICAgcmV0dXJuIGVsZW1lbnQudW5tb3VudCgpO1xuICAgIH0sIFtdKTtcbiAgICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgICAgICBlbGVtZW50LnNldFByb3BzKHtcbiAgICAgICAgICAgIG9uVXBkYXRlOiBmdW5jdGlvbiAodikgeyByZXR1cm4gc2V0QW5pbWF0aW9uU3RhdGUodHNsaWIuX19hc3NpZ24oe30sIHYpKTsgfSxcbiAgICAgICAgfSk7XG4gICAgfSk7XG4gICAgdmFyIHN0YXJ0QW5pbWF0aW9uID0gdXNlQ29uc3RhbnQoZnVuY3Rpb24gKCkgeyByZXR1cm4gZnVuY3Rpb24gKGFuaW1hdGlvbkRlZmluaXRpb24pIHtcbiAgICAgICAgcmV0dXJuIGFuaW1hdGVWaXN1YWxFbGVtZW50KGVsZW1lbnQsIGFuaW1hdGlvbkRlZmluaXRpb24pO1xuICAgIH07IH0pO1xuICAgIHJldHVybiBbYW5pbWF0aW9uU3RhdGUsIHN0YXJ0QW5pbWF0aW9uXTtcbn1cblxuLy8gS2VlcCB0aGluZ3MgcmVhc29uYWJsZSBhbmQgYXZvaWQgc2NhbGU6IEluZmluaXR5LiBJbiBwcmFjdGlzZSB3ZSBtaWdodCBuZWVkXG4vLyB0byBhZGQgYW5vdGhlciB2YWx1ZSwgb3BhY2l0eSwgdGhhdCBjb3VsZCBpbnRlcnBvbGF0ZSBzY2FsZVgvWSBbMCwwLjAxXSA9PiBbMCwxXVxuLy8gdG8gc2ltcGx5IGhpZGUgY29udGVudCBhdCB1bnJlYXNvbmFibGUgc2NhbGVzLlxudmFyIG1heFNjYWxlID0gMTAwMDAwO1xudmFyIGludmVydFNjYWxlID0gZnVuY3Rpb24gKHNjYWxlKSB7XG4gICAgcmV0dXJuIHNjYWxlID4gMC4wMDEgPyAxIC8gc2NhbGUgOiBtYXhTY2FsZTtcbn07XG52YXIgaGFzV2FybmVkID0gZmFsc2U7XG4vKipcbiAqIFJldHVybnMgYSBgTW90aW9uVmFsdWVgIGVhY2ggZm9yIGBzY2FsZVhgIGFuZCBgc2NhbGVZYCB0aGF0IHVwZGF0ZSB3aXRoIHRoZSBpbnZlcnNlXG4gKiBvZiB0aGVpciByZXNwZWN0aXZlIHBhcmVudCBzY2FsZXMuXG4gKlxuICogVGhpcyBpcyB1c2VmdWwgZm9yIHVuZG9pbmcgdGhlIGRpc3RvcnRpb24gb2YgY29udGVudCB3aGVuIHNjYWxpbmcgYSBwYXJlbnQgY29tcG9uZW50LlxuICpcbiAqIEJ5IGRlZmF1bHQsIGB1c2VJbnZlcnRlZFNjYWxlYCB3aWxsIGF1dG9tYXRpY2FsbHkgZmV0Y2ggYHNjYWxlWGAgYW5kIGBzY2FsZVlgIGZyb20gdGhlIG5lYXJlc3QgcGFyZW50LlxuICogQnkgcGFzc2luZyBvdGhlciBgTW90aW9uVmFsdWVgcyBpbiBhcyBgdXNlSW52ZXJ0ZWRTY2FsZSh7IHNjYWxlWCwgc2NhbGVZIH0pYCwgaXQgd2lsbCBpbnZlcnQgdGhlIG91dHB1dFxuICogb2YgdGhvc2UgaW5zdGVhZC5cbiAqXG4gKiBAbW90aW9uXG4gKlxuICogYGBganN4XG4gKiBjb25zdCBNeUNvbXBvbmVudCA9ICgpID0+IHtcbiAqICAgY29uc3QgeyBzY2FsZVgsIHNjYWxlWSB9ID0gdXNlSW52ZXJ0ZWRTY2FsZSgpXG4gKiAgIHJldHVybiA8bW90aW9uLmRpdiBzdHlsZT17eyBzY2FsZVgsIHNjYWxlWSB9fSAvPlxuICogfVxuICogYGBgXG4gKlxuICogQGxpYnJhcnlcbiAqXG4gKiBgYGBqc3hcbiAqIGZ1bmN0aW9uIE15Q29tcG9uZW50KCkge1xuICogICBjb25zdCB7IHNjYWxlWCwgc2NhbGVZIH0gPSB1c2VJbnZlcnRlZFNjYWxlKClcbiAqICAgcmV0dXJuIDxGcmFtZSBzY2FsZVg9e3NjYWxlWH0gc2NhbGVZPXtzY2FsZVl9IC8+XG4gKiB9XG4gKiBgYGBcbiAqXG4gKiBAZGVwcmVjYXRlZFxuICogQGludGVybmFsXG4gKi9cbmZ1bmN0aW9uIHVzZUludmVydGVkU2NhbGUoc2NhbGUpIHtcbiAgICB2YXIgcGFyZW50U2NhbGVYID0gdXNlTW90aW9uVmFsdWUoMSk7XG4gICAgdmFyIHBhcmVudFNjYWxlWSA9IHVzZU1vdGlvblZhbHVlKDEpO1xuICAgIHZhciB2aXN1YWxFbGVtZW50ID0gdXNlVmlzdWFsRWxlbWVudENvbnRleHQoKTtcbiAgICBoZXlMaXN0ZW4uaW52YXJpYW50KCEhKHNjYWxlIHx8IHZpc3VhbEVsZW1lbnQpLCBcIklmIG5vIHNjYWxlIHZhbHVlcyBhcmUgcHJvdmlkZWQsIHVzZUludmVydGVkU2NhbGUgbXVzdCBiZSB1c2VkIHdpdGhpbiBhIGNoaWxkIG9mIGFub3RoZXIgbW90aW9uIGNvbXBvbmVudC5cIik7XG4gICAgaGV5TGlzdGVuLndhcm5pbmcoaGFzV2FybmVkLCBcInVzZUludmVydGVkU2NhbGUgaXMgZGVwcmVjYXRlZCBhbmQgd2lsbCBiZSByZW1vdmVkIGluIDMuMC4gVXNlIHRoZSBsYXlvdXQgcHJvcCBpbnN0ZWFkLlwiKTtcbiAgICBoYXNXYXJuZWQgPSB0cnVlO1xuICAgIGlmIChzY2FsZSkge1xuICAgICAgICBwYXJlbnRTY2FsZVggPSBzY2FsZS5zY2FsZVggfHwgcGFyZW50U2NhbGVYO1xuICAgICAgICBwYXJlbnRTY2FsZVkgPSBzY2FsZS5zY2FsZVkgfHwgcGFyZW50U2NhbGVZO1xuICAgIH1cbiAgICBlbHNlIGlmICh2aXN1YWxFbGVtZW50KSB7XG4gICAgICAgIHBhcmVudFNjYWxlWCA9IHZpc3VhbEVsZW1lbnQuZ2V0VmFsdWUoXCJzY2FsZVhcIiwgMSk7XG4gICAgICAgIHBhcmVudFNjYWxlWSA9IHZpc3VhbEVsZW1lbnQuZ2V0VmFsdWUoXCJzY2FsZVlcIiwgMSk7XG4gICAgfVxuICAgIHZhciBzY2FsZVggPSB1c2VUcmFuc2Zvcm0ocGFyZW50U2NhbGVYLCBpbnZlcnRTY2FsZSk7XG4gICAgdmFyIHNjYWxlWSA9IHVzZVRyYW5zZm9ybShwYXJlbnRTY2FsZVksIGludmVydFNjYWxlKTtcbiAgICByZXR1cm4geyBzY2FsZVg6IHNjYWxlWCwgc2NhbGVZOiBzY2FsZVkgfTtcbn1cblxuZXhwb3J0cy5BbmltYXRlUHJlc2VuY2UgPSBBbmltYXRlUHJlc2VuY2U7XG5leHBvcnRzLkFuaW1hdGVTaGFyZWRMYXlvdXQgPSBBbmltYXRlU2hhcmVkTGF5b3V0O1xuZXhwb3J0cy5EcmFnQ29udHJvbHMgPSBEcmFnQ29udHJvbHM7XG5leHBvcnRzLkZsYXRUcmVlID0gRmxhdFRyZWU7XG5leHBvcnRzLkZyYW1lclRyZWVMYXlvdXRDb250ZXh0ID0gRnJhbWVyVHJlZUxheW91dENvbnRleHQ7XG5leHBvcnRzLkxheW91dEdyb3VwQ29udGV4dCA9IExheW91dEdyb3VwQ29udGV4dDtcbmV4cG9ydHMuTGF6eU1vdGlvbiA9IExhenlNb3Rpb247XG5leHBvcnRzLk1vdGlvbkNvbmZpZyA9IE1vdGlvbkNvbmZpZztcbmV4cG9ydHMuTW90aW9uQ29uZmlnQ29udGV4dCA9IE1vdGlvbkNvbmZpZ0NvbnRleHQ7XG5leHBvcnRzLk1vdGlvblZhbHVlID0gTW90aW9uVmFsdWU7XG5leHBvcnRzLlByZXNlbmNlQ29udGV4dCA9IFByZXNlbmNlQ29udGV4dDtcbmV4cG9ydHMuU2hhcmVkTGF5b3V0Q29udGV4dCA9IFNoYXJlZExheW91dENvbnRleHQ7XG5leHBvcnRzLmFkZFNjYWxlQ29ycmVjdGlvbiA9IGFkZFNjYWxlQ29ycmVjdGlvbjtcbmV4cG9ydHMuYW5pbWF0ZSA9IGFuaW1hdGU7XG5leHBvcnRzLmFuaW1hdGVWaXN1YWxFbGVtZW50ID0gYW5pbWF0ZVZpc3VhbEVsZW1lbnQ7XG5leHBvcnRzLmFuaW1hdGlvbkNvbnRyb2xzID0gYW5pbWF0aW9uQ29udHJvbHM7XG5leHBvcnRzLmJhdGNoTGF5b3V0ID0gYmF0Y2hMYXlvdXQ7XG5leHBvcnRzLmNyZWF0ZUJhdGNoZXIgPSBjcmVhdGVCYXRjaGVyO1xuZXhwb3J0cy5jcmVhdGVDcm9zc2ZhZGVyID0gY3JlYXRlQ3Jvc3NmYWRlcjtcbmV4cG9ydHMuY3JlYXRlRG9tTW90aW9uQ29tcG9uZW50ID0gY3JlYXRlRG9tTW90aW9uQ29tcG9uZW50O1xuZXhwb3J0cy5jcmVhdGVNb3Rpb25Db21wb25lbnQgPSBjcmVhdGVNb3Rpb25Db21wb25lbnQ7XG5leHBvcnRzLmRvbUFuaW1hdGlvbiA9IGRvbUFuaW1hdGlvbjtcbmV4cG9ydHMuZG9tTWF4ID0gZG9tTWF4O1xuZXhwb3J0cy5mbHVzaExheW91dCA9IGZsdXNoTGF5b3V0O1xuZXhwb3J0cy5pc1ZhbGlkTW90aW9uUHJvcCA9IGlzVmFsaWRNb3Rpb25Qcm9wO1xuZXhwb3J0cy5tID0gbTtcbmV4cG9ydHMubW90aW9uID0gbW90aW9uO1xuZXhwb3J0cy5tb3Rpb25WYWx1ZSA9IG1vdGlvblZhbHVlO1xuZXhwb3J0cy5yZXNvbHZlTW90aW9uVmFsdWUgPSByZXNvbHZlTW90aW9uVmFsdWU7XG5leHBvcnRzLnNuYXBzaG90Vmlld3BvcnRCb3ggPSBzbmFwc2hvdFZpZXdwb3J0Qm94O1xuZXhwb3J0cy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm07XG5leHBvcnRzLnVzZUFuaW1hdGlvbiA9IHVzZUFuaW1hdGlvbjtcbmV4cG9ydHMudXNlQ3ljbGUgPSB1c2VDeWNsZTtcbmV4cG9ydHMudXNlRGVwcmVjYXRlZEFuaW1hdGVkU3RhdGUgPSB1c2VBbmltYXRlZFN0YXRlO1xuZXhwb3J0cy51c2VEZXByZWNhdGVkSW52ZXJ0ZWRTY2FsZSA9IHVzZUludmVydGVkU2NhbGU7XG5leHBvcnRzLnVzZURvbUV2ZW50ID0gdXNlRG9tRXZlbnQ7XG5leHBvcnRzLnVzZURyYWdDb250cm9scyA9IHVzZURyYWdDb250cm9scztcbmV4cG9ydHMudXNlRWxlbWVudFNjcm9sbCA9IHVzZUVsZW1lbnRTY3JvbGw7XG5leHBvcnRzLnVzZUlzUHJlc2VudCA9IHVzZUlzUHJlc2VudDtcbmV4cG9ydHMudXNlTW90aW9uVGVtcGxhdGUgPSB1c2VNb3Rpb25UZW1wbGF0ZTtcbmV4cG9ydHMudXNlTW90aW9uVmFsdWUgPSB1c2VNb3Rpb25WYWx1ZTtcbmV4cG9ydHMudXNlUHJlc2VuY2UgPSB1c2VQcmVzZW5jZTtcbmV4cG9ydHMudXNlUmVkdWNlZE1vdGlvbiA9IHVzZVJlZHVjZWRNb3Rpb247XG5leHBvcnRzLnVzZVNwcmluZyA9IHVzZVNwcmluZztcbmV4cG9ydHMudXNlVHJhbnNmb3JtID0gdXNlVHJhbnNmb3JtO1xuZXhwb3J0cy51c2VWZWxvY2l0eSA9IHVzZVZlbG9jaXR5O1xuZXhwb3J0cy51c2VWaWV3cG9ydFNjcm9sbCA9IHVzZVZpZXdwb3J0U2Nyb2xsO1xuZXhwb3J0cy52aXN1YWxFbGVtZW50ID0gdmlzdWFsRWxlbWVudDtcbiIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxudmFyIGRlZmF1bHRUaW1lc3RlcCA9ICgxIC8gNjApICogMTAwMDtcbnZhciBnZXRDdXJyZW50VGltZSA9IHR5cGVvZiBwZXJmb3JtYW5jZSAhPT0gXCJ1bmRlZmluZWRcIlxuICAgID8gZnVuY3Rpb24gKCkgeyByZXR1cm4gcGVyZm9ybWFuY2Uubm93KCk7IH1cbiAgICA6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIERhdGUubm93KCk7IH07XG52YXIgb25OZXh0RnJhbWUgPSB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiXG4gICAgPyBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgICAgcmV0dXJuIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoY2FsbGJhY2spO1xuICAgIH1cbiAgICA6IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7IHJldHVybiBjYWxsYmFjayhnZXRDdXJyZW50VGltZSgpKTsgfSwgZGVmYXVsdFRpbWVzdGVwKTtcbiAgICB9O1xuXG5mdW5jdGlvbiBjcmVhdGVSZW5kZXJTdGVwKHJ1bk5leHRGcmFtZSkge1xuICAgIHZhciB0b1J1biA9IFtdO1xuICAgIHZhciB0b1J1bk5leHRGcmFtZSA9IFtdO1xuICAgIHZhciBudW1Ub1J1biA9IDA7XG4gICAgdmFyIGlzUHJvY2Vzc2luZyA9IGZhbHNlO1xuICAgIHZhciB0b0tlZXBBbGl2ZSA9IG5ldyBXZWFrU2V0KCk7XG4gICAgdmFyIHN0ZXAgPSB7XG4gICAgICAgIHNjaGVkdWxlOiBmdW5jdGlvbiAoY2FsbGJhY2ssIGtlZXBBbGl2ZSwgaW1tZWRpYXRlKSB7XG4gICAgICAgICAgICBpZiAoa2VlcEFsaXZlID09PSB2b2lkIDApIHsga2VlcEFsaXZlID0gZmFsc2U7IH1cbiAgICAgICAgICAgIGlmIChpbW1lZGlhdGUgPT09IHZvaWQgMCkgeyBpbW1lZGlhdGUgPSBmYWxzZTsgfVxuICAgICAgICAgICAgdmFyIGFkZFRvQ3VycmVudEZyYW1lID0gaW1tZWRpYXRlICYmIGlzUHJvY2Vzc2luZztcbiAgICAgICAgICAgIHZhciBidWZmZXIgPSBhZGRUb0N1cnJlbnRGcmFtZSA/IHRvUnVuIDogdG9SdW5OZXh0RnJhbWU7XG4gICAgICAgICAgICBpZiAoa2VlcEFsaXZlKVxuICAgICAgICAgICAgICAgIHRvS2VlcEFsaXZlLmFkZChjYWxsYmFjayk7XG4gICAgICAgICAgICBpZiAoYnVmZmVyLmluZGV4T2YoY2FsbGJhY2spID09PSAtMSkge1xuICAgICAgICAgICAgICAgIGJ1ZmZlci5wdXNoKGNhbGxiYWNrKTtcbiAgICAgICAgICAgICAgICBpZiAoYWRkVG9DdXJyZW50RnJhbWUgJiYgaXNQcm9jZXNzaW5nKVxuICAgICAgICAgICAgICAgICAgICBudW1Ub1J1biA9IHRvUnVuLmxlbmd0aDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBjYWxsYmFjaztcbiAgICAgICAgfSxcbiAgICAgICAgY2FuY2VsOiBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgIHZhciBpbmRleCA9IHRvUnVuTmV4dEZyYW1lLmluZGV4T2YoY2FsbGJhY2spO1xuICAgICAgICAgICAgaWYgKGluZGV4ICE9PSAtMSlcbiAgICAgICAgICAgICAgICB0b1J1bk5leHRGcmFtZS5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICAgICAgdG9LZWVwQWxpdmUuZGVsZXRlKGNhbGxiYWNrKTtcbiAgICAgICAgfSxcbiAgICAgICAgcHJvY2VzczogZnVuY3Rpb24gKGZyYW1lRGF0YSkge1xuICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgaXNQcm9jZXNzaW5nID0gdHJ1ZTtcbiAgICAgICAgICAgIF9hID0gW3RvUnVuTmV4dEZyYW1lLCB0b1J1bl0sIHRvUnVuID0gX2FbMF0sIHRvUnVuTmV4dEZyYW1lID0gX2FbMV07XG4gICAgICAgICAgICB0b1J1bk5leHRGcmFtZS5sZW5ndGggPSAwO1xuICAgICAgICAgICAgbnVtVG9SdW4gPSB0b1J1bi5sZW5ndGg7XG4gICAgICAgICAgICBpZiAobnVtVG9SdW4pIHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG51bVRvUnVuOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNhbGxiYWNrID0gdG9SdW5baV07XG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKGZyYW1lRGF0YSk7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0b0tlZXBBbGl2ZS5oYXMoY2FsbGJhY2spKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdGVwLnNjaGVkdWxlKGNhbGxiYWNrKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJ1bk5leHRGcmFtZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaXNQcm9jZXNzaW5nID0gZmFsc2U7XG4gICAgICAgIH0sXG4gICAgfTtcbiAgICByZXR1cm4gc3RlcDtcbn1cblxudmFyIG1heEVsYXBzZWQgPSA0MDtcbnZhciB1c2VEZWZhdWx0RWxhcHNlZCA9IHRydWU7XG52YXIgcnVuTmV4dEZyYW1lID0gZmFsc2U7XG52YXIgaXNQcm9jZXNzaW5nID0gZmFsc2U7XG52YXIgZnJhbWUgPSB7XG4gICAgZGVsdGE6IDAsXG4gICAgdGltZXN0YW1wOiAwLFxufTtcbnZhciBzdGVwc09yZGVyID0gW1xuICAgIFwicmVhZFwiLFxuICAgIFwidXBkYXRlXCIsXG4gICAgXCJwcmVSZW5kZXJcIixcbiAgICBcInJlbmRlclwiLFxuICAgIFwicG9zdFJlbmRlclwiLFxuXTtcbnZhciBzdGVwcyA9IHN0ZXBzT3JkZXIucmVkdWNlKGZ1bmN0aW9uIChhY2MsIGtleSkge1xuICAgIGFjY1trZXldID0gY3JlYXRlUmVuZGVyU3RlcChmdW5jdGlvbiAoKSB7IHJldHVybiAocnVuTmV4dEZyYW1lID0gdHJ1ZSk7IH0pO1xuICAgIHJldHVybiBhY2M7XG59LCB7fSk7XG52YXIgc3luYyA9IHN0ZXBzT3JkZXIucmVkdWNlKGZ1bmN0aW9uIChhY2MsIGtleSkge1xuICAgIHZhciBzdGVwID0gc3RlcHNba2V5XTtcbiAgICBhY2Nba2V5XSA9IGZ1bmN0aW9uIChwcm9jZXNzLCBrZWVwQWxpdmUsIGltbWVkaWF0ZSkge1xuICAgICAgICBpZiAoa2VlcEFsaXZlID09PSB2b2lkIDApIHsga2VlcEFsaXZlID0gZmFsc2U7IH1cbiAgICAgICAgaWYgKGltbWVkaWF0ZSA9PT0gdm9pZCAwKSB7IGltbWVkaWF0ZSA9IGZhbHNlOyB9XG4gICAgICAgIGlmICghcnVuTmV4dEZyYW1lKVxuICAgICAgICAgICAgc3RhcnRMb29wKCk7XG4gICAgICAgIHJldHVybiBzdGVwLnNjaGVkdWxlKHByb2Nlc3MsIGtlZXBBbGl2ZSwgaW1tZWRpYXRlKTtcbiAgICB9O1xuICAgIHJldHVybiBhY2M7XG59LCB7fSk7XG52YXIgY2FuY2VsU3luYyA9IHN0ZXBzT3JkZXIucmVkdWNlKGZ1bmN0aW9uIChhY2MsIGtleSkge1xuICAgIGFjY1trZXldID0gc3RlcHNba2V5XS5jYW5jZWw7XG4gICAgcmV0dXJuIGFjYztcbn0sIHt9KTtcbnZhciBmbHVzaFN5bmMgPSBzdGVwc09yZGVyLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBrZXkpIHtcbiAgICBhY2Nba2V5XSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHN0ZXBzW2tleV0ucHJvY2VzcyhmcmFtZSk7IH07XG4gICAgcmV0dXJuIGFjYztcbn0sIHt9KTtcbnZhciBwcm9jZXNzU3RlcCA9IGZ1bmN0aW9uIChzdGVwSWQpIHsgcmV0dXJuIHN0ZXBzW3N0ZXBJZF0ucHJvY2VzcyhmcmFtZSk7IH07XG52YXIgcHJvY2Vzc0ZyYW1lID0gZnVuY3Rpb24gKHRpbWVzdGFtcCkge1xuICAgIHJ1bk5leHRGcmFtZSA9IGZhbHNlO1xuICAgIGZyYW1lLmRlbHRhID0gdXNlRGVmYXVsdEVsYXBzZWRcbiAgICAgICAgPyBkZWZhdWx0VGltZXN0ZXBcbiAgICAgICAgOiBNYXRoLm1heChNYXRoLm1pbih0aW1lc3RhbXAgLSBmcmFtZS50aW1lc3RhbXAsIG1heEVsYXBzZWQpLCAxKTtcbiAgICBmcmFtZS50aW1lc3RhbXAgPSB0aW1lc3RhbXA7XG4gICAgaXNQcm9jZXNzaW5nID0gdHJ1ZTtcbiAgICBzdGVwc09yZGVyLmZvckVhY2gocHJvY2Vzc1N0ZXApO1xuICAgIGlzUHJvY2Vzc2luZyA9IGZhbHNlO1xuICAgIGlmIChydW5OZXh0RnJhbWUpIHtcbiAgICAgICAgdXNlRGVmYXVsdEVsYXBzZWQgPSBmYWxzZTtcbiAgICAgICAgb25OZXh0RnJhbWUocHJvY2Vzc0ZyYW1lKTtcbiAgICB9XG59O1xudmFyIHN0YXJ0TG9vcCA9IGZ1bmN0aW9uICgpIHtcbiAgICBydW5OZXh0RnJhbWUgPSB0cnVlO1xuICAgIHVzZURlZmF1bHRFbGFwc2VkID0gdHJ1ZTtcbiAgICBpZiAoIWlzUHJvY2Vzc2luZylcbiAgICAgICAgb25OZXh0RnJhbWUocHJvY2Vzc0ZyYW1lKTtcbn07XG52YXIgZ2V0RnJhbWVEYXRhID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gZnJhbWU7IH07XG5cbmV4cG9ydHMuY2FuY2VsU3luYyA9IGNhbmNlbFN5bmM7XG5leHBvcnRzLmRlZmF1bHQgPSBzeW5jO1xuZXhwb3J0cy5mbHVzaFN5bmMgPSBmbHVzaFN5bmM7XG5leHBvcnRzLmdldEZyYW1lRGF0YSA9IGdldEZyYW1lRGF0YTtcbiIsInZhciB3YXJuaW5nID0gZnVuY3Rpb24gKCkgeyB9O1xyXG52YXIgaW52YXJpYW50ID0gZnVuY3Rpb24gKCkgeyB9O1xyXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xyXG4gICAgd2FybmluZyA9IGZ1bmN0aW9uIChjaGVjaywgbWVzc2FnZSkge1xyXG4gICAgICAgIGlmICghY2hlY2sgJiYgdHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihtZXNzYWdlKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgaW52YXJpYW50ID0gZnVuY3Rpb24gKGNoZWNrLCBtZXNzYWdlKSB7XHJcbiAgICAgICAgaWYgKCFjaGVjaykge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxufVxuXG5leHBvcnQgeyBpbnZhcmlhbnQsIHdhcm5pbmcgfTtcbiIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxudmFyIHRzbGliID0gcmVxdWlyZSgndHNsaWInKTtcbnZhciBoZXlMaXN0ZW4gPSByZXF1aXJlKCdoZXktbGlzdGVuJyk7XG52YXIgc3R5bGVWYWx1ZVR5cGVzID0gcmVxdWlyZSgnc3R5bGUtdmFsdWUtdHlwZXMnKTtcbnZhciBzeW5jID0gcmVxdWlyZSgnZnJhbWVzeW5jJyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wRGVmYXVsdExlZ2FjeSAoZSkgeyByZXR1cm4gZSAmJiB0eXBlb2YgZSA9PT0gJ29iamVjdCcgJiYgJ2RlZmF1bHQnIGluIGUgPyBlIDogeyAnZGVmYXVsdCc6IGUgfTsgfVxuXG52YXIgc3luY19fZGVmYXVsdCA9IC8qI19fUFVSRV9fKi9faW50ZXJvcERlZmF1bHRMZWdhY3koc3luYyk7XG5cbnZhciBjbGFtcCA9IGZ1bmN0aW9uIChtaW4sIG1heCwgdikge1xuICAgIHJldHVybiBNYXRoLm1pbihNYXRoLm1heCh2LCBtaW4pLCBtYXgpO1xufTtcblxudmFyIHNhZmVNaW4gPSAwLjAwMTtcbnZhciBtaW5EdXJhdGlvbiA9IDAuMDE7XG52YXIgbWF4RHVyYXRpb24gPSAxMC4wO1xudmFyIG1pbkRhbXBpbmcgPSAwLjA1O1xudmFyIG1heERhbXBpbmcgPSAxO1xuZnVuY3Rpb24gZmluZFNwcmluZyhfYSkge1xuICAgIHZhciBfYiA9IF9hLmR1cmF0aW9uLCBkdXJhdGlvbiA9IF9iID09PSB2b2lkIDAgPyA4MDAgOiBfYiwgX2MgPSBfYS5ib3VuY2UsIGJvdW5jZSA9IF9jID09PSB2b2lkIDAgPyAwLjI1IDogX2MsIF9kID0gX2EudmVsb2NpdHksIHZlbG9jaXR5ID0gX2QgPT09IHZvaWQgMCA/IDAgOiBfZCwgX2UgPSBfYS5tYXNzLCBtYXNzID0gX2UgPT09IHZvaWQgMCA/IDEgOiBfZTtcbiAgICB2YXIgZW52ZWxvcGU7XG4gICAgdmFyIGRlcml2YXRpdmU7XG4gICAgaGV5TGlzdGVuLndhcm5pbmcoZHVyYXRpb24gPD0gbWF4RHVyYXRpb24gKiAxMDAwLCBcIlNwcmluZyBkdXJhdGlvbiBtdXN0IGJlIDEwIHNlY29uZHMgb3IgbGVzc1wiKTtcbiAgICB2YXIgZGFtcGluZ1JhdGlvID0gMSAtIGJvdW5jZTtcbiAgICBkYW1waW5nUmF0aW8gPSBjbGFtcChtaW5EYW1waW5nLCBtYXhEYW1waW5nLCBkYW1waW5nUmF0aW8pO1xuICAgIGR1cmF0aW9uID0gY2xhbXAobWluRHVyYXRpb24sIG1heER1cmF0aW9uLCBkdXJhdGlvbiAvIDEwMDApO1xuICAgIGlmIChkYW1waW5nUmF0aW8gPCAxKSB7XG4gICAgICAgIGVudmVsb3BlID0gZnVuY3Rpb24gKHVuZGFtcGVkRnJlcSkge1xuICAgICAgICAgICAgdmFyIGV4cG9uZW50aWFsRGVjYXkgPSB1bmRhbXBlZEZyZXEgKiBkYW1waW5nUmF0aW87XG4gICAgICAgICAgICB2YXIgZGVsdGEgPSBleHBvbmVudGlhbERlY2F5ICogZHVyYXRpb247XG4gICAgICAgICAgICB2YXIgYSA9IGV4cG9uZW50aWFsRGVjYXkgLSB2ZWxvY2l0eTtcbiAgICAgICAgICAgIHZhciBiID0gY2FsY0FuZ3VsYXJGcmVxKHVuZGFtcGVkRnJlcSwgZGFtcGluZ1JhdGlvKTtcbiAgICAgICAgICAgIHZhciBjID0gTWF0aC5leHAoLWRlbHRhKTtcbiAgICAgICAgICAgIHJldHVybiBzYWZlTWluIC0gKGEgLyBiKSAqIGM7XG4gICAgICAgIH07XG4gICAgICAgIGRlcml2YXRpdmUgPSBmdW5jdGlvbiAodW5kYW1wZWRGcmVxKSB7XG4gICAgICAgICAgICB2YXIgZXhwb25lbnRpYWxEZWNheSA9IHVuZGFtcGVkRnJlcSAqIGRhbXBpbmdSYXRpbztcbiAgICAgICAgICAgIHZhciBkZWx0YSA9IGV4cG9uZW50aWFsRGVjYXkgKiBkdXJhdGlvbjtcbiAgICAgICAgICAgIHZhciBkID0gZGVsdGEgKiB2ZWxvY2l0eSArIHZlbG9jaXR5O1xuICAgICAgICAgICAgdmFyIGUgPSBNYXRoLnBvdyhkYW1waW5nUmF0aW8sIDIpICogTWF0aC5wb3codW5kYW1wZWRGcmVxLCAyKSAqIGR1cmF0aW9uO1xuICAgICAgICAgICAgdmFyIGYgPSBNYXRoLmV4cCgtZGVsdGEpO1xuICAgICAgICAgICAgdmFyIGcgPSBjYWxjQW5ndWxhckZyZXEoTWF0aC5wb3codW5kYW1wZWRGcmVxLCAyKSwgZGFtcGluZ1JhdGlvKTtcbiAgICAgICAgICAgIHZhciBmYWN0b3IgPSAtZW52ZWxvcGUodW5kYW1wZWRGcmVxKSArIHNhZmVNaW4gPiAwID8gLTEgOiAxO1xuICAgICAgICAgICAgcmV0dXJuIChmYWN0b3IgKiAoKGQgLSBlKSAqIGYpKSAvIGc7XG4gICAgICAgIH07XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBlbnZlbG9wZSA9IGZ1bmN0aW9uICh1bmRhbXBlZEZyZXEpIHtcbiAgICAgICAgICAgIHZhciBhID0gTWF0aC5leHAoLXVuZGFtcGVkRnJlcSAqIGR1cmF0aW9uKTtcbiAgICAgICAgICAgIHZhciBiID0gKHVuZGFtcGVkRnJlcSAtIHZlbG9jaXR5KSAqIGR1cmF0aW9uICsgMTtcbiAgICAgICAgICAgIHJldHVybiAtc2FmZU1pbiArIGEgKiBiO1xuICAgICAgICB9O1xuICAgICAgICBkZXJpdmF0aXZlID0gZnVuY3Rpb24gKHVuZGFtcGVkRnJlcSkge1xuICAgICAgICAgICAgdmFyIGEgPSBNYXRoLmV4cCgtdW5kYW1wZWRGcmVxICogZHVyYXRpb24pO1xuICAgICAgICAgICAgdmFyIGIgPSAodmVsb2NpdHkgLSB1bmRhbXBlZEZyZXEpICogKGR1cmF0aW9uICogZHVyYXRpb24pO1xuICAgICAgICAgICAgcmV0dXJuIGEgKiBiO1xuICAgICAgICB9O1xuICAgIH1cbiAgICB2YXIgaW5pdGlhbEd1ZXNzID0gNSAvIGR1cmF0aW9uO1xuICAgIHZhciB1bmRhbXBlZEZyZXEgPSBhcHByb3hpbWF0ZVJvb3QoZW52ZWxvcGUsIGRlcml2YXRpdmUsIGluaXRpYWxHdWVzcyk7XG4gICAgZHVyYXRpb24gPSBkdXJhdGlvbiAqIDEwMDA7XG4gICAgaWYgKGlzTmFOKHVuZGFtcGVkRnJlcSkpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHN0aWZmbmVzczogMTAwLFxuICAgICAgICAgICAgZGFtcGluZzogMTAsXG4gICAgICAgICAgICBkdXJhdGlvbjogZHVyYXRpb24sXG4gICAgICAgIH07XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB2YXIgc3RpZmZuZXNzID0gTWF0aC5wb3codW5kYW1wZWRGcmVxLCAyKSAqIG1hc3M7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzdGlmZm5lc3M6IHN0aWZmbmVzcyxcbiAgICAgICAgICAgIGRhbXBpbmc6IGRhbXBpbmdSYXRpbyAqIDIgKiBNYXRoLnNxcnQobWFzcyAqIHN0aWZmbmVzcyksXG4gICAgICAgICAgICBkdXJhdGlvbjogZHVyYXRpb24sXG4gICAgICAgIH07XG4gICAgfVxufVxudmFyIHJvb3RJdGVyYXRpb25zID0gMTI7XG5mdW5jdGlvbiBhcHByb3hpbWF0ZVJvb3QoZW52ZWxvcGUsIGRlcml2YXRpdmUsIGluaXRpYWxHdWVzcykge1xuICAgIHZhciByZXN1bHQgPSBpbml0aWFsR3Vlc3M7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCByb290SXRlcmF0aW9uczsgaSsrKSB7XG4gICAgICAgIHJlc3VsdCA9IHJlc3VsdCAtIGVudmVsb3BlKHJlc3VsdCkgLyBkZXJpdmF0aXZlKHJlc3VsdCk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBjYWxjQW5ndWxhckZyZXEodW5kYW1wZWRGcmVxLCBkYW1waW5nUmF0aW8pIHtcbiAgICByZXR1cm4gdW5kYW1wZWRGcmVxICogTWF0aC5zcXJ0KDEgLSBkYW1waW5nUmF0aW8gKiBkYW1waW5nUmF0aW8pO1xufVxuXG52YXIgZHVyYXRpb25LZXlzID0gW1wiZHVyYXRpb25cIiwgXCJib3VuY2VcIl07XG52YXIgcGh5c2ljc0tleXMgPSBbXCJzdGlmZm5lc3NcIiwgXCJkYW1waW5nXCIsIFwibWFzc1wiXTtcbmZ1bmN0aW9uIGlzU3ByaW5nVHlwZShvcHRpb25zLCBrZXlzKSB7XG4gICAgcmV0dXJuIGtleXMuc29tZShmdW5jdGlvbiAoa2V5KSB7IHJldHVybiBvcHRpb25zW2tleV0gIT09IHVuZGVmaW5lZDsgfSk7XG59XG5mdW5jdGlvbiBnZXRTcHJpbmdPcHRpb25zKG9wdGlvbnMpIHtcbiAgICB2YXIgc3ByaW5nT3B0aW9ucyA9IHRzbGliLl9fYXNzaWduKHsgdmVsb2NpdHk6IDAuMCwgc3RpZmZuZXNzOiAxMDAsIGRhbXBpbmc6IDEwLCBtYXNzOiAxLjAsIGlzUmVzb2x2ZWRGcm9tRHVyYXRpb246IGZhbHNlIH0sIG9wdGlvbnMpO1xuICAgIGlmICghaXNTcHJpbmdUeXBlKG9wdGlvbnMsIHBoeXNpY3NLZXlzKSAmJlxuICAgICAgICBpc1NwcmluZ1R5cGUob3B0aW9ucywgZHVyYXRpb25LZXlzKSkge1xuICAgICAgICB2YXIgZGVyaXZlZCA9IGZpbmRTcHJpbmcob3B0aW9ucyk7XG4gICAgICAgIHNwcmluZ09wdGlvbnMgPSB0c2xpYi5fX2Fzc2lnbih0c2xpYi5fX2Fzc2lnbih0c2xpYi5fX2Fzc2lnbih7fSwgc3ByaW5nT3B0aW9ucyksIGRlcml2ZWQpLCB7IHZlbG9jaXR5OiAwLjAsIG1hc3M6IDEuMCB9KTtcbiAgICAgICAgc3ByaW5nT3B0aW9ucy5pc1Jlc29sdmVkRnJvbUR1cmF0aW9uID0gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIHNwcmluZ09wdGlvbnM7XG59XG5mdW5jdGlvbiBzcHJpbmcoX2EpIHtcbiAgICB2YXIgX2IgPSBfYS5mcm9tLCBmcm9tID0gX2IgPT09IHZvaWQgMCA/IDAuMCA6IF9iLCBfYyA9IF9hLnRvLCB0byA9IF9jID09PSB2b2lkIDAgPyAxLjAgOiBfYywgX2QgPSBfYS5yZXN0U3BlZWQsIHJlc3RTcGVlZCA9IF9kID09PSB2b2lkIDAgPyAyIDogX2QsIHJlc3REZWx0YSA9IF9hLnJlc3REZWx0YSwgb3B0aW9ucyA9IHRzbGliLl9fcmVzdChfYSwgW1wiZnJvbVwiLCBcInRvXCIsIFwicmVzdFNwZWVkXCIsIFwicmVzdERlbHRhXCJdKTtcbiAgICB2YXIgc3RhdGUgPSB7IGRvbmU6IGZhbHNlLCB2YWx1ZTogZnJvbSB9O1xuICAgIHZhciBfZSA9IGdldFNwcmluZ09wdGlvbnMob3B0aW9ucyksIHN0aWZmbmVzcyA9IF9lLnN0aWZmbmVzcywgZGFtcGluZyA9IF9lLmRhbXBpbmcsIG1hc3MgPSBfZS5tYXNzLCB2ZWxvY2l0eSA9IF9lLnZlbG9jaXR5LCBkdXJhdGlvbiA9IF9lLmR1cmF0aW9uLCBpc1Jlc29sdmVkRnJvbUR1cmF0aW9uID0gX2UuaXNSZXNvbHZlZEZyb21EdXJhdGlvbjtcbiAgICB2YXIgcmVzb2x2ZVNwcmluZyA9IHplcm87XG4gICAgdmFyIHJlc29sdmVWZWxvY2l0eSA9IHplcm87XG4gICAgZnVuY3Rpb24gY3JlYXRlU3ByaW5nKCkge1xuICAgICAgICB2YXIgaW5pdGlhbFZlbG9jaXR5ID0gdmVsb2NpdHkgPyAtKHZlbG9jaXR5IC8gMTAwMCkgOiAwLjA7XG4gICAgICAgIHZhciBpbml0aWFsRGVsdGEgPSB0byAtIGZyb207XG4gICAgICAgIHZhciBkYW1waW5nUmF0aW8gPSBkYW1waW5nIC8gKDIgKiBNYXRoLnNxcnQoc3RpZmZuZXNzICogbWFzcykpO1xuICAgICAgICB2YXIgdW5kYW1wZWRBbmd1bGFyRnJlcSA9IE1hdGguc3FydChzdGlmZm5lc3MgLyBtYXNzKSAvIDEwMDA7XG4gICAgICAgIHJlc3REZWx0YSAhPT0gbnVsbCAmJiByZXN0RGVsdGEgIT09IHZvaWQgMCA/IHJlc3REZWx0YSA6IChyZXN0RGVsdGEgPSBNYXRoLmFicyh0byAtIGZyb20pIDw9IDEgPyAwLjAxIDogMC40KTtcbiAgICAgICAgaWYgKGRhbXBpbmdSYXRpbyA8IDEpIHtcbiAgICAgICAgICAgIHZhciBhbmd1bGFyRnJlcV8xID0gY2FsY0FuZ3VsYXJGcmVxKHVuZGFtcGVkQW5ndWxhckZyZXEsIGRhbXBpbmdSYXRpbyk7XG4gICAgICAgICAgICByZXNvbHZlU3ByaW5nID0gZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICB2YXIgZW52ZWxvcGUgPSBNYXRoLmV4cCgtZGFtcGluZ1JhdGlvICogdW5kYW1wZWRBbmd1bGFyRnJlcSAqIHQpO1xuICAgICAgICAgICAgICAgIHJldHVybiAodG8gLVxuICAgICAgICAgICAgICAgICAgICBlbnZlbG9wZSAqXG4gICAgICAgICAgICAgICAgICAgICAgICAoKChpbml0aWFsVmVsb2NpdHkgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhbXBpbmdSYXRpbyAqIHVuZGFtcGVkQW5ndWxhckZyZXEgKiBpbml0aWFsRGVsdGEpIC9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmd1bGFyRnJlcV8xKSAqXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgTWF0aC5zaW4oYW5ndWxhckZyZXFfMSAqIHQpICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbml0aWFsRGVsdGEgKiBNYXRoLmNvcyhhbmd1bGFyRnJlcV8xICogdCkpKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXNvbHZlVmVsb2NpdHkgPSBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgIHZhciBlbnZlbG9wZSA9IE1hdGguZXhwKC1kYW1waW5nUmF0aW8gKiB1bmRhbXBlZEFuZ3VsYXJGcmVxICogdCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChkYW1waW5nUmF0aW8gKlxuICAgICAgICAgICAgICAgICAgICB1bmRhbXBlZEFuZ3VsYXJGcmVxICpcbiAgICAgICAgICAgICAgICAgICAgZW52ZWxvcGUgKlxuICAgICAgICAgICAgICAgICAgICAoKE1hdGguc2luKGFuZ3VsYXJGcmVxXzEgKiB0KSAqXG4gICAgICAgICAgICAgICAgICAgICAgICAoaW5pdGlhbFZlbG9jaXR5ICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYW1waW5nUmF0aW8gKlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bmRhbXBlZEFuZ3VsYXJGcmVxICpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5pdGlhbERlbHRhKSkgL1xuICAgICAgICAgICAgICAgICAgICAgICAgYW5ndWxhckZyZXFfMSArXG4gICAgICAgICAgICAgICAgICAgICAgICBpbml0aWFsRGVsdGEgKiBNYXRoLmNvcyhhbmd1bGFyRnJlcV8xICogdCkpIC1cbiAgICAgICAgICAgICAgICAgICAgZW52ZWxvcGUgKlxuICAgICAgICAgICAgICAgICAgICAgICAgKE1hdGguY29zKGFuZ3VsYXJGcmVxXzEgKiB0KSAqXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKGluaXRpYWxWZWxvY2l0eSArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhbXBpbmdSYXRpbyAqXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bmRhbXBlZEFuZ3VsYXJGcmVxICpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluaXRpYWxEZWx0YSkgLVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuZ3VsYXJGcmVxXzEgKlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbml0aWFsRGVsdGEgKlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBNYXRoLnNpbihhbmd1bGFyRnJlcV8xICogdCkpKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoZGFtcGluZ1JhdGlvID09PSAxKSB7XG4gICAgICAgICAgICByZXNvbHZlU3ByaW5nID0gZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdG8gLVxuICAgICAgICAgICAgICAgICAgICBNYXRoLmV4cCgtdW5kYW1wZWRBbmd1bGFyRnJlcSAqIHQpICpcbiAgICAgICAgICAgICAgICAgICAgICAgIChpbml0aWFsRGVsdGEgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChpbml0aWFsVmVsb2NpdHkgKyB1bmRhbXBlZEFuZ3VsYXJGcmVxICogaW5pdGlhbERlbHRhKSAqXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHZhciBkYW1wZWRBbmd1bGFyRnJlcV8xID0gdW5kYW1wZWRBbmd1bGFyRnJlcSAqIE1hdGguc3FydChkYW1waW5nUmF0aW8gKiBkYW1waW5nUmF0aW8gLSAxKTtcbiAgICAgICAgICAgIHJlc29sdmVTcHJpbmcgPSBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgIHZhciBlbnZlbG9wZSA9IE1hdGguZXhwKC1kYW1waW5nUmF0aW8gKiB1bmRhbXBlZEFuZ3VsYXJGcmVxICogdCk7XG4gICAgICAgICAgICAgICAgdmFyIGZyZXFGb3JUID0gTWF0aC5taW4oZGFtcGVkQW5ndWxhckZyZXFfMSAqIHQsIDMwMCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuICh0byAtXG4gICAgICAgICAgICAgICAgICAgIChlbnZlbG9wZSAqXG4gICAgICAgICAgICAgICAgICAgICAgICAoKGluaXRpYWxWZWxvY2l0eSArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGFtcGluZ1JhdGlvICogdW5kYW1wZWRBbmd1bGFyRnJlcSAqIGluaXRpYWxEZWx0YSkgKlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1hdGguc2luaChmcmVxRm9yVCkgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhbXBlZEFuZ3VsYXJGcmVxXzEgKlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbml0aWFsRGVsdGEgKlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBNYXRoLmNvc2goZnJlcUZvclQpKSkgL1xuICAgICAgICAgICAgICAgICAgICAgICAgZGFtcGVkQW5ndWxhckZyZXFfMSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfVxuICAgIGNyZWF0ZVNwcmluZygpO1xuICAgIHJldHVybiB7XG4gICAgICAgIG5leHQ6IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICB2YXIgY3VycmVudCA9IHJlc29sdmVTcHJpbmcodCk7XG4gICAgICAgICAgICBpZiAoIWlzUmVzb2x2ZWRGcm9tRHVyYXRpb24pIHtcbiAgICAgICAgICAgICAgICB2YXIgY3VycmVudFZlbG9jaXR5ID0gcmVzb2x2ZVZlbG9jaXR5KHQpICogMTAwMDtcbiAgICAgICAgICAgICAgICB2YXIgaXNCZWxvd1ZlbG9jaXR5VGhyZXNob2xkID0gTWF0aC5hYnMoY3VycmVudFZlbG9jaXR5KSA8PSByZXN0U3BlZWQ7XG4gICAgICAgICAgICAgICAgdmFyIGlzQmVsb3dEaXNwbGFjZW1lbnRUaHJlc2hvbGQgPSBNYXRoLmFicyh0byAtIGN1cnJlbnQpIDw9IHJlc3REZWx0YTtcbiAgICAgICAgICAgICAgICBzdGF0ZS5kb25lID1cbiAgICAgICAgICAgICAgICAgICAgaXNCZWxvd1ZlbG9jaXR5VGhyZXNob2xkICYmIGlzQmVsb3dEaXNwbGFjZW1lbnRUaHJlc2hvbGQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBzdGF0ZS5kb25lID0gdCA+PSBkdXJhdGlvbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHN0YXRlLnZhbHVlID0gc3RhdGUuZG9uZSA/IHRvIDogY3VycmVudDtcbiAgICAgICAgICAgIHJldHVybiBzdGF0ZTtcbiAgICAgICAgfSxcbiAgICAgICAgZmxpcFRhcmdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgdmVsb2NpdHkgPSAtdmVsb2NpdHk7XG4gICAgICAgICAgICBfYSA9IFt0bywgZnJvbV0sIGZyb20gPSBfYVswXSwgdG8gPSBfYVsxXTtcbiAgICAgICAgICAgIGNyZWF0ZVNwcmluZygpO1xuICAgICAgICB9LFxuICAgIH07XG59XG5zcHJpbmcubmVlZHNJbnRlcnBvbGF0aW9uID0gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICByZXR1cm4gdHlwZW9mIGEgPT09IFwic3RyaW5nXCIgfHwgdHlwZW9mIGIgPT09IFwic3RyaW5nXCI7XG59O1xudmFyIHplcm8gPSBmdW5jdGlvbiAoX3QpIHsgcmV0dXJuIDA7IH07XG5cbnZhciBwcm9ncmVzcyA9IGZ1bmN0aW9uIChmcm9tLCB0bywgdmFsdWUpIHtcbiAgICB2YXIgdG9Gcm9tRGlmZmVyZW5jZSA9IHRvIC0gZnJvbTtcbiAgICByZXR1cm4gdG9Gcm9tRGlmZmVyZW5jZSA9PT0gMCA/IDEgOiAodmFsdWUgLSBmcm9tKSAvIHRvRnJvbURpZmZlcmVuY2U7XG59O1xuXG52YXIgbWl4ID0gZnVuY3Rpb24gKGZyb20sIHRvLCBwcm9ncmVzcykge1xuICAgIHJldHVybiAtcHJvZ3Jlc3MgKiBmcm9tICsgcHJvZ3Jlc3MgKiB0byArIGZyb207XG59O1xuXG52YXIgbWl4TGluZWFyQ29sb3IgPSBmdW5jdGlvbiAoZnJvbSwgdG8sIHYpIHtcbiAgICB2YXIgZnJvbUV4cG8gPSBmcm9tICogZnJvbTtcbiAgICB2YXIgdG9FeHBvID0gdG8gKiB0bztcbiAgICByZXR1cm4gTWF0aC5zcXJ0KE1hdGgubWF4KDAsIHYgKiAodG9FeHBvIC0gZnJvbUV4cG8pICsgZnJvbUV4cG8pKTtcbn07XG52YXIgY29sb3JUeXBlcyA9IFtzdHlsZVZhbHVlVHlwZXMuaGV4LCBzdHlsZVZhbHVlVHlwZXMucmdiYSwgc3R5bGVWYWx1ZVR5cGVzLmhzbGFdO1xudmFyIGdldENvbG9yVHlwZSA9IGZ1bmN0aW9uICh2KSB7XG4gICAgcmV0dXJuIGNvbG9yVHlwZXMuZmluZChmdW5jdGlvbiAodHlwZSkgeyByZXR1cm4gdHlwZS50ZXN0KHYpOyB9KTtcbn07XG52YXIgbm90QW5pbWF0YWJsZSA9IGZ1bmN0aW9uIChjb2xvcikge1xuICAgIHJldHVybiBcIidcIiArIGNvbG9yICsgXCInIGlzIG5vdCBhbiBhbmltYXRhYmxlIGNvbG9yLiBVc2UgdGhlIGVxdWl2YWxlbnQgY29sb3IgY29kZSBpbnN0ZWFkLlwiO1xufTtcbnZhciBtaXhDb2xvciA9IGZ1bmN0aW9uIChmcm9tLCB0bykge1xuICAgIHZhciBmcm9tQ29sb3JUeXBlID0gZ2V0Q29sb3JUeXBlKGZyb20pO1xuICAgIHZhciB0b0NvbG9yVHlwZSA9IGdldENvbG9yVHlwZSh0byk7XG4gICAgaGV5TGlzdGVuLmludmFyaWFudCghIWZyb21Db2xvclR5cGUsIG5vdEFuaW1hdGFibGUoZnJvbSkpO1xuICAgIGhleUxpc3Rlbi5pbnZhcmlhbnQoISF0b0NvbG9yVHlwZSwgbm90QW5pbWF0YWJsZSh0bykpO1xuICAgIGhleUxpc3Rlbi5pbnZhcmlhbnQoZnJvbUNvbG9yVHlwZS50cmFuc2Zvcm0gPT09IHRvQ29sb3JUeXBlLnRyYW5zZm9ybSwgXCJCb3RoIGNvbG9ycyBtdXN0IGJlIGhleC9SR0JBLCBPUiBib3RoIG11c3QgYmUgSFNMQS5cIik7XG4gICAgdmFyIGZyb21Db2xvciA9IGZyb21Db2xvclR5cGUucGFyc2UoZnJvbSk7XG4gICAgdmFyIHRvQ29sb3IgPSB0b0NvbG9yVHlwZS5wYXJzZSh0byk7XG4gICAgdmFyIGJsZW5kZWQgPSB0c2xpYi5fX2Fzc2lnbih7fSwgZnJvbUNvbG9yKTtcbiAgICB2YXIgbWl4RnVuYyA9IGZyb21Db2xvclR5cGUgPT09IHN0eWxlVmFsdWVUeXBlcy5oc2xhID8gbWl4IDogbWl4TGluZWFyQ29sb3I7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICh2KSB7XG4gICAgICAgIGZvciAodmFyIGtleSBpbiBibGVuZGVkKSB7XG4gICAgICAgICAgICBpZiAoa2V5ICE9PSBcImFscGhhXCIpIHtcbiAgICAgICAgICAgICAgICBibGVuZGVkW2tleV0gPSBtaXhGdW5jKGZyb21Db2xvcltrZXldLCB0b0NvbG9yW2tleV0sIHYpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGJsZW5kZWQuYWxwaGEgPSBtaXgoZnJvbUNvbG9yLmFscGhhLCB0b0NvbG9yLmFscGhhLCB2KTtcbiAgICAgICAgcmV0dXJuIGZyb21Db2xvclR5cGUudHJhbnNmb3JtKGJsZW5kZWQpO1xuICAgIH07XG59O1xuXG52YXIgemVyb1BvaW50ID0ge1xuICAgIHg6IDAsXG4gICAgeTogMCxcbiAgICB6OiAwXG59O1xudmFyIGlzTnVtID0gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHR5cGVvZiB2ID09PSAnbnVtYmVyJzsgfTtcblxudmFyIGNvbWJpbmVGdW5jdGlvbnMgPSBmdW5jdGlvbiAoYSwgYikgeyByZXR1cm4gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIGIoYSh2KSk7IH07IH07XG52YXIgcGlwZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdHJhbnNmb3JtZXJzID0gW107XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgdHJhbnNmb3JtZXJzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgfVxuICAgIHJldHVybiB0cmFuc2Zvcm1lcnMucmVkdWNlKGNvbWJpbmVGdW5jdGlvbnMpO1xufTtcblxuZnVuY3Rpb24gZ2V0TWl4ZXIob3JpZ2luLCB0YXJnZXQpIHtcbiAgICBpZiAoaXNOdW0ob3JpZ2luKSkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIG1peChvcmlnaW4sIHRhcmdldCwgdik7IH07XG4gICAgfVxuICAgIGVsc2UgaWYgKHN0eWxlVmFsdWVUeXBlcy5jb2xvci50ZXN0KG9yaWdpbikpIHtcbiAgICAgICAgcmV0dXJuIG1peENvbG9yKG9yaWdpbiwgdGFyZ2V0KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBtaXhDb21wbGV4KG9yaWdpbiwgdGFyZ2V0KTtcbiAgICB9XG59XG52YXIgbWl4QXJyYXkgPSBmdW5jdGlvbiAoZnJvbSwgdG8pIHtcbiAgICB2YXIgb3V0cHV0ID0gdHNsaWIuX19zcHJlYWRBcnJheShbXSwgZnJvbSk7XG4gICAgdmFyIG51bVZhbHVlcyA9IG91dHB1dC5sZW5ndGg7XG4gICAgdmFyIGJsZW5kVmFsdWUgPSBmcm9tLm1hcChmdW5jdGlvbiAoZnJvbVRoaXMsIGkpIHsgcmV0dXJuIGdldE1peGVyKGZyb21UaGlzLCB0b1tpXSk7IH0pO1xuICAgIHJldHVybiBmdW5jdGlvbiAodikge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG51bVZhbHVlczsgaSsrKSB7XG4gICAgICAgICAgICBvdXRwdXRbaV0gPSBibGVuZFZhbHVlW2ldKHYpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvdXRwdXQ7XG4gICAgfTtcbn07XG52YXIgbWl4T2JqZWN0ID0gZnVuY3Rpb24gKG9yaWdpbiwgdGFyZ2V0KSB7XG4gICAgdmFyIG91dHB1dCA9IHRzbGliLl9fYXNzaWduKHRzbGliLl9fYXNzaWduKHt9LCBvcmlnaW4pLCB0YXJnZXQpO1xuICAgIHZhciBibGVuZFZhbHVlID0ge307XG4gICAgZm9yICh2YXIga2V5IGluIG91dHB1dCkge1xuICAgICAgICBpZiAob3JpZ2luW2tleV0gIT09IHVuZGVmaW5lZCAmJiB0YXJnZXRba2V5XSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBibGVuZFZhbHVlW2tleV0gPSBnZXRNaXhlcihvcmlnaW5ba2V5XSwgdGFyZ2V0W2tleV0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiAodikge1xuICAgICAgICBmb3IgKHZhciBrZXkgaW4gYmxlbmRWYWx1ZSkge1xuICAgICAgICAgICAgb3V0cHV0W2tleV0gPSBibGVuZFZhbHVlW2tleV0odik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG91dHB1dDtcbiAgICB9O1xufTtcbmZ1bmN0aW9uIGFuYWx5c2UodmFsdWUpIHtcbiAgICB2YXIgcGFyc2VkID0gc3R5bGVWYWx1ZVR5cGVzLmNvbXBsZXgucGFyc2UodmFsdWUpO1xuICAgIHZhciBudW1WYWx1ZXMgPSBwYXJzZWQubGVuZ3RoO1xuICAgIHZhciBudW1OdW1iZXJzID0gMDtcbiAgICB2YXIgbnVtUkdCID0gMDtcbiAgICB2YXIgbnVtSFNMID0gMDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG51bVZhbHVlczsgaSsrKSB7XG4gICAgICAgIGlmIChudW1OdW1iZXJzIHx8IHR5cGVvZiBwYXJzZWRbaV0gPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgICAgIG51bU51bWJlcnMrKztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmIChwYXJzZWRbaV0uaHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBudW1IU0wrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIG51bVJHQisrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB7IHBhcnNlZDogcGFyc2VkLCBudW1OdW1iZXJzOiBudW1OdW1iZXJzLCBudW1SR0I6IG51bVJHQiwgbnVtSFNMOiBudW1IU0wgfTtcbn1cbnZhciBtaXhDb21wbGV4ID0gZnVuY3Rpb24gKG9yaWdpbiwgdGFyZ2V0KSB7XG4gICAgdmFyIHRlbXBsYXRlID0gc3R5bGVWYWx1ZVR5cGVzLmNvbXBsZXguY3JlYXRlVHJhbnNmb3JtZXIodGFyZ2V0KTtcbiAgICB2YXIgb3JpZ2luU3RhdHMgPSBhbmFseXNlKG9yaWdpbik7XG4gICAgdmFyIHRhcmdldFN0YXRzID0gYW5hbHlzZSh0YXJnZXQpO1xuICAgIGhleUxpc3Rlbi5pbnZhcmlhbnQob3JpZ2luU3RhdHMubnVtSFNMID09PSB0YXJnZXRTdGF0cy5udW1IU0wgJiZcbiAgICAgICAgb3JpZ2luU3RhdHMubnVtUkdCID09PSB0YXJnZXRTdGF0cy5udW1SR0IgJiZcbiAgICAgICAgb3JpZ2luU3RhdHMubnVtTnVtYmVycyA+PSB0YXJnZXRTdGF0cy5udW1OdW1iZXJzLCBcIkNvbXBsZXggdmFsdWVzICdcIiArIG9yaWdpbiArIFwiJyBhbmQgJ1wiICsgdGFyZ2V0ICsgXCInIHRvbyBkaWZmZXJlbnQgdG8gbWl4LiBFbnN1cmUgYWxsIGNvbG9ycyBhcmUgb2YgdGhlIHNhbWUgdHlwZS5cIik7XG4gICAgcmV0dXJuIHBpcGUobWl4QXJyYXkob3JpZ2luU3RhdHMucGFyc2VkLCB0YXJnZXRTdGF0cy5wYXJzZWQpLCB0ZW1wbGF0ZSk7XG59O1xuXG52YXIgbWl4TnVtYmVyID0gZnVuY3Rpb24gKGZyb20sIHRvKSB7IHJldHVybiBmdW5jdGlvbiAocCkgeyByZXR1cm4gbWl4KGZyb20sIHRvLCBwKTsgfTsgfTtcbmZ1bmN0aW9uIGRldGVjdE1peGVyRmFjdG9yeSh2KSB7XG4gICAgaWYgKHR5cGVvZiB2ID09PSAnbnVtYmVyJykge1xuICAgICAgICByZXR1cm4gbWl4TnVtYmVyO1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlb2YgdiA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgaWYgKHN0eWxlVmFsdWVUeXBlcy5jb2xvci50ZXN0KHYpKSB7XG4gICAgICAgICAgICByZXR1cm4gbWl4Q29sb3I7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gbWl4Q29tcGxleDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmIChBcnJheS5pc0FycmF5KHYpKSB7XG4gICAgICAgIHJldHVybiBtaXhBcnJheTtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIHYgPT09ICdvYmplY3QnKSB7XG4gICAgICAgIHJldHVybiBtaXhPYmplY3Q7XG4gICAgfVxufVxuZnVuY3Rpb24gY3JlYXRlTWl4ZXJzKG91dHB1dCwgZWFzZSwgY3VzdG9tTWl4ZXIpIHtcbiAgICB2YXIgbWl4ZXJzID0gW107XG4gICAgdmFyIG1peGVyRmFjdG9yeSA9IGN1c3RvbU1peGVyIHx8IGRldGVjdE1peGVyRmFjdG9yeShvdXRwdXRbMF0pO1xuICAgIHZhciBudW1NaXhlcnMgPSBvdXRwdXQubGVuZ3RoIC0gMTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG51bU1peGVyczsgaSsrKSB7XG4gICAgICAgIHZhciBtaXhlciA9IG1peGVyRmFjdG9yeShvdXRwdXRbaV0sIG91dHB1dFtpICsgMV0pO1xuICAgICAgICBpZiAoZWFzZSkge1xuICAgICAgICAgICAgdmFyIGVhc2luZ0Z1bmN0aW9uID0gQXJyYXkuaXNBcnJheShlYXNlKSA/IGVhc2VbaV0gOiBlYXNlO1xuICAgICAgICAgICAgbWl4ZXIgPSBwaXBlKGVhc2luZ0Z1bmN0aW9uLCBtaXhlcik7XG4gICAgICAgIH1cbiAgICAgICAgbWl4ZXJzLnB1c2gobWl4ZXIpO1xuICAgIH1cbiAgICByZXR1cm4gbWl4ZXJzO1xufVxuZnVuY3Rpb24gZmFzdEludGVycG9sYXRlKF9hLCBfYikge1xuICAgIHZhciBmcm9tID0gX2FbMF0sIHRvID0gX2FbMV07XG4gICAgdmFyIG1peGVyID0gX2JbMF07XG4gICAgcmV0dXJuIGZ1bmN0aW9uICh2KSB7IHJldHVybiBtaXhlcihwcm9ncmVzcyhmcm9tLCB0bywgdikpOyB9O1xufVxuZnVuY3Rpb24gc2xvd0ludGVycG9sYXRlKGlucHV0LCBtaXhlcnMpIHtcbiAgICB2YXIgaW5wdXRMZW5ndGggPSBpbnB1dC5sZW5ndGg7XG4gICAgdmFyIGxhc3RJbnB1dEluZGV4ID0gaW5wdXRMZW5ndGggLSAxO1xuICAgIHJldHVybiBmdW5jdGlvbiAodikge1xuICAgICAgICB2YXIgbWl4ZXJJbmRleCA9IDA7XG4gICAgICAgIHZhciBmb3VuZE1peGVySW5kZXggPSBmYWxzZTtcbiAgICAgICAgaWYgKHYgPD0gaW5wdXRbMF0pIHtcbiAgICAgICAgICAgIGZvdW5kTWl4ZXJJbmRleCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodiA+PSBpbnB1dFtsYXN0SW5wdXRJbmRleF0pIHtcbiAgICAgICAgICAgIG1peGVySW5kZXggPSBsYXN0SW5wdXRJbmRleCAtIDE7XG4gICAgICAgICAgICBmb3VuZE1peGVySW5kZXggPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmICghZm91bmRNaXhlckluZGV4KSB7XG4gICAgICAgICAgICB2YXIgaSA9IDE7XG4gICAgICAgICAgICBmb3IgKDsgaSA8IGlucHV0TGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBpZiAoaW5wdXRbaV0gPiB2IHx8IGkgPT09IGxhc3RJbnB1dEluZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG1peGVySW5kZXggPSBpIC0gMTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgcHJvZ3Jlc3NJblJhbmdlID0gcHJvZ3Jlc3MoaW5wdXRbbWl4ZXJJbmRleF0sIGlucHV0W21peGVySW5kZXggKyAxXSwgdik7XG4gICAgICAgIHJldHVybiBtaXhlcnNbbWl4ZXJJbmRleF0ocHJvZ3Jlc3NJblJhbmdlKTtcbiAgICB9O1xufVxuZnVuY3Rpb24gaW50ZXJwb2xhdGUoaW5wdXQsIG91dHB1dCwgX2EpIHtcbiAgICB2YXIgX2IgPSBfYSA9PT0gdm9pZCAwID8ge30gOiBfYSwgX2MgPSBfYi5jbGFtcCwgaXNDbGFtcCA9IF9jID09PSB2b2lkIDAgPyB0cnVlIDogX2MsIGVhc2UgPSBfYi5lYXNlLCBtaXhlciA9IF9iLm1peGVyO1xuICAgIHZhciBpbnB1dExlbmd0aCA9IGlucHV0Lmxlbmd0aDtcbiAgICBoZXlMaXN0ZW4uaW52YXJpYW50KGlucHV0TGVuZ3RoID09PSBvdXRwdXQubGVuZ3RoLCAnQm90aCBpbnB1dCBhbmQgb3V0cHV0IHJhbmdlcyBtdXN0IGJlIHRoZSBzYW1lIGxlbmd0aCcpO1xuICAgIGhleUxpc3Rlbi5pbnZhcmlhbnQoIWVhc2UgfHwgIUFycmF5LmlzQXJyYXkoZWFzZSkgfHwgZWFzZS5sZW5ndGggPT09IGlucHV0TGVuZ3RoIC0gMSwgJ0FycmF5IG9mIGVhc2luZyBmdW5jdGlvbnMgbXVzdCBiZSBvZiBsZW5ndGggYGlucHV0Lmxlbmd0aCAtIDFgLCBhcyBpdCBhcHBsaWVzIHRvIHRoZSB0cmFuc2l0aW9ucyAqKmJldHdlZW4qKiB0aGUgZGVmaW5lZCB2YWx1ZXMuJyk7XG4gICAgaWYgKGlucHV0WzBdID4gaW5wdXRbaW5wdXRMZW5ndGggLSAxXSkge1xuICAgICAgICBpbnB1dCA9IFtdLmNvbmNhdChpbnB1dCk7XG4gICAgICAgIG91dHB1dCA9IFtdLmNvbmNhdChvdXRwdXQpO1xuICAgICAgICBpbnB1dC5yZXZlcnNlKCk7XG4gICAgICAgIG91dHB1dC5yZXZlcnNlKCk7XG4gICAgfVxuICAgIHZhciBtaXhlcnMgPSBjcmVhdGVNaXhlcnMob3V0cHV0LCBlYXNlLCBtaXhlcik7XG4gICAgdmFyIGludGVycG9sYXRvciA9IGlucHV0TGVuZ3RoID09PSAyXG4gICAgICAgID8gZmFzdEludGVycG9sYXRlKGlucHV0LCBtaXhlcnMpXG4gICAgICAgIDogc2xvd0ludGVycG9sYXRlKGlucHV0LCBtaXhlcnMpO1xuICAgIHJldHVybiBpc0NsYW1wXG4gICAgICAgID8gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIGludGVycG9sYXRvcihjbGFtcChpbnB1dFswXSwgaW5wdXRbaW5wdXRMZW5ndGggLSAxXSwgdikpOyB9XG4gICAgICAgIDogaW50ZXJwb2xhdG9yO1xufVxuXG52YXIgcmV2ZXJzZUVhc2luZyA9IGZ1bmN0aW9uIChlYXNpbmcpIHsgcmV0dXJuIGZ1bmN0aW9uIChwKSB7IHJldHVybiAxIC0gZWFzaW5nKDEgLSBwKTsgfTsgfTtcbnZhciBtaXJyb3JFYXNpbmcgPSBmdW5jdGlvbiAoZWFzaW5nKSB7IHJldHVybiBmdW5jdGlvbiAocCkge1xuICAgIHJldHVybiBwIDw9IDAuNSA/IGVhc2luZygyICogcCkgLyAyIDogKDIgLSBlYXNpbmcoMiAqICgxIC0gcCkpKSAvIDI7XG59OyB9O1xudmFyIGNyZWF0ZUV4cG9JbiA9IGZ1bmN0aW9uIChwb3dlcikgeyByZXR1cm4gZnVuY3Rpb24gKHApIHsgcmV0dXJuIE1hdGgucG93KHAsIHBvd2VyKTsgfTsgfTtcbnZhciBjcmVhdGVCYWNrSW4gPSBmdW5jdGlvbiAocG93ZXIpIHsgcmV0dXJuIGZ1bmN0aW9uIChwKSB7XG4gICAgcmV0dXJuIHAgKiBwICogKChwb3dlciArIDEpICogcCAtIHBvd2VyKTtcbn07IH07XG52YXIgY3JlYXRlQW50aWNpcGF0ZSA9IGZ1bmN0aW9uIChwb3dlcikge1xuICAgIHZhciBiYWNrRWFzaW5nID0gY3JlYXRlQmFja0luKHBvd2VyKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHApIHtcbiAgICAgICAgcmV0dXJuIChwICo9IDIpIDwgMVxuICAgICAgICAgICAgPyAwLjUgKiBiYWNrRWFzaW5nKHApXG4gICAgICAgICAgICA6IDAuNSAqICgyIC0gTWF0aC5wb3coMiwgLTEwICogKHAgLSAxKSkpO1xuICAgIH07XG59O1xuXG52YXIgREVGQVVMVF9PVkVSU0hPT1RfU1RSRU5HVEggPSAxLjUyNTtcbnZhciBCT1VOQ0VfRklSU1RfVEhSRVNIT0xEID0gNC4wIC8gMTEuMDtcbnZhciBCT1VOQ0VfU0VDT05EX1RIUkVTSE9MRCA9IDguMCAvIDExLjA7XG52YXIgQk9VTkNFX1RISVJEX1RIUkVTSE9MRCA9IDkuMCAvIDEwLjA7XG52YXIgbGluZWFyID0gZnVuY3Rpb24gKHApIHsgcmV0dXJuIHA7IH07XG52YXIgZWFzZUluID0gY3JlYXRlRXhwb0luKDIpO1xudmFyIGVhc2VPdXQgPSByZXZlcnNlRWFzaW5nKGVhc2VJbik7XG52YXIgZWFzZUluT3V0ID0gbWlycm9yRWFzaW5nKGVhc2VJbik7XG52YXIgY2lyY0luID0gZnVuY3Rpb24gKHApIHsgcmV0dXJuIDEgLSBNYXRoLnNpbihNYXRoLmFjb3MocCkpOyB9O1xudmFyIGNpcmNPdXQgPSByZXZlcnNlRWFzaW5nKGNpcmNJbik7XG52YXIgY2lyY0luT3V0ID0gbWlycm9yRWFzaW5nKGNpcmNPdXQpO1xudmFyIGJhY2tJbiA9IGNyZWF0ZUJhY2tJbihERUZBVUxUX09WRVJTSE9PVF9TVFJFTkdUSCk7XG52YXIgYmFja091dCA9IHJldmVyc2VFYXNpbmcoYmFja0luKTtcbnZhciBiYWNrSW5PdXQgPSBtaXJyb3JFYXNpbmcoYmFja0luKTtcbnZhciBhbnRpY2lwYXRlID0gY3JlYXRlQW50aWNpcGF0ZShERUZBVUxUX09WRVJTSE9PVF9TVFJFTkdUSCk7XG52YXIgY2EgPSA0MzU2LjAgLyAzNjEuMDtcbnZhciBjYiA9IDM1NDQyLjAgLyAxODA1LjA7XG52YXIgY2MgPSAxNjA2MS4wIC8gMTgwNS4wO1xudmFyIGJvdW5jZU91dCA9IGZ1bmN0aW9uIChwKSB7XG4gICAgaWYgKHAgPT09IDEgfHwgcCA9PT0gMClcbiAgICAgICAgcmV0dXJuIHA7XG4gICAgdmFyIHAyID0gcCAqIHA7XG4gICAgcmV0dXJuIHAgPCBCT1VOQ0VfRklSU1RfVEhSRVNIT0xEXG4gICAgICAgID8gNy41NjI1ICogcDJcbiAgICAgICAgOiBwIDwgQk9VTkNFX1NFQ09ORF9USFJFU0hPTERcbiAgICAgICAgICAgID8gOS4wNzUgKiBwMiAtIDkuOSAqIHAgKyAzLjRcbiAgICAgICAgICAgIDogcCA8IEJPVU5DRV9USElSRF9USFJFU0hPTERcbiAgICAgICAgICAgICAgICA/IGNhICogcDIgLSBjYiAqIHAgKyBjY1xuICAgICAgICAgICAgICAgIDogMTAuOCAqIHAgKiBwIC0gMjAuNTIgKiBwICsgMTAuNzI7XG59O1xudmFyIGJvdW5jZUluID0gcmV2ZXJzZUVhc2luZyhib3VuY2VPdXQpO1xudmFyIGJvdW5jZUluT3V0ID0gZnVuY3Rpb24gKHApIHtcbiAgICByZXR1cm4gcCA8IDAuNVxuICAgICAgICA/IDAuNSAqICgxLjAgLSBib3VuY2VPdXQoMS4wIC0gcCAqIDIuMCkpXG4gICAgICAgIDogMC41ICogYm91bmNlT3V0KHAgKiAyLjAgLSAxLjApICsgMC41O1xufTtcblxuZnVuY3Rpb24gZGVmYXVsdEVhc2luZyh2YWx1ZXMsIGVhc2luZykge1xuICAgIHJldHVybiB2YWx1ZXMubWFwKGZ1bmN0aW9uICgpIHsgcmV0dXJuIGVhc2luZyB8fCBlYXNlSW5PdXQ7IH0pLnNwbGljZSgwLCB2YWx1ZXMubGVuZ3RoIC0gMSk7XG59XG5mdW5jdGlvbiBkZWZhdWx0T2Zmc2V0KHZhbHVlcykge1xuICAgIHZhciBudW1WYWx1ZXMgPSB2YWx1ZXMubGVuZ3RoO1xuICAgIHJldHVybiB2YWx1ZXMubWFwKGZ1bmN0aW9uIChfdmFsdWUsIGkpIHtcbiAgICAgICAgcmV0dXJuIGkgIT09IDAgPyBpIC8gKG51bVZhbHVlcyAtIDEpIDogMDtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIGNvbnZlcnRPZmZzZXRUb1RpbWVzKG9mZnNldCwgZHVyYXRpb24pIHtcbiAgICByZXR1cm4gb2Zmc2V0Lm1hcChmdW5jdGlvbiAobykgeyByZXR1cm4gbyAqIGR1cmF0aW9uOyB9KTtcbn1cbmZ1bmN0aW9uIGtleWZyYW1lcyhfYSkge1xuICAgIHZhciBfYiA9IF9hLmZyb20sIGZyb20gPSBfYiA9PT0gdm9pZCAwID8gMCA6IF9iLCBfYyA9IF9hLnRvLCB0byA9IF9jID09PSB2b2lkIDAgPyAxIDogX2MsIGVhc2UgPSBfYS5lYXNlLCBvZmZzZXQgPSBfYS5vZmZzZXQsIF9kID0gX2EuZHVyYXRpb24sIGR1cmF0aW9uID0gX2QgPT09IHZvaWQgMCA/IDMwMCA6IF9kO1xuICAgIHZhciBzdGF0ZSA9IHsgZG9uZTogZmFsc2UsIHZhbHVlOiBmcm9tIH07XG4gICAgdmFyIHZhbHVlcyA9IEFycmF5LmlzQXJyYXkodG8pID8gdG8gOiBbZnJvbSwgdG9dO1xuICAgIHZhciB0aW1lcyA9IGNvbnZlcnRPZmZzZXRUb1RpbWVzKG9mZnNldCAmJiBvZmZzZXQubGVuZ3RoID09PSB2YWx1ZXMubGVuZ3RoXG4gICAgICAgID8gb2Zmc2V0XG4gICAgICAgIDogZGVmYXVsdE9mZnNldCh2YWx1ZXMpLCBkdXJhdGlvbik7XG4gICAgZnVuY3Rpb24gY3JlYXRlSW50ZXJwb2xhdG9yKCkge1xuICAgICAgICByZXR1cm4gaW50ZXJwb2xhdGUodGltZXMsIHZhbHVlcywge1xuICAgICAgICAgICAgZWFzZTogQXJyYXkuaXNBcnJheShlYXNlKSA/IGVhc2UgOiBkZWZhdWx0RWFzaW5nKHZhbHVlcywgZWFzZSksXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICB2YXIgaW50ZXJwb2xhdG9yID0gY3JlYXRlSW50ZXJwb2xhdG9yKCk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgbmV4dDogZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgIHN0YXRlLnZhbHVlID0gaW50ZXJwb2xhdG9yKHQpO1xuICAgICAgICAgICAgc3RhdGUuZG9uZSA9IHQgPj0gZHVyYXRpb247XG4gICAgICAgICAgICByZXR1cm4gc3RhdGU7XG4gICAgICAgIH0sXG4gICAgICAgIGZsaXBUYXJnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhbHVlcy5yZXZlcnNlKCk7XG4gICAgICAgICAgICBpbnRlcnBvbGF0b3IgPSBjcmVhdGVJbnRlcnBvbGF0b3IoKTtcbiAgICAgICAgfSxcbiAgICB9O1xufVxuXG5mdW5jdGlvbiBkZWNheShfYSkge1xuICAgIHZhciBfYiA9IF9hLnZlbG9jaXR5LCB2ZWxvY2l0eSA9IF9iID09PSB2b2lkIDAgPyAwIDogX2IsIF9jID0gX2EuZnJvbSwgZnJvbSA9IF9jID09PSB2b2lkIDAgPyAwIDogX2MsIF9kID0gX2EucG93ZXIsIHBvd2VyID0gX2QgPT09IHZvaWQgMCA/IDAuOCA6IF9kLCBfZSA9IF9hLnRpbWVDb25zdGFudCwgdGltZUNvbnN0YW50ID0gX2UgPT09IHZvaWQgMCA/IDM1MCA6IF9lLCBfZiA9IF9hLnJlc3REZWx0YSwgcmVzdERlbHRhID0gX2YgPT09IHZvaWQgMCA/IDAuNSA6IF9mLCBtb2RpZnlUYXJnZXQgPSBfYS5tb2RpZnlUYXJnZXQ7XG4gICAgdmFyIHN0YXRlID0geyBkb25lOiBmYWxzZSwgdmFsdWU6IGZyb20gfTtcbiAgICB2YXIgYW1wbGl0dWRlID0gcG93ZXIgKiB2ZWxvY2l0eTtcbiAgICB2YXIgaWRlYWwgPSBmcm9tICsgYW1wbGl0dWRlO1xuICAgIHZhciB0YXJnZXQgPSBtb2RpZnlUYXJnZXQgPT09IHVuZGVmaW5lZCA/IGlkZWFsIDogbW9kaWZ5VGFyZ2V0KGlkZWFsKTtcbiAgICBpZiAodGFyZ2V0ICE9PSBpZGVhbClcbiAgICAgICAgYW1wbGl0dWRlID0gdGFyZ2V0IC0gZnJvbTtcbiAgICByZXR1cm4ge1xuICAgICAgICBuZXh0OiBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgdmFyIGRlbHRhID0gLWFtcGxpdHVkZSAqIE1hdGguZXhwKC10IC8gdGltZUNvbnN0YW50KTtcbiAgICAgICAgICAgIHN0YXRlLmRvbmUgPSAhKGRlbHRhID4gcmVzdERlbHRhIHx8IGRlbHRhIDwgLXJlc3REZWx0YSk7XG4gICAgICAgICAgICBzdGF0ZS52YWx1ZSA9IHN0YXRlLmRvbmUgPyB0YXJnZXQgOiB0YXJnZXQgKyBkZWx0YTtcbiAgICAgICAgICAgIHJldHVybiBzdGF0ZTtcbiAgICAgICAgfSxcbiAgICAgICAgZmxpcFRhcmdldDogZnVuY3Rpb24gKCkgeyB9LFxuICAgIH07XG59XG5cbnZhciB0eXBlcyA9IHsga2V5ZnJhbWVzOiBrZXlmcmFtZXMsIHNwcmluZzogc3ByaW5nLCBkZWNheTogZGVjYXkgfTtcbmZ1bmN0aW9uIGRldGVjdEFuaW1hdGlvbkZyb21PcHRpb25zKGNvbmZpZykge1xuICAgIGlmIChBcnJheS5pc0FycmF5KGNvbmZpZy50bykpIHtcbiAgICAgICAgcmV0dXJuIGtleWZyYW1lcztcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZXNbY29uZmlnLnR5cGVdKSB7XG4gICAgICAgIHJldHVybiB0eXBlc1tjb25maWcudHlwZV07XG4gICAgfVxuICAgIHZhciBrZXlzID0gbmV3IFNldChPYmplY3Qua2V5cyhjb25maWcpKTtcbiAgICBpZiAoa2V5cy5oYXMoXCJlYXNlXCIpIHx8XG4gICAgICAgIChrZXlzLmhhcyhcImR1cmF0aW9uXCIpICYmICFrZXlzLmhhcyhcImRhbXBpbmdSYXRpb1wiKSkpIHtcbiAgICAgICAgcmV0dXJuIGtleWZyYW1lcztcbiAgICB9XG4gICAgZWxzZSBpZiAoa2V5cy5oYXMoXCJkYW1waW5nUmF0aW9cIikgfHxcbiAgICAgICAga2V5cy5oYXMoXCJzdGlmZm5lc3NcIikgfHxcbiAgICAgICAga2V5cy5oYXMoXCJtYXNzXCIpIHx8XG4gICAgICAgIGtleXMuaGFzKFwiZGFtcGluZ1wiKSB8fFxuICAgICAgICBrZXlzLmhhcyhcInJlc3RTcGVlZFwiKSB8fFxuICAgICAgICBrZXlzLmhhcyhcInJlc3REZWx0YVwiKSkge1xuICAgICAgICByZXR1cm4gc3ByaW5nO1xuICAgIH1cbiAgICByZXR1cm4ga2V5ZnJhbWVzO1xufVxuXG5mdW5jdGlvbiBsb29wRWxhcHNlZChlbGFwc2VkLCBkdXJhdGlvbiwgZGVsYXkpIHtcbiAgICBpZiAoZGVsYXkgPT09IHZvaWQgMCkgeyBkZWxheSA9IDA7IH1cbiAgICByZXR1cm4gZWxhcHNlZCAtIGR1cmF0aW9uIC0gZGVsYXk7XG59XG5mdW5jdGlvbiByZXZlcnNlRWxhcHNlZChlbGFwc2VkLCBkdXJhdGlvbiwgZGVsYXksIGlzRm9yd2FyZFBsYXliYWNrKSB7XG4gICAgaWYgKGRlbGF5ID09PSB2b2lkIDApIHsgZGVsYXkgPSAwOyB9XG4gICAgaWYgKGlzRm9yd2FyZFBsYXliYWNrID09PSB2b2lkIDApIHsgaXNGb3J3YXJkUGxheWJhY2sgPSB0cnVlOyB9XG4gICAgcmV0dXJuIGlzRm9yd2FyZFBsYXliYWNrXG4gICAgICAgID8gbG9vcEVsYXBzZWQoZHVyYXRpb24gKyAtZWxhcHNlZCwgZHVyYXRpb24sIGRlbGF5KVxuICAgICAgICA6IGR1cmF0aW9uIC0gKGVsYXBzZWQgLSBkdXJhdGlvbikgKyBkZWxheTtcbn1cbmZ1bmN0aW9uIGhhc1JlcGVhdERlbGF5RWxhcHNlZChlbGFwc2VkLCBkdXJhdGlvbiwgZGVsYXksIGlzRm9yd2FyZFBsYXliYWNrKSB7XG4gICAgcmV0dXJuIGlzRm9yd2FyZFBsYXliYWNrID8gZWxhcHNlZCA+PSBkdXJhdGlvbiArIGRlbGF5IDogZWxhcHNlZCA8PSAtZGVsYXk7XG59XG5cbnZhciBmcmFtZXN5bmMgPSBmdW5jdGlvbiAodXBkYXRlKSB7XG4gICAgdmFyIHBhc3NUaW1lc3RhbXAgPSBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgdmFyIGRlbHRhID0gX2EuZGVsdGE7XG4gICAgICAgIHJldHVybiB1cGRhdGUoZGVsdGEpO1xuICAgIH07XG4gICAgcmV0dXJuIHtcbiAgICAgICAgc3RhcnQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHN5bmNfX2RlZmF1bHRbJ2RlZmF1bHQnXS51cGRhdGUocGFzc1RpbWVzdGFtcCwgdHJ1ZSk7IH0sXG4gICAgICAgIHN0b3A6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHN5bmMuY2FuY2VsU3luYy51cGRhdGUocGFzc1RpbWVzdGFtcCk7IH0sXG4gICAgfTtcbn07XG5mdW5jdGlvbiBhbmltYXRlKF9hKSB7XG4gICAgdmFyIF9iLCBfYztcbiAgICB2YXIgZnJvbSA9IF9hLmZyb20sIF9kID0gX2EuYXV0b3BsYXksIGF1dG9wbGF5ID0gX2QgPT09IHZvaWQgMCA/IHRydWUgOiBfZCwgX2UgPSBfYS5kcml2ZXIsIGRyaXZlciA9IF9lID09PSB2b2lkIDAgPyBmcmFtZXN5bmMgOiBfZSwgX2YgPSBfYS5lbGFwc2VkLCBlbGFwc2VkID0gX2YgPT09IHZvaWQgMCA/IDAgOiBfZiwgX2cgPSBfYS5yZXBlYXQsIHJlcGVhdE1heCA9IF9nID09PSB2b2lkIDAgPyAwIDogX2csIF9oID0gX2EucmVwZWF0VHlwZSwgcmVwZWF0VHlwZSA9IF9oID09PSB2b2lkIDAgPyBcImxvb3BcIiA6IF9oLCBfaiA9IF9hLnJlcGVhdERlbGF5LCByZXBlYXREZWxheSA9IF9qID09PSB2b2lkIDAgPyAwIDogX2osIG9uUGxheSA9IF9hLm9uUGxheSwgb25TdG9wID0gX2Eub25TdG9wLCBvbkNvbXBsZXRlID0gX2Eub25Db21wbGV0ZSwgb25SZXBlYXQgPSBfYS5vblJlcGVhdCwgb25VcGRhdGUgPSBfYS5vblVwZGF0ZSwgb3B0aW9ucyA9IHRzbGliLl9fcmVzdChfYSwgW1wiZnJvbVwiLCBcImF1dG9wbGF5XCIsIFwiZHJpdmVyXCIsIFwiZWxhcHNlZFwiLCBcInJlcGVhdFwiLCBcInJlcGVhdFR5cGVcIiwgXCJyZXBlYXREZWxheVwiLCBcIm9uUGxheVwiLCBcIm9uU3RvcFwiLCBcIm9uQ29tcGxldGVcIiwgXCJvblJlcGVhdFwiLCBcIm9uVXBkYXRlXCJdKTtcbiAgICB2YXIgdG8gPSBvcHRpb25zLnRvO1xuICAgIHZhciBkcml2ZXJDb250cm9scztcbiAgICB2YXIgcmVwZWF0Q291bnQgPSAwO1xuICAgIHZhciBjb21wdXRlZER1cmF0aW9uID0gb3B0aW9ucy5kdXJhdGlvbjtcbiAgICB2YXIgbGF0ZXN0O1xuICAgIHZhciBpc0NvbXBsZXRlID0gZmFsc2U7XG4gICAgdmFyIGlzRm9yd2FyZFBsYXliYWNrID0gdHJ1ZTtcbiAgICB2YXIgaW50ZXJwb2xhdGVGcm9tTnVtYmVyO1xuICAgIHZhciBhbmltYXRvciA9IGRldGVjdEFuaW1hdGlvbkZyb21PcHRpb25zKG9wdGlvbnMpO1xuICAgIGlmICgoX2MgPSAoX2IgPSBhbmltYXRvcikubmVlZHNJbnRlcnBvbGF0aW9uKSA9PT0gbnVsbCB8fCBfYyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2MuY2FsbChfYiwgZnJvbSwgdG8pKSB7XG4gICAgICAgIGludGVycG9sYXRlRnJvbU51bWJlciA9IGludGVycG9sYXRlKFswLCAxMDBdLCBbZnJvbSwgdG9dLCB7XG4gICAgICAgICAgICBjbGFtcDogZmFsc2UsXG4gICAgICAgIH0pO1xuICAgICAgICBmcm9tID0gMDtcbiAgICAgICAgdG8gPSAxMDA7XG4gICAgfVxuICAgIHZhciBhbmltYXRpb24gPSBhbmltYXRvcih0c2xpYi5fX2Fzc2lnbih0c2xpYi5fX2Fzc2lnbih7fSwgb3B0aW9ucyksIHsgZnJvbTogZnJvbSwgdG86IHRvIH0pKTtcbiAgICBmdW5jdGlvbiByZXBlYXQoKSB7XG4gICAgICAgIHJlcGVhdENvdW50Kys7XG4gICAgICAgIGlmIChyZXBlYXRUeXBlID09PSBcInJldmVyc2VcIikge1xuICAgICAgICAgICAgaXNGb3J3YXJkUGxheWJhY2sgPSByZXBlYXRDb3VudCAlIDIgPT09IDA7XG4gICAgICAgICAgICBlbGFwc2VkID0gcmV2ZXJzZUVsYXBzZWQoZWxhcHNlZCwgY29tcHV0ZWREdXJhdGlvbiwgcmVwZWF0RGVsYXksIGlzRm9yd2FyZFBsYXliYWNrKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGVsYXBzZWQgPSBsb29wRWxhcHNlZChlbGFwc2VkLCBjb21wdXRlZER1cmF0aW9uLCByZXBlYXREZWxheSk7XG4gICAgICAgICAgICBpZiAocmVwZWF0VHlwZSA9PT0gXCJtaXJyb3JcIilcbiAgICAgICAgICAgICAgICBhbmltYXRpb24uZmxpcFRhcmdldCgpO1xuICAgICAgICB9XG4gICAgICAgIGlzQ29tcGxldGUgPSBmYWxzZTtcbiAgICAgICAgb25SZXBlYXQgJiYgb25SZXBlYXQoKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gY29tcGxldGUoKSB7XG4gICAgICAgIGRyaXZlckNvbnRyb2xzLnN0b3AoKTtcbiAgICAgICAgb25Db21wbGV0ZSAmJiBvbkNvbXBsZXRlKCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHVwZGF0ZShkZWx0YSkge1xuICAgICAgICBpZiAoIWlzRm9yd2FyZFBsYXliYWNrKVxuICAgICAgICAgICAgZGVsdGEgPSAtZGVsdGE7XG4gICAgICAgIGVsYXBzZWQgKz0gZGVsdGE7XG4gICAgICAgIGlmICghaXNDb21wbGV0ZSkge1xuICAgICAgICAgICAgdmFyIHN0YXRlID0gYW5pbWF0aW9uLm5leHQoTWF0aC5tYXgoMCwgZWxhcHNlZCkpO1xuICAgICAgICAgICAgbGF0ZXN0ID0gc3RhdGUudmFsdWU7XG4gICAgICAgICAgICBpZiAoaW50ZXJwb2xhdGVGcm9tTnVtYmVyKVxuICAgICAgICAgICAgICAgIGxhdGVzdCA9IGludGVycG9sYXRlRnJvbU51bWJlcihsYXRlc3QpO1xuICAgICAgICAgICAgaXNDb21wbGV0ZSA9IGlzRm9yd2FyZFBsYXliYWNrID8gc3RhdGUuZG9uZSA6IGVsYXBzZWQgPD0gMDtcbiAgICAgICAgfVxuICAgICAgICBvblVwZGF0ZSA9PT0gbnVsbCB8fCBvblVwZGF0ZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogb25VcGRhdGUobGF0ZXN0KTtcbiAgICAgICAgaWYgKGlzQ29tcGxldGUpIHtcbiAgICAgICAgICAgIGlmIChyZXBlYXRDb3VudCA9PT0gMClcbiAgICAgICAgICAgICAgICBjb21wdXRlZER1cmF0aW9uICE9PSBudWxsICYmIGNvbXB1dGVkRHVyYXRpb24gIT09IHZvaWQgMCA/IGNvbXB1dGVkRHVyYXRpb24gOiAoY29tcHV0ZWREdXJhdGlvbiA9IGVsYXBzZWQpO1xuICAgICAgICAgICAgaWYgKHJlcGVhdENvdW50IDwgcmVwZWF0TWF4KSB7XG4gICAgICAgICAgICAgICAgaGFzUmVwZWF0RGVsYXlFbGFwc2VkKGVsYXBzZWQsIGNvbXB1dGVkRHVyYXRpb24sIHJlcGVhdERlbGF5LCBpc0ZvcndhcmRQbGF5YmFjaykgJiYgcmVwZWF0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb21wbGV0ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIHBsYXkoKSB7XG4gICAgICAgIG9uUGxheSA9PT0gbnVsbCB8fCBvblBsYXkgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9uUGxheSgpO1xuICAgICAgICBkcml2ZXJDb250cm9scyA9IGRyaXZlcih1cGRhdGUpO1xuICAgICAgICBkcml2ZXJDb250cm9scy5zdGFydCgpO1xuICAgIH1cbiAgICBhdXRvcGxheSAmJiBwbGF5KCk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgc3RvcDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgb25TdG9wID09PSBudWxsIHx8IG9uU3RvcCA9PT0gdm9pZCAwID8gdm9pZCAwIDogb25TdG9wKCk7XG4gICAgICAgICAgICBkcml2ZXJDb250cm9scy5zdG9wKCk7XG4gICAgICAgIH0sXG4gICAgfTtcbn1cblxuZnVuY3Rpb24gdmVsb2NpdHlQZXJTZWNvbmQodmVsb2NpdHksIGZyYW1lRHVyYXRpb24pIHtcbiAgICByZXR1cm4gZnJhbWVEdXJhdGlvbiA/IHZlbG9jaXR5ICogKDEwMDAgLyBmcmFtZUR1cmF0aW9uKSA6IDA7XG59XG5cbmZ1bmN0aW9uIGluZXJ0aWEoX2EpIHtcbiAgICB2YXIgX2IgPSBfYS5mcm9tLCBmcm9tID0gX2IgPT09IHZvaWQgMCA/IDAgOiBfYiwgX2MgPSBfYS52ZWxvY2l0eSwgdmVsb2NpdHkgPSBfYyA9PT0gdm9pZCAwID8gMCA6IF9jLCBtaW4gPSBfYS5taW4sIG1heCA9IF9hLm1heCwgX2QgPSBfYS5wb3dlciwgcG93ZXIgPSBfZCA9PT0gdm9pZCAwID8gMC44IDogX2QsIF9lID0gX2EudGltZUNvbnN0YW50LCB0aW1lQ29uc3RhbnQgPSBfZSA9PT0gdm9pZCAwID8gNzUwIDogX2UsIF9mID0gX2EuYm91bmNlU3RpZmZuZXNzLCBib3VuY2VTdGlmZm5lc3MgPSBfZiA9PT0gdm9pZCAwID8gNTAwIDogX2YsIF9nID0gX2EuYm91bmNlRGFtcGluZywgYm91bmNlRGFtcGluZyA9IF9nID09PSB2b2lkIDAgPyAxMCA6IF9nLCBfaCA9IF9hLnJlc3REZWx0YSwgcmVzdERlbHRhID0gX2ggPT09IHZvaWQgMCA/IDEgOiBfaCwgbW9kaWZ5VGFyZ2V0ID0gX2EubW9kaWZ5VGFyZ2V0LCBkcml2ZXIgPSBfYS5kcml2ZXIsIG9uVXBkYXRlID0gX2Eub25VcGRhdGUsIG9uQ29tcGxldGUgPSBfYS5vbkNvbXBsZXRlO1xuICAgIHZhciBjdXJyZW50QW5pbWF0aW9uO1xuICAgIGZ1bmN0aW9uIGlzT3V0T2ZCb3VuZHModikge1xuICAgICAgICByZXR1cm4gKG1pbiAhPT0gdW5kZWZpbmVkICYmIHYgPCBtaW4pIHx8IChtYXggIT09IHVuZGVmaW5lZCAmJiB2ID4gbWF4KTtcbiAgICB9XG4gICAgZnVuY3Rpb24gYm91bmRhcnlOZWFyZXN0KHYpIHtcbiAgICAgICAgaWYgKG1pbiA9PT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgcmV0dXJuIG1heDtcbiAgICAgICAgaWYgKG1heCA9PT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgcmV0dXJuIG1pbjtcbiAgICAgICAgcmV0dXJuIE1hdGguYWJzKG1pbiAtIHYpIDwgTWF0aC5hYnMobWF4IC0gdikgPyBtaW4gOiBtYXg7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHN0YXJ0QW5pbWF0aW9uKG9wdGlvbnMpIHtcbiAgICAgICAgY3VycmVudEFuaW1hdGlvbiA9PT0gbnVsbCB8fCBjdXJyZW50QW5pbWF0aW9uID09PSB2b2lkIDAgPyB2b2lkIDAgOiBjdXJyZW50QW5pbWF0aW9uLnN0b3AoKTtcbiAgICAgICAgY3VycmVudEFuaW1hdGlvbiA9IGFuaW1hdGUodHNsaWIuX19hc3NpZ24odHNsaWIuX19hc3NpZ24oe30sIG9wdGlvbnMpLCB7IGRyaXZlcjogZHJpdmVyLCBvblVwZGF0ZTogZnVuY3Rpb24gKHYpIHtcbiAgICAgICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICAgICAgb25VcGRhdGUgPT09IG51bGwgfHwgb25VcGRhdGUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9uVXBkYXRlKHYpO1xuICAgICAgICAgICAgICAgIChfYSA9IG9wdGlvbnMub25VcGRhdGUpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5jYWxsKG9wdGlvbnMsIHYpO1xuICAgICAgICAgICAgfSwgb25Db21wbGV0ZTogb25Db21wbGV0ZSB9KSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHN0YXJ0U3ByaW5nKG9wdGlvbnMpIHtcbiAgICAgICAgc3RhcnRBbmltYXRpb24odHNsaWIuX19hc3NpZ24oeyB0eXBlOiBcInNwcmluZ1wiLCBzdGlmZm5lc3M6IGJvdW5jZVN0aWZmbmVzcywgZGFtcGluZzogYm91bmNlRGFtcGluZywgcmVzdERlbHRhOiByZXN0RGVsdGEgfSwgb3B0aW9ucykpO1xuICAgIH1cbiAgICBpZiAoaXNPdXRPZkJvdW5kcyhmcm9tKSkge1xuICAgICAgICBzdGFydFNwcmluZyh7IGZyb206IGZyb20sIHZlbG9jaXR5OiB2ZWxvY2l0eSwgdG86IGJvdW5kYXJ5TmVhcmVzdChmcm9tKSB9KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHZhciB0YXJnZXQgPSBwb3dlciAqIHZlbG9jaXR5ICsgZnJvbTtcbiAgICAgICAgaWYgKHR5cGVvZiBtb2RpZnlUYXJnZXQgIT09IFwidW5kZWZpbmVkXCIpXG4gICAgICAgICAgICB0YXJnZXQgPSBtb2RpZnlUYXJnZXQodGFyZ2V0KTtcbiAgICAgICAgdmFyIGJvdW5kYXJ5XzEgPSBib3VuZGFyeU5lYXJlc3QodGFyZ2V0KTtcbiAgICAgICAgdmFyIGhlYWRpbmdfMSA9IGJvdW5kYXJ5XzEgPT09IG1pbiA/IC0xIDogMTtcbiAgICAgICAgdmFyIHByZXZfMTtcbiAgICAgICAgdmFyIGN1cnJlbnRfMTtcbiAgICAgICAgdmFyIGNoZWNrQm91bmRhcnkgPSBmdW5jdGlvbiAodikge1xuICAgICAgICAgICAgcHJldl8xID0gY3VycmVudF8xO1xuICAgICAgICAgICAgY3VycmVudF8xID0gdjtcbiAgICAgICAgICAgIHZlbG9jaXR5ID0gdmVsb2NpdHlQZXJTZWNvbmQodiAtIHByZXZfMSwgc3luYy5nZXRGcmFtZURhdGEoKS5kZWx0YSk7XG4gICAgICAgICAgICBpZiAoKGhlYWRpbmdfMSA9PT0gMSAmJiB2ID4gYm91bmRhcnlfMSkgfHxcbiAgICAgICAgICAgICAgICAoaGVhZGluZ18xID09PSAtMSAmJiB2IDwgYm91bmRhcnlfMSkpIHtcbiAgICAgICAgICAgICAgICBzdGFydFNwcmluZyh7IGZyb206IHYsIHRvOiBib3VuZGFyeV8xLCB2ZWxvY2l0eTogdmVsb2NpdHkgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHN0YXJ0QW5pbWF0aW9uKHtcbiAgICAgICAgICAgIHR5cGU6IFwiZGVjYXlcIixcbiAgICAgICAgICAgIGZyb206IGZyb20sXG4gICAgICAgICAgICB2ZWxvY2l0eTogdmVsb2NpdHksXG4gICAgICAgICAgICB0aW1lQ29uc3RhbnQ6IHRpbWVDb25zdGFudCxcbiAgICAgICAgICAgIHBvd2VyOiBwb3dlcixcbiAgICAgICAgICAgIHJlc3REZWx0YTogcmVzdERlbHRhLFxuICAgICAgICAgICAgbW9kaWZ5VGFyZ2V0OiBtb2RpZnlUYXJnZXQsXG4gICAgICAgICAgICBvblVwZGF0ZTogaXNPdXRPZkJvdW5kcyh0YXJnZXQpID8gY2hlY2tCb3VuZGFyeSA6IHVuZGVmaW5lZCxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIHN0b3A6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGN1cnJlbnRBbmltYXRpb24gPT09IG51bGwgfHwgY3VycmVudEFuaW1hdGlvbiA9PT0gdm9pZCAwID8gdm9pZCAwIDogY3VycmVudEFuaW1hdGlvbi5zdG9wKCk7IH0sXG4gICAgfTtcbn1cblxudmFyIHJhZGlhbnNUb0RlZ3JlZXMgPSBmdW5jdGlvbiAocmFkaWFucykgeyByZXR1cm4gKHJhZGlhbnMgKiAxODApIC8gTWF0aC5QSTsgfTtcblxudmFyIGFuZ2xlID0gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICBpZiAoYiA9PT0gdm9pZCAwKSB7IGIgPSB6ZXJvUG9pbnQ7IH1cbiAgICByZXR1cm4gcmFkaWFuc1RvRGVncmVlcyhNYXRoLmF0YW4yKGIueSAtIGEueSwgYi54IC0gYS54KSk7XG59O1xuXG52YXIgYXBwbHlPZmZzZXQgPSBmdW5jdGlvbiAoZnJvbSwgdG8pIHtcbiAgICB2YXIgaGFzUmVjZWl2ZWRGcm9tID0gdHJ1ZTtcbiAgICBpZiAodG8gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0byA9IGZyb207XG4gICAgICAgIGhhc1JlY2VpdmVkRnJvbSA9IGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gKHYpIHtcbiAgICAgICAgaWYgKGhhc1JlY2VpdmVkRnJvbSkge1xuICAgICAgICAgICAgcmV0dXJuIHYgLSBmcm9tICsgdG87XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBmcm9tID0gdjtcbiAgICAgICAgICAgIGhhc1JlY2VpdmVkRnJvbSA9IHRydWU7XG4gICAgICAgICAgICByZXR1cm4gdG87XG4gICAgICAgIH1cbiAgICB9O1xufTtcblxudmFyIGlkZW50aXR5ID0gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHY7IH07XG52YXIgY3JlYXRlQXR0cmFjdG9yID0gZnVuY3Rpb24gKGFsdGVyRGlzcGxhY2VtZW50KSB7XG4gICAgaWYgKGFsdGVyRGlzcGxhY2VtZW50ID09PSB2b2lkIDApIHsgYWx0ZXJEaXNwbGFjZW1lbnQgPSBpZGVudGl0eTsgfVxuICAgIHJldHVybiBmdW5jdGlvbiAoY29uc3RhbnQsIG9yaWdpbiwgdikge1xuICAgICAgICB2YXIgZGlzcGxhY2VtZW50ID0gb3JpZ2luIC0gdjtcbiAgICAgICAgdmFyIHNwcmluZ01vZGlmaWVkRGlzcGxhY2VtZW50ID0gLSgwIC0gY29uc3RhbnQgKyAxKSAqICgwIC0gYWx0ZXJEaXNwbGFjZW1lbnQoTWF0aC5hYnMoZGlzcGxhY2VtZW50KSkpO1xuICAgICAgICByZXR1cm4gZGlzcGxhY2VtZW50IDw9IDBcbiAgICAgICAgICAgID8gb3JpZ2luICsgc3ByaW5nTW9kaWZpZWREaXNwbGFjZW1lbnRcbiAgICAgICAgICAgIDogb3JpZ2luIC0gc3ByaW5nTW9kaWZpZWREaXNwbGFjZW1lbnQ7XG4gICAgfTtcbn07XG52YXIgYXR0cmFjdCA9IGNyZWF0ZUF0dHJhY3RvcigpO1xudmFyIGF0dHJhY3RFeHBvID0gY3JlYXRlQXR0cmFjdG9yKE1hdGguc3FydCk7XG5cbnZhciBkZWdyZWVzVG9SYWRpYW5zID0gZnVuY3Rpb24gKGRlZ3JlZXMpIHsgcmV0dXJuIChkZWdyZWVzICogTWF0aC5QSSkgLyAxODA7IH07XG5cbnZhciBpc1BvaW50ID0gZnVuY3Rpb24gKHBvaW50KSB7XG4gICAgcmV0dXJuIHBvaW50Lmhhc093blByb3BlcnR5KCd4JykgJiYgcG9pbnQuaGFzT3duUHJvcGVydHkoJ3knKTtcbn07XG5cbnZhciBpc1BvaW50M0QgPSBmdW5jdGlvbiAocG9pbnQpIHtcbiAgICByZXR1cm4gaXNQb2ludChwb2ludCkgJiYgcG9pbnQuaGFzT3duUHJvcGVydHkoJ3onKTtcbn07XG5cbnZhciBkaXN0YW5jZTFEID0gZnVuY3Rpb24gKGEsIGIpIHsgcmV0dXJuIE1hdGguYWJzKGEgLSBiKTsgfTtcbmZ1bmN0aW9uIGRpc3RhbmNlKGEsIGIpIHtcbiAgICBpZiAoaXNOdW0oYSkgJiYgaXNOdW0oYikpIHtcbiAgICAgICAgcmV0dXJuIGRpc3RhbmNlMUQoYSwgYik7XG4gICAgfVxuICAgIGVsc2UgaWYgKGlzUG9pbnQoYSkgJiYgaXNQb2ludChiKSkge1xuICAgICAgICB2YXIgeERlbHRhID0gZGlzdGFuY2UxRChhLngsIGIueCk7XG4gICAgICAgIHZhciB5RGVsdGEgPSBkaXN0YW5jZTFEKGEueSwgYi55KTtcbiAgICAgICAgdmFyIHpEZWx0YSA9IGlzUG9pbnQzRChhKSAmJiBpc1BvaW50M0QoYikgPyBkaXN0YW5jZTFEKGEueiwgYi56KSA6IDA7XG4gICAgICAgIHJldHVybiBNYXRoLnNxcnQoTWF0aC5wb3coeERlbHRhLCAyKSArIE1hdGgucG93KHlEZWx0YSwgMikgKyBNYXRoLnBvdyh6RGVsdGEsIDIpKTtcbiAgICB9XG59XG5cbnZhciBwb2ludEZyb21WZWN0b3IgPSBmdW5jdGlvbiAob3JpZ2luLCBhbmdsZSwgZGlzdGFuY2UpIHtcbiAgICBhbmdsZSA9IGRlZ3JlZXNUb1JhZGlhbnMoYW5nbGUpO1xuICAgIHJldHVybiB7XG4gICAgICAgIHg6IGRpc3RhbmNlICogTWF0aC5jb3MoYW5nbGUpICsgb3JpZ2luLngsXG4gICAgICAgIHk6IGRpc3RhbmNlICogTWF0aC5zaW4oYW5nbGUpICsgb3JpZ2luLnlcbiAgICB9O1xufTtcblxudmFyIHRvRGVjaW1hbCA9IGZ1bmN0aW9uIChudW0sIHByZWNpc2lvbikge1xuICAgIGlmIChwcmVjaXNpb24gPT09IHZvaWQgMCkgeyBwcmVjaXNpb24gPSAyOyB9XG4gICAgcHJlY2lzaW9uID0gTWF0aC5wb3coMTAsIHByZWNpc2lvbik7XG4gICAgcmV0dXJuIE1hdGgucm91bmQobnVtICogcHJlY2lzaW9uKSAvIHByZWNpc2lvbjtcbn07XG5cbnZhciBzbW9vdGhGcmFtZSA9IGZ1bmN0aW9uIChwcmV2VmFsdWUsIG5leHRWYWx1ZSwgZHVyYXRpb24sIHNtb290aGluZykge1xuICAgIGlmIChzbW9vdGhpbmcgPT09IHZvaWQgMCkgeyBzbW9vdGhpbmcgPSAwOyB9XG4gICAgcmV0dXJuIHRvRGVjaW1hbChwcmV2VmFsdWUgK1xuICAgICAgICAoZHVyYXRpb24gKiAobmV4dFZhbHVlIC0gcHJldlZhbHVlKSkgLyBNYXRoLm1heChzbW9vdGhpbmcsIGR1cmF0aW9uKSk7XG59O1xuXG52YXIgc21vb3RoID0gZnVuY3Rpb24gKHN0cmVuZ3RoKSB7XG4gICAgaWYgKHN0cmVuZ3RoID09PSB2b2lkIDApIHsgc3RyZW5ndGggPSA1MDsgfVxuICAgIHZhciBwcmV2aW91c1ZhbHVlID0gMDtcbiAgICB2YXIgbGFzdFVwZGF0ZWQgPSAwO1xuICAgIHJldHVybiBmdW5jdGlvbiAodikge1xuICAgICAgICB2YXIgY3VycmVudEZyYW1lc3RhbXAgPSBzeW5jLmdldEZyYW1lRGF0YSgpLnRpbWVzdGFtcDtcbiAgICAgICAgdmFyIHRpbWVEZWx0YSA9IGN1cnJlbnRGcmFtZXN0YW1wICE9PSBsYXN0VXBkYXRlZCA/IGN1cnJlbnRGcmFtZXN0YW1wIC0gbGFzdFVwZGF0ZWQgOiAwO1xuICAgICAgICB2YXIgbmV3VmFsdWUgPSB0aW1lRGVsdGFcbiAgICAgICAgICAgID8gc21vb3RoRnJhbWUocHJldmlvdXNWYWx1ZSwgdiwgdGltZURlbHRhLCBzdHJlbmd0aClcbiAgICAgICAgICAgIDogcHJldmlvdXNWYWx1ZTtcbiAgICAgICAgbGFzdFVwZGF0ZWQgPSBjdXJyZW50RnJhbWVzdGFtcDtcbiAgICAgICAgcHJldmlvdXNWYWx1ZSA9IG5ld1ZhbHVlO1xuICAgICAgICByZXR1cm4gbmV3VmFsdWU7XG4gICAgfTtcbn07XG5cbnZhciBzbmFwID0gZnVuY3Rpb24gKHBvaW50cykge1xuICAgIGlmICh0eXBlb2YgcG9pbnRzID09PSAnbnVtYmVyJykge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIE1hdGgucm91bmQodiAvIHBvaW50cykgKiBwb2ludHM7IH07XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB2YXIgaV8xID0gMDtcbiAgICAgICAgdmFyIG51bVBvaW50c18xID0gcG9pbnRzLmxlbmd0aDtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICh2KSB7XG4gICAgICAgICAgICB2YXIgbGFzdERpc3RhbmNlID0gTWF0aC5hYnMocG9pbnRzWzBdIC0gdik7XG4gICAgICAgICAgICBmb3IgKGlfMSA9IDE7IGlfMSA8IG51bVBvaW50c18xOyBpXzErKykge1xuICAgICAgICAgICAgICAgIHZhciBwb2ludCA9IHBvaW50c1tpXzFdO1xuICAgICAgICAgICAgICAgIHZhciBkaXN0YW5jZSA9IE1hdGguYWJzKHBvaW50IC0gdik7XG4gICAgICAgICAgICAgICAgaWYgKGRpc3RhbmNlID09PSAwKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcG9pbnQ7XG4gICAgICAgICAgICAgICAgaWYgKGRpc3RhbmNlID4gbGFzdERpc3RhbmNlKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcG9pbnRzW2lfMSAtIDFdO1xuICAgICAgICAgICAgICAgIGlmIChpXzEgPT09IG51bVBvaW50c18xIC0gMSlcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHBvaW50O1xuICAgICAgICAgICAgICAgIGxhc3REaXN0YW5jZSA9IGRpc3RhbmNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH1cbn07XG5cbmZ1bmN0aW9uIHZlbG9jaXR5UGVyRnJhbWUoeHBzLCBmcmFtZUR1cmF0aW9uKSB7XG4gICAgcmV0dXJuIHhwcyAvICgxMDAwIC8gZnJhbWVEdXJhdGlvbik7XG59XG5cbnZhciB3cmFwID0gZnVuY3Rpb24gKG1pbiwgbWF4LCB2KSB7XG4gICAgdmFyIHJhbmdlU2l6ZSA9IG1heCAtIG1pbjtcbiAgICByZXR1cm4gKCgoKHYgLSBtaW4pICUgcmFuZ2VTaXplKSArIHJhbmdlU2l6ZSkgJSByYW5nZVNpemUpICsgbWluO1xufTtcblxudmFyIGEgPSBmdW5jdGlvbiAoYTEsIGEyKSB7IHJldHVybiAxLjAgLSAzLjAgKiBhMiArIDMuMCAqIGExOyB9O1xudmFyIGIgPSBmdW5jdGlvbiAoYTEsIGEyKSB7IHJldHVybiAzLjAgKiBhMiAtIDYuMCAqIGExOyB9O1xudmFyIGMgPSBmdW5jdGlvbiAoYTEpIHsgcmV0dXJuIDMuMCAqIGExOyB9O1xudmFyIGNhbGNCZXppZXIgPSBmdW5jdGlvbiAodCwgYTEsIGEyKSB7XG4gICAgcmV0dXJuICgoYShhMSwgYTIpICogdCArIGIoYTEsIGEyKSkgKiB0ICsgYyhhMSkpICogdDtcbn07XG52YXIgZ2V0U2xvcGUgPSBmdW5jdGlvbiAodCwgYTEsIGEyKSB7XG4gICAgcmV0dXJuIDMuMCAqIGEoYTEsIGEyKSAqIHQgKiB0ICsgMi4wICogYihhMSwgYTIpICogdCArIGMoYTEpO1xufTtcbnZhciBzdWJkaXZpc2lvblByZWNpc2lvbiA9IDAuMDAwMDAwMTtcbnZhciBzdWJkaXZpc2lvbk1heEl0ZXJhdGlvbnMgPSAxMDtcbmZ1bmN0aW9uIGJpbmFyeVN1YmRpdmlkZShhWCwgYUEsIGFCLCBtWDEsIG1YMikge1xuICAgIHZhciBjdXJyZW50WDtcbiAgICB2YXIgY3VycmVudFQ7XG4gICAgdmFyIGkgPSAwO1xuICAgIGRvIHtcbiAgICAgICAgY3VycmVudFQgPSBhQSArIChhQiAtIGFBKSAvIDIuMDtcbiAgICAgICAgY3VycmVudFggPSBjYWxjQmV6aWVyKGN1cnJlbnRULCBtWDEsIG1YMikgLSBhWDtcbiAgICAgICAgaWYgKGN1cnJlbnRYID4gMC4wKSB7XG4gICAgICAgICAgICBhQiA9IGN1cnJlbnRUO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgYUEgPSBjdXJyZW50VDtcbiAgICAgICAgfVxuICAgIH0gd2hpbGUgKE1hdGguYWJzKGN1cnJlbnRYKSA+IHN1YmRpdmlzaW9uUHJlY2lzaW9uICYmXG4gICAgICAgICsraSA8IHN1YmRpdmlzaW9uTWF4SXRlcmF0aW9ucyk7XG4gICAgcmV0dXJuIGN1cnJlbnRUO1xufVxudmFyIG5ld3Rvbkl0ZXJhdGlvbnMgPSA4O1xudmFyIG5ld3Rvbk1pblNsb3BlID0gMC4wMDE7XG5mdW5jdGlvbiBuZXd0b25SYXBoc29uSXRlcmF0ZShhWCwgYUd1ZXNzVCwgbVgxLCBtWDIpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5ld3Rvbkl0ZXJhdGlvbnM7ICsraSkge1xuICAgICAgICB2YXIgY3VycmVudFNsb3BlID0gZ2V0U2xvcGUoYUd1ZXNzVCwgbVgxLCBtWDIpO1xuICAgICAgICBpZiAoY3VycmVudFNsb3BlID09PSAwLjApIHtcbiAgICAgICAgICAgIHJldHVybiBhR3Vlc3NUO1xuICAgICAgICB9XG4gICAgICAgIHZhciBjdXJyZW50WCA9IGNhbGNCZXppZXIoYUd1ZXNzVCwgbVgxLCBtWDIpIC0gYVg7XG4gICAgICAgIGFHdWVzc1QgLT0gY3VycmVudFggLyBjdXJyZW50U2xvcGU7XG4gICAgfVxuICAgIHJldHVybiBhR3Vlc3NUO1xufVxudmFyIGtTcGxpbmVUYWJsZVNpemUgPSAxMTtcbnZhciBrU2FtcGxlU3RlcFNpemUgPSAxLjAgLyAoa1NwbGluZVRhYmxlU2l6ZSAtIDEuMCk7XG5mdW5jdGlvbiBjdWJpY0JlemllcihtWDEsIG1ZMSwgbVgyLCBtWTIpIHtcbiAgICBpZiAobVgxID09PSBtWTEgJiYgbVgyID09PSBtWTIpXG4gICAgICAgIHJldHVybiBsaW5lYXI7XG4gICAgdmFyIHNhbXBsZVZhbHVlcyA9IG5ldyBGbG9hdDMyQXJyYXkoa1NwbGluZVRhYmxlU2l6ZSk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrU3BsaW5lVGFibGVTaXplOyArK2kpIHtcbiAgICAgICAgc2FtcGxlVmFsdWVzW2ldID0gY2FsY0JlemllcihpICoga1NhbXBsZVN0ZXBTaXplLCBtWDEsIG1YMik7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGdldFRGb3JYKGFYKSB7XG4gICAgICAgIHZhciBpbnRlcnZhbFN0YXJ0ID0gMC4wO1xuICAgICAgICB2YXIgY3VycmVudFNhbXBsZSA9IDE7XG4gICAgICAgIHZhciBsYXN0U2FtcGxlID0ga1NwbGluZVRhYmxlU2l6ZSAtIDE7XG4gICAgICAgIGZvciAoOyBjdXJyZW50U2FtcGxlICE9PSBsYXN0U2FtcGxlICYmIHNhbXBsZVZhbHVlc1tjdXJyZW50U2FtcGxlXSA8PSBhWDsgKytjdXJyZW50U2FtcGxlKSB7XG4gICAgICAgICAgICBpbnRlcnZhbFN0YXJ0ICs9IGtTYW1wbGVTdGVwU2l6ZTtcbiAgICAgICAgfVxuICAgICAgICAtLWN1cnJlbnRTYW1wbGU7XG4gICAgICAgIHZhciBkaXN0ID0gKGFYIC0gc2FtcGxlVmFsdWVzW2N1cnJlbnRTYW1wbGVdKSAvXG4gICAgICAgICAgICAoc2FtcGxlVmFsdWVzW2N1cnJlbnRTYW1wbGUgKyAxXSAtIHNhbXBsZVZhbHVlc1tjdXJyZW50U2FtcGxlXSk7XG4gICAgICAgIHZhciBndWVzc0ZvclQgPSBpbnRlcnZhbFN0YXJ0ICsgZGlzdCAqIGtTYW1wbGVTdGVwU2l6ZTtcbiAgICAgICAgdmFyIGluaXRpYWxTbG9wZSA9IGdldFNsb3BlKGd1ZXNzRm9yVCwgbVgxLCBtWDIpO1xuICAgICAgICBpZiAoaW5pdGlhbFNsb3BlID49IG5ld3Rvbk1pblNsb3BlKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3dG9uUmFwaHNvbkl0ZXJhdGUoYVgsIGd1ZXNzRm9yVCwgbVgxLCBtWDIpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGluaXRpYWxTbG9wZSA9PT0gMC4wKSB7XG4gICAgICAgICAgICByZXR1cm4gZ3Vlc3NGb3JUO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGJpbmFyeVN1YmRpdmlkZShhWCwgaW50ZXJ2YWxTdGFydCwgaW50ZXJ2YWxTdGFydCArIGtTYW1wbGVTdGVwU2l6ZSwgbVgxLCBtWDIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiAodCkge1xuICAgICAgICByZXR1cm4gdCA9PT0gMCB8fCB0ID09PSAxID8gdCA6IGNhbGNCZXppZXIoZ2V0VEZvclgodCksIG1ZMSwgbVkyKTtcbiAgICB9O1xufVxuXG52YXIgc3RlcHMgPSBmdW5jdGlvbiAoc3RlcHMsIGRpcmVjdGlvbikge1xuICAgIGlmIChkaXJlY3Rpb24gPT09IHZvaWQgMCkgeyBkaXJlY3Rpb24gPSAnZW5kJzsgfVxuICAgIHJldHVybiBmdW5jdGlvbiAocHJvZ3Jlc3MpIHtcbiAgICAgICAgcHJvZ3Jlc3MgPVxuICAgICAgICAgICAgZGlyZWN0aW9uID09PSAnZW5kJyA/IE1hdGgubWluKHByb2dyZXNzLCAwLjk5OSkgOiBNYXRoLm1heChwcm9ncmVzcywgMC4wMDEpO1xuICAgICAgICB2YXIgZXhwYW5kZWQgPSBwcm9ncmVzcyAqIHN0ZXBzO1xuICAgICAgICB2YXIgcm91bmRlZCA9IGRpcmVjdGlvbiA9PT0gJ2VuZCcgPyBNYXRoLmZsb29yKGV4cGFuZGVkKSA6IE1hdGguY2VpbChleHBhbmRlZCk7XG4gICAgICAgIHJldHVybiBjbGFtcCgwLCAxLCByb3VuZGVkIC8gc3RlcHMpO1xuICAgIH07XG59O1xuXG5leHBvcnRzLmFuZ2xlID0gYW5nbGU7XG5leHBvcnRzLmFuaW1hdGUgPSBhbmltYXRlO1xuZXhwb3J0cy5hbnRpY2lwYXRlID0gYW50aWNpcGF0ZTtcbmV4cG9ydHMuYXBwbHlPZmZzZXQgPSBhcHBseU9mZnNldDtcbmV4cG9ydHMuYXR0cmFjdCA9IGF0dHJhY3Q7XG5leHBvcnRzLmF0dHJhY3RFeHBvID0gYXR0cmFjdEV4cG87XG5leHBvcnRzLmJhY2tJbiA9IGJhY2tJbjtcbmV4cG9ydHMuYmFja0luT3V0ID0gYmFja0luT3V0O1xuZXhwb3J0cy5iYWNrT3V0ID0gYmFja091dDtcbmV4cG9ydHMuYm91bmNlSW4gPSBib3VuY2VJbjtcbmV4cG9ydHMuYm91bmNlSW5PdXQgPSBib3VuY2VJbk91dDtcbmV4cG9ydHMuYm91bmNlT3V0ID0gYm91bmNlT3V0O1xuZXhwb3J0cy5jaXJjSW4gPSBjaXJjSW47XG5leHBvcnRzLmNpcmNJbk91dCA9IGNpcmNJbk91dDtcbmV4cG9ydHMuY2lyY091dCA9IGNpcmNPdXQ7XG5leHBvcnRzLmNsYW1wID0gY2xhbXA7XG5leHBvcnRzLmNyZWF0ZUFudGljaXBhdGUgPSBjcmVhdGVBbnRpY2lwYXRlO1xuZXhwb3J0cy5jcmVhdGVBdHRyYWN0b3IgPSBjcmVhdGVBdHRyYWN0b3I7XG5leHBvcnRzLmNyZWF0ZUJhY2tJbiA9IGNyZWF0ZUJhY2tJbjtcbmV4cG9ydHMuY3JlYXRlRXhwb0luID0gY3JlYXRlRXhwb0luO1xuZXhwb3J0cy5jdWJpY0JlemllciA9IGN1YmljQmV6aWVyO1xuZXhwb3J0cy5kZWNheSA9IGRlY2F5O1xuZXhwb3J0cy5kZWdyZWVzVG9SYWRpYW5zID0gZGVncmVlc1RvUmFkaWFucztcbmV4cG9ydHMuZGlzdGFuY2UgPSBkaXN0YW5jZTtcbmV4cG9ydHMuZWFzZUluID0gZWFzZUluO1xuZXhwb3J0cy5lYXNlSW5PdXQgPSBlYXNlSW5PdXQ7XG5leHBvcnRzLmVhc2VPdXQgPSBlYXNlT3V0O1xuZXhwb3J0cy5pbmVydGlhID0gaW5lcnRpYTtcbmV4cG9ydHMuaW50ZXJwb2xhdGUgPSBpbnRlcnBvbGF0ZTtcbmV4cG9ydHMuaXNQb2ludCA9IGlzUG9pbnQ7XG5leHBvcnRzLmlzUG9pbnQzRCA9IGlzUG9pbnQzRDtcbmV4cG9ydHMua2V5ZnJhbWVzID0ga2V5ZnJhbWVzO1xuZXhwb3J0cy5saW5lYXIgPSBsaW5lYXI7XG5leHBvcnRzLm1pcnJvckVhc2luZyA9IG1pcnJvckVhc2luZztcbmV4cG9ydHMubWl4ID0gbWl4O1xuZXhwb3J0cy5taXhDb2xvciA9IG1peENvbG9yO1xuZXhwb3J0cy5taXhDb21wbGV4ID0gbWl4Q29tcGxleDtcbmV4cG9ydHMucGlwZSA9IHBpcGU7XG5leHBvcnRzLnBvaW50RnJvbVZlY3RvciA9IHBvaW50RnJvbVZlY3RvcjtcbmV4cG9ydHMucHJvZ3Jlc3MgPSBwcm9ncmVzcztcbmV4cG9ydHMucmFkaWFuc1RvRGVncmVlcyA9IHJhZGlhbnNUb0RlZ3JlZXM7XG5leHBvcnRzLnJldmVyc2VFYXNpbmcgPSByZXZlcnNlRWFzaW5nO1xuZXhwb3J0cy5zbW9vdGggPSBzbW9vdGg7XG5leHBvcnRzLnNtb290aEZyYW1lID0gc21vb3RoRnJhbWU7XG5leHBvcnRzLnNuYXAgPSBzbmFwO1xuZXhwb3J0cy5zcHJpbmcgPSBzcHJpbmc7XG5leHBvcnRzLnN0ZXBzID0gc3RlcHM7XG5leHBvcnRzLnRvRGVjaW1hbCA9IHRvRGVjaW1hbDtcbmV4cG9ydHMudmVsb2NpdHlQZXJGcmFtZSA9IHZlbG9jaXR5UGVyRnJhbWU7XG5leHBvcnRzLnZlbG9jaXR5UGVyU2Vjb25kID0gdmVsb2NpdHlQZXJTZWNvbmQ7XG5leHBvcnRzLndyYXAgPSB3cmFwO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19hc3NpZ24gPSAodGhpcyAmJiB0aGlzLl9fYXNzaWduKSB8fCBmdW5jdGlvbiAoKSB7XG4gICAgX19hc3NpZ24gPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgZm9yICh2YXIgcywgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XG4gICAgICAgICAgICBzID0gYXJndW1lbnRzW2ldO1xuICAgICAgICAgICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApKVxuICAgICAgICAgICAgICAgIHRbcF0gPSBzW3BdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0O1xuICAgIH07XG4gICAgcmV0dXJuIF9fYXNzaWduLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59O1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH0pO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX3NldE1vZHVsZURlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9fc2V0TW9kdWxlRGVmYXVsdCkgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgdikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBcImRlZmF1bHRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdiB9KTtcbn0pIDogZnVuY3Rpb24obywgdikge1xuICAgIG9bXCJkZWZhdWx0XCJdID0gdjtcbn0pO1xudmFyIF9faW1wb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnRTdGFyKSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgaWYgKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgcmV0dXJuIG1vZDtcbiAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgaWYgKG1vZCAhPSBudWxsKSBmb3IgKHZhciBrIGluIG1vZCkgaWYgKGsgIT09IFwiZGVmYXVsdFwiICYmIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtb2QsIGspKSBfX2NyZWF0ZUJpbmRpbmcocmVzdWx0LCBtb2QsIGspO1xuICAgIF9fc2V0TW9kdWxlRGVmYXVsdChyZXN1bHQsIG1vZCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkNhcm91c2VsID0gdm9pZCAwO1xudmFyIENhcm91c2VsSXRlbV8xID0gcmVxdWlyZShcIi4vQ2Fyb3VzZWxJdGVtXCIpO1xudmFyIEluZGljYXRvcnNfMSA9IHJlcXVpcmUoXCIuL0luZGljYXRvcnNcIik7XG52YXIgdXRpbF8xID0gcmVxdWlyZShcIi4vdXRpbFwiKTtcbnZhciBTdHlsZWRfMSA9IHJlcXVpcmUoXCIuL1N0eWxlZFwiKTtcbnZhciByZWFjdF8xID0gX19pbXBvcnRTdGFyKHJlcXVpcmUoXCJyZWFjdFwiKSk7XG52YXIgQ2Fyb3VzZWwgPSBmdW5jdGlvbiAocHJvcHMpIHtcbiAgICB2YXIgX2EgPSAoMCwgcmVhY3RfMS51c2VTdGF0ZSkoe1xuICAgICAgICBhY3RpdmU6IDAsXG4gICAgICAgIHByZXZBY3RpdmU6IDAsXG4gICAgICAgIG5leHQ6IHRydWVcbiAgICB9KSwgc3RhdGUgPSBfYVswXSwgc2V0U3RhdGUgPSBfYVsxXTtcbiAgICAvKiogVXNlZCB0byBzZXQgY2Fyb3VzZWwncyBoZWlnaHQuIEl0IGlzIGJlaW5nIHNldCBieSB0aGUgQ2Fyb3VzZWxJdGVtcyAqL1xuICAgIHZhciBfYiA9ICgwLCByZWFjdF8xLnVzZVN0YXRlKSgpLCBjaGlsZHJlbkhlaWdodCA9IF9iWzBdLCBzZXRDaGlsZHJlbkhlaWdodCA9IF9iWzFdO1xuICAgIHZhciBfYyA9ICgwLCByZWFjdF8xLnVzZVN0YXRlKShmYWxzZSksIHBhdXNlZCA9IF9jWzBdLCBzZXRQYXVzZWQgPSBfY1sxXTtcbiAgICB2YXIgc2FuaXRpemVkUHJvcHMgPSAoMCwgdXRpbF8xLnNhbml0aXplUHJvcHMpKHByb3BzKTtcbiAgICAvLyBjb21wb25lbnREaWRNb3VudCAmIG9uSW5kZXhDaGFuZ2VcbiAgICAoMCwgcmVhY3RfMS51c2VFZmZlY3QpKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gc2FuaXRpemVkUHJvcHMuaW5kZXgsIGNoYW5nZU9uRmlyc3RSZW5kZXIgPSBzYW5pdGl6ZWRQcm9wcy5jaGFuZ2VPbkZpcnN0UmVuZGVyO1xuICAgICAgICBzZXROZXh0KGluZGV4LCB0cnVlLCBjaGFuZ2VPbkZpcnN0UmVuZGVyKTtcbiAgICB9LCBbc2FuaXRpemVkUHJvcHMuaW5kZXhdKTtcbiAgICAoMCwgdXRpbF8xLnVzZUludGVydmFsKShmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBhdXRvUGxheSA9IHNhbml0aXplZFByb3BzLmF1dG9QbGF5O1xuICAgICAgICBpZiAoYXV0b1BsYXkgJiYgIXBhdXNlZCkge1xuICAgICAgICAgICAgbmV4dCh1bmRlZmluZWQpO1xuICAgICAgICB9XG4gICAgfSwgc2FuaXRpemVkUHJvcHMuaW50ZXJ2YWwpO1xuICAgIHZhciBuZXh0ID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIHZhciBjaGlsZHJlbiA9IHNhbml0aXplZFByb3BzLmNoaWxkcmVuLCBjeWNsZU5hdmlnYXRpb24gPSBzYW5pdGl6ZWRQcm9wcy5jeWNsZU5hdmlnYXRpb247XG4gICAgICAgIHZhciBsYXN0ID0gQXJyYXkuaXNBcnJheShjaGlsZHJlbikgPyBjaGlsZHJlbi5sZW5ndGggLSAxIDogMDtcbiAgICAgICAgdmFyIG5leHRBY3RpdmUgPSBzdGF0ZS5hY3RpdmUgKyAxID4gbGFzdCA/IChjeWNsZU5hdmlnYXRpb24gPyAwIDogc3RhdGUuYWN0aXZlKSA6IHN0YXRlLmFjdGl2ZSArIDE7XG4gICAgICAgIHNldE5leHQobmV4dEFjdGl2ZSwgdHJ1ZSk7XG4gICAgICAgIGlmIChldmVudClcbiAgICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIH07XG4gICAgdmFyIHByZXYgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgdmFyIGNoaWxkcmVuID0gc2FuaXRpemVkUHJvcHMuY2hpbGRyZW4sIGN5Y2xlTmF2aWdhdGlvbiA9IHNhbml0aXplZFByb3BzLmN5Y2xlTmF2aWdhdGlvbjtcbiAgICAgICAgdmFyIGxhc3QgPSBBcnJheS5pc0FycmF5KGNoaWxkcmVuKSA/IGNoaWxkcmVuLmxlbmd0aCAtIDEgOiAwO1xuICAgICAgICB2YXIgbmV4dEFjdGl2ZSA9IHN0YXRlLmFjdGl2ZSAtIDEgPCAwID8gKGN5Y2xlTmF2aWdhdGlvbiA/IGxhc3QgOiBzdGF0ZS5hY3RpdmUpIDogc3RhdGUuYWN0aXZlIC0gMTtcbiAgICAgICAgc2V0TmV4dChuZXh0QWN0aXZlLCBmYWxzZSk7XG4gICAgICAgIGlmIChldmVudClcbiAgICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIH07XG4gICAgdmFyIHNldE5leHQgPSBmdW5jdGlvbiAoaW5kZXgsIGlzTmV4dCwgcnVuQ2FsbGJhY2tzKSB7XG4gICAgICAgIGlmIChydW5DYWxsYmFja3MgPT09IHZvaWQgMCkgeyBydW5DYWxsYmFja3MgPSB0cnVlOyB9XG4gICAgICAgIHZhciBvbkNoYW5nZSA9IHNhbml0aXplZFByb3BzLm9uQ2hhbmdlLCBjaGlsZHJlbiA9IHNhbml0aXplZFByb3BzLmNoaWxkcmVuLCBzdHJpY3RJbmRleGluZyA9IHNhbml0aXplZFByb3BzLnN0cmljdEluZGV4aW5nO1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShjaGlsZHJlbikpIHtcbiAgICAgICAgICAgIGlmIChzdHJpY3RJbmRleGluZyAmJiBpbmRleCA+IGNoaWxkcmVuLmxlbmd0aCAtIDEpXG4gICAgICAgICAgICAgICAgaW5kZXggPSBjaGlsZHJlbi5sZW5ndGggLSAxO1xuICAgICAgICAgICAgaWYgKHN0cmljdEluZGV4aW5nICYmIGluZGV4IDwgMClcbiAgICAgICAgICAgICAgICBpbmRleCA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpbmRleCA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJ1bkNhbGxiYWNrcykge1xuICAgICAgICAgICAgaWYgKGlzTmV4dCAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgIGlzTmV4dCA/IHNhbml0aXplZFByb3BzLm5leHQoaW5kZXgsIHN0YXRlLmFjdGl2ZSkgOiBzYW5pdGl6ZWRQcm9wcy5wcmV2KGluZGV4LCBzdGF0ZS5hY3RpdmUpO1xuICAgICAgICAgICAgb25DaGFuZ2UoaW5kZXgsIHN0YXRlLmFjdGl2ZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzTmV4dCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBpc05leHQgPSBpbmRleCA+IHN0YXRlLmFjdGl2ZTtcbiAgICAgICAgfVxuICAgICAgICBzZXRTdGF0ZSh7XG4gICAgICAgICAgICBhY3RpdmU6IGluZGV4LFxuICAgICAgICAgICAgcHJldkFjdGl2ZTogc3RhdGUuYWN0aXZlLFxuICAgICAgICAgICAgbmV4dDogaXNOZXh0XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgdmFyIGNoaWxkcmVuID0gc2FuaXRpemVkUHJvcHMuY2hpbGRyZW4sIHN4ID0gc2FuaXRpemVkUHJvcHMuc3gsIGNsYXNzTmFtZSA9IHNhbml0aXplZFByb3BzLmNsYXNzTmFtZSwgaGVpZ2h0ID0gc2FuaXRpemVkUHJvcHMuaGVpZ2h0LCBzdG9wQXV0b1BsYXlPbkhvdmVyID0gc2FuaXRpemVkUHJvcHMuc3RvcEF1dG9QbGF5T25Ib3ZlciwgYW5pbWF0aW9uID0gc2FuaXRpemVkUHJvcHMuYW5pbWF0aW9uLCBkdXJhdGlvbiA9IHNhbml0aXplZFByb3BzLmR1cmF0aW9uLCBzd2lwZSA9IHNhbml0aXplZFByb3BzLnN3aXBlLCBuYXZCdXR0b25zQWx3YXlzSW52aXNpYmxlID0gc2FuaXRpemVkUHJvcHMubmF2QnV0dG9uc0Fsd2F5c0ludmlzaWJsZSwgbmF2QnV0dG9uc0Fsd2F5c1Zpc2libGUgPSBzYW5pdGl6ZWRQcm9wcy5uYXZCdXR0b25zQWx3YXlzVmlzaWJsZSwgY3ljbGVOYXZpZ2F0aW9uID0gc2FuaXRpemVkUHJvcHMuY3ljbGVOYXZpZ2F0aW9uLCBmdWxsSGVpZ2h0SG92ZXIgPSBzYW5pdGl6ZWRQcm9wcy5mdWxsSGVpZ2h0SG92ZXIsIG5hdkJ1dHRvbnNQcm9wcyA9IHNhbml0aXplZFByb3BzLm5hdkJ1dHRvbnNQcm9wcywgbmF2QnV0dG9uc1dyYXBwZXJQcm9wcyA9IHNhbml0aXplZFByb3BzLm5hdkJ1dHRvbnNXcmFwcGVyUHJvcHMsIE5hdkJ1dHRvbiA9IHNhbml0aXplZFByb3BzLk5hdkJ1dHRvbiwgTmV4dEljb24gPSBzYW5pdGl6ZWRQcm9wcy5OZXh0SWNvbiwgUHJldkljb24gPSBzYW5pdGl6ZWRQcm9wcy5QcmV2SWNvbiwgaW5kaWNhdG9ycyA9IHNhbml0aXplZFByb3BzLmluZGljYXRvcnMsIGluZGljYXRvckNvbnRhaW5lclByb3BzID0gc2FuaXRpemVkUHJvcHMuaW5kaWNhdG9yQ29udGFpbmVyUHJvcHMsIGluZGljYXRvckljb25CdXR0b25Qcm9wcyA9IHNhbml0aXplZFByb3BzLmluZGljYXRvckljb25CdXR0b25Qcm9wcywgYWN0aXZlSW5kaWNhdG9ySWNvbkJ1dHRvblByb3BzID0gc2FuaXRpemVkUHJvcHMuYWN0aXZlSW5kaWNhdG9ySWNvbkJ1dHRvblByb3BzLCBJbmRpY2F0b3JJY29uID0gc2FuaXRpemVkUHJvcHMuSW5kaWNhdG9ySWNvbjtcbiAgICB2YXIgc2hvd0J1dHRvbiA9IGZ1bmN0aW9uIChuZXh0KSB7XG4gICAgICAgIGlmIChuZXh0ID09PSB2b2lkIDApIHsgbmV4dCA9IHRydWU7IH1cbiAgICAgICAgaWYgKGN5Y2xlTmF2aWdhdGlvbilcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB2YXIgbGFzdCA9IEFycmF5LmlzQXJyYXkoY2hpbGRyZW4pID8gY2hpbGRyZW4ubGVuZ3RoIC0gMSA6IDA7XG4gICAgICAgIGlmIChuZXh0ICYmIHN0YXRlLmFjdGl2ZSA9PT0gbGFzdClcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgaWYgKCFuZXh0ICYmIHN0YXRlLmFjdGl2ZSA9PT0gMClcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfTtcbiAgICByZXR1cm4gKHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFN0eWxlZF8xLlN0eWxlZFJvb3QsIHsgc3g6IHN4LCBjbGFzc05hbWU6IGNsYXNzTmFtZSwgb25Nb3VzZU92ZXI6IGZ1bmN0aW9uICgpIHsgc3RvcEF1dG9QbGF5T25Ib3ZlciAmJiBzZXRQYXVzZWQodHJ1ZSk7IH0sIG9uTW91c2VPdXQ6IGZ1bmN0aW9uICgpIHsgc3RvcEF1dG9QbGF5T25Ib3ZlciAmJiBzZXRQYXVzZWQoZmFsc2UpOyB9LCBvbkZvY3VzOiBmdW5jdGlvbiAoKSB7IHN0b3BBdXRvUGxheU9uSG92ZXIgJiYgc2V0UGF1c2VkKHRydWUpOyB9LCBvbkJsdXI6IGZ1bmN0aW9uICgpIHsgc3RvcEF1dG9QbGF5T25Ib3ZlciAmJiBzZXRQYXVzZWQoZmFsc2UpOyB9IH0sXG4gICAgICAgIHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFN0eWxlZF8xLlN0eWxlZEl0ZW1XcmFwcGVyLCB7IHN0eWxlOiB7IGhlaWdodDogaGVpZ2h0ID8gaGVpZ2h0IDogY2hpbGRyZW5IZWlnaHQgfSB9LCBBcnJheS5pc0FycmF5KGNoaWxkcmVuKSA/XG4gICAgICAgICAgICBjaGlsZHJlbi5tYXAoZnVuY3Rpb24gKGNoaWxkLCBpbmRleCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAocmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoQ2Fyb3VzZWxJdGVtXzEuQ2Fyb3VzZWxJdGVtLCB7IGtleTogXCJjYXJvdXNlbC1pdGVtXCIgKyBpbmRleCwgc3RhdGU6IHN0YXRlLCBpbmRleDogaW5kZXgsIG1heEluZGV4OiBjaGlsZHJlbi5sZW5ndGggLSAxLCBjaGlsZDogY2hpbGQsIGFuaW1hdGlvbjogYW5pbWF0aW9uLCBkdXJhdGlvbjogZHVyYXRpb24sIHN3aXBlOiBzd2lwZSwgbmV4dDogbmV4dCwgcHJldjogcHJldiwgaGVpZ2h0OiBoZWlnaHQsIHNldEhlaWdodDogc2V0Q2hpbGRyZW5IZWlnaHQgfSkpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIDpcbiAgICAgICAgICAgICAgICByZWFjdF8xLmRlZmF1bHQuY3JlYXRlRWxlbWVudChDYXJvdXNlbEl0ZW1fMS5DYXJvdXNlbEl0ZW0sIHsga2V5OiBcImNhcm91c2VsLWl0ZW0wXCIsIHN0YXRlOiBzdGF0ZSwgaW5kZXg6IDAsIG1heEluZGV4OiAwLCBjaGlsZDogY2hpbGRyZW4sIGFuaW1hdGlvbjogYW5pbWF0aW9uLCBkdXJhdGlvbjogZHVyYXRpb24sIGhlaWdodDogaGVpZ2h0LCBzZXRIZWlnaHQ6IHNldENoaWxkcmVuSGVpZ2h0IH0pKSxcbiAgICAgICAgIW5hdkJ1dHRvbnNBbHdheXNJbnZpc2libGUgJiYgc2hvd0J1dHRvbih0cnVlKSAmJlxuICAgICAgICAgICAgcmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoU3R5bGVkXzEuU3R5bGVkQnV0dG9uV3JhcHBlciwgX19hc3NpZ24oeyBcIiRuZXh0XCI6IHRydWUsIFwiJHByZXZcIjogZmFsc2UsIFwiJGZ1bGxIZWlnaHRIb3ZlclwiOiBmdWxsSGVpZ2h0SG92ZXIgfSwgbmF2QnV0dG9uc1dyYXBwZXJQcm9wcyksIE5hdkJ1dHRvbiAhPT0gdW5kZWZpbmVkID9cbiAgICAgICAgICAgICAgICBOYXZCdXR0b24oX19hc3NpZ24oeyBvbkNsaWNrOiBuZXh0LCBuZXh0OiB0cnVlLCBwcmV2OiBmYWxzZSB9LCBuYXZCdXR0b25zUHJvcHMpKVxuICAgICAgICAgICAgICAgIDpcbiAgICAgICAgICAgICAgICAgICAgcmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoU3R5bGVkXzEuU3R5bGVkSWNvbkJ1dHRvbiwgX19hc3NpZ24oeyBcIiRhbHdheXNWaXNpYmxlXCI6IG5hdkJ1dHRvbnNBbHdheXNWaXNpYmxlLCBcIiRmdWxsSGVpZ2h0SG92ZXJcIjogZnVsbEhlaWdodEhvdmVyLCBvbkNsaWNrOiBuZXh0LCBcImFyaWEtbGFiZWxcIjogXCJOZXh0XCIgfSwgbmF2QnV0dG9uc1Byb3BzKSwgTmV4dEljb24pKSxcbiAgICAgICAgIW5hdkJ1dHRvbnNBbHdheXNJbnZpc2libGUgJiYgc2hvd0J1dHRvbihmYWxzZSkgJiZcbiAgICAgICAgICAgIHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFN0eWxlZF8xLlN0eWxlZEJ1dHRvbldyYXBwZXIsIF9fYXNzaWduKHsgXCIkbmV4dFwiOiBmYWxzZSwgXCIkcHJldlwiOiB0cnVlLCBcIiRmdWxsSGVpZ2h0SG92ZXJcIjogZnVsbEhlaWdodEhvdmVyIH0sIG5hdkJ1dHRvbnNXcmFwcGVyUHJvcHMpLCBOYXZCdXR0b24gIT09IHVuZGVmaW5lZCA/XG4gICAgICAgICAgICAgICAgTmF2QnV0dG9uKF9fYXNzaWduKHsgb25DbGljazogcHJldiwgbmV4dDogZmFsc2UsIHByZXY6IHRydWUgfSwgbmF2QnV0dG9uc1Byb3BzKSlcbiAgICAgICAgICAgICAgICA6XG4gICAgICAgICAgICAgICAgICAgIHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFN0eWxlZF8xLlN0eWxlZEljb25CdXR0b24sIF9fYXNzaWduKHsgXCIkYWx3YXlzVmlzaWJsZVwiOiBuYXZCdXR0b25zQWx3YXlzVmlzaWJsZSwgXCIkZnVsbEhlaWdodEhvdmVyXCI6IGZ1bGxIZWlnaHRIb3Zlciwgb25DbGljazogcHJldiwgXCJhcmlhLWxhYmVsXCI6IFwiUHJldmlvdXNcIiB9LCBuYXZCdXR0b25zUHJvcHMpLCBQcmV2SWNvbikpLFxuICAgICAgICBpbmRpY2F0b3JzID9cbiAgICAgICAgICAgIHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KEluZGljYXRvcnNfMS5JbmRpY2F0b3JzLCB7IGxlbmd0aDogQXJyYXkuaXNBcnJheShjaGlsZHJlbikgPyBjaGlsZHJlbi5sZW5ndGggOiAwLCBhY3RpdmU6IHN0YXRlLmFjdGl2ZSwgcHJlc3M6IHNldE5leHQsIGluZGljYXRvckNvbnRhaW5lclByb3BzOiBpbmRpY2F0b3JDb250YWluZXJQcm9wcywgaW5kaWNhdG9ySWNvbkJ1dHRvblByb3BzOiBpbmRpY2F0b3JJY29uQnV0dG9uUHJvcHMsIGFjdGl2ZUluZGljYXRvckljb25CdXR0b25Qcm9wczogYWN0aXZlSW5kaWNhdG9ySWNvbkJ1dHRvblByb3BzLCBJbmRpY2F0b3JJY29uOiBJbmRpY2F0b3JJY29uIH0pIDogbnVsbCkpO1xufTtcbmV4cG9ydHMuQ2Fyb3VzZWwgPSBDYXJvdXNlbDtcbmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMuQ2Fyb3VzZWw7XG4iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2Fzc2lnbiA9ICh0aGlzICYmIHRoaXMuX19hc3NpZ24pIHx8IGZ1bmN0aW9uICgpIHtcbiAgICBfX2Fzc2lnbiA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24odCkge1xuICAgICAgICBmb3IgKHZhciBzLCBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgICAgIHMgPSBhcmd1bWVudHNbaV07XG4gICAgICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpXG4gICAgICAgICAgICAgICAgdFtwXSA9IHNbcF07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHQ7XG4gICAgfTtcbiAgICByZXR1cm4gX19hc3NpZ24uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn07XG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfSk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgb1trMl0gPSBtW2tdO1xufSkpO1xudmFyIF9fc2V0TW9kdWxlRGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19zZXRNb2R1bGVEZWZhdWx0KSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCB2KSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIFwiZGVmYXVsdFwiLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2IH0pO1xufSkgOiBmdW5jdGlvbihvLCB2KSB7XG4gICAgb1tcImRlZmF1bHRcIl0gPSB2O1xufSk7XG52YXIgX19pbXBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydFN0YXIpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICBpZiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSByZXR1cm4gbW9kO1xuICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICBpZiAobW9kICE9IG51bGwpIGZvciAodmFyIGsgaW4gbW9kKSBpZiAoayAhPT0gXCJkZWZhdWx0XCIgJiYgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1vZCwgaykpIF9fY3JlYXRlQmluZGluZyhyZXN1bHQsIG1vZCwgayk7XG4gICAgX19zZXRNb2R1bGVEZWZhdWx0KHJlc3VsdCwgbW9kKTtcbiAgICByZXR1cm4gcmVzdWx0O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQ2Fyb3VzZWxJdGVtID0gdm9pZCAwO1xudmFyIGZyYW1lcl9tb3Rpb25fMSA9IHJlcXVpcmUoXCJmcmFtZXItbW90aW9uXCIpO1xudmFyIHJlYWN0XzEgPSBfX2ltcG9ydFN0YXIocmVxdWlyZShcInJlYWN0XCIpKTtcbnZhciBTdHlsZWRfMSA9IHJlcXVpcmUoXCIuL1N0eWxlZFwiKTtcbnZhciBDYXJvdXNlbEl0ZW0gPSBmdW5jdGlvbiAoX2EpIHtcbiAgICB2YXIgYW5pbWF0aW9uID0gX2EuYW5pbWF0aW9uLCBuZXh0ID0gX2EubmV4dCwgcHJldiA9IF9hLnByZXYsIHN3aXBlID0gX2Euc3dpcGUsIHN0YXRlID0gX2Euc3RhdGUsIGluZGV4ID0gX2EuaW5kZXgsIG1heEluZGV4ID0gX2EubWF4SW5kZXgsIGR1cmF0aW9uID0gX2EuZHVyYXRpb24sIGNoaWxkID0gX2EuY2hpbGQsIGhlaWdodCA9IF9hLmhlaWdodCwgc2V0SGVpZ2h0ID0gX2Euc2V0SGVpZ2h0O1xuICAgIHZhciBzbGlkZSA9IGFuaW1hdGlvbiA9PT0gJ3NsaWRlJztcbiAgICB2YXIgZmFkZSA9IGFuaW1hdGlvbiA9PT0gJ2ZhZGUnO1xuICAgIHZhciBkcmFnUHJvcHMgPSB7XG4gICAgICAgIGRyYWc6ICd4JyxcbiAgICAgICAgbGF5b3V0OiB0cnVlLFxuICAgICAgICBvbkRyYWdFbmQ6IGZ1bmN0aW9uIChldmVudCwgaW5mbykge1xuICAgICAgICAgICAgaWYgKCFzd2lwZSlcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICBpZiAoaW5mby5vZmZzZXQueCA+IDApXG4gICAgICAgICAgICAgICAgcHJldiAmJiBwcmV2KCk7XG4gICAgICAgICAgICBlbHNlIGlmIChpbmZvLm9mZnNldC54IDwgMClcbiAgICAgICAgICAgICAgICBuZXh0ICYmIG5leHQoKTtcbiAgICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICB9LFxuICAgICAgICBkcmFnRWxhc3RpYzogMCxcbiAgICAgICAgZHJhZ0NvbnN0cmFpbnRzOiB7IGxlZnQ6IDAsIHJpZ2h0OiAwIH1cbiAgICB9O1xuICAgIHZhciBkaXZSZWYgPSAoMCwgcmVhY3RfMS51c2VSZWYpKG51bGwpO1xuICAgIHZhciBjaGVja0FuZFNldEhlaWdodCA9ICgwLCByZWFjdF8xLnVzZUNhbGxiYWNrKShmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChpbmRleCAhPT0gc3RhdGUuYWN0aXZlKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBpZiAoIWRpdlJlZi5jdXJyZW50KVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBpZiAoZGl2UmVmLmN1cnJlbnQub2Zmc2V0SGVpZ2h0ID09PSAwKSB7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNoZWNrQW5kU2V0SGVpZ2h0KCk7IH0sIDEwMCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBzZXRIZWlnaHQoZGl2UmVmLmN1cnJlbnQub2Zmc2V0SGVpZ2h0KTtcbiAgICAgICAgfVxuICAgIH0sIFtzZXRIZWlnaHQsIHN0YXRlLmFjdGl2ZSwgaW5kZXgsIGRpdlJlZl0pO1xuICAgIC8vIFNldCBoZWlnaHQgb24gZXZlcnkgY2hpbGQgY2hhbmdlXG4gICAgKDAsIHJlYWN0XzEudXNlRWZmZWN0KShmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNoZWNrQW5kU2V0SGVpZ2h0KCk7XG4gICAgfSwgW2NoZWNrQW5kU2V0SGVpZ2h0XSk7XG4gICAgdmFyIHZhcmlhbnRzID0ge1xuICAgICAgICBsZWZ0d2FyZEV4aXQ6IHtcbiAgICAgICAgICAgIHg6IHNsaWRlID8gJy0xMDAlJyA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIG9wYWNpdHk6IGZhZGUgPyAwIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgekluZGV4OiAwLFxuICAgICAgICAgICAgLy8gcG9zaXRpb246ICdyZWxhdGl2ZSdcbiAgICAgICAgfSxcbiAgICAgICAgbGVmdE91dDoge1xuICAgICAgICAgICAgeDogc2xpZGUgPyAnLTEwMCUnIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgb3BhY2l0eTogZmFkZSA/IDAgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBkaXNwbGF5OiAnbm9uZScsXG4gICAgICAgICAgICB6SW5kZXg6IDAsXG4gICAgICAgICAgICAvLyBwb3NpdGlvbjogJ3JlbGF0aXZlJ1xuICAgICAgICB9LFxuICAgICAgICByaWdodHdhcmRFeGl0OiB7XG4gICAgICAgICAgICB4OiBzbGlkZSA/ICcxMDAlJyA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIG9wYWNpdHk6IGZhZGUgPyAwIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgekluZGV4OiAwLFxuICAgICAgICAgICAgLy8gcG9zaXRpb246ICdyZWxhdGl2ZSdcbiAgICAgICAgfSxcbiAgICAgICAgcmlnaHRPdXQ6IHtcbiAgICAgICAgICAgIHg6IHNsaWRlID8gJzEwMCUnIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgb3BhY2l0eTogZmFkZSA/IDAgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBkaXNwbGF5OiAnbm9uZScsXG4gICAgICAgICAgICB6SW5kZXg6IDAsXG4gICAgICAgICAgICAvLyBwb3NpdGlvbjogJ3JlbGF0aXZlJ1xuICAgICAgICB9LFxuICAgICAgICBjZW50ZXI6IHtcbiAgICAgICAgICAgIHg6IDAsXG4gICAgICAgICAgICBvcGFjaXR5OiAxLFxuICAgICAgICAgICAgekluZGV4OiAxLFxuICAgICAgICAgICAgLy8gcG9zaXRpb246ICdyZWxhdGl2ZSdcbiAgICAgICAgfSxcbiAgICB9O1xuICAgIC8vIEhhbmRsZSBhbmltYXRpb24gZGlyZWN0aW9ucyBhbmQgb3BhY2l0eSBnaXZlbiBiYXNlZCBvbiBhY3RpdmUsIHByZXZBY3RpdmUgYW5kIHRoaXMgaXRlbSdzIGluZGV4XG4gICAgdmFyIGFjdGl2ZSA9IHN0YXRlLmFjdGl2ZSwgaXNOZXh0ID0gc3RhdGUubmV4dCwgcHJldkFjdGl2ZSA9IHN0YXRlLnByZXZBY3RpdmU7XG4gICAgdmFyIGFuaW1hdGUgPSAnY2VudGVyJztcbiAgICBpZiAoaW5kZXggPT09IGFjdGl2ZSlcbiAgICAgICAgYW5pbWF0ZSA9ICdjZW50ZXInO1xuICAgIGVsc2UgaWYgKGluZGV4ID09PSBwcmV2QWN0aXZlKSB7XG4gICAgICAgIGFuaW1hdGUgPSBpc05leHQgPyAnbGVmdHdhcmRFeGl0JyA6ICdyaWdodHdhcmRFeGl0JztcbiAgICAgICAgaWYgKGFjdGl2ZSA9PT0gbWF4SW5kZXggJiYgaW5kZXggPT09IDApXG4gICAgICAgICAgICBhbmltYXRlID0gJ3JpZ2h0d2FyZEV4aXQnO1xuICAgICAgICBpZiAoYWN0aXZlID09PSAwICYmIGluZGV4ID09PSBtYXhJbmRleClcbiAgICAgICAgICAgIGFuaW1hdGUgPSAnbGVmdHdhcmRFeGl0JztcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGFuaW1hdGUgPSBpbmRleCA8IGFjdGl2ZSA/ICdsZWZ0T3V0JyA6ICdyaWdodE91dCc7XG4gICAgICAgIGlmIChhY3RpdmUgPT09IG1heEluZGV4ICYmIGluZGV4ID09PSAwKVxuICAgICAgICAgICAgYW5pbWF0ZSA9ICdyaWdodE91dCc7XG4gICAgICAgIGlmIChhY3RpdmUgPT09IDAgJiYgaW5kZXggPT09IG1heEluZGV4KVxuICAgICAgICAgICAgYW5pbWF0ZSA9ICdsZWZ0T3V0JztcbiAgICB9XG4gICAgZHVyYXRpb24gPSBkdXJhdGlvbiAvIDEwMDA7XG4gICAgcmV0dXJuIChyZWFjdF8xLmRlZmF1bHQuY3JlYXRlRWxlbWVudChTdHlsZWRfMS5TdHlsZWRJdGVtLCBudWxsLFxuICAgICAgICByZWFjdF8xLmRlZmF1bHQuY3JlYXRlRWxlbWVudChmcmFtZXJfbW90aW9uXzEuQW5pbWF0ZVByZXNlbmNlLCB7IGN1c3RvbTogaXNOZXh0IH0sXG4gICAgICAgICAgICByZWFjdF8xLmRlZmF1bHQuY3JlYXRlRWxlbWVudChmcmFtZXJfbW90aW9uXzEubW90aW9uLmRpdiwgX19hc3NpZ24oe30sIChzd2lwZSAmJiBkcmFnUHJvcHMpLCB7IHN0eWxlOiB7IGhlaWdodDogJzEwMCUnIH0gfSksXG4gICAgICAgICAgICAgICAgcmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoZnJhbWVyX21vdGlvbl8xLm1vdGlvbi5kaXYsIHsgY3VzdG9tOiBpc05leHQsIHZhcmlhbnRzOiB2YXJpYW50cywgYW5pbWF0ZTogYW5pbWF0ZSwgdHJhbnNpdGlvbjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgeDogeyB0eXBlOiBcInR3ZWVuXCIsIGR1cmF0aW9uOiBkdXJhdGlvbiwgZGVsYXk6IDAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wYWNpdHk6IHsgZHVyYXRpb246IGR1cmF0aW9uIH0sXG4gICAgICAgICAgICAgICAgICAgIH0sIHN0eWxlOiB7IHBvc2l0aW9uOiAncmVsYXRpdmUnLCBoZWlnaHQ6ICcxMDAlJyB9IH0sXG4gICAgICAgICAgICAgICAgICAgIHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHsgcmVmOiBkaXZSZWYsIHN0eWxlOiB7IGhlaWdodDogaGVpZ2h0IH0gfSwgY2hpbGQpKSkpKSk7XG59O1xuZXhwb3J0cy5DYXJvdXNlbEl0ZW0gPSBDYXJvdXNlbEl0ZW07XG4iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2Fzc2lnbiA9ICh0aGlzICYmIHRoaXMuX19hc3NpZ24pIHx8IGZ1bmN0aW9uICgpIHtcbiAgICBfX2Fzc2lnbiA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24odCkge1xuICAgICAgICBmb3IgKHZhciBzLCBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgICAgIHMgPSBhcmd1bWVudHNbaV07XG4gICAgICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpXG4gICAgICAgICAgICAgICAgdFtwXSA9IHNbcF07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHQ7XG4gICAgfTtcbiAgICByZXR1cm4gX19hc3NpZ24uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn07XG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfSk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgb1trMl0gPSBtW2tdO1xufSkpO1xudmFyIF9fc2V0TW9kdWxlRGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19zZXRNb2R1bGVEZWZhdWx0KSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCB2KSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIFwiZGVmYXVsdFwiLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2IH0pO1xufSkgOiBmdW5jdGlvbihvLCB2KSB7XG4gICAgb1tcImRlZmF1bHRcIl0gPSB2O1xufSk7XG52YXIgX19pbXBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydFN0YXIpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICBpZiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSByZXR1cm4gbW9kO1xuICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICBpZiAobW9kICE9IG51bGwpIGZvciAodmFyIGsgaW4gbW9kKSBpZiAoayAhPT0gXCJkZWZhdWx0XCIgJiYgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1vZCwgaykpIF9fY3JlYXRlQmluZGluZyhyZXN1bHQsIG1vZCwgayk7XG4gICAgX19zZXRNb2R1bGVEZWZhdWx0KHJlc3VsdCwgbW9kKTtcbiAgICByZXR1cm4gcmVzdWx0O1xufTtcbnZhciBfX3Jlc3QgPSAodGhpcyAmJiB0aGlzLl9fcmVzdCkgfHwgZnVuY3Rpb24gKHMsIGUpIHtcbiAgICB2YXIgdCA9IHt9O1xuICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSAmJiBlLmluZGV4T2YocCkgPCAwKVxuICAgICAgICB0W3BdID0gc1twXTtcbiAgICBpZiAocyAhPSBudWxsICYmIHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSBcImZ1bmN0aW9uXCIpXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBwID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzKTsgaSA8IHAubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChlLmluZGV4T2YocFtpXSkgPCAwICYmIE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzLCBwW2ldKSlcbiAgICAgICAgICAgICAgICB0W3BbaV1dID0gc1twW2ldXTtcbiAgICAgICAgfVxuICAgIHJldHVybiB0O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuSW5kaWNhdG9ycyA9IHZvaWQgMDtcbnZhciByZWFjdF8xID0gX19pbXBvcnRTdGFyKHJlcXVpcmUoXCJyZWFjdFwiKSk7XG52YXIgU3R5bGVkXzEgPSByZXF1aXJlKFwiLi9TdHlsZWRcIik7XG52YXIgSW5kaWNhdG9ycyA9IGZ1bmN0aW9uIChwcm9wcykge1xuICAgIHZhciBJbmRpY2F0b3JJY29uID0gKDAsIHJlYWN0XzEudXNlTWVtbykoZnVuY3Rpb24gKCkgeyByZXR1cm4gcHJvcHMuSW5kaWNhdG9ySWNvbiAhPT0gdW5kZWZpbmVkID8gcHJvcHMuSW5kaWNhdG9ySWNvbiA6IHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFN0eWxlZF8xLlN0eWxlZEZpYmVyTWFudWFsUmVjb3JkSWNvbiwgbnVsbCk7IH0sIFtwcm9wcy5JbmRpY2F0b3JJY29uXSk7XG4gICAgdmFyIGNvbXBsZXRlTGlzdElmUmVxdWlyZWQgPSAoMCwgcmVhY3RfMS51c2VDYWxsYmFjaykoZnVuY3Rpb24gKGFycmF5T2ZJY29ucykge1xuICAgICAgICB3aGlsZSAoYXJyYXlPZkljb25zLmxlbmd0aCA8IHByb3BzLmxlbmd0aCkge1xuICAgICAgICAgICAgdmFyIGluZGV4ID0gMDtcbiAgICAgICAgICAgIGFycmF5T2ZJY29ucy5wdXNoKGFycmF5T2ZJY29uc1tpbmRleF0pO1xuICAgICAgICAgICAgaW5kZXggKz0gMTtcbiAgICAgICAgfVxuICAgIH0sIFtwcm9wcy5sZW5ndGhdKTtcbiAgICB2YXIgX2EgPSBwcm9wcy5pbmRpY2F0b3JJY29uQnV0dG9uUHJvcHMsIGluZGljYXRvckljb25CdXR0b25DbGFzcyA9IF9hLmNsYXNzTmFtZSwgaW5kaWNhdG9ySWNvbkJ1dHRvblN0eWxlID0gX2Euc3R5bGUsIGluZGljYXRvckljb25CdXR0b25Qcm9wcyA9IF9fcmVzdChfYSwgW1wiY2xhc3NOYW1lXCIsIFwic3R5bGVcIl0pO1xuICAgIHZhciBfYiA9IHByb3BzLmFjdGl2ZUluZGljYXRvckljb25CdXR0b25Qcm9wcywgYWN0aXZlSW5kaWNhdG9ySWNvbkJ1dHRvbkNsYXNzID0gX2IuY2xhc3NOYW1lLCBhY3RpdmVJbmRpY2F0b3JJY29uQnV0dG9uU3R5bGUgPSBfYi5zdHlsZSwgYWN0aXZlSW5kaWNhdG9ySWNvbkJ1dHRvblByb3BzID0gX19yZXN0KF9iLCBbXCJjbGFzc05hbWVcIiwgXCJzdHlsZVwiXSk7XG4gICAgdmFyIGluZGljYXRvcnMgPSBbXTtcbiAgICB2YXIgX2xvb3BfMSA9IGZ1bmN0aW9uIChpKSB7XG4gICAgICAgIHZhciBjbGFzc05hbWUgPSBpID09PSBwcm9wcy5hY3RpdmUgP1xuICAgICAgICAgICAgaW5kaWNhdG9ySWNvbkJ1dHRvbkNsYXNzICsgXCIgXCIgKyBhY3RpdmVJbmRpY2F0b3JJY29uQnV0dG9uQ2xhc3MgOlxuICAgICAgICAgICAgXCJcIiArIGluZGljYXRvckljb25CdXR0b25DbGFzcztcbiAgICAgICAgdmFyIHN0eWxlID0gaSA9PT0gcHJvcHMuYWN0aXZlID9cbiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oe30sIGluZGljYXRvckljb25CdXR0b25TdHlsZSwgYWN0aXZlSW5kaWNhdG9ySWNvbkJ1dHRvblN0eWxlKSA6XG4gICAgICAgICAgICBpbmRpY2F0b3JJY29uQnV0dG9uU3R5bGU7XG4gICAgICAgIHZhciByZXN0UHJvcHMgPSBpID09PSBwcm9wcy5hY3RpdmUgP1xuICAgICAgICAgICAgT2JqZWN0LmFzc2lnbih7fSwgaW5kaWNhdG9ySWNvbkJ1dHRvblByb3BzLCBhY3RpdmVJbmRpY2F0b3JJY29uQnV0dG9uUHJvcHMpIDpcbiAgICAgICAgICAgIGluZGljYXRvckljb25CdXR0b25Qcm9wcztcbiAgICAgICAgaWYgKHJlc3RQcm9wc1snYXJpYS1sYWJlbCddID09PSB1bmRlZmluZWQpXG4gICAgICAgICAgICByZXN0UHJvcHNbJ2FyaWEtbGFiZWwnXSA9ICdjYXJvdXNlbCBpbmRpY2F0b3InO1xuICAgICAgICB2YXIgY3JlYXRlSW5kaWNhdG9yID0gZnVuY3Rpb24gKEluZGljYXRvckljb24pIHtcbiAgICAgICAgICAgIHJldHVybiAocmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoU3R5bGVkXzEuU3R5bGVkSW5kaWNhdG9ySWNvbkJ1dHRvbiwgX19hc3NpZ24oeyBcIiRhY3RpdmVcIjogaSA9PT0gcHJvcHMuYWN0aXZlLCBrZXk6IGksIGNsYXNzTmFtZTogY2xhc3NOYW1lLCBzdHlsZTogc3R5bGUsIG9uQ2xpY2s6IGZ1bmN0aW9uICgpIHsgcHJvcHMucHJlc3MoaSk7IH0gfSwgcmVzdFByb3BzLCB7IFwiYXJpYS1sYWJlbFwiOiByZXN0UHJvcHNbJ2FyaWEtbGFiZWwnXSArIFwiIFwiICsgKGkgKyAxKSB9KSwgSW5kaWNhdG9ySWNvbikpO1xuICAgICAgICB9O1xuICAgICAgICBBcnJheS5pc0FycmF5KEluZGljYXRvckljb24pXG4gICAgICAgICAgICA/IGluZGljYXRvcnMucHVzaChjcmVhdGVJbmRpY2F0b3IoSW5kaWNhdG9ySWNvbltpXSkpICYmIGNvbXBsZXRlTGlzdElmUmVxdWlyZWQoSW5kaWNhdG9ySWNvbilcbiAgICAgICAgICAgIDogaW5kaWNhdG9ycy5wdXNoKGNyZWF0ZUluZGljYXRvcihJbmRpY2F0b3JJY29uKSk7XG4gICAgfTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIF9sb29wXzEoaSk7XG4gICAgfVxuICAgIHZhciBfYyA9IHByb3BzLmluZGljYXRvckNvbnRhaW5lclByb3BzLCBpbmRpY2F0b3JDb250YWluZXJDbGFzcyA9IF9jLmNsYXNzTmFtZSwgaW5kaWNhdG9yQ29udGFpbmVyU3R5bGUgPSBfYy5zdHlsZSwgaW5kaWNhdG9yQ29udGFpbmVyUHJvcHMgPSBfX3Jlc3QoX2MsIFtcImNsYXNzTmFtZVwiLCBcInN0eWxlXCJdKTtcbiAgICByZXR1cm4gKHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFN0eWxlZF8xLlN0eWxlZEluZGljYXRvcnMsIF9fYXNzaWduKHsgY2xhc3NOYW1lOiBpbmRpY2F0b3JDb250YWluZXJDbGFzcywgc3R5bGU6IGluZGljYXRvckNvbnRhaW5lclN0eWxlIH0sIGluZGljYXRvckNvbnRhaW5lclByb3BzKSwgaW5kaWNhdG9ycykpO1xufTtcbmV4cG9ydHMuSW5kaWNhdG9ycyA9IEluZGljYXRvcnM7XG4iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2Fzc2lnbiA9ICh0aGlzICYmIHRoaXMuX19hc3NpZ24pIHx8IGZ1bmN0aW9uICgpIHtcbiAgICBfX2Fzc2lnbiA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24odCkge1xuICAgICAgICBmb3IgKHZhciBzLCBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgICAgIHMgPSBhcmd1bWVudHNbaV07XG4gICAgICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpXG4gICAgICAgICAgICAgICAgdFtwXSA9IHNbcF07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHQ7XG4gICAgfTtcbiAgICByZXR1cm4gX19hc3NpZ24uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn07XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlN0eWxlZEJ1dHRvbldyYXBwZXIgPSBleHBvcnRzLlN0eWxlZEljb25CdXR0b24gPSBleHBvcnRzLlN0eWxlZEluZGljYXRvckljb25CdXR0b24gPSBleHBvcnRzLlN0eWxlZEZpYmVyTWFudWFsUmVjb3JkSWNvbiA9IGV4cG9ydHMuU3R5bGVkSW5kaWNhdG9ycyA9IGV4cG9ydHMuU3R5bGVkSXRlbVdyYXBwZXIgPSBleHBvcnRzLlN0eWxlZEl0ZW0gPSBleHBvcnRzLlN0eWxlZFJvb3QgPSB2b2lkIDA7XG52YXIgRmliZXJNYW51YWxSZWNvcmRfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiQG11aS9pY29ucy1tYXRlcmlhbC9GaWJlck1hbnVhbFJlY29yZFwiKSk7XG52YXIgbWF0ZXJpYWxfMSA9IHJlcXVpcmUoXCJAbXVpL21hdGVyaWFsXCIpO1xuZXhwb3J0cy5TdHlsZWRSb290ID0gKDAsIG1hdGVyaWFsXzEuc3R5bGVkKShcImRpdlwiKSh7XG4gICAgcG9zaXRpb246IFwicmVsYXRpdmVcIixcbiAgICBvdmVyZmxvdzogXCJoaWRkZW5cIixcbn0pO1xuZXhwb3J0cy5TdHlsZWRJdGVtID0gKDAsIG1hdGVyaWFsXzEuc3R5bGVkKShcImRpdlwiKSh7XG4gICAgcG9zaXRpb246IFwiYWJzb2x1dGVcIixcbiAgICBoZWlnaHQ6IFwiMTAwJVwiLFxuICAgIHdpZHRoOiAnMTAwJScsXG4gICAgLy8gICAgZmxleEdyb3c6IDFcbn0pO1xuZXhwb3J0cy5TdHlsZWRJdGVtV3JhcHBlciA9ICgwLCBtYXRlcmlhbF8xLnN0eWxlZCkoXCJkaXZcIikoe1xuICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgIHdpZHRoOiAnMTAwJScsXG4gICAgaGVpZ2h0OiAnMTAwJScsXG59KTtcbmV4cG9ydHMuU3R5bGVkSW5kaWNhdG9ycyA9ICgwLCBtYXRlcmlhbF8xLnN0eWxlZCkoXCJkaXZcIikoe1xuICAgIHdpZHRoOiBcIjEwMCVcIixcbiAgICBtYXJnaW5Ub3A6IFwiMTBweFwiLFxuICAgIHRleHRBbGlnbjogXCJjZW50ZXJcIlxufSk7XG5leHBvcnRzLlN0eWxlZEZpYmVyTWFudWFsUmVjb3JkSWNvbiA9ICgwLCBtYXRlcmlhbF8xLnN0eWxlZCkoRmliZXJNYW51YWxSZWNvcmRfMS5kZWZhdWx0KSh7XG4gICAgZm9udFNpemU6IFwiMTVweFwiLFxufSk7XG5leHBvcnRzLlN0eWxlZEluZGljYXRvckljb25CdXR0b24gPSAoMCwgbWF0ZXJpYWxfMS5zdHlsZWQpKG1hdGVyaWFsXzEuSWNvbkJ1dHRvbiwgeyBzaG91bGRGb3J3YXJkUHJvcDogZnVuY3Rpb24gKHByb3BOYW1lKSB7IHJldHVybiAhcHJvcE5hbWUuc3RhcnRzV2l0aCgnJCcpOyB9IH0pKGZ1bmN0aW9uIChfYSkge1xuICAgIHZhciAkYWN0aXZlID0gX2EuJGFjdGl2ZTtcbiAgICByZXR1cm4gKHtcbiAgICAgICAgY3Vyc29yOiBcInBvaW50ZXJcIixcbiAgICAgICAgdHJhbnNpdGlvbjogXCIyMDBtc1wiLFxuICAgICAgICBwYWRkaW5nOiAwLFxuICAgICAgICBjb2xvcjogJGFjdGl2ZSA/IFwiIzQ5NDk0OVwiIDogXCIjYWZhZmFmXCIsXG4gICAgICAgICcmOmhvdmVyJzoge1xuICAgICAgICAgICAgY29sb3I6ICRhY3RpdmUgPyBcIiM0OTQ5NDlcIiA6IFwiIzFmMWYxZlwiLFxuICAgICAgICB9LFxuICAgICAgICAnJjphY3RpdmUnOiB7XG4gICAgICAgICAgICBjb2xvcjogJGFjdGl2ZSA/IFwiIzQ5NDk0OVwiIDogXCIjMWYxZjFmXCIsXG4gICAgICAgIH1cbiAgICB9KTtcbn0pO1xuZXhwb3J0cy5TdHlsZWRJY29uQnV0dG9uID0gKDAsIG1hdGVyaWFsXzEuc3R5bGVkKShtYXRlcmlhbF8xLkljb25CdXR0b24sIHsgc2hvdWxkRm9yd2FyZFByb3A6IGZ1bmN0aW9uIChwcm9wTmFtZSkgeyByZXR1cm4gIXByb3BOYW1lLnN0YXJ0c1dpdGgoJyQnKTsgfSB9KShmdW5jdGlvbiAoX2EpIHtcbiAgICB2YXIgJGFsd2F5c1Zpc2libGUgPSBfYS4kYWx3YXlzVmlzaWJsZTtcbiAgICByZXR1cm4gKHtcbiAgICAgICAgbWFyZ2luOiBcIjAgMTBweFwiLFxuICAgICAgICBwb3NpdGlvbjogXCJyZWxhdGl2ZVwiLFxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IFwiIzQ5NDk0OVwiLFxuICAgICAgICB0b3A6IFwiY2FsYyg1MCUgLSAyMHB4KSAhaW1wb3J0YW50XCIsXG4gICAgICAgIGNvbG9yOiBcIndoaXRlXCIsXG4gICAgICAgIGZvbnRTaXplOiBcIjMwcHhcIixcbiAgICAgICAgdHJhbnNpdGlvbjogXCIyMDBtc1wiLFxuICAgICAgICBjdXJzb3I6IFwicG9pbnRlclwiLFxuICAgICAgICBvcGFjaXR5OiAkYWx3YXlzVmlzaWJsZSA/ICcxJyA6ICcwJyxcbiAgICAgICAgJyY6aG92ZXInOiB7XG4gICAgICAgICAgICBvcGFjaXR5OiBcIjAuNiAhaW1wb3J0YW50XCIsXG4gICAgICAgIH0sXG4gICAgfSk7XG59KTtcbmV4cG9ydHMuU3R5bGVkQnV0dG9uV3JhcHBlciA9ICgwLCBtYXRlcmlhbF8xLnN0eWxlZCkoXCJkaXZcIiwgeyBzaG91bGRGb3J3YXJkUHJvcDogZnVuY3Rpb24gKHByb3BOYW1lKSB7IHJldHVybiAhcHJvcE5hbWUuc3RhcnRzV2l0aCgnJCcpOyB9IH0pKGZ1bmN0aW9uIChfYSkge1xuICAgIHZhciAkbmV4dCA9IF9hLiRuZXh0LCAkcHJldiA9IF9hLiRwcmV2LCAkZnVsbEhlaWdodEhvdmVyID0gX2EuJGZ1bGxIZWlnaHRIb3ZlcjtcbiAgICByZXR1cm4gKF9fYXNzaWduKF9fYXNzaWduKF9fYXNzaWduKHsgcG9zaXRpb246IFwiYWJzb2x1dGVcIiwgaGVpZ2h0OiBcIjEwMHB4XCIsIGJhY2tncm91bmRDb2xvcjogXCJ0cmFuc3BhcmVudFwiLCB6SW5kZXg6IDEsIHRvcDogXCJjYWxjKDUwJSAtIDcwcHgpXCIsICcmOmhvdmVyJzoge1xuICAgICAgICAgICAgJyYgYnV0dG9uJzoge1xuICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogXCJibGFja1wiLFxuICAgICAgICAgICAgICAgIGZpbHRlcjogXCJicmlnaHRuZXNzKDEyMCUpXCIsXG4gICAgICAgICAgICAgICAgb3BhY2l0eTogXCIwLjRcIlxuICAgICAgICAgICAgfVxuICAgICAgICB9IH0sICgkZnVsbEhlaWdodEhvdmVyID8ge1xuICAgICAgICBoZWlnaHQ6IFwiMTAwJVwiLFxuICAgICAgICB0b3A6IFwiMFwiXG4gICAgfSA6IHVuZGVmaW5lZCkpLCAoJG5leHQgPyB7IHJpZ2h0OiAwIH0gOiB1bmRlZmluZWQpKSwgKCRwcmV2ID8geyBsZWZ0OiAwIH0gOiB1bmRlZmluZWQpKSk7XG59KTtcbiIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fYXNzaWduID0gKHRoaXMgJiYgdGhpcy5fX2Fzc2lnbikgfHwgZnVuY3Rpb24gKCkge1xuICAgIF9fYXNzaWduID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbih0KSB7XG4gICAgICAgIGZvciAodmFyIHMsIGkgPSAxLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xuICAgICAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSlcbiAgICAgICAgICAgICAgICB0W3BdID0gc1twXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdDtcbiAgICB9O1xuICAgIHJldHVybiBfX2Fzc2lnbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufTtcbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9KTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19zZXRNb2R1bGVEZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX3NldE1vZHVsZURlZmF1bHQpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgXCJkZWZhdWx0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHYgfSk7XG59KSA6IGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBvW1wiZGVmYXVsdFwiXSA9IHY7XG59KTtcbnZhciBfX2ltcG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0U3RhcikgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIGlmIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpIHJldHVybiBtb2Q7XG4gICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgIGlmIChtb2QgIT0gbnVsbCkgZm9yICh2YXIgayBpbiBtb2QpIGlmIChrICE9PSBcImRlZmF1bHRcIiAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobW9kLCBrKSkgX19jcmVhdGVCaW5kaW5nKHJlc3VsdCwgbW9kLCBrKTtcbiAgICBfX3NldE1vZHVsZURlZmF1bHQocmVzdWx0LCBtb2QpO1xuICAgIHJldHVybiByZXN1bHQ7XG59O1xudmFyIF9fcmVzdCA9ICh0aGlzICYmIHRoaXMuX19yZXN0KSB8fCBmdW5jdGlvbiAocywgZSkge1xuICAgIHZhciB0ID0ge307XG4gICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApICYmIGUuaW5kZXhPZihwKSA8IDApXG4gICAgICAgIHRbcF0gPSBzW3BdO1xuICAgIGlmIChzICE9IG51bGwgJiYgdHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPT09IFwiZnVuY3Rpb25cIilcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIHAgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHMpOyBpIDwgcC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKGUuaW5kZXhPZihwW2ldKSA8IDAgJiYgT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHMsIHBbaV0pKVxuICAgICAgICAgICAgICAgIHRbcFtpXV0gPSBzW3BbaV1dO1xuICAgICAgICB9XG4gICAgcmV0dXJuIHQ7XG59O1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy51c2VJbnRlcnZhbCA9IGV4cG9ydHMuc2FuaXRpemVQcm9wcyA9IGV4cG9ydHMuc2FuaXRpemVOYXZQcm9wcyA9IHZvaWQgMDtcbnZhciBOYXZpZ2F0ZUJlZm9yZV8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJAbXVpL2ljb25zLW1hdGVyaWFsL05hdmlnYXRlQmVmb3JlXCIpKTtcbnZhciBOYXZpZ2F0ZU5leHRfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiQG11aS9pY29ucy1tYXRlcmlhbC9OYXZpZ2F0ZU5leHRcIikpO1xudmFyIHJlYWN0XzEgPSBfX2ltcG9ydFN0YXIocmVxdWlyZShcInJlYWN0XCIpKTtcbjtcbnZhciBzYW5pdGl6ZU5hdlByb3BzID0gZnVuY3Rpb24gKHByb3BzKSB7XG4gICAgdmFyIF9hID0gcHJvcHMgfHwge30sIGNsYXNzTmFtZSA9IF9hLmNsYXNzTmFtZSwgc3R5bGUgPSBfYS5zdHlsZSwgcmVzdCA9IF9fcmVzdChfYSwgW1wiY2xhc3NOYW1lXCIsIFwic3R5bGVcIl0pO1xuICAgIHJldHVybiBwcm9wcyAhPT0gdW5kZWZpbmVkID8gX19hc3NpZ24oeyBzdHlsZTogcHJvcHMuc3R5bGUgIT09IHVuZGVmaW5lZCA/IHByb3BzLnN0eWxlIDoge30sIGNsYXNzTmFtZTogcHJvcHMuY2xhc3NOYW1lICE9PSB1bmRlZmluZWQgPyBwcm9wcy5jbGFzc05hbWUgOiBcIlwiIH0sIHJlc3QpIDogX19hc3NpZ24oeyBzdHlsZToge30sIGNsYXNzTmFtZTogXCJcIiB9LCByZXN0KTtcbn07XG5leHBvcnRzLnNhbml0aXplTmF2UHJvcHMgPSBzYW5pdGl6ZU5hdlByb3BzO1xudmFyIHNhbml0aXplUHJvcHMgPSBmdW5jdGlvbiAocHJvcHMpIHtcbiAgICB2YXIgYW5pbWF0aW9uID0gcHJvcHMuYW5pbWF0aW9uICE9PSB1bmRlZmluZWQgPyBwcm9wcy5hbmltYXRpb24gOiBcImZhZGVcIjtcbiAgICB2YXIgZHVyYXRpb24gPSBwcm9wcy5kdXJhdGlvbiAhPT0gdW5kZWZpbmVkID8gcHJvcHMuZHVyYXRpb24gOiAoYW5pbWF0aW9uID09PSBcImZhZGVcIiA/IDUwMCA6IDIwMCk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgc3g6IHByb3BzLnN4ICE9PSB1bmRlZmluZWQgPyBwcm9wcy5zeCA6IHt9LFxuICAgICAgICBjbGFzc05hbWU6IHByb3BzLmNsYXNzTmFtZSAhPT0gdW5kZWZpbmVkID8gcHJvcHMuY2xhc3NOYW1lIDogXCJcIixcbiAgICAgICAgY2hpbGRyZW46IHByb3BzLmNoaWxkcmVuID8gcHJvcHMuY2hpbGRyZW4gOiBbXSxcbiAgICAgICAgaGVpZ2h0OiBwcm9wcy5oZWlnaHQsXG4gICAgICAgIGluZGV4OiBwcm9wcy5pbmRleCAhPT0gdW5kZWZpbmVkID8gcHJvcHMuaW5kZXggOiAwLFxuICAgICAgICBzdHJpY3RJbmRleGluZzogcHJvcHMuc3RyaWN0SW5kZXhpbmcgIT09IHVuZGVmaW5lZCA/IHByb3BzLnN0cmljdEluZGV4aW5nIDogdHJ1ZSxcbiAgICAgICAgYXV0b1BsYXk6IHByb3BzLmF1dG9QbGF5ICE9PSB1bmRlZmluZWQgPyBwcm9wcy5hdXRvUGxheSA6IHRydWUsXG4gICAgICAgIHN0b3BBdXRvUGxheU9uSG92ZXI6IHByb3BzLnN0b3BBdXRvUGxheU9uSG92ZXIgIT09IHVuZGVmaW5lZCA/IHByb3BzLnN0b3BBdXRvUGxheU9uSG92ZXIgOiB0cnVlLFxuICAgICAgICBpbnRlcnZhbDogcHJvcHMuaW50ZXJ2YWwgIT09IHVuZGVmaW5lZCA/IHByb3BzLmludGVydmFsIDogNDAwMCxcbiAgICAgICAgYW5pbWF0aW9uOiBhbmltYXRpb24sXG4gICAgICAgIGR1cmF0aW9uOiBkdXJhdGlvbixcbiAgICAgICAgc3dpcGU6IHByb3BzLnN3aXBlICE9PSB1bmRlZmluZWQgPyBwcm9wcy5zd2lwZSA6IHRydWUsXG4gICAgICAgIG5hdkJ1dHRvbnNBbHdheXNJbnZpc2libGU6IHByb3BzLm5hdkJ1dHRvbnNBbHdheXNJbnZpc2libGUgIT09IHVuZGVmaW5lZCA/IHByb3BzLm5hdkJ1dHRvbnNBbHdheXNJbnZpc2libGUgOiBmYWxzZSxcbiAgICAgICAgbmF2QnV0dG9uc0Fsd2F5c1Zpc2libGU6IHByb3BzLm5hdkJ1dHRvbnNBbHdheXNWaXNpYmxlICE9PSB1bmRlZmluZWQgPyBwcm9wcy5uYXZCdXR0b25zQWx3YXlzVmlzaWJsZSA6IGZhbHNlLFxuICAgICAgICBjeWNsZU5hdmlnYXRpb246IHByb3BzLmN5Y2xlTmF2aWdhdGlvbiAhPT0gdW5kZWZpbmVkID8gcHJvcHMuY3ljbGVOYXZpZ2F0aW9uIDogdHJ1ZSxcbiAgICAgICAgZnVsbEhlaWdodEhvdmVyOiBwcm9wcy5mdWxsSGVpZ2h0SG92ZXIgIT09IHVuZGVmaW5lZCA/IHByb3BzLmZ1bGxIZWlnaHRIb3ZlciA6IHRydWUsXG4gICAgICAgIG5hdkJ1dHRvbnNXcmFwcGVyUHJvcHM6ICgwLCBleHBvcnRzLnNhbml0aXplTmF2UHJvcHMpKHByb3BzLm5hdkJ1dHRvbnNXcmFwcGVyUHJvcHMpLFxuICAgICAgICBuYXZCdXR0b25zUHJvcHM6ICgwLCBleHBvcnRzLnNhbml0aXplTmF2UHJvcHMpKHByb3BzLm5hdkJ1dHRvbnNQcm9wcyksXG4gICAgICAgIE5hdkJ1dHRvbjogcHJvcHMuTmF2QnV0dG9uLFxuICAgICAgICBOZXh0SWNvbjogcHJvcHMuTmV4dEljb24gIT09IHVuZGVmaW5lZCA/IHByb3BzLk5leHRJY29uIDogcmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoTmF2aWdhdGVOZXh0XzEuZGVmYXVsdCwgbnVsbCksXG4gICAgICAgIFByZXZJY29uOiBwcm9wcy5QcmV2SWNvbiAhPT0gdW5kZWZpbmVkID8gcHJvcHMuUHJldkljb24gOiByZWFjdF8xLmRlZmF1bHQuY3JlYXRlRWxlbWVudChOYXZpZ2F0ZUJlZm9yZV8xLmRlZmF1bHQsIG51bGwpLFxuICAgICAgICBpbmRpY2F0b3JzOiBwcm9wcy5pbmRpY2F0b3JzICE9PSB1bmRlZmluZWQgPyBwcm9wcy5pbmRpY2F0b3JzIDogdHJ1ZSxcbiAgICAgICAgaW5kaWNhdG9yQ29udGFpbmVyUHJvcHM6ICgwLCBleHBvcnRzLnNhbml0aXplTmF2UHJvcHMpKHByb3BzLmluZGljYXRvckNvbnRhaW5lclByb3BzKSxcbiAgICAgICAgaW5kaWNhdG9ySWNvbkJ1dHRvblByb3BzOiAoMCwgZXhwb3J0cy5zYW5pdGl6ZU5hdlByb3BzKShwcm9wcy5pbmRpY2F0b3JJY29uQnV0dG9uUHJvcHMpLFxuICAgICAgICBhY3RpdmVJbmRpY2F0b3JJY29uQnV0dG9uUHJvcHM6ICgwLCBleHBvcnRzLnNhbml0aXplTmF2UHJvcHMpKHByb3BzLmFjdGl2ZUluZGljYXRvckljb25CdXR0b25Qcm9wcyksXG4gICAgICAgIEluZGljYXRvckljb246IHByb3BzLkluZGljYXRvckljb24sXG4gICAgICAgIG9uQ2hhbmdlOiBwcm9wcy5vbkNoYW5nZSAhPT0gdW5kZWZpbmVkID8gcHJvcHMub25DaGFuZ2UgOiBmdW5jdGlvbiAoKSB7IH0sXG4gICAgICAgIGNoYW5nZU9uRmlyc3RSZW5kZXI6IHByb3BzLmNoYW5nZU9uRmlyc3RSZW5kZXIgIT09IHVuZGVmaW5lZCA/IHByb3BzLmNoYW5nZU9uRmlyc3RSZW5kZXIgOiBmYWxzZSxcbiAgICAgICAgbmV4dDogcHJvcHMubmV4dCAhPT0gdW5kZWZpbmVkID8gcHJvcHMubmV4dCA6IGZ1bmN0aW9uICgpIHsgfSxcbiAgICAgICAgcHJldjogcHJvcHMucHJldiAhPT0gdW5kZWZpbmVkID8gcHJvcHMucHJldiA6IGZ1bmN0aW9uICgpIHsgfSxcbiAgICB9O1xufTtcbmV4cG9ydHMuc2FuaXRpemVQcm9wcyA9IHNhbml0aXplUHJvcHM7XG52YXIgdXNlSW50ZXJ2YWwgPSBmdW5jdGlvbiAoY2FsbGJhY2ssIGRlbGF5KSB7XG4gICAgdmFyIHNhdmVkQ2FsbGJhY2sgPSAoMCwgcmVhY3RfMS51c2VSZWYpKGZ1bmN0aW9uICgpIHsgfSk7XG4gICAgLy8gUmVtZW1iZXIgdGhlIGxhdGVzdCBjYWxsYmFjay5cbiAgICAoMCwgcmVhY3RfMS51c2VFZmZlY3QpKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgc2F2ZWRDYWxsYmFjay5jdXJyZW50ID0gY2FsbGJhY2s7XG4gICAgfSwgW2NhbGxiYWNrXSk7XG4gICAgLy8gU2V0IHVwIHRoZSBpbnRlcnZhbC5cbiAgICAoMCwgcmVhY3RfMS51c2VFZmZlY3QpKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZnVuY3Rpb24gdGljaygpIHtcbiAgICAgICAgICAgIHNhdmVkQ2FsbGJhY2suY3VycmVudCgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkZWxheSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgdmFyIGlkXzEgPSBzZXRJbnRlcnZhbCh0aWNrLCBkZWxheSk7XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkgeyByZXR1cm4gY2xlYXJJbnRlcnZhbChpZF8xKTsgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkgeyB9O1xuICAgIH0sIFtkZWxheV0pO1xufTtcbmV4cG9ydHMudXNlSW50ZXJ2YWwgPSB1c2VJbnRlcnZhbDtcbiIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIENhcm91c2VsXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vY29tcG9uZW50cy9DYXJvdXNlbFwiKSk7XG5leHBvcnRzLmRlZmF1bHQgPSBDYXJvdXNlbF8xLmRlZmF1bHQ7XG4iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbnZhciB0c2xpYiA9IHJlcXVpcmUoJ3RzbGliJyk7XG5cbnZhciBjbGFtcCA9IGZ1bmN0aW9uIChtaW4sIG1heCkgeyByZXR1cm4gZnVuY3Rpb24gKHYpIHtcbiAgICByZXR1cm4gTWF0aC5tYXgoTWF0aC5taW4odiwgbWF4KSwgbWluKTtcbn07IH07XG52YXIgc2FuaXRpemUgPSBmdW5jdGlvbiAodikgeyByZXR1cm4gKHYgJSAxID8gTnVtYmVyKHYudG9GaXhlZCg1KSkgOiB2KTsgfTtcbnZhciBmbG9hdFJlZ2V4ID0gLygtKT8oW1xcZF0qXFwuP1tcXGRdKSsvZztcbnZhciBjb2xvclJlZ2V4ID0gLygjWzAtOWEtZl17Nn18I1swLTlhLWZdezN9fCMoPzpbMC05YS1mXXsyfSl7Miw0fXwocmdifGhzbClhP1xcKCgtP1tcXGRcXC5dKyU/WyxcXHNdKyl7MiwzfVxccypcXC8qXFxzKltcXGRcXC5dKyU/XFwpKS9naTtcbnZhciBzaW5nbGVDb2xvclJlZ2V4ID0gL14oI1swLTlhLWZdezN9fCMoPzpbMC05YS1mXXsyfSl7Miw0fXwocmdifGhzbClhP1xcKCgtP1tcXGRcXC5dKyU/WyxcXHNdKyl7MiwzfVxccypcXC8qXFxzKltcXGRcXC5dKyU/XFwpKSQvaTtcbmZ1bmN0aW9uIGlzU3RyaW5nKHYpIHtcbiAgICByZXR1cm4gdHlwZW9mIHYgPT09ICdzdHJpbmcnO1xufVxuXG52YXIgbnVtYmVyID0ge1xuICAgIHRlc3Q6IGZ1bmN0aW9uICh2KSB7IHJldHVybiB0eXBlb2YgdiA9PT0gJ251bWJlcic7IH0sXG4gICAgcGFyc2U6IHBhcnNlRmxvYXQsXG4gICAgdHJhbnNmb3JtOiBmdW5jdGlvbiAodikgeyByZXR1cm4gdjsgfSxcbn07XG52YXIgYWxwaGEgPSB0c2xpYi5fX2Fzc2lnbih0c2xpYi5fX2Fzc2lnbih7fSwgbnVtYmVyKSwgeyB0cmFuc2Zvcm06IGNsYW1wKDAsIDEpIH0pO1xudmFyIHNjYWxlID0gdHNsaWIuX19hc3NpZ24odHNsaWIuX19hc3NpZ24oe30sIG51bWJlciksIHsgZGVmYXVsdDogMSB9KTtcblxudmFyIGNyZWF0ZVVuaXRUeXBlID0gZnVuY3Rpb24gKHVuaXQpIHsgcmV0dXJuICh7XG4gICAgdGVzdDogZnVuY3Rpb24gKHYpIHtcbiAgICAgICAgcmV0dXJuIGlzU3RyaW5nKHYpICYmIHYuZW5kc1dpdGgodW5pdCkgJiYgdi5zcGxpdCgnICcpLmxlbmd0aCA9PT0gMTtcbiAgICB9LFxuICAgIHBhcnNlOiBwYXJzZUZsb2F0LFxuICAgIHRyYW5zZm9ybTogZnVuY3Rpb24gKHYpIHsgcmV0dXJuIFwiXCIgKyB2ICsgdW5pdDsgfSxcbn0pOyB9O1xudmFyIGRlZ3JlZXMgPSBjcmVhdGVVbml0VHlwZSgnZGVnJyk7XG52YXIgcGVyY2VudCA9IGNyZWF0ZVVuaXRUeXBlKCclJyk7XG52YXIgcHggPSBjcmVhdGVVbml0VHlwZSgncHgnKTtcbnZhciB2aCA9IGNyZWF0ZVVuaXRUeXBlKCd2aCcpO1xudmFyIHZ3ID0gY3JlYXRlVW5pdFR5cGUoJ3Z3Jyk7XG52YXIgcHJvZ3Jlc3NQZXJjZW50YWdlID0gdHNsaWIuX19hc3NpZ24odHNsaWIuX19hc3NpZ24oe30sIHBlcmNlbnQpLCB7IHBhcnNlOiBmdW5jdGlvbiAodikgeyByZXR1cm4gcGVyY2VudC5wYXJzZSh2KSAvIDEwMDsgfSwgdHJhbnNmb3JtOiBmdW5jdGlvbiAodikgeyByZXR1cm4gcGVyY2VudC50cmFuc2Zvcm0odiAqIDEwMCk7IH0gfSk7XG5cbnZhciBpc0NvbG9yU3RyaW5nID0gZnVuY3Rpb24gKHR5cGUsIHRlc3RQcm9wKSB7IHJldHVybiBmdW5jdGlvbiAodikge1xuICAgIHJldHVybiBCb29sZWFuKChpc1N0cmluZyh2KSAmJiBzaW5nbGVDb2xvclJlZ2V4LnRlc3QodikgJiYgdi5zdGFydHNXaXRoKHR5cGUpKSB8fFxuICAgICAgICAodGVzdFByb3AgJiYgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHYsIHRlc3RQcm9wKSkpO1xufTsgfTtcbnZhciBzcGxpdENvbG9yID0gZnVuY3Rpb24gKGFOYW1lLCBiTmFtZSwgY05hbWUpIHsgcmV0dXJuIGZ1bmN0aW9uICh2KSB7XG4gICAgdmFyIF9hO1xuICAgIGlmICghaXNTdHJpbmcodikpXG4gICAgICAgIHJldHVybiB2O1xuICAgIHZhciBfYiA9IHYubWF0Y2goZmxvYXRSZWdleCksIGEgPSBfYlswXSwgYiA9IF9iWzFdLCBjID0gX2JbMl0sIGFscGhhID0gX2JbM107XG4gICAgcmV0dXJuIF9hID0ge30sXG4gICAgICAgIF9hW2FOYW1lXSA9IHBhcnNlRmxvYXQoYSksXG4gICAgICAgIF9hW2JOYW1lXSA9IHBhcnNlRmxvYXQoYiksXG4gICAgICAgIF9hW2NOYW1lXSA9IHBhcnNlRmxvYXQoYyksXG4gICAgICAgIF9hLmFscGhhID0gYWxwaGEgIT09IHVuZGVmaW5lZCA/IHBhcnNlRmxvYXQoYWxwaGEpIDogMSxcbiAgICAgICAgX2E7XG59OyB9O1xuXG52YXIgaHNsYSA9IHtcbiAgICB0ZXN0OiBpc0NvbG9yU3RyaW5nKCdoc2wnLCAnaHVlJyksXG4gICAgcGFyc2U6IHNwbGl0Q29sb3IoJ2h1ZScsICdzYXR1cmF0aW9uJywgJ2xpZ2h0bmVzcycpLFxuICAgIHRyYW5zZm9ybTogZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgIHZhciBodWUgPSBfYS5odWUsIHNhdHVyYXRpb24gPSBfYS5zYXR1cmF0aW9uLCBsaWdodG5lc3MgPSBfYS5saWdodG5lc3MsIF9iID0gX2EuYWxwaGEsIGFscGhhJDEgPSBfYiA9PT0gdm9pZCAwID8gMSA6IF9iO1xuICAgICAgICByZXR1cm4gKCdoc2xhKCcgK1xuICAgICAgICAgICAgTWF0aC5yb3VuZChodWUpICtcbiAgICAgICAgICAgICcsICcgK1xuICAgICAgICAgICAgcGVyY2VudC50cmFuc2Zvcm0oc2FuaXRpemUoc2F0dXJhdGlvbikpICtcbiAgICAgICAgICAgICcsICcgK1xuICAgICAgICAgICAgcGVyY2VudC50cmFuc2Zvcm0oc2FuaXRpemUobGlnaHRuZXNzKSkgK1xuICAgICAgICAgICAgJywgJyArXG4gICAgICAgICAgICBzYW5pdGl6ZShhbHBoYS50cmFuc2Zvcm0oYWxwaGEkMSkpICtcbiAgICAgICAgICAgICcpJyk7XG4gICAgfSxcbn07XG5cbnZhciBjbGFtcFJnYlVuaXQgPSBjbGFtcCgwLCAyNTUpO1xudmFyIHJnYlVuaXQgPSB0c2xpYi5fX2Fzc2lnbih0c2xpYi5fX2Fzc2lnbih7fSwgbnVtYmVyKSwgeyB0cmFuc2Zvcm06IGZ1bmN0aW9uICh2KSB7IHJldHVybiBNYXRoLnJvdW5kKGNsYW1wUmdiVW5pdCh2KSk7IH0gfSk7XG52YXIgcmdiYSA9IHtcbiAgICB0ZXN0OiBpc0NvbG9yU3RyaW5nKCdyZ2InLCAncmVkJyksXG4gICAgcGFyc2U6IHNwbGl0Q29sb3IoJ3JlZCcsICdncmVlbicsICdibHVlJyksXG4gICAgdHJhbnNmb3JtOiBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgdmFyIHJlZCA9IF9hLnJlZCwgZ3JlZW4gPSBfYS5ncmVlbiwgYmx1ZSA9IF9hLmJsdWUsIF9iID0gX2EuYWxwaGEsIGFscGhhJDEgPSBfYiA9PT0gdm9pZCAwID8gMSA6IF9iO1xuICAgICAgICByZXR1cm4gJ3JnYmEoJyArXG4gICAgICAgICAgICByZ2JVbml0LnRyYW5zZm9ybShyZWQpICtcbiAgICAgICAgICAgICcsICcgK1xuICAgICAgICAgICAgcmdiVW5pdC50cmFuc2Zvcm0oZ3JlZW4pICtcbiAgICAgICAgICAgICcsICcgK1xuICAgICAgICAgICAgcmdiVW5pdC50cmFuc2Zvcm0oYmx1ZSkgK1xuICAgICAgICAgICAgJywgJyArXG4gICAgICAgICAgICBzYW5pdGl6ZShhbHBoYS50cmFuc2Zvcm0oYWxwaGEkMSkpICtcbiAgICAgICAgICAgICcpJztcbiAgICB9LFxufTtcblxuZnVuY3Rpb24gcGFyc2VIZXgodikge1xuICAgIHZhciByID0gJyc7XG4gICAgdmFyIGcgPSAnJztcbiAgICB2YXIgYiA9ICcnO1xuICAgIHZhciBhID0gJyc7XG4gICAgaWYgKHYubGVuZ3RoID4gNSkge1xuICAgICAgICByID0gdi5zdWJzdHIoMSwgMik7XG4gICAgICAgIGcgPSB2LnN1YnN0cigzLCAyKTtcbiAgICAgICAgYiA9IHYuc3Vic3RyKDUsIDIpO1xuICAgICAgICBhID0gdi5zdWJzdHIoNywgMik7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByID0gdi5zdWJzdHIoMSwgMSk7XG4gICAgICAgIGcgPSB2LnN1YnN0cigyLCAxKTtcbiAgICAgICAgYiA9IHYuc3Vic3RyKDMsIDEpO1xuICAgICAgICBhID0gdi5zdWJzdHIoNCwgMSk7XG4gICAgICAgIHIgKz0gcjtcbiAgICAgICAgZyArPSBnO1xuICAgICAgICBiICs9IGI7XG4gICAgICAgIGEgKz0gYTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgcmVkOiBwYXJzZUludChyLCAxNiksXG4gICAgICAgIGdyZWVuOiBwYXJzZUludChnLCAxNiksXG4gICAgICAgIGJsdWU6IHBhcnNlSW50KGIsIDE2KSxcbiAgICAgICAgYWxwaGE6IGEgPyBwYXJzZUludChhLCAxNikgLyAyNTUgOiAxLFxuICAgIH07XG59XG52YXIgaGV4ID0ge1xuICAgIHRlc3Q6IGlzQ29sb3JTdHJpbmcoJyMnKSxcbiAgICBwYXJzZTogcGFyc2VIZXgsXG4gICAgdHJhbnNmb3JtOiByZ2JhLnRyYW5zZm9ybSxcbn07XG5cbnZhciBjb2xvciA9IHtcbiAgICB0ZXN0OiBmdW5jdGlvbiAodikgeyByZXR1cm4gcmdiYS50ZXN0KHYpIHx8IGhleC50ZXN0KHYpIHx8IGhzbGEudGVzdCh2KTsgfSxcbiAgICBwYXJzZTogZnVuY3Rpb24gKHYpIHtcbiAgICAgICAgaWYgKHJnYmEudGVzdCh2KSkge1xuICAgICAgICAgICAgcmV0dXJuIHJnYmEucGFyc2Uodik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaHNsYS50ZXN0KHYpKSB7XG4gICAgICAgICAgICByZXR1cm4gaHNsYS5wYXJzZSh2KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBoZXgucGFyc2Uodik7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIHRyYW5zZm9ybTogZnVuY3Rpb24gKHYpIHtcbiAgICAgICAgcmV0dXJuIGlzU3RyaW5nKHYpXG4gICAgICAgICAgICA/IHZcbiAgICAgICAgICAgIDogdi5oYXNPd25Qcm9wZXJ0eSgncmVkJylcbiAgICAgICAgICAgICAgICA/IHJnYmEudHJhbnNmb3JtKHYpXG4gICAgICAgICAgICAgICAgOiBoc2xhLnRyYW5zZm9ybSh2KTtcbiAgICB9LFxufTtcblxudmFyIGNvbG9yVG9rZW4gPSAnJHtjfSc7XG52YXIgbnVtYmVyVG9rZW4gPSAnJHtufSc7XG5mdW5jdGlvbiB0ZXN0KHYpIHtcbiAgICB2YXIgX2EsIF9iLCBfYywgX2Q7XG4gICAgcmV0dXJuIChpc05hTih2KSAmJlxuICAgICAgICBpc1N0cmluZyh2KSAmJlxuICAgICAgICAoKF9iID0gKF9hID0gdi5tYXRjaChmbG9hdFJlZ2V4KSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmxlbmd0aCkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogMCkgKyAoKF9kID0gKF9jID0gdi5tYXRjaChjb2xvclJlZ2V4KSkgPT09IG51bGwgfHwgX2MgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9jLmxlbmd0aCkgIT09IG51bGwgJiYgX2QgIT09IHZvaWQgMCA/IF9kIDogMCkgPiAwKTtcbn1cbmZ1bmN0aW9uIGFuYWx5c2Uodikge1xuICAgIHZhciB2YWx1ZXMgPSBbXTtcbiAgICB2YXIgbnVtQ29sb3JzID0gMDtcbiAgICB2YXIgY29sb3JzID0gdi5tYXRjaChjb2xvclJlZ2V4KTtcbiAgICBpZiAoY29sb3JzKSB7XG4gICAgICAgIG51bUNvbG9ycyA9IGNvbG9ycy5sZW5ndGg7XG4gICAgICAgIHYgPSB2LnJlcGxhY2UoY29sb3JSZWdleCwgY29sb3JUb2tlbik7XG4gICAgICAgIHZhbHVlcy5wdXNoLmFwcGx5KHZhbHVlcywgY29sb3JzLm1hcChjb2xvci5wYXJzZSkpO1xuICAgIH1cbiAgICB2YXIgbnVtYmVycyA9IHYubWF0Y2goZmxvYXRSZWdleCk7XG4gICAgaWYgKG51bWJlcnMpIHtcbiAgICAgICAgdiA9IHYucmVwbGFjZShmbG9hdFJlZ2V4LCBudW1iZXJUb2tlbik7XG4gICAgICAgIHZhbHVlcy5wdXNoLmFwcGx5KHZhbHVlcywgbnVtYmVycy5tYXAobnVtYmVyLnBhcnNlKSk7XG4gICAgfVxuICAgIHJldHVybiB7IHZhbHVlczogdmFsdWVzLCBudW1Db2xvcnM6IG51bUNvbG9ycywgdG9rZW5pc2VkOiB2IH07XG59XG5mdW5jdGlvbiBwYXJzZSh2KSB7XG4gICAgcmV0dXJuIGFuYWx5c2UodikudmFsdWVzO1xufVxuZnVuY3Rpb24gY3JlYXRlVHJhbnNmb3JtZXIodikge1xuICAgIHZhciBfYSA9IGFuYWx5c2UodiksIHZhbHVlcyA9IF9hLnZhbHVlcywgbnVtQ29sb3JzID0gX2EubnVtQ29sb3JzLCB0b2tlbmlzZWQgPSBfYS50b2tlbmlzZWQ7XG4gICAgdmFyIG51bVZhbHVlcyA9IHZhbHVlcy5sZW5ndGg7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICh2KSB7XG4gICAgICAgIHZhciBvdXRwdXQgPSB0b2tlbmlzZWQ7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbnVtVmFsdWVzOyBpKyspIHtcbiAgICAgICAgICAgIG91dHB1dCA9IG91dHB1dC5yZXBsYWNlKGkgPCBudW1Db2xvcnMgPyBjb2xvclRva2VuIDogbnVtYmVyVG9rZW4sIGkgPCBudW1Db2xvcnMgPyBjb2xvci50cmFuc2Zvcm0odltpXSkgOiBzYW5pdGl6ZSh2W2ldKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG91dHB1dDtcbiAgICB9O1xufVxudmFyIGNvbnZlcnROdW1iZXJzVG9aZXJvID0gZnVuY3Rpb24gKHYpIHtcbiAgICByZXR1cm4gdHlwZW9mIHYgPT09ICdudW1iZXInID8gMCA6IHY7XG59O1xuZnVuY3Rpb24gZ2V0QW5pbWF0YWJsZU5vbmUodikge1xuICAgIHZhciBwYXJzZWQgPSBwYXJzZSh2KTtcbiAgICB2YXIgdHJhbnNmb3JtZXIgPSBjcmVhdGVUcmFuc2Zvcm1lcih2KTtcbiAgICByZXR1cm4gdHJhbnNmb3JtZXIocGFyc2VkLm1hcChjb252ZXJ0TnVtYmVyc1RvWmVybykpO1xufVxudmFyIGNvbXBsZXggPSB7IHRlc3Q6IHRlc3QsIHBhcnNlOiBwYXJzZSwgY3JlYXRlVHJhbnNmb3JtZXI6IGNyZWF0ZVRyYW5zZm9ybWVyLCBnZXRBbmltYXRhYmxlTm9uZTogZ2V0QW5pbWF0YWJsZU5vbmUgfTtcblxudmFyIG1heERlZmF1bHRzID0gbmV3IFNldChbJ2JyaWdodG5lc3MnLCAnY29udHJhc3QnLCAnc2F0dXJhdGUnLCAnb3BhY2l0eSddKTtcbmZ1bmN0aW9uIGFwcGx5RGVmYXVsdEZpbHRlcih2KSB7XG4gICAgdmFyIF9hID0gdi5zbGljZSgwLCAtMSkuc3BsaXQoJygnKSwgbmFtZSA9IF9hWzBdLCB2YWx1ZSA9IF9hWzFdO1xuICAgIGlmIChuYW1lID09PSAnZHJvcC1zaGFkb3cnKVxuICAgICAgICByZXR1cm4gdjtcbiAgICB2YXIgbnVtYmVyID0gKHZhbHVlLm1hdGNoKGZsb2F0UmVnZXgpIHx8IFtdKVswXTtcbiAgICBpZiAoIW51bWJlcilcbiAgICAgICAgcmV0dXJuIHY7XG4gICAgdmFyIHVuaXQgPSB2YWx1ZS5yZXBsYWNlKG51bWJlciwgJycpO1xuICAgIHZhciBkZWZhdWx0VmFsdWUgPSBtYXhEZWZhdWx0cy5oYXMobmFtZSkgPyAxIDogMDtcbiAgICBpZiAobnVtYmVyICE9PSB2YWx1ZSlcbiAgICAgICAgZGVmYXVsdFZhbHVlICo9IDEwMDtcbiAgICByZXR1cm4gbmFtZSArICcoJyArIGRlZmF1bHRWYWx1ZSArIHVuaXQgKyAnKSc7XG59XG52YXIgZnVuY3Rpb25SZWdleCA9IC8oW2Etei1dKilcXCguKj9cXCkvZztcbnZhciBmaWx0ZXIgPSB0c2xpYi5fX2Fzc2lnbih0c2xpYi5fX2Fzc2lnbih7fSwgY29tcGxleCksIHsgZ2V0QW5pbWF0YWJsZU5vbmU6IGZ1bmN0aW9uICh2KSB7XG4gICAgICAgIHZhciBmdW5jdGlvbnMgPSB2Lm1hdGNoKGZ1bmN0aW9uUmVnZXgpO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb25zID8gZnVuY3Rpb25zLm1hcChhcHBseURlZmF1bHRGaWx0ZXIpLmpvaW4oJyAnKSA6IHY7XG4gICAgfSB9KTtcblxuZXhwb3J0cy5hbHBoYSA9IGFscGhhO1xuZXhwb3J0cy5jb2xvciA9IGNvbG9yO1xuZXhwb3J0cy5jb21wbGV4ID0gY29tcGxleDtcbmV4cG9ydHMuZGVncmVlcyA9IGRlZ3JlZXM7XG5leHBvcnRzLmZpbHRlciA9IGZpbHRlcjtcbmV4cG9ydHMuaGV4ID0gaGV4O1xuZXhwb3J0cy5oc2xhID0gaHNsYTtcbmV4cG9ydHMubnVtYmVyID0gbnVtYmVyO1xuZXhwb3J0cy5wZXJjZW50ID0gcGVyY2VudDtcbmV4cG9ydHMucHJvZ3Jlc3NQZXJjZW50YWdlID0gcHJvZ3Jlc3NQZXJjZW50YWdlO1xuZXhwb3J0cy5weCA9IHB4O1xuZXhwb3J0cy5yZ2JVbml0ID0gcmdiVW5pdDtcbmV4cG9ydHMucmdiYSA9IHJnYmE7XG5leHBvcnRzLnNjYWxlID0gc2NhbGU7XG5leHBvcnRzLnZoID0gdmg7XG5leHBvcnRzLnZ3ID0gdnc7XG4iLCIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG5Db3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cblxuUGVybWlzc2lvbiB0byB1c2UsIGNvcHksIG1vZGlmeSwgYW5kL29yIGRpc3RyaWJ1dGUgdGhpcyBzb2Z0d2FyZSBmb3IgYW55XG5wdXJwb3NlIHdpdGggb3Igd2l0aG91dCBmZWUgaXMgaGVyZWJ5IGdyYW50ZWQuXG5cblRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIgQU5EIFRIRSBBVVRIT1IgRElTQ0xBSU1TIEFMTCBXQVJSQU5USUVTIFdJVEhcblJFR0FSRCBUTyBUSElTIFNPRlRXQVJFIElOQ0xVRElORyBBTEwgSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWVxuQU5EIEZJVE5FU1MuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1IgQkUgTElBQkxFIEZPUiBBTlkgU1BFQ0lBTCwgRElSRUNULFxuSU5ESVJFQ1QsIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyBPUiBBTlkgREFNQUdFUyBXSEFUU09FVkVSIFJFU1VMVElORyBGUk9NXG5MT1NTIE9GIFVTRSwgREFUQSBPUiBQUk9GSVRTLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgTkVHTElHRU5DRSBPUlxuT1RIRVIgVE9SVElPVVMgQUNUSU9OLCBBUklTSU5HIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFVTRSBPUlxuUEVSRk9STUFOQ0UgT0YgVEhJUyBTT0ZUV0FSRS5cbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG4vKiBnbG9iYWwgUmVmbGVjdCwgUHJvbWlzZSwgU3VwcHJlc3NlZEVycm9yLCBTeW1ib2wgKi9cblxudmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbihkLCBiKSB7XG4gIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcbiAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChiLCBwKSkgZFtwXSA9IGJbcF07IH07XG4gIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIF9fZXh0ZW5kcyhkLCBiKSB7XG4gIGlmICh0eXBlb2YgYiAhPT0gXCJmdW5jdGlvblwiICYmIGIgIT09IG51bGwpXG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2xhc3MgZXh0ZW5kcyB2YWx1ZSBcIiArIFN0cmluZyhiKSArIFwiIGlzIG5vdCBhIGNvbnN0cnVjdG9yIG9yIG51bGxcIik7XG4gIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG59XG5cbmV4cG9ydCB2YXIgX19hc3NpZ24gPSBmdW5jdGlvbigpIHtcbiAgX19hc3NpZ24gPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uIF9fYXNzaWduKHQpIHtcbiAgICAgIGZvciAodmFyIHMsIGkgPSAxLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xuICAgICAgICAgIHMgPSBhcmd1bWVudHNbaV07XG4gICAgICAgICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApKSB0W3BdID0gc1twXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0O1xuICB9XG4gIHJldHVybiBfX2Fzc2lnbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX19yZXN0KHMsIGUpIHtcbiAgdmFyIHQgPSB7fTtcbiAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApICYmIGUuaW5kZXhPZihwKSA8IDApXG4gICAgICB0W3BdID0gc1twXTtcbiAgaWYgKHMgIT0gbnVsbCAmJiB0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gXCJmdW5jdGlvblwiKVxuICAgICAgZm9yICh2YXIgaSA9IDAsIHAgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHMpOyBpIDwgcC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGlmIChlLmluZGV4T2YocFtpXSkgPCAwICYmIE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzLCBwW2ldKSlcbiAgICAgICAgICAgICAgdFtwW2ldXSA9IHNbcFtpXV07XG4gICAgICB9XG4gIHJldHVybiB0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX19kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xuICB2YXIgYyA9IGFyZ3VtZW50cy5sZW5ndGgsIHIgPSBjIDwgMyA/IHRhcmdldCA6IGRlc2MgPT09IG51bGwgPyBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkgOiBkZXNjLCBkO1xuICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgciA9IFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO1xuICBlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xuICByZXR1cm4gYyA+IDMgJiYgciAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHIpLCByO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX19wYXJhbShwYXJhbUluZGV4LCBkZWNvcmF0b3IpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICh0YXJnZXQsIGtleSkgeyBkZWNvcmF0b3IodGFyZ2V0LCBrZXksIHBhcmFtSW5kZXgpOyB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2VzRGVjb3JhdGUoY3RvciwgZGVzY3JpcHRvckluLCBkZWNvcmF0b3JzLCBjb250ZXh0SW4sIGluaXRpYWxpemVycywgZXh0cmFJbml0aWFsaXplcnMpIHtcbiAgZnVuY3Rpb24gYWNjZXB0KGYpIHsgaWYgKGYgIT09IHZvaWQgMCAmJiB0eXBlb2YgZiAhPT0gXCJmdW5jdGlvblwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiRnVuY3Rpb24gZXhwZWN0ZWRcIik7IHJldHVybiBmOyB9XG4gIHZhciBraW5kID0gY29udGV4dEluLmtpbmQsIGtleSA9IGtpbmQgPT09IFwiZ2V0dGVyXCIgPyBcImdldFwiIDoga2luZCA9PT0gXCJzZXR0ZXJcIiA/IFwic2V0XCIgOiBcInZhbHVlXCI7XG4gIHZhciB0YXJnZXQgPSAhZGVzY3JpcHRvckluICYmIGN0b3IgPyBjb250ZXh0SW5bXCJzdGF0aWNcIl0gPyBjdG9yIDogY3Rvci5wcm90b3R5cGUgOiBudWxsO1xuICB2YXIgZGVzY3JpcHRvciA9IGRlc2NyaXB0b3JJbiB8fCAodGFyZ2V0ID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGNvbnRleHRJbi5uYW1lKSA6IHt9KTtcbiAgdmFyIF8sIGRvbmUgPSBmYWxzZTtcbiAgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIHZhciBjb250ZXh0ID0ge307XG4gICAgICBmb3IgKHZhciBwIGluIGNvbnRleHRJbikgY29udGV4dFtwXSA9IHAgPT09IFwiYWNjZXNzXCIgPyB7fSA6IGNvbnRleHRJbltwXTtcbiAgICAgIGZvciAodmFyIHAgaW4gY29udGV4dEluLmFjY2VzcykgY29udGV4dC5hY2Nlc3NbcF0gPSBjb250ZXh0SW4uYWNjZXNzW3BdO1xuICAgICAgY29udGV4dC5hZGRJbml0aWFsaXplciA9IGZ1bmN0aW9uIChmKSB7IGlmIChkb25lKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGFkZCBpbml0aWFsaXplcnMgYWZ0ZXIgZGVjb3JhdGlvbiBoYXMgY29tcGxldGVkXCIpOyBleHRyYUluaXRpYWxpemVycy5wdXNoKGFjY2VwdChmIHx8IG51bGwpKTsgfTtcbiAgICAgIHZhciByZXN1bHQgPSAoMCwgZGVjb3JhdG9yc1tpXSkoa2luZCA9PT0gXCJhY2Nlc3NvclwiID8geyBnZXQ6IGRlc2NyaXB0b3IuZ2V0LCBzZXQ6IGRlc2NyaXB0b3Iuc2V0IH0gOiBkZXNjcmlwdG9yW2tleV0sIGNvbnRleHQpO1xuICAgICAgaWYgKGtpbmQgPT09IFwiYWNjZXNzb3JcIikge1xuICAgICAgICAgIGlmIChyZXN1bHQgPT09IHZvaWQgMCkgY29udGludWU7XG4gICAgICAgICAgaWYgKHJlc3VsdCA9PT0gbnVsbCB8fCB0eXBlb2YgcmVzdWx0ICE9PSBcIm9iamVjdFwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiT2JqZWN0IGV4cGVjdGVkXCIpO1xuICAgICAgICAgIGlmIChfID0gYWNjZXB0KHJlc3VsdC5nZXQpKSBkZXNjcmlwdG9yLmdldCA9IF87XG4gICAgICAgICAgaWYgKF8gPSBhY2NlcHQocmVzdWx0LnNldCkpIGRlc2NyaXB0b3Iuc2V0ID0gXztcbiAgICAgICAgICBpZiAoXyA9IGFjY2VwdChyZXN1bHQuaW5pdCkpIGluaXRpYWxpemVycy51bnNoaWZ0KF8pO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAoXyA9IGFjY2VwdChyZXN1bHQpKSB7XG4gICAgICAgICAgaWYgKGtpbmQgPT09IFwiZmllbGRcIikgaW5pdGlhbGl6ZXJzLnVuc2hpZnQoXyk7XG4gICAgICAgICAgZWxzZSBkZXNjcmlwdG9yW2tleV0gPSBfO1xuICAgICAgfVxuICB9XG4gIGlmICh0YXJnZXQpIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGNvbnRleHRJbi5uYW1lLCBkZXNjcmlwdG9yKTtcbiAgZG9uZSA9IHRydWU7XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gX19ydW5Jbml0aWFsaXplcnModGhpc0FyZywgaW5pdGlhbGl6ZXJzLCB2YWx1ZSkge1xuICB2YXIgdXNlVmFsdWUgPSBhcmd1bWVudHMubGVuZ3RoID4gMjtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBpbml0aWFsaXplcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhbHVlID0gdXNlVmFsdWUgPyBpbml0aWFsaXplcnNbaV0uY2FsbCh0aGlzQXJnLCB2YWx1ZSkgOiBpbml0aWFsaXplcnNbaV0uY2FsbCh0aGlzQXJnKTtcbiAgfVxuICByZXR1cm4gdXNlVmFsdWUgPyB2YWx1ZSA6IHZvaWQgMDtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBfX3Byb3BLZXkoeCkge1xuICByZXR1cm4gdHlwZW9mIHggPT09IFwic3ltYm9sXCIgPyB4IDogXCJcIi5jb25jYXQoeCk7XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gX19zZXRGdW5jdGlvbk5hbWUoZiwgbmFtZSwgcHJlZml4KSB7XG4gIGlmICh0eXBlb2YgbmFtZSA9PT0gXCJzeW1ib2xcIikgbmFtZSA9IG5hbWUuZGVzY3JpcHRpb24gPyBcIltcIi5jb25jYXQobmFtZS5kZXNjcmlwdGlvbiwgXCJdXCIpIDogXCJcIjtcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShmLCBcIm5hbWVcIiwgeyBjb25maWd1cmFibGU6IHRydWUsIHZhbHVlOiBwcmVmaXggPyBcIlwiLmNvbmNhdChwcmVmaXgsIFwiIFwiLCBuYW1lKSA6IG5hbWUgfSk7XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gX19tZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSkge1xuICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QubWV0YWRhdGEgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIFJlZmxlY3QubWV0YWRhdGEobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX19hd2FpdGVyKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xuICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cbiAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XG4gICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XG4gIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX19nZW5lcmF0b3IodGhpc0FyZywgYm9keSkge1xuICB2YXIgXyA9IHsgbGFiZWw6IDAsIHNlbnQ6IGZ1bmN0aW9uKCkgeyBpZiAodFswXSAmIDEpIHRocm93IHRbMV07IHJldHVybiB0WzFdOyB9LCB0cnlzOiBbXSwgb3BzOiBbXSB9LCBmLCB5LCB0LCBnO1xuICByZXR1cm4gZyA9IHsgbmV4dDogdmVyYigwKSwgXCJ0aHJvd1wiOiB2ZXJiKDEpLCBcInJldHVyblwiOiB2ZXJiKDIpIH0sIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiAoZ1tTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9KSwgZztcbiAgZnVuY3Rpb24gdmVyYihuKSB7IHJldHVybiBmdW5jdGlvbiAodikgeyByZXR1cm4gc3RlcChbbiwgdl0pOyB9OyB9XG4gIGZ1bmN0aW9uIHN0ZXAob3ApIHtcbiAgICAgIGlmIChmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgZXhlY3V0aW5nLlwiKTtcbiAgICAgIHdoaWxlIChnICYmIChnID0gMCwgb3BbMF0gJiYgKF8gPSAwKSksIF8pIHRyeSB7XG4gICAgICAgICAgaWYgKGYgPSAxLCB5ICYmICh0ID0gb3BbMF0gJiAyID8geVtcInJldHVyblwiXSA6IG9wWzBdID8geVtcInRocm93XCJdIHx8ICgodCA9IHlbXCJyZXR1cm5cIl0pICYmIHQuY2FsbCh5KSwgMCkgOiB5Lm5leHQpICYmICEodCA9IHQuY2FsbCh5LCBvcFsxXSkpLmRvbmUpIHJldHVybiB0O1xuICAgICAgICAgIGlmICh5ID0gMCwgdCkgb3AgPSBbb3BbMF0gJiAyLCB0LnZhbHVlXTtcbiAgICAgICAgICBzd2l0Y2ggKG9wWzBdKSB7XG4gICAgICAgICAgICAgIGNhc2UgMDogY2FzZSAxOiB0ID0gb3A7IGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlIDQ6IF8ubGFiZWwrKzsgcmV0dXJuIHsgdmFsdWU6IG9wWzFdLCBkb25lOiBmYWxzZSB9O1xuICAgICAgICAgICAgICBjYXNlIDU6IF8ubGFiZWwrKzsgeSA9IG9wWzFdOyBvcCA9IFswXTsgY29udGludWU7XG4gICAgICAgICAgICAgIGNhc2UgNzogb3AgPSBfLm9wcy5wb3AoKTsgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcbiAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgIGlmICghKHQgPSBfLnRyeXMsIHQgPSB0Lmxlbmd0aCA+IDAgJiYgdFt0Lmxlbmd0aCAtIDFdKSAmJiAob3BbMF0gPT09IDYgfHwgb3BbMF0gPT09IDIpKSB7IF8gPSAwOyBjb250aW51ZTsgfVxuICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSAzICYmICghdCB8fCAob3BbMV0gPiB0WzBdICYmIG9wWzFdIDwgdFszXSkpKSB7IF8ubGFiZWwgPSBvcFsxXTsgYnJlYWs7IH1cbiAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gNiAmJiBfLmxhYmVsIDwgdFsxXSkgeyBfLmxhYmVsID0gdFsxXTsgdCA9IG9wOyBicmVhazsgfVxuICAgICAgICAgICAgICAgICAgaWYgKHQgJiYgXy5sYWJlbCA8IHRbMl0pIHsgXy5sYWJlbCA9IHRbMl07IF8ub3BzLnB1c2gob3ApOyBicmVhazsgfVxuICAgICAgICAgICAgICAgICAgaWYgKHRbMl0pIF8ub3BzLnBvcCgpO1xuICAgICAgICAgICAgICAgICAgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgb3AgPSBib2R5LmNhbGwodGhpc0FyZywgXyk7XG4gICAgICB9IGNhdGNoIChlKSB7IG9wID0gWzYsIGVdOyB5ID0gMDsgfSBmaW5hbGx5IHsgZiA9IHQgPSAwOyB9XG4gICAgICBpZiAob3BbMF0gJiA1KSB0aHJvdyBvcFsxXTsgcmV0dXJuIHsgdmFsdWU6IG9wWzBdID8gb3BbMV0gOiB2b2lkIDAsIGRvbmU6IHRydWUgfTtcbiAgfVxufVxuXG5leHBvcnQgdmFyIF9fY3JlYXRlQmluZGluZyA9IE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG0sIGspO1xuICBpZiAoIWRlc2MgfHwgKFwiZ2V0XCIgaW4gZGVzYyA/ICFtLl9fZXNNb2R1bGUgOiBkZXNjLndyaXRhYmxlIHx8IGRlc2MuY29uZmlndXJhYmxlKSkge1xuICAgICAgZGVzYyA9IHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfTtcbiAgfVxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIGRlc2MpO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgb1trMl0gPSBtW2tdO1xufSk7XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2V4cG9ydFN0YXIobSwgbykge1xuICBmb3IgKHZhciBwIGluIG0pIGlmIChwICE9PSBcImRlZmF1bHRcIiAmJiAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG8sIHApKSBfX2NyZWF0ZUJpbmRpbmcobywgbSwgcCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX3ZhbHVlcyhvKSB7XG4gIHZhciBzID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIFN5bWJvbC5pdGVyYXRvciwgbSA9IHMgJiYgb1tzXSwgaSA9IDA7XG4gIGlmIChtKSByZXR1cm4gbS5jYWxsKG8pO1xuICBpZiAobyAmJiB0eXBlb2Ygby5sZW5ndGggPT09IFwibnVtYmVyXCIpIHJldHVybiB7XG4gICAgICBuZXh0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgaWYgKG8gJiYgaSA+PSBvLmxlbmd0aCkgbyA9IHZvaWQgMDtcbiAgICAgICAgICByZXR1cm4geyB2YWx1ZTogbyAmJiBvW2krK10sIGRvbmU6ICFvIH07XG4gICAgICB9XG4gIH07XG4gIHRocm93IG5ldyBUeXBlRXJyb3IocyA/IFwiT2JqZWN0IGlzIG5vdCBpdGVyYWJsZS5cIiA6IFwiU3ltYm9sLml0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fcmVhZChvLCBuKSB7XG4gIHZhciBtID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9bU3ltYm9sLml0ZXJhdG9yXTtcbiAgaWYgKCFtKSByZXR1cm4gbztcbiAgdmFyIGkgPSBtLmNhbGwobyksIHIsIGFyID0gW10sIGU7XG4gIHRyeSB7XG4gICAgICB3aGlsZSAoKG4gPT09IHZvaWQgMCB8fCBuLS0gPiAwKSAmJiAhKHIgPSBpLm5leHQoKSkuZG9uZSkgYXIucHVzaChyLnZhbHVlKTtcbiAgfVxuICBjYXRjaCAoZXJyb3IpIHsgZSA9IHsgZXJyb3I6IGVycm9yIH07IH1cbiAgZmluYWxseSB7XG4gICAgICB0cnkge1xuICAgICAgICAgIGlmIChyICYmICFyLmRvbmUgJiYgKG0gPSBpW1wicmV0dXJuXCJdKSkgbS5jYWxsKGkpO1xuICAgICAgfVxuICAgICAgZmluYWxseSB7IGlmIChlKSB0aHJvdyBlLmVycm9yOyB9XG4gIH1cbiAgcmV0dXJuIGFyO1xufVxuXG4vKiogQGRlcHJlY2F0ZWQgKi9cbmV4cG9ydCBmdW5jdGlvbiBfX3NwcmVhZCgpIHtcbiAgZm9yICh2YXIgYXIgPSBbXSwgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspXG4gICAgICBhciA9IGFyLmNvbmNhdChfX3JlYWQoYXJndW1lbnRzW2ldKSk7XG4gIHJldHVybiBhcjtcbn1cblxuLyoqIEBkZXByZWNhdGVkICovXG5leHBvcnQgZnVuY3Rpb24gX19zcHJlYWRBcnJheXMoKSB7XG4gIGZvciAodmFyIHMgPSAwLCBpID0gMCwgaWwgPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgaWw7IGkrKykgcyArPSBhcmd1bWVudHNbaV0ubGVuZ3RoO1xuICBmb3IgKHZhciByID0gQXJyYXkocyksIGsgPSAwLCBpID0gMDsgaSA8IGlsOyBpKyspXG4gICAgICBmb3IgKHZhciBhID0gYXJndW1lbnRzW2ldLCBqID0gMCwgamwgPSBhLmxlbmd0aDsgaiA8IGpsOyBqKyssIGsrKylcbiAgICAgICAgICByW2tdID0gYVtqXTtcbiAgcmV0dXJuIHI7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX3NwcmVhZEFycmF5KHRvLCBmcm9tLCBwYWNrKSB7XG4gIGlmIChwYWNrIHx8IGFyZ3VtZW50cy5sZW5ndGggPT09IDIpIGZvciAodmFyIGkgPSAwLCBsID0gZnJvbS5sZW5ndGgsIGFyOyBpIDwgbDsgaSsrKSB7XG4gICAgICBpZiAoYXIgfHwgIShpIGluIGZyb20pKSB7XG4gICAgICAgICAgaWYgKCFhcikgYXIgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChmcm9tLCAwLCBpKTtcbiAgICAgICAgICBhcltpXSA9IGZyb21baV07XG4gICAgICB9XG4gIH1cbiAgcmV0dXJuIHRvLmNvbmNhdChhciB8fCBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChmcm9tKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2F3YWl0KHYpIHtcbiAgcmV0dXJuIHRoaXMgaW5zdGFuY2VvZiBfX2F3YWl0ID8gKHRoaXMudiA9IHYsIHRoaXMpIDogbmV3IF9fYXdhaXQodik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2FzeW5jR2VuZXJhdG9yKHRoaXNBcmcsIF9hcmd1bWVudHMsIGdlbmVyYXRvcikge1xuICBpZiAoIVN5bWJvbC5hc3luY0l0ZXJhdG9yKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3ltYm9sLmFzeW5jSXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xuICB2YXIgZyA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSwgaSwgcSA9IFtdO1xuICByZXR1cm4gaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIpLCB2ZXJiKFwicmV0dXJuXCIsIGF3YWl0UmV0dXJuKSwgaVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpO1xuICBmdW5jdGlvbiBhd2FpdFJldHVybihmKSB7IHJldHVybiBmdW5jdGlvbiAodikgeyByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHYpLnRoZW4oZiwgcmVqZWN0KTsgfTsgfVxuICBmdW5jdGlvbiB2ZXJiKG4sIGYpIHsgaWYgKGdbbl0pIHsgaVtuXSA9IGZ1bmN0aW9uICh2KSB7IHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAoYSwgYikgeyBxLnB1c2goW24sIHYsIGEsIGJdKSA+IDEgfHwgcmVzdW1lKG4sIHYpOyB9KTsgfTsgaWYgKGYpIGlbbl0gPSBmKGlbbl0pOyB9IH1cbiAgZnVuY3Rpb24gcmVzdW1lKG4sIHYpIHsgdHJ5IHsgc3RlcChnW25dKHYpKTsgfSBjYXRjaCAoZSkgeyBzZXR0bGUocVswXVszXSwgZSk7IH0gfVxuICBmdW5jdGlvbiBzdGVwKHIpIHsgci52YWx1ZSBpbnN0YW5jZW9mIF9fYXdhaXQgPyBQcm9taXNlLnJlc29sdmUoci52YWx1ZS52KS50aGVuKGZ1bGZpbGwsIHJlamVjdCkgOiBzZXR0bGUocVswXVsyXSwgcik7IH1cbiAgZnVuY3Rpb24gZnVsZmlsbCh2YWx1ZSkgeyByZXN1bWUoXCJuZXh0XCIsIHZhbHVlKTsgfVxuICBmdW5jdGlvbiByZWplY3QodmFsdWUpIHsgcmVzdW1lKFwidGhyb3dcIiwgdmFsdWUpOyB9XG4gIGZ1bmN0aW9uIHNldHRsZShmLCB2KSB7IGlmIChmKHYpLCBxLnNoaWZ0KCksIHEubGVuZ3RoKSByZXN1bWUocVswXVswXSwgcVswXVsxXSk7IH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fYXN5bmNEZWxlZ2F0b3Iobykge1xuICB2YXIgaSwgcDtcbiAgcmV0dXJuIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiLCBmdW5jdGlvbiAoZSkgeyB0aHJvdyBlOyB9KSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSwgaTtcbiAgZnVuY3Rpb24gdmVyYihuLCBmKSB7IGlbbl0gPSBvW25dID8gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIChwID0gIXApID8geyB2YWx1ZTogX19hd2FpdChvW25dKHYpKSwgZG9uZTogZmFsc2UgfSA6IGYgPyBmKHYpIDogdjsgfSA6IGY7IH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fYXN5bmNWYWx1ZXMobykge1xuICBpZiAoIVN5bWJvbC5hc3luY0l0ZXJhdG9yKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3ltYm9sLmFzeW5jSXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xuICB2YXIgbSA9IG9bU3ltYm9sLmFzeW5jSXRlcmF0b3JdLCBpO1xuICByZXR1cm4gbSA/IG0uY2FsbChvKSA6IChvID0gdHlwZW9mIF9fdmFsdWVzID09PSBcImZ1bmN0aW9uXCIgPyBfX3ZhbHVlcyhvKSA6IG9bU3ltYm9sLml0ZXJhdG9yXSgpLCBpID0ge30sIHZlcmIoXCJuZXh0XCIpLCB2ZXJiKFwidGhyb3dcIiksIHZlcmIoXCJyZXR1cm5cIiksIGlbU3ltYm9sLmFzeW5jSXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSwgaSk7XG4gIGZ1bmN0aW9uIHZlcmIobikgeyBpW25dID0gb1tuXSAmJiBmdW5jdGlvbiAodikgeyByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgeyB2ID0gb1tuXSh2KSwgc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgdi5kb25lLCB2LnZhbHVlKTsgfSk7IH07IH1cbiAgZnVuY3Rpb24gc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgZCwgdikgeyBQcm9taXNlLnJlc29sdmUodikudGhlbihmdW5jdGlvbih2KSB7IHJlc29sdmUoeyB2YWx1ZTogdiwgZG9uZTogZCB9KTsgfSwgcmVqZWN0KTsgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gX19tYWtlVGVtcGxhdGVPYmplY3QoY29va2VkLCByYXcpIHtcbiAgaWYgKE9iamVjdC5kZWZpbmVQcm9wZXJ0eSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkoY29va2VkLCBcInJhd1wiLCB7IHZhbHVlOiByYXcgfSk7IH0gZWxzZSB7IGNvb2tlZC5yYXcgPSByYXc7IH1cbiAgcmV0dXJuIGNvb2tlZDtcbn07XG5cbnZhciBfX3NldE1vZHVsZURlZmF1bHQgPSBPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIHYpIHtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIFwiZGVmYXVsdFwiLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2IH0pO1xufSkgOiBmdW5jdGlvbihvLCB2KSB7XG4gIG9bXCJkZWZhdWx0XCJdID0gdjtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2ltcG9ydFN0YXIobW9kKSB7XG4gIGlmIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpIHJldHVybiBtb2Q7XG4gIHZhciByZXN1bHQgPSB7fTtcbiAgaWYgKG1vZCAhPSBudWxsKSBmb3IgKHZhciBrIGluIG1vZCkgaWYgKGsgIT09IFwiZGVmYXVsdFwiICYmIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtb2QsIGspKSBfX2NyZWF0ZUJpbmRpbmcocmVzdWx0LCBtb2QsIGspO1xuICBfX3NldE1vZHVsZURlZmF1bHQocmVzdWx0LCBtb2QpO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX19pbXBvcnREZWZhdWx0KG1vZCkge1xuICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IGRlZmF1bHQ6IG1vZCB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX19jbGFzc1ByaXZhdGVGaWVsZEdldChyZWNlaXZlciwgc3RhdGUsIGtpbmQsIGYpIHtcbiAgaWYgKGtpbmQgPT09IFwiYVwiICYmICFmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBhY2Nlc3NvciB3YXMgZGVmaW5lZCB3aXRob3V0IGEgZ2V0dGVyXCIpO1xuICBpZiAodHlwZW9mIHN0YXRlID09PSBcImZ1bmN0aW9uXCIgPyByZWNlaXZlciAhPT0gc3RhdGUgfHwgIWYgOiAhc3RhdGUuaGFzKHJlY2VpdmVyKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCByZWFkIHByaXZhdGUgbWVtYmVyIGZyb20gYW4gb2JqZWN0IHdob3NlIGNsYXNzIGRpZCBub3QgZGVjbGFyZSBpdFwiKTtcbiAgcmV0dXJuIGtpbmQgPT09IFwibVwiID8gZiA6IGtpbmQgPT09IFwiYVwiID8gZi5jYWxsKHJlY2VpdmVyKSA6IGYgPyBmLnZhbHVlIDogc3RhdGUuZ2V0KHJlY2VpdmVyKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fY2xhc3NQcml2YXRlRmllbGRTZXQocmVjZWl2ZXIsIHN0YXRlLCB2YWx1ZSwga2luZCwgZikge1xuICBpZiAoa2luZCA9PT0gXCJtXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIG1ldGhvZCBpcyBub3Qgd3JpdGFibGVcIik7XG4gIGlmIChraW5kID09PSBcImFcIiAmJiAhZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgYWNjZXNzb3Igd2FzIGRlZmluZWQgd2l0aG91dCBhIHNldHRlclwiKTtcbiAgaWYgKHR5cGVvZiBzdGF0ZSA9PT0gXCJmdW5jdGlvblwiID8gcmVjZWl2ZXIgIT09IHN0YXRlIHx8ICFmIDogIXN0YXRlLmhhcyhyZWNlaXZlcikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3Qgd3JpdGUgcHJpdmF0ZSBtZW1iZXIgdG8gYW4gb2JqZWN0IHdob3NlIGNsYXNzIGRpZCBub3QgZGVjbGFyZSBpdFwiKTtcbiAgcmV0dXJuIChraW5kID09PSBcImFcIiA/IGYuY2FsbChyZWNlaXZlciwgdmFsdWUpIDogZiA/IGYudmFsdWUgPSB2YWx1ZSA6IHN0YXRlLnNldChyZWNlaXZlciwgdmFsdWUpKSwgdmFsdWU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2NsYXNzUHJpdmF0ZUZpZWxkSW4oc3RhdGUsIHJlY2VpdmVyKSB7XG4gIGlmIChyZWNlaXZlciA9PT0gbnVsbCB8fCAodHlwZW9mIHJlY2VpdmVyICE9PSBcIm9iamVjdFwiICYmIHR5cGVvZiByZWNlaXZlciAhPT0gXCJmdW5jdGlvblwiKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCB1c2UgJ2luJyBvcGVyYXRvciBvbiBub24tb2JqZWN0XCIpO1xuICByZXR1cm4gdHlwZW9mIHN0YXRlID09PSBcImZ1bmN0aW9uXCIgPyByZWNlaXZlciA9PT0gc3RhdGUgOiBzdGF0ZS5oYXMocmVjZWl2ZXIpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX19hZGREaXNwb3NhYmxlUmVzb3VyY2UoZW52LCB2YWx1ZSwgYXN5bmMpIHtcbiAgaWYgKHZhbHVlICE9PSBudWxsICYmIHZhbHVlICE9PSB2b2lkIDApIHtcbiAgICBpZiAodHlwZW9mIHZhbHVlICE9PSBcIm9iamVjdFwiICYmIHR5cGVvZiB2YWx1ZSAhPT0gXCJmdW5jdGlvblwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiT2JqZWN0IGV4cGVjdGVkLlwiKTtcbiAgICB2YXIgZGlzcG9zZSwgaW5uZXI7XG4gICAgaWYgKGFzeW5jKSB7XG4gICAgICBpZiAoIVN5bWJvbC5hc3luY0Rpc3Bvc2UpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTeW1ib2wuYXN5bmNEaXNwb3NlIGlzIG5vdCBkZWZpbmVkLlwiKTtcbiAgICAgIGRpc3Bvc2UgPSB2YWx1ZVtTeW1ib2wuYXN5bmNEaXNwb3NlXTtcbiAgICB9XG4gICAgaWYgKGRpc3Bvc2UgPT09IHZvaWQgMCkge1xuICAgICAgaWYgKCFTeW1ib2wuZGlzcG9zZSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN5bWJvbC5kaXNwb3NlIGlzIG5vdCBkZWZpbmVkLlwiKTtcbiAgICAgIGRpc3Bvc2UgPSB2YWx1ZVtTeW1ib2wuZGlzcG9zZV07XG4gICAgICBpZiAoYXN5bmMpIGlubmVyID0gZGlzcG9zZTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBkaXNwb3NlICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJPYmplY3Qgbm90IGRpc3Bvc2FibGUuXCIpO1xuICAgIGlmIChpbm5lcikgZGlzcG9zZSA9IGZ1bmN0aW9uKCkgeyB0cnkgeyBpbm5lci5jYWxsKHRoaXMpOyB9IGNhdGNoIChlKSB7IHJldHVybiBQcm9taXNlLnJlamVjdChlKTsgfSB9O1xuICAgIGVudi5zdGFjay5wdXNoKHsgdmFsdWU6IHZhbHVlLCBkaXNwb3NlOiBkaXNwb3NlLCBhc3luYzogYXN5bmMgfSk7XG4gIH1cbiAgZWxzZSBpZiAoYXN5bmMpIHtcbiAgICBlbnYuc3RhY2sucHVzaCh7IGFzeW5jOiB0cnVlIH0pO1xuICB9XG4gIHJldHVybiB2YWx1ZTtcbn1cblxudmFyIF9TdXBwcmVzc2VkRXJyb3IgPSB0eXBlb2YgU3VwcHJlc3NlZEVycm9yID09PSBcImZ1bmN0aW9uXCIgPyBTdXBwcmVzc2VkRXJyb3IgOiBmdW5jdGlvbiAoZXJyb3IsIHN1cHByZXNzZWQsIG1lc3NhZ2UpIHtcbiAgdmFyIGUgPSBuZXcgRXJyb3IobWVzc2FnZSk7XG4gIHJldHVybiBlLm5hbWUgPSBcIlN1cHByZXNzZWRFcnJvclwiLCBlLmVycm9yID0gZXJyb3IsIGUuc3VwcHJlc3NlZCA9IHN1cHByZXNzZWQsIGU7XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gX19kaXNwb3NlUmVzb3VyY2VzKGVudikge1xuICBmdW5jdGlvbiBmYWlsKGUpIHtcbiAgICBlbnYuZXJyb3IgPSBlbnYuaGFzRXJyb3IgPyBuZXcgX1N1cHByZXNzZWRFcnJvcihlLCBlbnYuZXJyb3IsIFwiQW4gZXJyb3Igd2FzIHN1cHByZXNzZWQgZHVyaW5nIGRpc3Bvc2FsLlwiKSA6IGU7XG4gICAgZW52Lmhhc0Vycm9yID0gdHJ1ZTtcbiAgfVxuICBmdW5jdGlvbiBuZXh0KCkge1xuICAgIHdoaWxlIChlbnYuc3RhY2subGVuZ3RoKSB7XG4gICAgICB2YXIgcmVjID0gZW52LnN0YWNrLnBvcCgpO1xuICAgICAgdHJ5IHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHJlYy5kaXNwb3NlICYmIHJlYy5kaXNwb3NlLmNhbGwocmVjLnZhbHVlKTtcbiAgICAgICAgaWYgKHJlYy5hc3luYykgcmV0dXJuIFByb21pc2UucmVzb2x2ZShyZXN1bHQpLnRoZW4obmV4dCwgZnVuY3Rpb24oZSkgeyBmYWlsKGUpOyByZXR1cm4gbmV4dCgpOyB9KTtcbiAgICAgIH1cbiAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgZmFpbChlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGVudi5oYXNFcnJvcikgdGhyb3cgZW52LmVycm9yO1xuICB9XG4gIHJldHVybiBuZXh0KCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgX19leHRlbmRzLFxuICBfX2Fzc2lnbixcbiAgX19yZXN0LFxuICBfX2RlY29yYXRlLFxuICBfX3BhcmFtLFxuICBfX21ldGFkYXRhLFxuICBfX2F3YWl0ZXIsXG4gIF9fZ2VuZXJhdG9yLFxuICBfX2NyZWF0ZUJpbmRpbmcsXG4gIF9fZXhwb3J0U3RhcixcbiAgX192YWx1ZXMsXG4gIF9fcmVhZCxcbiAgX19zcHJlYWQsXG4gIF9fc3ByZWFkQXJyYXlzLFxuICBfX3NwcmVhZEFycmF5LFxuICBfX2F3YWl0LFxuICBfX2FzeW5jR2VuZXJhdG9yLFxuICBfX2FzeW5jRGVsZWdhdG9yLFxuICBfX2FzeW5jVmFsdWVzLFxuICBfX21ha2VUZW1wbGF0ZU9iamVjdCxcbiAgX19pbXBvcnRTdGFyLFxuICBfX2ltcG9ydERlZmF1bHQsXG4gIF9fY2xhc3NQcml2YXRlRmllbGRHZXQsXG4gIF9fY2xhc3NQcml2YXRlRmllbGRTZXQsXG4gIF9fY2xhc3NQcml2YXRlRmllbGRJbixcbiAgX19hZGREaXNwb3NhYmxlUmVzb3VyY2UsXG4gIF9fZGlzcG9zZVJlc291cmNlcyxcbn07XG4iXSwibmFtZXMiOlsicmVhY3RQcm9wc1JlZ2V4IiwiY2FjaGUiLCJhcmciLCJ1bmRlZmluZWQiLCJwcm9wIiwidGVzdCIsImNoYXJDb2RlQXQiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJfY3JlYXRlU3ZnSWNvbiIsIl9qc3hSdW50aW1lIiwiZGVmYXVsdCIsImpzeCIsImN4IiwiY3kiLCJyIiwiZCIsIkExMDAiLCJBMjAwIiwiQTQwMCIsIkE3MDAiLCJfZXhjbHVkZWQiLCJfZXhjbHVkZWQyIiwiYWRhcHRWNFRoZW1lIiwiaW5wdXRUaGVtZSIsImRlZmF1bHRQcm9wcyIsIm1peGlucyIsIm92ZXJyaWRlcyIsInBhbGV0dGUiLCJwcm9wcyIsInN0eWxlT3ZlcnJpZGVzIiwib3RoZXIiLCJ0aGVtZSIsImNvbXBvbmVudHMiLCJrZXlzIiwiZm9yRWFjaCIsImNvbXBvbmVudCIsImNvbXBvbmVudFZhbHVlIiwic3BhY2luZyIsImNyZWF0ZVNwYWNpbmciLCJicmVha3BvaW50cyIsImNyZWF0ZUJyZWFrcG9pbnRzIiwiZ3V0dGVycyIsInN0eWxlcyIsInBhZGRpbmdMZWZ0IiwicGFkZGluZ1JpZ2h0IiwidXAiLCJ0eXBlIiwidHlwZUlucHV0IiwibW9kZSIsIm1vZGVJbnB1dCIsInBhbGV0dGVSZXN0IiwiZmluYWxNb2RlIiwidGV4dCIsImhpbnQiLCJjbGFtcFdyYXBwZXIiLCJtaW4iLCJtYXgiLCJjbGFtcCIsImhleFRvUmdiIiwiY29sb3IiLCJzbGljZSIsInJlIiwiUmVnRXhwIiwibGVuZ3RoIiwiY29sb3JzIiwibWF0Y2giLCJtYXAiLCJuIiwiaW5kZXgiLCJwYXJzZUludCIsIk1hdGgiLCJyb3VuZCIsImpvaW4iLCJkZWNvbXBvc2VDb2xvciIsImNoYXJBdCIsIm1hcmtlciIsImluZGV4T2YiLCJzdWJzdHJpbmciLCJFcnJvciIsImNvbG9yU3BhY2UiLCJ2YWx1ZXMiLCJzcGxpdCIsInNoaWZ0IiwicGFyc2VGbG9hdCIsInJlY29tcG9zZUNvbG9yIiwiaSIsInJnYlRvSGV4IiwiaW50IiwiaGV4IiwidG9TdHJpbmciLCJpbnRUb0hleCIsImhzbFRvUmdiIiwiaCIsInMiLCJsIiwiYSIsImYiLCJrIiwicmdiIiwicHVzaCIsImdldEx1bWluYW5jZSIsInZhbCIsIk51bWJlciIsInRvRml4ZWQiLCJnZXRDb250cmFzdFJhdGlvIiwiZm9yZWdyb3VuZCIsImJhY2tncm91bmQiLCJsdW1BIiwibHVtQiIsImFscGhhIiwiZGFya2VuIiwiY29lZmZpY2llbnQiLCJsaWdodGVuIiwiZW1waGFzaXplIiwiY3JlYXRlTXVpU3RyaWN0TW9kZVRoZW1lIiwib3B0aW9ucyIsImFyZ3MiLCJjcmVhdGVUaGVtZSIsImRlZXBtZXJnZSIsInVuc3RhYmxlX3N0cmljdE1vZGUiLCJ3YXJuZWRPbmNlIiwiY3JlYXRlU3R5bGVzIiwiY29uc29sZSIsIndhcm4iLCJpc1VuaXRsZXNzIiwiU3RyaW5nIiwiZ2V0VW5pdCIsImlucHV0IiwidG9Vbml0bGVzcyIsImZvbnRHcmlkIiwibGluZUhlaWdodCIsInBpeGVscyIsImh0bWxGb250U2l6ZSIsInJlc3BvbnNpdmVGb250U2l6ZXMiLCJ0aGVtZUlucHV0IiwiZGlzYWJsZUFsaWduIiwiZmFjdG9yIiwidmFyaWFudHMiLCJ0eXBvZ3JhcGh5IiwiY29udmVydCIsImJhc2VGb250U2l6ZSIsInRvVW5pdCIsImZyb21Vbml0IiwicHhMZW5ndGgiLCJvdXRwdXRMZW5ndGgiLCJicmVha3BvaW50VmFsdWVzIiwieCIsInZhcmlhbnQiLCJzdHlsZSIsInJlbUZvbnRTaXplIiwiZm9udFNpemUiLCJtYXhGb250U2l6ZSIsIm1pbkZvbnRTaXplIiwidHJhbnNmb3JtIiwic2l6ZSIsImdyaWQiLCJzaXplQmVsb3ciLCJzaXplQWJvdmUiLCJhbGlnblByb3BlcnR5IiwiY3NzUHJvcGVydHkiLCJ1bml0Iiwib3V0cHV0IiwiYnJlYWtwb2ludCIsInJlc3BvbnNpdmVQcm9wZXJ0eSIsImdldFRoZW1lUHJvcHMiLCJwYXJhbXMiLCJuYW1lIiwicmVzb2x2ZVByb3BzIiwidXNlVGhlbWVQcm9wcyIsImRlZmF1bHRUaGVtZSIsInRoZW1lSWQiLCJtYWtlU3R5bGVzIiwid2l0aFN0eWxlcyIsIndpdGhUaGVtZSIsIkRFRkFVTFRfTU9ERV9TVE9SQUdFX0tFWSIsIkRFRkFVTFRfQ09MT1JfU0NIRU1FX1NUT1JBR0VfS0VZIiwiREVGQVVMVF9BVFRSSUJVVEUiLCJnZXRTeXN0ZW1Nb2RlIiwid2luZG93IiwibWF0Y2hNZWRpYSIsIm1hdGNoZXMiLCJwcm9jZXNzU3RhdGUiLCJzdGF0ZSIsImNhbGxiYWNrIiwic3lzdGVtTW9kZSIsImluaXRpYWxpemVWYWx1ZSIsImtleSIsImRlZmF1bHRWYWx1ZSIsImxvY2FsU3RvcmFnZSIsImdldEl0ZW0iLCJzZXRJdGVtIiwiZSIsImNyZWF0ZUdldENzc1ZhciIsInByZWZpeCIsImFwcGVuZFZhciIsInZhcnMiLCJmaWVsZCIsImZhbGxiYWNrcyIsIl90eXBlb2YiLCJvIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJjb25zdHJ1Y3RvciIsInByb3RvdHlwZSIsInRvUHJvcGVydHlLZXkiLCJ0IiwidG9QcmltaXRpdmUiLCJjYWxsIiwiVHlwZUVycm9yIiwiYXNzaWduTmVzdGVkS2V5cyIsIm9iaiIsImFycmF5S2V5cyIsInRlbXAiLCJBcnJheSIsImlzQXJyYXkiLCJpbmNsdWRlcyIsImdldENzc1ZhbHVlIiwic29tZSIsInRvTG93ZXJDYXNlIiwiY3NzVmFyc1BhcnNlciIsInNob3VsZFNraXBHZW5lcmF0aW5nVmFyIiwiY3NzIiwidmFyc1dpdGhEZWZhdWx0cyIsImNzc1ZhciIsImFzc2lnbiIsInNob3VsZFNraXBQYXRocyIsInJlY3Vyc2UiLCJvYmplY3QiLCJwYXJlbnRLZXlzIiwiZW50cmllcyIsInBhcnNlckNvbmZpZyIsImNvbG9yU2NoZW1lcyIsImRlZmF1bHRDb2xvclNjaGVtZSIsIm90aGVyVGhlbWUiLCJyb290VmFycyIsInJvb3RDc3MiLCJyb290VmFyc1dpdGhEZWZhdWx0cyIsInRoZW1lVmFycyIsImNvbG9yU2NoZW1lc01hcCIsImxpZ2h0Iiwib3RoZXJDb2xvclNjaGVtZXMiLCJzY2hlbWUiLCJnZW5lcmF0ZUNzc1ZhcnMiLCJjb2xvclNjaGVtZSIsIl9wYXJzZXJDb25maWckZ2V0U2VsZTIiLCJfcGFyc2VyQ29uZmlnJGdldFNlbGUiLCJzZWxlY3RvciIsImdldFNlbGVjdG9yIiwiX2tleXMkIiwiZGVmYXVsdERhcmtPdmVybGF5cyIsIl8iLCJvdmVybGF5IiwiZ2V0T3ZlcmxheUFscGhhIiwic2V0Q29sb3IiLCJ0b1JnYiIsInN0YXJ0c1dpdGgiLCJzZXRDb2xvckNoYW5uZWwiLCJzaWxlbnQiLCJmbiIsImVycm9yIiwiY3NzVmFyUHJlZml4IiwiZXh0ZW5kVGhlbWUiLCJfY29sb3JTY2hlbWVzSW5wdXQkbGkiLCJfY29sb3JTY2hlbWVzSW5wdXQkZGEiLCJfY29sb3JTY2hlbWVzSW5wdXQkbGkyIiwiX2NvbG9yU2NoZW1lc0lucHV0JGxpMyIsIl9jb2xvclNjaGVtZXNJbnB1dCRkYTIiLCJfY29sb3JTY2hlbWVzSW5wdXQkZGEzIiwiY29sb3JTY2hlbWVzSW5wdXQiLCJnZXRDc3NWYXIiLCJfY3JlYXRlVGhlbWVXaXRob3V0VmEiLCJsaWdodFBhbGV0dGUiLCJtdWlUaGVtZSIsImRhcmtQYWxldHRlIiwiZGFyayIsIm9wYWNpdHkiLCJpbnB1dFBsYWNlaG9sZGVyIiwiaW5wdXRVbmRlcmxpbmUiLCJzd2l0Y2hUcmFja0Rpc2FibGVkIiwic3dpdGNoVHJhY2siLCJvdmVybGF5cyIsInNldENzc1ZhckNvbG9yIiwidG9rZW5zIiwiY29sb3JUb2tlbiIsImNvbW1vbiIsIkFsZXJ0IiwiaW5mbyIsInN1Y2Nlc3MiLCJ3YXJuaW5nIiwiZ2V0Q29udHJhc3RUZXh0IiwibWFpbiIsIkFwcEJhciIsIkF2YXRhciIsIkJ1dHRvbiIsIkNoaXAiLCJGaWxsZWRJbnB1dCIsIkxpbmVhclByb2dyZXNzIiwicHJpbWFyeSIsInNlY29uZGFyeSIsIlNrZWxldG9uIiwiU2xpZGVyIiwic25hY2tiYXJDb250ZW50QmFja2dyb3VuZCIsIlNuYWNrYmFyQ29udGVudCIsIlNwZWVkRGlhbEFjdGlvbiIsInBhcGVyIiwiU3RlcENvbm5lY3RvciIsIlN0ZXBDb250ZW50IiwiU3dpdGNoIiwiVGFibGVDZWxsIiwiZGl2aWRlciIsIlRvb2x0aXAiLCJncmV5IiwiY29udHJhc3RUZXh0IiwiYWN0aXZlIiwic2VsZWN0ZWQiLCJyZWR1Y2UiLCJhY2MiLCJhcmd1bWVudCIsInVuc3RhYmxlX3N4Q29uZmlnIiwiZGVmYXVsdFN4Q29uZmlnIiwidW5zdGFibGVfc3giLCJzdHlsZUZ1bmN0aW9uU3giLCJzeCIsInRoaXMiLCJkZWZhdWx0Q29uZmlnIiwiQ3NzVmFyc1Byb3ZpZGVyIiwidXNlQ29sb3JTY2hlbWUiLCJnZXRJbml0Q29sb3JTY2hlbWVTY3JpcHQiLCJnZXRJbml0Q29sb3JTY2hlbWVTY3JpcHRTeXN0ZW0iLCJhdHRyaWJ1dGUiLCJkZWZhdWx0QXR0cmlidXRlIiwibW9kZVN0b3JhZ2VLZXkiLCJkZWZhdWx0TW9kZVN0b3JhZ2VLZXkiLCJjb2xvclNjaGVtZVN0b3JhZ2VLZXkiLCJkZWZhdWx0Q29sb3JTY2hlbWVTdG9yYWdlS2V5IiwiZGVmYXVsdE1vZGUiLCJkZXNpZ25TeXN0ZW1Nb2RlIiwiZGVzaWduU3lzdGVtQ29sb3JTY2hlbWUiLCJkaXNhYmxlVHJhbnNpdGlvbk9uQ2hhbmdlIiwiZGVzaWduU3lzdGVtVHJhbnNpdGlvbk9uQ2hhbmdlIiwicmVzb2x2ZVRoZW1lIiwiZXhjbHVkZVZhcmlhYmxlc0Zyb21Sb290IiwiQ29sb3JTY2hlbWVDb250ZXh0IiwiZGVmYXVsdExpZ2h0Q29sb3JTY2hlbWUiLCJkZWZhdWx0RGFya0NvbG9yU2NoZW1lIiwiY2hpbGRyZW4iLCJ0aGVtZVByb3AiLCJzdG9yYWdlV2luZG93IiwiZG9jdW1lbnROb2RlIiwiZG9jdW1lbnQiLCJjb2xvclNjaGVtZU5vZGUiLCJkb2N1bWVudEVsZW1lbnQiLCJjb2xvclNjaGVtZVNlbGVjdG9yIiwiZGlzYWJsZU5lc3RlZENvbnRleHQiLCJkaXNhYmxlU3R5bGVTaGVldEdlbmVyYXRpb24iLCJoYXNNb3VudGVkIiwidXBwZXJUaGVtZSIsImN0eCIsIm5lc3RlZCIsInNjb3BlZFRoZW1lIiwiX3JlZiIsInJlc3RUaGVtZVByb3AiLCJhbGxDb2xvclNjaGVtZXMiLCJzdGF0ZU1vZGUiLCJzZXRNb2RlIiwibGlnaHRDb2xvclNjaGVtZSIsImRhcmtDb2xvclNjaGVtZSIsInN0YXRlQ29sb3JTY2hlbWUiLCJzZXRDb2xvclNjaGVtZSIsInN1cHBvcnRlZENvbG9yU2NoZW1lcyIsImpvaW5lZENvbG9yU2NoZW1lcyIsInNldFN0YXRlIiwiaW5pdGlhbE1vZGUiLCJnZXRDb2xvclNjaGVtZSIsImN1cnJlbnRTdGF0ZSIsIm5ld01vZGUiLCJuZXdTdGF0ZSIsIm5ld0xpZ2h0Q29sb3JTY2hlbWUiLCJuZXdEYXJrQ29sb3JTY2hlbWUiLCJoYW5kbGVNZWRpYVF1ZXJ5IiwiZXZlbnQiLCJtZWRpYUxpc3RlbmVyIiwiY3VycmVudCIsImhhbmRsZXIiLCJtZWRpYSIsImFkZExpc3RlbmVyIiwicmVtb3ZlTGlzdGVuZXIiLCJoYW5kbGVTdG9yYWdlIiwibmV3VmFsdWUiLCJlbmRzV2l0aCIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwidXNlQ3VycmVudENvbG9yU2NoZW1lIiwiY2FsY3VsYXRlZENvbG9yU2NoZW1lIiwiZ2V0Q29sb3JTY2hlbWVTZWxlY3RvciIsInRhcmdldENvbG9yU2NoZW1lIiwiZGVmYXVsdENvbG9yU2NoZW1lU3R5bGVTaGVldCIsIm90aGVyQ29sb3JTY2hlbWVzU3R5bGVTaGVldCIsInNjaGVtZUtleSIsImV4Y2x1ZGVkVmFyaWFibGVzIiwic2V0QXR0cmlidXRlIiwidGltZXIiLCJjcmVhdGVFbGVtZW50IiwiYXBwZW5kQ2hpbGQiLCJjcmVhdGVUZXh0Tm9kZSIsImhlYWQiLCJnZXRDb21wdXRlZFN0eWxlIiwiYm9keSIsInNldFRpbWVvdXQiLCJyZW1vdmVDaGlsZCIsImNsZWFyVGltZW91dCIsImNvbnRleHRWYWx1ZSIsInNob3VsZEdlbmVyYXRlU3R5bGVTaGVldCIsImVsZW1lbnQiLCJHbG9iYWxTdHlsZXMiLCJQcm92aWRlciIsIm5vbmNlIiwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nIiwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwiLCJfX2h0bWwiLCJJbml0Q29sb3JTY2hlbWVTY3JpcHQiLCJjcmVhdGVDc3NWYXJzUHJvdmlkZXIiLCJuZXdUaGVtZSIsImNyZWF0ZVR5cG9ncmFwaHkiLCJleHBlcmltZW50YWxfc3giLCJnZXRDb2xsYXBzZVV0aWxpdHlDbGFzcyIsInNsb3QiLCJnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzIiwiQ29sbGFwc2VSb290Iiwic3R5bGVkIiwib3ZlcnJpZGVzUmVzb2x2ZXIiLCJvd25lclN0YXRlIiwicm9vdCIsIm9yaWVudGF0aW9uIiwiZW50ZXJlZCIsImluIiwiY29sbGFwc2VkU2l6ZSIsImhpZGRlbiIsImhlaWdodCIsIm92ZXJmbG93IiwidHJhbnNpdGlvbiIsInRyYW5zaXRpb25zIiwiY3JlYXRlIiwid2lkdGgiLCJ2aXNpYmlsaXR5IiwiQ29sbGFwc2VXcmFwcGVyIiwid3JhcHBlciIsImRpc3BsYXkiLCJDb2xsYXBzZVdyYXBwZXJJbm5lciIsIndyYXBwZXJJbm5lciIsIkNvbGxhcHNlIiwiaW5Qcm9wcyIsInJlZiIsImFkZEVuZExpc3RlbmVyIiwiY2xhc3NOYW1lIiwiY29sbGFwc2VkU2l6ZVByb3AiLCJlYXNpbmciLCJpblByb3AiLCJvbkVudGVyIiwib25FbnRlcmVkIiwib25FbnRlcmluZyIsIm9uRXhpdCIsIm9uRXhpdGVkIiwib25FeGl0aW5nIiwidGltZW91dCIsInN0YW5kYXJkIiwiVHJhbnNpdGlvbkNvbXBvbmVudCIsIlRyYW5zaXRpb24iLCJjbGFzc2VzIiwic2xvdHMiLCJjb21wb3NlQ2xhc3NlcyIsInVzZVV0aWxpdHlDbGFzc2VzIiwidXNlVGhlbWUiLCJ1c2VUaW1lb3V0Iiwid3JhcHBlclJlZiIsImF1dG9UcmFuc2l0aW9uRHVyYXRpb24iLCJpc0hvcml6b250YWwiLCJub2RlUmVmIiwiaGFuZGxlUmVmIiwidXNlRm9ya1JlZiIsIm5vcm1hbGl6ZWRUcmFuc2l0aW9uQ2FsbGJhY2siLCJtYXliZUlzQXBwZWFyaW5nIiwibm9kZSIsImdldFdyYXBwZXJTaXplIiwiaGFuZGxlRW50ZXIiLCJpc0FwcGVhcmluZyIsInBvc2l0aW9uIiwiaGFuZGxlRW50ZXJpbmciLCJ3cmFwcGVyU2l6ZSIsImR1cmF0aW9uIiwidHJhbnNpdGlvbkR1cmF0aW9uIiwidHJhbnNpdGlvblRpbWluZ0Z1bmN0aW9uIiwiZHVyYXRpb24yIiwiZ2V0QXV0b0hlaWdodER1cmF0aW9uIiwiaGFuZGxlRW50ZXJlZCIsImhhbmRsZUV4aXQiLCJoYW5kbGVFeGl0ZWQiLCJoYW5kbGVFeGl0aW5nIiwibmV4dCIsInN0YXJ0IiwiY2hpbGRQcm9wcyIsImFzIiwiY2xzeCIsIm11aVN1cHBvcnRBdXRvIiwiX2V4Y2x1ZGVkMyIsInVzZVNsb3QiLCJwYXJhbWV0ZXJzIiwiZWxlbWVudFR5cGUiLCJpbml0aWFsRWxlbWVudFR5cGUiLCJleHRlcm5hbEZvcndhcmRlZFByb3BzIiwiZ2V0U2xvdE93bmVyU3RhdGUiLCJpbnRlcm5hbEZvcndhcmRlZFByb3BzIiwidXNlU2xvdFByb3BzUGFyYW1zIiwicm9vdENvbXBvbmVudCIsInNsb3RQcm9wcyIsInJlc29sdmVkQ29tcG9uZW50c1Byb3BzIiwicmVzb2x2ZUNvbXBvbmVudFByb3BzIiwiX21lcmdlU2xvdFByb3BzIiwibWVyZ2VTbG90UHJvcHMiLCJleHRlcm5hbFNsb3RQcm9wcyIsInNsb3RDb21wb25lbnQiLCJpbnRlcm5hbFJlZiIsIm1lcmdlZFByb3BzIiwic2xvdE93bmVyU3RhdGUiLCJmaW5hbE93bmVyU3RhdGUiLCJMZWFmQ29tcG9uZW50IiwiYXBwZW5kT3duZXJTdGF0ZSIsInByb3BOYW1lIiwiZ2V0QWNjb3JkaW9uVXRpbGl0eUNsYXNzIiwiQWNjb3JkaW9uUm9vdCIsIlBhcGVyIiwicmVnaW9uIiwic3F1YXJlIiwicm91bmRlZCIsImRpc2FibGVHdXR0ZXJzIiwic2hvcnRlc3QiLCJvdmVyZmxvd0FuY2hvciIsImxlZnQiLCJ0b3AiLCJyaWdodCIsImNvbnRlbnQiLCJiYWNrZ3JvdW5kQ29sb3IiLCJleHBhbmRlZCIsIm1hcmdpblRvcCIsIm1hcmdpbkJvdHRvbSIsImRpc2FibGVkIiwiYWN0aW9uIiwiZGlzYWJsZWRCYWNrZ3JvdW5kIiwiYm9yZGVyUmFkaXVzIiwiYm9yZGVyVG9wTGVmdFJhZGl1cyIsInNoYXBlIiwiYm9yZGVyVG9wUmlnaHRSYWRpdXMiLCJib3JkZXJCb3R0b21MZWZ0UmFkaXVzIiwiYm9yZGVyQm90dG9tUmlnaHRSYWRpdXMiLCJtYXJnaW4iLCJjaGlsZHJlblByb3AiLCJkZWZhdWx0RXhwYW5kZWQiLCJleHBhbmRlZFByb3AiLCJvbkNoYW5nZSIsIlRyYW5zaXRpb25Db21wb25lbnRQcm9wIiwiVHJhbnNpdGlvblByb3BzIiwiVHJhbnNpdGlvblByb3BzUHJvcCIsInNldEV4cGFuZGVkU3RhdGUiLCJ1c2VDb250cm9sbGVkIiwiY29udHJvbGxlZCIsImhhbmRsZUNoYW5nZSIsInN1bW1hcnkiLCJ0b0FycmF5IiwidG9nZ2xlIiwiYmFja3dhcmRDb21wYXRpYmxlU2xvdHMiLCJiYWNrd2FyZENvbXBhdGlibGVTbG90UHJvcHMiLCJUcmFuc2l0aW9uU2xvdCIsInRyYW5zaXRpb25Qcm9wcyIsImlkIiwicm9sZSIsImdldEFjY29yZGlvbkFjdGlvbnNVdGlsaXR5Q2xhc3MiLCJBY2NvcmRpb25BY3Rpb25zUm9vdCIsImRpc2FibGVTcGFjaW5nIiwiYWxpZ25JdGVtcyIsInBhZGRpbmciLCJqdXN0aWZ5Q29udGVudCIsIm1hcmdpbkxlZnQiLCJnZXRBY2NvcmRpb25EZXRhaWxzVXRpbGl0eUNsYXNzIiwiQWNjb3JkaW9uRGV0YWlsc1Jvb3QiLCJnZXRBY2NvcmRpb25TdW1tYXJ5VXRpbGl0eUNsYXNzIiwiQWNjb3JkaW9uU3VtbWFyeVJvb3QiLCJCdXR0b25CYXNlIiwibWluSGVpZ2h0IiwiZm9jdXNWaXNpYmxlIiwiZm9jdXMiLCJkaXNhYmxlZE9wYWNpdHkiLCJjdXJzb3IiLCJBY2NvcmRpb25TdW1tYXJ5Q29udGVudCIsImZsZXhHcm93IiwiQWNjb3JkaW9uU3VtbWFyeUV4cGFuZEljb25XcmFwcGVyIiwiZXhwYW5kSWNvbldyYXBwZXIiLCJleHBhbmRJY29uIiwiZm9jdXNWaXNpYmxlQ2xhc3NOYW1lIiwib25DbGljayIsImZvY3VzUmlwcGxlIiwiZGlzYWJsZVJpcHBsZSIsImdldEFsZXJ0VXRpbGl0eUNsYXNzIiwiY3JlYXRlU3ZnSWNvbiIsIkFsZXJ0Um9vdCIsImNhcGl0YWxpemUiLCJzZXZlcml0eSIsImdldENvbG9yIiwiZ2V0QmFja2dyb3VuZENvbG9yIiwiYm9keTIiLCJmaWx0ZXIiLCJjb2xvclNldmVyaXR5IiwiaWNvbiIsImJvcmRlciIsImZvbnRXZWlnaHQiLCJmb250V2VpZ2h0TWVkaXVtIiwiQWxlcnRJY29uIiwibWFyZ2luUmlnaHQiLCJBbGVydE1lc3NhZ2UiLCJtZXNzYWdlIiwibWluV2lkdGgiLCJBbGVydEFjdGlvbiIsImRlZmF1bHRJY29uTWFwcGluZyIsIlN1Y2Nlc3NPdXRsaW5lZCIsIlJlcG9ydFByb2JsZW1PdXRsaW5lZCIsIkVycm9yT3V0bGluZSIsIkluZm9PdXRsaW5lZCIsImNsb3NlVGV4dCIsImNvbXBvbmVudHNQcm9wcyIsImljb25NYXBwaW5nIiwib25DbG9zZSIsImNsb3NlQnV0dG9uIiwiQ2xvc2VCdXR0b24iLCJjbG9zZUljb24iLCJDbG9zZUljb24iLCJDbG9zZUJ1dHRvblNsb3QiLCJjbG9zZUJ1dHRvblByb3BzIiwiSWNvbkJ1dHRvbiIsIkNsb3NlSWNvblNsb3QiLCJjbG9zZUljb25Qcm9wcyIsIkNsb3NlIiwiZWxldmF0aW9uIiwidGl0bGUiLCJnZXRUeXBvZ3JhcGh5VXRpbGl0eUNsYXNzIiwiVHlwb2dyYXBoeVJvb3QiLCJhbGlnbiIsIm5vV3JhcCIsImd1dHRlckJvdHRvbSIsInBhcmFncmFwaCIsImZvbnQiLCJ0ZXh0QWxpZ24iLCJ0ZXh0T3ZlcmZsb3ciLCJ3aGl0ZVNwYWNlIiwiZGVmYXVsdFZhcmlhbnRNYXBwaW5nIiwiaDEiLCJoMiIsImgzIiwiaDQiLCJoNSIsImg2Iiwic3VidGl0bGUxIiwic3VidGl0bGUyIiwiYm9keTEiLCJpbmhlcml0IiwiY29sb3JUcmFuc2Zvcm1hdGlvbnMiLCJ0ZXh0UHJpbWFyeSIsInRleHRTZWNvbmRhcnkiLCJ0aGVtZVByb3BzIiwidHJhbnNmb3JtRGVwcmVjYXRlZENvbG9ycyIsImV4dGVuZFN4UHJvcCIsInZhcmlhbnRNYXBwaW5nIiwiQ29tcG9uZW50IiwiZ2V0QWxlcnRUaXRsZVV0aWxpdHlDbGFzcyIsIkFsZXJ0VGl0bGVSb290Iiwic3RyaXBEaWFjcml0aWNzIiwic3RyaW5nIiwibm9ybWFsaXplIiwicmVwbGFjZSIsImNyZWF0ZUZpbHRlck9wdGlvbnMiLCJjb25maWciLCJpZ25vcmVBY2NlbnRzIiwiaWdub3JlQ2FzZSIsImxpbWl0IiwibWF0Y2hGcm9tIiwic3RyaW5naWZ5IiwidHJpbSIsImlucHV0VmFsdWUiLCJnZXRPcHRpb25MYWJlbCIsImZpbHRlcmVkT3B0aW9ucyIsIm9wdGlvbiIsImNhbmRpZGF0ZSIsImZpbmRJbmRleCIsImFycmF5IiwiY29tcCIsImRlZmF1bHRGaWx0ZXJPcHRpb25zIiwiZGVmYXVsdElzQWN0aXZlRWxlbWVudEluTGlzdGJveCIsImxpc3Rib3hSZWYiLCJfbGlzdGJveFJlZiRjdXJyZW50JHAiLCJwYXJlbnRFbGVtZW50IiwiY29udGFpbnMiLCJhY3RpdmVFbGVtZW50IiwidW5zdGFibGVfaXNBY3RpdmVFbGVtZW50SW5MaXN0Ym94IiwidW5zdGFibGVfY2xhc3NOYW1lUHJlZml4IiwiYXV0b0NvbXBsZXRlIiwiYXV0b0hpZ2hsaWdodCIsImF1dG9TZWxlY3QiLCJibHVyT25TZWxlY3QiLCJjbGVhck9uQmx1ciIsImZyZWVTb2xvIiwiY2xlYXJPbkVzY2FwZSIsImNvbXBvbmVudE5hbWUiLCJtdWx0aXBsZSIsImRpc2FibGVDbGVhcmFibGUiLCJkaXNhYmxlQ2xvc2VPblNlbGVjdCIsImRpc2FibGVkUHJvcCIsImRpc2FibGVkSXRlbXNGb2N1c2FibGUiLCJkaXNhYmxlTGlzdFdyYXAiLCJmaWx0ZXJPcHRpb25zIiwiZmlsdGVyU2VsZWN0ZWRPcHRpb25zIiwiZ2V0T3B0aW9uRGlzYWJsZWQiLCJnZXRPcHRpb25LZXkiLCJnZXRPcHRpb25MYWJlbFByb3AiLCJfb3B0aW9uJGxhYmVsIiwibGFiZWwiLCJncm91cEJ5IiwiaGFuZGxlSG9tZUVuZEtleXMiLCJpZFByb3AiLCJpbmNsdWRlSW5wdXRJbkxpc3QiLCJpbnB1dFZhbHVlUHJvcCIsImlzT3B0aW9uRXF1YWxUb1ZhbHVlIiwib25IaWdobGlnaHRDaGFuZ2UiLCJvbklucHV0Q2hhbmdlIiwib25PcGVuIiwib3BlbiIsIm9wZW5Qcm9wIiwib3Blbk9uRm9jdXMiLCJyZWFkT25seSIsInNlbGVjdE9uRm9jdXMiLCJ2YWx1ZVByb3AiLCJ1c2VJZCIsIm9wdGlvbkxhYmVsIiwiaWdub3JlRm9jdXMiLCJmaXJzdEZvY3VzIiwiaW5wdXRSZWYiLCJhbmNob3JFbCIsInNldEFuY2hvckVsIiwiZm9jdXNlZFRhZyIsInNldEZvY3VzZWRUYWciLCJkZWZhdWx0SGlnaGxpZ2h0ZWQiLCJoaWdobGlnaHRlZEluZGV4UmVmIiwic2V0VmFsdWVTdGF0ZSIsInNldElucHV0VmFsdWVTdGF0ZSIsImZvY3VzZWQiLCJzZXRGb2N1c2VkIiwicmVzZXRJbnB1dFZhbHVlIiwibmV3SW5wdXRWYWx1ZSIsInNldE9wZW5TdGF0ZSIsImlucHV0UHJpc3RpbmUiLCJzZXRJbnB1dFByaXN0aW5lIiwiaW5wdXRWYWx1ZUlzU2VsZWN0ZWRWYWx1ZSIsInBvcHVwT3BlbiIsInZhbHVlMiIsInByZXZpb3VzUHJvcHMiLCJ2YWx1ZUNoYW5nZSIsImxpc3Rib3hBdmFpbGFibGUiLCJmb2N1c1RhZyIsInVzZUV2ZW50Q2FsbGJhY2siLCJ0YWdUb0ZvY3VzIiwicXVlcnlTZWxlY3RvciIsInNldEhpZ2hsaWdodGVkSW5kZXgiLCJyZWFzb24iLCJyZW1vdmVBdHRyaWJ1dGUiLCJwcmV2IiwiY2xhc3NMaXN0IiwicmVtb3ZlIiwibGlzdGJveE5vZGUiLCJnZXRBdHRyaWJ1dGUiLCJzY3JvbGxUb3AiLCJhZGQiLCJzY3JvbGxIZWlnaHQiLCJjbGllbnRIZWlnaHQiLCJzY3JvbGxCb3R0b20iLCJlbGVtZW50Qm90dG9tIiwib2Zmc2V0VG9wIiwib2Zmc2V0SGVpZ2h0IiwiY2hhbmdlSGlnaGxpZ2h0ZWRJbmRleCIsImRpZmYiLCJkaXJlY3Rpb24iLCJuZXh0SW5kZXgiLCJuZXh0Rm9jdXMiLCJuZXh0Rm9jdXNEaXNhYmxlZCIsImhhc0F0dHJpYnV0ZSIsInZhbGlkT3B0aW9uSW5kZXgiLCJtYXhJbmRleCIsIm5ld0luZGV4IiwiYWJzIiwiZ2V0TmV4dEluZGV4Iiwic2V0U2VsZWN0aW9uUmFuZ2UiLCJzeW5jSGlnaGxpZ2h0ZWRJbmRleCIsInByZXZpb3VzSGlnaGxpZ2h0ZWRPcHRpb25JbmRleCIsImV2ZXJ5IiwidmFsdWUxIiwicHJldmlvdXNIaWdobGlnaHRlZE9wdGlvbiIsImdldFByZXZpb3VzSGlnaGxpZ2h0ZWRPcHRpb25JbmRleCIsInZhbHVlSXRlbSIsImN1cnJlbnRPcHRpb24iLCJpdGVtSW5kZXgiLCJvcHRpb25JdGVtIiwiaGFuZGxlTGlzdGJveFJlZiIsInNldFJlZiIsImhhbmRsZU9wZW4iLCJoYW5kbGVDbG9zZSIsImhhbmRsZVZhbHVlIiwiZGV0YWlscyIsImlzVG91Y2giLCJzZWxlY3ROZXdWYWx1ZSIsInJlYXNvblByb3AiLCJvcmlnaW4iLCJzcGxpY2UiLCJjdHJsS2V5IiwibWV0YUtleSIsImJsdXIiLCJoYW5kbGVGb2N1c1RhZyIsIm5leHRUYWciLCJ2YWxpZFRhZ0luZGV4IiwiaGFuZGxlQ2xlYXIiLCJoYW5kbGVLZXlEb3duIiwib25LZXlEb3duIiwiZGVmYXVsdE11aVByZXZlbnRlZCIsIndoaWNoIiwicHJldmVudERlZmF1bHQiLCJzdG9wUHJvcGFnYXRpb24iLCJoYW5kbGVGb2N1cyIsImhhbmRsZUJsdXIiLCJoYW5kbGVJbnB1dENoYW5nZSIsInRhcmdldCIsImhhbmRsZU9wdGlvbk1vdXNlTW92ZSIsImN1cnJlbnRUYXJnZXQiLCJoYW5kbGVPcHRpb25Ub3VjaFN0YXJ0IiwiaGFuZGxlT3B0aW9uQ2xpY2siLCJoYW5kbGVUYWdEZWxldGUiLCJoYW5kbGVQb3B1cEluZGljYXRvciIsImhhbmRsZU1vdXNlRG93biIsImhhbmRsZUNsaWNrIiwic2VsZWN0aW9uRW5kIiwic2VsZWN0aW9uU3RhcnQiLCJzZWxlY3QiLCJoYW5kbGVJbnB1dE1vdXNlRG93biIsImRpcnR5IiwiZ3JvdXBlZE9wdGlvbnMiLCJNYXAiLCJncm91cCIsImdldFJvb3RQcm9wcyIsIm9uTW91c2VEb3duIiwiZ2V0SW5wdXRMYWJlbFByb3BzIiwiaHRtbEZvciIsImdldElucHV0UHJvcHMiLCJvbkJsdXIiLCJvbkZvY3VzIiwiYXV0b0NhcGl0YWxpemUiLCJzcGVsbENoZWNrIiwiZ2V0Q2xlYXJQcm9wcyIsInRhYkluZGV4IiwiZ2V0UG9wdXBJbmRpY2F0b3JQcm9wcyIsImdldFRhZ1Byb3BzIiwib25EZWxldGUiLCJnZXRMaXN0Ym94UHJvcHMiLCJnZXRPcHRpb25Qcm9wcyIsIl9nZXRPcHRpb25LZXkiLCJvbk1vdXNlTW92ZSIsIm9uVG91Y2hTdGFydCIsImdldFdpbmRvdyIsIm93bmVyRG9jdW1lbnQiLCJkZWZhdWx0VmlldyIsImlzRWxlbWVudCIsIkVsZW1lbnQiLCJpc0hUTUxFbGVtZW50IiwiSFRNTEVsZW1lbnQiLCJpc1NoYWRvd1Jvb3QiLCJTaGFkb3dSb290IiwiZ2V0VUFTdHJpbmciLCJ1YURhdGEiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnREYXRhIiwiYnJhbmRzIiwiaXRlbSIsImJyYW5kIiwidmVyc2lvbiIsInVzZXJBZ2VudCIsImlzTGF5b3V0Vmlld3BvcnQiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJpbmNsdWRlU2NhbGUiLCJpc0ZpeGVkU3RyYXRlZ3kiLCJjbGllbnRSZWN0Iiwic2NhbGVYIiwic2NhbGVZIiwib2Zmc2V0V2lkdGgiLCJ2aXN1YWxWaWV3cG9ydCIsImFkZFZpc3VhbE9mZnNldHMiLCJvZmZzZXRMZWZ0IiwieSIsImJvdHRvbSIsImdldFdpbmRvd1Njcm9sbCIsIndpbiIsInNjcm9sbExlZnQiLCJwYWdlWE9mZnNldCIsInBhZ2VZT2Zmc2V0IiwiZ2V0Tm9kZU5hbWUiLCJub2RlTmFtZSIsImdldERvY3VtZW50RWxlbWVudCIsImdldFdpbmRvd1Njcm9sbEJhclgiLCJpc1Njcm9sbFBhcmVudCIsIl9nZXRDb21wdXRlZFN0eWxlIiwib3ZlcmZsb3dYIiwib3ZlcmZsb3dZIiwiZ2V0Q29tcG9zaXRlUmVjdCIsImVsZW1lbnRPclZpcnR1YWxFbGVtZW50Iiwib2Zmc2V0UGFyZW50IiwiaXNGaXhlZCIsImlzT2Zmc2V0UGFyZW50QW5FbGVtZW50Iiwib2Zmc2V0UGFyZW50SXNTY2FsZWQiLCJyZWN0IiwiaXNFbGVtZW50U2NhbGVkIiwic2Nyb2xsIiwib2Zmc2V0cyIsImNsaWVudExlZnQiLCJjbGllbnRUb3AiLCJnZXRMYXlvdXRSZWN0IiwiZ2V0UGFyZW50Tm9kZSIsImFzc2lnbmVkU2xvdCIsInBhcmVudE5vZGUiLCJob3N0IiwiZ2V0U2Nyb2xsUGFyZW50IiwibGlzdFNjcm9sbFBhcmVudHMiLCJsaXN0IiwiX2VsZW1lbnQkb3duZXJEb2N1bWVuIiwic2Nyb2xsUGFyZW50IiwiaXNCb2R5IiwiY29uY2F0IiwidXBkYXRlZExpc3QiLCJpc1RhYmxlRWxlbWVudCIsImdldFRydWVPZmZzZXRQYXJlbnQiLCJnZXRPZmZzZXRQYXJlbnQiLCJpc0ZpcmVmb3giLCJjdXJyZW50Tm9kZSIsInBlcnNwZWN0aXZlIiwiY29udGFpbiIsIndpbGxDaGFuZ2UiLCJnZXRDb250YWluaW5nQmxvY2siLCJhdXRvIiwiYmFzZVBsYWNlbWVudHMiLCJlbmQiLCJ2aWV3cG9ydCIsInBvcHBlciIsInZhcmlhdGlvblBsYWNlbWVudHMiLCJwbGFjZW1lbnQiLCJtb2RpZmllclBoYXNlcyIsIm9yZGVyIiwibW9kaWZpZXJzIiwidmlzaXRlZCIsIlNldCIsInJlc3VsdCIsInNvcnQiLCJtb2RpZmllciIsInJlcXVpcmVzIiwicmVxdWlyZXNJZkV4aXN0cyIsImRlcCIsImhhcyIsImRlcE1vZGlmaWVyIiwiZ2V0Iiwic2V0IiwiREVGQVVMVF9PUFRJT05TIiwic3RyYXRlZ3kiLCJhcmVWYWxpZEVsZW1lbnRzIiwiX2xlbiIsImFyZ3VtZW50cyIsIl9rZXkiLCJwb3BwZXJHZW5lcmF0b3IiLCJnZW5lcmF0b3JPcHRpb25zIiwiX2dlbmVyYXRvck9wdGlvbnMiLCJfZ2VuZXJhdG9yT3B0aW9ucyRkZWYiLCJkZWZhdWx0TW9kaWZpZXJzIiwiX2dlbmVyYXRvck9wdGlvbnMkZGVmMiIsImRlZmF1bHRPcHRpb25zIiwicmVmZXJlbmNlIiwicGVuZGluZyIsIm9yZGVyZWRNb2RpZmllcnMiLCJtb2RpZmllcnNEYXRhIiwiZWxlbWVudHMiLCJhdHRyaWJ1dGVzIiwiZWZmZWN0Q2xlYW51cEZucyIsImlzRGVzdHJveWVkIiwiaW5zdGFuY2UiLCJzZXRPcHRpb25zIiwic2V0T3B0aW9uc0FjdGlvbiIsImNsZWFudXBNb2RpZmllckVmZmVjdHMiLCJzY3JvbGxQYXJlbnRzIiwiY29udGV4dEVsZW1lbnQiLCJtZXJnZWQiLCJwaGFzZSIsIm9yZGVyTW9kaWZpZXJzIiwiZXhpc3RpbmciLCJkYXRhIiwibSIsImVuYWJsZWQiLCJfcmVmJG9wdGlvbnMiLCJlZmZlY3QiLCJjbGVhbnVwRm4iLCJ1cGRhdGUiLCJmb3JjZVVwZGF0ZSIsIl9zdGF0ZSRlbGVtZW50cyIsInJlY3RzIiwicmVzZXQiLCJfc3RhdGUkb3JkZXJlZE1vZGlmaWUiLCJfc3RhdGUkb3JkZXJlZE1vZGlmaWUyIiwiX29wdGlvbnMiLCJQcm9taXNlIiwicmVzb2x2ZSIsInRoZW4iLCJkZXN0cm95Iiwib25GaXJzdFVwZGF0ZSIsInBhc3NpdmUiLCJnZXRCYXNlUGxhY2VtZW50IiwiZ2V0VmFyaWF0aW9uIiwiZ2V0TWFpbkF4aXNGcm9tUGxhY2VtZW50IiwiY29tcHV0ZU9mZnNldHMiLCJiYXNlUGxhY2VtZW50IiwidmFyaWF0aW9uIiwiY29tbW9uWCIsImNvbW1vblkiLCJtYWluQXhpcyIsImxlbiIsInVuc2V0U2lkZXMiLCJtYXBUb1N0eWxlcyIsIl9yZWYyIiwiX09iamVjdCRhc3NpZ24yIiwicG9wcGVyUmVjdCIsImdwdUFjY2VsZXJhdGlvbiIsImFkYXB0aXZlIiwicm91bmRPZmZzZXRzIiwiX29mZnNldHMkeCIsIl9vZmZzZXRzJHkiLCJfcmVmMyIsImhhc1giLCJoYXNPd25Qcm9wZXJ0eSIsImhhc1kiLCJzaWRlWCIsInNpZGVZIiwiaGVpZ2h0UHJvcCIsIndpZHRoUHJvcCIsIl9PYmplY3QkYXNzaWduIiwiY29tbW9uU3R5bGVzIiwiX3JlZjQiLCJkcHIiLCJkZXZpY2VQaXhlbFJhdGlvIiwicm91bmRPZmZzZXRzQnlEUFIiLCJpbml0aWFsU3R5bGVzIiwiYXJyb3ciLCJwcm9wZXJ0eSIsImhhc2giLCJnZXRPcHBvc2l0ZVBsYWNlbWVudCIsIm1hdGNoZWQiLCJnZXRPcHBvc2l0ZVZhcmlhdGlvblBsYWNlbWVudCIsInBhcmVudCIsImNoaWxkIiwicm9vdE5vZGUiLCJnZXRSb290Tm9kZSIsImlzU2FtZU5vZGUiLCJyZWN0VG9DbGllbnRSZWN0IiwiZ2V0Q2xpZW50UmVjdEZyb21NaXhlZFR5cGUiLCJjbGlwcGluZ1BhcmVudCIsImh0bWwiLCJjbGllbnRXaWR0aCIsImxheW91dFZpZXdwb3J0IiwiZ2V0Vmlld3BvcnRSZWN0IiwiZ2V0SW5uZXJCb3VuZGluZ0NsaWVudFJlY3QiLCJ3aW5TY3JvbGwiLCJzY3JvbGxXaWR0aCIsImdldERvY3VtZW50UmVjdCIsIm1lcmdlUGFkZGluZ09iamVjdCIsInBhZGRpbmdPYmplY3QiLCJleHBhbmRUb0hhc2hNYXAiLCJoYXNoTWFwIiwiZGV0ZWN0T3ZlcmZsb3ciLCJfb3B0aW9ucyRwbGFjZW1lbnQiLCJfb3B0aW9ucyRzdHJhdGVneSIsIl9vcHRpb25zJGJvdW5kYXJ5IiwiYm91bmRhcnkiLCJfb3B0aW9ucyRyb290Qm91bmRhcnkiLCJyb290Qm91bmRhcnkiLCJfb3B0aW9ucyRlbGVtZW50Q29udGUiLCJlbGVtZW50Q29udGV4dCIsIl9vcHRpb25zJGFsdEJvdW5kYXJ5IiwiYWx0Qm91bmRhcnkiLCJfb3B0aW9ucyRwYWRkaW5nIiwiYWx0Q29udGV4dCIsImNsaXBwaW5nQ2xpZW50UmVjdCIsIm1haW5DbGlwcGluZ1BhcmVudHMiLCJjbGlwcGluZ1BhcmVudHMiLCJjbGlwcGVyRWxlbWVudCIsImdldENsaXBwaW5nUGFyZW50cyIsImZpcnN0Q2xpcHBpbmdQYXJlbnQiLCJjbGlwcGluZ1JlY3QiLCJhY2NSZWN0IiwiZ2V0Q2xpcHBpbmdSZWN0IiwicmVmZXJlbmNlQ2xpZW50UmVjdCIsInBvcHBlck9mZnNldHMiLCJwb3BwZXJDbGllbnRSZWN0IiwiZWxlbWVudENsaWVudFJlY3QiLCJvdmVyZmxvd09mZnNldHMiLCJvZmZzZXREYXRhIiwib2Zmc2V0IiwibXVsdGlwbHkiLCJheGlzIiwid2l0aGluIiwiZ2V0U2lkZU9mZnNldHMiLCJwcmV2ZW50ZWRPZmZzZXRzIiwiaXNBbnlTaWRlRnVsbHlDbGlwcGVkIiwic2lkZSIsIl9vcHRpb25zJHNjcm9sbCIsIl9vcHRpb25zJHJlc2l6ZSIsInJlc2l6ZSIsIl9yZWY1IiwiX29wdGlvbnMkZ3B1QWNjZWxlcmF0IiwiX29wdGlvbnMkYWRhcHRpdmUiLCJfb3B0aW9ucyRyb3VuZE9mZnNldHMiLCJfb3B0aW9ucyRvZmZzZXQiLCJpbnZlcnREaXN0YW5jZSIsInNraWRkaW5nIiwiZGlzdGFuY2UiLCJkaXN0YW5jZUFuZFNraWRkaW5nVG9YWSIsIl9kYXRhJHN0YXRlJHBsYWNlbWVudCIsIl9za2lwIiwiX29wdGlvbnMkbWFpbkF4aXMiLCJjaGVja01haW5BeGlzIiwiX29wdGlvbnMkYWx0QXhpcyIsImFsdEF4aXMiLCJjaGVja0FsdEF4aXMiLCJzcGVjaWZpZWRGYWxsYmFja1BsYWNlbWVudHMiLCJmYWxsYmFja1BsYWNlbWVudHMiLCJfb3B0aW9ucyRmbGlwVmFyaWF0aW8iLCJmbGlwVmFyaWF0aW9ucyIsImFsbG93ZWRBdXRvUGxhY2VtZW50cyIsInByZWZlcnJlZFBsYWNlbWVudCIsIm9wcG9zaXRlUGxhY2VtZW50IiwiZ2V0RXhwYW5kZWRGYWxsYmFja1BsYWNlbWVudHMiLCJwbGFjZW1lbnRzIiwiX29wdGlvbnMkYWxsb3dlZEF1dG9QIiwiYWxsb3dlZFBsYWNlbWVudHMiLCJvdmVyZmxvd3MiLCJiIiwiY29tcHV0ZUF1dG9QbGFjZW1lbnQiLCJyZWZlcmVuY2VSZWN0IiwiY2hlY2tzTWFwIiwibWFrZUZhbGxiYWNrQ2hlY2tzIiwiZmlyc3RGaXR0aW5nUGxhY2VtZW50IiwiX2Jhc2VQbGFjZW1lbnQiLCJpc1N0YXJ0VmFyaWF0aW9uIiwiaXNWZXJ0aWNhbCIsIm1haW5WYXJpYXRpb25TaWRlIiwiYWx0VmFyaWF0aW9uU2lkZSIsImNoZWNrcyIsImNoZWNrIiwiX2xvb3AiLCJfaSIsImZpdHRpbmdQbGFjZW1lbnQiLCJmaW5kIiwiX29wdGlvbnMkdGV0aGVyIiwidGV0aGVyIiwiX29wdGlvbnMkdGV0aGVyT2Zmc2V0IiwidGV0aGVyT2Zmc2V0IiwiaXNCYXNlUGxhY2VtZW50IiwidGV0aGVyT2Zmc2V0VmFsdWUiLCJub3JtYWxpemVkVGV0aGVyT2Zmc2V0VmFsdWUiLCJvZmZzZXRNb2RpZmllclN0YXRlIiwiX29mZnNldE1vZGlmaWVyU3RhdGUkIiwibWFpblNpZGUiLCJhbHRTaWRlIiwiYWRkaXRpdmUiLCJtaW5MZW4iLCJtYXhMZW4iLCJhcnJvd0VsZW1lbnQiLCJhcnJvd1JlY3QiLCJhcnJvd1BhZGRpbmdPYmplY3QiLCJhcnJvd1BhZGRpbmdNaW4iLCJhcnJvd1BhZGRpbmdNYXgiLCJhcnJvd0xlbiIsIm1pbk9mZnNldCIsIm1heE9mZnNldCIsImFycm93T2Zmc2V0UGFyZW50IiwiY2xpZW50T2Zmc2V0Iiwib2Zmc2V0TW9kaWZpZXJWYWx1ZSIsInRldGhlck1heCIsInByZXZlbnRlZE9mZnNldCIsIl9vZmZzZXRNb2RpZmllclN0YXRlJDIiLCJfbWFpblNpZGUiLCJfYWx0U2lkZSIsIl9vZmZzZXQiLCJfbWluIiwiX21heCIsImlzT3JpZ2luU2lkZSIsIl9vZmZzZXRNb2RpZmllclZhbHVlIiwiX3RldGhlck1pbiIsIl90ZXRoZXJNYXgiLCJfcHJldmVudGVkT2Zmc2V0IiwidiIsIndpdGhpbk1heENsYW1wIiwiX3N0YXRlJG1vZGlmaWVyc0RhdGEkIiwidG9QYWRkaW5nT2JqZWN0IiwibWluUHJvcCIsIm1heFByb3AiLCJlbmREaWZmIiwic3RhcnREaWZmIiwiY2xpZW50U2l6ZSIsImNlbnRlclRvUmVmZXJlbmNlIiwiY2VudGVyIiwiYXhpc1Byb3AiLCJjZW50ZXJPZmZzZXQiLCJfb3B0aW9ucyRlbGVtZW50IiwicHJldmVudE92ZXJmbG93IiwicmVmZXJlbmNlT3ZlcmZsb3ciLCJwb3BwZXJBbHRPdmVyZmxvdyIsInJlZmVyZW5jZUNsaXBwaW5nT2Zmc2V0cyIsInBvcHBlckVzY2FwZU9mZnNldHMiLCJpc1JlZmVyZW5jZUhpZGRlbiIsImhhc1BvcHBlckVzY2FwZWQiLCJnZXRQb3BwZXJVdGlsaXR5Q2xhc3MiLCJyZXNvbHZlQW5jaG9yRWwiLCJkZWZhdWx0UG9wcGVyT3B0aW9ucyIsIlBvcHBlclRvb2x0aXAiLCJmb3J3YXJkZWRSZWYiLCJfc2xvdHMkcm9vdCIsImRpc2FibGVQb3J0YWwiLCJpbml0aWFsUGxhY2VtZW50IiwicG9wcGVyT3B0aW9ucyIsInBvcHBlclJlZiIsInBvcHBlclJlZlByb3AiLCJ0b29sdGlwUmVmIiwib3duUmVmIiwiaGFuZGxlUG9wcGVyUmVmIiwiaGFuZGxlUG9wcGVyUmVmUmVmIiwidXNlRW5oYW5jZWRFZmZlY3QiLCJydGxQbGFjZW1lbnQiLCJmbGlwUGxhY2VtZW50Iiwic2V0UGxhY2VtZW50IiwicmVzb2x2ZWRBbmNob3JFbGVtZW50Iiwic2V0UmVzb2x2ZWRBbmNob3JFbGVtZW50IiwicG9wcGVyTW9kaWZpZXJzIiwiUm9vdCIsInJvb3RQcm9wcyIsInVzZVNsb3RQcm9wcyIsImFkZGl0aW9uYWxQcm9wcyIsIlBvcHBlciIsImNvbnRhaW5lciIsImNvbnRhaW5lclByb3AiLCJrZWVwTW91bnRlZCIsImV4aXRlZCIsInNldEV4aXRlZCIsInJlc29sdmVkQW5jaG9yRWwiLCJub2RlVHlwZSIsIlBvcnRhbCIsIlBvcHBlclJvb3QiLCJCYXNlUG9wcGVyIiwiUm9vdENvbXBvbmVudCIsIm90aGVyUHJvcHMiLCJnZXRMaXN0U3ViaGVhZGVyVXRpbGl0eUNsYXNzIiwiTGlzdFN1YmhlYWRlclJvb3QiLCJpbnNldCIsImRpc2FibGVTdGlja3kiLCJzdGlja3kiLCJib3hTaXppbmciLCJsaXN0U3R5bGUiLCJmb250RmFtaWx5IiwicHhUb1JlbSIsInpJbmRleCIsIkxpc3RTdWJoZWFkZXIiLCJtdWlTa2lwTGlzdEhpZ2hsaWdodCIsImdldENoaXBVdGlsaXR5Q2xhc3MiLCJDaGlwUm9vdCIsImljb25Db2xvciIsImNsaWNrYWJsZSIsImF2YXRhciIsImRlbGV0ZUljb24iLCJkZWxldGFibGUiLCJ0ZXh0Q29sb3IiLCJtYXhXaWR0aCIsIm91dGxpbmUiLCJ0ZXh0RGVjb3JhdGlvbiIsInZlcnRpY2FsQWxpZ24iLCJwb2ludGVyRXZlbnRzIiwiZGVmYXVsdEF2YXRhckNvbG9yIiwiYXZhdGFyQ29sb3JQcmltYXJ5IiwiYXZhdGFyQ29sb3JTZWNvbmRhcnkiLCJhdmF0YXJTbWFsbCIsImRlZmF1bHRJY29uQ29sb3IiLCJXZWJraXRUYXBIaWdobGlnaHRDb2xvciIsInByaW1hcnlDaGFubmVsIiwiY29udHJhc3RUZXh0Q2hhbm5lbCIsInNlbGVjdGVkQ2hhbm5lbCIsInNlbGVjdGVkT3BhY2l0eSIsImZvY3VzT3BhY2l0eSIsInVzZXJTZWxlY3QiLCJob3Zlck9wYWNpdHkiLCJib3hTaGFkb3ciLCJzaGFkb3dzIiwiZGVmYXVsdEJvcmRlciIsImhvdmVyIiwiaWNvblNtYWxsIiwiZGVsZXRlSWNvblNtYWxsIiwibWFpbkNoYW5uZWwiLCJDaGlwTGFiZWwiLCJpc0RlbGV0ZUtleWJvYXJkRXZlbnQiLCJrZXlib2FyZEV2ZW50IiwiYXZhdGFyUHJvcCIsImNsaWNrYWJsZVByb3AiLCJDb21wb25lbnRQcm9wIiwiZGVsZXRlSWNvblByb3AiLCJpY29uUHJvcCIsIm9uS2V5VXAiLCJza2lwRm9jdXNXaGVuRGlzYWJsZWQiLCJjaGlwUmVmIiwiaGFuZGxlRGVsZXRlSWNvbkNsaWNrIiwibW9yZVByb3BzIiwiQ2FuY2VsIiwiZ2V0SW5wdXRCYXNlVXRpbGl0eUNsYXNzIiwiZ2V0SW5wdXRVdGlsaXR5Q2xhc3MiLCJnZXRPdXRsaW5lZElucHV0VXRpbGl0eUNsYXNzIiwiZ2V0RmlsbGVkSW5wdXRVdGlsaXR5Q2xhc3MiLCJnZXRBdXRvY29tcGxldGVVdGlsaXR5Q2xhc3MiLCJfQ2xlYXJJY29uIiwiX0Fycm93RHJvcERvd25JY29uIiwiX2V4Y2x1ZGVkNCIsIkF1dG9jb21wbGV0ZVJvb3QiLCJmdWxsV2lkdGgiLCJoYXNDbGVhckljb24iLCJoYXNQb3B1cEljb24iLCJpbnB1dEZvY3VzZWQiLCJ0YWciLCJpbnB1dFJvb3QiLCJjbGVhckluZGljYXRvciIsInBhZGRpbmdCb3R0b20iLCJzaXplU21hbGwiLCJlbmRBZG9ybm1lbnQiLCJwYWRkaW5nVG9wIiwiaGlkZGVuTGFiZWwiLCJmbGV4V3JhcCIsIkF1dG9jb21wbGV0ZUVuZEFkb3JubWVudCIsIkF1dG9jb21wbGV0ZUNsZWFySW5kaWNhdG9yIiwiQXV0b2NvbXBsZXRlUG9wdXBJbmRpY2F0b3IiLCJwb3B1cEluZGljYXRvciIsInBvcHVwSW5kaWNhdG9yT3BlbiIsIkF1dG9jb21wbGV0ZVBvcHBlciIsInBvcHBlckRpc2FibGVQb3J0YWwiLCJtb2RhbCIsIkF1dG9jb21wbGV0ZVBhcGVyIiwiQXV0b2NvbXBsZXRlTG9hZGluZyIsImxvYWRpbmciLCJBdXRvY29tcGxldGVOb09wdGlvbnMiLCJub09wdGlvbnMiLCJBdXRvY29tcGxldGVMaXN0Ym94IiwibGlzdGJveCIsIm1heEhlaWdodCIsIkF1dG9jb21wbGV0ZUdyb3VwTGFiZWwiLCJncm91cExhYmVsIiwiQXV0b2NvbXBsZXRlR3JvdXBVbCIsImdyb3VwVWwiLCJfc2xvdFByb3BzJGNsZWFySW5kaWMiLCJfc2xvdFByb3BzJHBhcGVyIiwiX3Nsb3RQcm9wcyRwb3BwZXIiLCJfc2xvdFByb3BzJHBvcHVwSW5kaWMiLCJDaGlwUHJvcHMiLCJjbGVhckljb24iLCJjbGVhclRleHQiLCJmb3JjZVBvcHVwSWNvbiIsImdldExpbWl0VGFnc1RleHQiLCJtb3JlIiwibGltaXRUYWdzIiwiTGlzdGJveENvbXBvbmVudCIsIkxpc3Rib3hQcm9wcyIsImxvYWRpbmdUZXh0Iiwibm9PcHRpb25zVGV4dCIsIm9wZW5UZXh0IiwiUGFwZXJDb21wb25lbnQiLCJQb3BwZXJDb21wb25lbnQiLCJwb3B1cEljb24iLCJBcnJvd0Ryb3BEb3duIiwicmVuZGVyR3JvdXAiLCJyZW5kZXJHcm91cFByb3AiLCJyZW5kZXJJbnB1dCIsInJlbmRlck9wdGlvbiIsInJlbmRlck9wdGlvblByb3AiLCJyZW5kZXJUYWdzIiwiZXh0ZXJuYWxMaXN0Ym94UmVmIiwiX2dldExpc3Rib3hQcm9wcyIsIm90aGVyTGlzdGJveFByb3BzIiwiY29tYmluZWRMaXN0Ym94UmVmIiwic3RhcnRBZG9ybm1lbnQiLCJnZXRDdXN0b21pemVkVGFnUHJvcHMiLCJfZ2V0Q3VzdG9taXplZFRhZ1Byb3AiLCJjdXN0b21UYWdQcm9wcyIsInByb3BzMiIsInJlbmRlckxpc3RPcHRpb24iLCJvcHRpb25Qcm9wcyIsImNsZWFySW5kaWNhdG9yU2xvdFByb3BzIiwicGFwZXJTbG90UHJvcHMiLCJwb3BwZXJTbG90UHJvcHMiLCJwb3B1cEluZGljYXRvclNsb3RQcm9wcyIsInJlbmRlckF1dG9jb21wbGV0ZVBvcHBlckNoaWxkcmVuIiwiYXV0b2NvbXBsZXRlUG9wcGVyIiwib3B0aW9uMiIsImluZGV4MiIsIklucHV0TGFiZWxQcm9wcyIsIklucHV0UHJvcHMiLCJpbnB1dFByb3BzIiwiZ2V0QXZhdGFyVXRpbGl0eUNsYXNzIiwiQXZhdGFyUm9vdCIsImNvbG9yRGVmYXVsdCIsImZsZXhTaHJpbmsiLCJkZWZhdWx0QmciLCJhcHBseVN0eWxlcyIsIkF2YXRhckltZyIsImltZyIsIm9iamVjdEZpdCIsInRleHRJbmRlbnQiLCJBdmF0YXJGYWxsYmFjayIsIlBlcnNvbiIsImZhbGxiYWNrIiwiYWx0IiwiaW1nUHJvcHMiLCJzaXplcyIsInNyYyIsInNyY1NldCIsImxvYWRlZCIsImNyb3NzT3JpZ2luIiwicmVmZXJyZXJQb2xpY3kiLCJzZXRMb2FkZWQiLCJpbWFnZSIsIkltYWdlIiwib25sb2FkIiwib25lcnJvciIsInNyY3NldCIsInVzZUxvYWRlZCIsImhhc0ltZyIsImhhc0ltZ05vdEZhaWxpbmciLCJJbWdTbG90IiwiaW1nU2xvdFByb3BzIiwiZ2V0QXZhdGFyR3JvdXBVdGlsaXR5Q2xhc3MiLCJTUEFDSU5HUyIsInNtYWxsIiwibWVkaXVtIiwiQXZhdGFyR3JvdXBSb290IiwibWFyZ2luVmFsdWUiLCJmbGV4RGlyZWN0aW9uIiwiQXZhdGFyR3JvdXAiLCJfc2xvdFByb3BzJGFkZGl0aW9uYWwiLCJyZW5kZXJTdXJwbHVzIiwidG90YWwiLCJjbGFtcGVkTWF4IiwidG90YWxBdmF0YXJzIiwibWF4QXZhdGFycyIsImV4dHJhQXZhdGFycyIsImV4dHJhQXZhdGFyc0VsZW1lbnQiLCJhZGRpdGlvbmFsQXZhdGFyU2xvdFByb3BzIiwiYWRkaXRpb25hbEF2YXRhciIsInJldmVyc2UiLCJnZXRCYWRnZVV0aWxpdHlDbGFzcyIsIkJhZGdlUm9vdCIsIkJhZGdlQmFkZ2UiLCJiYWRnZSIsImFuY2hvck9yaWdpbiIsInZlcnRpY2FsIiwiaG9yaXpvbnRhbCIsIm92ZXJsYXAiLCJpbnZpc2libGUiLCJfdGhlbWUkdmFycyIsImFsaWduQ29udGVudCIsIlJBRElVU19TVEFOREFSRCIsImVhc2VJbk91dCIsImVudGVyaW5nU2NyZWVuIiwiX3RoZW1lJHZhcnMyIiwiX3RoZW1lJHZhcnMzIiwiUkFESVVTX0RPVCIsInRyYW5zZm9ybU9yaWdpbiIsImxlYXZpbmdTY3JlZW4iLCJfc2xvdHMkYmFkZ2UiLCJfc2xvdFByb3BzJHJvb3QiLCJfc2xvdFByb3BzJGJhZGdlIiwiYW5jaG9yT3JpZ2luUHJvcCIsIm92ZXJsYXBQcm9wIiwiY29sb3JQcm9wIiwiaW52aXNpYmxlUHJvcCIsImJhZGdlQ29udGVudCIsImJhZGdlQ29udGVudFByb3AiLCJzaG93WmVybyIsInZhcmlhbnRQcm9wIiwiaW52aXNpYmxlRnJvbUhvb2siLCJkaXNwbGF5VmFsdWUiLCJkaXNwbGF5VmFsdWVGcm9tSG9vayIsInByZXZQcm9wcyIsIlJvb3RTbG90IiwiQmFkZ2VTbG90IiwiQmFkZ2UiLCJyb290U2xvdFByb3BzIiwiYmFkZ2VTbG90UHJvcHMiLCJiYWRnZVByb3BzIiwiZ2V0Qm90dG9tTmF2aWdhdGlvblV0aWxpdHlDbGFzcyIsIkJvdHRvbU5hdmlnYXRpb25Sb290Iiwic2hvd0xhYmVscyIsImNoaWxkSW5kZXgiLCJjaGlsZFZhbHVlIiwic2hvd0xhYmVsIiwiZ2V0Qm90dG9tTmF2aWdhdGlvbkFjdGlvblV0aWxpdHlDbGFzcyIsIkJvdHRvbU5hdmlnYXRpb25BY3Rpb25Sb290IiwiaWNvbk9ubHkiLCJzaG9ydCIsImZsZXgiLCJCb3R0b21OYXZpZ2F0aW9uQWN0aW9uTGFiZWwiLCJ0cmFuc2l0aW9uRGVsYXkiLCJCcmVhZGNydW1iQ29sbGFwc2VkQnV0dG9uIiwiQnJlYWRjcnVtYkNvbGxhcHNlZEljb24iLCJNb3JlSG9yaXoiLCJDb2xsYXBzZWRJY29uIiwiY29sbGFwc2VkSWNvbiIsImdldEJyZWFkY3J1bWJzVXRpbGl0eUNsYXNzIiwiQnJlYWRjcnVtYnNSb290IiwibGkiLCJCcmVhZGNydW1ic09sIiwib2wiLCJCcmVhZGNydW1ic1NlcGFyYXRvciIsInNlcGFyYXRvciIsImluc2VydFNlcGFyYXRvcnMiLCJpdGVtcyIsImV4cGFuZFRleHQiLCJpdGVtc0FmdGVyQ29sbGFwc2UiLCJpdGVtc0JlZm9yZUNvbGxhcHNlIiwibWF4SXRlbXMiLCJzZXRFeHBhbmRlZCIsImNvbGxhcHNlZEljb25TbG90UHJvcHMiLCJsaXN0UmVmIiwiYWxsSXRlbXMiLCJmb2N1c2FibGUiLCJyZW5kZXJJdGVtc0JlZm9yZUFuZEFmdGVyIiwiZ2V0VmFsaWRSZWFjdENoaWxkcmVuIiwiZ2V0QnV0dG9uR3JvdXBVdGlsaXR5Q2xhc3MiLCJCdXR0b25Hcm91cFJvb3QiLCJncm91cGVkIiwiZmlyc3RCdXR0b24iLCJsYXN0QnV0dG9uIiwibWlkZGxlQnV0dG9uIiwiZGlzYWJsZUVsZXZhdGlvbiIsImJvcmRlclJpZ2h0Iiwib25CYWNrZ3JvdW5kQ2hhbm5lbCIsImJvcmRlckJvdHRvbSIsImJvcmRlckNvbG9yIiwiYm9yZGVyUmlnaHRDb2xvciIsImJvcmRlckJvdHRvbUNvbG9yIiwiZGlzYWJsZUZvY3VzUmlwcGxlIiwiY29udGV4dCIsInZhbGlkQ2hpbGRyZW4iLCJjaGlsZHJlbkNvdW50IiwiZ2V0QnV0dG9uUG9zaXRpb25DbGFzc05hbWUiLCJpc0ZpcnN0QnV0dG9uIiwiaXNMYXN0QnV0dG9uIiwiQnV0dG9uR3JvdXBDb250ZXh0IiwiQnV0dG9uR3JvdXBCdXR0b25Db250ZXh0IiwiZ2V0Q2FyZFV0aWxpdHlDbGFzcyIsIkNhcmRSb290IiwicmFpc2VkIiwiZ2V0Q2FyZEFjdGlvbkFyZWFVdGlsaXR5Q2xhc3MiLCJDYXJkQWN0aW9uQXJlYVJvb3QiLCJmb2N1c0hpZ2hsaWdodCIsIkNhcmRBY3Rpb25BcmVhRm9jdXNIaWdobGlnaHQiLCJnZXRDYXJkQWN0aW9uc1V0aWxpdHlDbGFzcyIsIkNhcmRBY3Rpb25zUm9vdCIsImdldENhcmRDb250ZW50VXRpbGl0eUNsYXNzIiwiQ2FyZENvbnRlbnRSb290IiwiZ2V0Q2FyZEhlYWRlclV0aWxpdHlDbGFzcyIsIkNhcmRIZWFkZXJSb290Iiwic3ViaGVhZGVyIiwiQ2FyZEhlYWRlckF2YXRhciIsIkNhcmRIZWFkZXJBY3Rpb24iLCJhbGlnblNlbGYiLCJDYXJkSGVhZGVyQ29udGVudCIsImRpc2FibGVUeXBvZ3JhcGh5Iiwic3ViaGVhZGVyUHJvcCIsInN1YmhlYWRlclR5cG9ncmFwaHlQcm9wcyIsInRpdGxlUHJvcCIsInRpdGxlVHlwb2dyYXBoeVByb3BzIiwiZ2V0Q2FyZE1lZGlhVXRpbGl0eUNsYXNzIiwiQ2FyZE1lZGlhUm9vdCIsImlzTWVkaWFDb21wb25lbnQiLCJpc0ltYWdlQ29tcG9uZW50IiwiYmFja2dyb3VuZFNpemUiLCJiYWNrZ3JvdW5kUmVwZWF0IiwiYmFja2dyb3VuZFBvc2l0aW9uIiwiTUVESUFfQ09NUE9ORU5UUyIsIklNQUdFX0NPTVBPTkVOVFMiLCJDYXJkTWVkaWEiLCJjb21wb3NlZFN0eWxlIiwiYmFja2dyb3VuZEltYWdlIiwiZ2V0Q2lyY3VsYXJQcm9ncmVzc1V0aWxpdHlDbGFzcyIsIl90IiwiX3QyIiwiX3QzIiwiX3Q0IiwiY2lyY3VsYXJSb3RhdGVLZXlmcmFtZSIsImNpcmN1bGFyRGFzaEtleWZyYW1lIiwiQ2lyY3VsYXJQcm9ncmVzc1Jvb3QiLCJDaXJjdWxhclByb2dyZXNzU1ZHIiwic3ZnIiwiQ2lyY3VsYXJQcm9ncmVzc0NpcmNsZSIsImNpcmNsZSIsImRpc2FibGVTaHJpbmsiLCJjaXJjbGVEaXNhYmxlU2hyaW5rIiwic3Ryb2tlIiwic3Ryb2tlRGFzaGFycmF5Iiwic3Ryb2tlRGFzaG9mZnNldCIsIkNpcmN1bGFyUHJvZ3Jlc3MiLCJ0aGlja25lc3MiLCJjaXJjbGVTdHlsZSIsInJvb3RTdHlsZSIsImNpcmN1bWZlcmVuY2UiLCJQSSIsInZpZXdCb3giLCJmaWxsIiwic3Ryb2tlV2lkdGgiLCJtYXBFdmVudFByb3BUb0V2ZW50IiwiZXZlbnRQcm9wIiwiQ2xpY2tBd2F5TGlzdGVuZXIiLCJkaXNhYmxlUmVhY3RUcmVlIiwibW91c2VFdmVudCIsIm9uQ2xpY2tBd2F5IiwidG91Y2hFdmVudCIsIm1vdmVkUmVmIiwiYWN0aXZhdGVkUmVmIiwic3ludGhldGljRXZlbnRSZWYiLCJoYW5kbGVDbGlja0F3YXkiLCJpbnNpZGVSZWFjdFRyZWUiLCJkb2MiLCJjbGllbnRYIiwiY2xpZW50WSIsImNsaWNrZWRSb290U2Nyb2xsYmFyIiwiaW5zaWRlRE9NIiwiY29tcG9zZWRQYXRoIiwiY3JlYXRlSGFuZGxlU3ludGhldGljIiwiaGFuZGxlck5hbWUiLCJjaGlsZHJlblByb3BzSGFuZGxlciIsImNoaWxkcmVuUHJvcHMiLCJtYXBwZWRUb3VjaEV2ZW50IiwiaGFuZGxlVG91Y2hNb3ZlIiwibWFwcGVkTW91c2VFdmVudCIsInNob3VsZEZvcndhcmRQcm9wIiwic3lzdGVtRGVmYXVsdFRoZW1lIiwibG93ZXJjYXNlRmlyc3RMZXR0ZXIiLCJkZWZhdWx0T3ZlcnJpZGVzUmVzb2x2ZXIiLCJwcm9jZXNzU3R5bGVBcmciLCJjYWxsYWJsZVN0eWxlIiwicmVzb2x2ZWRTdHlsZXNBcmciLCJmbGF0TWFwIiwicmVzb2x2ZWRTdHlsZSIsImlzTWF0Y2giLCJyb290U2hvdWxkRm9yd2FyZFByb3AiLCJzbG90U2hvdWxkRm9yd2FyZFByb3AiLCJzeXN0ZW1TeCIsIl9fbXVpX3N5c3RlbVN4IiwiaW5wdXRPcHRpb25zIiwiY29tcG9uZW50U2xvdCIsInNraXBWYXJpYW50c1Jlc29sdmVyIiwiaW5wdXRTa2lwVmFyaWFudHNSZXNvbHZlciIsInNraXBTeCIsImlucHV0U2tpcFN4Iiwic2hvdWxkRm9yd2FyZFByb3BPcHRpb24iLCJpc1N0cmluZ1RhZyIsImRlZmF1bHRTdHlsZWRSZXNvbHZlciIsInRyYW5zZm9ybVN0eWxlQXJnIiwic3R5bGVzQXJnIiwiX19lbW90aW9uX3JlYWwiLCJtdWlTdHlsZWRSZXNvbHZlciIsInN0eWxlQXJnIiwiZXhwcmVzc2lvbnMiLCJ0cmFuc2Zvcm1lZFN0eWxlQXJnIiwiZXhwcmVzc2lvbnNXaXRoRGVmYXVsdFRoZW1lIiwicmVzb2x2ZWRTdHlsZU92ZXJyaWRlcyIsInNsb3RLZXkiLCJzbG90U3R5bGUiLCJfdGhlbWUkY29tcG9uZW50cyIsIm51bU9mQ3VzdG9tRm5zQXBwbGllZCIsInBsYWNlaG9sZGVycyIsInJhdyIsIm11aU5hbWUiLCJ3aXRoQ29uZmlnIiwiY3JlYXRlU3R5bGVkIiwiZGVmYXVsdENyZWF0ZVN0eWxlZENvbXBvbmVudCIsImZpeGVkIiwidXNlVGhlbWVQcm9wc0RlZmF1bHQiLCJDb250YWluZXIiLCJjcmVhdGVTdHlsZWRDb21wb25lbnQiLCJDb250YWluZXJSb290IiwiYnJlYWtwb2ludFZhbHVlS2V5IiwieHMiLCJjcmVhdGVDb250YWluZXIiLCJnZXRDb250YWluZXJVdGlsaXR5Q2xhc3MiLCJzY3JvbGxCYXIiLCJ0cmFjayIsInRodW1iIiwiZGFya1Njcm9sbGJhciIsInNjcm9sbGJhckNvbG9yIiwiZ2V0RGlhbG9nVXRpbGl0eUNsYXNzIiwiRGlhbG9nQmFja2Ryb3AiLCJCYWNrZHJvcCIsImJhY2tkcm9wIiwiRGlhbG9nUm9vdCIsIk1vZGFsIiwiRGlhbG9nQ29udGFpbmVyIiwiRGlhbG9nUGFwZXIiLCJwYXBlckZ1bGxXaWR0aCIsImZ1bGxTY3JlZW4iLCJwYXBlckZ1bGxTY3JlZW4iLCJwYXBlclNjcm9sbEJvZHkiLCJkb3duIiwiZGVmYXVsdFRyYW5zaXRpb25EdXJhdGlvbiIsImVudGVyIiwiZXhpdCIsImFyaWFEZXNjcmliZWRieSIsImFyaWFMYWJlbGxlZGJ5UHJvcCIsIkJhY2tkcm9wQ29tcG9uZW50IiwiQmFja2Ryb3BQcm9wcyIsImRpc2FibGVFc2NhcGVLZXlEb3duIiwib25CYWNrZHJvcENsaWNrIiwiUGFwZXJQcm9wcyIsIkZhZGUiLCJiYWNrZHJvcENsaWNrIiwiYXJpYUxhYmVsbGVkYnkiLCJkaWFsb2dDb250ZXh0VmFsdWUiLCJ0aXRsZUlkIiwiY2xvc2VBZnRlclRyYW5zaXRpb24iLCJhcHBlYXIiLCJnZXREaWFsb2dBY3Rpb25zVXRpbGl0eUNsYXNzIiwiRGlhbG9nQWN0aW9uc1Jvb3QiLCJnZXREaWFsb2dDb250ZW50VXRpbGl0eUNsYXNzIiwiZ2V0RGlhbG9nVGl0bGVVdGlsaXR5Q2xhc3MiLCJEaWFsb2dDb250ZW50Um9vdCIsImRpdmlkZXJzIiwiV2Via2l0T3ZlcmZsb3dTY3JvbGxpbmciLCJib3JkZXJUb3AiLCJnZXREaWFsb2dDb250ZW50VGV4dFV0aWxpdHlDbGFzcyIsIkRpYWxvZ0NvbnRlbnRUZXh0Um9vdCIsImNvbXBvc2VkQ2xhc3NlcyIsIkRpYWxvZ1RpdGxlUm9vdCIsIkRpdmlkZXJSb290IiwiYWJzb2x1dGUiLCJmbGV4SXRlbSIsIndpdGhDaGlsZHJlbiIsIndpdGhDaGlsZHJlblZlcnRpY2FsIiwidGV4dEFsaWduUmlnaHQiLCJ0ZXh0QWxpZ25MZWZ0IiwiYm9yZGVyV2lkdGgiLCJib3JkZXJTdHlsZSIsImJvcmRlckJvdHRvbVdpZHRoIiwiZGl2aWRlckNoYW5uZWwiLCJib3JkZXJSaWdodFdpZHRoIiwiYm9yZGVyTGVmdCIsIkRpdmlkZXJXcmFwcGVyIiwid3JhcHBlclZlcnRpY2FsIiwiRGl2aWRlciIsInNldFRyYW5zbGF0ZVZhbHVlIiwiY29udGFpbmVyUHJvcFByb3AiLCJyZXNvbHZlZENvbnRhaW5lciIsImNvbnRhaW5lclJlY3QiLCJjb250YWluZXJXaW5kb3ciLCJvd25lcldpbmRvdyIsImZha2VUcmFuc2Zvcm0iLCJjb21wdXRlZFN0eWxlIiwiZ2V0UHJvcGVydHlWYWx1ZSIsIm9mZnNldFgiLCJvZmZzZXRZIiwidHJhbnNmb3JtVmFsdWVzIiwiaW5uZXJXaWR0aCIsImlubmVySGVpZ2h0IiwiZ2V0VHJhbnNsYXRlVmFsdWUiLCJ3ZWJraXRUcmFuc2Zvcm0iLCJTbGlkZSIsImRlZmF1bHRFYXNpbmciLCJlYXNlT3V0Iiwic2hhcnAiLCJkZWZhdWx0VGltZW91dCIsImVhc2luZ1Byb3AiLCJjaGlsZHJlblJlZiIsIndlYmtpdFRyYW5zaXRpb24iLCJ1cGRhdGVQb3NpdGlvbiIsImhhbmRsZVJlc2l6ZSIsImNsZWFyIiwiZ2V0RHJhd2VyVXRpbGl0eUNsYXNzIiwiZG9ja2VkIiwiRHJhd2VyUm9vdCIsImRyYXdlciIsIkRyYXdlckRvY2tlZFJvb3QiLCJEcmF3ZXJQYXBlciIsImFuY2hvciIsIm9wcG9zaXRlRGlyZWN0aW9uIiwiZ2V0QW5jaG9yIiwiaXNSdGwiLCJhbmNob3JQcm9wIiwiaGlkZUJhY2tkcm9wIiwiTW9kYWxQcm9wcyIsIkJhY2tkcm9wUHJvcHNQcm9wIiwiU2xpZGVQcm9wcyIsIm1vdW50ZWQiLCJhbmNob3JJbnZhcmlhbnQiLCJzbGlkaW5nRHJhd2VyIiwiZ2V0RmFiVXRpbGl0eUNsYXNzIiwiRmFiUm9vdCIsImNvbG9ySW5oZXJpdCIsIl90aGVtZSRwYWxldHRlJGdldENvbiIsIl90aGVtZSRwYWxldHRlIiwiYnV0dG9uIiwiZmFiIiwiZ2V0U3R5bGVWYWx1ZSIsIlRleHRhcmVhQXV0b3NpemUiLCJtYXhSb3dzIiwibWluUm93cyIsImlzQ29udHJvbGxlZCIsImhlaWdodFJlZiIsInNoYWRvd1JlZiIsImNhbGN1bGF0ZVRleHRhcmVhU3R5bGVzIiwib3V0ZXJIZWlnaHRTdHlsZSIsIm92ZXJmbG93aW5nIiwiaW5wdXRTaGFsbG93IiwicGxhY2Vob2xkZXIiLCJib3JkZXJUb3BXaWR0aCIsInNpbmdsZVJvd0hlaWdodCIsIm91dGVySGVpZ2h0Iiwic3luY0hlaWdodCIsInRleHRhcmVhU3R5bGVzIiwiZGVib3VuY2VIYW5kbGVSZXNpemUiLCJyZXNpemVPYnNlcnZlciIsIlJlc2l6ZU9ic2VydmVyIiwib2JzZXJ2ZSIsImNhbmNlbEFuaW1hdGlvbkZyYW1lIiwickFGIiwiZGlzY29ubmVjdCIsInJvd3MiLCJmb3JtQ29udHJvbFN0YXRlIiwic3RhdGVzIiwibXVpRm9ybUNvbnRyb2wiLCJoYXNWYWx1ZSIsImlzRmlsbGVkIiwiU1NSIiwicm9vdE92ZXJyaWRlc1Jlc29sdmVyIiwiZm9ybUNvbnRyb2wiLCJhZG9ybmVkU3RhcnQiLCJhZG9ybmVkRW5kIiwibXVsdGlsaW5lIiwiaW5wdXRPdmVycmlkZXNSZXNvbHZlciIsImlucHV0U2l6ZVNtYWxsIiwiaW5wdXRNdWx0aWxpbmUiLCJpbnB1dFR5cGVTZWFyY2giLCJpbnB1dEFkb3JuZWRTdGFydCIsImlucHV0QWRvcm5lZEVuZCIsImlucHV0SGlkZGVuTGFiZWwiLCJJbnB1dEJhc2VSb290IiwiSW5wdXRCYXNlQ29tcG9uZW50Iiwic2hvcnRlciIsInBsYWNlaG9sZGVySGlkZGVuIiwicGxhY2Vob2xkZXJWaXNpYmxlIiwibGV0dGVyU3BhY2luZyIsImFuaW1hdGlvbk5hbWUiLCJhbmltYXRpb25EdXJhdGlvbiIsIldlYmtpdEFwcGVhcmFuY2UiLCJXZWJraXRUZXh0RmlsbENvbG9yIiwiTW96QXBwZWFyYW5jZSIsImlucHV0R2xvYmFsU3R5bGVzIiwiZnJvbSIsIklucHV0QmFzZSIsIl9zbG90UHJvcHMkaW5wdXQiLCJhdXRvRm9jdXMiLCJkaXNhYmxlSW5qZWN0aW5nR2xvYmFsU3R5bGVzIiwiaW5wdXRDb21wb25lbnQiLCJpbnB1dFByb3BzUHJvcCIsImlucHV0UmVmUHJvcCIsInJlbmRlclN1ZmZpeCIsImhhbmRsZUlucHV0UmVmV2FybmluZyIsImhhbmRsZUlucHV0UmVmIiwidXNlRm9ybUNvbnRyb2wiLCJmY3MiLCJvbkZpbGxlZCIsIm9uRW1wdHkiLCJjaGVja0RpcnR5IiwiSW5wdXRDb21wb25lbnQiLCJzZXRBZG9ybmVkU3RhcnQiLCJCb29sZWFuIiwiSW5wdXQiLCJpc0hvc3RDb21wb25lbnQiLCJGb3JtQ29udHJvbENvbnRleHQiLCJvbkFuaW1hdGlvblN0YXJ0IiwicmVxdWlyZWQiLCJGaWxsZWRJbnB1dFJvb3QiLCJkaXNhYmxlVW5kZXJsaW5lIiwidW5kZXJsaW5lIiwiX3BhbGV0dGUiLCJib3R0b21MaW5lQ29sb3IiLCJob3ZlckJhY2tncm91bmQiLCJiZyIsImhvdmVyQmciLCJkaXNhYmxlZEJnIiwiYm9yZGVyQm90dG9tU3R5bGUiLCJGaWxsZWRJbnB1dElucHV0IiwiV2Via2l0Qm94U2hhZG93IiwiY2FyZXRDb2xvciIsIl9zbG90cyRpbnB1dCIsImNvbXBvbmVudHNQcm9wc1Byb3AiLCJmaWxsZWRJbnB1dENvbXBvbmVudHNQcm9wcyIsIklucHV0U2xvdCIsImdldEZvcm1Db250cm9sVXRpbGl0eUNsYXNzZXMiLCJGb3JtQ29udHJvbFJvb3QiLCJ2aXN1YWxseUZvY3VzZWQiLCJpbml0aWFsQWRvcm5lZFN0YXJ0IiwiaXNNdWlFbGVtZW50IiwiZmlsbGVkIiwic2V0RmlsbGVkIiwiaW5pdGlhbEZpbGxlZCIsImZvY3VzZWRTdGF0ZSIsInJlZ2lzdGVyRWZmZWN0IiwiY2hpbGRDb250ZXh0Iiwiam9pbkNoaWxkcmVuIiwiY2hpbGRyZW5BcnJheSIsInByb3BWYWx1ZSIsInRyYW5zZm9ybWVyIiwiYmFzZSIsImRpcmVjdGlvblZhbHVlcyIsInNwYWNpbmdWYWx1ZXMiLCJwcmV2aW91c0RpcmVjdGlvblZhbHVlIiwic3R5bGVGcm9tUHJvcFZhbHVlIiwidXNlRmxleEdhcCIsImdhcCIsInJvdyIsImNvbHVtbiIsIlN0YWNrIiwiU3RhY2tSb290IiwiY3JlYXRlU3RhY2siLCJnZXRGb3JtQ29udHJvbExhYmVsVXRpbGl0eUNsYXNzZXMiLCJGb3JtQ29udHJvbExhYmVsUm9vdCIsImxhYmVsUGxhY2VtZW50IiwiQXN0ZXJpc2tDb21wb25lbnQiLCJhc3RlcmlzayIsIl9zbG90UHJvcHMkdHlwb2dyYXBoeSIsImNvbnRyb2wiLCJsYWJlbFByb3AiLCJyZXF1aXJlZFByb3AiLCJjb250cm9sUHJvcHMiLCJ0eXBvZ3JhcGh5U2xvdFByb3BzIiwiZ2V0Rm9ybUdyb3VwVXRpbGl0eUNsYXNzIiwiRm9ybUdyb3VwUm9vdCIsImdldEZvcm1IZWxwZXJUZXh0VXRpbGl0eUNsYXNzZXMiLCJfc3BhbiIsIkZvcm1IZWxwZXJUZXh0Um9vdCIsImNvbnRhaW5lZCIsImNhcHRpb24iLCJnZXRGb3JtTGFiZWxVdGlsaXR5Q2xhc3NlcyIsIkZvcm1MYWJlbFJvb3QiLCJjb2xvclNlY29uZGFyeSIsImdldEdyaWRVdGlsaXR5Q2xhc3MiLCJHUklEX1NJWkVTIiwiZ3JpZENsYXNzZXMiLCJ3cmFwIiwiZ2V0T2Zmc2V0IiwicGFyc2UiLCJleHRyYWN0WmVyb1ZhbHVlQnJlYWtwb2ludEtleXMiLCJub25aZXJvS2V5Iiwic29ydGVkQnJlYWtwb2ludEtleXNCeVZhbHVlIiwiR3JpZFJvb3QiLCJ6ZXJvTWluV2lkdGgiLCJzcGFjaW5nU3R5bGVzIiwiaXNOYU4iLCJyZXNvbHZlU3BhY2luZ1N0eWxlcyIsImJyZWFrcG9pbnRzU3R5bGVzIiwicm93U3BhY2luZyIsInJvd1NwYWNpbmdWYWx1ZXMiLCJ6ZXJvVmFsdWVCcmVha3BvaW50S2V5cyIsIl96ZXJvVmFsdWVCcmVha3BvaW50SyIsInRoZW1lU3BhY2luZyIsImNvbHVtblNwYWNpbmciLCJjb2x1bW5TcGFjaW5nVmFsdWVzIiwiX3plcm9WYWx1ZUJyZWFrcG9pbnRLMiIsImdsb2JhbFN0eWxlcyIsImZsZXhCYXNpcyIsImNvbHVtbnNCcmVha3BvaW50VmFsdWVzIiwiY29sdW1ucyIsImNvbHVtblZhbHVlIiwiR3JpZCIsImNvbHVtbnNQcm9wIiwiY29sdW1uU3BhY2luZ1Byb3AiLCJyb3dTcGFjaW5nUHJvcCIsImNvbHVtbnNDb250ZXh0IiwiYnJlYWtwb2ludHNWYWx1ZXMiLCJvdGhlckZpbHRlcmVkIiwic3BhY2luZ0NsYXNzZXMiLCJyZXNvbHZlU3BhY2luZ0NsYXNzZXMiLCJicmVha3BvaW50c0NsYXNzZXMiLCJ0cmF2ZXJzZUJyZWFrcG9pbnRzIiwicmVzcG9uc2l2ZSIsInNtYWxsZXN0QnJlYWtwb2ludCIsImJyZWFrcG9pbnRzS2V5cyIsInJlc3BvbnNpdmVLZXlzIiwiYnJlYWtwb2ludFZhbHVlIiwicmVzcG9uc2l2ZVN0eWxlcyIsImFwcGVuZExldmVsIiwibGV2ZWwiLCJpc05lc3RlZENvbnRhaW5lciIsInVuc3RhYmxlX2xldmVsIiwiY3JlYXRlR2V0U2VsZlNwYWNpbmciLCJjcmVhdGVHZXRQYXJlbnRTcGFjaW5nIiwiZ2V0UGFyZW50Q29sdW1ucyIsImdlbmVyYXRlR3JpZFNpemVTdHlsZXMiLCJnZXRTZWxmU3BhY2luZyIsImdyaWRTaXplIiwiYXBwZW5kU3R5bGUiLCJnZW5lcmF0ZUdyaWRPZmZzZXRTdHlsZXMiLCJncmlkT2Zmc2V0IiwiZ2VuZXJhdGVHcmlkQ29sdW1uc1N0eWxlcyIsImdlbmVyYXRlR3JpZFJvd1NwYWNpbmdTdHlsZXMiLCJnZXRQYXJlbnRTcGFjaW5nIiwiX3RoZW1lJHNwYWNpbmciLCJnZW5lcmF0ZUdyaWRDb2x1bW5TcGFjaW5nU3R5bGVzIiwiX3RoZW1lJHNwYWNpbmcyIiwiZ2VuZXJhdGVHcmlkRGlyZWN0aW9uU3R5bGVzIiwiZ2VuZXJhdGVHcmlkU3R5bGVzIiwiZGlzYWJsZUVxdWFsT3ZlcmZsb3ciLCJwYXJlbnREaXNhYmxlRXF1YWxPdmVyZmxvdyIsImdlbmVyYXRlU2l6ZUNsYXNzTmFtZXMiLCJjbGFzc05hbWVzIiwiZ2VuZXJhdGVTcGFjaW5nQ2xhc3NOYW1lcyIsImlzVmFsaWRTcGFjaW5nIiwiZ2VuZXJhdGVEaXJlY3Rpb25DbGFzc2VzIiwiR3JpZDIiLCJHcmlkT3ZlcmZsb3dDb250ZXh0IiwiX2luUHJvcHMkY29sdW1ucyIsIl9pblByb3BzJHNwYWNpbmciLCJfaW5Qcm9wcyRyb3dTcGFjaW5nIiwiX2luUHJvcHMkY29sdW1uU3BhY2luIiwiX2Rpc2FibGVFcXVhbE92ZXJmbG93Iiwic3BhY2luZ1Byb3AiLCJ0aGVtZURpc2FibGVFcXVhbE92ZXJmbG93IiwicmVzdCIsIl9jaGlsZCRwcm9wcyR1bnN0YWJsZSIsImNyZWF0ZUdyaWQiLCJnZXRHcmlkMlV0aWxpdHlDbGFzcyIsImdyaWQyQ2xhc3NlcyIsInVzZU1lZGlhUXVlcnlPbGQiLCJxdWVyeSIsImRlZmF1bHRNYXRjaGVzIiwic3NyTWF0Y2hNZWRpYSIsIm5vU3NyIiwic2V0TWF0Y2giLCJxdWVyeUxpc3QiLCJ1cGRhdGVNYXRjaCIsIm1heWJlUmVhY3RVc2VTeW5jRXh0ZXJuYWxTdG9yZSIsInVzZU1lZGlhUXVlcnlOZXciLCJnZXREZWZhdWx0U25hcHNob3QiLCJnZXRTZXJ2ZXJTbmFwc2hvdCIsImdldFNuYXBzaG90Iiwic3Vic2NyaWJlIiwibWVkaWFRdWVyeUxpc3QiLCJub3RpZnkiLCJ1c2VNZWRpYVF1ZXJ5IiwicXVlcnlJbnB1dCIsInN1cHBvcnRNYXRjaE1lZGlhIiwiYnJlYWtwb2ludEtleXMiLCJpc1dpZHRoVXAiLCJpbmNsdXNpdmUiLCJpc1dpZHRoRG93biIsIndpdGhUaGVtZU9wdGlvbiIsIm5vU1NSIiwiaW5pdGlhbFdpZHRoIiwiaW5pdGlhbFdpZHRoT3B0aW9uIiwiY29udGV4dFRoZW1lIiwiX2dldFRoZW1lUHJvcHMiLCJtb3VudGVkU3RhdGUiLCJzZXRNb3VudGVkU3RhdGUiLCJ3aWR0aENvbXB1dGVkIiwib25seSIsInZpc2libGUiLCJicmVha3BvaW50VXAiLCJicmVha3BvaW50RG93biIsImdldEhpZGRlbkNzc1V0aWxpdHlDbGFzcyIsIkhpZGRlbkNzc1Jvb3QiLCJkaXIiLCJpbXBsZW1lbnRhdGlvbiIsImxnRG93biIsImxnVXAiLCJtZERvd24iLCJtZFVwIiwic21Eb3duIiwic21VcCIsInhsRG93biIsInhsVXAiLCJ4c0Rvd24iLCJ4c1VwIiwiZ2V0SWNvblV0aWxpdHlDbGFzcyIsIkljb25Sb290IiwibGFyZ2UiLCJJY29uIiwiYmFzZUNsYXNzTmFtZSIsImdldEltYWdlTGlzdFV0aWxpdHlDbGFzcyIsIkltYWdlTGlzdFJvb3QiLCJJbWFnZUxpc3QiLCJjb2xzIiwicm93SGVpZ2h0Iiwic3R5bGVQcm9wIiwiY29sdW1uQ291bnQiLCJjb2x1bW5HYXAiLCJncmlkVGVtcGxhdGVDb2x1bW5zIiwiZ2V0SW1hZ2VMaXN0SXRlbVV0aWxpdHlDbGFzcyIsIkltYWdlTGlzdEl0ZW1Sb290IiwiSW1hZ2VMaXN0SXRlbSIsImdyaWRDb2x1bW5FbmQiLCJncmlkUm93RW5kIiwiYnJlYWtJbnNpZGUiLCJnZXRJbWFnZUxpc3RJdGVtQmFyVXRpbGl0eUNsYXNzIiwiSW1hZ2VMaXN0SXRlbUJhclJvb3QiLCJJbWFnZUxpc3RJdGVtQmFyVGl0bGVXcmFwIiwidGl0bGVXcmFwIiwiYWN0aW9uSWNvbiIsImFjdGlvblBvc2l0aW9uIiwid2hpdGUiLCJJbWFnZUxpc3RJdGVtQmFyVGl0bGUiLCJJbWFnZUxpc3RJdGVtQmFyU3VidGl0bGUiLCJzdWJ0aXRsZSIsIkltYWdlTGlzdEl0ZW1CYXJBY3Rpb25JY29uIiwiSW5wdXRSb290IiwiSW5wdXRJbnB1dCIsImlucHV0Q29tcG9uZW50c1Byb3BzIiwiZ2V0SW5wdXRBZG9ybm1lbnRVdGlsaXR5Q2xhc3MiLCJJbnB1dEFkb3JubWVudFJvb3QiLCJkaXNhYmxlUG9pbnRlckV2ZW50cyIsInBvc2l0aW9uU3RhcnQiLCJnZXRJbnB1dExhYmVsVXRpbGl0eUNsYXNzZXMiLCJJbnB1dExhYmVsUm9vdCIsInNocmluayIsImRpc2FibGVBbmltYXRpb24iLCJhbmltYXRlZCIsInNocmlua1Byb3AiLCJnZXRMaW5lYXJQcm9ncmVzc1V0aWxpdHlDbGFzcyIsIl90NSIsIl90NiIsImluZGV0ZXJtaW5hdGUxS2V5ZnJhbWUiLCJpbmRldGVybWluYXRlMktleWZyYW1lIiwiYnVmZmVyS2V5ZnJhbWUiLCJnZXRDb2xvclNoYWRlIiwiTGluZWFyUHJvZ3Jlc3NSb290IiwiY29sb3JBZGp1c3QiLCJMaW5lYXJQcm9ncmVzc0Rhc2hlZCIsImRhc2hlZCIsIkxpbmVhclByb2dyZXNzQmFyMSIsImJhciIsImJhcjFJbmRldGVybWluYXRlIiwiYmFyMURldGVybWluYXRlIiwiYmFyMUJ1ZmZlciIsIkxpbmVhclByb2dyZXNzQmFyMiIsImJhcjJJbmRldGVybWluYXRlIiwiYmFyMkJ1ZmZlciIsInZhbHVlQnVmZmVyIiwiYmFyMSIsImJhcjIiLCJpbmxpbmVTdHlsZXMiLCJnZXRMaW5rVXRpbGl0eUNsYXNzIiwidHJhbnNmb3JtZWRDb2xvciIsImNoYW5uZWxDb2xvciIsIkxpbmtSb290IiwidGV4dERlY29yYXRpb25Db2xvciIsIlR5cG9ncmFwaHlDbGFzc2VzIiwiaXNGb2N1c1Zpc2libGVSZWYiLCJoYW5kbGVCbHVyVmlzaWJsZSIsImhhbmRsZUZvY3VzVmlzaWJsZSIsImZvY3VzVmlzaWJsZVJlZiIsInVzZUlzRm9jdXNWaXNpYmxlIiwic2V0Rm9jdXNWaXNpYmxlIiwiaGFuZGxlclJlZiIsImdldExpc3RJdGVtVXRpbGl0eUNsYXNzIiwiZ2V0TGlzdEl0ZW1CdXR0b25VdGlsaXR5Q2xhc3MiLCJnZXRMaXN0SXRlbVNlY29uZGFyeUFjdGlvbkNsYXNzZXNVdGlsaXR5Q2xhc3MiLCJMaXN0SXRlbVNlY29uZGFyeUFjdGlvblJvb3QiLCJMaXN0SXRlbVNlY29uZGFyeUFjdGlvbiIsIkxpc3RDb250ZXh0IiwiTGlzdEl0ZW1Sb290IiwiZGVuc2UiLCJhbGlnbkl0ZW1zRmxleFN0YXJ0IiwiZGlzYWJsZVBhZGRpbmciLCJoYXNTZWNvbmRhcnlBY3Rpb24iLCJzZWNvbmRhcnlBY3Rpb24iLCJiYWNrZ3JvdW5kQ2xpcCIsIkxpc3RJdGVtQ29udGFpbmVyIiwiY29tcG9uZW50UHJvcCIsIkNvbnRhaW5lckNvbXBvbmVudCIsIkNvbnRhaW5lclByb3BzIiwiQ29udGFpbmVyQ2xhc3NOYW1lIiwibGlzdEl0ZW1SZWYiLCJjb21wb25lbnRQcm9wcyIsInBvcCIsImdldExpc3RJdGVtQXZhdGFyVXRpbGl0eUNsYXNzIiwiTGlzdEl0ZW1BdmF0YXJSb290IiwiTGlzdEl0ZW1CdXR0b25Sb290IiwiaHJlZiIsInRvIiwiTGlzdEl0ZW1JY29uUm9vdCIsIkxpc3RJdGVtVGV4dFJvb3QiLCJsaXN0SXRlbVRleHRDbGFzc2VzIiwicHJpbWFyeVByb3AiLCJwcmltYXJ5VHlwb2dyYXBoeVByb3BzIiwic2Vjb25kYXJ5UHJvcCIsInNlY29uZGFyeVR5cG9ncmFwaHlQcm9wcyIsImdldE1vYmlsZVN0ZXBwZXJVdGlsaXR5Q2xhc3MiLCJNb2JpbGVTdGVwcGVyUm9vdCIsIm1vYmlsZVN0ZXBwZXIiLCJNb2JpbGVTdGVwcGVyRG90cyIsImRvdHMiLCJNb2JpbGVTdGVwcGVyRG90IiwiZG90QWN0aXZlIiwiZG90IiwiTW9iaWxlU3RlcHBlclByb2dyZXNzIiwicHJvZ3Jlc3MiLCJhY3RpdmVTdGVwIiwiYmFja0J1dHRvbiIsIkxpbmVhclByb2dyZXNzUHJvcHMiLCJuZXh0QnV0dG9uIiwic3RlcHMiLCJjZWlsIiwiZ2V0TmF0aXZlU2VsZWN0VXRpbGl0eUNsYXNzZXMiLCJuYXRpdmVTZWxlY3RTZWxlY3RTdHlsZXMiLCJOYXRpdmVTZWxlY3RTZWxlY3QiLCJuYXRpdmVTZWxlY3RJY29uU3R5bGVzIiwiTmF0aXZlU2VsZWN0SWNvbiIsImljb25PcGVuIiwiSWNvbkNvbXBvbmVudCIsImRlZmF1bHRJbnB1dCIsIk5hdGl2ZVNlbGVjdCIsImNsYXNzZXNQcm9wIiwib3RoZXJDbGFzc2VzIiwiZGVmZXIiLCJOb3RjaGVkT3V0bGluZVJvb3QiLCJOb3RjaGVkT3V0bGluZUxlZ2VuZCIsImZsb2F0Iiwid2l0aExhYmVsIiwibm90Y2hlZCIsImRlbGF5IiwiT3V0bGluZWRJbnB1dFJvb3QiLCJub3RjaGVkT3V0bGluZSIsIk91dGxpbmVkSW5wdXRJbnB1dCIsIk91dGxpbmVkSW5wdXQiLCJfUmVhY3QkRnJhZ21lbnQiLCJnZXRQYWdpbmF0aW9uVXRpbGl0eUNsYXNzIiwidXNlUGFnaW5hdGlvbiIsImJvdW5kYXJ5Q291bnQiLCJjb3VudCIsImRlZmF1bHRQYWdlIiwiaGlkZU5leHRCdXR0b24iLCJoaWRlUHJldkJ1dHRvbiIsInBhZ2UiLCJwYWdlUHJvcCIsInNob3dGaXJzdEJ1dHRvbiIsInNob3dMYXN0QnV0dG9uIiwic2libGluZ0NvdW50Iiwic2V0UGFnZVN0YXRlIiwicmFuZ2UiLCJzdGFydFBhZ2VzIiwiZW5kUGFnZXMiLCJzaWJsaW5nc1N0YXJ0Iiwic2libGluZ3NFbmQiLCJpdGVtTGlzdCIsImJ1dHRvblBhZ2UiLCJnZXRQYWdpbmF0aW9uSXRlbVV0aWxpdHlDbGFzcyIsImVsbGlwc2lzIiwicHJldmlvdXNOZXh0IiwiZmlyc3RMYXN0IiwiUGFnaW5hdGlvbkl0ZW1FbGxpcHNpcyIsIlBhZ2luYXRpb25JdGVtUGFnZSIsImFjdGl2YXRlZE9wYWNpdHkiLCJQYWdpbmF0aW9uSXRlbVBhZ2VJY29uIiwiUGFnaW5hdGlvbkl0ZW0iLCJmaXJzdCIsImxhc3QiLCJwcmV2aW91cyIsIk5hdmlnYXRlTmV4dCIsIk5hdmlnYXRlQmVmb3JlIiwiRmlyc3RQYWdlIiwiTGFzdFBhZ2UiLCJQYWdpbmF0aW9uUm9vdCIsIlBhZ2luYXRpb25VbCIsInVsIiwiZGVmYXVsdEdldEFyaWFMYWJlbCIsImdldEl0ZW1BcmlhTGFiZWwiLCJyZW5kZXJJdGVtIiwiUmFkaW9CdXR0b25JY29uUm9vdCIsIlJhZGlvQnV0dG9uSWNvbkJhY2tncm91bmQiLCJSYWRpb0J1dHRvblVuY2hlY2tlZCIsIlJhZGlvQnV0dG9uSWNvbkRvdCIsIlJhZGlvQnV0dG9uQ2hlY2tlZCIsImVhc2VJbiIsImNoZWNrZWQiLCJ1c2VSYWRpb0dyb3VwIiwiZ2V0UmFkaW9VdGlsaXR5Q2xhc3MiLCJSYWRpb1Jvb3QiLCJTd2l0Y2hCYXNlIiwiYWN0aXZlQ2hhbm5lbCIsImRlZmF1bHRDaGVja2VkSWNvbiIsImRlZmF1bHRJY29uIiwiX2RlZmF1bHRJY29uJHByb3BzJGZvIiwiX2RlZmF1bHRDaGVja2VkSWNvbiRwIiwiY2hlY2tlZFByb3AiLCJjaGVja2VkSWNvbiIsIm5hbWVQcm9wIiwib25DaGFuZ2VQcm9wIiwicmFkaW9Hcm91cCIsImNyZWF0ZUNoYWluZWRGdW5jdGlvbiIsImdldFJhZGlvR3JvdXBVdGlsaXR5Q2xhc3MiLCJhY3Rpb25zIiwicm9vdFJlZiIsImNsaXAiLCJnZXRSYXRpbmdVdGlsaXR5Q2xhc3MiLCJyb3VuZFZhbHVlVG9QcmVjaXNpb24iLCJwcmVjaXNpb24iLCJuZWFyZXN0IiwibnVtIiwiZGVjaW1hbFBhcnQiLCJnZXREZWNpbWFsUHJlY2lzaW9uIiwiUmF0aW5nUm9vdCIsInZpc3VhbGx5SGlkZGVuIiwiaWNvbkFjdGl2ZSIsIlJhdGluZ0xhYmVsIiwiZW1wdHlWYWx1ZUZvY3VzZWQiLCJsYWJlbEVtcHR5VmFsdWVBY3RpdmUiLCJSYXRpbmdJY29uIiwiaWNvbkVtcHR5IiwiaWNvbkZpbGxlZCIsImljb25Ib3ZlciIsImljb25Gb2N1cyIsIlJhdGluZ0RlY2ltYWwiLCJkZWNpbWFsIiwiSWNvbkNvbnRhaW5lciIsIlJhdGluZ0l0ZW0iLCJlbXB0eUljb24iLCJnZXRMYWJlbFRleHQiLCJoaWdobGlnaHRTZWxlY3RlZE9ubHkiLCJJY29uQ29udGFpbmVyQ29tcG9uZW50IiwiaXNBY3RpdmUiLCJpdGVtVmFsdWUiLCJsYWJlbFByb3BzIiwicmF0aW5nVmFsdWUiLCJyYXRpbmdWYWx1ZVJvdW5kZWQiLCJpc0hvdmVyZWQiLCJpc0ZvY3VzZWQiLCJpc0NoZWNrZWQiLCJTdGFyIiwiZGVmYXVsdEVtcHR5SWNvbiIsIlN0YXJCb3JkZXIiLCJkZWZhdWx0TGFiZWxUZXh0IiwiUmF0aW5nIiwiZW1wdHlMYWJlbFRleHQiLCJvbkNoYW5nZUFjdGl2ZSIsIm9uTW91c2VMZWF2ZSIsInZhbHVlRGVyaXZlZCIsInZhbHVlUm91bmRlZCIsIm5ld0ZvY3VzIiwic2V0RW1wdHlWYWx1ZUZvY3VzZWQiLCJsYWJlbEVtcHR5VmFsdWUiLCJjb250YWluZXJXaWR0aCIsInBlcmNlbnQiLCJuZXdIb3ZlciIsInJhdGluZ0l0ZW1Qcm9wcyIsIiQiLCJpbmRleERlY2ltYWwiLCJpdGVtRGVjaW1hbFZhbHVlIiwiZ2V0U2NvcGVkQ3NzQmFzZWxpbmVVdGlsaXR5Q2xhc3MiLCJTY29wZWRDc3NCYXNlbGluZVJvb3QiLCJjb2xvclNjaGVtZVN0eWxlcyIsImVuYWJsZUNvbG9yU2NoZW1lIiwiX3NjaGVtZSRwYWxldHRlIiwiZm9udFdlaWdodEJvbGQiLCJnZXRTZWxlY3RVdGlsaXR5Q2xhc3NlcyIsIlNlbGVjdFNlbGVjdCIsIlNlbGVjdEljb24iLCJTZWxlY3ROYXRpdmVJbnB1dCIsIm5hdGl2ZUlucHV0IiwiX01lbnVQcm9wcyRzbG90UHJvcHMiLCJhcmlhTGFiZWwiLCJhdXRvV2lkdGgiLCJkZWZhdWx0T3BlbiIsImRpc3BsYXlFbXB0eSIsImxhYmVsSWQiLCJNZW51UHJvcHMiLCJyZW5kZXJWYWx1ZSIsIlNlbGVjdERpc3BsYXlQcm9wcyIsInRhYkluZGV4UHJvcCIsIm9wZW5TdGF0ZSIsImRpc3BsYXlSZWYiLCJkaXNwbGF5Tm9kZSIsInNldERpc3BsYXlOb2RlIiwiaXNPcGVuQ29udHJvbGxlZCIsIm1lbnVNaW5XaWR0aFN0YXRlIiwic2V0TWVudU1pbldpZHRoU3RhdGUiLCJoYW5kbGVEaXNwbGF5UmVmIiwiYW5jaG9yRWxlbWVudCIsImdldEVsZW1lbnRCeUlkIiwiZ2V0U2VsZWN0aW9uIiwiaXNDb2xsYXBzZWQiLCJoYW5kbGVJdGVtQ2xpY2siLCJuYXRpdmVFdmVudCIsImNsb25lZEV2ZW50Iiwid3JpdGFibGUiLCJkaXNwbGF5U2luZ2xlIiwiZGlzcGxheU11bHRpcGxlIiwiY29tcHV0ZURpc3BsYXkiLCJmb3VuZE1hdGNoIiwibWVudU1pbldpZHRoIiwiYnV0dG9uSWQiLCJwYXBlclByb3BzIiwibGlzdGJveElkIiwiY2hpbGRJdGVtIiwiTWVudSIsIk1lbnVMaXN0UHJvcHMiLCJzdHlsZWRSb290Q29uZmlnIiwiU3R5bGVkSW5wdXQiLCJTdHlsZWRPdXRsaW5lZElucHV0IiwiU3R5bGVkRmlsbGVkSW5wdXQiLCJTZWxlY3QiLCJuYXRpdmUiLCJyZXN0T2ZDbGFzc2VzIiwib3V0bGluZWQiLCJpbnB1dENvbXBvbmVudFJlZiIsImdldFNrZWxldG9uVXRpbGl0eUNsYXNzIiwicHVsc2VLZXlmcmFtZSIsIndhdmVLZXlmcmFtZSIsIlNrZWxldG9uUm9vdCIsImFuaW1hdGlvbiIsImhhc0NoaWxkcmVuIiwiZml0Q29udGVudCIsImhlaWdodEF1dG8iLCJyYWRpdXNVbml0IiwicmFkaXVzVmFsdWUiLCJhcnJheTEiLCJhcnJheTIiLCJpdGVtQ29tcGFyZXIiLCJhc2MiLCJmaW5kQ2xvc2VzdCIsImN1cnJlbnRWYWx1ZSIsIl92YWx1ZXMkcmVkdWNlIiwiY2xvc2VzdEluZGV4IiwidHJhY2tGaW5nZXIiLCJ0b3VjaElkIiwiY2hhbmdlZFRvdWNoZXMiLCJ0b3VjaCIsImlkZW50aWZpZXIiLCJ2YWx1ZVRvUGVyY2VudCIsInNldFZhbHVlSW5kZXgiLCJmb2N1c1RodW1iIiwic2xpZGVyUmVmIiwiYWN0aXZlSW5kZXgiLCJzZXRBY3RpdmUiLCJfc2xpZGVyUmVmJGN1cnJlbnQiLCJfZG9jJGFjdGl2ZUVsZW1lbnQiLCJfc2xpZGVyUmVmJGN1cnJlbnQyIiwiYXJlVmFsdWVzRXF1YWwiLCJvbGRWYWx1ZSIsImF4aXNQcm9wcyIsImxlYXAiLCJJZGVudGl0eSIsImNhY2hlZFN1cHBvcnRzVG91Y2hBY3Rpb25Ob25lIiwiZG9lc1N1cHBvcnRUb3VjaEFjdGlvbk5vbmUiLCJDU1MiLCJzdXBwb3J0cyIsInVzZVNsaWRlciIsImRpc2FibGVTd2FwIiwibWFya3MiLCJtYXJrc1Byb3AiLCJvbkNoYW5nZUNvbW1pdHRlZCIsInNjYWxlIiwic3RlcCIsInNoaWZ0U3RlcCIsInNldE9wZW4iLCJkcmFnZ2luZyIsInNldERyYWdnaW5nIiwibW92ZUNvdW50IiwidGh1bWJJbmRleCIsImZsb29yIiwibWFya3NWYWx1ZXMiLCJtYXJrIiwiZm9jdXNlZFRodW1iSW5kZXgiLCJzZXRGb2N1c2VkVGh1bWJJbmRleCIsImhhbmRsZUZvY3VzUmVmIiwiY3JlYXRlSGFuZGxlSGlkZGVuSW5wdXRGb2N1cyIsIm90aGVySGFuZGxlcnMiLCJfb3RoZXJIYW5kbGVycyRvbkZvY3UiLCJjcmVhdGVIYW5kbGVIaWRkZW5JbnB1dEJsdXIiLCJfb3RoZXJIYW5kbGVycyRvbkJsdXIiLCJjaGFuZ2VWYWx1ZSIsInZhbHVlSW5wdXQiLCJtYXJrc0luZGV4IiwibWF4TWFya3NWYWx1ZSIsIkluZmluaXR5IiwicHJldmlvdXNWYWx1ZSIsImNyZWF0ZUhhbmRsZUhpZGRlbklucHV0S2V5RG93biIsIl9vdGhlckhhbmRsZXJzJG9uS2V5RCIsInNoaWZ0S2V5IiwiX2RvY3VtZW50JGFjdGl2ZUVsZW1lIiwicHJldmlvdXNJbmRleCIsImdldEZpbmdlck5ld1ZhbHVlIiwiZmluZ2VyIiwibW92ZSIsInNsaWRlciIsInBlcmNlbnRUb1ZhbHVlIiwicGFydHMiLCJ0b0V4cG9uZW50aWFsIiwibWF0aXNzYURlY2ltYWxQYXJ0Iiwicm91bmRWYWx1ZVRvU3RlcCIsImJ1dHRvbnMiLCJoYW5kbGVUb3VjaEVuZCIsInN0b3BMaXN0ZW5pbmciLCJoYW5kbGVUb3VjaFN0YXJ0IiwidHJhY2tPZmZzZXQiLCJ0cmFja0xlYXAiLCJjcmVhdGVIYW5kbGVNb3VzZUxlYXZlIiwiX290aGVySGFuZGxlcnMkb25Nb3VzMyIsImdldEhpZGRlbklucHV0UHJvcHMiLCJleHRlcm5hbFByb3BzIiwiX3BhcmFtZXRlcnMkc3RlcCIsImV4dGVybmFsSGFuZGxlcnMiLCJleHRyYWN0RXZlbnRIYW5kbGVycyIsIm93bkV2ZW50SGFuZGxlcnMiLCJfb3RoZXJIYW5kbGVycyRvbkNoYW4iLCJ2YWx1ZUFzTnVtYmVyIiwibWVyZ2VkRXZlbnRIYW5kbGVycyIsIl9vdGhlckhhbmRsZXJzJG9uTW91cyIsImRlZmF1bHRQcmV2ZW50ZWQiLCJnZXRUaHVtYlByb3BzIiwib25Nb3VzZU92ZXIiLCJfb3RoZXJIYW5kbGVycyRvbk1vdXMyIiwiZ2V0VGh1bWJTdHlsZSIsImdldFNsaWRlclV0aWxpdHlDbGFzcyIsIlNsaWRlclJvb3QiLCJtYXJrZWQiLCJ0cmFja0ludmVydGVkIiwidHJhY2tGYWxzZSIsInRvdWNoQWN0aW9uIiwiU2xpZGVyUmFpbCIsInJhaWwiLCJTbGlkZXJUcmFjayIsIl90aGVtZSR2YXJzNCIsIlNsaWRlclRodW1iIiwiX3RoZW1lJHZhcnM1IiwiX3RoZW1lJHZhcnM2IiwidmFsdWVMYWJlbE9wZW4iLCJ2YWx1ZUxhYmVsQ2lyY2xlIiwidmFsdWVMYWJlbExhYmVsIiwidXNlVmFsdWVMYWJlbENsYXNzZXMiLCJ2YWx1ZUxhYmVsIiwiU2xpZGVyTWFyayIsIm1hcmtBY3RpdmUiLCJTbGlkZXJNYXJrTGFiZWwiLCJtYXJrTGFiZWwiLCJtYXJrTGFiZWxBY3RpdmUiLCJGb3J3YXJkIiwiX3Nsb3RzJHJhaWwiLCJfc2xvdHMkdHJhY2siLCJfc2xvdHMkdGh1bWIiLCJfc2xvdHMkdmFsdWVMYWJlbCIsIl9yZWY2IiwiX3Nsb3RzJG1hcmsiLCJfcmVmNyIsIl9zbG90cyRtYXJrTGFiZWwiLCJfcmVmOCIsIl9zbG90UHJvcHMkcmFpbCIsIl9zbG90UHJvcHMkdHJhY2siLCJfc2xvdFByb3BzJHRodW1iIiwiX3Nsb3RQcm9wcyR2YWx1ZUxhYmVsIiwiX3Nsb3RQcm9wcyRtYXJrIiwiX3Nsb3RQcm9wcyRtYXJrTGFiZWwiLCJhcmlhVmFsdWV0ZXh0IiwiZ2V0QXJpYUxhYmVsIiwiZ2V0QXJpYVZhbHVlVGV4dCIsInZhbHVlTGFiZWxEaXNwbGF5IiwidmFsdWVMYWJlbEZvcm1hdCIsIlJhaWxTbG90IiwiUmFpbCIsIlRyYWNrU2xvdCIsIlRyYWNrIiwiVGh1bWJTbG90IiwiVGh1bWIiLCJWYWx1ZUxhYmVsU2xvdCIsIlZhbHVlTGFiZWwiLCJNYXJrU2xvdCIsIk1hcmsiLCJNYXJrTGFiZWxTbG90IiwiTWFya0xhYmVsIiwicmFpbFNsb3RQcm9wcyIsInRyYWNrU2xvdFByb3BzIiwidGh1bWJTbG90UHJvcHMiLCJ2YWx1ZUxhYmVsU2xvdFByb3BzIiwibWFya1Nsb3RQcm9wcyIsIm1hcmtMYWJlbFNsb3RQcm9wcyIsImlucHV0U2xvdFByb3BzIiwiZ2V0U2xvdFByb3BzIiwiU2xvdCIsInJhaWxQcm9wcyIsInRyYWNrUHJvcHMiLCJ0aHVtYlByb3BzIiwidmFsdWVMYWJlbFByb3BzIiwibWFya1Byb3BzIiwibWFya0xhYmVsUHJvcHMiLCJpbnB1dFNsaWRlclByb3BzIiwiVmFsdWVMYWJlbENvbXBvbmVudCIsImdldFNuYWNrYmFyQ29udGVudFV0aWxpdHlDbGFzcyIsIlNuYWNrYmFyQ29udGVudFJvb3QiLCJlbXBoYXNpcyIsIlNuYWNrYmFyQ29udGVudE1lc3NhZ2UiLCJTbmFja2JhckNvbnRlbnRBY3Rpb24iLCJnZXRTbmFja2JhclV0aWxpdHlDbGFzcyIsIlNuYWNrYmFyUm9vdCIsInNuYWNrYmFyIiwiYXV0b0hpZGVEdXJhdGlvbiIsIkNsaWNrQXdheUxpc3RlbmVyUHJvcHMiLCJDb250ZW50UHJvcHMiLCJkaXNhYmxlV2luZG93Qmx1ckxpc3RlbmVyIiwiR3JvdyIsInJlc3VtZUhpZGVEdXJhdGlvbiIsInRpbWVyQXV0b0hpZGUiLCJzZXRBdXRvSGlkZVRpbWVyIiwiYXV0b0hpZGVEdXJhdGlvblBhcmFtIiwiaGFuZGxlUGF1c2UiLCJoYW5kbGVSZXN1bWUiLCJjcmVhdGVIYW5kbGVGb2N1cyIsIm9uRm9jdXNDYWxsYmFjayIsImNyZWF0ZU1vdXNlRW50ZXIiLCJvbk1vdXNlRW50ZXJDYWxsYmFjayIsIm9uTW91c2VFbnRlciIsImNyZWF0ZU1vdXNlTGVhdmUiLCJvbk1vdXNlTGVhdmVDYWxsYmFjayIsImV4dGVybmFsRXZlbnRIYW5kbGVycyIsIm9uQmx1ckNhbGxiYWNrIiwiZW50ZXJpbmciLCJab29tIiwiZ2V0U3BlZWREaWFsVXRpbGl0eUNsYXNzIiwiZ2V0T3JpZW50YXRpb24iLCJTcGVlZERpYWxSb290Iiwic3BlZWREaWFsIiwic3BhY2luZ0FjdGlvbnMiLCJTcGVlZERpYWxGYWIiLCJTcGVlZERpYWxBY3Rpb25zIiwiYWN0aW9uc0Nsb3NlZCIsIkZhYlByb3BzIiwib3JpZ0RpYWxCdXR0b25SZWYiLCJldmVudFRpbWVyIiwiZm9jdXNlZEFjdGlvbiIsIm5leHRJdGVtQXJyb3dLZXkiLCJoYW5kbGVPd25GYWJSZWYiLCJmYWJGZWYiLCJoYW5kbGVGYWJSZWYiLCJjcmVhdGVIYW5kbGVTcGVlZERpYWxBY3Rpb25CdXR0b25SZWYiLCJkaWFsQWN0aW9uSW5kZXgiLCJvcmlnQnV0dG9uUmVmIiwiYnV0dG9uUmVmIiwibW91c2VlbnRlciIsIl9jaGlsZCRwcm9wcyIsInRvb2x0aXBQbGFjZW1lbnQiLCJ0b29sdGlwUGxhY2VtZW50UHJvcCIsIkNoaWxkRmFiUHJvcHMiLCJuZXh0SXRlbUFycm93S2V5Q3VycmVudCIsImFjdGlvblN0ZXAiLCJuZXh0QWN0aW9uIiwidW5tb3VudE9uRXhpdCIsImdldFRvb2x0aXBVdGlsaXR5Q2xhc3MiLCJUb29sdGlwUG9wcGVyIiwiZGlzYWJsZUludGVyYWN0aXZlIiwicG9wcGVySW50ZXJhY3RpdmUiLCJwb3BwZXJBcnJvdyIsInBvcHBlckNsb3NlIiwidG9vbHRpcCIsIlRvb2x0aXBUb29sdGlwIiwidG9vbHRpcEFycm93Iiwid29yZFdyYXAiLCJmb250V2VpZ2h0UmVndWxhciIsIlRvb2x0aXBBcnJvdyIsImh5c3RlcnNpc09wZW4iLCJoeXN0ZXJzaXNUaW1lciIsImN1cnNvclBvc2l0aW9uIiwiY29tcG9zZUV2ZW50SGFuZGxlciIsImV2ZW50SGFuZGxlciIsIl9zbG90cyRwb3BwZXIiLCJfc2xvdHMkdHJhbnNpdGlvbiIsIl9zbG90cyR0b29sdGlwIiwiX3Nsb3RzJGFycm93IiwiX3Nsb3RQcm9wcyRwb3BwZXIyIiwiX3Nsb3RQcm9wcyR0cmFuc2l0aW9uIiwiX3Nsb3RQcm9wcyR0b29sdGlwIiwiX3Nsb3RQcm9wcyR0b29sdGlwMiIsIl9zbG90UHJvcHMkYXJyb3ciLCJfc2xvdFByb3BzJGFycm93MiIsImRlc2NyaWJlQ2hpbGQiLCJkaXNhYmxlRm9jdXNMaXN0ZW5lciIsImRpc2FibGVIb3Zlckxpc3RlbmVyIiwiZGlzYWJsZUludGVyYWN0aXZlUHJvcCIsImRpc2FibGVUb3VjaExpc3RlbmVyIiwiZW50ZXJEZWxheSIsImVudGVyTmV4dERlbGF5IiwiZW50ZXJUb3VjaERlbGF5IiwiZm9sbG93Q3Vyc29yIiwibGVhdmVEZWxheSIsImxlYXZlVG91Y2hEZWxheSIsIlBvcHBlckNvbXBvbmVudFByb3AiLCJQb3BwZXJQcm9wcyIsImNoaWxkTm9kZSIsInNldENoaWxkTm9kZSIsImFycm93UmVmIiwic2V0QXJyb3dSZWYiLCJpZ25vcmVOb25Ub3VjaEV2ZW50cyIsImNsb3NlVGltZXIiLCJlbnRlclRpbWVyIiwibGVhdmVUaW1lciIsInRvdWNoVGltZXIiLCJwcmV2VXNlclNlbGVjdCIsInN0b3BUb3VjaEludGVyYWN0aW9uIiwiV2Via2l0VXNlclNlbGVjdCIsImhhbmRsZU1vdXNlT3ZlciIsImhhbmRsZU1vdXNlTGVhdmUiLCJzZXRDaGlsZElzRm9jdXNWaXNpYmxlIiwiZGV0ZWN0VG91Y2hTdGFydCIsIm5hbWVPckRlc2NQcm9wcyIsInRpdGxlSXNTdHJpbmciLCJpbnRlcmFjdGl2ZVdyYXBwZXJMaXN0ZW5lcnMiLCJvblRvdWNoRW5kIiwiX1BvcHBlclByb3BzJHBvcHBlck9wIiwidG9vbHRpcE1vZGlmaWVycyIsIlRvb2x0aXBDb21wb25lbnQiLCJBcnJvd0NvbXBvbmVudCIsIkFycm93IiwicG9wcGVyUHJvcHMiLCJ0b29sdGlwUHJvcHMiLCJ0b29sdGlwQXJyb3dQcm9wcyIsIlRyYW5zaXRpb25Qcm9wc0lubmVyIiwiZ2V0U3BlZWREaWFsQWN0aW9uVXRpbGl0eUNsYXNzIiwiU3BlZWREaWFsQWN0aW9uRmFiIiwiZmFiQ2xvc2VkIiwiZmFiSG92ZXJCZyIsIlNwZWVkRGlhbEFjdGlvblN0YXRpY1Rvb2x0aXAiLCJzdGF0aWNUb29sdGlwIiwic3RhdGljVG9vbHRpcENsb3NlZCIsInN0YXRpY1Rvb2x0aXBMYWJlbCIsIlNwZWVkRGlhbEFjdGlvblN0YXRpY1Rvb2x0aXBMYWJlbCIsIndvcmRCcmVhayIsIlRvb2x0aXBDbGFzc2VzIiwidG9vbHRpcE9wZW4iLCJ0b29sdGlwT3BlblByb3AiLCJ0b29sdGlwVGl0bGUiLCJzZXRUb29sdGlwT3BlbiIsInRyYW5zaXRpb25TdHlsZSIsImdldFNwZWVkRGlhbEljb25VdGlsaXR5Q2xhc3MiLCJTcGVlZERpYWxJY29uUm9vdCIsIm9wZW5JY29uIiwiaWNvbldpdGhPcGVuSWNvbk9wZW4iLCJvcGVuSWNvbk9wZW4iLCJTcGVlZERpYWxJY29uIiwib3Blbkljb25Qcm9wIiwiZm9ybWF0SWNvbiIsIm5ld0NsYXNzTmFtZSIsIkFkZCIsIlN0ZXBwZXJDb250ZXh0IiwidXNlU3RlcHBlckNvbnRleHQiLCJTdGVwQ29udGV4dCIsInVzZVN0ZXBDb250ZXh0IiwiZ2V0U3RlcFV0aWxpdHlDbGFzcyIsIlN0ZXBSb290IiwiYWx0ZXJuYXRpdmVMYWJlbCIsImNvbXBsZXRlZCIsImFjdGl2ZVByb3AiLCJjb21wbGV0ZWRQcm9wIiwiY29ubmVjdG9yIiwibm9uTGluZWFyIiwibmV3Q2hpbGRyZW4iLCJnZXRTdGVwSWNvblV0aWxpdHlDbGFzcyIsIl9jaXJjbGUiLCJTdGVwSWNvblJvb3QiLCJTdmdJY29uIiwiU3RlcEljb25UZXh0IiwiY2xhc3NOYW1lUHJvcCIsIldhcm5pbmciLCJDaGVja0NpcmNsZSIsInRleHRBbmNob3IiLCJkb21pbmFudEJhc2VsaW5lIiwiZ2V0U3RlcExhYmVsVXRpbGl0eUNsYXNzIiwiU3RlcExhYmVsUm9vdCIsIlN0ZXBMYWJlbExhYmVsIiwiU3RlcExhYmVsSWNvbkNvbnRhaW5lciIsImljb25Db250YWluZXIiLCJTdGVwTGFiZWxMYWJlbENvbnRhaW5lciIsImxhYmVsQ29udGFpbmVyIiwiU3RlcExhYmVsIiwiX3Nsb3RQcm9wcyRsYWJlbCIsIm9wdGlvbmFsIiwiU3RlcEljb25Db21wb25lbnQiLCJTdGVwSWNvbkNvbXBvbmVudFByb3AiLCJTdGVwSWNvblByb3BzIiwiaWNvbkNvbnRleHQiLCJsYWJlbFNsb3RQcm9wcyIsImdldFN0ZXBCdXR0b25VdGlsaXR5Q2xhc3MiLCJTdGVwQnV0dG9uUm9vdCIsInRvdWNoUmlwcGxlIiwiVG91Y2hSaXBwbGVQcm9wcyIsImdldFN0ZXBDb25uZWN0b3JVdGlsaXR5Q2xhc3MiLCJTdGVwQ29ubmVjdG9yUm9vdCIsIlN0ZXBDb25uZWN0b3JMaW5lIiwibGluZSIsImJvcmRlclRvcFN0eWxlIiwiYm9yZGVyTGVmdFN0eWxlIiwiYm9yZGVyTGVmdFdpZHRoIiwiZ2V0U3RlcENvbnRlbnRVdGlsaXR5Q2xhc3MiLCJTdGVwQ29udGVudFJvb3QiLCJTdGVwQ29udGVudFRyYW5zaXRpb24iLCJ0cmFuc2l0aW9uRHVyYXRpb25Qcm9wIiwiZ2V0U3RlcHBlclV0aWxpdHlDbGFzcyIsIlN0ZXBwZXJSb290IiwiZGVmYXVsdENvbm5lY3RvciIsIlN3aXBlQXJlYVJvb3QiLCJTd2lwZUFyZWEiLCJjbGFpbWVkU3dpcGVJbnN0YW5jZSIsImNhbGN1bGF0ZUN1cnJlbnRYIiwidG91Y2hlcyIsInBhZ2VYIiwiY2FsY3VsYXRlQ3VycmVudFkiLCJnZXRNYXhUcmFuc2xhdGUiLCJob3Jpem9udGFsU3dpcGUiLCJwYXBlckluc3RhbmNlIiwiZ2V0VHJhbnNsYXRlIiwiY3VycmVudFRyYW5zbGF0ZSIsInN0YXJ0TG9jYXRpb24iLCJtYXhUcmFuc2xhdGUiLCJpT1MiLCJTd2lwZWFibGVEcmF3ZXIiLCJ0cmFuc2l0aW9uRHVyYXRpb25EZWZhdWx0IiwiZGlzYWJsZUJhY2tkcm9wVHJhbnNpdGlvbiIsImRpc2FibGVEaXNjb3ZlcnkiLCJkaXNhYmxlU3dpcGVUb09wZW4iLCJoeXN0ZXJlc2lzIiwiYWxsb3dTd2lwZUluQ2hpbGRyZW4iLCJtaW5GbGluZ1ZlbG9jaXR5IiwiU3dpcGVBcmVhUHJvcHMiLCJzd2lwZUFyZWFXaWR0aCIsIk1vZGFsUHJvcHNQcm9wIiwibWF5YmVTd2lwaW5nIiwic2V0TWF5YmVTd2lwaW5nIiwic3dpcGVJbnN0YW5jZSIsImlzU3dpcGluZyIsInN3aXBlQXJlYVJlZiIsImJhY2tkcm9wUmVmIiwicGFwZXJSZWYiLCJ0b3VjaERldGVjdGVkIiwiY2FsY3VsYXRlZER1cmF0aW9uUmVmIiwic2V0UG9zaXRpb24iLCJ0cmFuc2xhdGUiLCJjaGFuZ2VUcmFuc2l0aW9uIiwiYW5jaG9yUnRsIiwicnRsVHJhbnNsYXRlTXVsdGlwbGllciIsImRyYXdlclN0eWxlIiwiYmFja2Ryb3BTdHlsZSIsImhhbmRsZUJvZHlUb3VjaEVuZCIsInN0YXJ0WCIsInN0YXJ0WSIsInRyYW5zbGF0ZVJhdGlvIiwidmVsb2NpdHkiLCJzdGFydE1heWJlU3dpcGluZyIsImZvcmNlIiwibGFzdFRpbWUiLCJsYXN0VHJhbnNsYXRlIiwicGFwZXJIaXQiLCJoYW5kbGVCb2R5VG91Y2hNb3ZlIiwiY3VycmVudFgiLCJjdXJyZW50WSIsImRvbVRyZWVTaGFwZXMiLCJnZXREb21UcmVlU2hhcGVzIiwiaGFzTmF0aXZlSGFuZGxlciIsImF4aXNQcm9wZXJ0aWVzIiwiZ29pbmdGb3J3YXJkIiwic2Nyb2xsUG9zaXRpb24iLCJhcmVOb3RBdFN0YXJ0IiwiYXJlTm90QXRFbmQiLCJjb21wdXRlSGFzTmF0aXZlSGFuZGxlciIsImR4IiwiZHkiLCJkZWZpbml0ZWx5U3dpcGluZyIsImNhbmNlbGFibGUiLCJwZXJmb3JtYW5jZSIsIm5vdyIsImhhbmRsZUJvZHlUb3VjaFN0YXJ0IiwiX3BhcGVyUmVmJGN1cnJlbnQiLCJnZXRTd2l0Y2hVdGlsaXR5Q2xhc3MiLCJTd2l0Y2hSb290IiwiZWRnZSIsInN3aXRjaEJhc2UiLCJTd2l0Y2hTd2l0Y2hCYXNlIiwiZGVmYXVsdENvbG9yIiwiZGVmYXVsdERpc2FibGVkQ29sb3IiLCJTd2l0Y2hUcmFjayIsIm9uQmFja2dyb3VuZCIsImJsYWNrIiwiU3dpdGNoVGh1bWIiLCJnZXRUYWJVdGlsaXR5Q2xhc3MiLCJUYWJSb290IiwibGFiZWxJY29uIiwid3JhcHBlZCIsImljb25XcmFwcGVyIiwiaWNvblBvc2l0aW9uIiwiaW5kaWNhdG9yIiwic2VsZWN0aW9uRm9sbG93c0ZvY3VzIiwiZ2V0VGFibGVVdGlsaXR5Q2xhc3MiLCJUYWJsZVJvb3QiLCJzdGlja3lIZWFkZXIiLCJib3JkZXJDb2xsYXBzZSIsImJvcmRlclNwYWNpbmciLCJjYXB0aW9uU2lkZSIsImRlZmF1bHRDb21wb25lbnQiLCJ0YWJsZSIsImdldFRhYmxlQm9keVV0aWxpdHlDbGFzcyIsIlRhYmxlQm9keVJvb3QiLCJ0YWJsZWx2bDIiLCJnZXRUYWJsZUNlbGxVdGlsaXR5Q2xhc3MiLCJUYWJsZUNlbGxSb290IiwicGFkZGluZ0NoZWNrYm94IiwicGFkZGluZ1Byb3AiLCJzY29wZSIsInNjb3BlUHJvcCIsInNpemVQcm9wIiwic29ydERpcmVjdGlvbiIsImlzSGVhZENlbGwiLCJhcmlhU29ydCIsImdldFRhYmxlQ29udGFpbmVyVXRpbGl0eUNsYXNzIiwiVGFibGVDb250YWluZXJSb290IiwiZ2V0VGFibGVGb290ZXJVdGlsaXR5Q2xhc3MiLCJUYWJsZUZvb3RlclJvb3QiLCJnZXRUYWJsZUhlYWRVdGlsaXR5Q2xhc3MiLCJUYWJsZUhlYWRSb290IiwiX3Nsb3RzJGZpcnN0QnV0dG9uIiwiX3Nsb3RzJGxhc3RCdXR0b24iLCJfc2xvdHMkbmV4dEJ1dHRvbiIsIl9zbG90cyRwcmV2aW91c0J1dHRvbiIsIl9zbG90cyRmaXJzdEJ1dHRvbkljbyIsIl9zbG90cyRsYXN0QnV0dG9uSWNvbiIsIl9zbG90cyRuZXh0QnV0dG9uSWNvbiIsIl9zbG90cyRwcmV2aW91c0J1dHRvbjIiLCJiYWNrSWNvbkJ1dHRvblByb3BzIiwibmV4dEljb25CdXR0b25Qcm9wcyIsIm9uUGFnZUNoYW5nZSIsInJvd3NQZXJQYWdlIiwiRmlyc3RCdXR0b24iLCJMYXN0QnV0dG9uIiwiTmV4dEJ1dHRvbiIsIlByZXZpb3VzQnV0dG9uIiwicHJldmlvdXNCdXR0b24iLCJGaXJzdEJ1dHRvbkljb24iLCJmaXJzdEJ1dHRvbkljb24iLCJMYXN0QnV0dG9uSWNvbiIsImxhc3RCdXR0b25JY29uIiwiTmV4dEJ1dHRvbkljb24iLCJuZXh0QnV0dG9uSWNvbiIsIktleWJvYXJkQXJyb3dSaWdodCIsIlByZXZpb3VzQnV0dG9uSWNvbiIsInByZXZpb3VzQnV0dG9uSWNvbiIsIktleWJvYXJkQXJyb3dMZWZ0IiwiRmlyc3RCdXR0b25TbG90IiwiUHJldmlvdXNCdXR0b25TbG90IiwiTmV4dEJ1dHRvblNsb3QiLCJMYXN0QnV0dG9uU2xvdCIsImZpcnN0QnV0dG9uU2xvdFByb3BzIiwicHJldmlvdXNCdXR0b25TbG90UHJvcHMiLCJuZXh0QnV0dG9uU2xvdFByb3BzIiwibGFzdEJ1dHRvblNsb3RQcm9wcyIsImdldFRhYmxlUGFnaW5hdGlvblV0aWxpdHlDbGFzcyIsIl9JbnB1dEJhc2UiLCJUYWJsZVBhZ2luYXRpb25Sb290IiwiVGFibGVQYWdpbmF0aW9uVG9vbGJhciIsIlRvb2xiYXIiLCJ0b29sYmFyIiwiVGFibGVQYWdpbmF0aW9uU3BhY2VyIiwic3BhY2VyIiwiVGFibGVQYWdpbmF0aW9uU2VsZWN0TGFiZWwiLCJzZWxlY3RMYWJlbCIsIlRhYmxlUGFnaW5hdGlvblNlbGVjdCIsInNlbGVjdEljb24iLCJzZWxlY3RSb290IiwidGV4dEFsaWduTGFzdCIsIlRhYmxlUGFnaW5hdGlvbk1lbnVJdGVtIiwiTWVudUl0ZW0iLCJtZW51SXRlbSIsIlRhYmxlUGFnaW5hdGlvbkRpc3BsYXllZFJvd3MiLCJkaXNwbGF5ZWRSb3dzIiwiZGVmYXVsdExhYmVsRGlzcGxheWVkUm93cyIsIl9zbG90UHJvcHMkc2VsZWN0IiwiQWN0aW9uc0NvbXBvbmVudCIsImNvbFNwYW4iLCJjb2xTcGFuUHJvcCIsImxhYmVsRGlzcGxheWVkUm93cyIsImxhYmVsUm93c1BlclBhZ2UiLCJvblJvd3NQZXJQYWdlQ2hhbmdlIiwicm93c1BlclBhZ2VPcHRpb25zIiwiU2VsZWN0UHJvcHMiLCJzZWxlY3RQcm9wcyIsIk1lbnVJdGVtQ29tcG9uZW50Iiwic2VsZWN0SWQiLCJyb3dzUGVyUGFnZU9wdGlvbiIsImdldFRhYmxlUm93VXRpbGl0eUNsYXNzIiwiVGFibGVSb3dSb290IiwiZm9vdGVyIiwiVGFibGVSb3ciLCJnZXRUYWJsZVNvcnRMYWJlbFV0aWxpdHlDbGFzcyIsIlRhYmxlU29ydExhYmVsUm9vdCIsIlRhYmxlU29ydExhYmVsSWNvbiIsImhpZGVTb3J0SWNvbiIsIkFycm93RG93bndhcmQiLCJjYWNoZWRUeXBlIiwiZGV0ZWN0U2Nyb2xsVHlwZSIsImR1bW15IiwiZ2V0Tm9ybWFsaXplZFNjcm9sbExlZnQiLCJlYXNlSW5PdXRTaW4iLCJ0aW1lIiwic2luIiwiZ2V0VGFiU2Nyb2xsQnV0dG9uVXRpbGl0eUNsYXNzIiwiVGFiU2Nyb2xsQnV0dG9uUm9vdCIsIl9zbG90cyRTdGFydFNjcm9sbEJ1dCIsIl9zbG90cyRFbmRTY3JvbGxCdXR0byIsIlN0YXJ0QnV0dG9uSWNvbiIsIlN0YXJ0U2Nyb2xsQnV0dG9uSWNvbiIsIkVuZEJ1dHRvbkljb24iLCJFbmRTY3JvbGxCdXR0b25JY29uIiwic3RhcnRCdXR0b25JY29uUHJvcHMiLCJzdGFydFNjcm9sbEJ1dHRvbkljb24iLCJlbmRCdXR0b25JY29uUHJvcHMiLCJlbmRTY3JvbGxCdXR0b25JY29uIiwiZ2V0VGFic1V0aWxpdHlDbGFzcyIsIm5leHRJdGVtIiwiZmlyc3RDaGlsZCIsIm5leHRFbGVtZW50U2libGluZyIsInByZXZpb3VzSXRlbSIsImxhc3RDaGlsZCIsInByZXZpb3VzRWxlbWVudFNpYmxpbmciLCJtb3ZlRm9jdXMiLCJjdXJyZW50Rm9jdXMiLCJ0cmF2ZXJzYWxGdW5jdGlvbiIsIndyYXBwZWRPbmNlIiwiVGFic1Jvb3QiLCJzY3JvbGxCdXR0b25zIiwic2Nyb2xsQnV0dG9uc0hpZGVNb2JpbGUiLCJUYWJzU2Nyb2xsZXIiLCJzY3JvbGxlciIsImhpZGVTY3JvbGxiYXIiLCJzY3JvbGxhYmxlWCIsInNjcm9sbGFibGVZIiwic2Nyb2xsYmFyV2lkdGgiLCJGbGV4Q29udGFpbmVyIiwiZmxleENvbnRhaW5lciIsImZsZXhDb250YWluZXJWZXJ0aWNhbCIsImNlbnRlcmVkIiwiVGFic0luZGljYXRvciIsImluZGljYXRvckNvbG9yIiwiVGFic1Njcm9sbGJhclNpemUiLCJzY3JvbGxiYXJIZWlnaHQiLCJzZXRNZWFzdXJlbWVudHMiLCJwcmV2SGVpZ2h0IiwiZGVmYXVsdEluZGljYXRvclN0eWxlIiwiVGFicyIsImFyaWFMYWJlbGxlZEJ5IiwiYWxsb3dTY3JvbGxCdXR0b25zTW9iaWxlIiwiU2Nyb2xsQnV0dG9uQ29tcG9uZW50IiwiVGFiSW5kaWNhdG9yUHJvcHMiLCJUYWJTY3JvbGxCdXR0b25Qcm9wcyIsInZpc2libGVTY3JvbGxiYXIiLCJzY3JvbGxhYmxlIiwic2Nyb2xsU3RhcnQiLCJzdGFydFNjcm9sbEJ1dHRvbkljb25Qcm9wcyIsImVuZFNjcm9sbEJ1dHRvbkljb25Qcm9wcyIsInNldE1vdW50ZWQiLCJpbmRpY2F0b3JTdHlsZSIsInNldEluZGljYXRvclN0eWxlIiwiZGlzcGxheVN0YXJ0U2Nyb2xsIiwic2V0RGlzcGxheVN0YXJ0U2Nyb2xsIiwiZGlzcGxheUVuZFNjcm9sbCIsInNldERpc3BsYXlFbmRTY3JvbGwiLCJ1cGRhdGVTY3JvbGxPYnNlcnZlciIsInNldFVwZGF0ZVNjcm9sbE9ic2VydmVyIiwic2Nyb2xsZXJTdHlsZSIsInNldFNjcm9sbGVyU3R5bGUiLCJ2YWx1ZVRvSW5kZXgiLCJ0YWJzUmVmIiwidGFiTGlzdFJlZiIsImdldFRhYnNNZXRhIiwidGFic05vZGUiLCJ0YWJzTWV0YSIsInRhYk1ldGEiLCJzY3JvbGxMZWZ0Tm9ybWFsaXplZCIsInRhYiIsInVwZGF0ZUluZGljYXRvclN0YXRlIiwic3RhcnRJbmRpY2F0b3IiLCJzdGFydFZhbHVlIiwiY29ycmVjdGlvbiIsIm5ld0luZGljYXRvclN0eWxlIiwiZFN0YXJ0IiwiZFNpemUiLCJzY3JvbGxWYWx1ZSIsImNiIiwiZWFzZSIsImNhbmNlbGxlZCIsInRpbWVzdGFtcCIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImFuaW1hdGUiLCJtb3ZlVGFic1Njcm9sbCIsImRlbHRhIiwiZ2V0U2Nyb2xsU2l6ZSIsImNvbnRhaW5lclNpemUiLCJ0b3RhbFNpemUiLCJoYW5kbGVTdGFydFNjcm9sbENsaWNrIiwiaGFuZGxlRW5kU2Nyb2xsQ2xpY2siLCJoYW5kbGVTY3JvbGxiYXJTaXplQ2hhbmdlIiwic2Nyb2xsU2VsZWN0ZWRJbnRvVmlldyIsIm5leHRTY3JvbGxTdGFydCIsInVwZGF0ZVNjcm9sbEJ1dHRvblN0YXRlIiwibXV0YXRpb25PYnNlcnZlciIsIk11dGF0aW9uT2JzZXJ2ZXIiLCJyZWNvcmRzIiwicmVjb3JkIiwicmVtb3ZlZE5vZGVzIiwiX3Jlc2l6ZU9ic2VydmVyIiwidW5vYnNlcnZlIiwiYWRkZWROb2RlcyIsIl9yZXNpemVPYnNlcnZlcjIiLCJjaGlsZExpc3QiLCJfbXV0YXRpb25PYnNlcnZlciIsIl9yZXNpemVPYnNlcnZlcjMiLCJ0YWJMaXN0Q2hpbGRyZW4iLCJJbnRlcnNlY3Rpb25PYnNlcnZlciIsImZpcnN0VGFiIiwibGFzdFRhYiIsIm9ic2VydmVyT3B0aW9ucyIsInRocmVzaG9sZCIsImZpcnN0T2JzZXJ2ZXIiLCJpc0ludGVyc2VjdGluZyIsImxhc3RPYnNlcnZlciIsInVwZGF0ZUluZGljYXRvciIsInVwZGF0ZVNjcm9sbEJ1dHRvbnMiLCJjb25kaXRpb25hbEVsZW1lbnRzIiwic2Nyb2xsYmFyU2l6ZUxpc3RlbmVyIiwic2hvd1Njcm9sbEJ1dHRvbnMiLCJzY3JvbGxCdXR0b25TdGFydCIsInNjcm9sbEJ1dHRvbkVuZCIsImdldENvbmRpdGlvbmFsRWxlbWVudHMiLCJwcmV2aW91c0l0ZW1LZXkiLCJuZXh0SXRlbUtleSIsImdldFRleHRGaWVsZFV0aWxpdHlDbGFzcyIsInZhcmlhbnRDb21wb25lbnQiLCJUZXh0RmllbGRSb290IiwiRm9ybUhlbHBlclRleHRQcm9wcyIsImhlbHBlclRleHQiLCJpZE92ZXJyaWRlIiwiSW5wdXRNb3JlIiwiaGVscGVyVGV4dElkIiwiaW5wdXRMYWJlbElkIiwiSW5wdXRFbGVtZW50IiwiZ2V0VG9nZ2xlQnV0dG9uVXRpbGl0eUNsYXNzIiwiaXNWYWx1ZVNlbGVjdGVkIiwiVG9nZ2xlQnV0dG9uUm9vdCIsInNlbGVjdGVkQ29sb3JDaGFubmVsIiwic2VsZWN0ZWRDb2xvciIsIl9SZWFjdCR1c2VDb250ZXh0IiwiY29udGV4dFByb3BzIiwidG9nZ2xlQnV0dG9uR3JvdXBCdXR0b25Db250ZXh0UG9zaXRpb25DbGFzc05hbWUiLCJyZXNvbHZlZFByb3BzIiwicG9zaXRpb25DbGFzc05hbWUiLCJnZXRUb2dnbGVCdXR0b25Hcm91cFV0aWxpdHlDbGFzcyIsIlRvZ2dsZUJ1dHRvbkdyb3VwUm9vdCIsImV4Y2x1c2l2ZSIsImJ1dHRvblZhbHVlIiwiaGFuZGxlRXhjbHVzaXZlQ2hhbmdlIiwiZGVmYXVsdFRyaWdnZXIiLCJzdG9yZSIsImRpc2FibGVIeXN0ZXJlc2lzIiwiZGVmYXVsdFRhcmdldCIsInVzZVNjcm9sbFRyaWdnZXIiLCJnZXRUcmlnZ2VyIiwidHJpZ2dlciIsInNldFRyaWdnZXIiLCJoYW5kbGVTY3JvbGwiLCJKU09OIiwiUmVhY3QiLCJfX2VzTW9kdWxlIiwiX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlIiwiX19wcm90b19fIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwidSIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwiX3N0eWxlZEVuZ2luZSIsIldlYWtNYXAiLCJ1c2VDb250ZXh0IiwiVGhlbWVDb250ZXh0IiwidHNsaWIiLCJoZXlMaXN0ZW4iLCJzdHlsZVZhbHVlVHlwZXMiLCJwb3Btb3Rpb24iLCJzeW5jIiwiX2ludGVyb3BEZWZhdWx0TGVnYWN5IiwiX2ludGVyb3BOYW1lc3BhY2UiLCJlbnVtZXJhYmxlIiwiZnJlZXplIiwiUmVhY3RfX25hbWVzcGFjZSIsIlJlYWN0X19kZWZhdWx0Iiwic3luY19fZGVmYXVsdCIsImNyZWF0ZURlZmluaXRpb24iLCJwcm9wTmFtZXMiLCJpc0VuYWJsZWQiLCJmZWF0dXJlRGVmaW5pdGlvbnMiLCJtZWFzdXJlTGF5b3V0IiwiZHJhZyIsInRhcCIsInBhbiIsImxheW91dEFuaW1hdGlvbiIsImxvYWRGZWF0dXJlcyIsImZlYXR1cmVzIiwiTGF6eUNvbnRleHQiLCJjcmVhdGVDb250ZXh0Iiwic3RyaWN0IiwiZmVhdHVyZU5hbWVzIiwibnVtRmVhdHVyZXMiLCJNb3Rpb25Db25maWdDb250ZXh0IiwidHJhbnNmb3JtUGFnZVBvaW50IiwicCIsImlzU3RhdGljIiwiTW90aW9uQ29udGV4dCIsInVzZVZpc3VhbEVsZW1lbnRDb250ZXh0IiwidmlzdWFsRWxlbWVudCIsIlByZXNlbmNlQ29udGV4dCIsInVzZUNvbnN0YW50IiwiaW5pdCIsInVzZVJlZiIsInVzZVByZXNlbmNlIiwiaXNQcmVzZW50Iiwib25FeGl0Q29tcGxldGUiLCJyZWdpc3RlciIsInVzZVVuaXF1ZUlkIiwidXNlRWZmZWN0IiwiY291bnRlciIsImluY3JlbWVudElkIiwiTGF5b3V0R3JvdXBDb250ZXh0IiwiaXNCcm93c2VyIiwidXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCIsInVzZUxheW91dEVmZmVjdCIsImlzUmVmT2JqZWN0IiwiaXNWYXJpYW50TGFiZWxzIiwiaXNWYXJpYW50TGFiZWwiLCJyZXNvbHZlVmFyaWFudEZyb21Qcm9wcyIsImRlZmluaXRpb24iLCJjdXN0b20iLCJjdXJyZW50VmFsdWVzIiwiY3VycmVudFZlbG9jaXR5IiwiX2EiLCJyZXNvbHZlVmFyaWFudCIsImdldFByb3BzIiwiZm9yRWFjaFZhbHVlIiwiZ2V0Q3VycmVudCIsImdldFZlbG9jaXR5IiwiZ2V0VmVsb2NpdHkkMSIsImNoZWNrSWZDb250cm9sbGluZ1ZhcmlhbnRzIiwiaW5pdGlhbCIsIndoaWxlSG92ZXIiLCJ3aGlsZURyYWciLCJ3aGlsZVRhcCIsIndoaWxlRm9jdXMiLCJjaGVja0lmVmFyaWFudE5vZGUiLCJ2YXJpYW50TGFiZWxzQXNEZXBlbmRlbmN5IiwiY3JlYXRlTW90aW9uQ29tcG9uZW50IiwicHJlbG9hZGVkRmVhdHVyZXMiLCJjcmVhdGVWaXN1YWxFbGVtZW50IiwidXNlUmVuZGVyIiwidXNlVmlzdWFsU3RhdGUiLCJmb3J3YXJkUmVmIiwiZXh0ZXJuYWxSZWYiLCJnZXRDdXJyZW50VHJlZVZhcmlhbnRzIiwidXNlTWVtbyIsInVzZUNyZWF0ZU1vdGlvbkNvbnRleHQiLCJ2aXN1YWxTdGF0ZSIsImxhenlDb250ZXh0IiwicHJlc2VuY2VDb250ZXh0IiwibGF5b3V0SWQiLCJsYXlvdXRHcm91cElkIiwidXNlTGF5b3V0SWQiLCJ2aXN1YWxFbGVtZW50UmVmIiwicmVuZGVyZXIiLCJfX2Fzc2lnbiIsInByZXNlbmNlSWQiLCJibG9ja0luaXRpYWxBbmltYXRpb24iLCJzZXRQcm9wcyIsImlzUHJlc2VuY2VSb290Iiwic3luY1JlbmRlciIsImFuaW1hdGlvblN0YXRlIiwiYW5pbWF0ZUNoYW5nZXMiLCJub3RpZnlVbm1vdW50IiwidXNlVmlzdWFsRWxlbWVudCIsIm5hbWVfMSIsInVzZUZlYXR1cmVzIiwiRnJhZ21lbnQiLCJ1c2VDYWxsYmFjayIsIm1vdW50IiwidW5tb3VudCIsInVzZU1vdGlvblJlZiIsImNyZWF0ZU1vdGlvblByb3h5IiwiY3JlYXRlQ29uZmlnIiwiY3VzdG9tTW90aW9uQ29tcG9uZW50Q29uZmlnIiwiY29tcG9uZW50Q2FjaGUiLCJQcm94eSIsIl90YXJnZXQiLCJsb3dlcmNhc2VTVkdFbGVtZW50cyIsImlzU1ZHQ29tcG9uZW50IiwidmFsdWVTY2FsZUNvcnJlY3Rpb24iLCJhZGRTY2FsZUNvcnJlY3Rpb24iLCJjb3JyZWN0b3JzIiwidHJhbnNmb3JtQXhlcyIsInRyYW5zZm9ybVByb3BzIiwic29ydFRyYW5zZm9ybVByb3BzIiwib3BlcmF0aW9uS2V5IiwiYXhlc0tleSIsInRyYW5zZm9ybVByb3BTZXQiLCJpc1RyYW5zZm9ybVByb3AiLCJ0cmFuc2Zvcm1PcmlnaW5Qcm9wcyIsImlzVHJhbnNmb3JtT3JpZ2luUHJvcCIsImlzRm9yY2VkTW90aW9uVmFsdWUiLCJsYXlvdXQiLCJpc01vdGlvblZhbHVlIiwidHJhbnNsYXRlQWxpYXMiLCJ6IiwidHJhbnNmb3JtUGVyc3BlY3RpdmUiLCJpc0NTU1ZhcmlhYmxlJDEiLCJnZXRWYWx1ZUFzVHlwZSIsIm51bWJlciIsIm51bWJlclZhbHVlVHlwZXMiLCJweCIsInJhZGl1cyIsInJvdGF0ZSIsImRlZ3JlZXMiLCJyb3RhdGVYIiwicm90YXRlWSIsInJvdGF0ZVoiLCJzY2FsZVoiLCJza2V3Iiwic2tld1giLCJza2V3WSIsInRyYW5zbGF0ZVgiLCJ0cmFuc2xhdGVZIiwidHJhbnNsYXRlWiIsIm9yaWdpblgiLCJwcm9ncmVzc1BlcmNlbnRhZ2UiLCJvcmlnaW5ZIiwib3JpZ2luWiIsImZpbGxPcGFjaXR5Iiwic3Ryb2tlT3BhY2l0eSIsIm51bU9jdGF2ZXMiLCJidWlsZEhUTUxTdHlsZXMiLCJsYXRlc3RWYWx1ZXMiLCJwcm9qZWN0aW9uIiwibGF5b3V0U3RhdGUiLCJ0cmFuc2Zvcm1UZW1wbGF0ZSIsImJ1aWxkUHJvamVjdGlvblRyYW5zZm9ybSIsImJ1aWxkUHJvamVjdGlvblRyYW5zZm9ybU9yaWdpbiIsInRyYW5zZm9ybUtleXMiLCJoYXNUcmFuc2Zvcm0iLCJoYXNUcmFuc2Zvcm1PcmlnaW4iLCJ0cmFuc2Zvcm1Jc05vbmUiLCJ2YWx1ZVR5cGUiLCJ2YWx1ZUFzVHlwZSIsImlzSHlkcmF0ZWQiLCJjb3JyZWN0ZWRWYWx1ZSIsInByb2Nlc3MiLCJhcHBseVRvIiwiZGVsdGFGaW5hbCIsInRyZWVTY2FsZSIsIl9iIiwidHJhbnNmb3JtSXNEZWZhdWx0IiwiX2MiLCJlbmFibGVIYXJkd2FyZUFjY2VsZXJhdGlvbiIsIl9kIiwiYWxsb3dUcmFuc2Zvcm1Ob25lIiwidHJhbnNmb3JtU3RyaW5nIiwidHJhbnNmb3JtSGFzWiIsIm51bVRyYW5zZm9ybUtleXMiLCJidWlsZFRyYW5zZm9ybSIsImJ1aWxkVHJhbnNmb3JtT3JpZ2luIiwiY3JlYXRlSHRtbFJlbmRlclN0YXRlIiwiY29weVJhd1ZhbHVlc09ubHkiLCJzb3VyY2UiLCJ1c2VIVE1MUHJvcHMiLCJodG1sUHJvcHMiLCJ1c2VJbml0aWFsTW90aW9uVmFsdWVzIiwidXNlU3R5bGUiLCJkcmFnZ2FibGUiLCJXZWJraXRUb3VjaENhbGxvdXQiLCJ2YWxpZE1vdGlvblByb3BzIiwiaXNWYWxpZE1vdGlvblByb3AiLCJzaG91bGRGb3J3YXJkIiwiZW1vdGlvbklzUHJvcFZhbGlkXzEiLCJjYWxjT3JpZ2luJDEiLCJwcm9ncmVzc1RvUGl4ZWxzIiwiZGFzaEtleXMiLCJjYW1lbEtleXMiLCJidWlsZFNWR0F0dHJzIiwiYXR0clgiLCJhdHRyWSIsInBhdGhMZW5ndGgiLCJwYXRoU3BhY2luZyIsInBhdGhPZmZzZXQiLCJfX3Jlc3QiLCJhdHRycyIsImRpbWVuc2lvbnMiLCJ0b3RhbFBhdGhMZW5ndGgiLCJjYWxjU1ZHVHJhbnNmb3JtT3JpZ2luIiwidG90YWxMZW5ndGgiLCJ1c2VEYXNoQ2FzZSIsImJ1aWxkU1ZHUGF0aCIsImNyZWF0ZVN2Z1JlbmRlclN0YXRlIiwidXNlU1ZHUHJvcHMiLCJ2aXN1YWxQcm9wcyIsInJhd1N0eWxlcyIsImNyZWF0ZVVzZVJlbmRlciIsImZvcndhcmRNb3Rpb25Qcm9wcyIsImZpbHRlcmVkUHJvcHMiLCJpc0RvbSIsImZpbHRlclByb3BzIiwiZWxlbWVudFByb3BzIiwiQ0FNRUxfQ0FTRV9QQVRURVJOIiwiY2FtZWxUb0Rhc2giLCJzdHIiLCJyZW5kZXJIVE1MIiwic2V0UHJvcGVydHkiLCJjYW1lbENhc2VBdHRyaWJ1dGVzIiwicmVuZGVyU1ZHIiwicmVuZGVyU3RhdGUiLCJzY3JhcGVNb3Rpb25WYWx1ZXNGcm9tUHJvcHMkMSIsIm5ld1ZhbHVlcyIsInNjcmFwZU1vdGlvblZhbHVlc0Zyb21Qcm9wcyIsInRvVXBwZXJDYXNlIiwiaXNBbmltYXRpb25Db250cm9scyIsImlzS2V5ZnJhbWVzVGFyZ2V0IiwiaXNDdXN0b21WYWx1ZSIsIm1peCIsInRvVmFsdWUiLCJyZXNvbHZlRmluYWxWYWx1ZUluS2V5ZnJhbWVzIiwicmVzb2x2ZU1vdGlvblZhbHVlIiwidW53cmFwcGVkVmFsdWUiLCJtYWtlU3RhdGUiLCJjcmVhdGVSZW5kZXJTdGF0ZSIsIm9uTW91bnQiLCJtYWtlTGF0ZXN0VmFsdWVzIiwibWFrZVVzZVZpc3VhbFN0YXRlIiwic2NyYXBlTW90aW9uVmFsdWVzIiwibW90aW9uVmFsdWVzIiwiaXNDb250cm9sbGluZ1ZhcmlhbnRzIiwiaXNWYXJpYW50Tm9kZSIsInZhcmlhbnRUb1NldCIsInJlc29sdmVkIiwidHJhbnNpdGlvbkVuZCIsIkFuaW1hdGlvblR5cGUiLCJzdmdNb3Rpb25Db25maWciLCJnZXRCQm94IiwidGFnTmFtZSIsImdldFRvdGFsTGVuZ3RoIiwiaHRtbE1vdGlvbkNvbmZpZyIsImNyZWF0ZURvbU1vdGlvbkNvbmZpZyIsImJhc2VDb25maWciLCJhZGREb21FdmVudCIsImV2ZW50TmFtZSIsInVzZURvbUV2ZW50IiwiaXNNb3VzZUV2ZW50IiwiUG9pbnRlckV2ZW50IiwicG9pbnRlclR5cGUiLCJNb3VzZUV2ZW50IiwiaXNUb3VjaEV2ZW50IiwiZGVmYXVsdFBhZ2VQb2ludCIsInBhZ2VZIiwicG9pbnRGcm9tVG91Y2giLCJwb2ludFR5cGUiLCJwb2ludCIsInBvaW50RnJvbU1vdXNlIiwiZXh0cmFjdEV2ZW50SW5mbyIsIndyYXBIYW5kbGVyIiwic2hvdWxkRmlsdGVyUHJpbWFyeVBvaW50ZXIiLCJsaXN0ZW5lciIsInN1cHBvcnRzUG9pbnRlckV2ZW50cyIsIm9ucG9pbnRlcmRvd24iLCJzdXBwb3J0c1RvdWNoRXZlbnRzIiwib250b3VjaHN0YXJ0Iiwic3VwcG9ydHNNb3VzZUV2ZW50cyIsIm9ubW91c2Vkb3duIiwibW91c2VFdmVudE5hbWVzIiwicG9pbnRlcmRvd24iLCJwb2ludGVybW92ZSIsInBvaW50ZXJ1cCIsInBvaW50ZXJjYW5jZWwiLCJwb2ludGVyb3ZlciIsInBvaW50ZXJvdXQiLCJwb2ludGVyZW50ZXIiLCJwb2ludGVybGVhdmUiLCJ0b3VjaEV2ZW50TmFtZXMiLCJnZXRQb2ludGVyRXZlbnROYW1lIiwiYWRkUG9pbnRlckV2ZW50IiwidXNlUG9pbnRlckV2ZW50IiwiY3JlYXRlTG9jayIsImxvY2siLCJnbG9iYWxIb3Jpem9udGFsTG9jayIsImdsb2JhbFZlcnRpY2FsTG9jayIsImdldEdsb2JhbExvY2siLCJvcGVuSG9yaXpvbnRhbF8xIiwib3BlblZlcnRpY2FsXzEiLCJpc0RyYWdBY3RpdmUiLCJvcGVuR2VzdHVyZUxvY2siLCJjcmVhdGVIb3ZlckV2ZW50IiwiSG92ZXIiLCJpc05vZGVPckNoaWxkIiwidXNlVW5tb3VudEVmZmVjdCIsIm1ha2VSZW5kZXJsZXNzQ29tcG9uZW50IiwiaG9vayIsImdlc3R1cmVBbmltYXRpb25zIiwib25UYXAiLCJvblRhcFN0YXJ0Iiwib25UYXBDYW5jZWwiLCJoYXNQcmVzc0xpc3RlbmVycyIsImlzUHJlc3NpbmciLCJjYW5jZWxQb2ludGVyRW5kTGlzdGVuZXJzIiwicmVtb3ZlUG9pbnRlckVuZExpc3RlbmVyIiwiY2hlY2tQb2ludGVyRW5kIiwiVGFwIiwib25Qb2ludGVyVXAiLCJnZXRJbnN0YW5jZSIsIm9uUG9pbnRlckNhbmNlbCIsInBpcGUiLCJGb2N1cyIsIm9uSG92ZXJTdGFydCIsIm9uSG92ZXJFbmQiLCJzaGFsbG93Q29tcGFyZSIsInByZXZMZW5ndGgiLCJzZWNvbmRzVG9NaWxsaXNlY29uZHMiLCJzZWNvbmRzIiwiZWFzaW5nTG9va3VwIiwibGluZWFyIiwiY2lyY0luIiwiY2lyY0luT3V0IiwiY2lyY091dCIsImJhY2tJbiIsImJhY2tJbk91dCIsImJhY2tPdXQiLCJhbnRpY2lwYXRlIiwiYm91bmNlSW4iLCJib3VuY2VJbk91dCIsImJvdW5jZU91dCIsImVhc2luZ0RlZmluaXRpb25Ub0Z1bmN0aW9uIiwiaW52YXJpYW50IiwiX19yZWFkIiwieDEiLCJ5MSIsIngyIiwieTIiLCJjdWJpY0JlemllciIsImlzRWFzaW5nQXJyYXkiLCJpc0FuaW1hdGFibGUiLCJjb21wbGV4IiwidW5kZXJEYW1wZWRTcHJpbmciLCJzdGlmZm5lc3MiLCJkYW1waW5nIiwicmVzdERlbHRhIiwicmVzdFNwZWVkIiwiY3JpdGljYWxseURhbXBlZFNwcmluZyIsInNxcnQiLCJsaW5lYXJUd2VlbiIsImtleWZyYW1lcyIsImRlZmF1bHRUcmFuc2l0aW9ucyIsImdldERlZmF1bHRUcmFuc2l0aW9uIiwidmFsdWVLZXkiLCJ0cmFuc2l0aW9uRmFjdG9yeSIsImRlZmF1bHRWYWx1ZVR5cGVzIiwib3V0bGluZUNvbG9yIiwiYm9yZGVyVG9wQ29sb3IiLCJib3JkZXJMZWZ0Q29sb3IiLCJXZWJraXRGaWx0ZXIiLCJnZXREZWZhdWx0VmFsdWVUeXBlIiwiZ2V0QW5pbWF0YWJsZU5vbmUiLCJkZWZhdWx0VmFsdWVUeXBlIiwibGVnYWN5UmVwZWF0V2FybmluZyIsImlzWmVybyIsImdldFplcm9Vbml0IiwicG90ZW50aWFsVW5pdFR5cGUiLCJnZXRWYWx1ZVRyYW5zaXRpb24iLCJzdGFydEFuaW1hdGlvbiIsIm9uQ29tcGxldGUiLCJkZWxheVRpbWVyIiwiY29udHJvbHMiLCJ2YWx1ZVRyYW5zaXRpb24iLCJpc1RhcmdldEFuaW1hdGFibGUiLCJpc09yaWdpbkFuaW1hdGFibGUiLCJvblVwZGF0ZSIsImluZXJ0aWEiLCJfX3NwcmVhZEFycmF5IiwiaHlkcmF0ZUtleWZyYW1lcyIsIndoZW4iLCJkZWxheUNoaWxkcmVuIiwic3RhZ2dlckNoaWxkcmVuIiwic3RhZ2dlckRpcmVjdGlvbiIsInJlcGVhdCIsInJlcGVhdFR5cGUiLCJyZXBlYXREZWxheSIsImlzVHJhbnNpdGlvbkRlZmluZWQiLCJ0aW1lcyIsInlveW8iLCJmbGlwIiwibG9vcCIsImNvbnZlcnRUcmFuc2l0aW9uVG9BbmltYXRpb25PcHRpb25zIiwiZ2V0UG9wbW90aW9uQW5pbWF0aW9uT3B0aW9ucyIsInN0b3AiLCJnZXRBbmltYXRpb24iLCJnZXREZWxheUZyb21UcmFuc2l0aW9uIiwiYWRkVW5pcXVlSXRlbSIsImFyciIsInJlbW92ZUl0ZW0iLCJTdWJzY3JpcHRpb25NYW5hZ2VyIiwic3Vic2NyaXB0aW9ucyIsIl90aGlzIiwiYyIsIm51bVN1YnNjcmlwdGlvbnMiLCJnZXRTaXplIiwiTW90aW9uVmFsdWUiLCJ0aW1lRGVsdGEiLCJsYXN0VXBkYXRlZCIsInVwZGF0ZVN1YnNjcmliZXJzIiwidmVsb2NpdHlVcGRhdGVTdWJzY3JpYmVycyIsInJlbmRlclN1YnNjcmliZXJzIiwiY2FuVHJhY2tWZWxvY2l0eSIsInVwZGF0ZUFuZE5vdGlmeSIsInJlbmRlciIsImdldEZyYW1lRGF0YSIsInBvc3RSZW5kZXIiLCJzY2hlZHVsZVZlbG9jaXR5Q2hlY2siLCJ2ZWxvY2l0eUNoZWNrIiwiaGFzQW5pbWF0ZWQiLCJzdWJzY3JpcHRpb24iLCJjbGVhckxpc3RlbmVycyIsIm9uUmVuZGVyUmVxdWVzdCIsImF0dGFjaCIsInBhc3NpdmVFZmZlY3QiLCJnZXRQcmV2aW91cyIsInZlbG9jaXR5UGVyU2Vjb25kIiwic3RvcEFuaW1hdGlvbiIsImNsZWFyQW5pbWF0aW9uIiwiaXNBbmltYXRpbmciLCJtb3Rpb25WYWx1ZSIsInRlc3RWYWx1ZVR5cGUiLCJkaW1lbnNpb25WYWx1ZVR5cGVzIiwidnciLCJ2aCIsImZpbmREaW1lbnNpb25WYWx1ZVR5cGUiLCJ2YWx1ZVR5cGVzIiwic2V0TW90aW9uVmFsdWUiLCJnZXRWYWx1ZSIsImFkZFZhbHVlIiwic2V0VGFyZ2V0IiwibWFrZVRhcmdldEFuaW1hdGFibGUiLCJzZXRWYXJpYW50cyIsInZhcmlhbnRMYWJlbHMiLCJnZXRWYXJpYW50IiwidmFyaWFudENoaWxkcmVuIiwiY2hlY2tUYXJnZXRGb3JOZXdWYWx1ZXMiLCJuZXdWYWx1ZUtleXMiLCJudW1OZXdWYWx1ZXMiLCJ0YXJnZXRWYWx1ZSIsInJlYWRWYWx1ZSIsInNldEJhc2VUYXJnZXQiLCJnZXRPcmlnaW5Gcm9tVHJhbnNpdGlvbiIsImdldE9yaWdpbiIsImFuaW1hdGVWaXN1YWxFbGVtZW50Iiwibm90aWZ5QW5pbWF0aW9uU3RhcnQiLCJhbmltYXRpb25zIiwiYW5pbWF0ZVZhcmlhbnQiLCJhbGwiLCJyZXNvbHZlZERlZmluaXRpb24iLCJhbmltYXRlVGFyZ2V0Iiwibm90aWZ5QW5pbWF0aW9uQ29tcGxldGUiLCJ0cmFuc2l0aW9uT3ZlcnJpZGUiLCJnZXRDaGlsZEFuaW1hdGlvbnMiLCJmb3J3YXJkRGVsYXkiLCJtYXhTdGFnZ2VyRHVyYXRpb24iLCJnZW5lcmF0ZVN0YWdnZXJEdXJhdGlvbiIsInNvcnRCeVRyZWVPcmRlciIsImFuaW1hdGVDaGlsZHJlbiIsIl9lIiwiX2YiLCJhbmltYXRpb25UeXBlU3RhdGUiLCJnZXRTdGF0ZSIsInZhbHVlVGFyZ2V0Iiwic2hvdWxkQmxvY2tBbmltYXRpb24iLCJzb3J0Tm9kZVBvc2l0aW9uIiwicHJvdGVjdGVkS2V5cyIsIm5lZWRzQW5pbWF0aW5nIiwic2hvdWxkQmxvY2siLCJ2YXJpYW50UHJpb3JpdHlPcmRlciIsIkFuaW1hdGUiLCJEcmFnIiwiRXhpdCIsInJldmVyc2VQcmlvcml0eU9yZGVyIiwibnVtQW5pbWF0aW9uVHlwZXMiLCJjcmVhdGVUeXBlU3RhdGUiLCJwcmV2UmVzb2x2ZWRWYWx1ZXMiLCJhbmltYXRlTGlzdCIsImFsbEFuaW1hdGVkS2V5cyIsImlzSW5pdGlhbFJlbmRlciIsImJ1aWxkUmVzb2x2ZWRUeXBlVmFsdWVzIiwiY2hhbmdlZEFjdGl2ZVR5cGUiLCJnZXRWYXJpYW50Q29udGV4dCIsInJlbW92ZWRLZXlzIiwiZW5jb3VudGVyZWRLZXlzIiwicmVtb3ZlZFZhcmlhbnRJbmRleCIsIl9sb29wXzEiLCJ0eXBlU3RhdGUiLCJwcm9wSXNWYXJpYW50IiwiYWN0aXZlRGVsdGEiLCJpc0luaGVyaXRlZCIsIm1hbnVhbGx5QW5pbWF0ZU9uTW91bnQiLCJwcmV2UHJvcCIsInNob3VsZEFuaW1hdGVUeXBlIiwidmFyaWFudHNIYXZlQ2hhbmdlZCIsImRlZmluaXRpb25MaXN0IiwicmVzb2x2ZWRWYWx1ZXMiLCJhbGxLZXlzIiwibWFya1RvQW5pbWF0ZSIsImRlbGV0ZSIsImFwcGx5IiwiZmFsbGJhY2tBbmltYXRpb25fMSIsImZhbGxiYWNrVGFyZ2V0IiwiZ2V0QmFzZVRhcmdldCIsInNob3VsZEFuaW1hdGUiLCJpc0FuaW1hdGVkIiwic2V0QW5pbWF0ZUZ1bmN0aW9uIiwibWFrZUFuaW1hdG9yIiwiY3JlYXRlQW5pbWF0aW9uU3RhdGUiLCJQYW5TZXNzaW9uIiwiaGFuZGxlcnMiLCJzdGFydEV2ZW50IiwibGFzdE1vdmVFdmVudCIsImxhc3RNb3ZlRXZlbnRJbmZvIiwidXBkYXRlUG9pbnQiLCJnZXRQYW5JbmZvIiwiaGlzdG9yeSIsImlzUGFuU3RhcnRlZCIsImlzRGlzdGFuY2VQYXN0VGhyZXNob2xkIiwib25TdGFydCIsIm9uTW92ZSIsImhhbmRsZVBvaW50ZXJNb3ZlIiwidHJhbnNmb3JtUG9pbnQiLCJoYW5kbGVQb2ludGVyVXAiLCJvbkVuZCIsIm9uU2Vzc2lvbkVuZCIsInBhbkluZm8iLCJpbml0aWFsSW5mbyIsIm9uU2Vzc2lvblN0YXJ0IiwicmVtb3ZlTGlzdGVuZXJzIiwidXBkYXRlSGFuZGxlcnMiLCJjYW5jZWxTeW5jIiwic3VidHJhY3RQb2ludCIsImxhc3REZXZpY2VQb2ludCIsInN0YXJ0RGV2aWNlUG9pbnQiLCJ0aW1lc3RhbXBlZFBvaW50IiwibGFzdFBvaW50Iiwibm9vcCIsImFueSIsImNvbnZlcnRCb3VuZGluZ0JveFRvQXhpc0JveCIsInplcm9EZWx0YSIsIm9yaWdpblBvaW50IiwiZWFjaEF4aXMiLCJpc05lYXIiLCJtYXhEaXN0YW5jZSIsImNhbGNMZW5ndGgiLCJ1cGRhdGVBeGlzRGVsdGEiLCJ1cGRhdGVCb3hEZWx0YSIsImRlZmF1bHRPcmlnaW4iLCJjYWxjUmVsYXRpdmVBeGlzIiwicmVsYXRpdmUiLCJhcHBseUNvbnN0cmFpbnRzIiwiZWxhc3RpYyIsImNhbGNSZWxhdGl2ZUF4aXNDb25zdHJhaW50cyIsImNhbGNWaWV3cG9ydEF4aXNDb25zdHJhaW50cyIsImxheW91dEF4aXMiLCJjb25zdHJhaW50c0F4aXMiLCJyZXNvbHZlQXhpc0VsYXN0aWMiLCJkcmFnRWxhc3RpYyIsIm1pbkxhYmVsIiwibWF4TGFiZWwiLCJyZXNvbHZlUG9pbnRFbGFzdGljIiwiZ2V0Qm91bmRpbmdCb3giLCJ0b3BMZWZ0IiwiYm90dG9tUmlnaHQiLCJ0cmFuc2Zvcm1Cb3VuZGluZ0JveCIsImNvbXBhcmVCeURlcHRoIiwiZGVwdGgiLCJpc1Byb2plY3RpbmciLCJzaG91bGRSZXNldFRyYW5zZm9ybSIsImNvbGxlY3RQcm9qZWN0aW5nQW5jZXN0b3JzIiwiYW5jZXN0b3JzIiwidXBkYXRlTGF5b3V0TWVhc3VyZW1lbnQiLCJib3giLCJnZXRMYXlvdXRTdGF0ZSIsIm5vdGlmeUJlZm9yZUxheW91dE1lYXN1cmUiLCJtZWFzdXJlVmlld3BvcnRCb3giLCJsYXlvdXRDb3JyZWN0ZWQiLCJub3RpZnlMYXlvdXRNZWFzdXJlIiwicHJldlZpZXdwb3J0Qm94IiwicmViYXNlUHJvamVjdGlvblRhcmdldCIsInNuYXBzaG90Vmlld3BvcnRCb3giLCJjYWxjUmVsYXRpdmVPZmZzZXRBeGlzIiwiY2FsY1JlbGF0aXZlT2Zmc2V0IiwiaXNEcmFnZ2FibGUiLCJfZHJhZ1giLCJyZXNldEF4aXMiLCJvcmlnaW5BeGlzIiwic2NhbGVQb2ludCIsImFwcGx5UG9pbnREZWx0YSIsImJveFNjYWxlIiwiYXBwbHlBeGlzRGVsdGEiLCJhcHBseUJveERlbHRhIiwiYXBwbHlBeGlzVHJhbnNmb3JtcyIsImZpbmFsIiwidHJhbnNmb3JtcyIsInNjYWxlS2V5Iiwib3JpZ2luS2V5IiwiYXhpc09yaWdpbiIsInhLZXlzIiwieUtleXMiLCJhcHBseUJveFRyYW5zZm9ybXMiLCJmaW5hbEJveCIsInJlbW92ZVBvaW50RGVsdGEiLCJyZW1vdmVBeGlzVHJhbnNmb3JtcyIsInJlbW92ZUF4aXNEZWx0YSIsInJlbW92ZUJveFRyYW5zZm9ybXMiLCJ1bnJlc29sdmVkSm9icyIsInB1c2hKb2IiLCJzdGFjayIsImpvYiIsInBvaW50ZXIiLCJiYXRjaExheW91dCIsImZsdXNoTGF5b3V0IiwicmVhZHMiLCJ3cml0ZXMiLCJzZXRSZWFkIiwic2V0V3JpdGUiLCJudW1TdGFja3MiLCJleGVjdXRlSm9iIiwibGFzdFBvaW50ZXJFdmVudCIsImVsZW1lbnREcmFnQ29udHJvbHMiLCJWaXN1YWxFbGVtZW50RHJhZ0NvbnRyb2xzIiwiaXNEcmFnZ2luZyIsImN1cnJlbnREaXJlY3Rpb24iLCJjb25zdHJhaW50cyIsImhhc011dGF0ZWRDb25zdHJhaW50cyIsImN1cnNvclByb2dyZXNzIiwib3Blbkdsb2JhbExvY2siLCJwYW5TZXNzaW9uIiwiZW5hYmxlTGF5b3V0UHJvamVjdGlvbiIsIm9yaWdpbkV2ZW50Iiwic25hcFRvQ3Vyc29yIiwic3RvcE1vdGlvbiIsImluaXRpYWxQb2ludCIsImdldFZpZXdwb3J0UG9pbnRGcm9tRXZlbnQiLCJjYW5jZWxMYXlvdXQiLCJyZWFkIiwid3JpdGUiLCJhZGRDaGlsZCIsImNvbGxlY3RQcm9qZWN0aW5nQ2hpbGRyZW4iLCJ0cmVlIiwiaGFzTWFudWFsbHlTZXRDdXJzb3JPcmlnaW4iLCJpc0xheW91dERyYWciLCJsb2NrUHJvamVjdGlvblRhcmdldCIsInJlc2V0VHJhbnNmb3JtIiwicmVzdG9yZVRyYW5zZm9ybSIsImdldEF4aXNNb3Rpb25WYWx1ZSIsImlzRXh0ZXJuYWxEcmFnIiwic2NoZWR1bGVVcGRhdGVMYXlvdXRQcm9qZWN0aW9uIiwiYXhpc1ZhbHVlIiwiZmx1c2hTeW5jIiwicHJlUmVuZGVyIiwicmVzb2x2ZURyYWdDb25zdHJhaW50cyIsImRyYWdQcm9wYWdhdGlvbiIsIm9uRHJhZ1N0YXJ0IiwiZHJhZ0RpcmVjdGlvbkxvY2siLCJsb2NrVGhyZXNob2xkIiwiZ2V0Q3VycmVudERpcmVjdGlvbiIsIm9uRGlyZWN0aW9uTG9jayIsInVwZGF0ZUF4aXMiLCJvbkRyYWciLCJkcmFnQ29uc3RyYWludHMiLCJyZXNvbHZlUmVmQ29uc3RyYWludHMiLCJsYXlvdXRCb3giLCJjYWxjUmVsYXRpdmVDb25zdHJhaW50cyIsInJlc29sdmVEcmFnRWxhc3RpYyIsInJlbGF0aXZlQ29uc3RyYWludHMiLCJyZWJhc2VBeGlzQ29uc3RyYWludHMiLCJvbk1lYXN1cmVEcmFnQ29uc3RyYWludHMiLCJjb25zdHJhaW50c0VsZW1lbnQiLCJjb25zdHJhaW50c0JveCIsIm1lYXN1cmVkQ29uc3RyYWludHMiLCJjYWxjVmlld3BvcnRDb25zdHJhaW50cyIsInVzZXJDb25zdHJhaW50cyIsImNvbnZlcnRBeGlzQm94VG9Cb3VuZGluZ0JveCIsImNhbmNlbERyYWciLCJ1bmxvY2tQcm9qZWN0aW9uVGFyZ2V0IiwiYW5pbWF0ZURyYWdFbmQiLCJvbkRyYWdFbmQiLCJzaG91bGREcmFnIiwibGVuZ3RoXzEiLCJ1cGRhdGVBeGlzTW90aW9uVmFsdWUiLCJ1cGRhdGVWaXN1YWxFbGVtZW50QXhpcyIsIm5leHRWYWx1ZSIsImF4aXNMYXlvdXQiLCJheGlzTGVuZ3RoIiwiYXhpc1Byb2dyZXNzIiwiY2FsY0NvbnN0cmFpbmVkTWluUG9pbnQiLCJzZXRQcm9qZWN0aW9uVGFyZ2V0QXhpcyIsIl9nIiwiZHJhZ01vbWVudHVtIiwicmVtYWluaW5nUHJvcHMiLCJkcmFnS2V5IiwiX2RyYWdZIiwiZHJhZ1RyYW5zaXRpb24iLCJpc1JlbGF0aXZlIiwicHJvamVjdGlvblBhcmVudCIsImdldFByb2plY3Rpb25QYXJlbnQiLCJnZXRMYXRlc3RWYWx1ZXMiLCJjb252ZXJ0VG9SZWxhdGl2ZVByb2plY3Rpb24iLCJyZWxhdGl2ZUNvbnN0cmFpbnRzXzEiLCJ0YXJnZXRGaW5hbCIsIm1vbWVudHVtQW5pbWF0aW9ucyIsImJvdW5jZVN0aWZmbmVzcyIsImJvdW5jZURhbXBpbmciLCJ0aW1lQ29uc3RhbnQiLCJzdGFydEF4aXNWYWx1ZUFuaW1hdGlvbiIsInN0YXJ0TGF5b3V0QW5pbWF0aW9uIiwib25EcmFnVHJhbnNpdGlvbkVuZCIsInN0b3BMYXlvdXRBbmltYXRpb24iLCJib3hQcm9ncmVzcyIsInNvdXJjZUxlbmd0aCIsInRhcmdldExlbmd0aCIsInVwZGF0ZUNvbnN0cmFpbnRzIiwiY2FsY1Bvc2l0aW9uRnJvbVByb2dyZXNzIiwib25SZWFkeSIsInN0b3BQb2ludGVyTGlzdGVuZXIiLCJkcmFnTGlzdGVuZXIiLCJzdG9wUmVzaXplTGlzdGVuZXIiLCJzdG9wTGF5b3V0VXBkYXRlTGlzdGVuZXIiLCJvbkxheW91dFVwZGF0ZSIsInByZXZEcmFnQ3Vyc29yIiwiUHJlc2VuY2UiLCJWaXNpYmlsaXR5QWN0aW9uIiwib25QYW4iLCJvblBhblN0YXJ0Iiwib25QYW5FbmQiLCJvblBhblNlc3Npb25TdGFydCIsImhhc1BhbkV2ZW50cyIsImdyb3VwRHJhZ0NvbnRyb2xzIiwiZHJhZ0NvbnRyb2xzIiwiaXNDU1NWYXJpYWJsZSIsImNzc1ZhcmlhYmxlUmVnZXgiLCJnZXRWYXJpYWJsZVZhbHVlIiwiZXhlYyIsInBhcnNlQ1NTVmFyaWFibGUiLCJ0b2tlbiIsInBpeGVsc1RvUGVyY2VudCIsInZhclRva2VuIiwiYm9yZGVyQ29ycmVjdGlvbkRlZmluaXRpb24iLCJsYXRlc3QiLCJfbGF5b3V0U3RhdGUiLCJkZWZhdWx0U2NhbGVDb3JyZWN0b3JzIiwib3JpZ2luYWwiLCJjb250YWluc0NTU1ZhcmlhYmxlcyIsImNzc1ZhcmlhYmxlcyIsInNoYWRvdyIsInRlbXBsYXRlIiwiY3JlYXRlVHJhbnNmb3JtZXIiLCJ4U2NhbGUiLCJ5U2NhbGUiLCJhdmVyYWdlU2NhbGUiLCJpXzEiLCJjc3NWYXJpYWJsZSIsIl9zdXBlciIsImZyYW1lVGFyZ2V0IiwiY3VycmVudEFuaW1hdGlvblRhcmdldCIsInN0b3BBeGlzQW5pbWF0aW9uIiwiaXNBbmltYXRpbmdUcmVlIiwib3JpZ2luQm94IiwidGFyZ2V0Qm94IiwidmlzaWJpbGl0eUFjdGlvbiIsInNob3VsZFN0YWNrQW5pbWF0ZSIsInByZXZQYXJlbnQiLCJzYWZlVG9SZW1vdmUiLCJuZXh0SWQiLCJwcmV2UGFyZW50Vmlld3BvcnRCb3giLCJwYXJlbnRMYXlvdXQiLCJnZXRMYXlvdXRJZCIsImlzUHJvdmlkZWRDb3JyZWN0RGF0YUZvclJlbGF0aXZlU2hhcmVkTGF5b3V0IiwiYm94SGFzTW92ZWQiLCJpc1plcm9Cb3giLCJheGlzSXNFcXVhbCIsImlzVGFyZ2V0TG9ja2VkIiwiYW5pbWF0ZUF4aXMiLCJzZXRWaXNpYmlsaXR5IiwiU2hvdyIsIm5vdGlmeUxheW91dEFuaW1hdGlvbkNvbXBsZXRlIiwiX19leHRlbmRzIiwiY29tcG9uZW50RGlkTW91bnQiLCJhbmltYXRlTW90aW9uVmFsdWUiLCJ1bnN1YkxheW91dFJlYWR5IiwibGF5b3V0U2FmZVRvUmVtb3ZlIiwiY29tcG9uZW50V2lsbFVubW91bnQiLCJsYXlvdXRQcm9ncmVzcyIsImdldFByb2plY3Rpb25BbmltYXRpb25Qcm9ncmVzcyIsImZyYW1lIiwidHdlZW5BeGlzIiwidW5zdWJzY3JpYmVQcm9ncmVzcyIsImxheW91dFRyYW5zaXRpb24iLCJkZWZhdWx0TGF5b3V0VHJhbnNpdGlvbiIsInplcm9BeGlzIiwiZGVmYXVsdEhhbmRsZXIiLCJsYXlvdXRSZWFkeSIsIm5vdGlmeUxheW91dFJlYWR5IiwiY3JlYXRlQmF0Y2hlciIsInF1ZXVlIiwiZmx1c2giLCJwcmVzZW5jZSIsIlByZXNlbnQiLCJhc3NpZ25Qcm9qZWN0aW9uVG9TbmFwc2hvdCIsIlNoYXJlZExheW91dENvbnRleHQiLCJGcmFtZXJUcmVlTGF5b3V0Q29udGV4dCIsImlzU2hhcmVkTGF5b3V0IiwiTWVhc3VyZSIsInN5bmNMYXlvdXQiLCJmcmFtZXJTeW5jTGF5b3V0Iiwib25Vbm1vdW50IiwiZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUiLCJzeW5jVXBkYXRlIiwiY29tcG9uZW50RGlkVXBkYXRlIiwibGF5b3V0QW5pbWF0aW9ucyIsImNyZWF0ZUxheW91dFN0YXRlIiwiZGVsdGFUcmFuc2Zvcm0iLCJ6ZXJvTGF5b3V0IiwiYnVpbGRMYXlvdXRQcm9qZWN0aW9uVHJhbnNmb3JtIiwibGF0ZXN0VHJhbnNmb3JtIiwiaWRlbnRpdHlQcm9qZWN0aW9uIiwiYnVpbGRMYXlvdXRQcm9qZWN0aW9uVHJhbnNmb3JtT3JpZ2luIiwibmFtZXMiLCJGbGF0VHJlZSIsImlzRGlydHkiLCJ0cmVlVHlwZSIsImJ1aWxkIiwicmVuZGVySW5zdGFuY2UiLCJyZWFkVmFsdWVGcm9tSW5zdGFuY2UiLCJyZW1vdmVWYWx1ZUZyb21SZW5kZXJTdGF0ZSIsInVuc3Vic2NyaWJlRnJvbUxlYWRWaXN1YWxFbGVtZW50IiwiY3Jvc3NmYWRlciIsInByb2plY3Rpb25UYXJnZXRQcm9ncmVzcyIsInJlbW92ZUZyb21WYXJpYW50VHJlZSIsImxpZmVjeWNsZXMiLCJtYW5hZ2VycyIsInByb3BTdWJzY3JpcHRpb25zIiwiY2xlYXJBbGxMaXN0ZW5lcnMiLCJtYW5hZ2VyIiwidXBkYXRlUHJvcExpc3RlbmVycyIsIm9uIiwicHJvcExpc3RlbmVyIiwiY3JlYXRlTGlmZWN5Y2xlcyIsImxlYWRQcm9qZWN0aW9uIiwibGVhZExhdGVzdFZhbHVlcyIsImhhc1ZpZXdwb3J0Qm94VXBkYXRlZCIsInZhbHVlU3Vic2NyaXB0aW9ucyIsInByZXZNb3Rpb25WYWx1ZXMiLCJiYXNlVGFyZ2V0IiwiaXNQcm9qZWN0aW9uUmVhZHkiLCJ0cmlnZ2VyQnVpbGQiLCJ2YWx1ZXNUb1JlbmRlciIsImNyb3NzZmFkZWRWYWx1ZXMiLCJnZXRDcm9zc2ZhZGVTdGF0ZSIsIm5vdGlmeVVwZGF0ZSIsInVwZGF0ZVRyZWVMYXlvdXRQcm9qZWN0aW9uIiwibGF5b3V0VHJlZSIsImZpcmVVcGRhdGVMYXlvdXRQcm9qZWN0aW9uIiwiaW5pdGlhbE1vdGlvblZhbHVlcyIsInBhdGgiLCJpc1Zpc2libGUiLCJpc01vdW50ZWQiLCJuZXdJbnN0YW5jZSIsInBvaW50VG8iLCJhZGRWYXJpYW50Q2hpbGQiLCJ1cGRhdGVMYXlvdXRQcm9qZWN0aW9uIiwiY2xvc2VzdFZhcmlhbnROb2RlIiwiZ2V0Q2xvc2VzdFZhcmlhbnROb2RlIiwiZ2V0U3RhdGljVmFsdWUiLCJzZXRTdGF0aWNWYWx1ZSIsInNjaGVkdWxlUmVuZGVyIiwiY2FuTXV0YXRlIiwicmVtb3ZlVmFsdWUiLCJyZW1vdmVPbkNoYW5nZSIsImxhdGVzdFZhbHVlIiwicmVtb3ZlT25SZW5kZXJSZXF1ZXN0IiwiYmluZFRvTW90aW9uVmFsdWUiLCJuZXdQcm9wcyIsInByZXZWYWx1ZSIsImV4aXN0aW5nVmFsdWUiLCJ1cGRhdGVNb3Rpb25WYWx1ZXNGcm9tUHJvcHMiLCJzdGFydEF0UGFyZW50IiwiY29udGV4dF8xIiwibnVtVmFyaWFudFByb3BzIiwidmFyaWFudFByb3BzIiwic2V0Q3Jvc3NmYWRlciIsIm5ld0Nyb3NzZmFkZXIiLCJyZWxhdGl2ZVRhcmdldCIsIndpdGhUcmFuc2Zvcm0iLCJ2aWV3cG9ydEJveCIsIm5vdGlmeVNldEF4aXNUYXJnZXQiLCJzaG91bGRSZWJhc2UiLCJyZWxhdGl2ZU9mZnNldCIsInNldEN1cnJlbnRWaWV3cG9ydEJveCIsIm5vdGlmeUxheW91dFVwZGF0ZSIsInByZXZUcmVlU2NhbGVYIiwicHJldlRyZWVTY2FsZVkiLCJwcmV2RGVsdGFUcmFuc2Zvcm0iLCJ0cmVlUGF0aCIsInRyZWVMZW5ndGgiLCJhcHBseVRyZWVEZWx0YXMiLCJ1cGRhdGVMYXlvdXREZWx0YXMiLCJub3RpZnlWaWV3cG9ydEJveFVwZGF0ZSIsImZpcmVSZXNvbHZlUmVsYXRpdmVUYXJnZXRCb3giLCJmb3VuZFBhcmVudCIsImFuY2VzdG9yIiwicmVzb2x2ZVJlbGF0aXZlVGFyZ2V0Qm94IiwicmVsYXRpdmVQYXJlbnQiLCJwYXJlbnRQcm9qZWN0aW9uIiwiY2FsY1JlbGF0aXZlQm94IiwiX2xheW91dFJlc2V0VHJhbnNmb3JtIiwibmV3TGVhZCIsIm9uU2V0QXhpc1RhcmdldCIsIm9uTGF5b3V0QW5pbWF0aW9uQ29tcGxldGUiLCJFbnRlcmluZyIsIkJvdW5kaW5nQm94RGltZW5zaW9uIiwicG9zaXRpb25hbEtleXMiLCJpc1Bvc2l0aW9uYWxLZXkiLCJzZXRBbmRSZXNldFZlbG9jaXR5IiwiaXNOdW1PclB4VHlwZSIsImdldFBvc0Zyb21NYXRyaXgiLCJtYXRyaXgiLCJwb3MiLCJnZXRUcmFuc2xhdGVGcm9tTWF0cml4IiwicG9zMiIsInBvczMiLCJfYmJveCIsIm1hdHJpeDNkIiwibm9uVHJhbnNsYXRpb25hbFRyYW5zZm9ybUtleXMiLCJwb3NpdGlvbmFsVmFsdWVzIiwidW5pdENvbnZlcnNpb24iLCJoYXNQb3NpdGlvbmFsS2V5IiwidGFyZ2V0UG9zaXRpb25hbEtleXMiLCJyZW1vdmVkVHJhbnNmb3JtVmFsdWVzIiwiaGFzQXR0ZW1wdGVkVG9SZW1vdmVUcmFuc2Zvcm1WYWx1ZXMiLCJjaGFuZ2VkVmFsdWVUeXBlS2V5cyIsInRvVHlwZSIsImZyb21UeXBlIiwibnVtS2V5ZnJhbWVzIiwicmVtb3ZlZFRyYW5zZm9ybXMiLCJyZW1vdmVOb25UcmFuc2xhdGlvbmFsVHJhbnNmb3JtIiwiY29udmVydGVkVGFyZ2V0IiwiY2hhbmdlZEtleXMiLCJvcmlnaW5CYm94IiwiZWxlbWVudENvbXB1dGVkU3R5bGUiLCJvcmlnaW5Db21wdXRlZFN0eWxlIiwidGFyZ2V0QmJveCIsImNvbnZlcnRDaGFuZ2VkVmFsdWVUeXBlcyIsImNoZWNrQW5kQ29udmVydENoYW5nZWRWYWx1ZVR5cGVzIiwiaHRtbENvbmZpZyIsImRvbUVsZW1lbnQiLCJkZWZhdWx0VHlwZSIsImNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIiwibXV0YWJsZVN0YXRlIiwicGFyc2VkIiwicmVzb2x2ZUNTU1ZhcmlhYmxlcyIsInBhcnNlRG9tVmFyaWFudCIsImlzUHJvamVjdGlvblRyYW5mb3JtIiwiaHRtbFZpc3VhbEVsZW1lbnQiLCJzdmdWaXN1YWxFbGVtZW50IiwiX2VsZW1lbnQiLCJjcmVhdGVEb21WaXN1YWxFbGVtZW50IiwiZmVhdHVyZUJ1bmRsZSIsIm1vdGlvbiIsImdldFByZXNlbmNlSWQiLCJQcmVzZW5jZUNoaWxkIiwicHJlc2VuY2VBZmZlY3RzTGF5b3V0IiwicHJlc2VuY2VDaGlsZHJlbiIsIm5ld0NoaWxkcmVuTWFwIiwiY2hpbGRJZCIsImFsbENvbXBsZXRlIiwiaXNDb21wbGV0ZSIsImdldENoaWxkS2V5IiwiY3JlYXRlQ3Jvc3NmYWRlciIsImxlYWQiLCJmb2xsb3ciLCJjcm9zc2ZhZGVPcGFjaXR5IiwicHJlc2VydmVGb2xsb3dPcGFjaXR5IiwicHJldk9wdGlvbnMiLCJsZWFkU3RhdGUiLCJmb2xsb3dTdGF0ZSIsImZpbmFsQ3Jvc3NmYWRlRnJhbWUiLCJwcmV2VXBkYXRlIiwic3RhcnRDcm9zc2ZhZGVBbmltYXRpb24iLCJoYXNVcGRhdGVkIiwiZnJvbUxlYWQiLCJ0b0xlYWQiLCJpbml0aWFsUHJvZ3Jlc3MiLCJwcmV2VmFsdWVzIiwibGF0ZXN0TGVhZFZhbHVlcyIsImxhdGVzdEZvbGxvd1ZhbHVlcyIsImxlYWRUYXJnZXRPcGFjaXR5IiwiZm9sbG93VGFyZ2V0T3BhY2l0eSIsImVhc2VDcm9zc2ZhZGVJbiIsImVhc2VDcm9zc2ZhZGVPdXQiLCJoYXNGb2xsb3dFbGVtZW50IiwibnVtQm9yZGVycyIsImJvcmRlckxhYmVsIiwiYm9yZGVycyIsImZvbGxvd1JhZGl1cyIsImdldFJhZGl1cyIsImxlYWRSYWRpdXMiLCJtaXhDb2xvciIsIm1peFZhbHVlcyIsInVwZGF0ZUNyb3NzZmFkZSIsIm5ld09wdGlvbnMiLCJjb21wcmVzcyIsInJhZGl1c05hbWUiLCJBbmltYXRlU2hhcmVkTGF5b3V0Iiwic3RhY2tzIiwidXBkYXRlU2NoZWR1bGVkIiwicmVuZGVyU2NoZWR1bGVkIiwic3luY0NvbnRleHQiLCJzY2hlZHVsZVVwZGF0ZSIsInNob3VsZENvbXBvbmVudFVwZGF0ZSIsIkV4aXRpbmciLCJ1cGRhdGVTdGFja3MiLCJnZXRTdGFjayIsImNsZWFyU25hcHNob3QiLCJ1cGRhdGVMZWFkQW5kRm9sbG93IiwiaGFzUm90YXRlIiwicmVzZXRWYWx1ZXMiLCJyZXNldFJvdGF0ZSIsInVwZGF0ZVNuYXBzaG90IiwiYWRkVG9TdGFjayIsInJlbW92ZUZyb21TdGFjayIsInByZXZTdGF0ZSIsIm5lZWRzQ3Jvc3NmYWRlQW5pbWF0aW9uIiwibGVhZElzRXhpdGluZyIsImdldExlYWQiLCJzaG91bGRDcm9zc2ZhZGUiLCJnZXRGb2xsb3dMYXlvdXQiLCJjb250ZXh0VHlwZSIsImlzTGF6eUJ1bmRsZSIsImRvbUFuaW1hdGlvbiIsImRvbU1heCIsInVzZU1vdGlvblZhbHVlIiwic2V0TGF0ZXN0XzEiLCJ1c2VTdGF0ZSIsInVzZU9uQ2hhbmdlIiwidXNlQ29tYmluZU1vdGlvblZhbHVlcyIsImNvbWJpbmVWYWx1ZXMiLCJ1cGRhdGVWYWx1ZSIsInVuc3Vic2NyaWJlIiwidXNlTXVsdGlPbkNoYW5nZSIsInZpZXdwb3J0U2Nyb2xsVmFsdWVzIiwiZ2V0TWl4ZXIiLCJpc0N1c3RvbVZhbHVlVHlwZSIsInVzZUltbWVkaWF0ZSIsImFyZ09mZnNldCIsImlucHV0UmFuZ2UiLCJvdXRwdXRSYW5nZSIsImludGVycG9sYXRvciIsImludGVycG9sYXRlIiwibWl4ZXIiLCJ1c2VUcmFuc2Zvcm0iLCJpbnB1dFJhbmdlT3JUcmFuc2Zvcm1lciIsInVzZUxpc3RUcmFuc2Zvcm0iLCJudW1WYWx1ZXMiLCJjcmVhdGVTY3JvbGxNb3Rpb25WYWx1ZXMiLCJzY3JvbGxYIiwic2Nyb2xsWSIsInNjcm9sbFhQcm9ncmVzcyIsInNjcm9sbFlQcm9ncmVzcyIsInNldFByb2dyZXNzIiwiY3JlYXRlU2Nyb2xsVXBkYXRlciIsImdldE9mZnNldHMiLCJ4T2Zmc2V0IiwieU9mZnNldCIsInhNYXhPZmZzZXQiLCJ5TWF4T2Zmc2V0IiwiZ2V0Vmlld3BvcnRTY3JvbGxPZmZzZXRzIiwicHJlZmVyc1JlZHVjZWRNb3Rpb24iLCJoYXNMaXN0ZW5lcnMiLCJhbmltYXRpb25Db250cm9scyIsInBlbmRpbmdBbmltYXRpb25zIiwic3Vic2NyaWJlcnMiLCJhbmltYXRpb25zXzEiLCJzZXRWYWx1ZXMiLCJEcmFnQ29udHJvbHMiLCJjb21wb25lbnRDb250cm9scyIsImNyZWF0ZURyYWdDb250cm9scyIsImNyZWF0ZU9iamVjdCIsInN0YXRlVmlzdWFsRWxlbWVudCIsIl9zdGF0ZSIsImluaXRpYWxTdGF0ZSIsImludmVydFNjYWxlIiwiaGFzV2FybmVkIiwiQW5pbWF0ZVByZXNlbmNlIiwiZXhpdEJlZm9yZUVudGVyIiwiZm9yY2VSZW5kZXIiLCJ1bmxvYWRpbmdSZWYiLCJmb3JjZWRSZW5kZXJDb3VudCIsInNldEZvcmNlZFJlbmRlckNvdW50IiwidXNlRm9yY2VVcGRhdGUiLCJsYXlvdXRDb250ZXh0IiwiZmlsdGVyZWRDaGlsZHJlbiIsImZpbHRlcmVkIiwiQ2hpbGRyZW4iLCJpc1ZhbGlkRWxlbWVudCIsIm9ubHlFbGVtZW50cyIsInByZXNlbnRDaGlsZHJlbiIsImFsbENoaWxkcmVuIiwiZXhpdGluZyIsInVwZGF0ZUNoaWxkTG9va3VwIiwiY2hpbGRyZW5Ub1JlbmRlciIsInByZXNlbnRLZXlzIiwidGFyZ2V0S2V5cyIsIm51bVByZXNlbnQiLCJpbnNlcnRpb25JbmRleCIsInJlbW92ZUluZGV4IiwicHJlc2VudENoaWxkIiwiY2xvbmVFbGVtZW50IiwiTGF6eU1vdGlvbiIsInNldElzTG9hZGVkIiwibG9hZGVkUmVuZGVyZXIiLCJsb2FkZWRGZWF0dXJlcyIsIk1vdGlvbkNvbmZpZyIsInRyYW5zaXRpb25EZXBlbmRlbmN5IiwiY3JlYXRlRG9tTW90aW9uQ29tcG9uZW50IiwidXNlQW5pbWF0aW9uIiwidXNlQ3ljbGUiLCJ1c2VEZXByZWNhdGVkQW5pbWF0ZWRTdGF0ZSIsInNldEFuaW1hdGlvblN0YXRlIiwiYW5pbWF0aW9uRGVmaW5pdGlvbiIsInVzZURlcHJlY2F0ZWRJbnZlcnRlZFNjYWxlIiwicGFyZW50U2NhbGVYIiwicGFyZW50U2NhbGVZIiwidXNlRHJhZ0NvbnRyb2xzIiwidXNlRWxlbWVudFNjcm9sbCIsInVwZGF0ZVNjcm9sbFZhbHVlcyIsImdldEVsZW1lbnRTY3JvbGxPZmZzZXRzIiwic2Nyb2xsTGlzdGVuZXIiLCJyZXNpemVMaXN0ZW5lciIsInVzZUlzUHJlc2VudCIsInVzZU1vdGlvblRlbXBsYXRlIiwiZnJhZ21lbnRzIiwibnVtRnJhZ21lbnRzIiwidXNlUmVkdWNlZE1vdGlvbiIsIm1vdGlvbk1lZGlhUXVlcnlfMSIsInNldFJlZHVjZWRNb3Rpb25QcmVmZXJlbmNlcyIsImluaXRQcmVmZXJzUmVkdWNlZE1vdGlvbiIsInNob3VsZFJlZHVjZU1vdGlvbiIsInNldFNob3VsZFJlZHVjZU1vdGlvbiIsInVzZVNwcmluZyIsImFjdGl2ZVNwcmluZ0FuaW1hdGlvbiIsInVzZVZlbG9jaXR5IiwibmV3VmVsb2NpdHkiLCJ1c2VWaWV3cG9ydFNjcm9sbCIsImFkZEV2ZW50TGlzdGVuZXJzIiwiZGVmYXVsdFRpbWVzdGVwIiwiZ2V0Q3VycmVudFRpbWUiLCJEYXRlIiwib25OZXh0RnJhbWUiLCJ1c2VEZWZhdWx0RWxhcHNlZCIsInJ1bk5leHRGcmFtZSIsImlzUHJvY2Vzc2luZyIsInN0ZXBzT3JkZXIiLCJ0b1J1biIsInRvUnVuTmV4dEZyYW1lIiwibnVtVG9SdW4iLCJ0b0tlZXBBbGl2ZSIsIldlYWtTZXQiLCJzY2hlZHVsZSIsImtlZXBBbGl2ZSIsImltbWVkaWF0ZSIsImFkZFRvQ3VycmVudEZyYW1lIiwiYnVmZmVyIiwiY2FuY2VsIiwiZnJhbWVEYXRhIiwiY3JlYXRlUmVuZGVyU3RlcCIsInN0YXJ0TG9vcCIsInByb2Nlc3NTdGVwIiwic3RlcElkIiwicHJvY2Vzc0ZyYW1lIiwic2FmZU1pbiIsIm1pbkR1cmF0aW9uIiwibWF4RHVyYXRpb24iLCJtaW5EYW1waW5nIiwibWF4RGFtcGluZyIsInJvb3RJdGVyYXRpb25zIiwiY2FsY0FuZ3VsYXJGcmVxIiwidW5kYW1wZWRGcmVxIiwiZGFtcGluZ1JhdGlvIiwiZHVyYXRpb25LZXlzIiwicGh5c2ljc0tleXMiLCJpc1NwcmluZ1R5cGUiLCJzcHJpbmciLCJkb25lIiwic3ByaW5nT3B0aW9ucyIsIm1hc3MiLCJpc1Jlc29sdmVkRnJvbUR1cmF0aW9uIiwiZGVyaXZlZCIsImVudmVsb3BlIiwiZGVyaXZhdGl2ZSIsImJvdW5jZSIsImV4cG9uZW50aWFsRGVjYXkiLCJleHAiLCJwb3ciLCJnIiwiaW5pdGlhbEd1ZXNzIiwiYXBwcm94aW1hdGVSb290IiwiZmluZFNwcmluZyIsImdldFNwcmluZ09wdGlvbnMiLCJyZXNvbHZlU3ByaW5nIiwiemVybyIsInJlc29sdmVWZWxvY2l0eSIsImNyZWF0ZVNwcmluZyIsImluaXRpYWxWZWxvY2l0eSIsImluaXRpYWxEZWx0YSIsInVuZGFtcGVkQW5ndWxhckZyZXEiLCJhbmd1bGFyRnJlcV8xIiwiY29zIiwiZGFtcGVkQW5ndWxhckZyZXFfMSIsImZyZXFGb3JUIiwic2luaCIsImNvc2giLCJpc0JlbG93VmVsb2NpdHlUaHJlc2hvbGQiLCJpc0JlbG93RGlzcGxhY2VtZW50VGhyZXNob2xkIiwiZmxpcFRhcmdldCIsIm5lZWRzSW50ZXJwb2xhdGlvbiIsInRvRnJvbURpZmZlcmVuY2UiLCJtaXhMaW5lYXJDb2xvciIsImZyb21FeHBvIiwidG9FeHBvIiwiY29sb3JUeXBlcyIsInJnYmEiLCJoc2xhIiwiZ2V0Q29sb3JUeXBlIiwibm90QW5pbWF0YWJsZSIsImZyb21Db2xvclR5cGUiLCJ0b0NvbG9yVHlwZSIsImZyb21Db2xvciIsInRvQ29sb3IiLCJibGVuZGVkIiwibWl4RnVuYyIsInplcm9Qb2ludCIsImlzTnVtIiwiY29tYmluZUZ1bmN0aW9ucyIsInRyYW5zZm9ybWVycyIsIm1peENvbXBsZXgiLCJtaXhBcnJheSIsImJsZW5kVmFsdWUiLCJmcm9tVGhpcyIsIm1peE9iamVjdCIsImFuYWx5c2UiLCJudW1OdW1iZXJzIiwibnVtUkdCIiwibnVtSFNMIiwiaHVlIiwib3JpZ2luU3RhdHMiLCJ0YXJnZXRTdGF0cyIsIm1peE51bWJlciIsImlzQ2xhbXAiLCJpbnB1dExlbmd0aCIsIm1peGVycyIsImN1c3RvbU1peGVyIiwibWl4ZXJGYWN0b3J5IiwibnVtTWl4ZXJzIiwiZWFzaW5nRnVuY3Rpb24iLCJjcmVhdGVNaXhlcnMiLCJmYXN0SW50ZXJwb2xhdGUiLCJsYXN0SW5wdXRJbmRleCIsIm1peGVySW5kZXgiLCJmb3VuZE1peGVySW5kZXgiLCJwcm9ncmVzc0luUmFuZ2UiLCJzbG93SW50ZXJwb2xhdGUiLCJyZXZlcnNlRWFzaW5nIiwibWlycm9yRWFzaW5nIiwiY3JlYXRlRXhwb0luIiwicG93ZXIiLCJjcmVhdGVCYWNrSW4iLCJjcmVhdGVBbnRpY2lwYXRlIiwiYmFja0Vhc2luZyIsIkJPVU5DRV9GSVJTVF9USFJFU0hPTEQiLCJCT1VOQ0VfU0VDT05EX1RIUkVTSE9MRCIsImFjb3MiLCJjYSIsImNjIiwicDIiLCJjb252ZXJ0T2Zmc2V0VG9UaW1lcyIsIl92YWx1ZSIsImRlZmF1bHRPZmZzZXQiLCJjcmVhdGVJbnRlcnBvbGF0b3IiLCJkZWNheSIsIm1vZGlmeVRhcmdldCIsImFtcGxpdHVkZSIsImlkZWFsIiwidHlwZXMiLCJsb29wRWxhcHNlZCIsImVsYXBzZWQiLCJmcmFtZXN5bmMiLCJwYXNzVGltZXN0YW1wIiwiZHJpdmVyQ29udHJvbHMiLCJpbnRlcnBvbGF0ZUZyb21OdW1iZXIiLCJhdXRvcGxheSIsImRyaXZlciIsInJlcGVhdE1heCIsIl9oIiwiX2oiLCJvblBsYXkiLCJvblN0b3AiLCJvblJlcGVhdCIsInJlcGVhdENvdW50IiwiY29tcHV0ZWREdXJhdGlvbiIsImlzRm9yd2FyZFBsYXliYWNrIiwiYW5pbWF0b3IiLCJkZXRlY3RBbmltYXRpb25Gcm9tT3B0aW9ucyIsImhhc1JlcGVhdERlbGF5RWxhcHNlZCIsInJldmVyc2VFbGFwc2VkIiwiZnJhbWVEdXJhdGlvbiIsInJhZGlhbnNUb0RlZ3JlZXMiLCJyYWRpYW5zIiwiaWRlbnRpdHkiLCJjcmVhdGVBdHRyYWN0b3IiLCJhbHRlckRpc3BsYWNlbWVudCIsImNvbnN0YW50IiwiZGlzcGxhY2VtZW50Iiwic3ByaW5nTW9kaWZpZWREaXNwbGFjZW1lbnQiLCJhdHRyYWN0IiwiYXR0cmFjdEV4cG8iLCJkZWdyZWVzVG9SYWRpYW5zIiwiaXNQb2ludCIsImlzUG9pbnQzRCIsImRpc3RhbmNlMUQiLCJ0b0RlY2ltYWwiLCJzbW9vdGhGcmFtZSIsInNtb290aGluZyIsImExIiwiYTIiLCJjYWxjQmV6aWVyIiwiZ2V0U2xvcGUiLCJrU2FtcGxlU3RlcFNpemUiLCJhbmdsZSIsImF0YW4yIiwiYXBwbHlPZmZzZXQiLCJoYXNSZWNlaXZlZEZyb20iLCJtWDEiLCJtWTEiLCJtWDIiLCJtWTIiLCJzYW1wbGVWYWx1ZXMiLCJGbG9hdDMyQXJyYXkiLCJhWCIsImludGVydmFsU3RhcnQiLCJjdXJyZW50U2FtcGxlIiwia1NwbGluZVRhYmxlU2l6ZSIsImd1ZXNzRm9yVCIsImluaXRpYWxTbG9wZSIsImFHdWVzc1QiLCJjdXJyZW50U2xvcGUiLCJuZXd0b25SYXBoc29uSXRlcmF0ZSIsImFBIiwiYUIiLCJjdXJyZW50VCIsImJpbmFyeVN1YmRpdmlkZSIsImdldFRGb3JYIiwieERlbHRhIiwieURlbHRhIiwiekRlbHRhIiwiY3VycmVudEFuaW1hdGlvbiIsImlzT3V0T2ZCb3VuZHMiLCJib3VuZGFyeU5lYXJlc3QiLCJzdGFydFNwcmluZyIsInByZXZfMSIsImN1cnJlbnRfMSIsImJvdW5kYXJ5XzEiLCJoZWFkaW5nXzEiLCJwb2ludEZyb21WZWN0b3IiLCJzbW9vdGgiLCJzdHJlbmd0aCIsImN1cnJlbnRGcmFtZXN0YW1wIiwic25hcCIsInBvaW50cyIsIm51bVBvaW50c18xIiwibGFzdERpc3RhbmNlIiwidmVsb2NpdHlQZXJGcmFtZSIsInhwcyIsInJhbmdlU2l6ZSIsIl9fY3JlYXRlQmluZGluZyIsImsyIiwiX19zZXRNb2R1bGVEZWZhdWx0IiwiX19pbXBvcnRTdGFyIiwibW9kIiwiQ2Fyb3VzZWwiLCJDYXJvdXNlbEl0ZW1fMSIsIkluZGljYXRvcnNfMSIsInV0aWxfMSIsIlN0eWxlZF8xIiwicmVhY3RfMSIsInByZXZBY3RpdmUiLCJjaGlsZHJlbkhlaWdodCIsInNldENoaWxkcmVuSGVpZ2h0IiwicGF1c2VkIiwic2V0UGF1c2VkIiwic2FuaXRpemVkUHJvcHMiLCJzYW5pdGl6ZVByb3BzIiwiY2hhbmdlT25GaXJzdFJlbmRlciIsInNldE5leHQiLCJ1c2VJbnRlcnZhbCIsImF1dG9QbGF5IiwiaW50ZXJ2YWwiLCJjeWNsZU5hdmlnYXRpb24iLCJuZXh0QWN0aXZlIiwiaXNOZXh0IiwicnVuQ2FsbGJhY2tzIiwic3RyaWN0SW5kZXhpbmciLCJzdG9wQXV0b1BsYXlPbkhvdmVyIiwic3dpcGUiLCJuYXZCdXR0b25zQWx3YXlzSW52aXNpYmxlIiwibmF2QnV0dG9uc0Fsd2F5c1Zpc2libGUiLCJmdWxsSGVpZ2h0SG92ZXIiLCJuYXZCdXR0b25zUHJvcHMiLCJuYXZCdXR0b25zV3JhcHBlclByb3BzIiwiTmF2QnV0dG9uIiwiTmV4dEljb24iLCJQcmV2SWNvbiIsImluZGljYXRvcnMiLCJpbmRpY2F0b3JDb250YWluZXJQcm9wcyIsImluZGljYXRvckljb25CdXR0b25Qcm9wcyIsImFjdGl2ZUluZGljYXRvckljb25CdXR0b25Qcm9wcyIsIkluZGljYXRvckljb24iLCJzaG93QnV0dG9uIiwiU3R5bGVkUm9vdCIsIm9uTW91c2VPdXQiLCJTdHlsZWRJdGVtV3JhcHBlciIsIkNhcm91c2VsSXRlbSIsInNldEhlaWdodCIsIlN0eWxlZEJ1dHRvbldyYXBwZXIiLCJTdHlsZWRJY29uQnV0dG9uIiwiSW5kaWNhdG9ycyIsInByZXNzIiwiZnJhbWVyX21vdGlvbl8xIiwic2xpZGUiLCJmYWRlIiwiZHJhZ1Byb3BzIiwiZGl2UmVmIiwiY2hlY2tBbmRTZXRIZWlnaHQiLCJsZWZ0d2FyZEV4aXQiLCJsZWZ0T3V0IiwicmlnaHR3YXJkRXhpdCIsInJpZ2h0T3V0IiwiU3R5bGVkSXRlbSIsImRpdiIsImdldE93blByb3BlcnR5U3ltYm9scyIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwiU3R5bGVkRmliZXJNYW51YWxSZWNvcmRJY29uIiwiY29tcGxldGVMaXN0SWZSZXF1aXJlZCIsImFycmF5T2ZJY29ucyIsImluZGljYXRvckljb25CdXR0b25DbGFzcyIsImluZGljYXRvckljb25CdXR0b25TdHlsZSIsImFjdGl2ZUluZGljYXRvckljb25CdXR0b25DbGFzcyIsImFjdGl2ZUluZGljYXRvckljb25CdXR0b25TdHlsZSIsInJlc3RQcm9wcyIsImNyZWF0ZUluZGljYXRvciIsIlN0eWxlZEluZGljYXRvckljb25CdXR0b24iLCJpbmRpY2F0b3JDb250YWluZXJDbGFzcyIsImluZGljYXRvckNvbnRhaW5lclN0eWxlIiwiU3R5bGVkSW5kaWNhdG9ycyIsIl9faW1wb3J0RGVmYXVsdCIsIkZpYmVyTWFudWFsUmVjb3JkXzEiLCJtYXRlcmlhbF8xIiwiJGFjdGl2ZSIsIiRhbHdheXNWaXNpYmxlIiwiJG5leHQiLCIkcHJldiIsIiRmdWxsSGVpZ2h0SG92ZXIiLCJzYW5pdGl6ZU5hdlByb3BzIiwiTmF2aWdhdGVCZWZvcmVfMSIsIk5hdmlnYXRlTmV4dF8xIiwic2F2ZWRDYWxsYmFjayIsImlkXzEiLCJzZXRJbnRlcnZhbCIsImNsZWFySW50ZXJ2YWwiLCJDYXJvdXNlbF8xIiwic2FuaXRpemUiLCJmbG9hdFJlZ2V4IiwiY29sb3JSZWdleCIsInNpbmdsZUNvbG9yUmVnZXgiLCJpc1N0cmluZyIsImNyZWF0ZVVuaXRUeXBlIiwiaXNDb2xvclN0cmluZyIsInRlc3RQcm9wIiwic3BsaXRDb2xvciIsImFOYW1lIiwiYk5hbWUiLCJjTmFtZSIsInNhdHVyYXRpb24iLCJsaWdodG5lc3MiLCJhbHBoYSQxIiwiY2xhbXBSZ2JVbml0IiwicmdiVW5pdCIsInJlZCIsImdyZWVuIiwiYmx1ZSIsInN1YnN0ciIsIm51bWJlclRva2VuIiwibnVtQ29sb3JzIiwibnVtYmVycyIsInRva2VuaXNlZCIsImNvbnZlcnROdW1iZXJzVG9aZXJvIiwibWF4RGVmYXVsdHMiLCJhcHBseURlZmF1bHRGaWx0ZXIiLCJmdW5jdGlvblJlZ2V4IiwiZnVuY3Rpb25zIiwiZXh0ZW5kU3RhdGljcyIsInNldFByb3RvdHlwZU9mIiwiX18iLCJfX2RlY29yYXRlIiwiZGVjb3JhdG9ycyIsImRlc2MiLCJSZWZsZWN0IiwiZGVjb3JhdGUiLCJfX3BhcmFtIiwicGFyYW1JbmRleCIsImRlY29yYXRvciIsIl9fZXNEZWNvcmF0ZSIsImN0b3IiLCJkZXNjcmlwdG9ySW4iLCJjb250ZXh0SW4iLCJpbml0aWFsaXplcnMiLCJleHRyYUluaXRpYWxpemVycyIsImFjY2VwdCIsImtpbmQiLCJkZXNjcmlwdG9yIiwiYWNjZXNzIiwiYWRkSW5pdGlhbGl6ZXIiLCJ1bnNoaWZ0IiwiX19ydW5Jbml0aWFsaXplcnMiLCJ0aGlzQXJnIiwidXNlVmFsdWUiLCJfX3Byb3BLZXkiLCJfX3NldEZ1bmN0aW9uTmFtZSIsImRlc2NyaXB0aW9uIiwiY29uZmlndXJhYmxlIiwiX19tZXRhZGF0YSIsIm1ldGFkYXRhS2V5IiwibWV0YWRhdGFWYWx1ZSIsIm1ldGFkYXRhIiwiX19hd2FpdGVyIiwiX2FyZ3VtZW50cyIsIlAiLCJnZW5lcmF0b3IiLCJyZWplY3QiLCJmdWxmaWxsZWQiLCJyZWplY3RlZCIsIl9fZ2VuZXJhdG9yIiwic2VudCIsInRyeXMiLCJvcHMiLCJ2ZXJiIiwib3AiLCJfX2V4cG9ydFN0YXIiLCJfX3ZhbHVlcyIsImFyIiwiX19zcHJlYWQiLCJfX3NwcmVhZEFycmF5cyIsImlsIiwiaiIsImpsIiwicGFjayIsIl9fYXdhaXQiLCJfX2FzeW5jR2VuZXJhdG9yIiwiYXN5bmNJdGVyYXRvciIsInEiLCJyZXN1bWUiLCJmdWxmaWxsIiwic2V0dGxlIiwiX19hc3luY0RlbGVnYXRvciIsIl9fYXN5bmNWYWx1ZXMiLCJfX21ha2VUZW1wbGF0ZU9iamVjdCIsImNvb2tlZCIsIl9fY2xhc3NQcml2YXRlRmllbGRHZXQiLCJyZWNlaXZlciIsIl9fY2xhc3NQcml2YXRlRmllbGRTZXQiLCJfX2NsYXNzUHJpdmF0ZUZpZWxkSW4iLCJfX2FkZERpc3Bvc2FibGVSZXNvdXJjZSIsImVudiIsImFzeW5jIiwiZGlzcG9zZSIsImlubmVyIiwiYXN5bmNEaXNwb3NlIiwiX1N1cHByZXNzZWRFcnJvciIsIlN1cHByZXNzZWRFcnJvciIsInN1cHByZXNzZWQiLCJfX2Rpc3Bvc2VSZXNvdXJjZXMiLCJmYWlsIiwiaGFzRXJyb3IiLCJyZWMiXSwic291cmNlUm9vdCI6IiJ9